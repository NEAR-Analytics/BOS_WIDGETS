{"tx_hash": "8YXXURA43BirXbRxkLJLpLWnmmshKKPJbSY8bViZJuFk", "action_id_social": "6GkDN6KqGcRfznoB8ypsm8reixqjyWm24hNgUqSXG8xs-0-widget", "block_id": 95842897, "block_timestamp": "2023-07-06T14:11:18.176Z", "signer_id": "sking.near", "widget_name": "EasyPoll.CreatePoll.Step2Question", "source_code": "const widgetOwner = \"sking.near\";\nconst id = props.id;\nconst onDelete = props.onDelete;\nconst onMoveUp = props.onMoveUp;\nconst onMoveDown = props.onMoveDown;\nconst onQuestionFieldChange = props.onQuestionFieldChange;\nconst question = props.question;\n\nconst validationConfig = {\n  question: {\n    required: true,\n    minLength: 4,\n    maxLength: 400,\n  },\n};\n\nconst onValidate = (field, value, setError) => {\n  const options = validationConfig[field];\n\n  if (options.required) {\n    if (!value || value === \"\" || value.length < 1) {\n      return setError(\"This field is required\");\n    }\n  }\n\n  if (options.minLength) {\n    if (value.length < options.minLength) {\n      return setError(\n        `Input is too short. Minimum length is ${options.minLength} characters.`\n      );\n    }\n  }\n\n  if (options.maxLength) {\n    if (value.length > options.maxLength) {\n      return setError(\n        `Input is too long. Maximum length is ${options.maxLength} characters.`\n      );\n    }\n  }\n\n  if (options.custom) {\n    const customError = options.custom(value);\n    if (customError) {\n      return setError(customError);\n    }\n  }\n\n  setError(null);\n};\n\nconst Container = styled.div`\n  background: #f4f7f7;\n  padding: 16px;\n  border-radius: 12px;\n  box-shadow: rgba(0, 0, 0, 0.05) 0px 6px 24px 0px,\n    rgba(0, 0, 0, 0.08) 0px 0px 0px 1px;\n`;\n\nconst IconButton = styled.div`\n  font-size: 18px;\n  padding: 5px;\n  transition: all 100ms ease;\n  color: #000;\n\n  &.danger {\n    color: red;\n  }\n\n  &.danger:hover {\n    color: red;\n  }\n\n  &:hover {\n    color: #4f46e5;\n    transform: scale(1.3);\n  }\n`;\n\nreturn (\n  <Container className=\"d-flex gap-3 flex-column\">\n    <div className=\"d-flex gap-3 mb-2\">\n      <h4 className=\"me-auto\">Question {id + 1}</h4>\n      <IconButton role=\"button\" title=\"Move Up\" onClick={onMoveUp}>\n        <i class=\"bi bi-chevron-up\"></i>\n      </IconButton>\n      <IconButton role=\"button\" title=\"Move Down\" onClick={onMoveDown}>\n        <i class=\"bi bi-chevron-down\"></i>\n      </IconButton>\n      <IconButton\n        className=\"danger\"\n        role=\"button\"\n        title=\"Delete Question\"\n        onClick={onDelete}\n      >\n        <i class=\"bi bi-x-lg\"></i>\n      </IconButton>\n    </div>\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.Inputs.Text`}\n      props={{\n        label: \"Title*\",\n        placeholder: \"Enter Your Question\",\n        value: question.title.value,\n        error: question.title.error,\n        onChange: (v) => onQuestionFieldChange(id, \"title\", \"value\", v),\n        validate: () =>\n          onValidate(\"title\", question.title.value, (e) =>\n            onQuestionFieldChange(id, \"title\", \"error\", e)\n          ),\n        inputProps: {\n          minLength: 4,\n          maxLength: 70,\n          required: true,\n        },\n      }}\n    />\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.Inputs.Text`}\n      props={{\n        label: \"Description\",\n        placeholder: \"More Details About Your Question (Markdown Supported)\",\n        value: question.description.value,\n        error: question.description.error,\n        onChange: (v) => onQuestionFieldChange(id, \"description\", \"value\", v),\n        validate: () =>\n          onValidate(\"description\", question.description.value, (e) =>\n            onQuestionFieldChange(id, \"description\", \"error\", e)\n          ),\n        inputProps: {\n          minLength: 0,\n          maxLength: 500,\n        },\n        textarea: true,\n      }}\n    />\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.Inputs.Toggle`}\n      props={{\n        label: \"Answer Required\",\n        value: question.required.value,\n        error: question.required.error,\n        onChange: (v) => onQuestionFieldChange(id, \"required\", \"value\", v),\n      }}\n    />\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.Inputs.Image`}\n      props={{\n        label: \"Image\",\n        value: question.imageIPFS.value,\n        error: question.imageIPFS.error,\n        onChange: (v) => onQuestionFieldChange(id, \"imageIPFS\", \"value\", v),\n      }}\n    />\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.CreatePoll.QuestionType`}\n      props={{\n        label: \"Question Type*\",\n        value: question.questionType.value,\n        error: question.questionType.error,\n        onChange: (v) => onQuestionFieldChange(id, \"questionType\", \"value\", v),\n      }}\n    />\n    {question.questionType.value === 1 && (\n      <>\n        <div className=\"d-flex align-items-center gap-2\">\n          <Widget\n            src={`${widgetOwner}/widget/EasyPoll.Inputs.Text`}\n            props={{\n              label: \"Min Choices\",\n              placeholder: \"\",\n              value: question.minChoices.value,\n              error: question.minChoices.error,\n              onChange: (v) =>\n                onQuestionFieldChange(id, \"minChoices\", \"value\", v),\n              validate: () =>\n                onValidate(\"minChoices\", question.minChoices.value, (e) =>\n                  onQuestionFieldChange(id, \"minChoices\", \"error\", e)\n                ),\n              inputProps: {\n                type: \"number\",\n                min: 1,\n                max: 100,\n              },\n            }}\n          />\n          <Widget\n            src={`${widgetOwner}/widget/EasyPoll.Inputs.Text`}\n            props={{\n              label: \"Max Choices\",\n              placeholder: \"\",\n              value: question.maxChoices.value,\n              error: question.maxChoices.error,\n              onChange: (v) =>\n                onQuestionFieldChange(id, \"maxChoices\", \"value\", v),\n              validate: () =>\n                onValidate(\"maxChoices\", question.maxChoices.value, (e) =>\n                  onQuestionFieldChange(id, \"maxChoices\", \"error\", e)\n                ),\n              inputProps: {\n                type: \"number\",\n                min: 1,\n                max: 100,\n              },\n            }}\n          />\n        </div>\n        <Widget\n          src={`${widgetOwner}/widget/EasyPoll.Inputs.Options`}\n          props={{\n            label: \"Answer Options*\",\n            value: question.choicesOptions.value,\n            error: question.choicesOptions.error,\n            onChange: (v) => {\n              console.log(v);\n              onQuestionFieldChange(id, \"choicesOptions\", \"value\", v);\n            },\n            placeholder: \"\",\n          }}\n        />\n      </>\n    )}\n    {question.questionType.value === 2 && (\n      <>\n        <div className=\"d-flex align-items-center gap-2\">\n          <Widget\n            src={`${widgetOwner}/widget/EasyPoll.Inputs.Text`}\n            props={{\n              label: \"Min Choices\",\n              placeholder: \"\",\n              value: question.minChoices.value,\n              error: question.minChoices.error,\n              onChange: (v) =>\n                onQuestionFieldChange(id, \"minChoices\", \"value\", v),\n              validate: () =>\n                onValidate(\"minChoices\", question.minChoices.value, (e) =>\n                  onQuestionFieldChange(id, \"minChoices\", \"error\", e)\n                ),\n              inputProps: {\n                type: \"number\",\n                min: 1,\n                max: 100,\n              },\n            }}\n          />\n          <Widget\n            src={`${widgetOwner}/widget/EasyPoll.Inputs.Text`}\n            props={{\n              label: \"Max Choices\",\n              placeholder: \"\",\n              value: question.maxChoices.value,\n              error: question.maxChoices.error,\n              onChange: (v) =>\n                onQuestionFieldChange(id, \"maxChoices\", \"value\", v),\n              validate: () =>\n                onValidate(\"maxChoices\", question.maxChoices.value, (e) =>\n                  onQuestionFieldChange(id, \"maxChoices\", \"error\", e)\n                ),\n              inputProps: {\n                type: \"number\",\n                min: 1,\n                max: 100,\n              },\n            }}\n          />\n        </div>\n        <Widget\n          src={`${widgetOwner}/widget/EasyPoll.Inputs.PicturesOptions`}\n          props={{\n            label: \"Answer Options*\",\n            value: question.choicesOptions.value,\n            error: question.choicesOptions.error,\n            onChange: (v) => {\n              console.log(v);\n              onQuestionFieldChange(id, \"choicesOptions\", \"value\", v);\n            },\n            placeholder: \"\",\n          }}\n        />\n      </>\n    )}\n    {question.questionType.value === 3 && (\n      <>\n        <Widget\n          src={`${widgetOwner}/widget/EasyPoll.Inputs.Text`}\n          props={{\n            label: \"0 label\",\n            placeholder: \"\",\n            value: question.label0.value,\n            error: question.label0.error,\n            onChange: (v) => onQuestionFieldChange(id, \"label0\", \"value\", v),\n            validate: () =>\n              onValidate(\"label0\", question.label0.value, (e) =>\n                onQuestionFieldChange(id, \"label0\", \"error\", e)\n              ),\n            inputProps: {\n              minLength: 0,\n              maxLength: 20,\n            },\n          }}\n        />\n        <Widget\n          src={`${widgetOwner}/widget/EasyPoll.Inputs.Text`}\n          props={{\n            label: \"5 label\",\n            placeholder: \"\",\n            value: question.label5.value,\n            error: question.label5.error,\n            onChange: (v) => onQuestionFieldChange(id, \"label5\", \"value\", v),\n            validate: () =>\n              onValidate(\"label5\", question.label5.value, (e) =>\n                onQuestionFieldChange(id, \"label5\", \"error\", e)\n              ),\n            inputProps: {\n              minLength: 0,\n              maxLength: 20,\n            },\n          }}\n        />\n        <Widget\n          src={`${widgetOwner}/widget/EasyPoll.Inputs.Text`}\n          props={{\n            label: \"10 label\",\n            placeholder: \"\",\n            value: question.label10.value,\n            error: question.label10.error,\n            onChange: (v) => onQuestionFieldChange(id, \"label10\", \"value\", v),\n            validate: () =>\n              onValidate(\"label10\", question.label10.value, (e) =>\n                onQuestionFieldChange(id, \"label10\", \"error\", e)\n              ),\n            inputProps: {\n              minLength: 0,\n              maxLength: 20,\n            },\n          }}\n        />\n      </>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sking.near/widget/EasyPoll.CreatePoll.Step2Question", "fact_widget_deployments_id": "1a0994e4af769da92fad1da820e62b87", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}