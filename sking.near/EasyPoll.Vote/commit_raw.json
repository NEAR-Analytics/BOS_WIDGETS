{"tx_hash": "5grcCLfb4xJpcNKWBTUQJQsBRF2RT2XSj5FS18R8xuH4", "action_id_social": "5P49idHsiQnY5kBCQCSDdjDUFDBtv4xnTUp7DUtVxtta-0-widget", "block_id": 95656093, "block_timestamp": "2023-07-04T03:54:53.949Z", "signer_id": "sking.near", "widget_name": "EasyPoll.Vote", "source_code": "const hasVoted = props.hasVoted ?? false;\nconst widgetOwner = props.widgetOwner ?? \"sking.near\";\nconst indexVersion = props.indexVersion ?? \"3.2.0\";\nconst blockHeight = props.blockHeight;\nconst {\n  value: { questions },\n} = props.poll;\n\nif (!questions) return <></>;\n\nState.init({\n  step: 0,\n  form: {\n    0: {\n      value: \"\",\n      error: null,\n    },\n  },\n});\n\nconst currentQuestion = questions[state.step];\nconst ipfsUrl = (cid) => `https://ipfs.near.social/ipfs/${cid}`;\n\nconst handleNext = () => {\n  if (state.form[state.step].error) return;\n\n  if (questions.length === state.step) {\n    return onFinish();\n  }\n  State.update({\n    step: questions.length === state.step ? state.step : state.step + 1,\n  });\n};\nconst handlePrev = () => {\n  State.update({\n    step: state.step - 1,\n  });\n};\n\nconst onFormFieldChange = (step, key, value) => {\n  State.update({\n    ...state,\n    form: {\n      ...state.form,\n      [step]: {\n        ...state.form[step],\n        [key]: value,\n      },\n    },\n  });\n};\n\nconst onValidate = (value, setError, options) => {\n  if (options.required) {\n    if (!value || value === \"\" || value.length < 1) {\n      return setError(\"This field is required\");\n    }\n  }\n\n  if (options.minLength) {\n    if (value.length < options.minLength) {\n      return setError(\n        `Input is too short. Minimum length is ${options.minLength} characters.`\n      );\n    }\n  }\n\n  if (options.maxLength) {\n    if (value.length > options.maxLength) {\n      return setError(\n        `Input is too long. Maximum length is ${options.maxLength} characters.`\n      );\n    }\n  }\n\n  if (options.custom) {\n    const customError = options.custom(value);\n    if (customError) {\n      return setError(customError);\n    }\n  }\n\n  setError(null);\n};\n\nconst formatStateForDB = (input) => {\n  let answers = input;\n\n  Object.keys(answers).forEach((key, index) => {\n    answers[key] = answers[key].value;\n  });\n\n  return {\n    answers: answers,\n    timestamp: Date.now(),\n    pollBlockHeight: blockHeight,\n  };\n};\n\nconst onFinish = () => {\n  const formattedAnswers = formatStateForDB(state.form);\n\n  console.log(formattedAnswers);\n\n  const commit = {\n    index: {\n      poll_question: JSON.stringify(\n        {\n          key: `answer-v${indexVersion}`,\n          value: formattedAnswers,\n        },\n        undefined,\n        0\n      ),\n    },\n  };\n\n  State.update({ commitLoading: true });\n  Social.set(commit, {\n    force: true,\n    onCommit: () => {\n      State.update({ commitLoading: false, committed: true });\n    },\n    onCancel: () => {\n      State.update({ commitLoading: false });\n    },\n  });\n};\n\nreturn (\n  <div\n    className=\"d-flex flex-column gap-1\"\n    style={{\n      border: \"1.5px solid #4f46e520\",\n      padding: \"12px\",\n      borderRadius: \"16px\",\n    }}\n  >\n    <div className=\"d-flex\">\n      <p\n        style={{\n          backgroundColor: \"#4f46e5\",\n          color: \"#ffd50d\",\n          borderRadius: \"100px\",\n          minWidth: 36,\n          height: 36,\n          fontSize: 17,\n          fontWeight: \"700\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        {state.step + 1}\n      </p>\n      <div\n        style={{\n          fontWeight: \"700\",\n          fontSize: currentQuestion.question.length > 200 ? 17 : 24,\n          marginLeft: \"15px\",\n          maxHeight: 1000,\n          overflow: \"auto\",\n        }}\n      >\n        <Markdown text={currentQuestion.question} />\n      </div>\n    </div>\n\n    {currentQuestion.imageIPFS && (\n      <div className=\"d-flex w-100 mb-3\">\n        <img\n          src={ipfsUrl(currentQuestion.imageIPFS)}\n          style={{\n            maxHeight: 400,\n            minHeight: 200,\n            maxWidth: \"100%\",\n            minWidth: \"100px\",\n            objectFit: \"contain\",\n          }}\n        />\n      </div>\n    )}\n\n    {(currentQuestion.questionType === \"0\" ||\n      currentQuestion.questionType === \"1\" ||\n      currentQuestion.questionType === \"2\") && (\n      <Widget\n        src={`${widgetOwner}/widget/EasyPoll.Inputs.Choices`}\n        props={{\n          label:\n            currentQuestion.questionType === \"0\" ||\n            currentQuestion.questionType === \"1\"\n              ? \"Select one option:\"\n              : \"Select multiple options:\",\n          placeholder: \"Type Your Answer Here...\",\n          value: state.form[state.step].value,\n          error: state.form[state.step].error,\n          onChange: (v) => onFormFieldChange(state.step, \"value\", v),\n          choices:\n            currentQuestion.questionType === \"0\"\n              ? [\"Yes\", \"No\"]\n              : currentQuestion.choicesOptions,\n          type: currentQuestion.questionType === \"2\" ? \"multiple\" : \"single\",\n        }}\n      />\n    )}\n    {currentQuestion.questionType === \"3\" && (\n      <Widget\n        src={`${widgetOwner}/widget/EasyPoll.Inputs.Text`}\n        props={{\n          label: \"Answer\",\n          placeholder: \"Type Your Answer Here...\",\n          value: state.form[state.step].value,\n          error: state.form[state.step].error,\n          onChange: (v) => onFormFieldChange(state.step, \"value\", v),\n          validate: () =>\n            onValidate(\n              state.form[state.step].value,\n              (e) => onFormFieldChange(state.step, \"error\", e),\n              {\n                maxLength: 2000,\n              }\n            ),\n          inputProps: {\n            maxLength: 2000,\n            autoFocus: true,\n          },\n          textarea: true,\n        }}\n      />\n    )}\n\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.Inputs.Footer`}\n      props={{\n        hasNext: questions.length > 1 && state.step !== questions.length - 1,\n        onNext: handleNext,\n        hasSubmit: state.step === questions.length - 1,\n        onSubmit: onFinish,\n        hasPrev: state.step > 0,\n        onPrev: handlePrev,\n      }}\n    />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sking.near/widget/EasyPoll.Vote", "fact_widget_deployments_id": "efab19e05d1687c237c31e8e1e606751", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}