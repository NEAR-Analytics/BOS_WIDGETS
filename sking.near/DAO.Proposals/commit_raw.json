{"tx_hash": "8gWc4qFk8yUpDVJgcFLYUJqBv9Bt1h5B45ck3rS3pYTa", "action_id_social": "FWxUFmb4wkZNknugPWbokazC5vXXD1tSmMtheKbKhPSj-0-widget", "block_id": 91530814, "block_timestamp": "2023-05-10T12:38:06.077Z", "signer_id": "sking.near", "widget_name": "DAO.Proposals", "source_code": "const WIDGET_AUTHOR = \"sking.near\";\nconst daoId = props.daoId ?? \"multi.sputnik-dao.near\";\nconst proposalsPerPage = props.proposalsPerPage ?? 5; // Number of proposals to fetch at a time\n\nState.init({\n  daoId,\n  proposals: [],\n  lastProposalId: null, // To keep track of the last loaded proposal\n  hasMore: true, // Boolean to know if there are more proposals to load\n});\n\nconst loadProposals = () => {\n  const lastProposalId =\n    state.lastProposalId !== null\n      ? state.lastProposalId\n      : Near.view(daoId, \"get_last_proposal_id\");\n  if (lastProposalId === null) return;\n\n  const fromIndex = Math.max(0, lastProposalId - proposalsPerPage + 1); // Ensures fromIndex is never less than 0\n  const limit = fromIndex === 0 ? lastProposalId + 1 : proposalsPerPage; // Ensure we don't fetch the same proposals twice if fromIndex is 0\n\n  const newProposals = Near.view(daoId, \"get_proposals\", {\n    from_index: fromIndex,\n    limit: limit,\n  });\n  if (newProposals === null) return;\n\n  State.update({\n    ...state,\n    hasMore: fromIndex > 0,\n    proposals: [...state.proposals, ...newProposals.reverse()],\n    lastProposalId: fromIndex - 1,\n  });\n};\n\nconst onChangeDAO = (newDaoId) => {\n  State.update({\n    daoId: newDaoId,\n    proposals: [],\n    lastProposalId: null,\n    hasMore: true,\n  });\n};\n\nreturn (\n  <>\n    <div>\n      <h3>DAO Proposals</h3>\n      <div className=\"mb-2\">\n        <p className=\"m-1\">Sputnik Contract ID:</p>\n        <input\n          type=\"text\"\n          placeholder=\"example.sputnik-dao.near\"\n          onChange={(e) => onChangeDAO(e.target.value)}\n        />\n      </div>\n\n      <hr />\n\n      <div>\n        <InfiniteScroll loadMore={loadProposals} hasMore={state.hasMore}>\n          {state.proposals.map((proposal, i) => (\n            <Widget\n              key={i}\n              src={WIDGET_AUTHOR + \"/widget/DAO.Proposal\"}\n              props={{ daoId: state.daoId, proposal: proposal }}\n            />\n          ))}\n        </InfiniteScroll>\n      </div>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sking.near/widget/DAO.Proposals", "fact_widget_deployments_id": "ca50a451e81b61af6c80bc69b1edf55a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 25}