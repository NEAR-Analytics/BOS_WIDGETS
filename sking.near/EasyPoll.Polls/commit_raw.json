{"tx_hash": "B5JQ8UkwLPGvQuXLaJBqgQejrXQbuy3GV5xc3joDpUe8", "action_id_social": "H4YyHu8mEPCFnWfNg6doNJ9GpwzJkBwnM56hNLNQWg8S-0-widget", "block_id": 95975128, "block_timestamp": "2023-07-08T07:11:16.029Z", "signer_id": "sking.near", "widget_name": "EasyPoll.Polls", "source_code": "const indexVersion = props.indexVersion ?? \"4.0.0\";\nconst filterByUser = props.filterByUser;\nconst skipHumanVericationFor = props.skipHumanVericationFor;\nconst onlyVerifiedHumans = props.onlyVerifiedHumans ?? true;\nconst blackList = props.blackList;\nconst tabs = props.tabs;\nconst draft = props.draft ?? false;\n\nState.init({\n  polls: {},\n});\n\nconst widgetOwner = \"sking.near\";\n\nconst getFirstSBTToken = (accountId) => {\n  const view = Near.view(\"registry.i-am-human.near\", \"sbt_tokens_by_owner\", {\n    account: accountId,\n    issuer: \"fractal.i-am-human.near\",\n  });\n  return view?.[0]?.[1]?.[0];\n};\n\nconst shouldDisplayUserQuestions = (accountId) => {\n  if (blackList) {\n    return !blackList.includes(accountId);\n  }\n  if (onlyVerifiedHumans) {\n    return (\n      getFirstSBTToken(accountId) !== undefined ||\n      skipHumanVericationFor.includes(accountId)\n    );\n  }\n  return true;\n};\n\nlet keys = `*/easypoll-${indexVersion}/${draft ? \"draft\" : \"poll\"}/*`;\n\nif (filterByUser) {\n  keys = filterByUser.map((v) => {\n    return `${v}/easypoll-${indexVersion}/${draft ? \"draft\" : \"poll\"}/*`;\n  });\n}\n\nlet results = Social.keys(keys, \"final\", {\n  return_type: \"BlockHeight\",\n});\nif (!results) {\n  return \"Loading...\";\n}\n\nconst polls_keys = [];\n\n// TODO: should cache the logic bellow in state, polls_keys can be huge\nObject.keys(results).forEach((accountId) => {\n  return Object.keys(\n    results[accountId][`easypoll-${indexVersion}`][draft ? \"draft\" : \"poll\"]\n  ).forEach((pollId) => {\n    polls_keys.push({\n      accountId,\n      pollId,\n      blockHeight:\n        results[accountId][`easypoll-${indexVersion}`][\n          draft ? \"draft\" : \"poll\"\n        ][pollId],\n    });\n  });\n});\npolls_keys = polls_keys.sort((a, b) => b.blockHeight - a.blockHeight); // desc\npolls_keys = polls_keys.filter((p) => shouldDisplayUserQuestions(p.accountId));\n\nreturn (\n  <>\n    <div className=\"d-flex flex-column gap-4 mb-3\">\n      {polls_keys.map((p) => {\n        const src = `${p.accountId}/easypoll-${indexVersion}/${\n          draft ? \"draft\" : \"poll\"\n        }/${p.pollId}`;\n        return (\n          <Widget\n            src={`${widgetOwner}/widget/EasyPoll.PollCard`}\n            props={{\n              src: src,\n              blockHeight: p.blockHeight,\n              href: tabs.VIEW_POLL.href(src, p.blockHeight),\n              editHref: tabs.EDIT_POLL.href(src, p.blockHeight),\n              deleteHref: tabs.DELETE_POLL.href(src, p.blockHeight),\n              indexVersion,\n            }}\n          />\n        );\n      })}\n    </div>\n    {polls_keys.length < 1 && <div>Looks like there are no polls to show.</div>}\n    {/* TODO: NEED PAGINATION */}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sking.near/widget/EasyPoll.Polls", "fact_widget_deployments_id": "ab7279827f768f1cb1e8dd927d49daa6", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}