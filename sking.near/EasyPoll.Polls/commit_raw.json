{"tx_hash": "CKDqU2v7wm2rMfaUXrGajKkJUKfcjQ9ksdH19UU6nkSC", "action_id_social": "FqTc7NXQDbKFWhYXgrBpmQYSmgxJWs6u3YvVzgavRyer-0-widget", "block_id": 96284510, "block_timestamp": "2023-07-12T08:01:42.701Z", "signer_id": "sking.near", "widget_name": "EasyPoll.Polls", "source_code": "const indexVersion = props.indexVersion ?? \"4.0.0\";\nconst filterByUser = props.filterByUser;\nconst skipHumanVericationFor = props.skipHumanVericationFor;\nconst onlyVerifiedHumans = props.onlyVerifiedHumans ?? true;\nconst onlyOfficialNDCPolls = props.onlyOfficialNDCPolls ?? true;\nconst blackList = props.blackList;\nconst tabs = props.tabs;\nconst customKeys = props.customKeys;\nconst type = props.type ?? \"poll\"; // draft, poll, official\n\nconst INITIAL_PAGE = 0;\nconst PAGE_SIZE = 15;\nconst widgetOwner = \"sking.near\";\n\nState.init({\n  currentPage: INITIAL_PAGE,\n});\n\nconst onPageChange = (pageNumber) => {\n  pageNumber = pageNumber - 1;\n  if (pageNumber === state.currentPage) {\n    console.log(`Selected the same page number as before: ${pageNumber}`);\n    return;\n  }\n  State.update({\n    currentPage: pageNumber,\n  });\n};\n\nconst getFirstSBTToken = (accountId) => {\n  const view = Near.view(\"registry.i-am-human.near\", \"sbt_tokens_by_owner\", {\n    account: accountId,\n    issuer: \"fractal.i-am-human.near\",\n  });\n  return view?.[0]?.[1]?.[0];\n};\n\nconst shouldDisplayUserQuestions = (accountId) => {\n  if (blackList) {\n    return !blackList.includes(accountId);\n  }\n  if (onlyVerifiedHumans) {\n    return (\n      getFirstSBTToken(accountId) !== undefined ||\n      skipHumanVericationFor.includes(accountId)\n    );\n  }\n  return true;\n};\n\nlet keys = `*/easypoll-${indexVersion}/${type}/*`;\n\nif (filterByUser) {\n  keys = filterByUser.map((v) => {\n    return `${v}/easypoll-${indexVersion}/${type}/*`;\n  });\n}\n\nif (customKeys) {\n  keys = customKeys;\n}\n\nlet results = Social.keys(keys, \"final\", {\n  return_type: \"BlockHeight\",\n});\nconsole.log(\"results\", results);\nif (!results) {\n  return \"Loading...\";\n}\n\nconst polls_keys = [];\n\n// TODO: should cache the logic bellow in state, polls_keys can be huge\nObject.keys(results).forEach((accountId) => {\n  return Object.keys(results[accountId][`easypoll-${indexVersion}`]).forEach(\n    (poll_type) => {\n      return Object.keys(\n        results[accountId][`easypoll-${indexVersion}`][poll_type]\n      ).forEach((pollId) => {\n        polls_keys.push({\n          accountId,\n          pollId,\n          blockHeight:\n            results[accountId][`easypoll-${indexVersion}`][poll_type][pollId],\n          type: poll_type,\n        });\n      });\n    }\n  );\n});\npolls_keys = polls_keys.sort((a, b) => b.blockHeight - a.blockHeight); // desc\npolls_keys = polls_keys.filter((p) => shouldDisplayUserQuestions(p.accountId));\n\nconst start = state.currentPage * PAGE_SIZE;\nconst end = start + PAGE_SIZE;\nconst paginated_polls_keys = polls_keys.slice(start, end);\n\nreturn (\n  <>\n    <div className=\"d-flex flex-column gap-4 mb-3\">\n      {paginated_polls_keys.map((p) => {\n        const src = `${p.accountId}/easypoll-${indexVersion}/${p.type}/${p.pollId}`;\n        return (\n          <Widget\n            src={`${widgetOwner}/widget/EasyPoll.PollCard`}\n            props={{\n              src: src,\n              blockHeight: p.blockHeight,\n              href: tabs.VIEW_POLL.href(src, p.blockHeight),\n              editHref: tabs.EDIT_POLL.href(src, p.blockHeight),\n              deleteHref: tabs.DELETE_POLL.href(src, p.blockHeight),\n              indexVersion,\n              onlyOfficialNDCPolls,\n              topLabel: p.type === \"draft\" ? \"Draft\" : undefined,\n            }}\n          />\n        );\n      })}\n    </div>\n    {paginated_polls_keys.length < 1 && (\n      <div>Looks like there are no polls to show.</div>\n    )}\n    {polls_keys.length > PAGE_SIZE && (\n      <Widget\n        src={`${widgetOwner}/widget/Common.Paginate`}\n        props={{\n          totalCount: polls_keys.length,\n          pageSize: PAGE_SIZE,\n          onPageChange,\n          currentPage: state.currentPage + 1,\n        }}\n      />\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sking.near/widget/EasyPoll.Polls", "fact_widget_deployments_id": "afcef78531ad7eff58e161e57568acfd", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}