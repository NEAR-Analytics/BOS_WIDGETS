{"tx_hash": "5grcCLfb4xJpcNKWBTUQJQsBRF2RT2XSj5FS18R8xuH4", "action_id_social": "5P49idHsiQnY5kBCQCSDdjDUFDBtv4xnTUp7DUtVxtta-0-widget", "block_id": 95656093, "block_timestamp": "2023-07-04T03:54:53.949Z", "signer_id": "sking.near", "widget_name": "EasyPoll.Polls", "source_code": "const indexVersion = props.indexVersion ?? \"3.2.0\";\nconst filterByUser = props.filterByUser;\nconst skipHumanVericationFor = props.skipHumanVericationFor;\nconst onlyVerifiedHumans = props.onlyVerifiedHumans ?? true;\nconst blackList = props.blackList;\nconst tabs = props.tabs;\n\nState.init({\n  polls: {},\n});\n\nconst widgetOwner = \"sking.near\";\n\nconst getFirstSBTToken = (accountId) => {\n  const view = Near.view(\"registry.i-am-human.near\", \"sbt_tokens_by_owner\", {\n    account: accountId,\n    issuer: \"fractal.i-am-human.near\",\n  });\n  return view?.[0]?.[1]?.[0];\n};\n\nconst shouldDisplayUserQuestions = (accountId) => {\n  if (blackList) {\n    return !blackList.includes(accountId);\n  }\n  if (filterByUser) {\n    return filterByUser.includes(accountId);\n  }\n  if (onlyVerifiedHumans) {\n    return (\n      getFirstSBTToken(accountId) !== undefined ||\n      skipHumanVericationFor.includes(accountId)\n    );\n  }\n  return true;\n};\n\nlet polls = Social.index(\"poll_question\", `question-v${indexVersion}`, {\n  accountId: filterByUser,\n});\n\nif (JSON.stringify(polls) != JSON.stringify(state.polls)) {\n  State.update({ polls: polls });\n}\n\nif (!polls) {\n  return \"Loading\";\n}\n\npolls = polls.filter((p) => shouldDisplayUserQuestions(p.accountId));\n\npolls = polls.sort((q1, q2) => {\n  const isQ1Finished = q1.value.endTimestamp < Date.now();\n  const isQ2Finished = q2.value.endTimestamp < Date.now();\n  if (isQ1Finished && !isQ2Finished) return 1;\n  if (!isQ1Finished && isQ2Finished) return -1;\n  if (isQ1Finished && isQ2Finished)\n    return q2.value.endTimestamp - q1.value.endTimestamp;\n  return q1.value.endTimestamp - q2.value.endTimestamp;\n});\n\nlet usersMakingQuestions = [];\nfor (let i = 0; i < polls.length; i++) {\n  if (!usersMakingQuestions.includes(polls[i].accountId)) {\n    usersMakingQuestions.push(polls[i].accountId);\n  }\n}\n\nreturn (\n  <>\n    <div className=\"d-flex flex-column gap-4 mb-3\">\n      {polls.map((poll) => {\n        return (\n          <Widget\n            src={`${widgetOwner}/widget/EasyPoll.PollCard`}\n            props={{\n              poll: poll,\n              indexVersion,\n              href: tabs.VIEW_POLL.href + poll.blockHeight,\n            }}\n          />\n        );\n      })}\n    </div>\n    {polls.length < 1 && <div>Looks like there are no polls to show.</div>}\n    {/*TODO add a page picker instead the infinite scroll?*/}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sking.near/widget/EasyPoll.Polls", "fact_widget_deployments_id": "defe654e8315643740dd5ea067eef7d0", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}