{"tx_hash": "CxcBDksrmEBd7aVzamzr7QmSzNQibEgS1dNgj6WPGCBg", "action_id_social": "7JfpjB6sNb9hgaJKp7DnxhaccJWbrqSf2BCEHgPXTCjV-0-widget", "block_id": 103759778, "block_timestamp": "2023-10-19T21:06:30.009Z", "signer_id": "ulisesmarin.near", "widget_name": "Wormhole3.Twitter", "source_code": "// App Config\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"wormhole3.near\",\n        bindingContractId: \"binding.wormhole3.near\",\n        nearSocialContractId: \"social.near\",\n        senderId: \"sender.wormhole3.near\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        ipfsPrefix: \"https://ipfs.near.social/ipfs\",\n        gateway: \"near.org\",\n        wormhole3ApiUrl: \"https://near-api.wormhole3.io\",\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"wormhole3.testnet\",\n        bindingContractId: \"binding.wormhole3.testnet\",\n        nearSocialContractId: \"v1.social08.testnet\",\n        senderId: \"sender.wormhole3.testnet\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        ipfsPrefix: \"https://ipfs.near.social/ipfs\",\n        gateway: \"test.near.org\",\n        wormhole3ApiUrl: \"https://near-api-test.wormhole3.io\",\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\n\nconst accountId = props.accountId ?? context.accountId;\nif (!accountId) {\n  return \"Please login first\";\n}\n\n// Wormhole3 APIs\nfunction getWh3TwitterAuthUrl() {\n  const res = fetch(\n    config.wormhole3ApiUrl + `/auth/register?nearId=${accountId}`\n  );\n  if (res.ok) {\n    return res.body;\n  }\n}\n\nfunction getTwitterInfoByNonce(nonce) {\n  return asyncFetch(\n    config.wormhole3ApiUrl + `/users/byNonce?nonce=${nonce}`\n  ).then((res) => {\n    if (res.ok) {\n      return res.body;\n    }\n  });\n}\n\nfunction getTwitterInfoById(twitterId) {\n  return asyncFetch(\n    config.wormhole3ApiUrl + `/users/byTwitterId?twitterId=${twitterId}`\n  ).then((res) => {\n    if (res.ok) {\n      return res.body;\n    }\n  });\n}\n\n// Wormhole3 Account Binding Contract\nfunction getHandle() {\n  return Near.asyncView(config.bindingContractId, \"get_handle\", {\n    platform: \"twitter\",\n    account_id: accountId,\n  });\n}\n\nfunction getProposal() {\n  return Near.asyncView(config.bindingContractId, \"get_proposal\", {\n    platform: \"twitter\",\n    account_id: accountId,\n  });\n}\n\nfunction lookupAccount(twitterId) {\n  return Near.asyncView(config.bindingContractId, \"lookup_account\", {\n    platform: \"twitter\",\n    handle: twitterId.toString(),\n  });\n}\n\n// NEAR Social\nfunction isPostPermissionGranted() {\n  return Near.asyncView(\n    config.nearSocialContractId,\n    \"is_write_permission_granted\",\n    {\n      predecessor_id: config.senderId,\n      key: `${accountId}/post`,\n    }\n  );\n}\n\n// Helper functions\nconst ONE_YOCTO = \"1\";\nconst FIVE_MIN_MS = 5 * 60 * 1000;\nconst { nonce, authUrl, updatedAt } = Storage.privateGet(\"twitterAuth\");\nconst requestedTwitterAuth =\n  nonce && updatedAt && updatedAt > Date.now() - FIVE_MIN_MS;\n\nfunction updateTwitterAuthUrl(force) {\n  // get twitter auth url\n  if (\n    state.handleChecked &&\n    (!requestedTwitterAuth || force) &&\n    !state.twitterAuthUrl\n  ) {\n    const { authUrl, nonce } = getWh3TwitterAuthUrl();\n    console.log(\"now update twitter auth url\");\n    if (nonce && authUrl) {\n      State.update({\n        twitterAuthUrl: authUrl,\n        nonce,\n      });\n      // save nonce to local storage\n      Storage.privateSet(\"twitterAuth\", {\n        authUrl,\n        nonce,\n        updatedAt: Date.now(),\n      });\n    }\n  }\n}\n\n// check whether binding proposal has been submitted\nfunction checkProposal(handle) {\n  getProposal().then((p) => {\n    State.update({\n      hasProposal: p != null && p.handle === handle,\n    });\n  });\n}\n\n// check whether post permission has been granted to sender\nfunction checkPostPermission() {\n  isPostPermissionGranted().then((permissionGranted) => {\n    State.update({\n      permissionGranted,\n    });\n  });\n}\n\n// Component states\nState.init({\n  twitterAuthorized: false,\n  connected: false,\n  twitterId: \"\",\n  twitterUsername: \"\",\n  twitterName: \"\",\n  twitterAvatar: \"\",\n  twitterAuthUrl: \"\",\n  nonce: \"\",\n  hasProposal: undefined,\n  permissionGranted: undefined,\n  handleChecked: false,\n  boundAccountId: undefined,\n});\n\nconst twitterInfoReady = state.twitterId || state.twitterAuthUrl;\nconst permissionReady =\n  (state.twitterAuthUrl ||\n    state.hasProposal !== undefined ||\n    state.connected) &&\n  state.permissionGranted !== undefined;\nconsole.log(\"loading\", {\n  connected: state.connected,\n  hasProposal: state.hasProposal,\n  permissionGranted: state.permissionGranted,\n  twitterInfoReady,\n  permissionReady,\n  requestedTwitterAuth,\n});\nconst loading = !twitterInfoReady || !permissionReady;\n\nfunction init(force) {\n  if (!twitterInfoReady || force) {\n    // get twitter handle binding\n    getHandle().then((twitterId) => {\n      State.update({\n        handleChecked: true,\n      });\n      if (twitterId) {\n        State.update({\n          connected: true,\n          twitterId,\n        });\n        // get twitter user name from twitter ID\n        getTwitterInfoById(twitterId).then(\n          ({ twitterUsername, twitterName, profileImg }) => {\n            State.update({\n              twitterUsername,\n              twitterName,\n              twitterAvatar: profileImg,\n            });\n          }\n        );\n      } else {\n        // If twitter authorization has been done, retrieve my twitter ID,\n        // and user can start propose binding and grant write permission\n        if (requestedTwitterAuth) {\n          // get twitter ID and username\n          getTwitterInfoByNonce(nonce).then(\n            ({ twitterId, twitterUsername, twitterName, profileImg }) => {\n              console.log(\n                \"getTwitterInfoByNonce: twitter id\",\n                nonce,\n                twitterId\n              );\n              if (twitterId) {\n                // check proposal\n                checkProposal(twitterId);\n                // look up NEAR account with the twitter ID\n                lookupAccount(twitterId).then((boundAccountId) => {\n                  if (boundAccountId && accountId !== boundAccountId) {\n                    State.update({\n                      boundAccountId,\n                    });\n                    updateTwitterAuthUrl(true);\n                  }\n                  State.update({\n                    twitterAuthorized: true,\n                    twitterId,\n                    twitterUsername,\n                    twitterName,\n                    twitterAvatar: profileImg,\n                  });\n                });\n              } else {\n                // Nonce is invalid, the auth URL is not used yet\n                State.update({\n                  twitterAuthUrl: authUrl,\n                });\n              }\n            }\n          );\n        } else {\n          // fetch twitter auth url if not yet requested auth url\n          updateTwitterAuthUrl();\n        }\n      }\n    });\n  }\n  // check post permission\n  if (state.permissionGranted === undefined) {\n    checkPostPermission();\n  }\n}\n\ninit();\n\nif (loading) {\n  return \"Loading ...\";\n}\n\nconst {\n  connected,\n  twitterAuthorized,\n  twitterUsername,\n  twitterName,\n  twitterAvatar,\n  twitterAuthUrl,\n  permissionGranted,\n  hasProposal,\n  boundAccountId,\n} = state;\n\n// Phase 4: Twitter account connected and post permission granted\nconst phase4 = connected && permissionGranted;\n\n// Phase 2: User needs to grant permission when,\n// 1. twitter authorized, but permission or proposal is not ready\n// 2. handle has been bound, but post permission is not granted\nconst phase2 =\n  !phase4 &&\n  ((twitterAuthorized && (!permissionGranted || !hasProposal)) ||\n    (connected && !permissionGranted));\n// Phase 2 status\nconst phase2Fail = phase2 && boundAccountId; // bad status: twitter ID already bound\nconst phase2Good = phase2 && !boundAccountId; // good statue: continue to bind account\n\n// Phase 3: Twitter authorized, permission granted, and proposed binding, waiting for result\nconst phase3 =\n  twitterAuthorized && hasProposal && !connected && permissionGranted;\n\n// If nothing in progress, start with phase 1 -- Welcome phase.\nconst phase1 = !phase2 && !phase3 && !phase4;\n\n// polling account binding status\nif (phase3) {\n  const interval = setInterval(() => {\n    console.log(\"checking...\");\n    if (connected) {\n      clearInterval(interval);\n    } else {\n      init(true);\n    }\n  }, 2000);\n}\n\nfunction waitForPhase3() {\n  const interval = setInterval(() => {\n    console.log(\"waiting...\");\n    if (hasProposal && permissionGranted) {\n      clearInterval(interval);\n    } else {\n      init(true);\n    }\n  }, 2000);\n}\n\nconst Body = styled.div`\n  position: relative;\n  padding: 24px 15px;\n  background: #0d1117;\n  min-height: 75vh;\n  color: white;\n`;\n\nconst CardWrapper = styled.div`\n  position: absolute;\n  left: 50%;\n  top: 30%;\n  transform: translate(-50%, -30%);\n  width: 100%;\n  overflow: hidden;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  padding: 0 20px;\n`;\n\nconst CardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Title = styled.h1`\n  font-size: 30px;\n  font-weight: bold;\n`;\n\nconst Highlight = styled.span`\n  font-weight: bolder;\n`;\n\nreturn (\n  <div>\n    <Widget\n      src={`${config.ownerId}/widget/Wormhole3.Header`}\n      props={{ config }}\n    />\n    <Body>\n      <CardWrapper>\n        <CardContainer>\n          <Title>Sync Tweets to BOS</Title>\n\n          {phase1 && (\n            <Widget\n              src={`${config.ownerId}/widget/Wormhole3.Twitter.Welcome`}\n              props={{\n                config,\n                twitterAuthUrl,\n              }}\n            />\n          )}\n\n          {phase2Fail && (\n            <Widget\n              src={`${config.ownerId}/widget/Wormhole3.Twitter.AlreadyBound`}\n              props={{\n                config,\n                data: state,\n              }}\n            />\n          )}\n\n          {phase2Good && (\n            <Widget\n              src={`${config.ownerId}/widget/Wormhole3.Twitter.GrantPermission`}\n              props={{\n                config,\n                data: state,\n                permissionReady,\n                onClick: waitForPhase3,\n              }}\n            />\n          )}\n\n          {phase3 && (\n            <Widget\n              src={`${config.ownerId}/widget/Wormhole3.Twitter.Binding`}\n              props={{\n                config,\n                data: state,\n              }}\n            />\n          )}\n\n          {phase4 && (\n            <Widget\n              src={`${config.ownerId}/widget/Wormhole3.Twitter.Connected`}\n              props={{\n                config,\n                data: state,\n              }}\n            />\n          )}\n        </CardContainer>\n      </CardWrapper>\n    </Body>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ulisesmarin.near/widget/Wormhole3.Twitter", "fact_widget_deployments_id": "0d24577b0d561851539a86f7acaf050a", "inserted_timestamp": "2023-10-19T22:52:49.386Z", "modified_timestamp": "2023-10-19T22:52:49.386Z", "__row_index": 0}