{"tx_hash": "5N3mRfnru8SnEMADp9YsVr2WyMLfJUyJEnTe5ns7LPzi", "action_id_social": "33U1RWYpKcJZGGed6wJs1n79Yx14r9LSFtnep533pbSA-0-widget", "block_id": 87374125, "block_timestamp": "2023-03-15T20:13:35.546Z", "signer_id": "adminalpha.near", "widget_name": "adminalpha.near.ProfileSearch", "source_code": "const profiles =\n  Social.get([\"*/profile/name\", \"*/profile/tags/*\"], \"final\") || {};\n\nconst computeResults = (term) => {\n  const terms = (term || \"\")\n    .toLowerCase()\n    .split(/[^\\w._-]/)\n    .filter((s) => !!s.trim());\n  const matchedAccountIds = [];\n\n  const limit = props.limit ?? 30;\n\n  const MaxSingleScore = 20;\n  const MaxScore = MaxSingleScore * 3;\n\n  const computeScore = (s) => {\n    s = s.toLowerCase();\n    return (\n      terms\n        .map((term) => {\n          const pos = s.indexOf(term);\n          return pos >= 0 ? Math.max(1, 20 - pos) : 0;\n        })\n        .reduce((s, v) => s + v, 0) / terms.length\n    );\n  };\n\n  Object.entries(profiles).forEach(([accountId, data]) => {\n    const accountIdScore = computeScore(accountId);\n    const name = data.profile.name || \"\";\n    const tags = Object.keys(data.profile.tags || {}).slice(0, 10);\n    const nameScore = computeScore(name);\n    const tagsScore = Math.min(\n      20,\n      tags.map(computeScore).reduce((s, v) => s + v, 0)\n    );\n    const score = (accountIdScore + nameScore + tagsScore) / MaxScore;\n    if (score > 0) {\n      matchedAccountIds.push({ score, accountId, name, tags });\n    }\n  });\n\n  matchedAccountIds.sort((a, b) => b.score - a.score);\n  const result = matchedAccountIds.slice(0, limit);\n\n  State.update({\n    term,\n    result,\n  });\n\n  if (props.onChange) {\n    props.onChange({ term, result });\n  }\n};\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 40px;\n  position: relative;\n\n  .bi-search {\n      position: absolute;\n      top: 0;\n      left: 18px;\n      z-index: 100;\n      font-size: 14px;\n      line-height: 40px;\n      color: #687076;\n  }\n\n  .input-group {\n      height: 100%;\n  }\n\n  input {\n      padding: 0 14px 0 42px;\n      border: 1px solid #D0D5DD !important;\n      background: #FFFFFF;\n      border-radius: 100px;\n  }\n\n  button {\n      border-color: #D0D5DD !important;\n      border-radius: 0 100px 100px 0 !important;\n      border-left: none !important;\n      background: #fff !important;\n      color: #687076 !important;\n\n      &:hover, &:focus {\n          color: #000 !important;\n      }\n  }\n\n  @media (max-width: 500px) {\n      width: 100%;\n  }\n`;\n\nreturn (\n  <Wrapper>\n    <i className=\"bi bi-search\"></i>\n    <div className=\"input-group\">\n      <input\n        type=\"text\"\n        className={`form-control ${state.term ? \"border-end-0\" : \"\"}`}\n        value={state.term ?? \"\"}\n        onChange={(e) => computeResults(e.target.value)}\n        placeholder={props.placeholder || \"Search people\"}\n      />\n      {state.term && (\n        <button\n          className=\"btn btn-outline-secondary border border-start-0\"\n          type=\"button\"\n          onClick={() => computeResults(\"\")}\n        >\n          <i className=\"bi bi-x\"></i>\n        </button>\n      )}\n    </div>\n    {props.debug && <pre>{JSON.stringify(state.result, undefined, 2)}</pre>}\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/adminalpha.near/widget/adminalpha.near.ProfileSearch", "fact_widget_deployments_id": "27e1da1812fb1c3f1b7b1a2b1f4b0a3f", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}