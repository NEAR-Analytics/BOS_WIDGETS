{"tx_hash": "29Bdu5Bgha5hj7me39QjgC1veq3NLs4zfWw5abL6vwWt", "action_id_social": "BoFtpAehHjpBQWLQzqH9dyFw7F66Eep5HJfMQvbDq63C-0-widget", "block_id": 105300645, "block_timestamp": "2023-11-09T14:44:11.040Z", "signer_id": "5er.near", "widget_name": "Untitled-0", "source_code": "const Root = styled.div`\n  --gap-size: 2rem;\n  --purple-100: #e2d9f3;\n  --purple-300: #a98eda;\n`;\n\nconst Page = styled.div`\n  position: relative;\n  margin: 0;\n  padding: var(--gap-size);\n`;\n\nconst Column = styled.div`\n  display: flex;\n  flex-flow: column;\n  gap: var(--gap-size);\n  align-items: center;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-flow: row;\n  gap: var(--gap-size);\n`;\nconst Card = styled.div`\n  flex: 1;\n  max-width: 80%;\n  min-width: 40%;\n  padding: var(--gap-size);\n  border-radius: var(--gap-size);\n  background-color: var(--purple-300);\n`;\n\nconst Title = styled.h1`\n  font-size: 1rem;\n  font-weight: bold;\n  text-transform: uppercase;\n  text-align: center;\n  margin: 0;\n  color: #fff;\n`;\n\nconst Banner = styled.h1`\n  font-size: 2rem;\n  font-weight: bold;\n  text-transform: uppercase;\n  text-align: center;\n  margin: 0;\n  padding: var(--gap-size);\n  color: var(--purple-300);\n`;\n\nconst Spinning = styled.div`\n  animation: spin 1s linear infinite;\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n\nState.init({\n  showCustomProverURLInput: false,\n  proverURL: \"http://localhost:3000\",\n  credentials: null,\n  credentialsFile: null,\n  waitingProve: false,\n  waitingBefriend: false,\n  result: null,\n});\n\nconst DEFAULT_SCRIPT = 'credentials[0][\"age\"] >= 18;';\nconst SWEET_CREDS_CONTRACT_ADDRESS = \"\";\nconst REGISTRY_CONTRACT_ADDRESS = \"dev-1699471202521-43971993724293\";\nconst USED_SCHEMATA = [[\"lennczar.testnet\", 0]];\n\nasync function prove(url, credentials, script) {\n  return new Promise((resolve) => {\n    if (state.waitingProve) return resolve(null);\n\n    console.log(\"PROVE\", JSON.stringify(credentials));\n\n    State.update({ waitingProve: true });\n\n    const taskId = asyncFetch(`${url}/holder/genproof`, {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        credentials: [JSON.stringify(credentials)],\n        script: script,\n      }),\n      method: \"POST\",\n    }).then((res) => {\n      console.log(res.body);\n      if (res.body == -1) {\n        console.error(\"prover busy\");\n        State.update({ waitingProve: false });\n        return resolve(null);\n      }\n\n      console.log(\"prover not busy\");\n\n      let interval = setInterval(() => {\n        asyncFetch(`${url}/holder/getproof/${res.body}`, {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n          method: \"GET\",\n        }).then((res) => {\n          if (res.body.proof === \"\") {\n            console.log(\"waiting for proof...\");\n          } else {\n            State.update({ result: res.body, waitingProve: false });\n            console.log(res.body);\n            clearInterval(interval);\n            resolve(res.body);\n          }\n        });\n      }, 5000);\n    });\n  });\n}\n\nasync function befriend(rpAddress, usedSchemata) {\n  if (state.waitingProve || state.waitingBefriend) return;\n\n  console.log(\"BEFRIEND\", JSON.stringify(credentials));\n\n  State.update({ waitingBefriend: true });\n\n  const promise = prove(state.proverURL, state.credentials, DEFAULT_SCRIPT);\n\n  console.log(\"BEFRIEND promise\", promise);\n\n  promise.then((result) => {\n    if (!result) {\n      console.error(\"failed to get proof\");\n      State.update({ waitingBefriend: false });\n      return;\n    }\n\n    // cred_call(rpAddress, results.proof, usedSchemata)\n    Near.call(\n      REGISTRY_CONTRACT_ADDRESS,\n      \"cred_call\",\n      {\n        receiver: rpAddress,\n        proof: result.proof,\n        used_schemata: usedSchemata,\n      },\n      \"300000000000000\",\n      0\n    ).then((receipt) => {\n      console.log(receipt);\n      State.update({ waitingBefriend: false });\n    });\n  });\n}\n\nreturn (\n  <Root>\n    <Page>\n      <Column>\n        <Banner>\ud83c\udf6c\ud83c\udf6c Sweet Creds \ud83c\udf6c\ud83c\udf6c</Banner>\n        <Card>\n          <Column>\n            <Title>Verify Your Creds!</Title>\n            <Files\n              multiple\n              accepts={[\"application/json\"]}\n              minFileSize={1}\n              clickable\n              className=\"btn btn-outline-light\"\n              onChange={(f) =>\n                f[0].text().then((text) =>\n                  State.update({\n                    credentials: JSON.parse(text),\n                    credentialsFile: f[0],\n                  })\n                )\n              }\n            >\n              {state.credentialsFile == null\n                ? \"Upload File\"\n                : `Uploaded (${state.credentialsFile.name})`}\n            </Files>\n            <Row>\n              <button\n                className=\"btn btn-outline-light\"\n                onClick={(e) =>\n                  !state.waitingBefriend &&\n                  prove(state.proverURL, state.credentials, DEFAULT_SCRIPT)\n                }\n              >\n                {state.waitingProve ? <Spinning>\ud83c\udf6c</Spinning> : \"SEND\"}\n              </button>\n              <button\n                className=\"btn btn-outline-light\"\n                onClick={(e) =>\n                  befriend(SWEET_CREDS_CONTRACT_ADDRESS, USED_SCHEMATA)\n                }\n              >\n                {state.waitingBefriend ? (\n                  <Spinning>\ud83c\udf6c</Spinning>\n                ) : (\n                  \"BECOME OUR FRIEND\"\n                )}\n              </button>\n            </Row>\n          </Column>\n        </Card>\n        {state.result !== null && (\n          <Card>\n            <Column>\n              <Title>Your Proof</Title>\n              <div style={{ width: \"100%\" }}>\n                <p>Verdict</p>\n                <b\n                  style={{\n                    width: \"100%\",\n                    textAlign: \"center\",\n                    display: \"block\",\n                  }}\n                >\n                  {state.result.journal.result ? \"true\" : \"false\"}\n                </b>\n              </div>\n              {state.result.journal.error_msg !== \"\" && (\n                <div>\n                  <p>Error Message</p>\n                  <pre\n                    style={{\n                      wordBreak: \"break-word\",\n                      whiteSpace: \"pre-wrap\",\n                      width: \"20rem\",\n                      height: \"4rem\",\n                    }}\n                  >\n                    {state.result.journal.error_msg}\n                  </pre>\n                </div>\n              )}\n              <div>\n                <p>Raw Proof</p>\n                <pre\n                  style={{\n                    wordBreak: \"break-all\",\n                    whiteSpace: \"pre-wrap\",\n                    width: \"20rem\",\n                    height: \"10rem\",\n                  }}\n                >\n                  {state.result.proof}\n                </pre>\n              </div>\n            </Column>\n          </Card>\n        )}\n        <Card style={{ backgroundColor: \"var(--purple-100)\" }}>\n          <Column>\n            <input\n              type=\"checkbox\"\n              className=\"btn-check\"\n              id=\"customProverURL\"\n              onChange={(e) =>\n                State.update({\n                  showCustomProverURLInput: !state.showCustomProverURLInput,\n                })\n              }\n            />\n            <label class=\"btn btn-outline-light btn-sm\" for=\"customProverURL\">\n              {state.showCustomProverURLInput\n                ? \"close advanced options\"\n                : \"open advanced options\"}\n            </label>\n            {state.showCustomProverURLInput && (\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                value={state.proverURL}\n                onChange={(e) =>\n                  State.update({\n                    proverURL: e.target.value,\n                  })\n                }\n              />\n            )}\n          </Column>\n        </Card>\n      </Column>\n    </Page>\n  </Root>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/5er.near/widget/Untitled-0", "fact_widget_deployments_id": "66dd0863b2a3897e0408b24fc44df070", "inserted_timestamp": "2023-11-09T16:40:36.420Z", "modified_timestamp": "2023-11-09T16:40:36.420Z", "__row_index": 92}