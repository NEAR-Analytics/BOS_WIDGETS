{"tx_hash": "H8MeL5MH9VJPPmeJ4sQaNL5jjEFVTgxzTmxUzXQVMBiR", "action_id_social": "F4frFAwaGkP26fvStdSou2AMfKbsFPfGfYJo2gqU83As-0-widget", "block_id": 102668517, "block_timestamp": "2023-10-05T10:55:44.033Z", "signer_id": "nearukraineguild.near", "widget_name": "NDC.Elections.Main", "source_code": "let { ids, election_contract, registry_contract } = props;\n\nids = ids ? JSON.parse(ids) : [1, 2, 3, 4];\nconst budgetId = ids[3];\n\nconst electionContract = election_contract ?? \"elections.ndc-gwg.near\";\nconst registryContract = registry_contract ?? \"registry.i-am-human.near\";\nconst apiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\n\nconst NFT_SERIES = [205, 206];\nconst QUERY_API_ENDPOINT = \"https://graph.mintbase.xyz/mainnet\";\n\nconst widgets = {\n  header: \"election.ndctools.near/widget/NDC.Elections.Header\",\n  filter: \"election.ndctools.near/widget/NDC.Elections.Filter\",\n  houses: \"election.ndctools.near/widget/NDC.Elections.Houses\",\n  progress: \"election.ndctools.near/widget/NDC.Elections.Progress\",\n  candidates: \"nearukraineguild.near/widget/NDC.Elections.Candidates\",\n  statistic: \"election.ndctools.near/widget/NDC.Elections.Statistic\",\n  activities: \"election.ndctools.near/widget/NDC.Elections.Activities\",\n  styledComponents: \"nomination.ndctools.near/widget/NDC.StyledComponents\",\n  stepper: \"election.ndctools.near/widget/NDC.Stepper\",\n};\n\nState.init({\n  electionStatus: \"NOT_STARTED\",\n  selectedHouse: props.house ? parseInt(props.house) : ids[0],\n  myVotes: [],\n  winnerIds: [],\n  iahToken: null,\n  humanToken: 0,\n  blacklisted: false,\n  greylisted: false,\n  candidateFilterId: \"\",\n  isBonded: false,\n  isBondedAmount: 0,\n  reload: true,\n  houses: [],\n  acceptedPolicy: true,\n  hasVotedOnAllProposals: false,\n  hasPolicyNFT: null,\n  hasIVotedNFT: null,\n  iVotedToken: false,\n});\nconst currentUser = context.accountId;\n\nconst steps = [\n  {\n    title: \"Accepted Policy\",\n    completed: state.acceptedPolicy || state.myVotes.length > 0,\n  },\n  {\n    title: 'Minted \"Fair Voting Policy\" NFT',\n    completed: true,\n  },\n  {\n    title: \"Voting Completed\",\n    completed: state.hasVotedOnAllProposals,\n  },\n  {\n    title: 'Minted \"I Voted\" NFT',\n    completed: state.hasIVotedNFT,\n  },\n  {\n    title: 'Unbonded & Minted \"I Voted SBT\"',\n    completed: state.iVotedToken,\n  },\n];\n\nfunction fetchGraphQL(series) {\n  return asyncFetch(QUERY_API_ENDPOINT, {\n    method: \"POST\",\n    headers: { \"mb-api-key\": \"anon\", \"x-hasura-role\": electionContract },\n    body: JSON.stringify({\n      query: `\n          query MyQuery {\n            nft_tokens(\n              where: {\n                nft_contract_id: {\n                  _eq: \"mint.sharddog.near\"\n                },\n                token_id: {_regex: \"^${series}:\"},\n                owner: {_eq: \"${currentUser}\"}}\n              order_by: {minted_timestamp: asc}\n            ) {\n              last_transfer_timestamp\n            }\n          }\n        `,\n      variables: {},\n      operationName: \"MyQuery\",\n    }),\n  });\n}\n\nconst processNFTAvailability = (result, key) => {\n  if (result.status === 200) {\n    let data = result.body.data;\n    if (data) {\n      const tokens = data.nft_tokens;\n\n      State.update({\n        [key]: tokens.length > 0 && tokens[0].last_transfer_timestamp === null,\n      });\n    }\n  }\n};\n\nfunction loadHouses() {\n  let houses = [\n    Near.view(electionContract, \"proposal\", { prop_id: ids[0] }),\n    Near.view(electionContract, \"proposal\", { prop_id: ids[1] }),\n    Near.view(electionContract, \"proposal\", { prop_id: ids[2] }),\n    Near.view(electionContract, \"proposal\", { prop_id: ids[3] }),\n  ];\n\n  houses[0].result = [\n    [\"achoski.near\", 29],\n    [\"alan777.near\", 0],\n    [\"auroracfo.near\", 129],\n    [\"bearmans.near\", 75],\n    [\"berynteoh.near\", 27],\n    [\"cameron.near\", 197],\n    [\"chloe.near\", 180],\n    [\"cronus.near\", 56],\n    [\"cryptocredit.near\", 37],\n    [\"davidweinstein.near\", 71],\n    [\"davletuner.near\", 151],\n    [\"dedeukwu.near\", 55],\n    [\"denbite.near\", 96],\n    [\"derymars.near\", 81],\n    [\"dk_51.near\", 157],\n    [\"dleer.near\", 128],\n    [\"earnestetim.near\", 39],\n    [\"eschnoeckel.near\", 22],\n    [\"frado.near\", 58],\n    [\"fritzwagner.near\", 0],\n    [\"gcohen.near\", 80],\n    [\"guaschingmachines.near\", 52],\n    [\"haenko.near\", 205],\n    [\"iamgalt.near\", 84],\n    [\"igboze_builder.near\", 63],\n    [\"kazanderdad.near\", 69],\n    [\"kekiboh.near\", 19],\n    [\"kelsontoh.near\", 45],\n    [\"kemo.near\", 62],\n    [\"kennyj.near\", 75],\n    [\"kiskesis.near\", 154],\n    [\"klint.near\", 46],\n    [\"lolson.near\", 99],\n    [\"louisliu.near\", 131],\n    [\"luciotato.near\", 125],\n    [\"masterofcode.near\", 0],\n    [\"maxkott.near\", 111],\n    [\"mob.near\", 241],\n    [\"monish016.near\", 44],\n    [\"nguyencuong.near\", 33],\n    [\"ntrucchinh.near\", 0],\n    [\"odins_eyehole.near\", 142],\n    [\"ogruss.near\", 95],\n    [\"p3ter.near\", 126],\n    [\"planetaworld.near\", 27],\n    [\"psalm.near\", 90],\n    [\"rexux.near\", 136],\n    [\"rileytran.near\", 121],\n    [\"sahilmassey.near\", 74],\n    [\"salikc9.near\", 33],\n    [\"thisthatjosh.near\", 36],\n    [\"tiffany.near\", 113],\n    [\"tutmt.near\", 66],\n    [\"ugxnear.near\", 32],\n    [\"vadim.near\", 258],\n    [\"vandal.near\", 107],\n    [\"vlad.near\", 268],\n    [\"web3hedge.near\", 0],\n    [\"whendacha.near\", 234],\n    [\"wizzow.near\", 64],\n    [\"woben.near\", 147],\n  ];\n\n  houses[1].result = [\n    [\"983dcdc8e0d80d1f8938118161e1ec08be6557809afccd5ec396354f28a2ce78\", 29],\n    [\"achildhoodhero.near\", 100],\n    [\"ahsas.near\", 137],\n    [\"alphaflexhub.near\", 28],\n    [\"alyonushka.near\", 28],\n    [\"antmarshall360.near\", 27],\n    [\"as.near\", 252],\n    [\"bennyblanco.near\", 94],\n    [\"bishi.near\", 30],\n    [\"blaze.near\", 176],\n    [\"chefsale.near\", 79],\n    [\"duocelot.near\", 43],\n    [\"evangel.near\", 134],\n    [\"flame1.near\", 57],\n    [\"frol.near\", 143],\n    [\"gagdiez.near\", 21],\n    [\"harveys.near\", 79],\n    [\"iamanansari.near\", 127],\n    [\"ilerik.near\", 23],\n    [\"izcc.near\", 50],\n    [\"jgold.near\", 63],\n    [\"jloc.near\", 71],\n    [\"jlw.near\", 96],\n    [\"joespano.near\", 132],\n    [\"kangaroojack.near\", 68],\n    [\"kennethjay.near\", 0],\n    [\"keyokey.near\", 53],\n    [\"kumarkrsronit.near\", 0],\n    [\"kwhyc.near\", 109],\n    [\"marieke.near\", 165],\n    [\"mattlock.near\", 160],\n    [\"ndcplug.near\", 127],\n    [\"nearkat.near\", 100],\n    [\"reespect.near\", 48],\n    [\"robert.near\", 50],\n    [\"rubycop.near\", 110],\n    [\"sammiee1.near\", 36],\n    [\"techdir.near\", 116],\n    [\"vianftbrasil.near\", 21],\n    [\"yesn.near\", 87],\n  ];\n  houses[2].result = [\n    [\"abdulkareem.near\", 21],\n    [\"alejandro.near\", 231],\n    [\"andersonr.near\", 30],\n    [\"arezhas.near\", 36],\n    [\"aurorafinance1.near\", 45],\n    [\"blessedchidi.near\", 63],\n    [\"christinas.near\", 50],\n    [\"cjpd.near\", 50],\n    [\"crans.near\", 100],\n    [\"cryptois.near\", 139],\n    [\"dabbie3229.near\", 55],\n    [\"danieldao.near\", 0],\n    [\"escobarindo.near\", 161],\n    [\"izubair.near\", 156],\n    [\"jarednotjerry.near\", 147],\n    [\"johanga108.near\", 169],\n    [\"kriptoraptor.near\", 72],\n    [\"larkim.near\", 25],\n    [\"maks1mk_a.near\", 0],\n    [\"manchutsca.near\", 41],\n    [\"manutegus.near\", 13],\n    [\"mohaa.near\", 20],\n    [\"moska.near\", 0],\n    [\"nftmuse.near\", 44],\n    [\"ntare.near\", 33],\n    [\"pironi.near\", 106],\n    [\"rahulgoel.near\", 176],\n    [\"ramgor.near\", 0],\n    [\"rektdegen.near\", 0],\n    [\"sallymg.near\", 76],\n    [\"tolmindev.near\", 79],\n    [\"vikash.near\", 145],\n    [\"vincentcfpun.near\", 0],\n    [\"waverlymaven.near\", 92],\n    [\"williamxx.near\", 84],\n    [\"yashank.near\", 47],\n    [\"yonota.near\", 115],\n    [\"yourdad.near\", 220],\n  ];\n\n  State.update({ houses });\n}\n\nconst findToken = (sbts, issuer) => {\n  let token;\n  if (sbts)\n    token = sbts.find((token) => token[0] === issuer && token[1].length > 0);\n  if (token) return token[1].find((t) => t.metadata.class === 1).token;\n};\n\nfunction loadSBTs() {\n  const issuer = {\n    fractal: \"fractal.i-am-human.near\",\n    election: electionContract,\n  };\n  const sbts = Near.view(registryContract, \"sbt_tokens_by_owner\", {\n    account: currentUser,\n  });\n\n  State.update({\n    iahToken: findToken(sbts, issuer.fractal),\n    iVotedToken: findToken(sbts, issuer.election),\n  });\n}\n\nfunction loadBond() {\n  asyncFetch(\n    `https://api.pikespeak.ai/election/is-bonded?account=${currentUser}&registry=${registryContract}`,\n    { headers: { \"x-api-key\": apiKey } }\n  ).then((resp) => {\n    if (resp.body) {\n      const amount = resp.body.bond ? parseFloat(resp.body.bond) : 0;\n      State.update({ isBonded: amount > 0 });\n    }\n  });\n}\n\nfunction loadFlagged() {\n  const flagged = Near.view(registryContract, \"account_flagged\", {\n    account: currentUser,\n  });\n\n  State.update({\n    blacklisted: flagged === \"Blacklisted\",\n    greylisted: flagged !== \"Blacklisted\" && flagged !== \"Verified\",\n  });\n}\n\nfunction loadPolicy() {\n  // const acceptedPolicy = Near.view(electionContract, \"accepted_policy\", {\n  //   user: currentUser,\n  // });\n  // State.update({ acceptedPolicy });\n}\n\nfunction loadWinners() {\n  const winnerIds = Near.view(electionContract, \"winners_by_proposal\", {\n    prop_id: state.selectedHouse,\n  });\n\n  State.update({ winnerIds });\n}\n\nfunction loadElectionStatus() {\n  const electionStatus = Near.view(electionContract, \"proposal_status\", {\n    prop_id: state.selectedHouse,\n  });\n\n  State.update({ electionStatus });\n}\n\nfunction loadMyVotes() {\n  asyncFetch(\n    `https://api.pikespeak.ai/election/votes-by-voter?voter=${currentUser}&contract=${electionContract}`,\n    { headers: { \"x-api-key\": apiKey } }\n  ).then((resp) => {\n    if (resp.body) {\n      const myVotes = resp.body.filter((vote) =>\n        ids.includes(parseInt(vote.proposal_id))\n      );\n\n      const votes = ids\n        .map((id) => myVotes.find((vote) => parseInt(vote.proposal_id) === id))\n        .filter((el) => el);\n\n      State.update({\n        myVotes,\n        reload: false,\n        hasVotedOnAllProposals: votes.length === 4,\n      });\n    }\n  });\n}\n\nfunction loadNFT(id, key) {\n  fetchGraphQL(NFT_SERIES[id]).then((result) =>\n    processNFTAvailability(result, key)\n  );\n}\n\nloadHouses();\nloadSBTs();\nloadElectionStatus();\nloadFlagged();\nloadWinners();\nloadPolicy();\nloadNFT(0, \"hasPolicyNFT\");\nloadNFT(1, \"hasIVotedNFT\");\n\nif (state.reload) {\n  loadMyVotes();\n  loadBond();\n}\n\nconst handleUnbond = () => {\n  Near.call(\n    registryContract,\n    \"is_human_call\",\n    { ctr: electionContract, function: \"unbond\", payload: \"{}\" },\n    \"110000000000000\"\n  ).then((data) => State.update({ isBonded: false }));\n};\n\nconst handleFilter = (e) => State.update({ candidateFilterId: e.target.value });\n\nconst votesLeft = (house) =>\n  house.seats - state.myVotes.filter((vote) => vote.house === house.typ).length;\n\nconst Container = styled.div`\n  padding: 20px 0;\n`;\n\nconst ActivityContainer = styled.div`\n  overflow-y: scroll;\n`;\n\nconst Left = styled.div`\n  padding: 20px;\n  background: #f8f8f9;\n  border-radius: 8px;\n`;\n\nconst Filter = styled.div`\n  margin-top: 20px;\n`;\n\nconst Stepper = styled.div`\n  margin-top: 32px;\n`;\n\nconst Right = styled.div`\n  padding: 20px;\n  margin-bottom: 20px;\n  background: #f8f8f9;\n  border-radius: 8px;\n`;\n\nconst H5 = styled.h5`\n  margin-bottom: 20px;\n`;\n\nconst UnbondContainer = styled.div`\n  background: #fdfeff;\n  box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.2);\n  border-radius: 8px;\n  padding: 16px;\n  h3,\n  h4 {\n    margin: 0 3px;\n  }\n  h3 {\n    font-weight: 900;\n  }\n  .text-secondary {\n    margin: 0 10px;\n  }\n  &.not-verified {\n    h4 {\n      font-size: 16px;\n      margin: 0 0 5px 0;\n      font-weight: 600;\n    }\n    h5 {\n      margin: 0;\n      font-size: 12px;\n    }\n  }\n`;\n\nconst rand = (array) => {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n};\n\nreturn (\n  <>\n    <div>\n      {state.houses.map((house) => (\n        <>\n          {house.id === state.selectedHouse && (\n            <Widget\n              key={i}\n              src={widgets.header}\n              props={{\n                startTime: house.start,\n                endTime: house.end,\n                cooldown: house.cooldown,\n                type: \"Election\",\n                isWhistleblower: true,\n                ids,\n              }}\n            />\n          )}\n        </>\n      ))}\n      <Stepper>\n        <Widget src={widgets.stepper} props={{ steps }} />\n      </Stepper>\n      {state.selectedHouse !== budgetId && (\n        <Filter>\n          <Widget\n            src={widgets.filter}\n            props={{\n              handleFilter,\n              candidateId: state.candidateFilterId,\n              placeholder: \"Search by candidate name\",\n            }}\n          />\n        </Filter>\n      )}\n      <Container className=\"d-flex row\">\n        <Left className=\"h-screen col-lg-3 d-flex flex-column justify-content-between\">\n          <div>\n            <H5>To Vote</H5>\n            <Widget\n              src={widgets.houses}\n              props={{\n                urlProps: props,\n                selectedHouse: state.selectedHouse,\n                houses: state.houses,\n                ids,\n                votesLeft: !!state.iahToken\n                  ? (house) => votesLeft(house)\n                  : null,\n              }}\n            />\n          </div>\n\n          {currentUser &&\n          !!state.iahToken &&\n          state.winnerIds.length > 0 &&\n          !state.iVotedToken ? (\n            <UnbondContainer className={`not-verified d-flex flex-column`}>\n              <div>\n                <h4>Unbond NEAR & Mint SBT</h4>\n                <h5 className=\"text-secondary\">\n                  Congratulations! You can now unbond NEAR and mint the \u201cI\n                  Voted\u201d SBT\n                </h5>\n              </div>\n              <div className=\"mt-3\">\n                <Widget\n                  src={widgets.styledComponents}\n                  props={{\n                    Button: {\n                      className: \"primary w-100 justify-content-center\",\n                      disabled: !state.isBonded,\n                      text: \"Unbond & Mint I Voted SBT\",\n                      onClick: handleUnbond,\n                    },\n                  }}\n                />\n              </div>\n            </UnbondContainer>\n          ) : (\n            <>\n              {!!state.iahToken && (\n                <Widget\n                  src={widgets.progress}\n                  props={{ houses: state.houses, votesLeft }}\n                />\n              )}\n            </>\n          )}\n        </Left>\n\n        <div className=\"col-lg-6 p-2 p-md-3\">\n          {state.houses.map((house) => (\n            <>\n              {house.id === state.selectedHouse && (\n                <Widget\n                  key={i}\n                  src={widgets.candidates}\n                  props={{\n                    electionContract,\n                    registryContract,\n                    ndcOrganization: \"NDC\",\n                    ids,\n                    ...state,\n                    ...house,\n                    result: house.result.sort((a, b) => b[1] - a[1]),\n                  }}\n                />\n              )}\n            </>\n          ))}\n        </div>\n\n        <div className=\"col-lg-3\">\n          <Right className=\"col\">\n            <H5>General</H5>\n            <div className=\"d-flex justify-content-center\">\n              <Widget src={widgets.statistic} props={{ electionContract }} />\n            </div>\n          </Right>\n          {state.myVotes.length > 0 && (\n            <Right className=\"col\">\n              <H5>My voting activity</H5>\n              <ActivityContainer className=\"d-flex justify-content-center\">\n                <Widget\n                  src={widgets.activities}\n                  props={{ myVotes: state.myVotes }}\n                />\n              </ActivityContainer>\n            </Right>\n          )}\n        </div>\n      </Container>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearukraineguild.near/widget/NDC.Elections.Main", "fact_widget_deployments_id": "d7a4c0d4e793d0213aa4eeadc8092c83", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 18}