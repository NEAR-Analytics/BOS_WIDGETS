{"tx_hash": "F2axbbq9Ds1jKiZjzpRQpLCMvbUvaFwcnXdXfRJZ3ZKC", "action_id_social": "7u6ktW7tR7NPp4jkFJ7iQciwZ3jjvvgUfQPRxhFeAwba-0-widget", "block_id": 109611519, "block_timestamp": "2024-01-05T00:32:36.692Z", "signer_id": "8178c066f8626d2f92c90802026f5fb0910e92da792d30458dd0f6049921e23e", "widget_name": "unkmav", "source_code": "if (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\nif (state.chainId !== undefined && state.chainId !== 324) {\n  return <p>Switch to Zksync Era Mainnet</p>;\n}\n\nconst unkMavContract = \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\";\nconst tokenDecimals = 18;\nconst mavDepositor = \"0x7367A949CEd34c37BF5576189f357648bb8D5860\";\nconst mavToken = \"0x787c09494Ec8Bcb24DcAf8659E7d5D69979eE508\";\nconst stakingContract = \"0x5b439AB114490574D7bcDEa0eCb642d44c2a1679\";\n\nconst lidoAbi = fetch(\n  \"https://raw.githubusercontent.com/lidofinance/lido-subgraph/master/abis/Lido.json\"\n);\nif (!lidoAbi.ok) {\n  return \"Loading\";\n}\n\nconst iface = new ethers.utils.Interface(lidoAbi.body);\n\nconst depositorAbi = [\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n      { internalType: \"bool\", name: \"_lock\", type: \"bool\" },\n      { internalType: \"bool\", name: \"_stake\", type: \"bool\" },\n    ],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\n// HELPER FUNCTIONS\n\nconst getStakedBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: stakingContract,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\n\nconst submitEthers = (strEther, _referral) => {\n  if (!strEther) {\n    return console.log(\"Amount is missing\");\n  }\n  const mavDepositorContract = new ethers.Contract(\n    mavDepositor,\n    depositorAbi,\n    Ethers.provider().getSigner()\n  );\n\n  let amount = ethers.utils.parseUnits(strEther, tokenDecimals).toHexString();\n\n  mavDepositorContract.deposit(amount, true, true).then((transactionHash) => {\n    console.log(\"transactionHash is \" + transactionHash);\n  });\n};\nconst approve = (strEther, _referral) => {\n  if (!strEther) {\n    return console.log(\"Amount is missing\");\n  }\n  const erc20 = new ethers.Contract(\n    mavToken,\n    lidoAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amount = ethers.utils.parseUnits(strEther, tokenDecimals).toHexString();\n\n  erc20.approve(mavDepositor, amount).then((transactionHash) => {\n    console.log(\"transactionHash is \" + transactionHash);\n  });\n  erc20.allowance(state.sender, mavDepositor).then((allowance) => {\n    State.update({ allowance: Big(allowance).div(Big(10).pow(18)).toFixed(2) });\n  });\n};\n// DETECT SENDER\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    console.log(\"set sender\", accounts[0]);\n  }\n}\n\n//if (!state.sender)  return \"Please login first\";\n\n// FETCH SENDER BALANCE\n\nif (state.balance === undefined && state.sender) {\n  const erc20 = new ethers.Contract(\n    mavToken,\n    lidoAbi.body,\n    Ethers.provider().getSigner()\n  );\n  erc20.balanceOf(state.sender).then((balance) => {\n    State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n  });\n}\n\n// FETCH SENDER unkmav BALANCE\n\nif (state.stakedBalance === undefined && state.sender) {\n  getStakedBalance(state.sender).then((stakedBalance) => {\n    State.update({ stakedBalance });\n  });\n}\n// fetch allowance\nif (state.allowance === undefined && state.sender) {\n  const erc20 = new ethers.Contract(\n    mavToken,\n    lidoAbi.body,\n    Ethers.provider().getSigner()\n  );\n  erc20.allowance(state.sender, mavDepositor).then((allowance) => {\n    State.update({ allowance: Big(allowance).div(Big(10).pow(18)).toFixed(2) });\n  });\n}\n\n// FETCH CSS\n\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\n).body;\n\nif (!cssFont || !css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    ${cssFont}\n    ${css}\n`,\n  });\n}\nconst Theme = state.theme;\n\n// OUTPUT UI\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\nconsole.log(state);\nreturn (\n  <Theme>\n    <div class=\"LidoContainer\">\n      <div class=\"Header\">Stake MAV</div>\n      <div class=\"SubHeader\">Stake MAV and receive unkMAV while staking.</div>\n\n      <div class=\"LidoForm\">\n        {state.sender && (\n          <>\n            <div class=\"LidoFormTopContainer\">\n              <div class=\"LidoFormTopContainerLeft\">\n                <div class=\"LidoFormTopContainerLeftContent1\">\n                  <div class=\"LidoFormTopContainerLeftContent1Container\">\n                    <span>Available to stake</span>\n                    <div class=\"LidoFormTopContainerLeftContent1Circle\" />\n                  </div>\n                </div>\n                <div class=\"LidoFormTopContainerLeftContent2\">\n                  <span>\n                    {state.balance ?? (!state.sender ? \"0\" : \"...\")}&nbsp;MAV\n                  </span>\n                </div>\n              </div>\n              <div class=\"LidoFormTopContainerRight\">\n                <div class=\"LidoFormTopContainerRightContent1\">\n                  <div class=\"LidoFormTopContainerRightContent1Text\">\n                    <span>{getSender()}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"LidoSplitter\" />\n          </>\n        )}\n        <div\n          class={\n            state.sender ? \"LidoFormBottomContainer\" : \"LidoFormTopContainer\"\n          }\n        >\n          <div class=\"LidoFormTopContainerLeft\">\n            <div class=\"LidoFormTopContainerLeftContent1\">\n              <div class=\"LidoFormTopContainerLeftContent1Container\">\n                <span>Staked amount</span>\n              </div>\n            </div>\n            <div class=\"LidoFormTopContainerLeftContent2\">\n              <span>\n                {state.stakedBalance ?? (!state.sender ? \"0\" : \"...\")}\n                &nbsp;unkMAV\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"LidoStakeForm\">\n        <div class=\"LidoStakeFormInputContainer\">\n          <span class=\"LidoStakeFormInputContainerSpan1\">\n            <svg\n              width=\"43\"\n              height=\"43\"\n              viewBox=\"0 0 48 48\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M24.0017 2.07213e-07C10.7473 -0.00172294 0.00172335 10.7438 2.07213e-07 23.9983C-0.00172294 37.2527 10.7438 47.9983 23.9983 48C37.2527 48.0017 47.9983 37.2562 48 24.0017C48 24 48 24 48 23.9983C47.9983 10.7455 37.2545 0.00172335 24.0017 2.07213e-07Z\"\n                fill=\"#780EFF\"\n              ></path>\n              <path\n                d=\"M23.7284 28.0735V22.6842L9.20605 30.2458H36.165V15.1226L23.7284 28.0735Z\"\n                fill=\"white\"\n              ></path>\n            </svg>\n          </span>\n          <span class=\"LidoStakeFormInputContainerSpan2\">\n            <input\n              disabled={!state.sender}\n              class=\"LidoStakeFormInputContainerSpan2Input\"\n              value={state.strEther}\n              onChange={(e) => State.update({ strEther: e.target.value })}\n              placeholder=\"Amount\"\n            />\n          </span>\n          <span\n            class=\"LidoStakeFormInputContainerSpan3\"\n            onClick={() => {\n              State.update({\n                strEther: parseFloat(state.balance).toFixed(2),\n              });\n            }}\n          >\n            <button\n              class=\"LidoStakeFormInputContainerSpan3Content\"\n              disabled={!state.sender}\n            >\n              <span class=\"LidoStakeFormInputContainerSpan3Max\">MAX</span>\n            </button>\n          </span>\n        </div>\n        {!!state.sender ? (\n          state.allowance < state.strEther ? (\n            <button\n              class=\"LidoStakeFormSubmitContainer\"\n              onClick={() => approve(state.strEther, state.sender)}\n            >\n              <span>Approve</span>\n            </button>\n          ) : (\n            <button\n              class=\"LidoStakeFormSubmitContainer\"\n              onClick={() => submitEthers(state.strEther, state.sender)}\n            >\n              <span>Submit</span>\n            </button>\n          )\n        ) : (\n          <Web3Connect\n            className=\"LidoStakeFormSubmitContainer\"\n            connectLabel=\"Connect with Web3\"\n          />\n        )}\n\n        <div class=\"LidoFooterContainer\">\n          {state.sender && (\n            <div class=\"LidoFooterRaw\">\n              <div class=\"LidoFooterRawLeft\">You will receive</div>\n              <div class=\"LidoFooterRawRight\">\n                ${state.strEther ?? 0} unkMAV\n              </div>\n            </div>\n          )}\n          <div class=\"LidoFooterRaw\">\n            <div class=\"LidoFooterRawLeft\">Exchange rate</div>\n            <div class=\"LidoFooterRawRight\">1 MAV = 1 unkMAV</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/8178c066f8626d2f92c90802026f5fb0910e92da792d30458dd0f6049921e23e/widget/unkmav", "fact_widget_deployments_id": "a5aabb5ba8eb9a8fe34d64eee0bf7532", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}