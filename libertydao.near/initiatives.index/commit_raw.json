{"tx_hash": "oNKRUsGRzw7Wn1xq6E9stoqXAJzmthMATDdK5q1k2rY", "action_id_social": "HZnmV27RJtzcNDqcJtqMKyWMXQoVi35jfzFGjNRwj52f-0-widget", "block_id": 101629511, "block_timestamp": "2023-09-21T13:57:31.286Z", "signer_id": "libertydao.near", "widget_name": "initiatives.index", "source_code": "// const Container = styled.div`\n//   display: flex;\n//   flex-direction: row;\n//   justify-content: space-between;\n//   height: 100%;\n//   margin-top: var(--header-height);\n//   background-color: var(--secondary-color);\n\n//   @media (max-width: 768px) {\n//     flex-direction: column;\n//   }\n// `;\n\n// const Column = styled.div`\n//   flex: 1;\n//   padding: 20px;\n// `;\n\n// const Card = styled.div`\n//   padding: 20px;\n//   display: flex;\n//   align-items: center;\n//   margin-bottom: 10px;\n\n//   @media (min-width: 769px) and (max-width: 1024px) {\n//     flex-direction: column;\n//   }\n// `;\n\n// const Icon = styled.i`\n//   font-size: 24px;\n//   margin-right: 20px;\n\n//   @media (min-width: 769px) and (max-width: 1024px) {\n//     margin-right: 0;\n//     margin-bottom: 10px;\n//   }\n// `;\n\n// const Title = styled.h3``;\n\n// const VerticalDivider = styled.div`\n//   width: 1px;\n//   height: 100%;\n//   background-color: #000;\n\n//   @media (max-width: 768px) {\n//     height: 1px;\n//     width: 100%;\n//   }\n// `;\n\n// const HorizontalDivider = styled.div`\n//   width: 100%;\n//   height: 1px;\n//   background-color: #000;\n\n//   @media (min-width: 769px) {\n//     display: none;\n//   }\n// `;\n\n// const ColumnTitle = styled.h2`\n//   margin-bottom: 20px;\n// `;\n\n// const CardItem = ({ iconClass, title }) => (\n//   <Card className=\"l__card\">\n//     <Icon className={iconClass}></Icon>\n//     <Title>{title}</Title>\n//   </Card>\n// );\n\n// return (\n//   <Container>\n//     <Column>\n//       <ColumnTitle>Actions</ColumnTitle>\n//       <CardItem iconClass=\"bi bi-brush\" title=\"Painting\" />\n//       <CardItem iconClass=\"bi bi-music-note-beamed\" title=\"Singing\" />\n//     </Column>\n//     <VerticalDivider />\n//     <Column>\n//       <ColumnTitle>Disciplines</ColumnTitle>\n//       <CardItem iconClass=\"bi bi-book\" title=\"Philosophy\" />\n//       <CardItem iconClass=\"bi bi-gear\" title=\"Engineering\" />\n//     </Column>\n//     <VerticalDivider />\n//     <Column>\n//       <ColumnTitle>Objects</ColumnTitle>\n//       <CardItem iconClass=\"bi bi-book-half\" title=\"Books\" />\n//       <CardItem iconClass=\"bi bi-laptop\" title=\"Computers\" />\n//     </Column>\n//   </Container>\n// );\n\nconst accountId = props.accountId ?? context.accountId;\nconst groupId = props.groupId ?? \"f8ad9d1a76259lmdpjnd74e69162a0a014\";\nconst creatorId = props.creatorId ?? \"hack.near\";\n\n// We get all of the groups that have been indexed\nconst groups = Social.index(\"every\", \"group\", { limit: 10 });\n\n// TODO: We can put an infinite scroll for groups\n// And then we could do a Social.get([...groups]) constructed from each index\n\nif (!groups) {\n  return \"\";\n}\n\n// we check if they are a member ? Do we need this here?\n// Ohhhh you join everyone\nconst isMember = Social.keys(\n  `${accountId}/graph/${groupId}/${accountId}`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\n\nconst type = join ? \"leave\" : \"join\";\n\nconst handleJoin = () => {\n  Social.set({\n    graph: { [groupId]: { [accountId]: \"\" } },\n    index: {\n      graph: JSON.stringify({\n        key: groupId,\n        value: {\n          type,\n          accountId,\n        },\n      }),\n      notify: JSON.stringify({\n        key: creatorId, // in that case, who should the creator be?\n        value: {\n          type,\n          accountId,\n          message: \"everyone is growing!\",\n        },\n      }),\n    },\n  });\n};\n\nconst GroupCard = styled.div`\n  flex-basis: calc(33.33% - 20px);\n  margin: 0;\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 10px;\n\n  @media (hover: none) {\n    grid-template-columns: repeat(1, 1fr);\n  }\n`;\n\nconst { Feed } = VM.require(\"efiz.near/widget/Module.Feed\");\nFeed = Feed || (() => <></>);\n\nconst Header = styled.div`\n  background: black;\n`;\n\nconst Container = styled.div`\n  margin: 0;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 100%;\n  flex: 1;\n  height: 100vh;\n  margin-top: var(--header-height);\n`;\n\nconst ActivityContainer = styled.div`\n  overflow-y: scroll;\n`;\n\nconst Left = styled.div`\n  padding: 20px;\n  background: #f8f8f9;\n  flex: 3;\n`;\n\nconst Center = styled.div`\n  flex: 9;\n`;\n\nconst H5 = styled.h5`\n  margin-bottom: 20px;\n`;\n\nconst Title = styled.h2`\n  margin: 20px 0;\n`;\n\nconst CardWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  padding: 20px;\n`;\n\nreturn (\n  <Container>\n    <Left>\n      <button\n        onClick={() => State.update({ showModal: true })}\n        className=\"btn btn-success\"\n      >\n        create\n      </button>\n      <Widget src={\"libertydao.near/widget/initiatives.list\"} />\n    </Left>\n    <Center>\n      {state.groupId && state.creatorId ? (\n        <Widget\n          src={\"libertydao.near/widget/initiatives.page\"}\n          props={{\n            creatorId: state.creatorId,\n            groupId: state.groupId,\n          }}\n        />\n      ) : (\n        <CardWrapper>\n          <Feed\n            index={{\n              action: \"every\",\n              key: \"group\",\n              options: {\n                limit: 10,\n                order: \"desc\",\n                accountId: undefined,\n              },\n            }}\n            Item={(p) => {\n              return (\n                <Widget\n                  key={p}\n                  src={\"libertydao.near/widget/initiatives.card\"}\n                  props={{\n                    creatorId: p.accountId,\n                    groupId: p.value.id,\n                    onClick: () => State.update({ creatorId: p.accountId, groupId: p.value.id }),\n                  }}\n                />\n              );\n            }}\n            Layout={Grid}\n          />\n        </CardWrapper>\n      )}\n    </Center>\n    {state.showModal && (\n      <Widget\n        src={\"libertydao.near/widget/initiatives.create\"}\n        props={{\n          handleClose: () => State.update({ showModal: false }),\n        }}\n      />\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/libertydao.near/widget/initiatives.index", "fact_widget_deployments_id": "587b2e94f227d7d321c664534c93f659", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}