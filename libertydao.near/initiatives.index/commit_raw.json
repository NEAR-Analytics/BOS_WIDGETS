{"tx_hash": "FFpG6VYKy8AJAE5auUcSa8Pp7SLwGnyKTjoUw6qa4rg5", "action_id_social": "MULzuLxF7D3HmWgNsw2aBiwTMHf1FfVZ1UXkH8Q8G8U-0-widget", "block_id": 101574611, "block_timestamp": "2023-09-20T20:33:28.914Z", "signer_id": "libertydao.near", "widget_name": "initiatives.index", "source_code": "const accountId = props.accountId ?? context.accountId;\nconst groupId = props.groupId ?? \"f8ad9d1a76259lmdpjnd74e69162a0a014\";\nconst creatorId = props.creatorId ?? \"hack.near\";\n\n// We get all of the groups that have been indexed\nconst groups = Social.index(\"every\", \"group\", { limit: 10 });\n\n// TODO: We can put an infinite scroll for groups\n// And then we could do a Social.get([...groups]) constructed from each index\n\nif (!groups) {\n  return \"\";\n}\n\n// we check if they are a member ? Do we need this here?\n// Ohhhh you join everyone\nconst isMember = Social.keys(\n  `${accountId}/graph/${groupId}/${accountId}`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\n\nconst type = join ? \"leave\" : \"join\";\n\nconst handleJoin = () => {\n  Social.set({\n    graph: { [groupId]: { [accountId]: \"\" } },\n    index: {\n      graph: JSON.stringify({\n        key: groupId,\n        value: {\n          type,\n          accountId,\n        },\n      }),\n      notify: JSON.stringify({\n        key: creatorId, // in that case, who should the creator be?\n        value: {\n          type,\n          accountId,\n          message: \"everyone is growing!\",\n        },\n      }),\n    },\n  });\n};\n\nconst GroupCard = styled.div`\n  flex-basis: calc(33.33% - 20px);\n  margin: 0;\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 10px;\n\n  @media (hover: none) {\n    grid-template-columns: repeat(1, 1fr);\n  }\n`;\n\nconst { Feed } = VM.require(\"efiz.near/widget/Module.Feed\");\nFeed = Feed || (() => <></>);\n\nconst Header = styled.div`\n  background: black;\n`;\n\nconst Container = styled.div`\n  margin: 0;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 100%;\n  flex: 1;\n  height: 100vh;\n  margin-top: var(--header-height);\n`;\n\nconst ActivityContainer = styled.div`\n  overflow-y: scroll;\n`;\n\nconst Left = styled.div`\n  padding: 20px;\n  background: #f8f8f9;\n  flex: 3;\n  margin-right: 20px;\n`;\n\nconst Center = styled.div`\n  flex: 9;\n  padding: 0 20px;\n`;\n\nconst H5 = styled.h5`\n  margin-bottom: 20px;\n`;\n\nconst Title = styled.h2`\n  margin: 20px 0;\n`;\n\nconst CardWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  padding: 20px;\n`;\n\nreturn (\n  <Container>\n    <Left>\n      <H5>Your List</H5>\n      <button\n        onClick={() => State.update({ showModal: true })}\n        className=\"btn btn-success\"\n      >\n        create\n      </button>\n      <Widget src={\"libertydao.near/widget/initiatives.list\"} />\n    </Left>\n    <Center>\n      <CardWrapper>\n        <Feed\n          index={{\n            action: \"every\",\n            key: \"group\",\n            options: {\n              limit: 10,\n              order: \"desc\",\n              accountId: undefined,\n            },\n          }}\n          Item={(p) => {\n            return (\n              <Widget\n                key={p}\n                src={\"libertydao.near/widget/initiatives.card\"}\n                props={{\n                  creatorId: p.accountId,\n                  groupId: p.value.id,\n                }}\n              />\n            );\n          }}\n          Layout={Grid}\n        />\n      </CardWrapper>\n    </Center>\n    {state.showModal && (\n      <Widget\n        src={\"libertydao.near/widget/initiatives.create\"}\n        props={{\n          handleClose: () => State.update({ showModal: false }),\n        }}\n      />\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/libertydao.near/widget/initiatives.index", "fact_widget_deployments_id": "a640f81141e404a533abdabf17e38275", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}