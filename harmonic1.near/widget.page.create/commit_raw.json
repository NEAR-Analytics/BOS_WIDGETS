{"tx_hash": "82nFJayLTvMRNgKuZdeU9a6Pr4y5P9dVMjVu2vzeyyXB", "action_id_social": "GCdyzsLYm8Yqw5pwzfxTpdHdHKq1GW76NMV3MuCT6fAB-0-widget", "block_id": 119404826, "block_timestamp": "2024-05-21T08:32:57.614Z", "signer_id": "harmonic1.near", "widget_name": "widget.page.create", "source_code": "// Just fetch the CSS (ideally, only do it once per page instead of doing it in each component)\nconst css = fetch(\"https://floatui.com/tailwind.css\").body;\nif (!css) return \"\";\nconst Tailwind = styled.div`\n  ${css}\n`;\n//const Tailwind = VM.require(\"harmonic1.near/widget/tailwind\");\nconst wasm = VM.require(\"jass-build.near/widget/trialAccountWasm\");\nconst contract = \"v2.keypom.near\";\n// Utility function to convert NEAR to YoctoNEAR (assuming it's not already provided)\n// const parseNearAmount = (nearAmount) => {\n//     return new BN(nearAmount).multipliedBy(new BN(\"1000000000000000000000000\")).toString();\n// };\nconst parseNearAmount = (nearAmount) => {\n  //\n  // YoctoNEAR per NEAR (1 NEAR = 10^24 YoctoNEAR)\n  console.log(nearAmount);\n  const nearToYocto = new Big(\"1000000000000000000000000\");\n  console.log(\n    nearAmount ? new Big(nearAmount).times(nearToYocto).toFixed() : \"0\"\n  );\n  return nearAmount ? new Big(nearAmount).times(nearToYocto).toFixed() : \"0\";\n};\n// State.init({\n//   callableContract: \"\",\n//   maxAttachableYoctoPerContract: \"1\",\n//   callableMethods: \"*\",\n//   startingBalance: \"\",\n//   trialEndFloor: \"\",\n// });\nconst [callableContract, setCallableContract] = useState(\"\");\nconst [callableContractValuesArray, setCallableContractValuesArray] = useState(\n  []\n);\nconst handleCallableContractInput = (e) => {\n  const { value } = e.target;\n  setCallableContract(value);\n  setCallableContractValuesArray(\n    value\n      .split(\",\")\n      .map((item) => item.trim())\n      .filter((item) => item)\n  );\n};\n// const handleCallableContractChange = (e) => {\n//   setCallableContract(e.target.value);\n// };\n//const [maxAttachableYoctoPerContract, setMaxAttachableYoctoPerContract] = useState(\"1\");\nconst [callableMethods, setCallableMethods] = useState(\"\");\nconst [callableMethodsValuesArray, setCallableMethodsValuesArray] = useState(\n  []\n);\nconst handleCallableMethodsInput = (e) => {\n  const { value } = e.target;\n  setCallableMethods(value);\n  setCallableMethodsValuesArray(\n    value\n      .split(\",\")\n      .map((item) => item.trim())\n      .filter((item) => item)\n  );\n};\nconst [startingBalance, setStartingBalance] = useState(\"\");\nconst [trialEndFloor, setTrialEndFloor] = useState(\"\");\nconst PARAM_START = \"|kP|\";\nconst PARAM_STOP = \"|kS|\";\nconst wrapTxnParamsForTrial = (params) => {\n  let newParams = {}; // Initialize newParams inside the function\n  Object.entries(params).forEach(([k, v]) => {\n    if (k === \"args\" && typeof v !== \"string\") {\n      v = JSON.stringify(v);\n    }\n    if (Array.isArray(v)) v = v.join();\n    newParams[PARAM_START + k] = v + PARAM_STOP;\n  });\n  return newParams;\n};\n// // What contracts can the trial account call?\n// const callableContracts = [\n//     'social.near'\n// ]\n// // What is the maximum amount of $NEAR that can be attached to a call for each callable contract?\n// const maxAttachableYoctoPerContract = [\n//     '1', //convert this into Yocto\n// ]\n// // What methods can the trial account call?\n// const callableMethods = [\n//     ['*'],\n// ]\nconst DROP_CONFIG = {\n  // How many claims can each key have.\n  uses_per_key: 1,\n  // Should the drop be automatically deleted when all the keys are used? This is defaulted to false and\n  // Must be overwritten\n  delete_on_empty: true,\n  // When this drop is deleted and it is the owner's *last* drop, automatically withdraw their balance.\n  auto_withdraw: true,\n  // Minimum block timestamp that keys can be used. If None, keys can be used immediately\n  // Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.\n  start_timestamp: null,\n  // How often can a key be used\n  // Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.\n  throttle_timestamp: null,\n  // If claim is called, refund the deposit to the owner's balance. If None, default to false.\n  on_claim_refund_deposit: null,\n  // Can the access key only call the claim method_name? Default to both method_name callable\n  claim_permission: null,\n  // Root account that all sub-accounts will default to. If None, default to the global drop root.\n  drop_root: null,\n};\nconst deployTrialAccount = () => {\n  const startingBalanceYocto = parseNearAmount(startingBalance);\n  const trialEndFloorYocto = parseNearAmount(trialEndFloor);\n  const maxAttachableYoctoPerContract = \"1\";\n  const callableMethods = \"*\";\n  //Before you pass callableContract and other two varss to create_drop\n  //You need to add the mapping contract there too.\n  // callableContracts.push('v1.mapping.keypom.near'); ////testnet: 'v1.mapping.keypom.testnet',\n  const attachableForMapping = parseNearAmount(\"0.002\"); // put the equivent yocto amount\n  // Generate the proper args for setup:\n  let mappedVal = callableContractValuesArray.map(\n    (value) => value + \",v1.mapping.keypom.near\"\n  );\n  let actualContracts = mappedVal.join(\",\");\n  let actualAmounts =\n    maxAttachableYoctoPerContract + \",\" + attachableForMapping;\n  let actualMethods = callableMethods + \",\" + \"set\";\n  //Disclaimer to extend above logic to support Arrays, please refer to original keypom functions.\n  //Take the storage cost into consideration for the attached deposit and trial end floor\n  const storageCost = parseNearAmount(\"0.35\"); //Deposit for contract state, put in yocto\n  console.log(\"After storage\");\n  // const attachedDeposit = new BN(startingBalanceYocto).add(new BN(storageCost)).toString();\n  // trialEndFloorYocto = new BN(attachedDeposit).sub(new BN(trialEndFloorYocto)).toString();\n  const attachedDeposit = new Big(startingBalanceYocto)\n    .plus(new Big(storageCost))\n    .toFixed();\n  trialEndFloorYocto = new Big(attachedDeposit)\n    .minus(new Big(trialEndFloorYocto))\n    .toFixed();\n  console.log(\"Before storage\");\n  const repayAmountYocto = \"0\";\n  const repayTo = context.accountId;\n  const fcData = {\n    methods: [\n      [\n        {\n          receiver_id: \"near\",\n          method_name: \"create_account_advanced\",\n          attached_deposit: attachedDeposit,\n          args: JSON.stringify({\n            new_account_id: \"INSERT_NEW_ACCOUNT\",\n            options: {\n              contract_bytes: wasm.contract_bytes,\n              limited_access_keys: [\n                {\n                  public_key: \"INSERT_TRIAL_PUBLIC_KEY\",\n                  allowance: \"0\",\n                  receiver_id: \"INSERT_NEW_ACCOUNT\",\n                  method_names: \"execute,create_account_and_claim\",\n                },\n              ],\n            },\n          }),\n          user_args_rule: \"UserPreferred\",\n        },\n        {\n          receiver_id: \"\",\n          method_name: \"setup\",\n          attached_deposit: \"0\",\n          args: JSON.stringify(\n            wrapTxnParamsForTrial({\n              contracts: actualContracts,\n              amounts: actualAmounts,\n              methods: actualMethods,\n              funder: repayTo,\n              repay: repayAmountYocto,\n              floor: trialEndFloorYocto,\n            })\n          ),\n          receiver_to_claimer: true,\n        },\n      ],\n    ],\n  };\n  const drop_id = Date.now().toString();\n  const createDropArgs = {\n    drop_id: drop_id,\n    public_keys: [],\n    deposit_per_use: \"0\", // I don't know was this zero but we take this input from users\n    config: DROP_CONFIG,\n    //metadata,//unique identifer, don't need it for now I guess.\n    required_gas: \"150000000000000\",\n    fc: fcData,\n  };\n  Near.call(\n    contract,\n    \"create_drop\",\n    createDropArgs,\n    100000000000000,\n    950000000000000000000000\n  );\n};\nconst ContentContainer = styled.div`\n  z-index: 10;\n  top: 100%;\n  position: absolute;\n`;\nreturn (\n  <>\n    <ContentContainer>\n      <div className=\"d-flex overflow-hidden\">\n        <div className=\"py-4 flex-1 d-lg-flex justify-content-center h-100 overflow-auto\">\n          <div className=\"max-w-lg flex-1 mx-auto px-4 text-secondary\">\n            <div>\n              <h3 className=\"text-dark display-4 font-weight-semibold\">\n                Create Trials for your dApps\n              </h3>\n              <p className=\"mt-3\">\n                Configure your unique trial experience powered by Keypom.\n              </p>\n            </div>\n            {context.accountId ? (\n              <div className=\"mt-3 pb-lg-5\">\n                <div className=\"form-group\">\n                  <label className=\"font-weight-medium\">\n                    Callable Contract\n                  </label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"social.near\"\n                    value={callableContract}\n                    onChange={handleCallableContractInput}\n                    className=\"form-control mt-2\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label className=\"font-weight-medium\">Callable Methods</label>\n                  <input\n                    type=\"text\"\n                    value={callableMethods}\n                    onChange={handleCallableMethodsInput}\n                    placeholder=\"set,get (comma separated method names)\"\n                    className=\"form-control mt-2\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label className=\"font-weight-medium\">Starting Balance</label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"0.1\"\n                    onChange={(e) => setStartingBalance(e.target.value)}\n                    className=\"form-control mt-2\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label className=\"font-weight-medium\">Trial End Floor</label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"0.01\"\n                    onChange={(e) => setTrialEndFloor(e.target.value)}\n                    className=\"form-control mt-2\"\n                  />\n                </div>\n                <button\n                  onClick={async () => {\n                    deployTrialAccount();\n                  }}\n                  className=\"btn btn-dark w-100 mt-3\"\n                >\n                  Create Drop\n                </button>\n              </div>\n            ) : (\n              <h2 className=\"text-dark display-4 font-weight-semibold\">\n                Please sign in with your account\n              </h2>\n            )}\n          </div>\n        </div>\n      </div>\n    </ContentContainer>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/harmonic1.near/widget/widget.page.create", "fact_widget_deployments_id": "9dac72ed2a988e9168897c9d11229877", "inserted_timestamp": "2024-05-21T09:49:33.614Z", "modified_timestamp": "2024-05-21T10:53:57.266Z", "__row_index": 1}