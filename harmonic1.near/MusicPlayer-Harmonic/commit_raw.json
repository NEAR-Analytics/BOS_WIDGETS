{"tx_hash": "DNDtk59RuctHUjV1dF2G3LA6Bu9WDfReGtDYEwBC1F78", "action_id_social": "83fqHcMzVmd1M88CpM8k9ytUSfptJhKYcs59RZhSudh9-0-widget", "block_id": 95307021, "block_timestamp": "2023-06-29T13:41:38.526Z", "signer_id": "harmonic1.near", "widget_name": "MusicPlayer-Harmonic", "source_code": "const accountId = props.accountId || context.accountId;\nconst marketId = \"simple.market.mintbase1.near\";\nconst AFFILIATE_ACCOUNT = props.affiliateAccount || \"jass.near\";\n\nconst data = fetch(\"https://graph.mintbase.xyz\", {\n  method: \"POST\",\n  headers: {\n    \"mb-api-key\": \"omni-site\",\n    \"Content-Type\": \"application/json\",\n    \"x-hasura-role\": \"anonymous\",\n  },\n  body: JSON.stringify({\n    query: `\n     query MyQuery {\n  mb_views_active_listings(\n    order_by: {}\n    where: {nft_contract_id: {_eq: \"daorecords.mintbase1.near\"}}\n    distinct_on: metadata_id\n  ) {\n    listed_by\n    created_at\n    price\n    nft_contract_id\n    token_id\n    metadata_id\n    title\n    reference_blob(path: \"animation_url\")\n  }\n}\n`,\n  }),\n});\n\n//CSS\nconst styles = {\n  container: {\n    display: \"flex\",\n    overflowY: \"auto\", // add this\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"\",\n    height: \"100%\",\n  },\n  playerContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"\",\n    justifyContent: \"center\",\n    margin: \"1rem\",\n  },\n  buttonContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    marginTop: \"1rem\",\n  },\n  songListContainer: {\n    width: \"24rem\",\n    height: \"24rem\",\n    overflowY: \"auto\",\n    backgroundColor: \"#f0f0f0\",\n    borderRadius: \"0.5rem\",\n    padding: \"1rem\",\n  },\n  heading: {\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    marginTop: \"1.5rem\",\n  },\n};\n\n// Initialize state\nlet songs = data.body.data.mb_views_active_listings.filter(\n  (listing) => listing.reference_blob !== \"https://near.social/null\"\n);\nState.init({\n  currentSongIndex: 0,\n});\n\nlet audioElem = new Audio();\n\n// Call this when you want to play the current song\nfunction playCurrentSong() {\n  audioElem.src = songs[state.currentSongIndex].reference_blob;\n  audioElem.play();\n}\n\n// Call this when you want to pause the current song\nfunction pauseCurrentSong() {\n  audioElem.pause();\n}\n\n// Call this when you want to play the next song\nfunction playNextSong() {\n  // Update the current song index\n  let nextSongIndex = (state.currentSongIndex + 1) % songs.length;\n  State.update({\n    currentSongIndex: nextSongIndex,\n  });\n}\n\n// Call this when you want to play the previous song\nfunction playPreviousSong() {\n  // Calculate the previous song index\n  let previousSongIndex =\n    (state.currentSongIndex - 1 + songs.length) % songs.length;\n  State.update({\n    currentSongIndex: previousSongIndex,\n  });\n}\n\n// Call this when you want to select a specific song\nfunction selectSong(index) {\n  State.update({\n    currentSongIndex: index,\n  });\n}\n\nreturn (\n  <>\n    <h1 style={styles.heading}>Decentralised Music Streaming</h1>\n\n    <div style={styles.container}>\n      <div style={styles.playerContainer}>\n        <Widget\n          src=\"mob.near/widget/NftImage\"\n          props={{\n            nft: {\n              tokenId: songs[state.currentSongIndex].token_id,\n              contractId: songs[state.currentSongIndex].nft_contract_id,\n            },\n            style: {\n              width: 300,\n              height: 300,\n              objectFit: \"cover\",\n              minWidth: size,\n              minHeight: size,\n              maxWidth: size,\n              maxHeight: size,\n              overflowWrap: \"break-word\",\n            },\n            thumbnail: \"thumbnail\",\n            //className: \"w-64 h-64 object-cover shadow-lg\",\n            fallbackUrl:\n              \"https://ipfs.near.social/ipfs/bafkreihdiy3ec4epkkx7wc4wevssruen6b7f3oep5ylicnpnyyqzayvcry\",\n          }}\n        />\n        <div style={styles.buttonContainer}>\n          <button\n            style={{\n              backgroundColor: \"black\",\n              color: \"white\",\n              marginRight: \"10px\",\n            }}\n            onClick={playPreviousSong}\n          >\n            Previous\n          </button>\n          <button\n            style={{\n              backgroundColor: \"black\",\n              color: \"white\",\n              marginRight: \"10px\",\n            }}\n            onClick={pauseCurrentSong}\n          >\n            Pause\n          </button>\n          <button\n            style={{\n              backgroundColor: \"black\",\n              color: \"white\",\n              marginRight: \"10px\",\n            }}\n            onClick={playCurrentSong}\n          >\n            Play\n          </button>\n          <button\n            style={{\n              backgroundColor: \"black\",\n              color: \"white\",\n              marginRight: \"10px\",\n            }}\n            onClick={playNextSong}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n      <div style={styles.songListContainer}>\n        <h2 className=\"text-2xl font-bold\">Songs list:</h2>\n        {songs.map((song, i) => (\n          <div\n            className={`cursor-pointer p-2 rounded-lg hover:bg-blue-200 ${\n              state.currentSongIndex === i ? \"bg-blue-300\" : \"\"\n            }`}\n            key={song.token_id}\n            onClick={() => selectSong(i)}\n          >\n            {song.title}\n          </div>\n        ))}\n      </div>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/harmonic1.near/widget/MusicPlayer-Harmonic", "fact_widget_deployments_id": "f2ee1ef57ae00567c07ce98d9fb50603", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 5}