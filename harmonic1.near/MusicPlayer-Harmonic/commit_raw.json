{"tx_hash": "qXjoEFap98MaTAgMmB7uoCQPbMWf1WUkWp8g4o9pwJY", "action_id_social": "FTUHgR6SNMbM3WTWYWFxuK9DGYdENNJTxCY31jnJkBMb-0-widget", "block_id": 95310732, "block_timestamp": "2023-06-29T14:55:18.593Z", "signer_id": "harmonic1.near", "widget_name": "MusicPlayer-Harmonic", "source_code": "const accountId = props.accountId || context.accountId;\nconst marketId = \"simple.market.mintbase1.near\";\nconst AFFILIATE_ACCOUNT = props.affiliateAccount || \"jass.near\";\n\nconst data = fetch(\"https://graph.mintbase.xyz\", {\n  method: \"POST\",\n  headers: {\n    \"mb-api-key\": \"omni-site\",\n    \"Content-Type\": \"application/json\",\n    \"x-hasura-role\": \"anonymous\",\n  },\n  body: JSON.stringify({\n    query: `\n     query MyQuery {\n  mb_views_active_listings(\n    order_by: {}\n    where: {nft_contract_id: {_eq: \"daorecords.mintbase1.near\"}}\n    distinct_on: metadata_id\n  ) {\n    listed_by\n    created_at\n    price\n    nft_contract_id\n    token_id\n    metadata_id\n    title\n    reference_blob(path: \"animation_url\")\n  }\n}\n`,\n  }),\n});\n\n//CSS\nconst styles = {\n  container: {\n    display: \"flex\",\n    //overflowY: \"auto\", // add this\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    //height: \"100%\",\n    //backgroundColor: \"#f0f0f0\",\n    padding: \"1rem\",\n    borderRadius: \"0.5rem\",\n  },\n  innerContainer: {\n    display: \"flex\",\n    //overflowY: \"auto\", // add this\n    flexDirection: \"row\",\n    backgroundColor: \"#f0f0f0\",\n    borderRadius: \"0.5rem\",\n  },\n  playerContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"\",\n    //margin: \"1rem\",\n    //backgroundColor: \"#f0f0f0\",\n    padding: \"1rem\",\n  },\n  buttonContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    marginTop: \"1rem\",\n  },\n  songListContainer: {\n    width: \"24rem\",\n    height: \"24rem\",\n    overflowY: \"auto\",\n    //backgroundColor: \"#f0f0f0\",\n    //borderRadius: \"0.5rem\",\n    padding: \"1rem\",\n  },\n  heading: {\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    margin: \"1.5rem\",\n  },\n  song: {\n    cursor: \"pointer\",\n    padding: \"0.5rem\", // equivalent to \"p-2\" in tailwind\n    borderRadius: \"0.5rem\", // equivalent to \"rounded-lg\" in tailwind\n    marginBottom: \"0.5rem\", // to separate the song titles a bit\n  },\n  selectedSong: {\n    backgroundColor: \"#60A5FA\", // equivalent to \"bg-blue-300\" in tailwind\n  },\n};\n\n// Initialize state\nlet songs = data.body.data.mb_views_active_listings.filter(\n  (listing) => listing.reference_blob !== \"https://near.social/null\"\n);\nState.init({\n  currentSongIndex: 0,\n});\n\nlet audioElem;\n\nfunction playSong(src) {\n  if (audioElem) {\n    // Pause the currently playing song, if any\n    audioElem.pause();\n  }\n  // Now create a new Audio object and start playing the song\n  audioElem = new Audio(src);\n  audioElem.play();\n}\n\n// Call this when you want to play the current song\nfunction playCurrentSong() {\n  //audioElem.src = songs[state.currentSongIndex].reference_blob;\n  //audioElem.play();\n  playSong(songs[state.currentSongIndex].reference_blob);\n}\n\n// Call this when you want to pause the current song\nfunction pauseCurrentSong() {\n  audioElem.pause();\n}\n\n// Call this when you want to play the next song\nfunction playNextSong() {\n  // Pause the current song first\n  pauseCurrentSong();\n\n  // Update the current song index\n  let nextSongIndex = (state.currentSongIndex + 1) % songs.length;\n  State.update({\n    currentSongIndex: nextSongIndex,\n  });\n\n  // Play the new song\n  playCurrentSong();\n}\n\n// Call this when you want to play the previous song\nfunction playPreviousSong() {\n  // Pause the current song first\n  pauseCurrentSong();\n\n  // Calculate the previous song index\n  let previousSongIndex =\n    (state.currentSongIndex - 1 + songs.length) % songs.length;\n  State.update({\n    currentSongIndex: previousSongIndex,\n  });\n\n  // Play the new song\n  playCurrentSong();\n}\n\n// Call this when you want to select a specific song\nfunction selectSong(index) {\n  State.update({\n    currentSongIndex: index,\n  });\n}\n\nreturn (\n  <>\n    <h1 style={styles.heading}>Decentralised Music Streaming</h1>\n\n    <div style={styles.container}>\n      <div style={styles.innerContainer}>\n        <div style={styles.playerContainer}>\n          <Widget\n            src=\"mob.near/widget/NftImage\"\n            props={{\n              nft: {\n                tokenId: songs[state.currentSongIndex].token_id,\n                contractId: songs[state.currentSongIndex].nft_contract_id,\n              },\n              style: {\n                width: 300,\n                height: 300,\n                objectFit: \"cover\",\n                minWidth: size,\n                minHeight: size,\n                maxWidth: size,\n                maxHeight: size,\n                overflowWrap: \"break-word\",\n              },\n              thumbnail: \"thumbnail\",\n              //className: \"w-64 h-64 object-cover shadow-lg\",\n              fallbackUrl:\n                \"https://ipfs.near.social/ipfs/bafkreihdiy3ec4epkkx7wc4wevssruen6b7f3oep5ylicnpnyyqzayvcry\",\n            }}\n          />\n\n          <div style={styles.buttonContainer}>\n            <button\n              style={{\n                backgroundColor: \"black\",\n                color: \"white\",\n                marginRight: \"10px\",\n              }}\n              onClick={playPreviousSong}\n            >\n              Previous\n            </button>\n            <button\n              style={{\n                backgroundColor: \"black\",\n                color: \"white\",\n                marginRight: \"10px\",\n              }}\n              onClick={pauseCurrentSong}\n            >\n              Pause\n            </button>\n            <button\n              style={{\n                backgroundColor: \"black\",\n                color: \"white\",\n                marginRight: \"10px\",\n              }}\n              onClick={playCurrentSong}\n            >\n              Play\n            </button>\n            <button\n              style={{\n                backgroundColor: \"black\",\n                color: \"white\",\n                marginRight: \"10px\",\n              }}\n              onClick={playNextSong}\n            >\n              Next\n            </button>\n          </div>\n        </div>\n        <div style={styles.songListContainer}>\n          <h2 className=\"text-2xl font-bold\">Playlist</h2>\n          {songs.map((song, i) => (\n            <div\n              style={{\n                ...styles.song,\n                ...(state.currentSongIndex === i ? styles.selectedSong : {}),\n              }}\n              key={song.token_id}\n              onClick={() => selectSong(i)}\n              onMouseOver={(e) => (e.target.style.backgroundColor = \"#BFDBFE\")} // equivalent to \"hover:bg-blue-200\" in tailwind\n              onMouseOut={\n                (e) =>\n                  state.currentSongIndex !== i &&\n                  (e.target.style.backgroundColor = \"transparent\") // reset color on mouse out if not selected song\n              }\n            >\n              {song.title}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/harmonic1.near/widget/MusicPlayer-Harmonic", "fact_widget_deployments_id": "9d1db5c4daa6144151c210c64bdc43f3", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 6}