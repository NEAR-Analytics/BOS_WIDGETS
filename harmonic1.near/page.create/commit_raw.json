{"tx_hash": "DJ5DL6Zer4JC6DSA4MjQnFSqjUMqkt7h67yTFsSaPxaq", "action_id_social": "8zcDnaAJB7gfNj4CmQaupo8H8hmQhbJHKiNFTk5UPNtX-0-widget", "block_id": 122161563, "block_timestamp": "2024-06-28T07:36:32.465Z", "signer_id": "harmonic1.near", "widget_name": "page.create", "source_code": "const wasm = VM.require(\"jass-build.near/widget/trialAccountWasm\");\nconst contract = \"v2.keypom.near\";\nconst parseNearAmount = (nearAmount) => {\n  // YoctoNEAR per NEAR (1 NEAR = 10^24 YoctoNEAR)\n  //console.log(nearAmount);\n  const nearToYocto = new Big(\"1000000000000000000000000\");\n  //console.log(nearAmount ? new Big(nearAmount).times(nearToYocto).toFixed() : \"0\");\n  return nearAmount ? new Big(nearAmount).times(nearToYocto).toFixed() : \"0\";\n};\nconst [callableContracts, setCallableContracts] = useState(\"\");\nconst [maxAttachableDepositNear, setMaxAttachableDepositNear] = useState(\"\");\nconst [dropId, setDropId] = useState(null);\nconst handleCallableContractChange = (e) => {\n  setCallableContracts(e.target.value);\n  //creare callable method array on the basis of contracts length\n  const contracts = e.target.value.split(\",\").map((item) => item.trim());\n  setCallableMethodsArrays(contracts.map(() => \"\"));\n};\nconst handleMaxAttachableDepositNearChange = (e) => {\n  setMaxAttachableDepositNear(e.target.value);\n};\n//const [maxAttachableYoctoPerContract, setMaxAttachableYoctoPerContract] = useState(\"1\");\n//const [callableMethods, setCallableMethods] = useState(\"\");\nconst [callableMethodsArrays, setCallableMethodsArrays] = useState([]);\nconst handleCallableMethodsInput = (index, e) => {\n  const newCallableMethodsArrays = [...callableMethodsArrays];\n  newCallableMethodsArrays[index] = e.target.value;\n  setCallableMethodsArrays(newCallableMethodsArrays);\n};\nconst [startingBalance, setStartingBalance] = useState(\"\");\nconst [trialEndFloor, setTrialEndFloor] = useState(\"\");\nconst [repayAmount, setRepayAmount] = useState(\"\");\nconst PARAM_START = \"|kP|\";\nconst PARAM_STOP = \"|kS|\";\nconst wrapTxnParamsForTrial = (params) => {\n  let newParams = {}; // Initialize newParams inside the function\n  Object.entries(params).forEach(([k, v]) => {\n    if (k === \"args\" && typeof v !== \"string\") {\n      v = JSON.stringify(v);\n    }\n    if (Array.isArray(v)) v = v.join();\n    newParams[PARAM_START + k] = v + PARAM_STOP;\n  });\n  return newParams;\n};\nconst DROP_CONFIG = {\n  // How many claims can each key have.\n  uses_per_key: 1,\n  // Should the drop be automatically deleted when all the keys are used? This is defaulted to false and\n  // Must be overwritten\n  delete_on_empty: true,\n  // When this drop is deleted and it is the owner's *last* drop, automatically withdraw their balance.\n  auto_withdraw: true,\n  // Minimum block timestamp that keys can be used. If None, keys can be used immediately\n  // Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.\n  start_timestamp: null,\n  // How often can a key be used\n  // Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.\n  throttle_timestamp: null,\n  // If claim is called, refund the deposit to the owner's balance. If None, default to false.\n  on_claim_refund_deposit: null,\n  // Can the access key only call the claim method_name? Default to both method_name callable\n  claim_permission: null,\n  // Root account that all sub-accounts will default to. If None, default to the global drop root.\n  drop_root: null,\n};\nconst deployTrialAccount = () => {\n  const startingBalanceYocto = parseNearAmount(startingBalance);\n  const trialEndFloorYocto = parseNearAmount(trialEndFloor);\n  const maxDepositArray = maxAttachableDepositNear\n    .split(\", \")\n    .map((deposit) => deposit.trim());\n  const maxAttachableYoctoPerContract = maxDepositArray.map((deposit) => {\n    if (deposit == \"*\") return \"*\";\n    return parseNearAmount(deposit);\n  });\n  //Before you pass callableContract, callableMethods and to create_drop\n  //You need to add the mapping contract there too.\n  // Mapping contract - ('v1.mapping.keypom.near'); ////testnet: 'v1.mapping.keypom.testnet',\n  // function - \"set\"\n  // attachableDeposit - \"0.002\"\n  const attachableForMapping = parseNearAmount(\"0.002\"); // put the equivent yocto amount\n  // Generate the proper args for setup:\n  let actualContracts = callableContracts + \",v1.mapping.keypom.near\";\n  let actualAmounts =\n    maxAttachableYoctoPerContract.join(\",\") + \",\" + attachableForMapping;\n  console.log(actualAmounts);\n  let transformedMethods = callableMethodsArrays.map((methodArray) => {\n    return methodArray.split(\", \").map((method) => method.trim());\n  });\n  //joining different methods from different contracts.\n  //And adding \"set\", for mapping contract\n  let actualMethods =\n    transformedMethods.map((method) => method.join(\":\")).join(\",\") + \",set\";\n  //Take the storage cost into consideration for the attached deposit and trial end floor\n  const storageCost = parseNearAmount(\"0.37\"); //Deposit for contract state, put in yocto\n  const attachedDeposit = new Big(startingBalanceYocto)\n    .plus(new Big(storageCost))\n    .toFixed();\n  trialEndFloorYocto = new Big(attachedDeposit)\n    .minus(new Big(trialEndFloorYocto))\n    .toFixed();\n  //take this input\n  const repayAmountYocto = parseNearAmount(repayAmount);\n  //Repay to drop creator for now.\n  const repayTo = context.accountId;\n  const fcData = {\n    methods: [\n      [\n        {\n          receiver_id: \"near\",\n          method_name: \"create_account_advanced\",\n          attached_deposit: attachedDeposit,\n          args: JSON.stringify({\n            new_account_id: \"INSERT_NEW_ACCOUNT\",\n            options: {\n              contract_bytes: wasm.contract_bytes,\n              limited_access_keys: [\n                {\n                  public_key: \"INSERT_TRIAL_PUBLIC_KEY\",\n                  allowance: \"0\",\n                  receiver_id: \"INSERT_NEW_ACCOUNT\",\n                  method_names: \"execute,create_account_and_claim\",\n                },\n              ],\n            },\n          }),\n          user_args_rule: \"UserPreferred\",\n        },\n        {\n          receiver_id: \"\",\n          method_name: \"setup\",\n          attached_deposit: \"0\",\n          args: JSON.stringify(\n            wrapTxnParamsForTrial({\n              contracts: actualContracts,\n              amounts: actualAmounts,\n              methods: actualMethods,\n              funder: repayTo,\n              repay: repayAmountYocto,\n              floor: trialEndFloorYocto,\n            })\n          ),\n          receiver_to_claimer: true,\n        },\n      ],\n    ],\n  };\n  //to-do Return drop-id to the user.\n  // In future create a page to show all current drops of a user and maybe its config as well.\n  const drop_id = Date.now().toString();\n  setDropId(drop_id);\n  const createDropArgs = {\n    drop_id: drop_id,\n    public_keys: [],\n    deposit_per_use: \"0\", // I don't know was this zero but we take this input from users\n    config: DROP_CONFIG,\n    //metadata,//unique identifer, don't need it for now I guess.\n    required_gas: \"150000000000000\",\n    fc: fcData,\n  };\n  //TO-DO Deposit how much.\n  // Keypom gives a complicated way to  calculate the storage needed for creating a drop.\n  // We should implement in the future.\n  // For now 0.37 is the cost of storing the wasm and another 0.18 for drop config.\n  // Try increasing this if it fails.\n  const deposit = parseNearAmount(0.55);\n  Near.call(contract, \"create_drop\", createDropArgs, 100000000000000, deposit);\n};\nconst ContentContainer = styled.div`\n  background-color: #ebeaea;\n`;\nreturn (\n  <>\n    <ContentContainer>\n      <div className=\"d-flex overflow-hidden\">\n        <div className=\"py-4 flex-1 d-lg-flex justify-content-center h-100 overflow-auto\">\n          <div className=\"max-w-lg flex-1 mx-auto px-4 text-secondary\">\n            <div>\n              <h3 className=\"text-dark display-4 font-weight-semibold\">\n                Create Trials for your dApps\n              </h3>\n              <p className=\"mt-3\">\n                Configure your unique trial experience powered by Keypom.\n              </p>\n            </div>\n            {context.accountId ? (\n              <div className=\"mt-3 pb-lg-5\">\n                <div className=\"form-group\">\n                  <label className=\"font-weight-medium\">\n                    Callable Contract\n                  </label>\n                  <OverlayTrigger\n                    placement=\"right\"\n                    overlay={\n                      <Tooltip id={`tooltip-right`}>\n                        Contracts that the Trial Accounts are allowed to access.\n                        Comma separated values if more than one contract.\n                      </Tooltip>\n                    }\n                  >\n                    <input\n                      type=\"text\"\n                      placeholder=\"social.near, bob.near\"\n                      value={callableContracts}\n                      onChange={handleCallableContractChange}\n                      className=\"form-control mt-2\"\n                    />\n                  </OverlayTrigger>\n                </div>\n                <div className=\"form-group\">\n                  <label className=\"font-weight-medium\">\n                    Max Attachable Deposit\n                  </label>\n                  <OverlayTrigger\n                    placement=\"right\"\n                    overlay={\n                      <Tooltip id={`tooltip-right`}>\n                        How much maximum deposit Trial Accounts are allowed to\n                        attach to function calls.\n                      </Tooltip>\n                    }\n                  >\n                    <input\n                      type=\"text\"\n                      value={maxAttachableDepositNear}\n                      onChange={handleMaxAttachableDepositNearChange}\n                      placeholder=\"0.1, 0.2 (comma separated deposit values)\"\n                      className=\"form-control mt-2\"\n                    />\n                  </OverlayTrigger>\n                </div>\n                {callableMethodsArrays.map((methods, index) => (\n                  <div key={index} className=\"form-group\">\n                    <label className=\"font-weight-medium\">\n                      Callable Methods for Contract {index + 1}\n                    </label>\n                    <OverlayTrigger\n                      placement=\"right\"\n                      overlay={\n                        <Tooltip id={`tooltip-right`}>\n                          Define functions for each callable contract that Trial\n                          Accounts are allowed to access.\n                        </Tooltip>\n                      }\n                    >\n                      <input\n                        type=\"text\"\n                        value={methods}\n                        onChange={(e) => handleCallableMethodsInput(index, e)}\n                        placeholder=\"set,get (comma separated method names)\"\n                        className=\"form-control mt-2\"\n                      />\n                    </OverlayTrigger>\n                  </div>\n                ))}\n                <div className=\"form-group\">\n                  <label className=\"font-weight-medium\">Starting Balance</label>\n                  <OverlayTrigger\n                    placement=\"right\"\n                    overlay={\n                      <Tooltip id={`tooltip-right`}>\n                        Starting Balance that you want send to the Trial\n                        Accounts. It won't be like a regular airdrop cause they\n                        can't use anything other than your dApp.\n                      </Tooltip>\n                    }\n                  >\n                    <input\n                      type=\"text\"\n                      placeholder=\"0.1\"\n                      onChange={(e) => setStartingBalance(e.target.value)}\n                      className=\"form-control mt-2\"\n                    />\n                  </OverlayTrigger>\n                </div>\n                <div className=\"form-group\">\n                  <label className=\"font-weight-medium\">Trial End Floor</label>\n                  <OverlayTrigger\n                    placement=\"right\"\n                    overlay={\n                      <Tooltip id={`tooltip-right`}>\n                        After using this much NEAR, the Trial would be ended and\n                        the users will have to make a full/regular account.\n                      </Tooltip>\n                    }\n                  >\n                    <input\n                      type=\"text\"\n                      placeholder=\"0.01\"\n                      onChange={(e) => setTrialEndFloor(e.target.value)}\n                      className=\"form-control mt-2\"\n                    />\n                  </OverlayTrigger>\n                </div>\n                <div className=\"form-group\">\n                  <label className=\"font-weight-medium\">Repay Amount</label>\n                  <OverlayTrigger\n                    placement=\"right\"\n                    overlay={\n                      <Tooltip id={`tooltip-right`}>\n                        Repay amount that the trial accounts have to pay to the\n                        funder to get a regular account and also preserve the\n                        assets from their trial. Beta feature. Needs better\n                        flow.\n                      </Tooltip>\n                    }\n                  >\n                    <input\n                      type=\"text\"\n                      placeholder=\"0.01\"\n                      onChange={(e) => setRepayAmount(e.target.value)}\n                      className=\"form-control mt-2\"\n                    />\n                  </OverlayTrigger>\n                </div>\n                <OverlayTrigger\n                  // key={placement}\n                  placement=\"right\"\n                  overlay={\n                    <Tooltip id={`tooltip-right`}>\n                      Calls the Keypom Contract and creats a Drop. Please save\n                      the Drop ID returned below.\n                    </Tooltip>\n                  }\n                >\n                  <button\n                    onClick={async () => {\n                      deployTrialAccount();\n                    }}\n                    className=\"btn btn-dark w-100 mt-3\"\n                  >\n                    Create Drop\n                  </button>\n                </OverlayTrigger>\n                {/* <button\n                  onClick={async () => {\n                    deployTrialAccount();\n                  }}\n                  className=\"btn btn-dark w-100 mt-3\"\n                >\n                  Create Drop\n                </button> */}\n                {dropId && <p>Drop ID: {dropId}</p>}\n              </div>\n            ) : (\n              <h2 className=\"text-dark display-4 font-weight-semibold\">\n                Please sign in with your account\n              </h2>\n            )}\n          </div>\n        </div>\n      </div>\n    </ContentContainer>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/harmonic1.near/widget/page.create", "fact_widget_deployments_id": "3f463d0aa126a812d8c4b35d33024598", "inserted_timestamp": "2024-06-28T08:55:42.190Z", "modified_timestamp": "2024-06-28T08:55:42.190Z", "__row_index": 2}