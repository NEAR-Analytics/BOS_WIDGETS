{"tx_hash": "6h7sd2649KfiVqthfzqPKQTxWX7KnsAUriThrwvAyEKK", "action_id_social": "NyrD1r8puheLwt1sH3TsSMHPHvwmUsscUvnhfB11Kjh-0-widget", "block_id": 122045334, "block_timestamp": "2024-06-26T16:34:41.103Z", "signer_id": "root.benjiman.near", "widget_name": "Keypom-Key-Data", "source_code": "console.log(\"Hello from node.js\");\n\nconst GRAPHQL_ENDPOINT = \"https://near-queryapi.api.pagoda.co\";\n\nconst paginationQuery = (offset, limit) => `\nquery MyQuery {\n  root_benjiman_near_all_keypom_key_additions_keys(\n    offset: ${offset}\n    limit: ${limit}\n    order_by: {block_timestamp: desc}\n  ) {\n    funder_id\n    receipt_id\n    block_height\n    block_timestamp\n    public_key\n  }\n}\n`;\n\nconst countQuery = `\nquery MyQuery {\n    root_benjiman_near_all_keypom_key_additions_keys_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n\nfunction getNumKeypomKeys() {\n  let response = fetch(`${GRAPHQL_ENDPOINT}/v1/graphql`, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": \"root_benjiman_near\" },\n    body: JSON.stringify({\n      query: countQuery,\n    }),\n  });\n  console.log(\"RESPONSE: \", response);\n  return response.body.data\n    .root_benjiman_near_all_keypom_key_additions_keys_aggregate.aggregate.count;\n}\n\nfunction fetchKeypomKeyDataFromDb(offset, limit) {\n  let data = fetch(`${GRAPHQL_ENDPOINT}/v1/graphql`, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": \"root_benjiman_near\" },\n    body: JSON.stringify({\n      query: paginationQuery(offset, limit),\n    }),\n  });\n  return data.body.data.root_benjiman_near_all_keypom_key_additions_keys;\n}\n\nState.init({ keyData: [] });\n\nconst paginateKeys = (limit, keysPerQuery) => {\n  let keyData = [];\n  for (let i = 0; i < limit; i += keysPerQuery) {\n    let fetchedKeyData = fetchKeypomKeyDataFromDb(i, keysPerQuery);\n\n    keyData = keyData.concat(fetchedKeyData);\n  }\n\n  return keyData;\n};\n\nconst getKeyData = () => {\n  let numKeys = getNumKeypomKeys();\n  console.log(\"Num Keys: \", numKeys);\n  return paginateKeys(numKeys, 10000);\n};\n\nconst keyData = getKeyData();\n\nlet dataSet = {};\nlet totalNumberOfExperiences = 1;\nfor (var data of keyData) {\n  let date = new Date(0);\n  date.setUTCMilliseconds(data.block_timestamp / 1e6);\n  let dateForSet = date.toLocaleDateString();\n  dataSet[dateForSet] = dataSet[dateForSet] || 0;\n  dataSet[dateForSet] = totalNumberOfExperiences;\n\n  totalNumberOfExperiences += 1;\n}\n\n// Extract dates and values\nconst dates = Object.keys(dataSet);\nconst experiences = Object.values(dataSet);\n\n// Reverse dates\nconst reversedDates = dates.reverse();\n\nconst colsToShow = [\"Experiences\"];\nconst definition = {\n  title: {\n    text: \"Keypom Experiences Created Over Time\",\n    subtext: `Executed by the Keypom core team`,\n  },\n  tooltip: {\n    trigger: \"axis\",\n  },\n  legend: {\n    data: colsToShow,\n    top: \"50\",\n  },\n  grid: {\n    left: \"3%\",\n    right: \"4%\",\n    bottom: \"3%\",\n    top: \"100\",\n    containLabel: true,\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {},\n    },\n  },\n  xAxis: {\n    type: \"category\",\n    boundaryGap: false,\n    data: reversedDates,\n  },\n  yAxis: {\n    type: \"value\",\n  },\n  series: colsToShow.map((col) => ({\n    name: col,\n    type: \"line\",\n    data: experiences,\n  })),\n};\n\nreturn (\n  <div>\n    <Widget src={`nearpavel.near/widget/EChart`} props={{ definition }} />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/root.benjiman.near/widget/Keypom-Key-Data", "fact_widget_deployments_id": "a7a73787f0ee6df2afe0fd3f19cd73df", "inserted_timestamp": "2024-06-26T17:54:14.774Z", "modified_timestamp": "2024-06-26T17:54:14.774Z", "__row_index": 2}