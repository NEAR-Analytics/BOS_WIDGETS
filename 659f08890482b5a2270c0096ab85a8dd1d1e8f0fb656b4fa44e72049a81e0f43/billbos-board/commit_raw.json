{"tx_hash": "Fs463SoMDeYJ11jtiZ52o6azE1G5YtWFymbjMxkoDUgY", "action_id_social": "H7x5JMh7St7sbopy6R7BGokHGuDZkxkJkeMbW3Yj6f5A-0-widget", "block_id": 111274711, "block_timestamp": "2024-01-25T10:38:30.525Z", "signer_id": "659f08890482b5a2270c0096ab85a8dd1d1e8f0fb656b4fa44e72049a81e0f43", "widget_name": "billbos-board", "source_code": "const fontFamily = props.fontFamily ?? \"Arial, sans-serif\";\nconst fontSize = props.fontSize ?? \"10px\";\nconst textColor = props.textColor ?? \"white\";\nconst backgroundColor = props.backgroundColor ?? \"black\";\nconst height = props.height ?? \"20px\";\nconst width = props.width ?? \"100%\";\n\nState.init({\n  raw: [],\n  show: [],\n  count: 0,\n  footerContent: [],\n});\n\nconst fetchApi = (queryURI, method, data) => {\n  const options = {\n    method: method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  if (data) options[\"body\"] = JSON.stringify(data);\n  return asyncFetch(queryURI, options);\n};\n\nconst BillBOSAddress = [\n  {\n    chain: \"25925\",\n    address: \"0xD8D21C24F8513E35bdC26832aD366ac2F4EE0d7F\",\n    rpc: \"https://rpc-testnet.bitkubchain.io\",\n  },\n  {\n    chain: \"35011\",\n    address: \"0x21559144afcD0C2E3Ba5D0A6e41c46276663983B\",\n    rpc: \"https://rpc.j2o.io/\",\n  },\n];\n\nconst BillBOSCoreABI = fetch(\n  \"https://gist.githubusercontent.com/Chayanonc/1c7b2cf1559ed20b342f76846966cb65/raw/fa27150e36d18d43d6298c8dd27f8c8e852dde23/billbos-core.json\"\n);\nif (!BillBOSCoreABI.ok) {\n  return \"Loading\";\n}\nconst IBillBOSCore = new ethers.utils.Interface(BillBOSCoreABI.body);\n\nconst myList = state.footerContent.map((item) => {\n  return (\n    <>\n      <p class=\"title\">{item.topic}</p>\n      <p class=\"value\">{item.value}</p>\n    </>\n  );\n});\n\nconst Marquee = `\n    <style>\n      body {\n        margin: 0\n      }\n\n      .marquee {\n        white-space: nowrap;\n        overflow: hidden;\n        position: relative;\n        font-family: ${fontFamily};\n        font-size: ${fontSize};\n        color: white;\n        height: ${height};\n        width: ${width};\n        display: flex;\n        align-items: center;\n        justify-content: start;\n      }\n\n      .marquee span {\n        display: inline-block;\n        padding-left: 100%;\n        white-space: nowrap;\n        will-change: transform;\n        animation: marquee 3s linear infinite;\n      }\n\n      .marquee div {\n        padding-left: 100%;\n        display: flex;\n      }\n\n      .title {\n        margin-left: 25px;\n        color: yellow;\n      }\n\n      .value {\n        margin-left: 5px;\n        color: white;\n      }\n\n      from {\n        transform: translateX(100%);\n      }\n      to {\n        transform: translateX(-100%);\n      }\n    </style>\n\n    <div class=\"marquee\">\n        <span class=\"text-white\">\n            <div>\n                ${myListString}\n            </div>\n        </span>\n    </div>\n  `;\n\nconst MarqueeStyled = styled.div`\n  .marquee {\n    position: relative;\n    width: 100vw;\n    max-width: 100%;\n    height: 20px;\n    overflow-x: hidden;\n    background-color: black;\n  }\n\n  .track {\n    position: absolute;\n    white-space: nowrap;\n    will-change: transform;\n    animation: marquee 200s linear infinite;\n  }\n\n  .content {\n    font-size: 13px;\n    width: 100%;\n  }\n\n  .title {\n    margin-left: 25px;\n    color: yellow;\n  }\n\n  .value {\n    margin-left: 5px;\n    color: white;\n  }\n\n  @keyframes marquee {\n    0% {\n      transform: translateX(100%);\n    }\n    100% {\n      transform: translateX(-5000%);\n    }\n  }\n`;\n\nconst [count, setCount] = useState(0);\n\nfunction weightedRandomItems(arr) {\n  const result = [];\n  const originalArr = [...arr];\n  for (let i = 0; i < 5; i++) {\n    const totalWeight = originalArr.reduce(\n      (sum, item) => sum + Number(item[2]),\n      0\n    );\n    const randomNum = Math.random() * totalWeight;\n    let cumulativeWeight = 0;\n\n    for (let j = 0; j < originalArr.length; j++) {\n      cumulativeWeight += Number(originalArr[j][2]);\n\n      if (randomNum <= cumulativeWeight) {\n        result.push(originalArr[j]);\n        originalArr.splice(j, 1);\n        break;\n      }\n    }\n    State.update({\n      show: result,\n    });\n    submit(result);\n  }\n}\n\nconst _fetch = () => {\n  BillBOSAddress.map((billBOS) => {\n    new ethers.Contract(\n      billBOS.address,\n      IBillBOSCore,\n      new ethers.providers.JsonRpcProvider(billBOS.rpc)\n    )\n      .getActiveAds()\n      .then((res) => {\n        if (res) {\n          State.update({\n            raw: state.raw.concat(\n              res.map((item) => ({ ...item, chain: billBOS.chain }))\n            ),\n            count: state.count + 1,\n          });\n        } else {\n          State.update({ count: state.count + 1 });\n        }\n      })\n      .catch((err) => console.log(err));\n  });\n};\n\nconst submit = (show) => {\n  new ethers.Contract(\n    BillBOSAddress[0].address,\n    IBillBOSCore,\n    new ethers.providers.JsonRpcProvider(BillBOSAddress[0].rpc)\n  )\n    .count()\n    .then((month) => {\n      const data = {\n        webpageOwnerWalletAddress: props.webpageOwnerAddress,\n        month: Number(month.toString()),\n        ads: show.map((item) => ({\n          ad_id: item[0].toString(),\n          chainId: item.chain,\n        })),\n      };\n      fetchApi(\"https://api-billbos.0xnutx.space/ads\", \"POST\", data);\n    });\n};\n\nuseEffect(() => {\n  _fetch();\n\n  fetchApi(\"https://api-billbos.0xnutx.space/bond\", \"GET\").then((res) => {\n    const content = res.body.map((item) => ({\n      topic: item.name_th,\n      value: item.coupon_rate,\n    }));\n    State.update({ footerContent: content });\n  });\n}, []);\nuseEffect(() => {\n  if (state.raw.length > 0 && state.show.length <= 0) {\n    weightedRandomItems(state.raw);\n  }\n}, [state.raw]);\n\nuseEffect(() => {\n  if (state.show.length > 0) {\n    const len = state.show.length;\n    setInterval(() => {\n      setCount((prev) => (prev + 1) % (len > 5 ? 5 : len));\n    }, 5000);\n\n    console.log(state.show.length);\n  }\n}, [state.show]);\n\nreturn (\n  <div\n    style={{\n      width: \"728px\",\n    }}\n  >\n    <div style={{ width: 728, height: 90 }}>\n      {state.show.length > 0 ? (\n        <a href={state.show[count][1][2] || \"\"} target=\"_blank\">\n          <img\n            src={`https://ipfs.near.social/ipfs/${state.show[count][1][1]}`}\n            width={728}\n            height={90}\n          />\n        </a>\n      ) : (\n        <>Loading...</>\n      )}\n    </div>\n    <MarqueeStyled>\n      <div class=\"marquee\">\n        <div class=\"track\" style={{ width: \"100%\" }}>\n          <div\n            class=\"content\"\n            style={{\n              display: \"flex\",\n            }}\n          >\n            {myList}\n          </div>\n        </div>\n      </div>\n    </MarqueeStyled>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/659f08890482b5a2270c0096ab85a8dd1d1e8f0fb656b4fa44e72049a81e0f43/widget/billbos-board", "fact_widget_deployments_id": "da77a0fe30350769eedc5517fdfc9f1f", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 8}