{"tx_hash": "5PoZ846GtWZjcFVw8SMsw2tdsXPgrtapJkf1qwxABBXB", "action_id_social": "4Xf86cxzH28w3NAajyZ23ne8z3V7DoF122r5dBWaY7ff-0-widget", "block_id": 114304663, "block_timestamp": "2024-03-08T03:21:41.089Z", "signer_id": "659f08890482b5a2270c0096ab85a8dd1d1e8f0fb656b4fa44e72049a81e0f43", "widget_name": "billbos-main", "source_code": "State.init({\n  chainId: undefined,\n  walletAddress: null,\n  viewOfMonth: 0,\n  viewOfWalletAddress: 0,\n  ratioOfWalletAddress: 0,\n  totalEarningBalance: 0,\n  totalStakedBalance: 0,\n  monthCount: 0,\n  earningBalance: undefined,\n  stakedBalance: undefined,\n  walletConnected: false,\n  ads: [],\n  adsUser: [],\n  tabSelect: 0,\n  chains: {\n    25925: {\n      id: 25925,\n      billBOSCore: \"0xD8D21C24F8513E35bdC26832aD366ac2F4EE0d7F\",\n      name: \"Bitkub Chain\",\n      rpcUrl: \"https://rpc-testnet.bitkubchain.io\",\n      currencySymbol: \"tKUB\",\n      nativeCurrency: ETH_TOKEN,\n      image:\n        \"https://ipfs.near.social/ipfs/bafkreicksbcmv5i7ezaw5b2424vliuegcbgfckjc4qt73eql67pdmrvvfu\",\n    },\n    35011: {\n      id: 35011,\n      name: \"J2O Taro\",\n      billBOSCore: \"0x21559144afcD0C2E3Ba5D0A6e41c46276663983B\",\n      rpcUrl: \"https://rpc.j2o.io\",\n      nativeCurrency: ETH_TOKEN,\n      currencySymbol: \"taro\",\n      image:\n        \"https://ipfs.near.social/ipfs/bafkreia4w3mcfsrvcoh3r44x5nxrmarrt5xr3nta7dnw7pjfufd3b3anki\",\n    },\n  },\n});\n\nconst [adsInfo, setAdsInfo] = useState({});\n// const [earningBalance, setEarningBalance] = useState(0);\n// const [stakedBalance, setStakedBalance] = useState(0);\nconst fE = ethers.utils.formatEther;\nconst mainWidget =\n  \"659f08890482b5a2270c0096ab85a8dd1d1e8f0fb656b4fa44e72049a81e0f43\";\n\nconst BACKEND_API = \"https://billbos-api.finstable.co.th\";\nconst DEFAULT_CHAIN_ID = 25925;\nconst CHAIN_LIST = [25925, 35011];\nconst ETH_TOKEN = { name: \"Ethereum\", symbol: \"ETH\", decimals: 18 };\n\nconst BillBOSCoreABI = fetch(\n  \"https://gist.githubusercontent.com/Chayanonc/1c7b2cf1559ed20b342f76846966cb65/raw/fa27150e36d18d43d6298c8dd27f8c8e852dde23/billbos-core.json\"\n).body;\n\nif (!BillBOSCoreABI) {\n  return \"Loading\";\n}\n\nfunction switchEthereumChain(chainId) {\n  const chainIdHex = `0x${chainId.toString(16)}`;\n  Ethers.send(\"wallet_switchEthereumChain\", [{ chainId: chainIdHex }]);\n}\n\nfunction setTabSelect(index) {\n  State.update({\n    tabSelect: index,\n  });\n}\n\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((data) => {\n      const chainId = data?.chainId;\n      if (CHAIN_LIST.includes(chainId)) {\n        State.update({ chainId: chainId });\n      } else {\n        State.update({ chainId: null });\n        switchEthereumChain(DEFAULT_CHAIN_ID);\n      }\n    });\n}\n\nconst fetchApi = (queryURI, method) => {\n  return asyncFetch(queryURI, {\n    method: method,\n  });\n};\n\nconst handleRequest = async (query, viewCase) => {\n  const e = BACKEND_API + query;\n  switch (viewCase) {\n    case \"viewOfMonth\":\n      fetchApi(e, \"GET\").then((res) => {\n        console.log({ viewOfMonth: res });\n        if (res.ok) {\n          State.update({ viewOfMonth: res.body.view });\n        }\n      });\n      return;\n    case \"ad-view-by-adId\":\n      return fetchApi(e, \"GET\").then((res) => {\n        return res;\n      });\n    default:\n      break;\n  }\n};\n\nfunction checkProvider() {\n  const provider = Ethers.provider();\n\n  if (provider) {\n    provider\n      .getSigner()\n      ?.getAddress()\n      ?.then((address) => {\n        State.update({ walletAddress: address });\n      });\n    State.update({ walletConnected: true });\n  } else {\n    State.update({ walletConnected: false });\n  }\n}\ncheckProvider();\n\nfunction getViewAds(item, chainId) {\n  const res = handleRequest(\n    `/ads/ad-view-by-adId?adId=${parseInt(item[0])}&month=${Number(\n      state.monthCount\n    )}&chainId=${chainId}`,\n    \"ad-view-by-adId\"\n  );\n  res.then((res) => {\n    adsInfo[`${chainId}-${parseInt(item[0])}-adsView`] = res.ok\n      ? res.body.view\n      : \"0\";\n  });\n}\n\nfunction formatAds(item, chainId) {\n  getViewAds(item, chainId);\n  adsInfo[`${chainId}-${parseInt(item[0])}-staked`] = item[2] || \"0\";\n\n  return {\n    adsId: \"\" + parseInt(item[0]),\n    adsContent: {\n      name: item[1][0],\n      imageCID: item[1][1],\n      newTabLink: item[1][2],\n      widgetLink: item[1][3],\n      isInteractive: item[1][4],\n    },\n    adsStakedBalance: fE(item[2]),\n    chainId: \"\" + chainId,\n  };\n}\n\nfunction getRewards() {\n  const provider = Ethers.provider();\n  const contract = new ethers.Contract(\n    state.chains[state.chainId].billBOSCore,\n    BillBOSCoreABI,\n    provider\n  );\n\n  contract.getReward(state.walletAddress).then((res) => {\n    adsInfo[\"0\"] = fE(res[0]);\n    adsInfo[\"1\"] = fE(res[1]);\n  });\n}\n\nfunction getTotalDashboard() {\n  const chainId = state.chainId\n    ? String(state.chainId)\n    : String(DEFAULT_CHAIN_ID);\n\n  const provider =\n    Ethers.provider() ||\n    new ethers.providers.JsonRpcProvider(state.chains[chainId].rpcUrl);\n  const contract = new ethers.Contract(\n    state.chains[chainId].billBOSCore,\n    BillBOSCoreABI,\n    provider\n  );\n  contract.totalStakedBalanceLast().then((res) => {\n    console.log(\"setStakedBalance\", fE(res));\n    State.update({ stakedBalance: ethers.utils.formatEther(res) });\n  });\n  contract.totalEarningBalanceLast().then((res) => {\n    console.log(\"setEarningBalance\", fE(res));\n    State.update({ earningBalance: fE(res) });\n  });\n  contract.count().then((res) => {\n    State.update({ monthCount: fE(res) });\n  });\n  contract.getActiveAds().then(async (res) => {\n    if (res && res.length > 0) {\n      const activeAds = res.map((item, index) => {\n        getViewAds(item, chainId);\n        adsInfo[`${chainId}-${parseInt(item[0])}-staked`] = item[2] || \"0\";\n        return {\n          chainId: chainId,\n          adsId: Number(item[0]),\n          adsContent: {\n            name: item[1][0],\n            imageCID: item[1][1],\n            newTabLink: item[1][2],\n            widgetLink: item[1][3],\n            isInteractive: item[1][4],\n          },\n          adsStakedBalance: item[2],\n          adsViewed: res,\n        };\n      });\n      State.update({ ads: activeAds });\n    }\n  });\n}\n\ngetTotalDashboard();\n\nfunction getAdsByAddress(walletAddress) {\n  const chainId = state.chainId || DEFAULT_CHAIN_ID;\n  const billbosCoreAddress = state.chains[chainId].billBOSCore;\n  const provider =\n    Ethers.provider() ||\n    new ethers.providers.JsonRpcProvider(state.chains[chainId].rpcUrl);\n  const contract = new ethers.Contract(\n    billbosCoreAddress,\n    BillBOSCoreABI,\n    provider\n  );\n  contract.getAdsUser(walletAddress).then((res) => {\n    const adsAll = res.map((item) => {\n      return formatAds(item, chainId);\n    });\n    State.update({\n      adsUser: adsAll || [],\n    });\n  });\n}\n\nif (state.tabSelect != 1) {\n  State.update({\n    adsUser: [],\n  });\n}\n\nif (state.tabSelect == 1 && state.adsUser.length == 0) {\n  getAdsByAddress(state.walletAddress);\n}\n\nif (state.chainId) {\n  getTotalDashboard();\n}\n\nif (state.earningBalance == undefined || state.stakedBalance == undefined) {\n  return \"\";\n}\n\nconst tabComponent = () => {\n  if (state.tabSelect == 0) {\n    return (\n      <Widget\n        src={`${mainWidget}/widget/billbos-dashboard`}\n        props={{\n          handleRequest: handleRequest,\n          state: state,\n          DEFAULT_CHAIN_ID: DEFAULT_CHAIN_ID,\n          adsInfo: adsInfo,\n          earningBalance: state.earningBalance,\n          stakedBalance: state.stakedBalance,\n        }}\n      />\n    );\n  } else if (state.tabSelect == 1) {\n    return (\n      <Widget\n        src={`${mainWidget}/widget/billbos-campaigns`}\n        props={{\n          state: state,\n          adsInfo: adsInfo,\n          coreContractAddress:\n            state.chains[state.chainId || DEFAULT_CHAIN_ID].billBOSCore,\n        }}\n      />\n    );\n  } else if (state.tabSelect == 2) {\n    return (\n      <Widget\n        src={`${mainWidget}/widget/billbos-reward`}\n        props={{\n          getRewards: getRewards,\n          state: state,\n          adsInfo: adsInfo,\n          coreContractAddress:\n            state.chains[state.chainId || DEFAULT_CHAIN_ID].billBOSCore,\n          CHAIN_LIST: CHAIN_LIST,\n          BACKEND_API: BACKEND_API,\n        }}\n      />\n    );\n  }\n};\n\nconst main = (\n  <div\n    style={{ height: \"400vh\" }}\n    className=\"relative gray-surface  overflow-y-scroll\"\n  >\n    <div>\n      <div className=\"h-screen \">\n        <div className=\"sticky top-0 z-10 bg-white\">\n          <Widget\n            src=\"chayanonc-ph.near/widget/billbos-header\"\n            props={{\n              walletAddress: state.walletAddress,\n              chainId: state.chainId,\n              setTabSelect: (index) => setTabSelect(index),\n              chains: state.chains,\n            }}\n          />\n        </div>\n        {state.chainId !== undefined && !CHAIN_LIST.includes(state.chainId) ? (\n          <div className=\"w-full\">Chain not support </div>\n        ) : (\n          <div className=\" w-full\">\n            <div>{tabComponent()}</div>\n          </div>\n        )}\n      </div>\n    </div>\n  </div>\n);\n\nreturn (\n  <>\n    <Widget\n      src=\"chayanonc-ph.near/widget/billbos-css\"\n      props={{ children: main }}\n    />\n  </>\n);\n", "metadata": {"fork_of": "659f08890482b5a2270c0096ab85a8dd1d1e8f0fb656b4fa44e72049a81e0f43/widget/billbos-main@111270413"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/659f08890482b5a2270c0096ab85a8dd1d1e8f0fb656b4fa44e72049a81e0f43/widget/billbos-main", "fact_widget_deployments_id": "3ef656540c1f9ce9dac1023806a719c0", "inserted_timestamp": "2024-03-08T04:26:46.616Z", "modified_timestamp": "2024-03-08T04:26:46.616Z", "__row_index": 64}