{"tx_hash": "Ckng8emSJBq69oH4gaTcKHQwKbdYahL56fSowENZBdyG", "action_id_social": "8mWLPLcc753VdRYD2WNrtAUFmuoqxWg3KxWic6hw3Rc8-0-widget", "block_id": 111193983, "block_timestamp": "2024-01-24T10:31:50.327Z", "signer_id": "659f08890482b5a2270c0096ab85a8dd1d1e8f0fb656b4fa44e72049a81e0f43", "widget_name": "billbos-create-ads", "source_code": "const ModalOverlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(12, 12, 12, 0.6);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 100;\n`;\n\nconst StyledInput = styled.div`\n  position: relative;\n  width: 100%;\n  input {\n    appearance: none;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    outline: none;\n    cursor: pointer;\n  }\n`;\n\nconst StyledSelect = styled.div`\n  display: inline-block;\n  position: relative;\n  width: 100%;\n\n  select {\n    appearance: none;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    outline: none;\n    cursor: pointer;\n  }\n\n  &:after {\n    content: '\u2304';\n    position: absolute;\n    top: 50%;\n    right: 10px;\n    transform: translateY(-50%);\n    pointer-events: none;\n  }\n`;\n\nconst StartContent = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 10px;\n  transform: translateY(-50%);\n`;\n\nconst CustomUpload = styled.div`\n  .btn {\n    font-size: 11px;\n    height: 28px;\n    border-radius: 8px;\n    background-color: #F7F9F9;\n    color: black;\n    border: solid 1px #D0D5DD;\n  }\n\n  .btn-outline-primary {\n    --bs-btn-active-color: black;\n    --bs-btn-active-bg: #F0F0F0;\n    --bs-btn-active-border-color: #D0D5DD;\n  }\n`;\n\nconst NetworkImgList = {\n  BKC: \"https://www.bitkubnft.com/_next/image?url=https%3A%2F%2Fstatic.bitkubnext.com%2Fnft%2Fnft_stores%2Fbitkub-chain%2Fstore_profile.png&w=256&q=10\",\n  J2O: \"https://img2.pic.in.th/pic/j2o.png\",\n};\n\nconst BillBOSAddress = {\n  BKC: \"0xD8D21C24F8513E35bdC26832aD366ac2F4EE0d7F\",\n  J2O: \"0x21559144afcD0C2E3Ba5D0A6e41c46276663983B\",\n};\n\nconst USDTAddress = {\n  BKC: \"0x90430340366FA3557BD7A5c919f2C41975eDb6B2\",\n  J2O: \"0x88127f9a362b802D0D27c85583506bf4c648aa68\",\n};\n\nconst BillBOSCoreABI = fetch(\n  \"https://gist.githubusercontent.com/Chayanonc/1c7b2cf1559ed20b342f76846966cb65/raw/fa27150e36d18d43d6298c8dd27f8c8e852dde23/billbos-core.json\"\n);\nif (!BillBOSCoreABI.ok) {\n  return \"Loading\";\n}\nconst IBillBOSCore = new ethers.utils.Interface(BillBOSCoreABI.body);\n\nconst ERC20ABI = fetch(\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n);\nif (!ERC20ABI.ok) {\n  return \"Loading\";\n}\nconst IERC20 = new ethers.utils.Interface(ERC20ABI.body);\n\nState.init({\n  isOpenModal: false,\n  adsType: \"REDIRECT\",\n  selectedChain: \"BKC\",\n  chainImg: NetworkImgList.BKC,\n  img: null,\n  sender: undefined,\n  adsName: undefined,\n  newTabLink: undefined,\n  componentId: undefined,\n  stakeAmount: \"0\",\n});\n\nconst [approving, setApproving] = useState(false);\nconst [creating, setCreating] = useState(false);\nconst [isAllowance, setIsAllowance] = useState(false);\n\nif (state.sender == undefined && Ethers.provider()) {\n  Ethers.provider()\n    .send(\"eth_requestAccounts\", [])\n    .then((accounts) => {\n      if (accounts.length) {\n        State.update({ sender: accounts[0] });\n      }\n    });\n}\n\nconst onOpen = () => {\n  State.update({\n    isOpenModal: true,\n  });\n};\n\nconst onClose = () => {\n  State.update({\n    isOpenModal: false,\n  });\n};\n\nconst handleChangeType = (event) => {\n  if (event.target.value) {\n    State.update({\n      adsType: event.target.value,\n    });\n  }\n};\n\nconst handleChangeChain = (event) => {\n  if (event.target.value) {\n    State.update({\n      selectedChain: event.target.value,\n      chainImg: NetworkImgList[event.target.value],\n    });\n  }\n};\n\nconst checkAllowance = () => {\n  const encodedData = IERC20.encodeFunctionData(\"allowance\", [\n    state.sender,\n    BillBOSAddress[state.selectedChain],\n  ]);\n  return new Promise((resolve, reject) => {\n    Ethers.provider()\n      .call({\n        to: USDTAddress[state.selectedChain],\n        data: encodedData,\n      })\n      .then((rawRes) => {\n        const resData = IERC20.decodeFunctionResult(\"allowance\", rawRes);\n        const resAllowance = Number(resData);\n        resolve(resAllowance);\n      })\n      .catch((error) => {\n        resolve(0);\n      });\n  });\n};\n\nconst isApproval = async () => {\n  checkAllowance().then((allowance) => {\n    const amount = Number(\n      ethers.utils.parseUnits(String(state.stakeAmount), \"ether\")\n    );\n    if (allowance < amount) {\n      setIsAllowance(false);\n    } else {\n      setIsAllowance(true);\n    }\n  });\n};\nisApproval();\n\nconst erc20Approve = async (to, amount) => {\n  setApproving(true);\n  const erc20Provider = new ethers.Contract(\n    USDTAddress[state.selectedChain],\n    IERC20,\n    Ethers.provider().getSigner()\n  );\n  erc20Provider\n    .approve(to, amount)\n    .then((res) => {\n      setTimeout(closeLoadingApprove, 10000);\n    })\n    .catch((error) => {\n      setApproving(false);\n    });\n};\n\nconst closeLoadingApprove = () => {\n  setApproving(false);\n};\n\nconst closeLoadingCreate = () => {\n  setCreating(false);\n};\n\nconst handleApprove = async () => {\n  try {\n    const amount = ethers.utils.parseUnits(String(state.stakeAmount), \"ether\");\n\n    const coreAddress = BillBOSAddress[state.selectedChain];\n    erc20Approve(coreAddress, amount);\n  } catch {\n    resolve(false);\n  }\n};\n\nconst handleCreateAds = async () => {};\n\nconst Modal = ({ isOpen, onClose }) => {};\n\nconst content = (\n  <div>\n    <button\n      class=\"brand-green px-4 py-2 rounded-xl text-white font-semibold\"\n      onClick={onOpen}\n    >\n      {\"+ Create Ads\"}\n    </button>\n    <Modal isOpen={state.isOpenModal} onClose={onClose} />\n  </div>\n);\n\nreturn (\n  <Widget\n    src=\"chayanonc-ph.near/widget/billbos-css\"\n    props={{\n      children: content,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/659f08890482b5a2270c0096ab85a8dd1d1e8f0fb656b4fa44e72049a81e0f43/widget/billbos-create-ads", "fact_widget_deployments_id": "9dba7b7620424462f660ddaa573036e0", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}