{"tx_hash": "4aJUA791eTAzv1JkicScuk9BfyUEenWJoDNkrHRvidfX", "action_id_social": "5Jcop8G8vMkAo3zpBTQHxQD6rZqtSHjqn8cSujVSix1D-0-widget", "block_id": 111217125, "block_timestamp": "2024-01-24T17:19:44.285Z", "signer_id": "659f08890482b5a2270c0096ab85a8dd1d1e8f0fb656b4fa44e72049a81e0f43", "widget_name": "billbos-stake-modal", "source_code": "const isOpenStake = props.isOpenStake;\nconst onCloseStake = props.onCloseStake;\n\nconst coreContractAddress =\n  props.coreContractAddress || \"0xD8D21C24F8513E35bdC26832aD366ac2F4EE0d7F\";\nconst adsId = props.adsId || \"1\";\n\nconst USDTAddress = {\n  BKC: \"0x90430340366FA3557BD7A5c919f2C41975eDb6B2\",\n  J2O: \"0x88127f9a362b802D0D27c85583506bf4c648aa68\",\n};\nconst ERC20ABI = fetch(\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n);\nif (!ERC20ABI.ok) {\n  return \"Loading\";\n}\nconst IERC20 = new ethers.utils.Interface(ERC20ABI.body);\nconst [isAllowance, setIsAllowance] = useState(false);\n\nconst ModalOverlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(12, 12, 12, 0.6);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 100;\n`;\n\nconst StyledInput = styled.div`\n  position: relative;\n  width: 100%;\n  input {\n    appearance: none;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    outline: none;\n    cursor: pointer;\n    ::-webkit-inner-spin-button,\n    ::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n\nconst EndContent = styled.div`\n  position: absolute;\n  top: 22px;\n  right: 10px;\n  transform: translateY(-50%);\n`;\n\nconst BillBOSCoreABI = fetch(\n  \"https://gist.githubusercontent.com/Chayanonc/1c7b2cf1559ed20b342f76846966cb65/raw/fa27150e36d18d43d6298c8dd27f8c8e852dde23/billbos-core.json\"\n);\n\nif (!BillBOSCoreABI.ok) {\n  return \"Loading\";\n}\nconst IBillBOSCore = new ethers.utils.Interface(BillBOSCoreABI.body);\n\nState.init({\n  isOpenLoadingModal: false,\n  isFinish: false,\n  boostAmount: \"0\",\n  setIsAllowance: false,\n  selectedChain: \"BKC\",\n  sender: undefined,\n  allowanceTotal: \"0\",\n});\n\nconst onMax = () => {};\n\nconst closeLoadingBoost = () => {\n  State.update({\n    isFinish: true,\n  });\n};\n\nconst handleBoost = () => {\n  console.log(\"boostAmount\", state.boostAmount);\n  console.log(\"isAllowance\", isAllowance);\n  const amount = ethers.utils.parseUnits(String(state.boostAmount), \"ether\");\n  if (isAllowance) {\n    State.update({\n      isOpenLoadingModal: true,\n      isFinish: false,\n    });\n    const billbosProvider = new ethers.Contract(\n      coreContractAddress,\n      IBillBOSCore,\n      Ethers.provider().getSigner()\n    );\n\n    billbosProvider\n      .boost(adsId, amount)\n      .then((res) => {\n        setTimeout(closeLoadingBoost, 10000);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  } else {\n    console.log(\n      \"USDTAddress[state.selectedChain]\",\n      USDTAddress[state.selectedChain]\n    );\n    const erc20Provider = new ethers.Contract(\n      USDTAddress[state.selectedChain],\n      IERC20,\n      Ethers.provider().getSigner()\n    );\n    erc20Provider\n      .approve(coreContractAddress, amount)\n      .then((res) => {\n        setTimeout(() => setIsAllowance(true), 10000);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n};\n\nconst provider = Ethers.provider();\n\nif (state.sender == undefined && provider) {\n  provider\n    .getSigner()\n    ?.getAddress()\n    ?.then((address) => {\n      State.update({ sender: address });\n    });\n}\n\nconst handleChangeAmount = (event) => {\n  checkAllowance().then((allowance) => {\n    const allow = ethers.utils.formatEther(\"\" + allowance);\n    if (Number(allow) < Number(state.boostAmount)) {\n      setIsAllowance(false);\n    } else {\n      setIsAllowance(true);\n    }\n    State.update({ allowanceTotal: allowance });\n  });\n  State.update({ boostAmount: event.target.value });\n};\n\nconst checkAllowance = () => {\n  const encodedData = IERC20.encodeFunctionData(\"allowance\", [\n    state.sender,\n    coreContractAddress,\n  ]);\n  return new Promise((resolve, reject) => {\n    Ethers.provider()\n      .call({\n        to: USDTAddress[state.selectedChain],\n        data: encodedData,\n      })\n      .then((rawRes) => {\n        const resData = IERC20.decodeFunctionResult(\"allowance\", rawRes);\n        console.log({ resData });\n        const resAllowance = Number(resData);\n        resolve(resAllowance);\n      })\n      .catch((error) => {\n        resolve(0);\n      });\n  });\n};\n\nconst Modal = ({ isOpen, onClose }) => {\n  if (!isOpen) return null;\n  return (\n    <ModalOverlay>\n      <div\n        style={{\n          width: \"484px\",\n        }}\n        class=\"bg-white rounded-xl pt-4\"\n      >\n        <div class=\"flex flex-row justify-between items-start border-b pb-4 px-4 \">\n          <p class=\"text-lg\">{\"Stake Ads\"}</p>\n          <svg\n            class=\"cursor-pointer\"\n            onClick={() => onClose()}\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M6 18L18 6M6 6L18 18\"\n              stroke=\"#808080\"\n              stroke-width=\"1.5\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            />\n          </svg>\n        </div>\n        <div class=\"flex flex-col items-start pb-4 px-4 mt-4\">\n          <p class=\"text-sm secondary-text mb-2\">Amount</p>\n          <StyledInput class=\"flex flex-row\">\n            <input\n              onChange={(e) => handleChangeAmount(e)}\n              type=\"number\"\n              class=\"w-full px-3 py-2 rounded-lg border\"\n            />\n            <EndContent>\n              <div class=\"h-full flex flex-row items-center\">\n                <img\n                  src=\"https://icons.iconarchive.com/icons/cjdowner/cryptocurrency-flat/512/Tether-USDT-icon.png\"\n                  alt=\"Icon\"\n                  class=\"w-5 h-5 rounded-full\"\n                />\n                <p class=\"ml-1 text-sm\">USDT</p>\n              </div>\n            </EndContent>\n          </StyledInput>\n          <div class=\"bg-green-50 flex flex-row justify-between mt-4 px-2 py-3 rounded-lg\">\n            <svg\n              width=\"18\"\n              height=\"18\"\n              viewBox=\"0 0 16 16\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                fill-rule=\"evenodd\"\n                clip-rule=\"evenodd\"\n                d=\"M0.6875 8C0.6875 3.96125 3.96125 0.6875 8 0.6875C12.0387 0.6875 15.3125 3.96125 15.3125 8C15.3125 12.0387 12.0387 15.3125 8 15.3125C3.96125 15.3125 0.6875 12.0387 0.6875 8ZM7.217 6.9185C8.0765 6.48875 9.04475 7.26575 8.8115 8.198L8.27975 10.325L8.31125 10.31C8.44341 10.2519 8.59285 10.2468 8.72864 10.2959C8.86444 10.3449 8.97618 10.4443 9.04074 10.5734C9.1053 10.7025 9.11775 10.8515 9.07549 10.9896C9.03324 11.1276 8.93953 11.2441 8.81375 11.315L8.78375 11.3315C7.9235 11.7612 6.95525 10.9843 7.1885 10.052L7.721 7.925L7.6895 7.94C7.62315 7.97687 7.55003 7.99994 7.47453 8.0078C7.39904 8.01567 7.32273 8.00817 7.25021 7.98576C7.17769 7.96336 7.11045 7.9265 7.05255 7.87743C6.99464 7.82835 6.94727 7.76806 6.91329 7.70019C6.8793 7.63232 6.8594 7.55827 6.85479 7.4825C6.85018 7.40674 6.86095 7.33083 6.88645 7.25933C6.91195 7.18784 6.95166 7.12225 7.00319 7.06651C7.05471 7.01077 7.11698 6.96604 7.18625 6.935L7.217 6.9185ZM8 5.75C8.14918 5.75 8.29226 5.69074 8.39775 5.58525C8.50324 5.47976 8.5625 5.33668 8.5625 5.1875C8.5625 5.03832 8.50324 4.89524 8.39775 4.78975C8.29226 4.68426 8.14918 4.625 8 4.625C7.85082 4.625 7.70774 4.68426 7.60225 4.78975C7.49676 4.89524 7.4375 5.03832 7.4375 5.1875C7.4375 5.33668 7.49676 5.47976 7.60225 5.58525C7.70774 5.69074 7.85082 5.75 8 5.75Z\"\n                fill=\"#00C8A0\"\n              />\n            </svg>\n            <p class=\"text-sm w-11/12\">{`Staking does not diminish your USDT balance. Both your \n            USDT and earned rewards can be reclaimed based on the \n            applicable conversion ratio at stake.`}</p>\n          </div>\n        </div>\n        <div class=\"w-full px-8 pt-2 pb-4\">\n          <button\n            onClick={handleBoost}\n            class=\"px-6 py-2 text-white font-semibold brand-green rounded-lg w-full\"\n          >\n            {isAllowance ? \"Stake now\" : approving ? \"Loading...\" : \"Approve\"}\n          </button>\n        </div>\n      </div>\n    </ModalOverlay>\n  );\n};\n\nreturn (\n  <>\n    <Widget\n      src=\"porx-dev.near/widget/billbos-css\"\n      props={{\n        children: <Modal isOpen={isOpenStake} onClose={onCloseStake} />,\n      }}\n    />\n    <Widget\n      src=\"jimmy-ez.near/widget/billbos-loading-transaction\"\n      props={{\n        isOpenModal: state.isOpenLoadingModal,\n        onCloseModal: () => {\n          State.update({ isOpenLoadingModal: false });\n        },\n        isLoading: !state.isFinish,\n        topic: `You are now staking ${state.boostAmount} USDT`,\n        detail: `Staking ${state.boostAmount} USDT. You will receive ${state.boostAmount} USDT`,\n      }}\n    />\n  </>\n);\n", "metadata": {"fork_of": "659f08890482b5a2270c0096ab85a8dd1d1e8f0fb656b4fa44e72049a81e0f43/widget/billbos-stake-modal@111214148"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/659f08890482b5a2270c0096ab85a8dd1d1e8f0fb656b4fa44e72049a81e0f43/widget/billbos-stake-modal", "fact_widget_deployments_id": "7718f349dba82cb672dc1005067a8970", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 11}