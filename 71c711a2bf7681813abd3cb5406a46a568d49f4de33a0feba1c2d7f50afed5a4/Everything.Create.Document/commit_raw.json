{"tx_hash": "5Yjyhz6MTi5zfgsQ7gAmAVBGynty3AwDfxHD7Hdgq1tH", "action_id_social": "8pDWzT2aWbdoUPpVNjY6eDT3GpXwsjZraWJfE9qKVdnT-0-widget", "block_id": 89670852, "block_timestamp": "2023-04-15T22:57:45.941Z", "signer_id": "71c711a2bf7681813abd3cb5406a46a568d49f4de33a0feba1c2d7f50afed5a4", "widget_name": "Everything.Create.Document", "source_code": "// Repository: https://github.com/near-everything/idea-creator\nconst externalAppUrl = \"document-creator-theta.vercel.app\";\n\n/**\n * Initial Path (optional but recommended)\n */\nconst path = props.path;\n/**\n * Initial view height (optional but recommended)\n */\nconst initialViewHeight = 500;\nconst initialPayload = {};\n\n/**\n * Request Handlers - Backend.\n *\n * - request: payload sent by External App\n *\n * - response: method to send the answer back to the External App\n *\n * - utils: Utils features like\n *      - promisify: (caller, resolve, reject)\n *      There's no Promisse for some features yet, So this is util for when you need to get cached data using DiscoveryAPI, e.g:\n *      utils.promisify(() => Social.getr(`${context.accountId}/profile`), (res) => console.log(res), (err) => console.log(err))\n *\n * @param {{type: string, payload: {}}} request request with payload sent by External App\n * @param {(request) => {send: () => void}} response send the answer back to the External App\n * @param {{promisify:(caller: () => void, resolve: (data) => void, reject: (error) => void)}} utils Utils features like\n */\nconst requestHandler = (request, response, Utils) => {\n  switch (request.type) {\n    case \"create-idea\":\n      handleCreateIdea(request, response);\n      break;\n  }\n};\n\nconst handleCreateIdea = (request, response) => {\n  const { payload } = request;\n  if (payload) {\n    asyncFetch(\"https://monkfish-app-ginhc.ondigitalocean.app/graphql\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-Everything\": \"simple\",\n      },\n      body: JSON.stringify({\n        query:\n          \"mutation createIdea($title: String, $description: String) { ideas { create(name: $title) { entities { id } } appendContentToDescription(value: $description) { entities { id   } } } }\",\n        variables: payload,\n      }),\n    }).then((res) => {\n      if (res.body.errors) {\n        response(request).send(res.body.errors);\n      } else {\n        Social.set(\n          {\n            thing: {\n              main: JSON.stringify({\n                thingId: res.body.data.ideas.create.entities[0].id,\n              }),\n            },\n            index: {\n              everything: JSON.stringify({\n                key: \"main\",\n                value: {\n                  type: \"71c711a2bf7681813abd3cb5406a46a568d49f4de33a0feba1c2d7f50afed5a4/type/Document\",\n                },\n              }),\n            },\n          },\n          {\n            force: true,\n            onCommit: () => {\n              response(request).send({ success: true });\n            },\n            onCancel: () => {\n              response(request).send({ error: \"the action was canceled\" });\n            },\n          }\n        );\n        response(request).send(res.body.data);\n      }\n    });\n    return;\n  }\n  // Error\n  response(request).send({\n    error: \"idea must be provided\",\n  });\n};\n\nreturn (\n  <Widget\n    src={\"wendersonpires.near/widget/NearSocialBridgeCore\"}\n    props={{\n      externalAppUrl,\n      path,\n      initialViewHeight,\n      initialPayload,\n      requestHandler,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/71c711a2bf7681813abd3cb5406a46a568d49f4de33a0feba1c2d7f50afed5a4/widget/Everything.Create.Document", "fact_widget_deployments_id": "49944e7f2db9a4f8ce503035116b0cb8", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 16}