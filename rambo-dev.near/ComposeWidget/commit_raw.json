{"tx_hash": "8cgMAaRF21Ag2edLmUTusQ14F4KC1uERLf1Q3JKmoPjv", "action_id_social": "8kAnh71snU99xuonctTmLsA5jvJhAgBq5FuST2jVEguA-0-widget", "block_id": 110482338, "block_timestamp": "2024-01-15T17:06:13.255Z", "signer_id": "rambo-dev.near", "widget_name": "ComposeWidget", "source_code": "const { Avatar, Button, InputField, TextEditor } = VM.require(\r\n  \"buildhub.near/widget/components\"\r\n);\r\n\r\nconst { CreateTemplateModal } = VM.require(\"rambo-dev.near/widget/Newtest\");\r\n\r\nButton = Button || (() => <></>);\r\n\r\nconst draftKey = props.feed.name || \"draft\";\r\nconst draft = Storage.privateGet(draftKey);\r\n\r\nif (draft === null) {\r\n  return \"\";\r\n}\r\n\r\nconst [view, setView] = useState(\"editor\");\r\nconst [postContent, setPostContent] = useState(\"\");\r\nconst [hideAdvanced, setHideAdvanced] = useState(true);\r\nconst [labels, setLabels] = useState([]);\r\n\r\nsetPostContent(draft || props.template);\r\n\r\nfunction generateUID() {\r\n  const maxHex = 0xffffffff;\r\n  const randomNumber = Math.floor(Math.random() * maxHex);\r\n  return randomNumber.toString(16).padStart(8, \"0\");\r\n}\r\n\r\nfunction tagsFromLabels(labels) {\r\n  return labels.reduce(\r\n    (newLabels, label) => ({\r\n      ...newLabels,\r\n      [label]: \"\",\r\n    }),\r\n    {}\r\n  );\r\n}\r\n\r\nconst extractMentions = (text) => {\r\n  const mentionRegex =\r\n    /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\r\n  mentionRegex.lastIndex = 0;\r\n  const accountIds = new Set();\r\n  for (const match of text.matchAll(mentionRegex)) {\r\n    if (\r\n      !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\r\n      !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length)) &&\r\n      match[1].length >= 2 &&\r\n      match[1].length <= 64\r\n    ) {\r\n      accountIds.add(match[1].toLowerCase());\r\n    }\r\n  }\r\n  return [...accountIds];\r\n};\r\n\r\nconst extractHashtags = (text) => {\r\n  const hashtagRegex = /#(\\w+)/gi;\r\n  hashtagRegex.lastIndex = 0;\r\n  const hashtags = new Set();\r\n  for (const match of text.matchAll(hashtagRegex)) {\r\n    if (\r\n      !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\r\n      !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length))\r\n    ) {\r\n      hashtags.add(match[1].toLowerCase());\r\n    }\r\n  }\r\n  return [...hashtags];\r\n};\r\n\r\nconst extractMentionNotifications = (text, item) =>\r\n  extractMentions(text || \"\")\r\n    .filter((accountId) => accountId !== context.accountId)\r\n    .map((accountId) => ({\r\n      key: accountId,\r\n      value: {\r\n        type: \"mention\",\r\n        item,\r\n      },\r\n    }));\r\n\r\nfunction checkAndAppendHashtag(input, target) {\r\n  if (input.toLowerCase().includes(`#${target.toLowerCase()}`)) {\r\n    return input;\r\n  } else {\r\n    return input + ` #${target}`;\r\n  }\r\n}\r\n\r\nconst postToCustomFeed = ({ feed, text, labels }) => {\r\n  const postId = generateUID();\r\n  if (!labels) labels = [];\r\n\r\n  labels = labels.map((label) => label.toLowerCase());\r\n  labels.push(feed.name.toLowerCase());\r\n\r\n  const requiredHashtags = [\"build\"];\r\n  if (feed.hashtag) requiredHashtags.push(feed.hashtag.toLowerCase());\r\n  requiredHashtags.push(feed.name.toLowerCase());\r\n\r\n  text = text + `\\n\\n`;\r\n\r\n  requiredHashtags.forEach((hashtag) => {\r\n    text = checkAndAppendHashtag(text, hashtag);\r\n  });\r\n\r\n  const data = {\r\n    // [feed.name]: {\r\n    //   [postId]: {\r\n    //     \"\": JSON.stringify({\r\n    //       type: \"md\",\r\n    //       text,\r\n    //       labels,\r\n    //     }),\r\n    //     metadata: {\r\n    //       type: feed.name,\r\n    //       tags: tagsFromLabels(labels),\r\n    //     },\r\n    //   },\r\n    // },\r\n    post: {\r\n      main: JSON.stringify({\r\n        type: \"md\",\r\n        text,\r\n        // tags: tagsFromLabels(labels),\r\n        // postType: feed.name,\r\n      }),\r\n    },\r\n    index: {\r\n      post: JSON.stringify({ key: \"main\", value: { type: \"md\" } }),\r\n      // every: JSON.stringify({ key: feed.name, value: { type: \"md\" } }),\r\n    },\r\n  };\r\n\r\n  const item = {\r\n    type: \"social\",\r\n    path: `${context.accountId}/post/main`,\r\n  };\r\n\r\n  const notifications = extractMentionNotifications(text, item);\r\n\r\n  if (notifications.length) {\r\n    data.index.notify = JSON.stringify(\r\n      notifications.length > 1 ? notifications : notifications[0]\r\n    );\r\n  }\r\n\r\n  const hashtags = extractHashtags(text);\r\n\r\n  if (hashtags.length) {\r\n    data.index.hashtag = JSON.stringify(\r\n      hashtags.map((hashtag) => ({\r\n        key: hashtag,\r\n        value: item,\r\n      }))\r\n    );\r\n  }\r\n\r\n  return Social.set(data, {\r\n    force: true,\r\n    onCommit: () => {\r\n      // console.log(`Commited ${feed}: #${postId}`);\r\n    },\r\n    onCancel: () => {\r\n      // console.log(`Cancelled ${feed}: #${postId}`);\r\n    },\r\n  });\r\n};\r\n\r\nconst PostCreator = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n\r\n  padding: 1rem;\r\n  background: #23242b;\r\n  border-radius: 12px;\r\n\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst TextareaWrapper = styled.div`\r\n  display: grid;\r\n  vertical-align: top;\r\n  align-items: center;\r\n  position: relative;\r\n  align-items: stretch;\r\n\r\n  textarea {\r\n    display: flex;\r\n    align-items: center;\r\n    transition: all 0.3s ease;\r\n  }\r\n\r\n  textarea::placeholder {\r\n    padding-top: 4px;\r\n    font-size: 20px;\r\n  }\r\n\r\n  textarea:focus::placeholder {\r\n    font-size: inherit;\r\n    padding-top: 0px;\r\n  }\r\n\r\n  &::after,\r\n  textarea,\r\n  iframe {\r\n    width: 100%;\r\n    min-width: 1em;\r\n    height: unset;\r\n    min-height: 3em;\r\n    font: inherit;\r\n    margin: 0;\r\n    resize: none;\r\n    background: none;\r\n    appearance: none;\r\n    border: 0px solid #eee;\r\n    grid-area: 1 / 1;\r\n    overflow: hidden;\r\n    outline: none;\r\n  }\r\n\r\n  iframe {\r\n    padding: 0;\r\n  }\r\n\r\n  textarea:focus,\r\n  textarea:not(:empty) {\r\n    border-bottom: 1px solid #eee;\r\n    min-height: 5em;\r\n  }\r\n\r\n  &::after {\r\n    content: attr(data-value) \" \";\r\n    visibility: hidden;\r\n    white-space: pre-wrap;\r\n  }\r\n  &.markdown-editor::after {\r\n    padding-top: 66px;\r\n    font-family: monospace;\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nconst MarkdownEditor = `\r\n  html {\r\n    background: #23242b;\r\n  }\r\n\r\n  * {\r\n    border: none !important;\r\n  }\r\n\r\n  .rc-md-editor {\r\n    background: #4f5055;\r\n    border-top: 1px solid #4f5055 !important;\r\n    border-radius: 8px;\r\n  }\r\n\r\n  .editor-container {\r\n    background: #4f5055;\r\n  }\r\n  \r\n  .drop-wrap {\r\n    top: -110px !important;\r\n    border-radius: 0.5rem !important;\r\n  }\r\n\r\n  .header-list {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  textarea {\r\n    background: #23242b !important;\r\n    color: #fff !important;\r\n\r\n    font-family: sans-serif !important;\r\n    font-size: 1rem;\r\n\r\n    border: 1px solid #4f5055 !important;\r\n    border-top: 0 !important;\r\n    border-radius: 0 0 8px 8px;\r\n  }\r\n\r\n  .rc-md-navigation {\r\n    background: #23242b !important;\r\n    border: 1px solid #4f5055 !important;\r\n    border-top: 0 !important;\r\n    border-bottom: 0 !important;\r\n    border-radius: 8px 8px 0 0;\r\n  \r\n    i {\r\n      color: #cdd0d5;\r\n    }\r\n  }\r\n\r\n  .editor-container {\r\n    border-radius: 0 0 8px 8px;\r\n  }\r\n\r\n  .rc-md-editor .editor-container .sec-md .input {\r\n    overflow-y: auto;\r\n    padding: 8px !important;\r\n    line-height: normal;\r\n    border-radius: 0 0 8px 8px;\r\n  }\r\n`;\r\n\r\nconst MarkdownPreview = styled.div`\r\n  h1,\r\n  h2,\r\n  h3,\r\n  h4,\r\n  h5,\r\n  h6 {\r\n    font-size: 16px !important;\r\n  }\r\n  @media (max-width: 767px) {\r\n    font-size: 15px !important;\r\n    h1,\r\n    h2,\r\n    h3,\r\n    h4,\r\n    h5,\r\n    h6 {\r\n      font-size: 15px !important;\r\n    }\r\n  }\r\n\r\n  h1,\r\n  h2,\r\n  h3,\r\n  h4,\r\n  h5,\r\n  h6,\r\n  strong,\r\n  b {\r\n    font-weight: 500 !important;\r\n  }\r\n  ol,\r\n  ul,\r\n  dl {\r\n    margin-bottom: 0.5rem;\r\n    white-space: inherit;\r\n  }\r\n  p {\r\n    margin-bottom: 0.5rem;\r\n  }\r\n  hr {\r\n    display: none;\r\n  }\r\n  img {\r\n    border-radius: var(--bs-border-radius-lg);\r\n    max-height: 40em;\r\n  }\r\n  th {\r\n    min-width: 5em;\r\n  }\r\n\r\n  .table > :not(caption) > * > * {\r\n    padding: 0.3rem;\r\n  }\r\n\r\n  * {\r\n    color: #b6b6b8 !important;\r\n  }\r\n\r\n  a {\r\n    color: #0d6efd !important;\r\n\r\n    &:hover {\r\n      color: #0a58ca !important;\r\n    }\r\n  }\r\n`;\r\n\r\nconst LabelSelect = styled.div`\r\n  label {\r\n    color: #fff;\r\n  }\r\n\r\n  .rbt-input-multi {\r\n    background: #23242b !important;\r\n    color: #fff !important;\r\n  }\r\n\r\n  .rbt-token {\r\n    background: #202020 !important;\r\n    color: #fff !important;\r\n  }\r\n\r\n  .rbt-menu {\r\n    background: #23242b !important;\r\n    color: #fff !important;\r\n\r\n    .dropdown-item {\r\n      color: #fff !important;\r\n      transition: all 300ms;\r\n\r\n      &:hover {\r\n        background: #202020;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst avatarComponent = useMemo(() => {\r\n  return (\r\n    <div className=\"d-flex align-items-start gap-2\">\r\n      <Avatar accountId={context.accountId} />\r\n      <div>\r\n        <p className=\"mb-0 text-white\">{context.accountId}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}, [context.accountId]);\r\n\r\nconst isValidTemplateToCreate =\r\n  templateTitle.length > 0 && templateContent.length > 0;\r\n\r\nreturn (\r\n  <PostCreator>\r\n    {avatarComponent}\r\n    <FiltersSection>\r\n      <CreateTemplateModal />\r\n    </FiltersSection>\r\n\r\n    <div style={{ border: \"none\" }}>\r\n      {view === \"editor\" ? (\r\n        <TextareaWrapper\r\n          className=\"markdown-editor\"\r\n          data-value={postContent || \"\"}\r\n          key={props.feed.name}\r\n        >\r\n          <Widget\r\n            src=\"mob.near/widget/MarkdownEditorIframe\"\r\n            props={{\r\n              initialText: postContent,\r\n              embedCss: MarkdownEditor,\r\n              onChange: (v) => {\r\n                setPostContent(v);\r\n                Storage.privateSet(draftKey, v || \"\");\r\n              },\r\n            }}\r\n          />\r\n        </TextareaWrapper>\r\n      ) : (\r\n        <MarkdownPreview>\r\n          <Widget\r\n            src=\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\"\r\n            props={{ text: postContent }}\r\n          />\r\n        </MarkdownPreview>\r\n      )}\r\n    </div>\r\n\r\n    <div className=\"d-flex gap-3 align-self-end\">\r\n      <Button\r\n        variant=\"outline\"\r\n        onClick={() => setView(view === \"editor\" ? \"preview\" : \"editor\")}\r\n        style={{ fontSize: 14 }}\r\n      >\r\n        {view === \"editor\" ? (\r\n          <>\r\n            Preview <i className=\"bi bi-eye\"></i>\r\n          </>\r\n        ) : (\r\n          <>\r\n            Edit <i className=\"bi bi-pencil-square\"></i>\r\n          </>\r\n        )}\r\n      </Button>\r\n      <Button\r\n        variant=\"primary\"\r\n        style={{ fontSize: 14 }}\r\n        onClick={() =>\r\n          postToCustomFeed({ feed: props.feed, text: postContent, labels })\r\n        }\r\n      >\r\n        Post {props.feed.name}\r\n      </Button>\r\n    </div>\r\n  </PostCreator>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/rambo-dev.near/widget/ComposeWidget", "fact_widget_deployments_id": "403f0d2d341d9b0a2fa0396d88a21065", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}