{"tx_hash": "4cbM5iHKTjxrkNkeqbb6qDefy96skygDCv6UFukf49VL", "action_id_social": "fRrDXEeViGg1HJ6caRoXUyh1ah3P1DM8eeXofBruq1b-0-widget", "block_id": 98576273, "block_timestamp": "2023-08-11T16:05:29.552Z", "signer_id": "scottie.near", "widget_name": "Slides", "source_code": "const contract = \"slides.scottie.near\";\n\nState.init({\n  settings: false,\n  files: [],\n  tempCIDs: [],\n  deck: false,\n  slides: null,\n  currentIndex: 0,\n  account: context.accountId,\n  decks: null,\n  deckName: props.deck || context.accountId,\n  deckOptions: [{ value: null, label: null }],\n  selectedUser: props.user || context.accountId,\n  viewing: true,\n});\n\nconst textStyle = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  marginTop: \"10px\",\n};\n\nconst inputStyle = { width: \"225px\", marginRight: \"10px\" };\n\nconst PrimaryButton = styled.button`\n  border-radius: 20px;\n  width: 165px;\n`;\n\nconst ToggleButton = styled.button`\n  border-radius: 20px;\n  width: 110px;\n`;\n\nconst TutorialButton = styled.button`\n  border-radius: 24px;\n  border: 0px;\n  width: 145px;\n  height: 42px;\n  font-size: 18px;\n  background: #4dc78a;\n`;\n\nconst Label = styled.label`\n  margin-top: auto;\n  margin-bottom: auto;\n  margin-right: auto;\n`;\n\nconst Columns = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  row-gap: 12px;\n`;\n\nconst Labels = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  row-gap: 12px;\n  width: 110px;\n`;\n\nconst ButtonRow = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  grid-column-gap: 32px;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst SettingsView = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst ViewContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 12px;\n  width: 550px;\n`;\n\nconst update = (file) => {\n  const files = state.files;\n  files.push(file);\n  State.update({\n    files: files,\n  });\n  sortAndCIDs();\n};\n\nconst viewing = (value) => {\n  State.update({\n    viewing: value,\n  });\n};\n\nconst sortAndCIDs = () => {\n  const files = state.files;\n  files.sort((a, b) => a.index - b.index);\n  const cids = files.map((file) => file.cid);\n  State.update({\n    tempCIDs: cids,\n  });\n};\n\nconst createNewDeck = () => {\n  Near.call(contract, \"create_new_deck\", {\n    key: state.account,\n    deck_name: state.deckName,\n  });\n};\n\nconst pushSlides = () => {\n  const files = state.files;\n  if (files) {\n    if (files.length > 1) {\n      files.sort((a, b) => a.index - b.index);\n      let cids = files.map((file) => file.cid);\n      Near.call(contract, \"insert_slides\", {\n        key: state.account,\n        deck_name: state.deckName,\n        slide_cids: cids,\n      });\n    } else {\n      Near.call(contract, \"insert_slide\", {\n        key: state.account,\n        deck_name: state.deckName,\n        slide_cid: files[0].cid,\n      });\n    }\n  }\n};\n\nconst deleteDeck = () => {\n  Near.call(contract, \"delete_deck\", {\n    key: state.account,\n    deck_name: state.deckName,\n  });\n  State.update({\n    deckName: \"\",\n  });\n};\n\nconst getAllSlides = () => {\n  const slides = Near.view(contract, \"get_slides\", {\n    key: state.selectedUser,\n    deck_name: state.deckName,\n  });\n\n  const slidesParsed = JSON.parse(slides);\n\n  if (slidesParsed !== \"None\") {\n    State.update({\n      slides: slidesParsed,\n      viewing: true,\n      currentIndex: 0,\n    });\n  }\n};\n\nconst getAllDecks = () => {\n  const decks = Near.view(contract, \"get_deck_names\", {\n    key: state.selectedUser,\n  });\n\n  const decksParsed = JSON.parse(decks);\n\n  const options = decksParsed.map((deckName, index) => ({\n    value: `deck${index + 1}`,\n    label: deckName,\n  }));\n\n  options.sort((a, b) => {\n    if (a.label < b.label) {\n      return -1;\n    }\n    if (a.label > b.label) {\n      return 1;\n    }\n    return 0;\n  });\n\n  State.update({\n    decks: decksParsed,\n    deckOptions: options,\n    deckName: options[0].label,\n  });\n};\n\nconst nextSlide = () => {\n  if (state.currentIndex === Object.keys(state.slides).length - 1) {\n    return;\n  }\n  State.update({\n    currentIndex: state.currentIndex + 1,\n  });\n};\n\nconst prevSlide = () => {\n  if (state.currentIndex === 0) {\n    return;\n  }\n  State.update({\n    currentIndex: state.currentIndex - 1,\n  });\n};\n\nconst onClickSettings = () => {\n  State.update({ settings: !state.settings });\n};\n\nconst onClickDelete = (index) => {\n  const files = state.files;\n  files.splice(index, 1);\n  State.update({ files: files });\n  sortAndCIDs();\n};\n\nconst onClickSelectSlide = (index) => {\n  State.update({\n    currentIndex: parseInt(index),\n  });\n};\n\nconst handleDeckChange = (event) => {\n  State.update({\n    deckName: event.target.value,\n  });\n};\n\nconst handleFileInputChange = (event) => {\n  const file = event.target.value.trim();\n  State.update({\n    deckName: file,\n  });\n};\n\nconst handleUserInputChange = (event) => {\n  const user = event.target.value.trim();\n  State.update({\n    selectedUser: user,\n  });\n};\n\nconst getAccount = () => {\n  State.update({\n    selectedUser: state.account,\n  });\n};\n\nconst viewTutorial = () => {\n  State.update({\n    viewing: true,\n    selectedUser: \"scottie.near\",\n    deckName: \"Slides\",\n  });\n  getAllSlides();\n};\n\nreturn (\n  <div>\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n      }}\n    >\n      <button\n        onClick={onClickSettings}\n        class={state.settings ? \"btn btn-outline-dark\" : \"btn btn-dark\"}\n      >\n        \u2699\ufe0f\n      </button>\n    </div>\n    <div style={{ height: \"10px\" }} />\n    <div hidden={state.settings ? \"\" : \"hidden\"}>\n      <ButtonRow>\n        <PrimaryButton onClick={createNewDeck} className=\"btn btn-outline-dark\">\n          Create New Deck\n        </PrimaryButton>\n        <Widget\n          src={`scottie.near/widget/IPFSMultiUpload`}\n          props={{ update, viewing }}\n        />\n        <PrimaryButton onClick={pushSlides} className=\"btn btn-outline-dark\">\n          Save Slide(s)\n        </PrimaryButton>\n        <PrimaryButton onClick={deleteDeck} className=\"btn btn-outline-dark\">\n          Delete Deck\n        </PrimaryButton>\n      </ButtonRow>\n      <div style={{ height: \"12px\" }} />\n      <SettingsView>\n        <ViewContainer>\n          <Labels>\n            <Label>Saved Decks:</Label>\n            <Label>File Name:</Label>\n            <Label>User Name:</Label>\n          </Labels>\n          <Columns>\n            <select\n              class=\"form-select\"\n              onChange={handleDeckChange}\n              value={state.deckName}\n              style={inputStyle}\n            >\n              {state.deckOptions.map((option) => (\n                <option key={option.value} value={option.label}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n            <input\n              type=\"text\"\n              style={inputStyle}\n              onChange={handleFileInputChange}\n              value={state.deckName}\n            />\n            <input\n              type=\"text\"\n              style={inputStyle}\n              onChange={handleUserInputChange}\n              value={state.selectedUser}\n            />\n          </Columns>\n          <Columns>\n            <PrimaryButton\n              onClick={() => getAllDecks()}\n              className=\"btn btn-outline-primary\"\n            >\n              View Saved Decks\n            </PrimaryButton>\n\n            <PrimaryButton\n              onClick={() => getAllSlides()}\n              className=\"btn btn-outline-primary\"\n            >\n              View Slides\n            </PrimaryButton>\n            <PrimaryButton\n              onClick={getAccount}\n              className=\"btn btn-outline-primary\"\n            >\n              <span class=\"glyphicon glyphicon-refresh\"></span>\u21ba My Name\n            </PrimaryButton>\n          </Columns>\n        </ViewContainer>\n      </SettingsView>\n    </div>\n    <div>\n      <div style={state.settings ? { height: \"12px\" } : {}} />\n      <ButtonRow>\n        <ToggleButton onClick={prevSlide} className=\"btn btn-dark\">\n          {\"<\"} Previous\n        </ToggleButton>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            width: \"10px\",\n          }}\n        >\n          {\" \"}\n          {state.slides && state.viewing ? state.currentIndex + 1 : \"\"}\n        </div>\n        <ToggleButton onClick={nextSlide} className=\"btn btn-dark\">\n          Next {\">\"}\n        </ToggleButton>\n      </ButtonRow>\n      <div style={{ height: \"12px\" }} />\n      {state.slides && state.viewing ? (\n        <div>\n          <div id=\"slide\">\n            <img\n              class=\"w-100 h-100\"\n              style={{\n                objectFit: \"contain\",\n                border: \"2px solid #555\",\n              }}\n              src={`https://ipfs.io/ipfs/${\n                Object.values(state.slides)[state.currentIndex]\n              }`}\n              alt=\"\"\n            />\n          </div>\n        </div>\n      ) : state.tempCIDs.length > 0 ? (\n        <div>\n          <div style={textStyle}>Click Save Slides to Store on Near</div>\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: \"repeat(6, 1fr)\",\n              gridTemplateRows: \"repeat(6, 1fr)\",\n              gap: \"10px\",\n              maxHeight: \"400px\",\n              overflowY: \"auto\",\n            }}\n          >\n            {Object.entries(state.tempCIDs).map(([key, value]) => {\n              return (\n                <Widget\n                  src={`scottie.near/widget/DeletableCard`}\n                  props={{\n                    key,\n                    value,\n                    onClickDelete,\n                  }}\n                />\n              );\n            })}\n          </div>\n        </div>\n      ) : state.settings ? (\n        <div>\n          <div style={textStyle}>\n            Click View Saved Decks to Load Saved Decks\n          </div>\n        </div>\n      ) : (\n        <div>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              textAlign: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <p style={{ marginBottom: \"24px\" }}>\n              <span\n                style={{\n                  fontSize: \"24px\",\n                  fontWeight: \"bold\",\n                  fontFamily: \"menlo\",\n                }}\n              >\n                Welcome to Slides\n              </span>\n              <br />\n              <span style={{ fontSize: \"18px\", fontFamily: \"menlo\" }}>\n                Create Unstoppable Presentations{\" \"}\n              </span>\n            </p>\n            <div style={{ marginBottom: \"12px\" }}>\n              <TutorialButton\n                onClick={viewTutorial}\n                className=\"btn btn-outline-dark\"\n              >\n                View Tutorial\n              </TutorialButton>\n            </div>\n            <p\n              style={{\n                position: \"relative\",\n                lineHeight: \"2\",\n              }}\n            >\n              or\n              <br />\n              Click \u2699 to View Decks, Slides, or Create a New Deck\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n    <div\n      style={\n        state.slides\n          ? {\n              display: \"flex\",\n              flexDirection: \"row\",\n              height: \"75px\",\n              marginTop: \"10px\",\n              marginBottom: \"10px\",\n              justifyContent: \"center\",\n              overflowX: \"auto\",\n            }\n          : { marginTop: \"10px\", marginBottom: \"10px\" }\n      }\n    >\n      <div style={{ overflowX: \"auto\", whiteSpace: \"nowrap\" }}>\n        {state.slides && state.viewing\n          ? Object.entries(state.slides).map(([key, value]) => {\n              return (\n                <div\n                  key={key}\n                  value={value}\n                  style={{\n                    display: \"inline-block\",\n                    width: \"100px\",\n                    marginRight: \"1px\",\n                  }}\n                  onClick={() => onClickSelectSlide(key)}\n                >\n                  <img\n                    class=\"rounded\"\n                    style={\n                      parseInt(key) === state.currentIndex\n                        ? {\n                            width: \"100%\",\n                            height: \"auto\",\n                            border: \"2px solid #555\",\n                          }\n                        : {\n                            width: \"100%\",\n                            height: \"auto\",\n                            filter: \"grayscale(90%)\",\n                          }\n                    }\n                    src={`https://ipfs.io/ipfs/${value}`}\n                    alt=\"upload preview\"\n                  />\n                </div>\n              );\n            })\n          : \"\"}\n      </div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/scottie.near/widget/Slides", "fact_widget_deployments_id": "82540acf132a63261514735d37609450", "inserted_timestamp": "2023-08-11T17:42:58.823Z", "modified_timestamp": "2023-08-11T17:42:58.823Z", "__row_index": 4}