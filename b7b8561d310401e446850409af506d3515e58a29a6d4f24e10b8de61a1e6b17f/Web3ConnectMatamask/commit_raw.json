{"tx_hash": "D5XPbEdTiJRu4nMfQ3siRriPM3Ky1h4veo9wLkEzEvnn", "action_id_social": "74sYiq1HqWtE9rd2E6Q6ymxB91kJaDWCHKP93vSSw25S-0-widget", "block_id": 106191855, "block_timestamp": "2023-11-21T08:27:17.394Z", "signer_id": "b7b8561d310401e446850409af506d3515e58a29a6d4f24e10b8de61a1e6b17f", "widget_name": "Web3ConnectMatamask", "source_code": "State.init({\n  chainId: 1, // For Ethereum Mainnet, for instance\n  baseUrl: \"https://api.yourapp.com\",\n  safeAddress: \"0x1234567890abcdef1234567890abcdef12345678\",\n  sender: \"0xabcdef1234567890abcdef1234567890abcdef12\",\n  transactions: [\n    {\n      safeTxHash:\n        \"0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abc1\",\n      data: null,\n      to: \"0xabcdef1234567890abcdef1234567890abcdef34\",\n      value: \"1000000000000000000\", // 1 ETH in Wei\n    },\n    {\n      safeTxHash:\n        \"0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abc2\",\n      data: {\n        method: \"transfer\",\n        dataDecoded: {\n          parameters: [\n            { value: \"0x1234567890abcdef1234567890abcdef12345678\" },\n            { value: \"500000000000000000\" }, // 0.5 ETH in Wei\n          ],\n        },\n      },\n      to: \"0x1234567890abcdef1234567890abcdef12345678\",\n      value: \"0\",\n    },\n  ],\n\n  // Mock a selected transaction, could be null initially\n  selectedTransaction: null,\n});\n// connect account\nif (state.sender === null) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  const checksummedAddr = ethers.utils.getAddress(accounts[0]);\n  if (accounts.length) {\n    State.update({ sender: checksummedAddr });\n\n    Ethers.provider()\n      .getNetwork()\n      .then((chainIdData) => {\n        if (chainIdData?.chainId == 1) {\n          State.update({\n            chainId: \"mainnet\",\n          });\n        } else if (chainIdData?.chainId == 5) {\n          State.update({\n            chainId: \"goerli\",\n          });\n        } else if (chainIdData?.chainId == 100) {\n          State.update({\n            chainId: \"gnosis-chain\",\n          });\n        }\n      });\n  }\n}\n\n//EIP712\n\nconst domain = {\n  name: \"MyApp\",\n  version: \"1.0\",\n  chainId: 1,\n  verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n};\n\nconst types = {\n  Transaction: [\n    { name: \"to\", type: \"address\" },\n    { name: \"value\", type: \"uint256\" },\n    { name: \"data\", type: \"bytes\" },\n  ],\n};\n\n// choose relevant transaction to sign and confirm\nconst selectTransaction = (tx) => {\n  State.update({ selectedTransaction: tx });\n};\n\nconst createEIP712Message = (transaction) => {\n  let formattedData;\n  if (transaction.data && transaction.data.dataDecoded) {\n    formattedData = ethers.utils.defaultAbiCoder.encode(\n      [\"string\", \"address\", \"uint256\"],\n      [\n        transaction.data.method,\n        transaction.data.dataDecoded.parameters[0].value,\n        transaction.data.dataDecoded.parameters[1].value,\n      ]\n    );\n  } else {\n    formattedData = \"0x\";\n  }\n\n  return {\n    to: transaction.to,\n    value: transaction.value,\n    data: formattedData,\n  };\n};\n\nconst signTransaction = () => {\n  if (state.selectedTransaction) {\n    // Assuming createEIP712Message is defined as shown previously\n    const message = createEIP712Message(state.selectedTransaction);\n    console.log(message);\n    const signer = Ethers.provider().getSigner();\n\n    // Use _signTypedData for EIP-712 compliant signing\n    signer._signTypedData(domain, types, message).then((signature) => {\n      // Process and send the signature as you did previously\n      // You might need to adjust how you handle the signature based on your backend's requirements\n\n      const selectedTxHash = state.selectedTransaction.safeTxHash;\n      const url = `${state.baseUrl}/v1/multisig-transactions/${selectedTxHash}/confirmations/`;\n      const params = JSON.stringify({ signature: signature });\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: params,\n      };\n\n      // Post confirmed signature to the backend\n      asyncFetch(url, options).then((res) => {\n        console.log(res);\n      });\n    });\n  } else {\n    console.log(\"Please select a transaction to sign.\");\n  }\n};\n\nconst Selection = styled.button`\n    background: ${(tx) =>\n      state.selectedTransaction == tx ? \"palevioletred\" : \"white\"};\n    color: ${(props) => (props.primary ? \"white\" : \"palevioletred\")};\n  \n    font-size: 1em;\n    margin: 1em;\n    padding: 0.25em 1em;\n    border: 2px solid palevioletred;\n    border-radius: 10px;\n  `;\n\nreturn (\n  <div>\n    <input\n      value={state.safeAddress}\n      onChange={(e) => State.update({ safeAddress: e.target.value })}\n      placeholder=\"Enter Safe address to view txs\"\n      label=\"SafeAddressInput\"\n    />\n    <p>Queued transactions:</p>\n    <ul>\n      {state.transactions.map((tx, index) => (\n        <li key={index} onClick={() => selectTransaction(tx)}>\n          <Selection>\n            <span>\n              From Safe Address: {state.safeAddress}\n              <br />\n              Type:\n              {tx.data\n                ? `ERC20 ${tx.dataDecoded.method} \n                  To: ${tx.dataDecoded.parameters[0].value} \n                  Value: ${tx.dataDecoded.parameters[1].value}`\n                : `Native Currency Transfer \n                  To: ${tx.to} \n                  Value: ${tx.value} \n                  `}\n              <br />\n              {\n                state.selectedTransaction.safeTxHash == tx.safeTxHash\n                  ? \"!!!!!!THIS ONE IS SELECTED RIGHT NOW!!!!!!\"\n                  : \"\" /** Again I don't know css */\n              }\n            </span>\n          </Selection>\n        </li>\n      ))}\n    </ul>\n    <button onClick={() => signTransaction()} label=\"SignButton\">\n      <span>Sign Selected Transaction</span>\n    </button>\n    <Web3Connect className=\"web3-connect\" connectLabel=\"Connect Wallet\" />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/b7b8561d310401e446850409af506d3515e58a29a6d4f24e10b8de61a1e6b17f/widget/Web3ConnectMatamask", "fact_widget_deployments_id": "c2a9dfa0a4ffc61463063d4d60bd4224", "inserted_timestamp": "2023-11-21T10:34:32.492Z", "modified_timestamp": "2023-11-21T10:34:32.492Z", "__row_index": 0}