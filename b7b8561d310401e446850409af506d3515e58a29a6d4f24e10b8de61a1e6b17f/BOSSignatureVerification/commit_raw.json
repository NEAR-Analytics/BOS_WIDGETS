{"tx_hash": "ByLwAZSLAGQ1g5kYMn8pRnRTyouv22MZsjpnyeM37M1K", "action_id_social": "BaR8WZ3kTzeBC3jtWMoQTjB2c2SpHkBWhBLdCkrsWb6U-0-widget", "block_id": 106227692, "block_timestamp": "2023-11-21T20:04:37.324Z", "signer_id": "b7b8561d310401e446850409af506d3515e58a29a6d4f24e10b8de61a1e6b17f", "widget_name": "BOSSignatureVerification", "source_code": "State.init({\n  chainId: props.chainId, // For Ethereum Mainnet, for instance\n  baseUrl: \"https://api.yourapp.com\",\n  safeAddress: \"0x1234567890abcdef1234567890abcdef12345678\",\n  sender: \"0xabcdef1234567890abcdef1234567890abcdef12\",\n  transactions: props.transactions,\n  selectedTransaction: null,\n});\n// connect account\nif (state.sender === null) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  const checksummedAddr = ethers.utils.getAddress(accounts[0]);\n  if (accounts.length) {\n    State.update({ sender: checksummedAddr });\n\n    Ethers.provider()\n      .getNetwork()\n      .then((chainIdData) => {\n        if (chainIdData?.chainId == 1) {\n          State.update({\n            chainId: \"mainnet\",\n          });\n        } else if (chainIdData?.chainId == 5) {\n          State.update({\n            chainId: \"goerli\",\n          });\n        } else if (chainIdData?.chainId == 100) {\n          State.update({\n            chainId: \"gnosis-chain\",\n          });\n        }\n      });\n  }\n}\n\n//EIP712\nconst domain = {\n  name: \"MyApp\",\n  version: \"1.0\",\n  chainId: 1,\n  verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n};\n\nconst types = {\n  Offer: [\n    { name: \"isSell\", type: \"bool\" },\n    { name: \"nftAddress\", type: \"address\" },\n    { name: \"tokenId\", type: \"uint256\" },\n    { name: \"tokenAddress\", type: \"address\" },\n    { name: \"price\", type: \"uint256\" },\n    { name: \"expiry\", type: \"uint256\" },\n    { name: \"nonce\", type: \"uint256\" },\n  ],\n};\n\n// choose relevant transaction to sign and confirm\nconst selectTransaction = (tx) => {\n  State.update({ selectedTransaction: tx });\n};\n\nconst createEIP712Message = (transaction) => {\n  return {\n    isSell: transaction.isSell,\n    nftAddress: transaction.nftAddress,\n    tokenId: transaction.tokenId,\n    tokenAddress: transaction.tokenAddress,\n    price: transaction.price,\n    expiry: transaction.expiry,\n    nonce: transaction.nonce,\n  };\n};\n\nconst signTransaction = () => {\n  if (state.selectedTransaction) {\n    // Assuming createEIP712Message is defined as shown previously\n    const message = createEIP712Message(state.selectedTransaction);\n    console.log(message);\n    const signer = Ethers.provider().getSigner();\n\n    // Use _signTypedData for EIP-712 compliant signing\n    signer._signTypedData(domain, types, message).then((signature) => {\n      // Process and send the signature as you did previously\n      // You might need to adjust how you handle the signature based on your backend's requirements\n\n      const selectedTxHash = state.selectedTransaction.safeTxHash;\n      const url = `${state.baseUrl}/v1/multisig-transactions/${selectedTxHash}/confirmations/`;\n      const params = JSON.stringify({ signature: signature });\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: params,\n      };\n\n      // Post confirmed signature to the backend\n      asyncFetch(url, options).then((res) => {\n        console.log(res);\n      });\n    });\n  } else {\n    console.log(\"Please select a transaction to sign.\");\n  }\n};\n\nfunction createListItems(transaction) {\n  return Object.entries(transaction).map(([key, value]) => {\n    // Check if value is a BigNumber object\n    if (value && typeof value.toString === \"function\") {\n      value = value.toString();\n    }\n\n    if (value !== undefined && value !== null) {\n      return <li key={key}>{`${key}: ${value}`}</li>;\n    }\n    return null;\n  });\n}\n\nconst Selection = styled.button`\n    background: ${(tx) =>\n      state.selectedTransaction == tx.safeTxHash ? \"palevioletred\" : \"white\"};\n    color: ${(props) => (props.primary ? \"white\" : \"palevioletred\")};\n    font-size: 1em;\n    margin: 1em;\n    padding: 0.25em 1em;\n    border: 2px solid palevioletred;\n    border-radius: 10px;\n    text-align: left;\n  `;\n\nreturn (\n  <div>\n    <input\n      value={state.safeAddress}\n      onChange={(e) => State.update({ safeAddress: e.target.value })}\n      placeholder=\"Enter Safe address to view txs\"\n      label=\"SafeAddressInput\"\n    />\n    <p>Queued transactions:</p>\n    <ul>\n      {state.transactions.map((tx, index) => (\n        <li key={index} onClick={() => selectTransaction(tx)}>\n          <Selection>\n            <span>\n              <ul>{createListItems(tx)}</ul>\n              {state.selectedTransaction.safeTxHash == tx.safeTxHash\n                ? `!!!!!!THIS ONE IS SELECTED RIGHT NOW!!!!!!`\n                : \"\"}\n            </span>\n          </Selection>\n        </li>\n      ))}\n    </ul>\n    <button onClick={() => signTransaction()} label=\"SignButton\">\n      <span>Sign Selected Transaction</span>\n    </button>\n    <Web3Connect className=\"web3-connect\" connectLabel=\"Connect Wallet\" />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/b7b8561d310401e446850409af506d3515e58a29a6d4f24e10b8de61a1e6b17f/widget/BOSSignatureVerification", "fact_widget_deployments_id": "eb4834cd8c4855ab8cf03f693069bdf0", "inserted_timestamp": "2023-11-21T21:50:17.611Z", "modified_timestamp": "2023-11-21T21:50:17.611Z", "__row_index": 0}