{"tx_hash": "5CwoLVUeL7fGwERiqYbR3nJs2zHgm3F45S5A9VH1pgpM", "action_id_social": "5QCG2R2MdrgwARMJdReVVEJqsKMCyRrKCyjBtRsZAXC7-0-widget", "block_id": 106372343, "block_timestamp": "2023-11-23T17:59:27.955Z", "signer_id": "b7b8561d310401e446850409af506d3515e58a29a6d4f24e10b8de61a1e6b17f", "widget_name": "BOSSignatureVerification", "source_code": "State.init({\n  chainId: 96, // For Ethereum Mainnet, for instance\n  baseUrl: \"https://api.yourapp.com\",\n  safeAddress: \"0x1234567890abcdef1234567890abcdef12345678\",\n  sender: \"0xabcdef1234567890abcdef1234567890abcdef12\",\n  signature: \"\",\n  hashMessage: \"\",\n  scenarios: [\n    {\n      scenario: \"User offer sell NFT\",\n      isSell: true,\n      nftAddress: \"0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n      tokenId: 1,\n      tokenAddress: \"0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\",\n      price: 40000000,\n      expiry: 86400,\n      nonce: 42,\n    },\n    {\n      scenario: \"Users offer buy NFT\",\n      isSell: false,\n      nftAddress: \"0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n      tokenId: 2,\n      tokenAddress: \"0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\",\n      price: 40000000,\n      expiry: 86400,\n      nonce: 43,\n    },\n  ],\n  transactions: [\n    {\n      safeTxHash:\n        \"0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abc1\",\n      data: null,\n      to: \"0xabcdef1234567890abcdef1234567890abcdef34\",\n      value: \"1000000000000000000\", // 1 ETH in Wei\n    },\n    {\n      safeTxHash:\n        \"0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abc2\",\n      data: {\n        method: \"transfer\",\n        dataDecoded: {\n          parameters: [\n            { value: \"0x1234567890abcdef1234567890abcdef12345678\" },\n            { value: \"500000000000000000\" }, // 0.5 ETH in Wei\n          ],\n        },\n      },\n      to: \"\",\n      value: \"0\",\n    },\n  ],\n  selectedTransaction: null,\n});\n\n// connect account\nif (state.sender === null) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  const checksummedAddr = ethers.utils.getAddress(accounts[0]);\n  if (accounts.length) {\n    State.update({ sender: checksummedAddr });\n\n    Ethers.provider()\n      .getNetwork()\n      .then((chainIdData) => {\n        if (chainIdData?.chainId == 1) {\n          State.update({\n            chainId: \"mainnet\",\n          });\n        } else if (chainIdData?.chainId == 5) {\n          State.update({\n            chainId: \"goerli\",\n          });\n        } else if (chainIdData?.chainId == 100) {\n          State.update({\n            chainId: \"gnosis-chain\",\n          });\n        }\n      });\n  }\n}\n\n//EIP712\nconst domain = {\n  name: \"MyApp\",\n  version: \"1.0\",\n  chainId: 96,\n  verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n};\n\nconst types = {\n  Offer: [\n    { name: \"isSell\", type: \"bool\" },\n    { name: \"nftAddress\", type: \"address\" },\n    { name: \"tokenId\", type: \"uint256\" },\n    { name: \"tokenAddress\", type: \"address\" },\n    { name: \"price\", type: \"uint256\" },\n    { name: \"expiry\", type: \"uint256\" },\n    { name: \"nonce\", type: \"uint256\" },\n  ],\n};\n\n// choose relevant transaction to sign and confirm\nconst selectTransaction = (tx) => {\n  State.update({ selectedTransaction: tx });\n};\n\nconst createEIP712Message = (transaction) => {\n  return {\n    isSell: transaction.isSell,\n    nftAddress: transaction.nftAddress,\n    tokenId: transaction.tokenId,\n    tokenAddress: transaction.tokenAddress,\n    price: transaction.price,\n    expiry: transaction.expiry,\n    nonce: transaction.nonce,\n  };\n};\n\nconst signTransaction = () => {\n  if (state.selectedTransaction) {\n    const selectedTxHash = state.selectedTransaction.safeTxHash;\n    const selectedTxHash2 = ethers.utils.arrayify(selectedTxHash);\n    console.log(ethers.utils.arrayify(selectedTxHash));\n    const signer = Ethers.provider().getSigner();\n    signer\n      .signMessage(ethers.utils.hexDataSlice(selectedTxHash2, 0, 64))\n      .then((sig) => {\n        const setV = ethers.utils.hexDataSlice(sig, 0, 64);\n        console.log(setV);\n\n        const url =\n          state.baseUrl +\n          `/v1/multisig-transactions/${selectedTxHash}/confirmations/`;\n        const params = JSON.stringify({ signature: setV });\n        const options = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: params,\n        };\n\n        //   post confirmed sig with set V to gnosis API backend\n        asyncFetch(url, options).then((res) => {\n          console.log(res);\n        });\n      });\n  } else {\n    console.log(\"Please select a transaction to sign.\");\n  }\n};\n\nconst signTransaction712 = () => {\n  if (state.selectedTransaction) {\n    const message = createEIP712Message(state.selectedTransaction);\n    console.log(\"message\", message);\n    const signer = Ethers.provider().getSigner();\n    signer._signTypedData(domain, types, message).then((signature) => {\n      const messageHash = ethers.utils.id(message);\n      console.log(\"messageHash\", messageHash);\n      const selectedTxHash = state.selectedTransaction.scenario;\n      const url = `${state.baseUrl}/v1/multisig-scenarios/${selectedTxHash}/confirmations/`;\n      const params = JSON.stringify({ signature: signature });\n      console.log(\"signature\", signature);\n      State.update({ signature: signature });\n      console.log(params);\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: params,\n      };\n      // Post confirmed signature to the backend\n      asyncFetch(url, options).then((res) => {\n        console.log(res);\n      });\n    });\n  } else {\n    console.log(\"Please select a transaction to sign.\");\n  }\n};\n\nfunction createListItems(transaction) {\n  return Object.entries(transaction).map(([key, value]) => {\n    // Check if value is a BigNumber object\n    if (value && typeof value.toString === \"function\") {\n      value = value.toString();\n    }\n\n    if (value !== undefined && value !== null) {\n      return <li key={key}>{`${key}: ${value}`}</li>;\n    }\n    return null;\n  });\n}\n\nconst verifySignature = async (originalMessage, signature) => {\n  const signerAddress = ethers.utils.verifyMessage(originalMessage, signature);\n  console.log(\"originalMessage\", originalMessage);\n  console.log(\"signature\", signature);\n  console.log(\"signerAddress\", signerAddress);\n  return signerAddress;\n};\n\nconst Selection = styled.button`\n    background: ${(props) => {\n      console.log(\n        \"Current state in styled component:\",\n        props.tx,\n        state.selectedTransaction\n      );\n      return state.selectedTransaction &&\n        state.selectedTransaction.scenario === props.tx.scenario\n        ? \"palevioletred\"\n        : \"white\";\n    }};\n\n    color: ${(props) => {\n      console.log(\n        \"Current state in styled component:\",\n        props.tx,\n        state.selectedTransaction\n      );\n      return state.selectedTransaction &&\n        state.selectedTransaction.scenario === props.tx.scenario\n        ? \"white\"\n        : \"palevioletred\";\n    }};\n    font-size: 1em;\n    margin: 1em;\n    padding: 0.25em 1em;\n    border: 2px solid palevioletred;\n    border-radius: 10px;\n    text-align: left;\n`;\n\n// const Selection = styled.button`\n//     background: ${(tx) =>\n//       state.selectedTransaction &&\n//       state.selectedTransaction.scenario === tx.scenario\n//         ? \"palevioletred\"\n//         : \"white\"};\n//     color: ${(props) => (props.primary ? \"white\" : \"palevioletred\")};\n//     font-size: 1em;\n//     margin: 1em;\n//     padding: 0.25em 1em;\n//     border: 2px solid palevioletred;\n//     border-radius: 10px;\n//     text-align: left;\n// `;\n\nreturn (\n  <div>\n    <ul>\n      {state.transactions.map((tx, index) => (\n        <li key={index} onClick={() => selectTransaction(tx)}>\n          <Selection>\n            <span>\n              From Safe Address: {state.safeAddress}\n              <br />\n              Type:\n              {tx.data\n                ? `ERC20 ${tx.dataDecoded.method} \n                  To: ${tx.dataDecoded.parameters[0].value} \n                  Value: ${tx.dataDecoded.parameters[1].value}`\n                : `Native Currency Transfer \n                  To: ${tx.to} \n                  Value: ${tx.value} \n                  `}\n              <br />\n              {\n                state.selectedTransaction.safeTxHash == tx.safeTxHash\n                  ? \"!!!!!!THIS ONE IS SELECTED RIGHT NOW!!!!!!\"\n                  : \"\" /** Again I don't know css */\n              }\n            </span>\n          </Selection>\n        </li>\n      ))}\n    </ul>\n    <ul>\n      {state.scenarios.map((tx, index) => (\n        <li key={index} onClick={() => selectTransaction(tx)}>\n          <Selection>\n            <span>\n              <ul>{createListItems(tx)}</ul>\n              {state.selectedTransaction.scenario == tx.scenario\n                ? `!!!!!!THIS ONE IS SELECTED RIGHT NOW!!!!!!\n                  )}`\n                : \"\"}\n            </span>\n          </Selection>\n        </li>\n      ))}\n    </ul>\n    <div>signature : {state.signature}</div>\n    <button onClick={() => signTransaction()} label=\"SignButton\">\n      <span>Sign Selected Transaction</span>\n    </button>\n    <button onClick={() => signTransaction712()} label=\"SignButton\">\n      <span>Sign Selected Transaction With EIP712</span>\n    </button>\n    <Web3Connect className=\"web3-connect\" connectLabel=\"Connect Wallet\" />\n    <button\n      onClick={() =>\n        verifySignature(JSON.stringify(state.hashMessage), state.signature)\n      }\n      label=\"SignButton\"\n    >\n      <span> Verify Signature </span>\n    </button>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/b7b8561d310401e446850409af506d3515e58a29a6d4f24e10b8de61a1e6b17f/widget/BOSSignatureVerification", "fact_widget_deployments_id": "e37fd191d3fcd5f00519deea861eee4c", "inserted_timestamp": "2023-11-23T19:49:27.119Z", "modified_timestamp": "2023-11-23T19:49:27.119Z", "__row_index": 3}