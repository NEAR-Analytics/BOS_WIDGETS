{"tx_hash": "4ztZ56z3cbQz6fWa247UFV2RdkEaYrLA6vPtanXyNe2V", "action_id_social": "GwkTRpuzA9mQJr4Vhv8EWVPJXBCMmK5u8wEeVrzoFvms-0-widget", "block_id": 106714354, "block_timestamp": "2023-11-28T06:48:46.795Z", "signer_id": "b7b8561d310401e446850409af506d3515e58a29a6d4f24e10b8de61a1e6b17f", "widget_name": "NFTMarketplace", "source_code": "State.init({\n  chainId: 25925,\n  chainName: \"kub-chain testnet\",\n  baseUrl: \"https://api.yourapp.com\",\n  safeAddress: \"0x21bf18c13d1fa9a65212a4632dfe4a74eb5e3212\",\n  sender: \"0x21bf18c13d1fa9a65212a4632dfe4a74eb5e3212\",\n  signature: null,\n  hashMessage: null,\n  selectedTransaction: null,\n});\n\nconst [formData, setFormData] = useState({\n  isSell: true,\n  nftAddress: \"0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n  tokenId: 1,\n  tokenAddress: \"0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbb\",\n  price: 40000000,\n  expiry: 86400,\n  nonce: 42,\n});\n\nconst [signatures, setSignatures] = useState([]);\nconst selectTransaction = (tx) => {\n  State.update({ selectedTransaction: tx });\n};\n\nconst handleChange = (e) => {\n  const { id, value } = e.target;\n  setFormData((prevFormData) => ({\n    ...prevFormData,\n    [id]: value,\n  }));\n};\n\nuseEffect(() => {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  const checksummedAddr = ethers.utils.getAddress(accounts[0]);\n  if (accounts.length) {\n    State.update({ sender: checksummedAddr });\n    Ethers.provider()\n      .getNetwork()\n      .then((chainIdData) => {\n        if (chainIdData?.chainId == 1) {\n          State.update({\n            chainName: \"mainnet\",\n          });\n          State.update({\n            chainId: 1,\n          });\n        } else if (chainIdData?.chainId == 5) {\n          State.update({\n            chainName: \"goerli\",\n          });\n          State.update({\n            chainId: 5,\n          });\n        } else if (chainIdData?.chainId == 100) {\n          State.update({\n            chainName: \"gnosis-chain\",\n          });\n          State.update({\n            chainId: 100,\n          });\n        } else if (chainIdData?.chainId == 96) {\n          State.update({\n            chainName: \"kub-chain\",\n          });\n          State.update({\n            chainId: 96,\n          });\n        } else if (chainIdData?.chainId == 25925) {\n          State.update({\n            chainName: \"kub-chain testnet\",\n          });\n          State.update({\n            chainId: 25925,\n          });\n        }\n      });\n  }\n}, [state.sender]);\n\n//EIP712\nconst domain = {\n  name: \"MyApp\",\n  version: \"1.0\",\n  chainId: state.chainId,\n  verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n};\n\nconst types = {\n  Offer: [\n    { name: \"isSell\", type: \"bool\" },\n    { name: \"nftAddress\", type: \"address\" },\n    { name: \"tokenId\", type: \"uint256\" },\n    { name: \"tokenAddress\", type: \"address\" },\n    { name: \"price\", type: \"uint256\" },\n    { name: \"expiry\", type: \"uint256\" },\n    { name: \"nonce\", type: \"uint256\" },\n  ],\n};\n\nconst createEIP712Message = (transaction) => {\n  return {\n    isSell: transaction.isSell,\n    nftAddress: transaction.nftAddress,\n    tokenId: transaction.tokenId,\n    tokenAddress: transaction.tokenAddress,\n    price: transaction.price,\n    expiry: transaction.expiry,\n    nonce: transaction.nonce,\n  };\n};\n\nconst updateSignature = (signature, dataToSign) => {\n  State.update({ signature: signature });\n  const isSignatureExist = signatures.some(\n    (item) => item.signature === signature\n  );\n  const isNonceExist = signatures.some(\n    (item) => item.dataToSign.nonce === dataToSign.nonce\n  );\n\n  if (!isSignatureExist && !isNonceExist) {\n    setSignatures((prevSignatures) => [\n      ...prevSignatures,\n      { dataToSign, signature },\n    ]);\n  } else {\n    console.log(\"Signature or Nonce already exists\");\n  }\n\n  setFormData((prevFormData) => ({\n    ...prevFormData,\n    nonce: prevFormData.nonce + 1,\n  }));\n};\n\nconst createNonceFromSigner = async (signer) => {\n  const signerAddress = await signer.getAddress();\n  const nonceFromSigner = ethers.utils.keccak256(signerAddress);\n  return nonceFromSigner;\n};\n\nconst signTransaction = () => {\n  if (!formData.nftAddress || !formData.tokenId) {\n    console.log(\"Some required fields are missing.\");\n    return;\n  }\n\n  const dataToSign = {\n    isSell: formData.isSell,\n    nftAddress: formData.nftAddress,\n    tokenId: formData.tokenId,\n    tokenAddress: formData.tokenAddress,\n    price: formData.price,\n    expiry: formData.expiry,\n    nonce: formData.nonce,\n  };\n\n  const dataString = JSON.stringify(dataToSign);\n  const dataBytes = ethers.utils.toUtf8Bytes(dataString);\n  const hashedData = ethers.utils.keccak256(dataBytes);\n  const signer = Ethers.provider().getSigner();\n\n  signer\n    .signMessage(ethers.utils.arrayify(hashedData))\n    .then((signature) => {\n      updateSignature(signature, dataToSign);\n    })\n    .catch((error) => {\n      console.error(\"Error signing data:\", error);\n    });\n};\n\nconst signTransaction712 = () => {\n  console.log(formData);\n\n  if (!formData.nftAddress || !formData.tokenId) {\n    console.log(\"Some required fields are missing.\");\n    return;\n  }\n\n  const dataToSign = {\n    isSell: formData.isSell,\n    nftAddress: formData.nftAddress,\n    tokenId: formData.tokenId,\n    tokenAddress: formData.tokenAddress,\n    price: formData.price,\n    expiry: formData.expiry,\n    nonce: formData.nonce,\n  };\n\n  const message = createEIP712Message(dataToSign);\n  console.log(\"message\", message);\n  const signer = Ethers.provider().getSigner();\n  signer._signTypedData(domain, types, message).then((signature) => {\n    updateSignature(signature, dataToSign);\n    console.log(\"Signature:\", signature);\n  });\n};\n\nconst acceptOffer = (item) => {\n  console.log(item);\n};\n\nconst styles = {\n  div: {\n    backgroundColor: \"#f2f2f2\",\n    padding: \"20px\",\n    borderRadius: \"10px\",\n    width: \"300px\",\n    margin: \"auto\",\n  },\n  inputText: {\n    width: \"100%\",\n    padding: \"10px\",\n    margin: \"8px 10px\",\n    display: \"inline-block\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"4px\",\n    boxSizing: \"border-box\",\n  },\n  select: {\n    width: \"100%\",\n    padding: \"10px\",\n    margin: \"8px 0\",\n    display: \"inline-block\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"4px\",\n    boxSizing: \"border-box\",\n    backgroundColor: \"white\",\n    cursor: \"pointer\",\n  },\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n    width: \"100%\",\n    margin: \"1%\",\n  },\n  column25: {\n    flex: \"0 0 25%\",\n    padding: \"5px\",\n    width: \"25%\",\n  },\n  column75: {\n    flex: \"0 0 75%\",\n    padding: \"5px\",\n    width: \"75%\",\n  },\n  navbar: {\n    backgroundColor: \"#000\",\n    color: \"white\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    padding: \"10px 20px\",\n  },\n  navList: {\n    listStyleType: \"none\",\n    display: \"flex\",\n    margin: 0,\n    padding: 0,\n  },\n  navItem: {\n    margin: \"0 10px\",\n  },\n  navLink: {\n    color: \"white\",\n    textDecoration: \"none\",\n    fontSize: \"1.2em\",\n  },\n};\n\nconst Selection = styled.button`\n    font-size: 1em;\n    margin: 5px;\n    margin-bottom : 1 px;\n    padding: 5px;\n    border: 2px solid #0d6efd;\n    border-radius: 4px;\n    text-align: left;\n    width : 100%;\n`;\n\nreturn (\n  <>\n    <div style={styles.navbar}>\n      <ul style={styles.navList}>\n        <li style={styles.navItem}>\n          <a href=\"/\" style={styles.navLink}>\n            {state.chainName} {state.chainId}\n          </a>\n        </li>\n      </ul>\n      <ul style={styles.navList}>\n        <li style={styles.navItem}>\n          <Web3Connect className=\"web3-connect\" connectLabel=\"Connect Wallet\" />\n        </li>\n      </ul>\n    </div>\n    <div className=\"container\" style={styles.container}>\n      <div className=\"column25\" style={styles.column}>\n        <div style={styles.div}>\n          <div>\n            <label htmlFor=\"isSell\">Transaction Type:</label>\n            <select\n              name=\"isSell\"\n              id=\"isSell\"\n              value={formData.isSell}\n              onChange={handleChange}\n              style={styles.select}\n            >\n              <option value={true}>Sell</option>\n              <option value={false}>Buy</option>\n            </select>\n          </div>\n          <div>\n            <label htmlFor=\"nftAddress\">NFT Address:</label>\n            <input\n              type=\"text\"\n              name=\"nftAddress\"\n              id=\"nftAddress\"\n              value={formData.nftAddress}\n              onChange={handleChange}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"tokenId\">Token ID:</label>\n            <input\n              type=\"number\"\n              name=\"tokenId\"\n              id=\"tokenId\"\n              value={formData.tokenId}\n              onChange={handleChange}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"tokenAddress\">Token Address:</label>\n            <input\n              type=\"text\"\n              name=\"tokenAddress\"\n              id=\"tokenAddress\"\n              value={formData.tokenAddress}\n              onChange={handleChange}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"price\">Price:</label>\n            <input\n              type=\"number\"\n              name=\"price\"\n              id=\"price\"\n              value={formData.price}\n              onChange={handleChange}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"expiry\">Expiry:</label>\n            <input\n              type=\"number\"\n              name=\"expiry\"\n              id=\"expiry\"\n              value={formData.expiry}\n              onChange={handleChange}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"nonce\">Nonce:</label>\n            <input\n              type=\"number\"\n              name=\"nonce\"\n              id=\"nonce\"\n              value={formData.nonce}\n              onChange={handleChange}\n            />\n          </div>\n          <div style={{ margin: 10, alignItems: \"center\" }}>\n            <div style={{ wordWrap: \"break-word\", width: \"100%\" }}>\n              signature : {state.signature}\n            </div>\n            <button\n              onClick={() => signTransaction()}\n              label=\"SignButton\"\n              style={{ margin: 10, alignItems: \"center\" }}\n            >\n              <span>Sign Selected Transaction</span>\n            </button>\n            <button\n              onClick={() => signTransaction712()}\n              label=\"SignButton\"\n              style={{ margin: 10 }}\n            >\n              <span>Sign Selected Transaction With EIP712</span>\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className=\"column75\" style={styles.column75}>\n        <div style={{ wordWrap: \"break-word\" }}>\n          {signatures.map((item, index) => (\n            <Selection>\n              <div\n                key={index}\n                style={{ wordWrap: \"break-word\" }}\n                onClick={() => selectTransaction(item.signature)}\n              >\n                <p>Signature: {item.signature.slice(0, 30)}...</p>\n                <p>\n                  Transaction Type: {JSON.stringify(item.dataToSign.isSell)}\n                </p>\n                <p>NFT Address: {JSON.stringify(item.dataToSign.nftAddress)}</p>\n                <p>Token ID: {JSON.stringify(item.dataToSign.tokenId)}</p>\n                <p>\n                  Token Address: {JSON.stringify(item.dataToSign.tokenAddress)}\n                </p>\n                <p>Price: {JSON.stringify(item.dataToSign.price)}</p>\n                <p>Expiry: {JSON.stringify(item.dataToSign.expiry)}</p>\n                <p>Nonce: {JSON.stringify(item.dataToSign.nonce)}</p>\n                {state.selectedTransaction == item.signature ? (\n                  <>\n                    <button\n                      onClick={() => acceptOffer(item)}\n                      label=\"SignButton\"\n                      style={{ margin: 10 }}\n                    >\n                      <span> Accept Offer </span>\n                    </button>\n                  </>\n                ) : (\n                  \"\"\n                )}\n              </div>\n            </Selection>\n          ))}\n        </div>\n      </div>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/b7b8561d310401e446850409af506d3515e58a29a6d4f24e10b8de61a1e6b17f/widget/NFTMarketplace", "fact_widget_deployments_id": "08a9944e92a0f937766d31bb63183d0d", "inserted_timestamp": "2023-11-28T08:42:20.427Z", "modified_timestamp": "2023-11-28T08:42:20.427Z", "__row_index": 11}