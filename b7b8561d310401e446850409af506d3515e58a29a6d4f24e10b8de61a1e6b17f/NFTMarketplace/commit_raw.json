{"tx_hash": "8oDtMRR1dLm2gngG7kPntfetkkqy2LLCXSic5MP3mMQa", "action_id_social": "Cyeu5mJCuDBWrRw6WfcgHFHaHhvtveLXQp3n1KxYvM7Y-0-widget", "block_id": 106680310, "block_timestamp": "2023-11-27T20:18:39.410Z", "signer_id": "b7b8561d310401e446850409af506d3515e58a29a6d4f24e10b8de61a1e6b17f", "widget_name": "NFTMarketplace", "source_code": "State.init({\n  chainId: 1, // For Ethereum Mainnet, for instance\n  baseUrl: \"https://api.yourapp.com\",\n  safeAddress: \"0x1234567890abcdef1234567890abcdef12345678\",\n  sender: \"0x21Bf18c13D1Fa9A65212a4632dfE4A74eB5E3212\",\n  signature: \"\",\n  hashMessage: \"\",\n  selectedTransaction: null,\n});\n\nconst [formData, setFormData] = useState({\n  isSell: true,\n  nftAddress: \"0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n  tokenId: 1,\n  tokenAddress: \"0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\",\n  price: 40000000,\n  expiry: 86400,\n  nonce: 42,\n});\n\nconst [signatures, setSignatures] = useState([]);\n\nconst selectTransaction = (tx) => {\n  State.update({ selectedTransaction: tx });\n};\n\n// \u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e01\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e43\u0e19\u0e1f\u0e2d\u0e23\u0e4c\u0e21\nconst handleChange = (e) => {\n  const { id, value } = e.target;\n  setFormData((prevFormData) => ({\n    ...prevFormData,\n    [id]: value,\n  }));\n};\n\n// connect account\nif (state.sender === null) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  const checksummedAddr = ethers.utils.getAddress(accounts[0]);\n  if (accounts.length) {\n    State.update({ sender: checksummedAddr });\n\n    Ethers.provider()\n      .getNetwork()\n      .then((chainIdData) => {\n        if (chainIdData?.chainId == 1) {\n          State.update({\n            chainId: \"mainnet\",\n          });\n        } else if (chainIdData?.chainId == 5) {\n          State.update({\n            chainId: \"goerli\",\n          });\n        } else if (chainIdData?.chainId == 100) {\n          State.update({\n            chainId: \"gnosis-chain\",\n          });\n        } else if (chainIdData?.chainId == 96) {\n          State.update({\n            chainId: \"kub-chain\",\n          });\n        }\n      });\n  }\n}\n\n//EIP712\nconst domain = {\n  name: \"MyApp\",\n  version: \"1.0\",\n  chainId: 1,\n  verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n};\n\nconst types = {\n  Offer: [\n    { name: \"isSell\", type: \"bool\" },\n    { name: \"nftAddress\", type: \"address\" },\n    { name: \"tokenId\", type: \"uint256\" },\n    { name: \"tokenAddress\", type: \"address\" },\n    { name: \"price\", type: \"uint256\" },\n    { name: \"expiry\", type: \"uint256\" },\n    { name: \"nonce\", type: \"uint256\" },\n  ],\n};\n\nconst createEIP712Message = (transaction) => {\n  return {\n    isSell: transaction.isSell,\n    nftAddress: transaction.nftAddress,\n    tokenId: transaction.tokenId,\n    tokenAddress: transaction.tokenAddress,\n    price: transaction.price,\n    expiry: transaction.expiry,\n    nonce: transaction.nonce,\n  };\n};\n\nconst updateSignature = (signature, dataToSign) => {\n  State.update({ signature: signature });\n  const isSignatureExist = signatures.some(\n    (item) => item.signature === signature\n  );\n  if (!isSignatureExist) {\n    setSignatures((prevSignatures) => [\n      ...prevSignatures,\n      { dataToSign, signature },\n    ]);\n  } else {\n    console.log(\"Signature already exists\");\n  }\n};\n\nconst signTransaction = () => {\n  console.log(formData);\n\n  if (!formData.nftAddress || !formData.tokenId) {\n    console.log(\"Some required fields are missing.\");\n    return;\n  }\n\n  const dataToSign = {\n    isSell: formData.isSell,\n    nftAddress: formData.nftAddress,\n    tokenId: formData.tokenId,\n    tokenAddress: formData.tokenAddress,\n    price: formData.price,\n    expiry: formData.expiry,\n    nonce: formData.nonce,\n  };\n  console.log(\"dataToSign\", dataToSign);\n  const dataString = JSON.stringify(dataToSign); // \u0e41\u0e1b\u0e25\u0e07 object \u0e40\u0e1b\u0e47\u0e19 string\n\n  // \u0e41\u0e1b\u0e25\u0e07\u0e2a\u0e15\u0e23\u0e34\u0e07\u0e40\u0e1b\u0e47\u0e19 byte array\n  const dataBytes = ethers.utils.toUtf8Bytes(dataString);\n  // \u0e17\u0e33 hash \u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\n  const hashedData = ethers.utils.keccak256(dataBytes);\n\n  // \u0e23\u0e31\u0e1a signer \u0e08\u0e32\u0e01 provider\n  const signer = Ethers.provider().getSigner();\n\n  signer\n    .signMessage(ethers.utils.arrayify(hashedData))\n    .then((signature) => {\n      updateSignature(signature, dataToSign);\n    })\n    .catch((error) => {\n      console.error(\"Error signing data:\", error);\n    });\n};\n\nconst signTransaction712 = () => {\n  console.log(formData);\n\n  if (!formData.nftAddress || !formData.tokenId) {\n    console.log(\"Some required fields are missing.\");\n    return;\n  }\n\n  const dataToSign = {\n    isSell: formData.isSell,\n    nftAddress: formData.nftAddress,\n    tokenId: formData.tokenId,\n    tokenAddress: formData.tokenAddress,\n    price: formData.price,\n    expiry: formData.expiry,\n    nonce: formData.nonce,\n  };\n\n  const message = createEIP712Message(dataToSign);\n  console.log(\"message\", message);\n  const signer = Ethers.provider().getSigner();\n  signer._signTypedData(domain, types, message).then((signature) => {\n    updateSignature(signature, dataToSign);\n\n    console.log(\"Signature:\", signature);\n  });\n};\n\nconst styles = {\n  div: {\n    backgroundColor: \"#f2f2f2\",\n    padding: \"20px\",\n    borderRadius: \"10px\",\n    width: \"300px\",\n    margin: \"auto\",\n  },\n  inputText: {\n    width: \"100%\",\n    padding: \"10px\",\n    margin: \"8px 10px\",\n    display: \"inline-block\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"4px\",\n    boxSizing: \"border-box\",\n  },\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\", // \u0e2b\u0e23\u0e37\u0e2d 'center' \u0e15\u0e32\u0e21\u0e04\u0e27\u0e32\u0e21\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\n    width: \"100%\", // \u0e2b\u0e23\u0e37\u0e2d\u0e02\u0e19\u0e32\u0e14\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\n  },\n  column25: {\n    flex: \"0 0 25%\", // \u0e04\u0e2d\u0e25\u0e31\u0e21\u0e19\u0e4c\u0e19\u0e35\u0e49\u0e08\u0e30\u0e21\u0e35\u0e02\u0e19\u0e32\u0e14\u0e04\u0e07\u0e17\u0e35\u0e48 25%\n    padding: \"5px\",\n    width: \"25%\", // \u0e01\u0e33\u0e2b\u0e19\u0e14\u0e04\u0e27\u0e32\u0e21\u0e01\u0e27\u0e49\u0e32\u0e07 25%\n  },\n  column75: {\n    flex: \"0 0 75%\", // \u0e04\u0e2d\u0e25\u0e31\u0e21\u0e19\u0e4c\u0e19\u0e35\u0e49\u0e08\u0e30\u0e21\u0e35\u0e02\u0e19\u0e32\u0e14\u0e04\u0e07\u0e17\u0e35\u0e48 75%\n    padding: \"5px\",\n    width: \"75%\", // \u0e01\u0e33\u0e2b\u0e19\u0e14\u0e04\u0e27\u0e32\u0e21\u0e01\u0e27\u0e49\u0e32\u0e07 75%\n  },\n  navbar: {\n    backgroundColor: \"#000\",\n    color: \"white\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    padding: \"10px 20px\",\n  },\n  navList: {\n    listStyleType: \"none\",\n    display: \"flex\",\n    margin: 0,\n    padding: 0,\n  },\n  navItem: {\n    margin: \"0 10px\",\n  },\n  navLink: {\n    color: \"white\",\n    textDecoration: \"none\",\n    fontSize: \"1.2em\",\n  },\n};\n\nconst Selection = styled.button`\n    font-size: 1em;\n    margin: 0.1em;\n    padding: 0.5em 0.3em;\n    border: 2px solid palevioletred;\n    border-radius: 5px;\n    text-align: left;\n    width : 100%\n`;\n\nreturn (\n  <>\n    <div style={styles.navbar}>\n      <ul style={styles.navList}>\n        <li style={styles.navItem}>\n          <a href=\"/\" style={styles.navLink}>\n            Home\n          </a>\n        </li>\n      </ul>\n      <ul style={styles.navList}>\n        <li style={styles.navItem}>\n          <Web3Connect className=\"web3-connect\" connectLabel=\"Connect Wallet\" />\n        </li>\n      </ul>\n    </div>\n\n    <div className=\"container\" style={styles.container}>\n      <div className=\"column25\" style={styles.column}>\n        <div style={styles.div}>\n          <div>\n            <label htmlFor=\"isSell\">Transaction Type:</label>\n            <select\n              name=\"isSell\"\n              id=\"isSell\"\n              value={formData.isSell}\n              onChange={handleChange}\n            >\n              <option value={true}>Sell</option>\n              <option value={false}>Buy</option>\n            </select>\n          </div>\n          <div>\n            <label htmlFor=\"nftAddress\">NFT Address:</label>\n            <input\n              type=\"text\"\n              name=\"nftAddress\"\n              id=\"nftAddress\"\n              value={formData.nftAddress}\n              onChange={handleChange}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"tokenId\">Token ID:</label>\n            <input\n              type=\"number\"\n              name=\"tokenId\"\n              id=\"tokenId\"\n              value={formData.tokenId}\n              onChange={handleChange}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"tokenAddress\">Token Address:</label>\n            <input\n              type=\"text\"\n              name=\"tokenAddress\"\n              id=\"tokenAddress\"\n              value={formData.tokenAddress}\n              onChange={handleChange}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"price\">Price:</label>\n            <input\n              type=\"number\"\n              name=\"price\"\n              id=\"price\"\n              value={formData.price}\n              onChange={handleChange}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"expiry\">Expiry:</label>\n            <input\n              type=\"number\"\n              name=\"expiry\"\n              id=\"expiry\"\n              value={formData.expiry}\n              onChange={handleChange}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"nonce\">Nonce:</label>\n            <input\n              type=\"number\"\n              name=\"nonce\"\n              id=\"nonce\"\n              value={formData.nonce}\n              onChange={handleChange}\n            />\n          </div>\n          <div style={{ margin: 10, alignItems: \"center\" }}>\n            <div style={{ wordWrap: \"break-word\", width: \"100%\" }}>\n              signature : {state.signature}\n            </div>\n            <button\n              onClick={() => signTransaction()}\n              label=\"SignButton\"\n              style={{ margin: 10, alignItems: \"center\" }}\n            >\n              <span>Sign Selected Transaction</span>\n            </button>\n            <button\n              onClick={() => signTransaction712()}\n              label=\"SignButton\"\n              style={{ margin: 10 }}\n            >\n              <span>Sign Selected Transaction With EIP712</span>\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className=\"column75\" style={styles.column}>\n        <div style={{ wordWrap: \"break-word\" }}>\n          {signatures.map((item, index) => (\n            <Selection>\n              <div\n                key={index}\n                style={{ wordWrap: \"break-word\" }}\n                onClick={() => selectTransaction(item.signature)}\n              >\n                <p>Signature: {item.signature.slice(0, 30)}...</p>\n                <p>\n                  Transaction Type: {JSON.stringify(item.dataToSign.isSell)}\n                </p>\n                {state.selectedTransaction == item.signature ? (\n                  <>\n                    <button\n                      onClick={() => alert()}\n                      label=\"SignButton\"\n                      style={{ margin: 10 }}\n                    >\n                      <span> Accept Offer </span>\n                    </button>\n                  </>\n                ) : (\n                  \"\"\n                )}\n              </div>\n            </Selection>\n          ))}\n        </div>\n      </div>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/b7b8561d310401e446850409af506d3515e58a29a6d4f24e10b8de61a1e6b17f/widget/NFTMarketplace", "fact_widget_deployments_id": "b2bcf02c69dfd472888e85b71eef8ca5", "inserted_timestamp": "2023-11-27T22:21:13.495Z", "modified_timestamp": "2023-11-27T22:21:13.495Z", "__row_index": 5}