{"tx_hash": "5i5Qx9kW1WbXAkTvsf7JGoWdki2jgco7Dy9rpYwNBbRU", "action_id_social": "8qBaPVPGCmeAVGA2DQ6vKFFbAXCZsN4MntsH76QEPy2M-0-widget", "block_id": 114152883, "block_timestamp": "2024-03-05T16:49:11.139Z", "signer_id": "thalesb.near", "widget_name": "CompoundConnector", "source_code": "const { marketsContracts, assets, networks, networkTabs } = props;\n\nconst Layout = styled.div`\n  background: #1e202e;\n`;\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n\n  @media (max-width: 728px) {\n    padding-bottom: 80px;\n  }\n\n  .flex-grow {\n    flex-grow: 1;\n  }\n  .contentOut {\n    width: 100%;\n  }\n  .contentOut p {\n    font-size: 20px;\n    font-weight: 700;\n    margin-bottom: 20px;\n    color: #ffffff;\n  }\n  @media (max-width: 728px) {\n    display: grid;\n    .contentOut {\n      padding: 0;\n      margin: 0 0 36px 0;\n    }\n    .contentOut p {\n      display: none;\n    }\n  }\n`;\n\nconst ContainerToast = styled.div`\n  .ToastViewport {\n    --viewport-padding: 25px;\n    position: fixed;\n    bottom: 0;\n    right: left;\n    display: flex;\n    flex-direction: column;\n    padding: var(--viewport-padding);\n    gap: 10px;\n    width: 390px;\n    max-width: 100vw;\n    margin: 0;\n    list-style: none;\n    z-index: 2147483647;\n    outline: none;\n  }\n\n  .ToastRoot {\n    background-color: #323345;\n    border-radius: 6px;\n    box-shadow: hsl(206 22% 7% / 35%) 0px 10px 38px -10px,\n      hsl(206 22% 7% / 20%) 0px 10px 20px -15px;\n    padding: 15px;\n    display: grid;\n    grid-template-areas: \"title action\" \"description action\";\n    grid-template-columns: auto max-content;\n    column-gap: 15px;\n    align-items: center;\n  }\n  .ToastRoot[data-state=\"open\"] {\n    animation: slideIn 150ms cubic-bezier(0.16, 1, 0.3, 1);\n  }\n  .ToastRoot[data-state=\"closed\"] {\n    animation: hide 100ms ease-in;\n  }\n  .ToastRoot[data-swipe=\"move\"] {\n    transform: translateX(var(--radix-toast-swipe-move-x));\n  }\n  .ToastRoot[data-swipe=\"cancel\"] {\n    transform: translateX(0);\n    transition: transform 200ms ease-out;\n  }\n  .ToastRoot[data-swipe=\"end\"] {\n    animation: swipeOut 100ms ease-out;\n  }\n\n  @keyframes hide {\n    from {\n      opacity: 1;\n    }\n    to {\n      opacity: 0;\n    }\n  }\n\n  @keyframes slideIn {\n    from {\n      transform: translateX(calc(100% + var(--viewport-padding)));\n    }\n    to {\n      transform: translateX(0);\n    }\n  }\n\n  @keyframes swipeOut {\n    from {\n      transform: translateX(var(--radix-toast-swipe-end-x));\n    }\n    to {\n      transform: translateX(calc(100% + var(--viewport-padding)));\n    }\n  }\n\n  .ToastTitle {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    grid-area: title;\n    margin-bottom: 5px;\n    font-weight: 500;\n    color: white;\n    font-size: 15px;\n  }\n\n  .ToastDescription {\n    grid-area: description;\n    margin-left: 5px;\n    color: #888baf;\n    font-size: 14px;\n    line-height: 20px;\n    overflow-wrap: break-word;\n    word-break: break-word;\n  }\n  .IconButton {\n    border-radius: 100%;\n    height: 25px;\n    width: 25px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n  }\n\n  .ToastAction {\n    grid-area: action;\n  }\n\n  .Button {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 4px;\n    font-weight: 500;\n  }\n  .Button.small {\n    font-size: 12px;\n    padding: 0 10px;\n    line-height: 25px;\n    height: 25px;\n  }\n  .Button.large {\n    font-size: 15px;\n    padding: 0 15px;\n    line-height: 35px;\n    height: 35px;\n  }\n\n  .toast-close-button {\n    background: none;\n    border: none;\n    margin-bottom: 5px;\n    cursor: pointer;\n  }\n\n  .toast-close-button span {\n    display: inline-block;\n    color: white;\n    font-size: 24px;\n    font-weight: bold;\n  }\n`;\n\nconst MenuContainer = styled.div`\n  margin-right: 35px;\n  display: flex;\n  justify-content: flex-end;\n\n  .alignCenter {\n    display: flex;\n    align-items: center;\n\n    @media (max-width: 728px) {\n      display: none;\n    }\n  }\n\n  .connectWallet {\n    background-color: #00ec97;\n    display: flex;\n    color: #373a53;\n    border: none;\n    border-radius: 4px;\n    &:hover,\n    &:focus {\n      opacity: 0.8;\n      background-color: #00ec97;\n      color: #373a53;\n      border: none;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    }\n    @media (max-width: 728px) {\n      display: none;\n    }\n  }\n\n  .switchWallet {\n    background-color: #00ec97;\n    display: flex;\n    color: #373a53;\n    border: none;\n    border-radius: 4px;\n    padding: 6px;\n    &:hover,\n    &:focus {\n      opacity: 0.8;\n      background-color: #00ec97;\n      color: #373a53;\n      border: none;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    }\n    @media (max-width: 728px) {\n      display: none;\n    }\n  }\n  .switchButton {\n    display: none;\n    font-weight: 500;\n    font-size: 18px;\n    color: #ffffff;\n    cursor: pointer;\n    border: none;\n    background: #4a4e67;\n    width: 100%;\n    border-radius: 8px;\n    height: 50px;\n    text-align: center;\n    &:hover,\n    &:focus {\n      opacity: 0.8;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    }\n    @media (max-width: 728px) {\n      display: flex;\n      align-self: center;\n      align-items: center;\n      justify-content: center;\n      margin-top: 5px;\n    }\n  }\n\n  .connectWalletContainer {\n    display: flex;\n\n    .connectWallet2 {\n      display: none;\n      font-weight: 500;\n      font-size: 18px;\n      color: #ffffff;\n      cursor: pointer;\n      border: none;\n      background: #4a4e67;\n      width: 100%;\n      height: 50px;\n\n      &:hover,\n      &:focus {\n        opacity: 0.8;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n      }\n      @media (max-width: 728px) {\n        display: flex;\n        align-self: center;\n        align-items: center;\n        justify-content: center;\n        margin-top: 5px;\n      }\n    }\n  }\n\n  .item,\n  .connectTab {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding-left: 40px;\n    width: 180px;\n    height: 64px;\n    font-weight: 500;\n    font-size: 18px;\n    color: #ffffff;\n    cursor: pointer;\n    margin-bottom: 2px;\n    border-right: \"none\";\n    transition: 0.5s;\n    border-radius: 16px;\n    transition: opacity 0.3s ease;\n    :hover {\n      opacity: 0.7;\n    }\n  }\n  .item.active,\n  .connectTab.active {\n    text-decoration: underline;\n  }\n  .item.disable,\n  .connectTab.disable {\n    cursor: not-allowed;\n  }\n  .iconWallet {\n    display: none;\n    width: 24px;\n    margin-right: 10px;\n    @media (max-width: 728px) {\n      display: flex;\n    }\n  }\n  .icon {\n    width: 24px;\n    margin-right: 10px;\n  }\n\n  @media (max-width: 728px) {\n    margin: 0;\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 16px;\n    background: #222436;\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 9999;\n    padding: 0 16px;\n\n    .item,\n    .connectTab {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      width: auto;\n      padding: 0;\n      height: 76px;\n      text-align: center;\n      align-items: center;\n    }\n    .item.active,\n    .connectTab.active {\n      background-image: none;\n      border-color: transparent;\n    }\n    .connectTab {\n      display: flex;\n    }\n    .alignCenter {\n      display: flex;\n    }\n  }\n`;\n\nconst ContainerConnect = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  height: 100vh;\n  padding: 36px;\n  margin-top: 30px;\n\n  @media (max-width: 728px) {\n    margin-top: 20px;\n    align-items: flex-start;\n    justify-content: flex-start;\n  }\n  .image {\n    width: 100%;\n    height: 650px;\n    @media (max-width: 728px) {\n      display: none;\n    }\n  }\n  .connectWallet {\n    background-color: #00ec97;\n    display: flex;\n    color: #373a53;\n    border: none;\n    border-radius: 4px;\n    min-width: 470px;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    &:hover,\n    &:focus {\n      opacity: 0.8;\n      background-color: #00ec97;\n      color: #373a53;\n      border: none;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    }\n    @media (max-width: 728px) {\n      min-width: 100%;\n    }\n  }\n`;\n\nconst Title = styled.span`\n  color: white;\n  font-size: 28px;\n  font-weight: 700;\n`;\n\nconst ConnectContainer = styled.div`\n  background-color: #373a53;\n  border-radius: 24px;\n  display: flex;\n  heigh: 150px;\n  width: 100%;\n  flex-direction: column;\n  align-items: center;\n  padding: 24px;\n  text-align: center;\n`;\n\nconst ConnectSubTitle = styled.span`\n  font-size: 18px;\n  font-weight: 600;\n  color: #888baf;\n  margin-bottom: 20px;\n`;\n\nconst ConnectButton = styled.button`\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  background-color: #0f3460;\n  color: white;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n\n  &:hover {\n    background-color: #e94560;\n  }\n`;\n\nconst ConnectWallet = () => {\n  return (\n    <ContainerConnect>\n      <ConnectContainer>\n        <Title>CONNECT WALLET</Title>\n        <ConnectSubTitle>\n          You must be connected to see Dashboard & Markets information!\n        </ConnectSubTitle>\n        <Web3Connect\n          network={state.chainId}\n          className=\"connectWallet\"\n          connectLabel=\"Connect Wallet\"\n          disconnectLabel=\"Disconnect Wallet\"\n          connectingLabel=\"Connecting...\"\n        />\n      </ConnectContainer>\n\n      <img\n        className=\"image\"\n        src=\"https://pali-images.s3.amazonaws.com/files/lock_bos.png\"\n      />\n    </ContainerConnect>\n  );\n};\n\nconst activeMenu =\n  Storage.privateGet(\"cachedActiveMenu\") || props.defaultTab || \"Markets\";\n\nfunction changeTab(menu) {\n  Storage.privateSet(\"cachedActiveMenu\", menu);\n}\n\nconst activeTab = Storage.privateGet(\"activeTab\");\n\n// DETECT SENDER\n\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\nconst {\n  SuccessIcon,\n  WarningIcon,\n  ErrorIcon,\n  WalletIcon,\n  MarketsIcon,\n  MarketsDisabledIcon,\n  DashboardIcon,\n  DashboardDisabledIcon,\n  bridgeIcon,\n} = VM.require(\"thalesb.near/widget/Icons\");\n\nconst [open, setOpen] = useState(false);\nconst [toasts, setToasts] = useState([]);\n\nconst [items, setItems] = useState(assets);\n\n//To get the first asset as the default selected item\nconst defaultSelectedItem = assets[0][Object.keys(assets[0])[0]][0];\n\nconst [selectedItem, setSelectedItem] = useState(\n  activeTab ? activeTab : defaultSelectedItem\n);\nuseEffect(() => {\n  if (activeTab && activeTab !== selectedItem) {\n    setSelectedItem(activeTab);\n  }\n}, [activeTab]);\n\n/**\n * Generates a unique ID for a toast.\n * @returns {string} The generated unique ID.\n */\nconst generateUniqueId = () => {\n  return `toast-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n};\n\n/**\n * Adds a new toast to the list of toasts.\n * @param {string} message - The message content of the toast.\n * @param {string} type - The type of the toast.\n */\n\nconst addToast = (message, type) => {\n  const newToast = { id: generateUniqueId(), message, type };\n  setToasts((prevToasts) => [...prevToasts, newToast]);\n\n  setTimeout(() => {\n    setToasts((prevToasts) =>\n      prevToasts.filter((toast) => toast.id !== newToast.id)\n    );\n  }, 5000);\n};\n\n/**\n * Switches the network based on the provided network name.\n * @param {string} networkName - The name of the network to switch to.\n */\n\nconst switchNetwork = (networkName) => {\n  const network = networks.find((n) => n.name === networkName);\n  if (network) {\n    Ethers.send(\"wallet_switchEthereumChain\", [network.params]);\n  } else {\n    console.error(\"Network not found\");\n  }\n};\n\n/**\n * Updates the selected item in the network.\n *\n * @param {string} network - The network name.\n * @param {number} index - The index of the selected item.\n */\nconst updateSelectedItem = (network, index) => {\n  const selectedNetwork = items[0][network.toLowerCase()][index];\n  console.log(selectedNetwork, \"estranhooo\", network);\n  Storage.privateSet(\"activeTab\", selectedNetwork);\n  switchNetwork(network);\n};\n\nreturn (\n  <Layout key=\"TabComponent\">\n    <Container>\n      <MenuContainer>\n        <div\n          onClick={() => {\n            changeTab(\"Dashboard\");\n          }}\n          className={`item ${activeMenu == \"Dashboard\" ? \"active\" : \"\"}`}\n        >\n          <span className=\"icon\">\n            {activeMenu === \"Dashboard\" ? DashboardIcon : DashboardDisabledIcon}\n          </span>\n          Dashboard\n        </div>\n        <div className={`connectWalletContainer`}>\n          {state.chainId !== undefined &&\n          state.chainId !== selectedItem.chainId ? (\n            <div\n              className=\"switchButton\"\n              onClick={() => switchNetwork(selectedItem.network)}\n            >\n              Switch Network\n            </div>\n          ) : (\n            <Web3Connect\n              network={state.chainId}\n              className=\"connectWallet2\"\n              connectLabel=\"Connect\"\n              disconnectLabel=\"Disconnect\"\n              connectingLabel=\"Connecting...\"\n            />\n          )}\n        </div>\n        <div\n          onClick={() => {\n            changeTab(\"Markets\");\n          }}\n          className={`item ${activeMenu == \"Markets\" ? \"active\" : \"\"}`}\n        >\n          <span className=\"icon\">\n            {activeMenu === \"Dashboard\" ? MarketsDisabledIcon : MarketsIcon}\n          </span>\n          Markets\n        </div>\n\n        <div className=\"alignCenter\">\n          {state.chainId !== undefined &&\n          state.chainId !== selectedItem.chainId ? (\n            <button\n              className=\"switchWallet\"\n              onClick={() => switchNetwork(selectedItem.network)}\n            >\n              Switch to {selectedItem.network}\n            </button>\n          ) : (\n            <Web3Connect\n              network={state.chainId}\n              className=\"connectWallet\"\n              connectLabel=\"Connect Wallet\"\n              disconnectLabel=\"Disconnect Wallet\"\n              connectingLabel=\"Connecting...\"\n            />\n          )}\n        </div>\n      </MenuContainer>\n      <div className=\"contentOut flex-grow\">\n        <>\n          {activeMenu == \"Dashboard\" ? (\n            <>\n              {!!state.sender ? (\n                <Widget\n                  props={{\n                    addToast: addToast,\n                    address: state.sender,\n                    selectedItem: selectedItem,\n                    updateSelectedItem: updateSelectedItem,\n                    switchNetwork: switchNetwork,\n                    networkTabs: networkTabs,\n                  }}\n                  src=\"thalesb.near/widget/CompoundDashboard\"\n                />\n              ) : (\n                <ConnectWallet />\n              )}\n            </>\n          ) : null}\n          {activeMenu == \"Markets\" ? (\n            <Widget\n              props={{\n                contracts: marketsContracts,\n              }}\n              src=\"thalesb.near/widget/CompoundMarkets\"\n            />\n          ) : null}\n        </>\n      </div>\n    </Container>\n    <ContainerToast>\n      <Toast.Provider swipeDirection=\"right\">\n        {toasts.map((toast) => (\n          <Toast.Root key={toast.id} className=\"ToastRoot\" open={true}>\n            <Toast.Title className=\"ToastTitle\">\n              {toast.type === \"error\" ? (\n                <ErrorIcon />\n              ) : toast.type === \"warning\" ? (\n                <WarningIcon />\n              ) : (\n                <SuccessIcon />\n              )}\n              {toast.type === \"error\"\n                ? \"Error\"\n                : toast.type === \"warning\"\n                ? \"Warning\"\n                : \"Success\"}\n            </Toast.Title>\n            <Toast.Description className=\"ToastDescription\">\n              {toast.message}\n            </Toast.Description>\n            <Toast.Close\n              className=\"toast-close-button\"\n              aria-label=\"Close\"\n              onClick={() =>\n                setToasts((currentToasts) =>\n                  currentToasts.filter((t) => t.id !== toast.id)\n                )\n              }\n            >\n              <span aria-hidden>\u00d7</span>\n            </Toast.Close>\n          </Toast.Root>\n        ))}\n        <Toast.Viewport className=\"ToastViewport\" />\n      </Toast.Provider>\n    </ContainerToast>\n  </Layout>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thalesb.near/widget/CompoundConnector", "fact_widget_deployments_id": "477decb0e4c411c22e8d2d2c47d690e8", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}