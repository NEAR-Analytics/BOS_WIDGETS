{"tx_hash": "A38PWeK1pv85hzQRrEyFbBz2NRZrfSHGf7Lrjzf362r4", "action_id_social": "CZGRnoQgjz6j6fD8cK875vKvGPHdjxhkGQVhJ2djGoKS-0-widget", "block_id": 112275463, "block_timestamp": "2024-02-07T02:17:08.307Z", "signer_id": "thalesb.near", "widget_name": "Borrow", "source_code": "State.init({\n  refetchKey,\n  forceRefetch: false,\n});\n\nconst { getUserPosition } = VM.require(\"thalesb.near/widget/compound-requests\");\n\nconst SectionHeader = styled.span`\n  color: #fff;\n\n  font-size: 18px;\n  font-weight: 700;\n`;\n\nconst abi = fetch(\n  \"https://docs.compound.finance/public/files/comet-interface-abi-98f438b.json\"\n);\n\nif (!abi) return \"Loading...\";\n\nuseEffect(() => {\n  if (Ethers.provider()) {\n    Ethers.provider()\n      .send(\"eth_requestAccounts\", [])\n      .then((accounts) => {\n        State.update({ address: accounts[0] });\n      });\n  }\n}, [Ethers]);\n\nuseEffect(() => {\n  if (!state.address) return;\n\n  getUserPosition({\n    userAddress: state.address,\n    cometAddress: props.selectedItem.contractInfo.address,\n    rpcUrl: props.selectedItem.contractInfo.httpRpcUrl,\n    force: state.forceRefetch,\n    collateralAssets: selectedItem.collateralAssets,\n  }).then((position) => {\n    State.update({ position, forceRefetch: false });\n  });\n}, [state.address, state.forceRefetch]);\n\nfunction handleBorrowError(e) {\n  if (props.addToast) {\n    props.addToast(e?.reason || e?.message, \"error\");\n  }\n\n  console.error(e);\n}\n\nfunction borrow(amount) {\n  const contract = new ethers.Contract(\n    props.selectedItem.contractInfo.address,\n    abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  contract\n    .decimals()\n    .then((decimals) => {\n      contract\n        .withdraw(\n          props.selectedItem.address,\n          ethers.utils.parseUnits(Number(amount).toFixed(decimals), decimals)\n        )\n        .then((tx) => {\n          props.addToast(`Transaction sent ${tx.hash}`, \"success\");\n          State.update({\n            loadingBorrow: true,\n          });\n          tx.wait()\n            .then(() => {\n              props.addToast(\"Transaction confirmed\", \"success\");\n              State.update({ refetchKey: Math.random(), loadingBorrow: false });\n            })\n            .catch(handleBorrowError);\n        })\n        .catch(handleBorrowError);\n    })\n    .catch(handleBorrowError);\n}\n\nuseEffect(() => {\n  const interval = setInterval(() => {\n    State.update({ forceRefetch: true });\n  }, 15 * 1000);\n\n  return () => {\n    clearInterval(interval);\n  };\n}, []);\n\nreturn (\n  <Widget\n    src=\"thalesb.near/widget/Input\"\n    props={{\n      type: \"borrow\",\n      onConfirm: (address, amount) => {\n        borrow(amount);\n      },\n      loading: state.loadingBorrow,\n      balance: Number(state.position.borrowCapacityBase || 0),\n      min:\n        state.position.minBorrowAmount &&\n        state.position.borrowedInBase < state.position.minBorrowAmount\n          ? state.position.minBorrowAmount\n          : 0,\n      selectedItem: props.selectedItem,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thalesb.near/widget/Borrow", "fact_widget_deployments_id": "cc9ec6aa657cf23f0c276a6e440a7e9f", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}