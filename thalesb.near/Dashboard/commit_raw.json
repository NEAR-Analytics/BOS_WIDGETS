{"tx_hash": "89H9qhQGnXT83txhtrm6tDMYzLEr6yZzveHqYefDVDFs", "action_id_social": "6DALpQbZVodW51421NxhRUvoZ9e5X99apSyozEaQqgUu-0-widget", "block_id": 111304600, "block_timestamp": "2024-01-25T19:48:06.206Z", "signer_id": "thalesb.near", "widget_name": "Dashboard", "source_code": "if (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\nconst switchNetwork = () => {\n  Ethers.send(\"wallet_addEthereumChain\", [\n    {\n      chainId: \"0x89\",\n      chainName: \"Matic Mainnet\",\n      nativeCurrency: {\n        name: \"Matic\",\n        symbol: \"MATIC\",\n        decimals: 18,\n      },\n      rpcUrls: [\"https://rpc-mainnet.maticvigil.com/\"],\n      blockExplorerUrls: [\"https://explorer.matic.network/\"],\n    },\n  ]);\n};\nif (state.chainId !== undefined && state.chainId !== 137) {\n  return (\n    <button onClick={() => switchNetwork()}>Switch to Polygon Mainnet</button>\n  );\n}\n\n// FETCH LIDO ABI\n\nconst lidoContract = \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\";\nconst tokenDecimals = 18;\n\nconst lidoAbi = fetch(\n  \"https://raw.githubusercontent.com/lidofinance/lido-subgraph/master/abis/Lido.json\"\n);\nif (!lidoAbi.ok) {\n  return \"Loading\";\n}\n\nconst iface = new ethers.utils.Interface(lidoAbi.body);\n\n// FETCH LIDO STAKING APR\n\nif (state.lidoArp === undefined) {\n  const apr = fetch(\n    \"https://api.allorigins.win/get?url=https://stake.lido.fi/api/sma-steth-apr\"\n  );\n  if (!apr) return;\n  State.update({ lidoArp: JSON.parse(apr?.body?.contents) ?? \"...\" });\n}\n\n// HELPER FUNCTIONS\n\nconst getStakedBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: lidoContract,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\n\nconst submitEthers = (strEther, _referral) => {\n  if (!strEther) {\n    return console.log(\"Amount is missing\");\n  }\n  const erc20 = new ethers.Contract(\n    lidoContract,\n    lidoAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amount = ethers.utils.parseUnits(strEther, tokenDecimals).toHexString();\n\n  erc20.submit(lidoContract, { value: amount }).then((transactionHash) => {\n    console.log(\"transactionHash is \" + transactionHash);\n  });\n};\n\n// DETECT SENDER\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    console.log(\"set sender\", accounts[0]);\n  }\n}\n\n//if (!state.sender)  return \"Please login first\";\n\n// FETCH SENDER BALANCE\n\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\n// FETCH SENDER STETH BALANCE\n\nif (state.stakedBalance === undefined && state.sender) {\n  getStakedBalance(state.sender).then((stakedBalance) => {\n    State.update({ stakedBalance });\n  });\n}\n\n// FETCH TX COST\n\nif (state.txCost === undefined) {\n  const gasEstimate = ethers.BigNumber.from(1875000);\n  const gasPrice = ethers.BigNumber.from(1500000000);\n\n  const gasCostInWei = gasEstimate.mul(gasPrice);\n  const gasCostInEth = ethers.utils.formatEther(gasCostInWei);\n\n  let responseGql = fetch(\n    \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\n    {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `{\n            bundle(id: \"1\" ) {\n              ethPrice\n            }\n          }`,\n      }),\n    }\n  );\n\n  if (!responseGql) return \"\";\n\n  const ethPriceInUsd = responseGql.body.data.bundle.ethPrice;\n\n  const txCost = Number(gasCostInEth) * Number(ethPriceInUsd);\n\n  State.update({ txCost: `$${txCost.toFixed(2)}` });\n}\n\n// FETCH CSS\n\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\n).body;\n\nif (!cssFont || !css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n      font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto,\n        Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue,\n        sans-serif;\n      ${cssFont}\n      ${css}\n    `,\n  });\n}\nconst Theme = state.theme;\n\n// OUTPUT UI\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\n// FETCH APR (Placeholder Logic)\nconst fetchApr = () => {\n  return new Promise((resolve, reject) => {\n    // Replace this with your actual API call or logic to get the APR\n    // Example: resolve with a static value\n    resolve(5.25);\n\n    // If there's an error in fetching APR, you can reject the promise\n    // reject(new Error(\"Failed to fetch APR\"));\n  });\n};\n\n// FETCH APR AND UPDATE STATE\nif (state.apr === undefined) {\n  fetchApr().then((apr) => {\n    State.update({ apr });\n  });\n}\n\nreturn (\n  <Theme>\n    <div class=\"LidoContainer\">\n      {state.apr !== undefined && (\n        <div class=\"AprDisplay\">APR: {state.apr.toFixed(2)}%</div>\n      )}\n      {!!state.sender ? (\n        <button\n          class=\"LidoStakeFormSubmitContainer\"\n          onClick={() => submitEthers(state.strEther, state.sender)}\n        >\n          <span>Submit</span>\n        </button>\n      ) : (\n        <Web3Connect\n          className=\"LidoStakeFormSubmitContainer\"\n          connectLabel=\"Connect with Web3\"\n        />\n      )}\n    </div>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thalesb.near/widget/Dashboard", "fact_widget_deployments_id": "b0e6d20b7a880e14ec5b117ee76f7da8", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 59}