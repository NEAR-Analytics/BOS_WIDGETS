{"tx_hash": "Bsy5TJLRmLPi7rfhebvekgMNw7brP7AEcxQgYYnLfUby", "action_id_social": "CbmkxMKTgp1xDELjKVm5B34B8zt7Pp7fS1zrE4GSFw5S-0-widget", "block_id": 112333936, "block_timestamp": "2024-02-07T21:11:50.675Z", "signer_id": "thalesb.near", "widget_name": "CompoundMarkets", "source_code": "State.init({\n  theme: undefined,\n  markestData: [],\n});\n\nif (!props.contracts) return \"No contracts provided\";\n\nconst abi = fetch(\n  \"https://docs.compound.finance/public/files/comet-interface-abi-98f438b.json\",\n);\n\nif (!abi) return \"Loading...\";\n\nconst rewardsData = useCache(\n  () =>\n    asyncFetch(\n      \"https://v3-api.compound.finance/market/all-networks/all-contracts/rewards/dapp-data\",\n    ).then((res) => {\n      const rewards = JSON.parse(res.body);\n\n      const rewardsByCometAddress = rewards.reduce((acc, item) => {\n        if (!acc[item.comet.address]) {\n          acc[item.comet.address] = [item];\n        } else {\n          acc[item.comet.address].push(item);\n        }\n        return acc;\n      }, {});\n\n      return rewardsByCometAddress;\n    }),\n  \"rewardData\",\n  { subscribe: false },\n);\n\nconst ChainNameByChainId = {\n  1: \"Ethereum\",\n  137: \"Polygon\",\n  42161: \"Airbitrum\",\n  8453: \"Base\",\n};\n\nconst ChainIconByChainId = {};\n\n/**\n * Formats a value as a percentage.\n * @param {number} value - The value to be formatted.\n * @returns {string} The formatted value as a percentage.\n */\nconst percentFormatter = (value) => {\n  if (!value) return \"0%\";\n  return `${value.toFixed(2)}%`;\n};\n\n/**\n * Formats a price value.\n * @param {number} value - The price value to be formatted.\n * @returns {string} The formatted price value.\n */\nconst priceFormatter = (value) => {\n  if (!value) return \"-\";\n  if (value > 1000000000) {\n    return `${(value / 1000000000).toFixed(2)}B`;\n  }\n\n  if (value > 1000000) {\n    return `${(value / 1000000).toFixed(2)}M`;\n  }\n\n  if (value > 1000) {\n    return `${(value / 1000).toFixed(2)}K`;\n  }\n\n  return value.toFixed(2);\n};\n\nconst contracts = props.contracts;\n\nconst coingeckoIds = contracts.reduce((acc, contract) => {\n  acc.push(contract.borrowAssetCoingeckoId);\n\n  for (let i = 0; i < contract.collateralAssets.length; i++) {\n    const collateralAsset = contract.collateralAssets[i];\n\n    acc.push(collateralAsset.coingegkoId);\n  }\n\n  return acc;\n}, []);\n\nconst coingeckoIdsString = coingeckoIds.join(\",\");\n\nconst coingeckoPrices = fetch(\n  `https://api.coingecko.com/api/v3/simple/price?ids=${coingeckoIdsString}&vs_currencies=usd`,\n);\n\nif (!coingeckoPrices) return \"Loading...\";\n\nconst marketDataPromises = [];\nconst collateralPricesPromises = [];\n\nconst secondsPerYear = 60 * 60 * 24 * 365;\n\nfor (let contractInfo of contracts) {\n  const rpcProvider = new ethers.providers.JsonRpcProvider(\n    contractInfo.httpRpcUrl,\n  );\n\n  const contract = new ethers.Contract(\n    contractInfo.address,\n    abi.body,\n    rpcProvider,\n  );\n\n  const name = contractInfo.network;\n  const baseAddress = contractInfo.address;\n  const decimals = contractInfo.borrowDecimals;\n  const totalAssets = contractInfo.collateralAssets.length;\n  const icons = {\n    networkIcon: contractInfo.networkIcon,\n    baseCoinIcon: contractInfo.baseCoinIcon,\n    collateralIcons:\n      contractInfo.collateralAssets.map((asset) => {\n        return asset.icon;\n      }) || [],\n  };\n  const baseToken = {\n    name: contractInfo.baseTokenName,\n    symbol: contractInfo.baseTokenSymbol,\n  };\n\n  const marketPromise = new Promise((resolve, reject) => {\n    const basePrice =\n      coingeckoPrices.body[contractInfo.borrowAssetCoingeckoId].usd;\n\n    contract.totalBorrow().then((res) => {\n      const totalBorrow =\n        Number(ethers.utils.formatUnits(res.toString(), decimals)) * basePrice;\n\n      contract.getUtilization().then((res) => {\n        const utilization = Number(res.toString());\n        const parsedUtilization = (utilization / 1e18) * 100;\n\n        contract.totalSupply().then((res) => {\n          const totalEarning =\n            Number(ethers.utils.formatUnits(res.toString(), decimals)) *\n            basePrice;\n\n          contract.getSupplyRate(utilization.toString()).then((res) => {\n            const rate = Number(res.toString());\n\n            const supplyApr = (rate / 1e18) * secondsPerYear * 100;\n\n            contract.getBorrowRate(utilization.toString()).then((res) => {\n              const borrowRate = Number(res.toString());\n\n              const borrowApr = (borrowRate / 1e18) * secondsPerYear * 100;\n\n              resolve({\n                totalBorrow,\n                utilization: parsedUtilization,\n                totalEarning,\n                totalAssets,\n                network: name,\n                address: baseAddress,\n                supplyApr,\n                borrowApr,\n                icons,\n                baseToken,\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n\n  marketDataPromises.push(marketPromise);\n\n  for (let i = 0; i < contractInfo.collateralAssets.length; i++) {\n    const collateralAsset = contractInfo.collateralAssets[i];\n    const name = collateralAsset.name;\n    const baseAddress = contractInfo.address;\n\n    const collateralPromise = new Promise((resolve, reject) => {\n      contract.totalsCollateral(collateralAsset.address).then((res) => {\n        const totalSupplyAsset = Number(\n          ethers.utils.formatUnits(res[0], collateralAsset.decimals),\n        );\n\n        const totalSupplyAssetPrice =\n          coingeckoPrices.body[collateralAsset.coingegkoId].usd;\n\n        const totalSupplyAssetValue = totalSupplyAsset * totalSupplyAssetPrice;\n\n        resolve({\n          baseContractAddress: baseAddress,\n          name,\n          totalSupplyAsset,\n          totalSupplyAssetPrice,\n          totalSupplyAssetValue,\n        });\n      });\n    });\n\n    collateralPricesPromises.push(collateralPromise);\n  }\n}\n\nconst marketsData = useCache(\n  () => Promise.all(marketDataPromises),\n  \"marketsData\",\n  { subscribe: false },\n);\n\nconst collateralPricesData = useCache(\n  () => Promise.all(collateralPricesPromises),\n  \"collateralPricesData\",\n  { subscribe: false },\n);\n\nconst markets = (marketsData ?? [])?.reduce((acc, item) => {\n  if (!acc[item.network]) {\n    acc[item.network] = [item];\n  } else {\n    acc[item.network].push(item);\n  }\n\n  return acc;\n}, {});\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n      --font-primary: \"Quicksand\", sans-serif;\n\n      --color-brand: #00ec97;\n      --color-brand-secondary: #00d186;\n\n      --color-purple: #aa00fa;\n      --color-purple-secondary: #7900b2;\n\n      --color-neutral-100: #d7d9e5;\n      --color-neutral-200: #888baf;\n      --color-neutral-500: #373a53;\n      --color-neutral-600: #323345;\n      --color-neutral-700: #292a3d;\n      --color-neutral-800: #1e202e;\n      --color-neutral-white: #ffffff;\n      --color-neutral-black: #000000;\n      --color-neutral-black-70: rgba(0, 0, 0, 0.7);\n\n      --radius-lg: 24px;\n      --radius-md: 8px;\n      --radius-sm: 4px;\n\n      --spacing-0: 0;\n      --spacing-1: 2px;\n      --spacing-2: 4px;\n      --spacing-3: 6px;\n      --spacing-4: 8px;\n      --spacing-5: 12px;\n      --spacing-6: 16px;\n      --spacing-7: 20px;\n      --spacing-8: 24px;\n      --spacing-9: 32px;\n      --spacing-10: 40px;\n      --spacing-11: 48px;\n      --spacing-12: 56px;\n      --spacing-13: 64px;\n      --spacing-14: 72px;\n      --spacing-15: 80px;\n      --spacing-16: 88px;\n      --spacing-17: 96px;\n      --spacing-18: 104px;\n      --spacing-19: 112px;\n      --spacing-20: 120px;\n      --spacing-21: 128px;\n\n      .font-primary {\n        font-family: var(--font-primary);\n      }\n\n      .font-body-sm-bold {\n        font-size: 14px;\n        line-height: 20px;\n        font-weight: 700;\n        font-style: normal;\n      }\n\n      .font-body-lg-bold {\n        font-size: 18px;\n        line-height: 24px;\n        font-weight: 700;\n        font-style: normal;\n      }\n\n      .font-body-md-bold {\n        font-size: 16px;\n        line-height: 22px;\n        font-weight: 700;\n        font-style: normal;\n      }\n\n      .font-body-md-semibold {\n        font-size: 16px;\n        font-style: normal;\n        font-weight: 600;\n        line-height: 22px;\n      }\n\n      .font-body-md {\n        font-size: 16px;\n        font-style: normal;\n        font-weight: 500;\n        line-height: 22px;\n      }\n\n      .text-secondary {\n        color: var(--color-neutral-200);\n      }\n\n      .chip {\n        background-color: var(--color-neutral-500);\n        padding: 0px 4px;\n        border-radius: var(--radius-sm);\n        color: var(--color-neutral-white);\n      }\n\n      .collateral_icons {\n        display: flex;\n        gap: 0 !important;\n\n        img {\n          width: 24px;\n          height: 24px;\n          margin-right: -8px;\n        }\n      }\n    `,\n  });\n}\n\nconst Theme = state.theme;\n\nconst TableContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: var(--color-neutral-700);\n  color: var(--color-neutral-white);\n  border-radius: var(--radius-lg);\n  padding-right: var(--spacing-8);\n  padding-left: var(--spacing-8);\n  padding-top: var(--spacing-8);\n  padding-bottom: var(--spacing-6);\n  overflow-x: auto;\n\n  @media (max-width: 768px) {\n    display: none;\n  }\n`;\n\nconst TableTitle = styled.div`\n  display: flex;\n  text-transform: uppercase;\n  gap: var(--spacing-4);\n`;\n\nconst MarketTable = styled.table`\n  width: 100%;\n  border-collapse: separate;\n  border-spacing: 0 24px;\n  min-width: 1290px;\n\n  th {\n    text-align: left;\n    color: var(--color-neutral-200);\n  }\n`;\n\nconst MobileMarketContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: var(--color-neutral-700);\n  border-radius: var(--radius-lg);\n  color: var(--color-neutral-white);\n  padding: var(--spacing-8);\n\n  hr {\n    margin-top: var(--spacing-8);\n    margin-bottom: var(--spacing-8);\n    border-style: dashed;\n  }\n\n  div:first-child {\n    display: flex;\n    gap: var(--spacing-4);\n    margin-bottom: var(--spacing-8);\n\n    img {\n      width: 24px;\n      height: 24px;\n    }\n  }\n\n  .info {\n    display: flex;\n    flex-direction: column;\n\n    &-network {\n      display: flex;\n      flex-direction: column;\n      margin-left: var(--spacing-6);\n    }\n\n    &-line {\n      display: flex;\n      justify-content: space-between;\n\n      &:not(:last-child) {\n        margin-bottom: var(--spacing-6);\n      }\n\n      &__value {\n        color: var(--color-neutral-200);\n        display: flex;\n        align-items: center;\n        gap: 1px;\n      }\n    }\n  }\n\n  @media (min-width: 768px) {\n    display: none;\n  }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-8);\n  padding: var(--spacing-6);\n`;\n\nconst LoadingContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: var(--spacing-8);\n`;\n\nif (!Object.values(markets)?.length) {\n  return (\n    <Theme>\n      <LoadingContainer className=\"font-primary\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"4em\"\n          height=\"4em\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            fill=\"white\"\n            d=\"M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z\"\n            opacity=\".25\"\n          />\n          <path\n            fill=\"white\"\n            d=\"M12,4a8,8,0,0,1,7.89,6.7A1.53,1.53,0,0,0,21.38,12h0a1.5,1.5,0,0,0,1.48-1.75,11,11,0,0,0-21.72,0A1.5,1.5,0,0,0,2.62,12h0a1.53,1.53,0,0,0,1.49-1.3A8,8,0,0,1,12,4Z\"\n          >\n            <animateTransform\n              attributeName=\"transform\"\n              dur=\"0.75s\"\n              repeatCount=\"indefinite\"\n              type=\"rotate\"\n              values=\"0 12 12;360 12 12\"\n            />\n          </path>\n        </svg>\n      </LoadingContainer>\n    </Theme>\n  );\n}\n\nreturn (\n  <Theme>\n    <Container className=\"font-primary\">\n      {Object.keys(markets).map((network) => {\n        const networkIcon = markets[network][0].icons.networkIcon;\n\n        return (\n          <>\n            <TableContainer key={network}>\n              <TableTitle>\n                <img style={{ width: 24, height: 24 }} src={networkIcon} />\n                <div className=\"font-body-lg-bold\">{network}</div>\n              </TableTitle>\n\n              <MarketTable>\n                <thead>\n                  <tr className=\"font-body-sm-bold\">\n                    <th>Market</th>\n                    <th>Utilization</th>\n                    <th>Net Earn APR</th>\n                    <th>Net Borrow APR</th>\n                    <th>Total Earning</th>\n                    <th>Total Borrowing</th>\n                    <th>Total collateral</th>\n                    <th>Collateral Assets</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {markets[network].map((market) => {\n                    const totalCollateral = collateralPricesData\n                      ?.filter(\n                        (item) => item.baseContractAddress === market.address,\n                      )\n                      ?.reduce((total, item) => {\n                        return total + item.totalSupplyAssetValue;\n                      }, 0);\n\n                    const rewards = rewardsData[market.address][0];\n\n                    return (\n                      <tr key={market.baseContractAddress}>\n                        <td\n                          style={{\n                            display: \"flex\",\n                            gap: \"var(--spacing-6)\",\n                          }}\n                        >\n                          <div>\n                            <img\n                              style={{\n                                width: 48,\n                                height: 48,\n                                zIndex: 10,\n                                position: \"relative\",\n                              }}\n                              src={market.icons.baseCoinIcon}\n                            />\n                            <img\n                              style={{\n                                width: 48,\n                                height: 48,\n                                marginLeft: -16,\n                              }}\n                              src={market.icons.networkIcon}\n                            />\n                          </div>\n                          <div\n                            style={{ display: \"flex\", flexDirection: \"column\" }}\n                          >\n                            <span className=\"font-body-md-bold\">\n                              {market.baseToken.name}\n                            </span>\n                            <span style={{ color: \"var(--color-neutral-200)\" }}>\n                              {market.baseToken.symbol}{\" \"}\n                              <span style={{ color: \"#00EC97\" }}>\u2022</span>\n                              {network}\n                            </span>\n                          </div>\n                        </td>\n                        <td>{percentFormatter(market.utilization)}</td>\n                        <td>\n                          {percentFormatter(\n                            market.supplyApr +\n                              Number(rewards?.earn_rewards_apr || 0) * 100,\n                          )}\n                        </td>\n                        <td>\n                          {percentFormatter(\n                            market.borrowApr -\n                              Number(rewards?.borrow_rewards_apr || 0) * 100,\n                          )}\n                        </td>\n                        <td>\n                          {network === \"Base\" &&\n                          market.icons.collateralIcons.length === 1\n                            ? \"-\"\n                            : priceFormatter(market.totalEarning)}\n                        </td>\n                        <td>\n                          {network === \"Base\" &&\n                          market.icons.collateralIcons.length === 1\n                            ? \"-\"\n                            : priceFormatter(market.totalBorrow)}\n                        </td>\n                        <td>\n                          {network === \"Base\" &&\n                          market.icons.collateralIcons.length === 2\n                            ? \"-\"\n                            : priceFormatter(totalCollateral)}\n                        </td>\n                        <td style={{ display: \"flex\", gap: \"1px\" }}>\n                          <span className=\"chip\">\n                            {market.icons.collateralIcons.length}\n                          </span>\n                          <div className=\"collateral_icons\">\n                            {market.icons.collateralIcons\n                              .filter((a) => !!a)\n                              .map((icon) => {\n                                return <img src={icon} key={icon} />;\n                              })}\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </MarketTable>\n            </TableContainer>\n\n            <MobileMarketContainer key={network}>\n              <div>\n                <img src={networkIcon} />\n                <span className=\"font-body-md-bold\">{network}</span>\n              </div>\n\n              {markets[network].map((market, i) => {\n                return (\n                  <>\n                    <div className=\"info\">\n                      <div>\n                        <img\n                          style={{\n                            width: 48,\n                            height: 48,\n                            zIndex: 10,\n                            position: \"relative\",\n                          }}\n                          src={market.icons.baseCoinIcon}\n                        />\n                        <img\n                          style={{\n                            width: 48,\n                            height: 48,\n                            marginLeft: -16,\n                          }}\n                          src={market.icons.networkIcon}\n                        />\n\n                        <div className=\"info-network\">\n                          <span className=\"font-body-md-bold\">\n                            {market.baseToken.name}\n                          </span>\n                          <span style={{ color: \"var(--color-neutral-200)\" }}>\n                            {market.baseToken.symbol}\n                            <span style={{ color: \"#00EC97\" }}>\u2022</span>\n                            {network}\n                          </span>\n                        </div>\n                      </div>\n\n                      <div className=\"info-line font-body-md\">\n                        <span className=\"info-line__title\">Utilization</span>\n                        <span className=\"info-line__value font-body-md-semibold\">\n                          {percentFormatter(market.utilization)}\n                        </span>\n                      </div>\n\n                      <div className=\"info-line font-body-md\">\n                        <span className=\"info-line__title\">Net Earn APR</span>\n                        <span className=\"info-line__value font-body-md-semibold\">\n                          {percentFormatter(\n                            market.supplyApr +\n                              Number(\n                                rewardsData[market.address][0]\n                                  ?.earn_rewards_apr || 0,\n                              ) *\n                                100,\n                          )}\n                        </span>\n                      </div>\n\n                      <div className=\"info-line font-body-md\">\n                        <span className=\"info-line__title\">Net Borrow APR</span>\n                        <span className=\"info-line__value font-body-md-semibold\">\n                          {percentFormatter(\n                            market.borrowApr -\n                              Number(\n                                rewardsData[market.address][0]\n                                  ?.borrow_rewards_apr || 0,\n                              ) *\n                                100,\n                          )}\n                        </span>\n                      </div>\n\n                      <div className=\"info-line font-body-md\">\n                        <span className=\"info-line__title\">Total Earning</span>\n                        <span className=\"info-line__value font-body-md-semibold\">\n                          {priceFormatter(market.totalEarning)}\n                        </span>\n                      </div>\n\n                      <div className=\"info-line font-body-md\">\n                        <span className=\"info-line__title\">\n                          Total Borrowing\n                        </span>\n                        <span className=\"info-line__value font-body-md-semibold\">\n                          {priceFormatter(market.totalBorrow)}\n                        </span>\n                      </div>\n\n                      <div className=\"info-line font-body-md\">\n                        <span className=\"info-line__title\">\n                          Total collateral\n                        </span>\n                        <span className=\"info-line__value font-body-md-semibold\">\n                          {priceFormatter(\n                            collateralPricesData\n                              ?.filter(\n                                (item) =>\n                                  item.baseContractAddress === market.address,\n                              )\n                              ?.reduce((total, item) => {\n                                return total + item.totalSupplyAssetValue;\n                              }, 0),\n                          )}\n                        </span>\n                      </div>\n\n                      <div className=\"info-line font-body-md\">\n                        <span className=\"info-line__title\">\n                          Collateral Assets\n                        </span>\n                        <span className=\"info-line__value font-body-md-semibold\">\n                          <span className=\"chip\">\n                            {market.icons.collateralIcons.length}\n                          </span>\n\n                          <div className=\"collateral_icons\">\n                            {market.icons.collateralIcons\n                              .filter((a) => !!a)\n                              .map((icon) => {\n                                return <img src={icon} key={icon} />;\n                              })}\n                          </div>\n                        </span>\n                      </div>\n                    </div>\n                    {i !== markets[network].length - 1 && (\n                      <hr className=\"divider\" />\n                    )}\n                  </>\n                );\n              })}\n            </MobileMarketContainer>\n          </>\n        );\n      })}\n    </Container>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thalesb.near/widget/CompoundMarkets", "fact_widget_deployments_id": "70b138f685e4c9ee9c8fb3a03bf4ae5d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}