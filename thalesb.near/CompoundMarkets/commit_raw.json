{"tx_hash": "89H9qhQGnXT83txhtrm6tDMYzLEr6yZzveHqYefDVDFs", "action_id_social": "6DALpQbZVodW51421NxhRUvoZ9e5X99apSyozEaQqgUu-0-widget", "block_id": 111304600, "block_timestamp": "2024-01-25T19:48:06.206Z", "signer_id": "thalesb.near", "widget_name": "CompoundMarkets", "source_code": "State.init({\n  theme,\n});\n\nconst css = fetch(\n  \"https://ipfs.io/ipfs/QmRz1UsQ74chuQ1D4HG28xhz6nQcZ32UbFbxLNfqoLrnB2\",\n).body;\n\nif (!css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n      ${css}\n    `,\n  });\n}\n\nconst Theme = state.theme;\n\nconst abi = fetch(\n  \"https://docs.compound.finance/public/files/comet-interface-abi-98f438b.json\",\n);\n\nif (!abi) return \"Loading...\";\n\nconst rewardsData = useCache(\n  () =>\n    asyncFetch(\n      \"https://v3-api.compound.finance/market/all-networks/all-contracts/rewards/dapp-data\",\n    ).then((res) => {\n      const rewards = JSON.parse(res.body);\n\n      const rewardsByChainId = rewards.reduce((acc, item) => {\n        if (!acc[item.chain_id]) {\n          acc[item.chain_id] = [item];\n        } else {\n          acc[item.chain_id].push(item);\n        }\n        return acc;\n      }, {});\n\n      return rewardsByChainId;\n    }),\n  \"rewardData\",\n  { subscribe: false },\n);\n\nconst data = useCache(\n  () =>\n    asyncFetch(\n      \"https://v3-api.compound.finance/market/all-networks/all-contracts/summary\",\n    ).then((res) => {\n      const markets = JSON.parse(res.body);\n\n      const martketsByChainId = markets.reduce((acc, item) => {\n        if (!acc[item.chain_id]) {\n          acc[item.chain_id] = [item];\n        } else {\n          acc[item.chain_id].push(item);\n        }\n        return acc;\n      }, {});\n\n      return martketsByChainId;\n    }),\n  \"allContractsSummary\",\n  { subscribe: false },\n);\n\nconst ChainNameByChainId = {\n  1: \"Ethereum\",\n  137: \"Polygon\",\n  42161: \"Airbitrum\",\n  8453: \"Base\",\n};\n\nconst ChainIconByChainId = {};\n\nconst percentFormatter = (value) => {\n  return `${value.toFixed(2)}%`;\n};\n\nconst priceFormatter = (value) => {\n  if (value > 1000000000) {\n    return `${(value / 1000000000).toFixed(2)}B`;\n  }\n\n  if (value > 1000000) {\n    return `${(value / 1000000).toFixed(2)}M`;\n  }\n\n  if (value > 1000) {\n    return `${(value / 1000).toFixed(2)}K`;\n  }\n\n  return value.toFixed(2);\n};\n\n// ---------- CONTRACT\n// TODO: Turn into a prop\nconst contracts = [\n  {\n    network: \"Base\",\n    address: \"0x46e6b214b524310239732D51387075E0e70970bf\",\n    chainId: 8453,\n    httpRpcUrl: \"https://base.llamarpc.com\",\n    borrowAssetCoingeckoId: \"ethereum\",\n  },\n];\n\nconst marketsData = {};\n\nconst marketDataPromises = [];\n\nfor (let contractInfo of contracts) {\n  const marketPromise = new Promise((resolve, reject) => {\n    const rpcProvider = new ethers.providers.JsonRpcProvider(\n      contractInfo.httpRpcUrl,\n    );\n\n    const contract = new ethers.Contract(\n      contractInfo.address,\n      abi.body,\n      rpcProvider,\n    );\n\n    const borrowAssetPrice = fetch(\n      `https://api.coingecko.com/api/v3/simple/price?ids=${contractInfo.borrowAssetCoingeckoId}&vs_currencies=usd`,\n    );\n\n    const price =\n      borrowAssetPrice.body[contractInfo.borrowAssetCoingeckoId].usd;\n\n    contract.totalBorrow().then((res) => {\n      const totalBorrow = (Number(res.toString()) / 1e18) * price;\n\n      contract.getUtilization().then((res) => {\n        const utilization = (Number(res.toString()) / 1e18) * 100;\n\n        contract.totalSupply().then((res) => {\n          const totalEarning = (Number(res.toString()) / 1e18) * price;\n\n          contract.numAssets().then((res) => {\n            const totalAssets = Number(res.toString());\n            let i = 0;\n\n            let assetsHash = {};\n\n            while (i < totalAssets) {\n              contract.getAssetInfo(i).then((res) => {\n                const address = res[1];\n\n                contract.totalsCollateral(address).then((res) => {\n                  const totalSupplyAsset =\n                    (Number(res[0].toString()) / 1e18) * price;\n\n                  assetsHash[address] = {\n                    totalSupplyAssetInUsd: totalSupplyAsset,\n                    totalSupplyAsset: Number(res[0].toString()),\n                  };\n                });\n              });\n              i++;\n            }\n\n            resolve({\n              totalBorrow,\n              utilization,\n              totalEarning,\n              totalAssets,\n              assetsHash,\n              network: contractInfo.network,\n              address: contractInfo.address,\n            });\n          });\n        });\n      });\n    });\n  });\n\n  marketDataPromises.push(marketPromise);\n}\n\nconst allMarkets = useCache(() => Promise.all(marketDataPromises), \"markets\", {\n  subscribe: true,\n});\n\nconst markets = allMarkets?.reduce((acc, item) => {\n  if (!acc[item.network]) {\n    acc[item.network] = [item];\n  } else {\n    acc[item.network].push(item);\n  }\n\n  return acc;\n}, {});\n\nconsole.log(markets);\n\n// Promise.all(marketDataPromises).then((res) => {\n//   console.log(res);\n// });\n\nreturn (\n  <Theme>\n    {Object.keys(markets).map((network) => {\n      return (\n        <div className=\"theme theme--dark page\" key={network}>\n          <div className=\"market-overview-panels__tables-container\">\n            <div className=\"panel-with-header assets-table-panel grid-column--12\">\n              <div className=\"panel-with-header__header\">\n                <div className=\"market-overview-panels__header-with-logo\">\n                  <span className=\"asset asset--ETHEREUM\"></span>\n                  <label className=\"label L1 text-color--1\">{network}</label>\n                </div>\n              </div>\n              <div className=\"panel-with-header__content\">\n                <div className=\"panel panel--markets-assets L3\">\n                  <div className=\"panel--markets-assets__content\">\n                    <table className=\"assets-table\">\n                      <thead>\n                        <tr className=\"assets-table__row assets-table__row--header market-overview-panels__table-header L2\">\n                          <th className=\"label\">Market</th>\n                          <th className=\"label\">Utilization</th>\n                          <th className=\"label\">Net Earn APR</th>\n                          <th className=\"label\">Net Borrow APR</th>\n                          <th className=\"label\">Total Earning</th>\n                          <th className=\"label\">Total Borrowing</th>\n                          <th className=\"label\">Total Collateral</th>\n                          <th className=\"label\">Collateral Assets</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {markets[network].map((item) => {\n                          const totalCollateral = Object.values(\n                            item.assetsHash,\n                          )?.reduce((acc, item) => {\n                            return acc + item.totalSupplyAssetInUsd;\n                          }, 0);\n\n                          return (\n                            <tr\n                              className=\"market-overview-panels__table-row\"\n                              key={item.address}\n                            >\n                              <td>\n                                <div className=\"market-overview-panels__market-container\">\n                                  <div className=\"icon-pair icon-pair--reverse-draw\">\n                                    <span className=\"asset asset--ETH icon-pair__item\"></span>\n                                    <img\n                                      className=\"asset asset--ETHEREUM icon-pair__item\"\n                                      src=\"https://cdn.jsdelivr.net/gh/atomiclabs/cryptocurrency-icons@1a63530be6e374711a8554f31b17e4cb92c25fa5/128/color/eth.png\"\n                                    />\n                                  </div>\n                                  <div className=\"market-overview-panels__asset-description-container\">\n                                    <div>\n                                      <span className=\"body--emphasized text-color--1 L3\">\n                                        Ether\n                                      </span>\n                                    </div>\n                                    <div className=\"label text-color--2 L2\">\n                                      ETH \u2219 Ethereum\n                                    </div>\n                                  </div>\n                                </div>\n                              </td>\n                              <td>\n                                <div className=\"market-overview-panels__utilization-container\">\n                                  <div className=\"circle-meter\">\n                                    <svg viewBox=\"0 0 19 19\">\n                                      <path\n                                        className=\"circle-meter__bg\"\n                                        d=\"M9.5 1.5\n              a 8 8 0 0 1 0 16\n              a 8 8 0 0 1 0 -16\"\n                                      ></path>\n                                      <path\n                                        className=\"circle-meter__circle\"\n                                        stroke-dasharray=\"27.972740987563515,50.26548245743669\"\n                                        d=\"M9.5 1.5\n              a 8 8 0 0 1 0 16\n              a 8 8 0 0 1 0 -16\"\n                                      ></path>\n                                    </svg>\n                                  </div>\n                                  <div className=\"body text-color--1 L3\">\n                                    {percentFormatter(item.utilization)}\n                                  </div>\n                                </div>\n                              </td>\n                              <td>\n                                <div className=\"body text-color--1 L3\">???</div>\n                              </td>\n                              <td>\n                                <div className=\"body text-color--1 L3\">???</div>\n                              </td>\n                              <td>\n                                <div className=\"body text-color--1 L3\">\n                                  {priceFormatter(item.totalEarning ?? 0)}\n                                </div>\n                              </td>\n                              <td>\n                                <div className=\"body text-color--1 L3\">\n                                  {priceFormatter(item.totalBorrow ?? 0)}\n                                </div>\n                              </td>\n                              <td>\n                                <div className=\"body text-color--1 L3\">\n                                  {priceFormatter(totalCollateral ?? 0)}\n                                </div>\n                              </td>\n                              <td>\n                                <div className=\"market-overview-panels__collateral-asset-container\">\n                                  <label className=\"body text-color--1 L3\">\n                                    {item.totalAssets}\n                                  </label>\n                                  <div className=\"market-overview-panels__collateral-asset-icons-container\">\n                                    <div className=\"asset asset--cbETH market-overview-panels__collateral-asset-icon\"></div>\n                                    <div className=\"asset asset--wstETH market-overview-panels__collateral-asset-icon\"></div>\n                                    <div className=\"asset asset--rETH market-overview-panels__collateral-asset-icon\"></div>\n                                  </div>\n                                </div>\n                              </td>\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    })}\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thalesb.near/widget/CompoundMarkets", "fact_widget_deployments_id": "164fbfd5e3dbbe1b2530a8868d9a6328", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}