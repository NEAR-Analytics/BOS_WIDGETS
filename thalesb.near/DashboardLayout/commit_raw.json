{"tx_hash": "GFmFitEvts2eY187G5PtedKS5QZDrVTRJAXAAxKZRvUi", "action_id_social": "Eg8Lg8VLACfkKc9wNKv3BGCxQwVERtRJ2EfMrVDCTBZ2-0-widget", "block_id": 112332032, "block_timestamp": "2024-02-07T20:34:55.962Z", "signer_id": "thalesb.near", "widget_name": "DashboardLayout", "source_code": "const GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  grid-gap: 16px;\n  padding: 32px;\n  position: relative;\n  @media (max-width: 1024px) {\n    grid-template-columns: 1fr;\n  }\n\n  @media (max-width: 728px) {\n    padding-bottom: 140px;\n  }\n`;\n\nconst GridItem = ({ span, rowSpan, children, style }) => {\n  const GridItemStyled = styled.div`\n    background: #292a3d;\n    border-radius: 8px;\n    padding: 20px;\n    color: #fff;\n    grid-column: span ${span || 6};\n    ${rowSpan && `grid-row: span ${rowSpan};`}\n    @media (max-width: 1024px) {\n      grid-column: 1;\n      grid-row: auto;\n    }\n    @media (max-width: 768px) {\n      grid-column: span ${2};\n    }\n  `;\n\n  return <GridItemStyled style={style}>{children}</GridItemStyled>;\n};\n\nconst BalanceDisplay = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 12px;\n  margin-top: 48px;\n`;\n\nconst BalanceImage = styled.img`\n  width: 48px;\n  height: 48px;\n`;\n\nconst BalanceAmount = styled.div`\n  font-size: 36px;\n  font-weight: 500;\n  line-height: 45px;\n  letter-spacing: 0em;\n  text-align: left;\n`;\n\nconst SubAmount = styled.div`\n  display: flex;\n  align-items: flex-end;\n  gap: 8px;\n`;\n\nconst SubAmountText = styled.div`\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 22px;\n  letter-spacing: 0em;\n  text-align: left;\n  color: #888baf;\n`;\n\nconst SubArrow = styled.div`\n  cursor: pointer;\n`;\n\nconst { ArrowIcon, CircleDivider, ArrowPath, WalletIconLarge, CloseIcon } =\n  VM.require(\"thalesb.near/widget/Icons\");\n\nconst ethImage =\n  \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n\nconst usdcImage =\n  \"https://assets.coingecko.com/coins/images/6319/large/USD_Coin_icon.png?1547042389\";\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #333;\n  background: #292a3d;\n  color: white;\n  margin-bottom: 12px;\n\n  &:focus {\n    outline: none;\n    border-color: #4e3f8e;\n  }\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 8px;\n  color: #aaa;\n`;\n\nconst CollateralItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px 0px 12px 0px;\n\n  @media (max-width: 1024px) {\n    padding: 24px 0px 12px 0px;\n  }\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst InfoRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px 0;\n  border-bottom: 1px solid #333;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst InfoLabel = styled.span`\n  color: #fff;\n`;\n\nconst InfoValue = styled.span`\n  color: #888baf;\n`;\n\nconst APRSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px 0;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  gap: 6px;\n  align-items: center;\n  justify-content: center;\n  align-self: center;\n\n  @media (max-width: 1024px) {\n    display: none;\n  }\n`;\n\nconst ButtonContainerMobile = styled.div`\n  display: none;\n  gap: 6px;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n\n  @media (max-width: 1024px) {\n    display: flex;\n  }\n`;\n\nconst Button = styled.button`\n  background-color: ${(props) => props.bgColor || \"#00EC97\"};\n  color: ${(props) => props.color || \"#373a53\"};\n  width: ${(props) => props.width || \"100%\"};\n  border: none;\n  padding: 10px 20px;\n  border-radius: 8px;\n  cursor: pointer;\n  margin-top: ${(props) => props.marginTop || 0}px;\n  transition: background-color 0.3s ease, transform 0.2s ease,\n    box-shadow 0.2s ease;\n  font-size: 16px;\n  font-weight: 600;\n  text-align: center;\n\n  &:hover,\n  &:focus {\n    opacity: 0.8;\n\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n  }\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n\n  &:last-child {\n    margin-right: 0;\n  }\n`;\n\nconst GhostButton = styled.button`\n  margin-top: ${(props) => props.marginTop || 0}px;\n  width: ${(props) => props.width || \"100%\"};\n  background-color: transparent;\n  color: white;\n  border: 1px solid white;\n  padding: 10px 20px;\n  border-radius: 8px;\n  cursor: pointer;\n  margin-right: 10px;\n  transition: background-color 0.3s ease, transform 0.2s ease,\n    box-shadow 0.2s ease, opacity 0.2s ease;\n  font-size: 16px;\n  font-weight: 600;\n  text-align: center;\n\n  &:hover,\n  &:focus {\n    opacity: 0.8;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n\n  &:last-child {\n    margin-right: 0;\n  }\n`;\n\nconst Slider = styled.div`\n  background: #333;\n  border-radius: 5px;\n  position: relative;\n  height: 20px;\n\n  &:before {\n    content: \"\";\n    position: absolute;\n    top: 50%;\n    left: 0;\n    width: ${({ width }) => width}%;\n    height: 8px;\n    background: #4e3f8e;\n    border-radius: 5px;\n    transform: translateY(-50%);\n  }\n`;\n\nconst RowContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 24px;\n`;\n\nconst PositionContainer = styled.div`\n  background: #292a3d;\n  border-radius: 8px;\n  width: 60%;\n  padding: 24px;\n  color: white;\n`;\n\nconst CollateralLabel = styled.span`\n  font-size: 1rem;\n  color: #fff;\n  font-size: 16px;\n  font-weight: 700;\n`;\n\nconst ActionGroup = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  @media (max-width: 1024px) {\n    flex-direction: column;\n  }\n`;\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-right: 12;\n`;\n\nconst BalanceLabel = styled.span`\n  font-size: 16px;\n  font-weight: 700;\n  line-height: 22px;\n  margin-right: 10px;\n  text-align: right;\n  color: #fff;\n`;\n\nconst BalanceValue = styled.span`\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 22px;\n  letter-spacing: 0em;\n  text-align: right;\n  color: #888baf;\n`;\n\nconst InputGroup = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 12px;\n  flex-direction: column;\n  margin-top: 24px;\n`;\n\nconst InputLabel = styled.label`\n  margin-right: 10px;\n  color: #888baf;\n  display: flex;\n  align-self: flex-end;\n  margin-top: 8px;\n`;\n\nconst InputField = styled.input`\n  width: 100%;\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #333;\n  background: #292a3d;\n  color: white;\n  margin-right: 10px;\n\n  &:focus {\n    outline: none;\n    border-color: #4e3f8e;\n  }\n`;\n\nconst SectionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst SectionTitle = styled.h2`\n  color: #fff;\n  margin-bottom: 16px;\n`;\n\nconst SectionHeader = styled.span`\n  color: #fff;\n  font-size: 18px;\n  font-weight: 700;\n`;\n\nconst SectionSubHeader = styled.span`\n  color: #888baf;\n  margin-top: 24px;\n  font-size: 14px;\n  font-weight: 700;\n  margin-bottom: 12px;\n`;\n\nconst DropdownContainer = styled.div`\n  position: relative;\n  z-index: 99;\n  .DropdownMenuItem {\n    border-radius: 24px;\n    background: #373a53;\n    padding: 16px;\n    width: 19vw;\n\n    @media (max-width: 1680px) {\n      min-width: 24vw;\n    }\n\n    @media (max-width: 1440px) {\n      min-width: 28vw;\n    }\n\n    @media (max-width: 1380px) {\n      min-width: 25vw;\n    }\n    @media (max-width: 1200px) {\n      min-width: 30vw;\n    }\n\n    @media (max-width: 1024px) {\n      min-width: min-content;\n    }\n\n    @media (max-width: 728px) {\n      padding: 8px;\n    }\n  }\n`;\n\nconst DropdownLabel = styled.label`\n  color: #fff;\n  display: block;\n  margin-bottom: 5px;\n`;\n\nconst DropdownSelect = styled.select`\n  width: 100%;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: #292a3d;\n  color: white;\n  border: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n`;\nconst BorrowCapacityText = styled.span`\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 20px;\n  letter-spacing: 0em;\n  text-align: right;\n  color: #888baf;\n`;\n\nconst LiquidationRiskBar = ({ riskPercent }) => {\n  return (\n    <ProgressBarContainer>\n      <BorrowCapacityText> Borrow Capacity</BorrowCapacityText>\n      <ProgressBarLimit>\n        {riskPercent > 5 && <RiskPercentage>{0}%</RiskPercentage>}\n        <BorrowLine\n          style={{\n            left: `calc(${90}% - 20px)`,\n          }}\n        />\n\n        <ProgressBarFilled\n          style={{\n            width: `${riskPercent}%`,\n            backgroundColor: riskPercent >= 90 && \"red\",\n          }}\n        />\n\n        <RiskPercentage\n          style={{\n            left: `calc(${riskPercent}% ${riskPercent === 0 ? \"\" : \"- 20px\"})`,\n          }}\n        >\n          {riskPercent}%\n        </RiskPercentage>\n        {riskPercent <= 85 && (\n          <RiskPercentage style={{ left: `calc(${90}% - 30px)` }}>\n            {90}%\n          </RiskPercentage>\n        )}\n      </ProgressBarLimit>\n    </ProgressBarContainer>\n  );\n};\n\nconst ProgressBarContainer = styled.div`\n  width: calc(100% - 16px);\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  padding-bottom: 12px;\n`;\n\nconst ProgressBarLimit = styled.div`\n  height: 20px;\n  border-radius: 4px;\n  background-color: #888baf;\n  width: 100%;\n  position: relative;\n`;\n\nconst ProgressBarFilled = styled.div`\n  height: 100%;\n  background-color: #00ec97;\n  border-radius: 4px;\n  transition: width 0.3s ease-in-out;\n`;\n\nconst ProgressBarFilledLimit = styled.div`\n  height: 100%;\n  border-radius: 4px;\n  transition: width 0.3s ease-in-out;\n`;\n\nconst RiskPercentage = styled.span`\n  position: absolute;\n  bottom: -22px;\n  color: #888baf;\n  transition: left 0.3s ease-in-out;\n`;\n\nconst BorrowLine = styled.div`\n  position: absolute;\n  color: #fff;\n  transition: left 0.3s ease-in-out;\n  border-radius: 4px;\n  width: 4px;\n  height: 100%;\n  background-color: #fff;\n`;\n\nconst ProgressBarBorrowContainer = styled.div`\n  width: ${(props) => props.width}%;\n`;\n\nconst ProgressBarBorrow = styled.div`\n  height: 20px;\n  border-radius: 4px;\n  background-color: #6200ea;\n  width: 100px;\n  margin-left: 4px;\n  transition: width 0.3s ease-in-out;\n`;\n\nconst BorrowText = styled.span`\n  color: #888baf;\n  font-size: 14px;\n  font-weight: 600;\n  margin-left: 4px;\n`;\n\nconst DropdownTrigger = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst CryptoContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 16px;\n  position: relative;\n`;\n\nconst CryptoPairIcon = styled.div`\n  position: relative;\n  align-items: center;\n`;\n\nconst CryptoIcon = styled.img`\n  width: 48px;\n  height: 48px;\n  position: relative;\n  @media (max-width: 728px) {\n    width: 36px;\n    height: 36px;\n  }\n`;\n\nconst OverlappingCryptoIcon = styled.img`\n  width: 48px;\n  height: 48px;\n  margin-left: -12px;\n  @media (max-width: 728px) {\n    width: 36px;\n    height: 36px;\n  }\n`;\n\nconst CryptoLabel = styled.div`\n  margin-left: 8px;\n  font-size: 16px;\n  color: ${(props) => props.color || \"#FFF\"};\n`;\n\nconst CryptoCurrencyPair = ({ selectedItem }) => {\n  return (\n    <CryptoContainer>\n      <CryptoPairIcon>\n        <CryptoIcon src={selectedItem.networkImage} alt=\"Ethereum\" />\n        <OverlappingCryptoIcon src={selectedItem.image} alt=\"USDC\" />\n      </CryptoPairIcon>\n      <CryptoLabel>{selectedItem.name}</CryptoLabel>\n      <CryptoLabel color=\"#888baf\">{selectedItem.network}</CryptoLabel>\n    </CryptoContainer>\n  );\n};\n\nconst NetworkDropdown = ({ selectedItem }) => {\n  return (\n    <DropdownContainer>\n      <DropdownMenu.Root>\n        <DropdownMenu.Trigger asChild>\n          <DropdownTrigger>\n            <SectionHeader>NETWORK</SectionHeader>\n            <ArrowIcon />\n          </DropdownTrigger>\n        </DropdownMenu.Trigger>\n        <CryptoCurrencyPair selectedItem={selectedItem} />\n        <DropdownMenu.Content sideOffset={5}>\n          <DropdownMenu.Item className=\"DropdownMenuItem\">\n            <Widget\n              props={{\n                updateSelectedItem: updateSelectedItem,\n                selectedItem: selectedItem,\n              }}\n              src=\"thalesb.near/widget/NetworkDropdown\"\n            />\n          </DropdownMenu.Item>\n        </DropdownMenu.Content>\n      </DropdownMenu.Root>\n    </DropdownContainer>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Icon = styled.img`\n  width: 48px;\n  height: 48px;\n`;\n\nconst InfoContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 12px;\n`;\n\nconst SubLabelContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst SubLabel = styled.div`\n  font-size: 16px;\n  font-weight: 500;\n  color: #888baf;\n`;\n\nconst Value = styled.div`\n  font-size: 16px;\n  font-weight: 500;\n  margin-left: 4px;\n  color: #888baf;\n`;\n\nconst SmallIcon = styled.div`\n  width: 16px;\n  height: 16px;\n  margin-left: 4px;\n  display: flex;\n  align-items: center;\n  margin-bottom: 2px;\n`;\nconst CenterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 8px;\n  margin-right: 4px;\n`;\n\nconst CollateralItemComponent = ({ item, balance }) => (\n  <Container>\n    <Icon src={item.image} alt=\"coin image\" />\n\n    <InfoContainer>\n      <CollateralLabel>{item.name}</CollateralLabel>\n\n      <SubLabelContainer>\n        <SubLabel>{item.subLabel}</SubLabel>\n        <CenterContainer>{CircleDivider}</CenterContainer>\n        <Value>{balance ? balance : \"0.00\"}</Value>\n        <SmallIcon>{WalletIconLarge}</SmallIcon>\n      </SubLabelContainer>\n    </InfoContainer>\n  </Container>\n);\n\nconst ContainerModal = styled.div`\n  width: 100%;\n\n  .DialogOverlay {\n    background: #000000b2;\n    position: fixed;\n    inset: 0;\n    animation: overlayShow 150ms cubic-bezier(0.16, 1, 0.3, 1);\n  }\n\n  .DialogContent {\n    background-color: #1e202f;\n    z-index: 999;\n    border-radius: 6px;\n    box-shadow: hsl(206 22% 7% / 35%) 0px 10px 38px -10px,\n      hsl(206 22% 7% / 20%) 0px 10px 20px -15px;\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 500px;\n    max-width: 860px;\n    max-height: 85vh;\n    padding: 25px;\n    animation: contentShow 150ms cubic-bezier(0.16, 1, 0.3, 1);\n    @media (max-width: 728px) {\n      width: 320px;\n    }\n    @media (max-width: 450px) {\n      width: 280px;\n    }\n  }\n  .DialogContent:focus {\n    outline: none;\n  }\n\n  .DialogTitle {\n    margin: 0;\n    font-weight: 500;\n    font-size: 17px;\n  }\n\n  .DialogDescription {\n    margin: 10px 0 20px;\n    font-size: 15px;\n    line-height: 1.5;\n  }\n\n  .Button {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 4px;\n    padding: 0 15px;\n    font-size: 15px;\n    line-height: 1;\n    font-weight: 500;\n    height: 35px;\n  }\n\n  .IconButton {\n    border-radius: 100%;\n    height: 25px;\n    width: 25px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n  }\n\n  .Fieldset {\n    display: flex;\n    gap: 20px;\n    align-items: center;\n    margin-bottom: 15px;\n  }\n\n  .Label {\n    font-size: 15px;\n    width: 90px;\n    text-align: right;\n  }\n\n  .Input {\n    width: 100%;\n    flex: 1;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 4px;\n    padding: 0 10px;\n    font-size: 15px;\n    line-height: 1;\n    height: 35px;\n  }\n\n  @keyframes overlayShow {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n\n  @keyframes contentShow {\n    from {\n      opacity: 0;\n      transform: translate(-50%, -48%) scale(0.96);\n    }\n    to {\n      opacity: 1;\n      transform: translate(-50%, -50%) scale(1);\n    }\n  }\n`;\n\nconst { address, addToast, selectedItem, updateSelectedItem, ethPrice } = props;\n\nconst { contractInfo, collateralItems } = selectedItem;\n\n//Get the Row span accoring to the number of collateral items\nconst rowSpan = Math.floor(collateralItems.length / 2) * 1;\n\nlet collateralRowSpan;\nif (collateralItems.length < 3) {\n  collateralRowSpan = 1;\n} else if (collateralItems.length < 4) {\n  collateralRowSpan = 2;\n} else {\n  collateralRowSpan = rowSpan;\n}\n\nconst abi = fetch(\n  \"https://docs.compound.finance/public/files/comet-interface-abi-98f438b.json\"\n);\n\nconst abiBulk = fetch(\n  \"https://raw.githubusercontent.com/ThalesBMC/bulk-api/main/BulkAbi.json\"\n);\nconst { getApr } = VM.require(\"thalesb.near/widget/compound-requests\");\nif (!abi || !abiBulk) return \"Loading...\";\n\nuseEffect(() => {\n  getApr({\n    cometAddress: props.selectedItem.contractInfo.address,\n    rpcUrl: props.selectedItem.contractInfo.httpRpcUrl,\n  }).then((data) => {\n    console.log(\"atualizou\");\n    State.update({ aprData: data });\n  });\n}, [selectedItem]);\n\nuseEffect(() => {\n  const balancesPromise = new Promise((resolve, reject) => {\n    const rpcProvider = new ethers.providers.JsonRpcProvider(\n      contractInfo.httpRpcUrl\n    );\n    const contract = new ethers.Contract(\n      contractInfo.address,\n      abi.body,\n      rpcProvider\n    );\n    const newContract = new ethers.Contract(\n      selectedItem.address,\n      abi.body,\n      rpcProvider\n    );\n\n    /**\n     * Fetches the balances for a collateral item.\n     *\n     * @param {Object} item - The collateral item.\n     * @returns {Promise<Object>} - A promise that resolves to an object containing the balances.\n     */\n    function fetchBalancesForCollateralItem(item) {\n      if (item.isBaseAsset) {\n        // For the base asset, fetch the native balance directly from the network\n        return rpcProvider.getBalance(address).then((nativeBalance) => {\n          const formattedNativeBalance = ethers.utils.formatUnits(\n            nativeBalance,\n            \"ether\"\n          );\n          return contract\n            .collateralBalanceOf(address, item.address)\n            .then((collateralBalance) => {\n              const formattedCollateralBalance = ethers.utils.formatUnits(\n                collateralBalance,\n                item.decimals\n              );\n\n              // Return the object with both balances after fetching the collateral balance\n              return {\n                name: item.name,\n                tokenBalance: formattedNativeBalance,\n                collateralBalance: formattedCollateralBalance,\n              };\n            });\n        });\n      } else {\n        const collateralContract = new ethers.Contract(\n          item.address,\n          abi.body,\n          rpcProvider\n        );\n\n        return Promise.all([\n          collateralContract.balanceOf(address),\n          contract.collateralBalanceOf(address, item.address),\n        ]).then(([tokenBalance, collateralBalance]) => {\n          const formattedTokenBalance = ethers.utils.formatUnits(\n            tokenBalance,\n            item.decimals\n          );\n          const formattedCollateralBalance = ethers.utils.formatUnits(\n            collateralBalance,\n            item.decimals\n          );\n\n          return {\n            name: item.name,\n            tokenBalance: formattedTokenBalance,\n            collateralBalance: formattedCollateralBalance,\n          };\n        });\n      }\n    }\n\n    contract\n      .balanceOf(address)\n      .then((balance) =>\n        Promise.all([\n          balance,\n          contract.decimals(),\n          // Fetch balances for all collateral items\n          Promise.all(\n            collateralItems.map((item) => fetchBalancesForCollateralItem(item))\n          ),\n        ])\n      )\n      .then(([balance, decimals, collateralBalances]) => {\n        const formattedBalance = ethers.utils.formatUnits(balance, decimals);\n\n        return Promise.all([\n          selectedItem.isBaseAsset\n            ? rpcProvider.getBalance(address)\n            : newContract.balanceOf(address),\n          newContract.decimals(),\n        ]).then(([newBalance, newDecimals]) => {\n          let supplyBalanceFormatted;\n          if (selectedItem.isBaseAsset) {\n            supplyBalanceFormatted = ethers.utils.formatUnits(\n              newBalance,\n              \"ether\"\n            );\n          } else {\n            supplyBalanceFormatted = ethers.utils.formatUnits(\n              newBalance,\n              newDecimals\n            );\n          }\n\n          return {\n            formattedBalance,\n            assetBalance: balance,\n            supplyBalance: supplyBalanceFormatted,\n            unformattedSupplyBalance: newBalance,\n            collateralBalances,\n          };\n        });\n      })\n      .then((result) => {\n        // Update the state with all balances\n        State.update({\n          ...result,\n        });\n        resolve();\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n}, [state.lastTransactionHash, selectedItem]);\n\n/**\n * Withdraws an asset to a contract.\n *\n * @param {string} assetAddress - The address of the asset.\n * @param {number} amount - The amount to withdraw.\n * @param {number} decimals - The number of decimals for the asset.\n * @param {boolean} isBaseAsset - Indicates if the asset is the base asset.\n */\nconst withdrawToContract = (assetAddress, amount, decimals, isBaseAsset) => {\n  const contractProxyAllowance = new ethers.Contract(\n    contractInfo.address,\n    abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  // If isBaseAsset is true, check and potentially set allowance before withdrawing\n  if (isBaseAsset) {\n    const comet = contractInfo.address; // Comet contract address\n    const to = address; // recipient's actual address\n    const amountData = ethers.utils.parseEther(amount.toString());\n    const abiCoder = new ethers.utils.AbiCoder();\n\n    // Encode the transaction data\n    const data = abiCoder.encode(\n      [\"address\", \"address\", \"uint\"],\n      [comet, to, amountData]\n    );\n    const actionsEncoded = [\n      ethers.utils.formatBytes32String(\"ACTION_WITHDRAW_NATIVE_TOKEN\"),\n    ];\n    const dataArr = [data];\n\n    const contractBulk = new ethers.Contract(\n      selectedItem.bulkerAddress,\n      abiBulk.body,\n      Ethers.provider().getSigner()\n    );\n\n    // Function to execute the .invoke call\n    const executeInvoke = () => {\n      contractBulk\n        .invoke(actionsEncoded, dataArr, { value: amountData })\n        .then((tx) => {\n          console.log(\"Transaction hash:\", tx.hash);\n          return tx.wait(); // Wait for the transaction to be mined\n        })\n        .then((receipt) => {\n          State.update({\n            lastTransactionHash: receipt.transactionHash,\n          });\n          console.log(\"Transaction successful with receipt:\", receipt);\n        })\n        .catch((error) => {\n          addToast(`Transaction failed: ${error.message}`, \"error\");\n          console.error(\"Transaction failed:\", error);\n        });\n    };\n\n    // Initial promise to handle allowance logic\n    contractProxyAllowance\n      .isAllowed(address, selectedItem.bulkerAddress)\n      .then((isAllowed) => {\n        if (!isAllowed) {\n          addToast(`Please approve the contract and wait`, \"warning\");\n\n          return contractProxyAllowance\n            .allow(selectedItem.bulkerAddress, true)\n            .then((tx) => {\n              console.log(`Allowance transaction hash: ${tx.hash}`);\n              addToast(`Transaction submitted: ${tx.hash}`, \"success\");\n\n              return tx.wait().then((receipt) => {\n                addToast(\n                  `Approval confirmed: ${receipt.transactionHash}`,\n                  \"success\"\n                );\n\n                console.log(\n                  `Allowance transaction confirmed with receipt: ${receipt.transactionHash}`\n                );\n                // After allowance is set, execute the .invoke call\n                executeInvoke();\n              });\n            });\n        } else {\n          console.log(\"Allowance already set, no need to call allow\");\n          // Allowance is already set, directly execute the .invoke call\n          executeInvoke();\n        }\n      })\n      .catch((error) => {\n        addToast(`Transaction failed: ${error.message}`, \"error\");\n        console.error(\"Transaction failed:\", error);\n      });\n  } else {\n    const adjustedAmount = ethers.utils.parseUnits(amount.toString(), decimals);\n    const contract = new ethers.Contract(\n      contractInfo.address,\n      abi.body,\n      Ethers.provider().getSigner()\n    );\n    contract\n      .withdraw(assetAddress, adjustedAmount)\n      .then((tx) => {\n        console.log(`Transaction submitted: ${tx.hash}`);\n        addToast(`Transaction submitted: ${tx.hash}`, \"success\");\n\n        return tx.wait();\n      })\n      .then((receipt) => {\n        console.log(`Transaction confirmed: ${receipt.transactionHash}`);\n\n        State.update({\n          lastTransactionHash: receipt.transactionHash,\n        });\n        addToast(\"Withdrawal successful\", \"success\");\n      })\n      .catch((error) => {\n        addToast(`Transaction failed: ${error.message}`, \"error\");\n        console.error(`Transaction failed: ${error.message}`);\n      });\n  }\n};\n\n/**\n * Checks the allowance and supplies the asset to a contract.\n * @param {string} assetAddress - The address of the asset.\n * @param {number} amount - The amount of the asset to supply.\n * @param {number} decimals - The number of decimals for the asset.\n * @param {boolean} isBaseAsset - Indicates if the asset is the base asset.\n */\nfunction checkAllowanceAndSupply(assetAddress, amount, decimals, isBaseAsset) {\n  const contractProxyAllowance = new ethers.Contract(\n    contractInfo.address,\n    abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  const MaxUint256 = ethers.BigNumber.from(\n    \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n  );\n\n  if (isBaseAsset) {\n    const comet = contractInfo.address; // Comet contract address\n    const to = address; // Recipient's actual address\n    const amountData = ethers.utils.parseEther(amount.toString());\n    const abiCoder = new ethers.utils.AbiCoder();\n\n    // Encode the transaction data\n    const data = abiCoder.encode(\n      [\"address\", \"address\", \"uint\"],\n      [comet, to, amountData]\n    );\n    const actionsEncoded = [\n      ethers.utils.formatBytes32String(\"ACTION_SUPPLY_NATIVE_TOKEN\"),\n    ];\n    const dataArr = [data];\n\n    const contractBulk = new ethers.Contract(\n      selectedItem.bulkerAddress,\n      abiBulk.body,\n      Ethers.provider().getSigner()\n    );\n\n    // Function to execute the .invoke call\n    const executeInvoke = () => {\n      contractBulk\n        .invoke(actionsEncoded, dataArr, { value: amountData })\n        .then((tx) => {\n          console.log(\"Transaction hash:\", tx.hash);\n          return tx.wait(); // Wait for the transaction to be mined\n        })\n        .then((receipt) => {\n          State.update({\n            lastTransactionHash: receipt.transactionHash,\n          });\n          console.log(\"Transaction successful with receipt:\", receipt);\n        })\n        .catch((error) => {\n          addToast(`Transaction failed: ${error.message}`, \"error\");\n          console.error(\"Transaction failed:\", error);\n        });\n    };\n\n    // Initial promise to handle allowance logic\n    contractProxyAllowance\n      .isAllowed(address, selectedItem.bulkerAddress)\n      .then((isAllowed) => {\n        if (!isAllowed) {\n          addToast(`Please approve the contract`, \"warning\");\n\n          return contractProxyAllowance\n            .allow(selectedItem.bulkerAddress, true)\n            .then((tx) => {\n              console.log(`Allowance transaction hash: ${tx.hash}`);\n              addToast(`Transaction submitted: ${tx.hash}`, \"success\");\n              return tx.wait().then((receipt) => {\n                addToast(\n                  `Approval confirmed: ${receipt.transactionHash}`,\n                  \"success\"\n                );\n\n                console.log(\n                  `Allowance transaction confirmed with receipt: ${receipt.transactionHash}`\n                );\n                // After allowance is set, execute the .invoke call\n                executeInvoke();\n              });\n            });\n        } else {\n          console.log(\"Allowance already set, no need to call allow\");\n          // Allowance is already set, directly execute the .invoke call\n          executeInvoke();\n        }\n      })\n      .catch((error) => {\n        addToast(`Transaction failed: ${error.message}`, \"error\");\n        console.error(\"Transaction failed:\", error);\n      });\n  } else {\n    const contract = new ethers.Contract(\n      assetAddress,\n      abi.body,\n      Ethers.provider().getSigner()\n    );\n\n    contract\n      .allowance(address, contractInfo.address)\n      .then((allowance) => {\n        console.log(`Current allowance: ${allowance}`);\n        if (allowance.eq(0)) {\n          console.log(\"Approving...\");\n          addToast(`Please approve the contract`, \"warning\");\n\n          return contract\n            .approve(contractInfo.address, MaxUint256)\n            .then((approvalTx) => {\n              console.log(`Approval transaction hash: ${approvalTx.hash}`);\n              addToast(`Transaction submitted: ${approvalTx.hash}`, \"success\");\n              return approvalTx.wait(); // Wait for the transaction to be mined\n            })\n            .then((approvalResult) => {\n              console.log(\n                `Approval confirmed: ${approvalResult.transactionHash}`\n              );\n              addToast(\n                `Approval confirmed: ${approvalResult.transactionHash}`,\n                \"success\"\n              );\n            })\n            .catch((error) => {\n              addToast(`Approval failed: ${error.message}`, \"error\");\n              console.error(`Approval failed: ${error.message}`);\n              throw new Error(\"Approval failed, cannot proceed to supply.\");\n            });\n        } else {\n          return Promise.resolve(); // Resolve immediately if allowance is sufficient\n        }\n      })\n      .then(() => {\n        // Proceed with supply operation\n        return supplyToContract(assetAddress, amount, decimals);\n      })\n      .catch((error) => {\n        addToast(`Error during supply operation: ${error.message}`, \"error\");\n        console.error(`Error during supply operation: ${error.message}`);\n      });\n  }\n}\n\n/**\n * Supplies a specified amount of tokens to a contract.\n *\n * @param {string} address - The address of the contract.\n * @param {number} amount - The amount of tokens to supply.\n * @param {number} decimals - The number of decimal places for the token.\n */\nconst supplyToContract = (address, amount, decimals) => {\n  const contract = new ethers.Contract(\n    contractInfo.address,\n    abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  const adjustedAmount = ethers.utils.parseUnits(amount.toString(), decimals);\n\n  contract\n    .supply(address, adjustedAmount)\n    .then((tx) => {\n      console.log(`Transaction submitted: ${tx.hash}`);\n      addToast(`Transaction submitted: ${tx.hash}`, \"success\");\n\n      return tx.wait();\n    })\n    .then((receipt) => {\n      console.log(`Transaction confirmed: ${receipt.transactionHash}`);\n      addToast(\"Supply successful\", \"success\");\n      State.update({\n        lastTransactionHash: receipt.transactionHash,\n      });\n    })\n    .catch((error) => {\n      addToast(`Transaction failed: ${error.message}`, \"error\");\n      console.error(`Transaction failed: ${error.message}`);\n    });\n};\n\nconst { getCollateralsWithLiquidationData } = VM.require(\n  \"thalesb.near/widget/compound-requests\"\n);\n\nconst positionData = useCache(\n  () => {\n    if (!selectedItem.contractInfo.address || !address)\n      return Promise.resolve({});\n\n    return getCollateralsWithLiquidationData({\n      userAddress: address,\n      cometAddress: selectedItem.contractInfo.address,\n      rpcUrl: selectedItem.contractInfo.httpRpcUrlBorrow,\n    });\n  },\n  \"positionData\" +\n    selectedItem.contractInfo.address +\n    address +\n    state.refetchPositionKey,\n  { subscribe: false }\n);\n\nuseEffect(() => {\n  const interval = setInterval(() => {\n    State.update({ refetchPositionKey: Date.now() });\n  }, 30 * 1000);\n\n  return () => clearInterval(interval);\n}, []);\n\nreturn (\n  <GridContainer key={address + Math.random()}>\n    {/* Network dropdown and liquidation risk section */}\n\n    <GridItem span={4}>\n      <NetworkDropdown\n        selectedItem={selectedItem}\n        selectedNetwork={selectedNetwork}\n        onChange={handleNetworkChange}\n      />\n    </GridItem>\n    <GridItem span={8}>\n      <SectionHeader>Liquidation Risk</SectionHeader>\n      <LiquidationRiskBar riskPercent={positionData?.liquidationRisk || 0} />\n    </GridItem>\n    {/* Balance Section */}\n\n    <GridItem span={4}>\n      <SectionHeader>Balance</SectionHeader>\n      <BalanceDisplay>\n        <BalanceImage src={selectedItem.image} alt=\"asset image\" />\n        <BalanceAmount>\n          {state.formattedBalance ? state.formattedBalance.slice(0, 8) : 0}\n        </BalanceAmount>\n      </BalanceDisplay>\n\n      <ContainerModal>\n        <Dialog.Root>\n          <Dialog.Trigger asChild>\n            <GhostButton\n              marginTop={45}\n              disabled={\n                !state.formattedBalance || state.formattedBalance === \"0.0\"\n              }\n            >\n              Withdraw\n            </GhostButton>\n          </Dialog.Trigger>\n\n          <Dialog.Overlay className=\"DialogOverlay\" />\n          <Dialog.Content className=\"DialogContent\">\n            <Dialog.Title className=\"DialogTitle\">\n              Withdraw {selectedItem.name}\n            </Dialog.Title>\n            <RowContainer>\n              <Widget\n                props={{\n                  onConfirm: withdrawToContract,\n                  balance: state.formattedBalance,\n\n                  selectedItem: selectedItem,\n                  decimals: selectedItem.decimals,\n                  address: selectedItem.address,\n                  isBaseAsset: selectedItem.isBaseAsset,\n                  type: \"withdraw\",\n                }}\n                src=\"thalesb.near/widget/Input\"\n              />\n              {/* \n              <PositionContainer>\n                <Widget\n                  src=\"thalesb.near/widget/PositionInfo\"\n                  props={{\n                    cometAddress: selectedItem.contractInfo.address,\n                    baseAddress: selectedItem.address,\n                  }}\n                />\n              </PositionContainer> */}\n            </RowContainer>\n            <Dialog.Close asChild>\n              <div className=\"IconButton\" aria-label=\"Close\">\n                {CloseIcon}\n              </div>\n            </Dialog.Close>\n          </Dialog.Content>\n        </Dialog.Root>\n      </ContainerModal>\n    </GridItem>\n\n    {/* Supply Section */}\n    <GridItem span={4}>\n      <SectionHeader>Supply {selectedItem.name}</SectionHeader>\n      <Widget\n        props={{\n          onConfirm: checkAllowanceAndSupply,\n          decimals: selectedItem.decimals,\n          address: selectedItem.address,\n          balance: state.supplyBalance,\n          type: \"supply\",\n\n          selectedItem: selectedItem,\n          isBaseAsset: selectedItem.isBaseAsset,\n        }}\n        src=\"thalesb.near/widget/Input\"\n      />\n    </GridItem>\n\n    {/* Borrow Section */}\n    <GridItem span={4}>\n      <SectionHeader>Borrow {selectedItem.name}</SectionHeader>\n      <Widget\n        props={{\n          decimals: selectedItem.decimals,\n          selectedItem: selectedItem,\n          type: \"borrow\",\n          addToast: addToast,\n          borrowBalance: positionData?.borrowCapacityBase || 0,\n          borrowedBalance: positionData?.borrowedInBase || 0,\n        }}\n        src=\"thalesb.near/widget/Borrow\"\n      />\n    </GridItem>\n\n    {/* Collateral Section */}\n    <GridItem span={6} rowSpan={collateralRowSpan}>\n      <SectionContainer>\n        <SectionHeader>Collateral</SectionHeader>\n        <SectionSubHeader>Asset</SectionSubHeader>\n      </SectionContainer>\n      {collateralItems.map((item, index) => (\n        <div key={index}>\n          <CollateralItem>\n            <CollateralItemComponent\n              item={item}\n              balance={\n                state.collateralBalances && state.collateralBalances[index]\n                  ? state.collateralBalances[index].tokenBalance.slice(0, 6)\n                  : \"0.00\"\n              }\n            />\n            <ActionGroup>\n              <ActionContainer>\n                <BalanceLabel>\n                  {state.collateralBalances && state.collateralBalances[index]\n                    ? state.collateralBalances[index].collateralBalance.slice(\n                        0,\n                        6\n                      )\n                    : \"0.00\"}\n                </BalanceLabel>\n              </ActionContainer>\n              <ButtonContainer>\n                <ContainerModal>\n                  <Dialog.Root>\n                    <Dialog.Trigger asChild>\n                      <Button\n                        disabled={\n                          !state.collateralBalances ||\n                          state.collateralBalances[index].tokenBalance === \"0.0\"\n                        }\n                      >\n                        Supply\n                      </Button>\n                    </Dialog.Trigger>\n\n                    <Dialog.Overlay className=\"DialogOverlay\" />\n                    <Dialog.Content className=\"DialogContent\">\n                      <Dialog.Title className=\"DialogTitle\">\n                        Supply {item.name}\n                      </Dialog.Title>\n                      <RowContainer>\n                        <Widget\n                          props={{\n                            onConfirm: checkAllowanceAndSupply,\n                            decimals: item.decimals,\n                            address: item.address,\n\n                            selectedItem: item,\n                            balance:\n                              state.collateralBalances &&\n                              state.collateralBalances[index].tokenBalance,\n                            type: \"supply\",\n                            isBaseAsset: item.isBaseAsset,\n                          }}\n                          src=\"thalesb.near/widget/Input\"\n                        />\n                        {/* <PositionContainer>\n                          <Widget\n                            src=\"thalesb.near/widget/PositionInfo\"\n                            props={{\n                              cometAddress: selectedItem.contractInfo.address,\n                              baseAddress: selectedItem.address,\n                            }}\n                          />\n                        </PositionContainer> */}\n                      </RowContainer>\n                      <Dialog.Close asChild>\n                        <div className=\"IconButton\" aria-label=\"Close\">\n                          {CloseIcon}\n                        </div>\n                      </Dialog.Close>\n                    </Dialog.Content>\n                  </Dialog.Root>\n                </ContainerModal>\n                <ContainerModal>\n                  <Dialog.Root>\n                    <Dialog.Trigger asChild>\n                      <GhostButton\n                        disabled={\n                          !state.collateralBalances ||\n                          state.collateralBalances[index].collateralBalance ===\n                            \"0.0\"\n                        }\n                      >\n                        Withdraw\n                      </GhostButton>\n                    </Dialog.Trigger>\n\n                    <Dialog.Overlay className=\"DialogOverlay\" />\n                    <Dialog.Content className=\"DialogContent\">\n                      <Dialog.Title className=\"DialogTitle\">\n                        Supply {item.name}\n                      </Dialog.Title>\n                      <RowContainer>\n                        <Widget\n                          props={{\n                            onConfirm: withdrawToContract,\n                            address: item.address,\n                            selectedItem: item,\n                            balance:\n                              state.collateralBalances &&\n                              state.collateralBalances[index].collateralBalance,\n\n                            type: \"withdraw\",\n                            isBaseAsset: item.isBaseAsset,\n                          }}\n                          src=\"thalesb.near/widget/Input\"\n                        />\n                        {/* <PositionContainer>\n                          <Widget\n                            src=\"thalesb.near/widget/PositionInfo\"\n                            props={{\n                              cometAddress: selectedItem.contractInfo.address,\n                              baseAddress: selectedItem.address,\n                            }}\n                          />\n                        </PositionContainer> */}\n                      </RowContainer>\n                      <Dialog.Close asChild>\n                        <div className=\"IconButton\" aria-label=\"Close\">\n                          {CloseIcon}\n                        </div>\n                      </Dialog.Close>\n                    </Dialog.Content>\n                  </Dialog.Root>\n                </ContainerModal>\n              </ButtonContainer>\n            </ActionGroup>\n          </CollateralItem>\n          {/* Collateral Mobile Section */}\n          <ButtonContainerMobile>\n            <ContainerModal>\n              <Dialog.Root>\n                <Dialog.Trigger asChild>\n                  <Button\n                    width=\"100%\"\n                    disabled={\n                      !state.collateralBalances[index].tokenBalance ||\n                      state.collateralBalances[index].tokenBalance === \"0.0\"\n                    }\n                  >\n                    Supply\n                  </Button>\n                </Dialog.Trigger>\n\n                <Dialog.Overlay className=\"DialogOverlay\" />\n                <Dialog.Content className=\"DialogContent\">\n                  <Dialog.Title className=\"DialogTitle\">\n                    Supply {item.name}\n                  </Dialog.Title>\n                  <RowContainer>\n                    <Widget\n                      props={{\n                        onConfirm: checkAllowanceAndSupply,\n                        decimals: item.decimals,\n                        address: item.address,\n\n                        selectedItem: item,\n                        balance:\n                          state.collateralBalances &&\n                          state.collateralBalances[index].tokenBalance,\n                        isBaseAsset: item.isBaseAsset,\n                        type: \"supply\",\n                      }}\n                      src=\"thalesb.near/widget/Input\"\n                    />\n                    {/* <PositionContainer>\n                      <Widget\n                        src=\"thalesb.near/widget/PositionInfo\"\n                        props={{\n                          cometAddress: selectedItem.contractInfo.address,\n                          baseAddress: selectedItem.address,\n                        }}\n                      />\n                    </PositionContainer> */}\n                  </RowContainer>\n                  <Dialog.Close asChild>\n                    <div className=\"IconButton\" aria-label=\"Close\">\n                      {CloseIcon}\n                    </div>\n                  </Dialog.Close>\n                </Dialog.Content>\n              </Dialog.Root>\n            </ContainerModal>\n            <ContainerModal>\n              <Dialog.Root>\n                <Dialog.Trigger asChild>\n                  <GhostButton\n                    width=\"100%\"\n                    disabled={\n                      !state.formattedBalance ||\n                      state.formattedBalance === \"0.0\"\n                    }\n                  >\n                    Withdraw\n                  </GhostButton>\n                </Dialog.Trigger>\n\n                <Dialog.Overlay className=\"DialogOverlay\" />\n                <Dialog.Content className=\"DialogContent\">\n                  <Dialog.Title className=\"DialogTitle\">\n                    Supply {item.name}\n                  </Dialog.Title>\n                  <RowContainer>\n                    <Widget\n                      props={{\n                        onConfirm: withdrawToContract,\n                        address: item.address,\n\n                        selectedItem: item,\n                        balance:\n                          state.collateralBalances &&\n                          state.collateralBalances[index].collateralBalance,\n                        isBaseAsset: item.isBaseAsset,\n                        type: \"withdraw\",\n                      }}\n                      src=\"thalesb.near/widget/Input\"\n                    />\n                    {/* <PositionContainer>\n                      <Widget\n                        src=\"thalesb.near/widget/PositionInfo\"\n                        props={{\n                          cometAddress: selectedItem.contractInfo.address,\n                          baseAddress: selectedItem.address,\n                        }}\n                      />\n                    </PositionContainer> */}\n                  </RowContainer>\n                  <Dialog.Close asChild>\n                    <div className=\"IconButton\" aria-label=\"Close\">\n                      {CloseIcon}\n                    </div>\n                  </Dialog.Close>\n                </Dialog.Content>\n              </Dialog.Root>\n            </ContainerModal>\n          </ButtonContainerMobile>\n        </div>\n      ))}\n    </GridItem>\n    {/* APR Section */}\n    <GridItem span={3}>\n      <Widget\n        src=\"thalesb.near/widget/NetBorrowApr\"\n        props={{\n          aprData: state.aprData,\n          selectedItem: selectedItem,\n        }}\n      />\n    </GridItem>\n    <GridItem span={3}>\n      <Widget\n        src=\"thalesb.near/widget/NetSupplyApr\"\n        props={{\n          aprData: state.aprData,\n          selectedItem: selectedItem,\n        }}\n      />\n    </GridItem>\n    {/* Position Info Section */}\n    <GridItem span={6} style={{ maxHeight: \"220px\" }} rowSpan={2}>\n      <Widget\n        src=\"thalesb.near/widget/PositionInfo\"\n        props={{\n          position: positionData,\n        }}\n      />\n    </GridItem>\n  </GridContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thalesb.near/widget/DashboardLayout", "fact_widget_deployments_id": "07b3a8f2d4b92bdb47aef3cee159d5dd", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 14}