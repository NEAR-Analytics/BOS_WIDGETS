{"tx_hash": "EzyFZWiZyin2gGPP6FZEWjeGpsmhnNBHqnQVdvhGc1dN", "action_id_social": "EHGbwn4nRuLrThX8PZNMftYnJB6YxLV5Ckjv8XM5JLga-0-widget", "block_id": 112170080, "block_timestamp": "2024-02-05T16:15:03.718Z", "signer_id": "thalesb.near", "widget_name": "DashboardLayout", "source_code": "const GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  grid-gap: 16px;\n  padding: 32px;\n  position: relative;\n  @media (max-width: 1024px) {\n    grid-template-columns: 1fr;\n  }\n\n  @media (max-width: 728px) {\n    padding-bottom: 140px;\n  }\n`;\n\nconst GridItem = ({ span, rowSpan, children, style }) => {\n  const GridItemStyled = styled.div`\n    background: #292a3d;\n    border-radius: 8px;\n    padding: 20px;\n    color: #fff;\n    grid-column: span ${span || 6};\n    ${rowSpan && `grid-row: span ${rowSpan};`}\n    @media (max-width: 1024px) {\n      grid-column: 1;\n      grid-row: auto;\n    }\n    @media (max-width: 768px) {\n      grid-column: span ${2};\n    }\n  `;\n\n  return <GridItemStyled style={style}>{children}</GridItemStyled>;\n};\n\nconst BalanceDisplay = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 12px;\n  margin-top: 48px;\n`;\n\nconst BalanceAmount = styled.div`\n  font-size: 36px;\n  font-weight: 500;\n  line-height: 45px;\n  letter-spacing: 0em;\n  text-align: left;\n`;\n\nconst SubAmount = styled.div`\n  display: flex;\n  align-items: flex-end;\n\n  gap: 8px;\n`;\n\nconst SubAmountText = styled.div`\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 22px;\n  letter-spacing: 0em;\n  text-align: left;\n  color: #888baf;\n`;\n\nconst SubArrow = styled.div`\n  cursor: pointer;\n`;\n\nconst ArrowIcon = () => (\n  <svg\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g id=\"Essential icons\">\n      <path\n        id=\"Vector (Stroke)\"\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M6.2762 8.65128C6.6345 8.30676 7.20424 8.31793 7.54875 8.67623L12 13.4015L16.4513 8.67623C16.7958 8.31793 17.3655 8.30676 17.7238 8.65128C18.0821 8.99579 18.0933 9.56553 17.7487 9.92382L12.6488 15.3238C12.4791 15.5003 12.2448 15.6 12 15.6C11.7552 15.6 11.5209 15.5003 11.3513 15.3238L6.25125 9.92382C5.90674 9.56553 5.91791 8.99579 6.2762 8.65128Z\"\n        fill=\"#888BAF\"\n      />\n    </g>\n  </svg>\n);\n\nconst CircleDivider = (\n  <svg\n    width=\"6\"\n    height=\"6\"\n    viewBox=\"0 0 6 6\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <circle id=\"Ellipse 3\" cx=\"2.00012\" cy=\"2\" r=\"2\" fill=\"#00EC97\" />\n  </svg>\n);\n\nconst ArrowPath = (\n  <svg\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g id=\"heroicons-mini/arrow-path-rounded-square\">\n      <path\n        id=\"Vector (Stroke)\"\n        fill-rule=\"evenodd\"\n        clip-rule=\"evenodd\"\n        d=\"M12 5.39998C13.4581 5.39998 14.9005 5.46578 16.3245 5.59455C16.7099 5.62939 17.0163 5.92715 17.0622 6.31119C17.2111 7.5564 17.3118 8.81659 17.3622 10.0899L15.3365 8.06365C14.985 7.71214 14.4152 7.71208 14.0637 8.06351C13.7122 8.41494 13.7121 8.98479 14.0635 9.3363L17.6626 12.9362C18.0141 13.2877 18.5839 13.2878 18.9354 12.9363L22.5363 9.33646C22.8878 8.98504 22.8879 8.41519 22.5365 8.06367C22.1851 7.71215 21.6152 7.71207 21.2637 8.06349L19.1662 10.1603C19.1159 8.79119 19.0096 7.43614 18.8495 6.09746C18.7026 4.86928 17.7184 3.91324 16.4866 3.80186C15.0088 3.66823 13.5122 3.59998 12 3.59998C10.4878 3.59998 8.99126 3.66823 7.51339 3.80186C6.28159 3.91324 5.2974 4.86928 5.15053 6.09746C5.07398 6.73754 5.00973 7.38138 4.95801 8.02871C4.91843 8.52419 5.288 8.95794 5.78348 8.99753C6.27895 9.03711 6.71271 8.66754 6.7523 8.17206C6.80213 7.54826 6.86404 6.92789 6.93779 6.31119C6.98372 5.92715 7.29017 5.62939 7.67548 5.59455C9.09954 5.46578 10.542 5.39998 12 5.39998ZM6.33737 11.064C5.98595 10.7125 5.41615 10.7124 5.06464 11.0638L1.46373 14.6635C1.11219 15.0149 1.11209 15.5847 1.46351 15.9363C1.81491 16.2878 2.38476 16.2879 2.7363 15.9365L4.83379 13.8397C4.88413 15.2088 4.99044 16.5638 5.15053 17.9025C5.2974 19.1307 6.28159 20.0867 7.51339 20.1981C8.99126 20.3317 10.4878 20.4 12 20.4C13.5122 20.4 15.0088 20.3317 16.4866 20.1981C17.7184 20.0867 18.7026 19.1307 18.8495 17.9025C18.9261 17.2619 18.9904 16.6176 19.0421 15.9697C19.0817 15.4742 18.7121 15.0405 18.2166 15.0009C17.7212 14.9614 17.2874 15.3309 17.2478 15.8264C17.198 16.4507 17.136 17.0716 17.0622 17.6888C17.0163 18.0728 16.7099 18.3706 16.3245 18.4054C14.9005 18.5342 13.4581 18.6 12 18.6C10.542 18.6 9.09954 18.5342 7.67548 18.4054C7.29017 18.3706 6.98372 18.0728 6.93779 17.6888C6.78889 16.4436 6.68824 15.1834 6.63779 13.9102L8.66357 15.9363C9.01501 16.2878 9.58486 16.2879 9.93636 15.9364C10.2879 15.585 10.2879 15.0151 9.93646 14.6636L6.33737 11.064Z\"\n        fill=\"#888BAF\"\n      />\n    </g>\n  </svg>\n);\n\nconst WalletIcon = (\n  <svg\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 16 16\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g id=\"react-icons/bi/BiWallet\">\n      <path\n        id=\"Vector\"\n        d=\"M10.6665 8H11.9998V10.6667H10.6665V8Z\"\n        fill=\"#888BAF\"\n      />\n      <path\n        id=\"Vector_2\"\n        d=\"M13.3335 4.66667V3.33333C13.3335 2.598 12.7355 2 12.0002 2H3.3335C2.23083 2 1.3335 2.89733 1.3335 4V12C1.3335 13.4673 2.5295 14 3.3335 14H13.3335C14.0688 14 14.6668 13.402 14.6668 12.6667V6C14.6668 5.26467 14.0688 4.66667 13.3335 4.66667ZM3.3335 3.33333H12.0002V4.66667H3.3335C3.16184 4.65899 2.99977 4.5854 2.88101 4.46121C2.76226 4.33703 2.69598 4.17182 2.69598 4C2.69598 3.82818 2.76226 3.66297 2.88101 3.53879C2.99977 3.4146 3.16184 3.34101 3.3335 3.33333V3.33333ZM13.3335 12.6667H3.3415C3.0335 12.6587 2.66683 12.5367 2.66683 12V5.87667C2.87616 5.952 3.09816 6 3.3335 6H13.3335V12.6667Z\"\n        fill=\"#888BAF\"\n      />\n    </g>\n  </svg>\n);\n\nconst ethImage =\n  \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n\nconst usdcImage =\n  \"https://assets.coingecko.com/coins/images/6319/large/USD_Coin_icon.png?1547042389\";\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #333;\n  background: #292a3d;\n  color: white;\n  margin-bottom: 12px;\n\n  &:focus {\n    outline: none;\n    border-color: #4e3f8e;\n  }\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 8px;\n  color: #aaa;\n`;\n\nconst CollateralItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px 0px 12px 0px;\n\n  @media (max-width: 1024px) {\n    padding: 24px 0px 12px 0px;\n  }\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst InfoSection = styled.div`\n  background: #292a3d;\n  border-radius: 8px;\n  color: white;\n  margin-top: ${(props) => props.marginTop || 0}px;\n`;\n\nconst InfoRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px 0;\n  border-bottom: 1px solid #333;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst InfoLabel = styled.span`\n  color: #fff;\n`;\n\nconst InfoValue = styled.span`\n  color: #888baf;\n`;\n\nconst CollateralInfo = () => (\n  <InfoSection>\n    <InfoRow>\n      <InfoLabel>Collateral value</InfoLabel>\n      <InfoValue>0.7900</InfoValue>\n    </InfoRow>\n    <InfoRow>\n      <InfoLabel>Liquidation point</InfoLabel>\n      <InfoValue>0.0000</InfoValue>\n    </InfoRow>\n    <InfoRow>\n      <InfoLabel>Borrow capacity</InfoLabel>\n      <InfoValue>0.5100</InfoValue>\n    </InfoRow>\n    <InfoRow>\n      <InfoLabel>Available to borrow</InfoLabel>\n      <InfoValue>0.5100</InfoValue>\n    </InfoRow>\n  </InfoSection>\n);\n\nconst InfoSectionModal = styled.div`\n  background: #292a3d;\n  border-radius: 8px;\n  width: 60%;\n  padding: 24px;\n  color: white;\n  margin-top: ${(props) => props.marginTop || 0}px;\n`;\n\nconst CollateralInfoModal = () => (\n  <InfoSectionModal>\n    <InfoRow>\n      <InfoLabel>Collateral value</InfoLabel>\n      <InfoValue>0.7900</InfoValue>\n    </InfoRow>\n    <InfoRow>\n      <InfoLabel>Liquidation point</InfoLabel>\n      <InfoValue>0.0000</InfoValue>\n    </InfoRow>\n    <InfoRow>\n      <InfoLabel>Borrow capacity</InfoLabel>\n      <InfoValue>0.5100</InfoValue>\n    </InfoRow>\n    <InfoRow>\n      <InfoLabel>Available to borrow</InfoLabel>\n      <InfoValue>0.5100</InfoValue>\n    </InfoRow>\n  </InfoSectionModal>\n);\n\nconst APRSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px 0;\n`;\n\nconst SectionTitle = styled.h2`\n  color: #fff;\n  margin-bottom: 16px;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  gap: 6px;\n  align-items: center;\n  justify-content: center;\n  align-self: center;\n\n  @media (max-width: 1024px) {\n    display: none;\n  }\n`;\n\nconst ButtonContainerMobile = styled.div`\n  display: none;\n  gap: 6px;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n\n  @media (max-width: 1024px) {\n    display: flex;\n  }\n`;\n\nconst Button = styled.button`\n  background-color: ${(props) => props.bgColor || \"#00EC97\"};\n  color: ${(props) => props.color || \"#373a53\"};\n  width: ${(props) => props.width || \"100%\"};\n  border: none;\n  padding: 10px 20px;\n  border-radius: 8px;\n  cursor: pointer;\n  margin-top: ${(props) => props.marginTop || 0}px;\n  transition: background-color 0.3s ease, transform 0.2s ease,\n    box-shadow 0.2s ease;\n  font-size: 16px;\n  font-weight: 600;\n\n  text-align: center;\n\n  &:hover,\n  &:focus {\n    opacity: 0.8;\n\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n  }\n\n  &:last-child {\n    margin-right: 0;\n  }\n`;\n\nconst GhostButton = styled.button`\n  margin-top: ${(props) => props.marginTop || 0}px;\n  width: ${(props) => props.width || \"100%\"};\n  background-color: transparent;\n  color: white;\n  border: 1px solid white;\n  padding: 10px 20px;\n  border-radius: 8px;\n  cursor: pointer;\n  margin-right: 10px;\n  transition: background-color 0.3s ease, transform 0.2s ease,\n    box-shadow 0.2s ease, opacity 0.2s ease;\n  font-size: 16px;\n  font-weight: 600;\n\n  text-align: center;\n\n  &:hover,\n  &:focus {\n    opacity: 0.8;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n\n  &:last-child {\n    margin-right: 0;\n  }\n`;\n\nconst Slider = styled.div`\n  background: #333;\n  border-radius: 5px;\n  position: relative;\n  height: 20px;\n\n  &:before {\n    content: \"\";\n    position: absolute;\n    top: 50%;\n    left: 0;\n    width: ${({ width }) => width}%;\n    height: 8px;\n    background: #4e3f8e;\n    border-radius: 5px;\n    transform: translateY(-50%);\n  }\n`;\n\nconst CollateralLabel = styled.span`\n  font-size: 1rem;\n  color: #fff;\n  font-size: 16px;\n  font-weight: 700;\n`;\n\nconst ActionGroup = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  @media (max-width: 1024px) {\n    flex-direction: column;\n  }\n`;\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-right: 12;\n`;\n\nconst BalanceLabel = styled.span`\n  font-size: 16px;\n  font-weight: 700;\n  line-height: 22px;\n  margin-right: 10px;\n  text-align: right;\n  color: #fff;\n`;\n\nconst BalanceValue = styled.span`\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 22px;\n  letter-spacing: 0em;\n  text-align: right;\n  color: #888baf;\n`;\n\nconst InputGroup = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 12px;\n  flex-direction: column;\n  margin-top: 24px;\n`;\n\nconst InputLabel = styled.label`\n  margin-right: 10px;\n  color: #888baf;\n  display: flex;\n  align-self: flex-end;\n  margin-top: 8px;\n`;\n\nconst InputField = styled.input`\n  width: 100%;\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #333;\n  background: #292a3d;\n  color: white;\n  margin-right: 10px;\n\n  &:focus {\n    outline: none;\n    border-color: #4e3f8e;\n  }\n`;\n\nconst SectionHeader = styled.span`\n  color: #fff;\n\n  font-size: 18px;\n  font-weight: 700;\n`;\n\nconst SectionSubHeader = styled.span`\n  color: #888baf;\n  margin-top: 24px;\n  font-size: 14px;\n  font-weight: 700;\n  margin-bottom: 12px;\n`;\n\nconst DropdownContainer = styled.div`\n  position: relative;\n\n  .DropdownMenuItem {\n    border-radius: 24px;\n    background: #373a53;\n    padding: 16px;\n    width: 19vw;\n\n    @media (max-width: 1680px) {\n      min-width: 24vw;\n    }\n\n    @media (max-width: 1440px) {\n      min-width: 28vw;\n    }\n\n    @media (max-width: 1380px) {\n      min-width: 25vw;\n    }\n    @media (max-width: 1200px) {\n      min-width: 30vw;\n    }\n\n    @media (max-width: 1024px) {\n      min-width: min-content;\n    }\n\n    @media (max-width: 728px) {\n      min-width: min-content;\n    }\n  }\n`;\n\nconst DropdownLabel = styled.label`\n  color: #fff;\n  display: block;\n  margin-bottom: 5px;\n`;\n\nconst DropdownSelect = styled.select`\n  width: 100%;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: #292a3d;\n  color: white;\n  border: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n`;\nconst BorrowCapacityText = styled.span`\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 20px;\n  letter-spacing: 0em;\n  text-align: right;\n  color: #888baf;\n`;\n\nconst LiquidationRiskBar = ({ riskPercent }) => {\n  return (\n    <ProgressBarContainer>\n      <BorrowCapacityText> Borrow Capacity</BorrowCapacityText>\n      <ProgressBarLimit>\n        <RiskPercentage>{0}%</RiskPercentage>\n        <BorrowLine\n          style={{\n            left: `calc(${90}% - 20px)`,\n          }}\n        />\n\n        <ProgressBarFilled\n          style={{\n            width: `${riskPercent}%`,\n            backgroundColor: riskPercent >= 90 && \"red\",\n          }}\n        />\n\n        <RiskPercentage style={{ left: `calc(${riskPercent}% - 20px)` }}>\n          {riskPercent}%\n        </RiskPercentage>\n        {riskPercent <= 85 && (\n          <RiskPercentage style={{ left: `calc(${90}% - 30px)` }}>\n            {90}%\n          </RiskPercentage>\n        )}\n      </ProgressBarLimit>\n    </ProgressBarContainer>\n  );\n};\n\nconst ProgressBarContainer = styled.div`\n  width: calc(100% - 16px);\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n\n  padding-bottom: 12px;\n`;\n\nconst ProgressBarLimit = styled.div`\n  height: 20px;\n  border-radius: 4px;\n  background-color: #888baf;\n  width: 100%;\n  position: relative;\n`;\n\nconst ProgressBarFilled = styled.div`\n  height: 100%;\n  background-color: #00ec97;\n  border-radius: 4px;\n  transition: width 0.3s ease-in-out;\n`;\n\nconst ProgressBarFilledLimit = styled.div`\n  height: 100%;\n\n  border-radius: 4px;\n  transition: width 0.3s ease-in-out;\n`;\n\nconst RiskPercentage = styled.span`\n  position: absolute;\n  bottom: -22px;\n  color: #888baf;\n  transition: left 0.3s ease-in-out;\n`;\n\nconst BorrowLine = styled.div`\n  position: absolute;\n\n  color: #fff;\n  transition: left 0.3s ease-in-out;\n\n  border-radius: 4px;\n  width: 4px;\n  height: 100%;\n  background-color: #fff;\n`;\n\nconst ProgressBarBorrowContainer = styled.div`\n  width: ${(props) => props.width}%;\n`;\n\nconst ProgressBarBorrow = styled.div`\n  height: 20px;\n  border-radius: 4px;\n  background-color: #6200ea;\n  width: 100px;\n  margin-left: 4px;\n  transition: width 0.3s ease-in-out;\n`;\n\nconst BorrowText = styled.span`\n  color: #888baf;\n  font-size: 14px;\n  font-weight: 600;\n  margin-left: 4px;\n`;\n\nconst DropdownTrigger = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst CryptoContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 16px;\n  position: relative;\n`;\n\nconst CryptoPairIcon = styled.div`\n  position: relative;\n  align-items: center;\n`;\n\nconst CryptoIcon = styled.img`\n  width: 48px;\n  height: 48px;\n  position: relative;\n`;\n\nconst OverlappingCryptoIcon = styled.img`\n  width: 48px;\n  height: 48px;\n  margin-left: -12px;\n`;\n\nconst CryptoLabel = styled.div`\n  margin-left: 8px;\n  font-size: 16px;\n  color: ${(props) => props.color || \"#FFF\"};\n`;\n\nconst CryptoCurrencyPair = () => {\n  return (\n    <CryptoContainer>\n      <CryptoPairIcon>\n        <CryptoIcon src={selectedItem.networkImage} alt=\"Ethereum\" />\n        <OverlappingCryptoIcon src={selectedItem.image} alt=\"USDC\" />\n      </CryptoPairIcon>\n      <CryptoLabel>{selectedItem.name}</CryptoLabel>\n      <CryptoLabel color=\"#888baf\">{selectedItem.network}</CryptoLabel>\n    </CryptoContainer>\n  );\n};\n\n// NetworkDropdown component\nconst NetworkDropdown = ({ selectedNetwork, onChange }) => {\n  return (\n    <DropdownContainer>\n      <DropdownMenu.Root>\n        <DropdownMenu.Trigger asChild>\n          <DropdownTrigger>\n            <SectionHeader>NETWORK</SectionHeader>\n            <ArrowIcon />\n          </DropdownTrigger>\n        </DropdownMenu.Trigger>\n        <CryptoCurrencyPair />\n        <DropdownMenu.Content sideOffset={5}>\n          <DropdownMenu.Item className=\"DropdownMenuItem\">\n            <Widget\n              props={{\n                updateSelectedItem: updateSelectedItem,\n                selectedItem: selectedItem,\n              }}\n              src=\"thalesb.near/widget/NetworkDropdown\"\n            />\n          </DropdownMenu.Item>\n        </DropdownMenu.Content>\n      </DropdownMenu.Root>\n    </DropdownContainer>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Icon = styled.img`\n  width: 48px;\n  height: 48px;\n`;\n\nconst InfoContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 12px;\n`;\n\nconst SubLabelContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst SubLabel = styled.div`\n  font-size: 16px;\n  font-weight: 500;\n  color: #888baf;\n`;\n\nconst Value = styled.div`\n  font-size: 16px;\n  font-weight: 500;\n  margin-left: 4px;\n  color: #888baf;\n`;\n\nconst SmallIcon = styled.div`\n  width: 16px;\n  height: 16px;\n  margin-left: 4px;\n  display: flex;\n  align-items: center;\n  margin-bottom: 2px;\n`;\nconst CenterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 8px;\n  margin-right: 4px;\n`;\n\nconst CollateralItemComponent = ({ item, balance }) => (\n  <Container>\n    <Icon src={item.image} alt=\"coin image\" />\n\n    <InfoContainer>\n      <CollateralLabel>{item.name}</CollateralLabel>\n\n      <SubLabelContainer>\n        <SubLabel>{item.subLabel}</SubLabel>\n        <CenterContainer>{CircleDivider}</CenterContainer>\n        <Value>{balance ? balance : \"0.00\"}</Value>\n        <SmallIcon>{WalletIcon}</SmallIcon>\n      </SubLabelContainer>\n    </InfoContainer>\n  </Container>\n);\n\nconst ContainerModal = styled.div`\n  width: 100%;\n\n  .DialogOverlay {\n    background: #000000b2;\n    position: fixed;\n    inset: 0;\n    animation: overlayShow 150ms cubic-bezier(0.16, 1, 0.3, 1);\n  }\n\n  .DialogContent {\n    background-color: #1e202f;\n    z-index: 999;\n    border-radius: 6px;\n    box-shadow: hsl(206 22% 7% / 35%) 0px 10px 38px -10px,\n      hsl(206 22% 7% / 20%) 0px 10px 20px -15px;\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 90vw;\n    max-width: 860px;\n    max-height: 85vh;\n    padding: 25px;\n    animation: contentShow 150ms cubic-bezier(0.16, 1, 0.3, 1);\n  }\n  .DialogContent:focus {\n    outline: none;\n  }\n\n  .DialogTitle {\n    margin: 0;\n    font-weight: 500;\n    color: var(--mauve-12);\n    font-size: 17px;\n  }\n\n  .DialogDescription {\n    margin: 10px 0 20px;\n    color: var(--mauve-11);\n    font-size: 15px;\n    line-height: 1.5;\n  }\n\n  .Button {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 4px;\n    padding: 0 15px;\n    font-size: 15px;\n    line-height: 1;\n    font-weight: 500;\n    height: 35px;\n  }\n  .Button.violet {\n    background-color: white;\n    color: var(--violet-11);\n    box-shadow: 0 2px 10px var(--black-a7);\n  }\n  .Button.violet:hover {\n    background-color: var(--mauve-3);\n  }\n  .Button.violet:focus {\n    box-shadow: 0 0 0 2px black;\n  }\n  .Button.green {\n    background-color: var(--green-4);\n    color: var(--green-11);\n  }\n  .Button.green:hover {\n    background-color: var(--green-5);\n  }\n  .Button.green:focus {\n    box-shadow: 0 0 0 2px var(--green-7);\n  }\n\n  .IconButton {\n    border-radius: 100%;\n    height: 25px;\n    width: 25px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n  }\n\n  .Fieldset {\n    display: flex;\n    gap: 20px;\n    align-items: center;\n    margin-bottom: 15px;\n  }\n\n  .Label {\n    font-size: 15px;\n    color: var(--violet-11);\n    width: 90px;\n    text-align: right;\n  }\n\n  .Input {\n    width: 100%;\n    flex: 1;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 4px;\n    padding: 0 10px;\n    font-size: 15px;\n    line-height: 1;\n    color: var(--violet-11);\n    box-shadow: 0 0 0 1px var(--violet-7);\n    height: 35px;\n  }\n  .Input:focus {\n    box-shadow: 0 0 0 2px var(--violet-8);\n  }\n\n  @keyframes overlayShow {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n\n  @keyframes contentShow {\n    from {\n      opacity: 0;\n      transform: translate(-50%, -48%) scale(0.96);\n    }\n    to {\n      opacity: 1;\n      transform: translate(-50%, -50%) scale(1);\n    }\n  }\n`;\n\nconst { address, addToast, selectedItem, updateSelectedItem } = props;\n\nconst { contractInfo, collateralItems } = selectedItem;\n\nconst rowSpan = Math.floor(collateralItems.length / 2) * 1;\n\nlet collateralRowSpan;\nif (collateralItems.length < 3) {\n  collateralRowSpan = 1;\n} else if (collateralItems.length < 4) {\n  collateralRowSpan = 2;\n} else {\n  collateralRowSpan = rowSpan;\n}\n\nconst abi = fetch(\n  \"https://docs.compound.finance/public/files/comet-interface-abi-98f438b.json\"\n);\n\nif (!abi) return \"Loading...\";\n\nconst balancesPromise = new Promise((resolve, reject) => {\n  const rpcProvider = new ethers.providers.JsonRpcProvider(\n    contractInfo.httpRpcUrl\n  );\n\n  const contract = new ethers.Contract(\n    contractInfo.address,\n    abi.body,\n    rpcProvider\n  );\n  const newContract = new ethers.Contract(\n    \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n    abi.body,\n    rpcProvider\n  );\n\n  function fetchBalancesForCollateralItem(item) {\n    const collateralContract = new ethers.Contract(\n      item.address,\n      abi.body,\n      rpcProvider\n    );\n    return Promise.all([\n      collateralContract.balanceOf(address),\n      contract.collateralBalanceOf(address, item.address),\n    ]).then(([tokenBalance, collateralBalance]) => {\n      const formattedTokenBalance = ethers.utils.formatUnits(\n        tokenBalance,\n        item.decimals\n      );\n      const formattedCollateralBalance = ethers.utils.formatUnits(\n        collateralBalance,\n        item.decimals\n      );\n      return {\n        name: item.name,\n        tokenBalance: formattedTokenBalance,\n        collateralBalance: formattedCollateralBalance,\n      };\n    });\n  }\n\n  contract\n    .balanceOf(address)\n    .then((balance) =>\n      Promise.all([\n        balance,\n        contract.decimals(),\n        // Fetch balances for all collateral items\n        Promise.all(\n          collateralItems.map((item) => fetchBalancesForCollateralItem(item))\n        ),\n      ])\n    )\n    .then(([balance, decimals, collateralBalances]) => {\n      const formattedBalance = ethers.utils.formatUnits(balance, decimals);\n\n      return Promise.all([\n        newContract.balanceOf(address),\n        newContract.decimals(),\n      ]).then(([newBalance, newDecimals]) => {\n        const supplyBalanceFormatted = ethers.utils.formatUnits(\n          newBalance,\n          newDecimals\n        );\n\n        return {\n          formattedBalance,\n          assetBalance: balance,\n          supplyBalance: supplyBalanceFormatted,\n          unformattedSupplyBalance: newBalance,\n          collateralBalances, //\n        };\n      });\n    })\n    .then((result) => {\n      // Update the state with all balances\n      State.update({\n        ...result,\n      });\n      resolve();\n    })\n    .catch((error) => {\n      reject(error);\n    });\n});\n\nconst withdrawToContract = (address, amount, decimals) => {\n  const contract = new ethers.Contract(\n    contractInfo.address,\n    abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  console.log(\"salveee clan\", amount);\n\n  const adjustedAmount = ethers.utils.parseUnits(amount.toString(), decimals);\n\n  contract\n    .withdraw(address, adjustedAmount)\n    .then((tx) => {\n      console.log(`Transaction submitted: ${tx.hash}`);\n      addToast(`Transaction submitted: ${tx.hash}`, \"success\");\n      // Wait for the transaction to be mined\n      State.update({ loadingWithdraw: true });\n      return tx.wait();\n    })\n    .then((receipt) => {\n      console.log(`Transaction confirmed: ${receipt.transactionHash}`);\n      // Update state or UI as needed\n      State.update({\n        lastTransactionHash: receipt.transactionHash,\n        loadingWithdraw: false,\n      });\n      addToast(\"Withdrawal successful\", \"success\");\n    })\n    .catch((error) => {\n      addToast(`Transaction failed: ${error.message}`, \"error\");\n      console.error(`Transaction failed: ${error.message}`);\n    });\n  console.log(\"finalizou\");\n};\n\nconst supplyToContract = (address, amount, decimals, isCollateral) => {\n  const contract = new ethers.Contract(\n    contractInfo.address,\n    abi.body,\n    Ethers.provider().getSigner()\n  );\n  console.log(\"salveee clan\", amount, decimals);\n\n  const adjustedAmount = ethers.utils.parseUnits(amount.toString(), decimals);\n\n  contract\n    .supply(address, adjustedAmount)\n    .then((tx) => {\n      console.log(`Transaction submitted: ${tx.hash}`);\n      addToast(`Transaction submitted: ${tx.hash}`, \"error\");\n      if (isCollateral) {\n        State.update({ loadingSupplyCollateral: true });\n      } else {\n        State.update({ loadingSupply: true });\n      }\n      return tx.wait();\n    })\n    .then((receipt) => {\n      console.log(`Transaction confirmed: ${receipt.transactionHash}`);\n      addToast(\"Supply successful\", \"success\");\n      State.update({\n        lastTransactionHash: receipt.transactionHash,\n        loadingSupply: false,\n      });\n    })\n    .catch((error) => {\n      addToast(`Transaction failed: ${error.message}`, \"error\");\n      console.error(`Transaction failed: ${error.message}`);\n    });\n};\n\nreturn (\n  <GridContainer key={address + Math.random()}>\n    {/* Network dropdown and liquidation risk section */}\n    {/* <button\n      onClick={() => {\n        console.log(\"salve\");\n        addToast(\"Transaction submitted: ${tx.hash}\", \"success\");\n      }}\n    >\n      teste\n    </button> */}\n    <GridItem span={4}>\n      <NetworkDropdown\n        selectedNetwork={selectedNetwork}\n        onChange={handleNetworkChange}\n      />\n    </GridItem>\n    <GridItem span={8}>\n      <SectionHeader>Liquidation Risk</SectionHeader>\n      <LiquidationRiskBar riskPercent={40} />\n    </GridItem>\n    {/* Balance Section */}\n\n    <GridItem span={4}>\n      <SectionHeader>Balance</SectionHeader>\n      <BalanceDisplay>\n        <img\n          src={selectedItem.image}\n          style={{ width: 48, height: 48 }}\n          alt=\"ETH\"\n        />\n        <BalanceAmount>\n          {state.formattedBalance ? state.formattedBalance : 0}\n        </BalanceAmount>\n      </BalanceDisplay>\n      {/* <SubAmount>\n        <SubAmountText>124.000 USD</SubAmountText>\n        <SubArrow> {ArrowPath}</SubArrow>\n      </SubAmount> */}\n      <ContainerModal>\n        <Dialog.Root>\n          <Dialog.Trigger asChild>\n            <GhostButton\n              marginTop={45}\n              disabled={\n                (state.formattedBalance && state.formattedBalance === 0) ||\n                state.loadingWithdraw\n              }\n            >\n              {state.loadingWithdraw ? \"Loading...\" : \"Withdraw\"}\n            </GhostButton>\n          </Dialog.Trigger>\n\n          <Dialog.Overlay className=\"DialogOverlay\" />\n          <Dialog.Content className=\"DialogContent\">\n            <Dialog.Title className=\"DialogTitle\">\n              Withdraw {selectedItem.name}\n            </Dialog.Title>\n            <div style={{ display: \"flex\", flexDirection: \"row\", gap: 24 }}>\n              <Widget\n                props={{\n                  onConfirm: withdrawToContract,\n                  balance: state.formattedBalance,\n                  loading: state.loadingWithdraw,\n                  selectedItem: selectedItem,\n                  decimals: 6,\n                  address: \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\",\n                  type: \"withdraw\",\n                }}\n                src=\"thalesb.near/widget/Input\"\n              />\n              <CollateralInfoModal />\n            </div>\n            <Dialog.Close asChild>\n              <div className=\"IconButton\" aria-label=\"Close\">\n                <svg\n                  width=\"24\"\n                  height=\"24\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <g id=\"Essential icons/X-mark\">\n                    <path\n                      id=\"Union\"\n                      d=\"M7.5364 6.2636C7.18492 5.91213 6.61508 5.91213 6.2636 6.2636C5.91213 6.61508 5.91213 7.18492 6.2636 7.5364L10.7272 12L6.2636 16.4636C5.91213 16.8151 5.91213 17.3849 6.2636 17.7364C6.61508 18.0879 7.18492 18.0879 7.5364 17.7364L12 13.2728L16.4636 17.7364C16.8151 18.0879 17.3849 18.0879 17.7364 17.7364C18.0879 17.3849 18.0879 16.8151 17.7364 16.4636L13.2728 12L17.7364 7.5364C18.0879 7.18492 18.0879 6.61508 17.7364 6.2636C17.3849 5.91213 16.8151 5.91213 16.4636 6.2636L12 10.7272L7.5364 6.2636Z\"\n                      fill=\"white\"\n                    />\n                  </g>\n                </svg>\n              </div>\n            </Dialog.Close>\n          </Dialog.Content>\n        </Dialog.Root>\n      </ContainerModal>\n    </GridItem>\n\n    {/* Supply USDC Section */}\n    <GridItem span={4}>\n      <SectionHeader>Supply {selectedItem.name}</SectionHeader>\n      <Widget\n        props={{\n          onConfirm: supplyToContract,\n          decimals: 6,\n          address: selectedItem.address,\n          balance: state.supplyBalance,\n          type: \"supply\",\n          loading: state.loadingSupply,\n          selectedItem: selectedItem,\n        }}\n        src=\"thalesb.near/widget/Input\"\n      />\n    </GridItem>\n\n    {/* Borrow USDC Section */}\n    <GridItem span={4}>\n      <SectionHeader>Borrow {selectedItem.name}</SectionHeader>\n      <Widget\n        props={{\n          // onConfirm: supplyToContract,\n          // decimals: 6,\n          // balance: 0,\n          selectedItem: selectedItem,\n          type: \"borrow\",\n          // loading: state.loadingSupply,\n        }}\n        src=\"thalesb.near/widget/Input\"\n      />\n    </GridItem>\n\n    {/* Net Borrow APR Section */}\n\n    {/* Collateral Section */}\n    <GridItem span={6} rowSpan={collateralRowSpan}>\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        <SectionHeader>Collateral</SectionHeader>\n        <SectionSubHeader>Asset</SectionSubHeader>\n      </div>\n      {collateralItems.map((item, index) => (\n        <div key={index}>\n          <CollateralItem>\n            <CollateralItemComponent\n              item={item}\n              balance={\n                state.collateralBalances && state.collateralBalances[index]\n                  ? state.collateralBalances[index].tokenBalance.slice(0, 6)\n                  : \"0.00\"\n              }\n            />\n            <ActionGroup>\n              <ActionContainer>\n                <BalanceLabel>\n                  {state.collateralBalances && state.collateralBalances[index]\n                    ? state.collateralBalances[index].collateralBalance.slice(\n                        0,\n                        6\n                      )\n                    : \"0.00\"}\n                </BalanceLabel>\n                {/* <BalanceValue>0.7900</BalanceValue> */}\n              </ActionContainer>\n              <ButtonContainer>\n                <ContainerModal>\n                  <Dialog.Root>\n                    <Dialog.Trigger asChild>\n                      <Button\n                        disabled={\n                          (state.collateralBalances &&\n                            state.collateralBalances[index].tokenBalance ===\n                              0) ||\n                          state.loadingSupplyCollateral\n                        }\n                      >\n                        {state.loadingSupplyCollateral\n                          ? \"Loading...\"\n                          : \"Supply\"}\n                      </Button>\n                    </Dialog.Trigger>\n\n                    <Dialog.Overlay className=\"DialogOverlay\" />\n                    <Dialog.Content className=\"DialogContent\">\n                      <Dialog.Title className=\"DialogTitle\">\n                        Supply {item.name}\n                      </Dialog.Title>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"row\",\n\n                          gap: 24,\n                        }}\n                      >\n                        <Widget\n                          props={{\n                            onConfirm: supplyToContract,\n                            decimals: item.decimals,\n                            address: item.address,\n                            loading: state.loadingSupplyCollateral,\n                            selectedItem: item,\n                            balance:\n                              state.collateralBalances &&\n                              state.collateralBalances[index].tokenBalance,\n\n                            type: \"supply\",\n                            isCollateral,\n                          }}\n                          src=\"thalesb.near/widget/Input\"\n                        />\n                        <CollateralInfoModal />\n                      </div>\n                      <Dialog.Close asChild>\n                        <div className=\"IconButton\" aria-label=\"Close\">\n                          <svg\n                            width=\"24\"\n                            height=\"24\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                          >\n                            <g id=\"Essential icons/X-mark\">\n                              <path\n                                id=\"Union\"\n                                d=\"M7.5364 6.2636C7.18492 5.91213 6.61508 5.91213 6.2636 6.2636C5.91213 6.61508 5.91213 7.18492 6.2636 7.5364L10.7272 12L6.2636 16.4636C5.91213 16.8151 5.91213 17.3849 6.2636 17.7364C6.61508 18.0879 7.18492 18.0879 7.5364 17.7364L12 13.2728L16.4636 17.7364C16.8151 18.0879 17.3849 18.0879 17.7364 17.7364C18.0879 17.3849 18.0879 16.8151 17.7364 16.4636L13.2728 12L17.7364 7.5364C18.0879 7.18492 18.0879 6.61508 17.7364 6.2636C17.3849 5.91213 16.8151 5.91213 16.4636 6.2636L12 10.7272L7.5364 6.2636Z\"\n                                fill=\"white\"\n                              />\n                            </g>\n                          </svg>\n                        </div>\n                      </Dialog.Close>\n                    </Dialog.Content>\n                  </Dialog.Root>\n                </ContainerModal>\n                <ContainerModal>\n                  <Dialog.Root>\n                    <Dialog.Trigger asChild>\n                      <GhostButton\n                        disabled={\n                          (state.collateralBalances &&\n                            state.collateralBalances[index]\n                              .collateralBalance === 0) ||\n                          state.loadingWithdrawCollateral\n                        }\n                      >\n                        {state.loadingWithdraw ? \"Loading...\" : \"Withdraw\"}\n                      </GhostButton>\n                    </Dialog.Trigger>\n\n                    <Dialog.Overlay className=\"DialogOverlay\" />\n                    <Dialog.Content className=\"DialogContent\">\n                      <Dialog.Title className=\"DialogTitle\">\n                        Supply {item.name}\n                      </Dialog.Title>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"row\",\n                          gap: 24,\n                        }}\n                      >\n                        <Widget\n                          props={{\n                            onConfirm: withdrawToContract,\n                            address: item.address,\n                            selectedItem: item,\n                            balance:\n                              state.collateralBalances &&\n                              state.collateralBalances[index].collateralBalance,\n                            loading: state.loadingWithdrawCollateral,\n                            type: \"withdraw\",\n                          }}\n                          src=\"thalesb.near/widget/Input\"\n                        />\n                        <CollateralInfoModal />\n                      </div>\n                      <Dialog.Close asChild>\n                        <div className=\"IconButton\" aria-label=\"Close\">\n                          <svg\n                            width=\"24\"\n                            height=\"24\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                          >\n                            <g id=\"Essential icons/X-mark\">\n                              <path\n                                id=\"Union\"\n                                d=\"M7.5364 6.2636C7.18492 5.91213 6.61508 5.91213 6.2636 6.2636C5.91213 6.61508 5.91213 7.18492 6.2636 7.5364L10.7272 12L6.2636 16.4636C5.91213 16.8151 5.91213 17.3849 6.2636 17.7364C6.61508 18.0879 7.18492 18.0879 7.5364 17.7364L12 13.2728L16.4636 17.7364C16.8151 18.0879 17.3849 18.0879 17.7364 17.7364C18.0879 17.3849 18.0879 16.8151 17.7364 16.4636L13.2728 12L17.7364 7.5364C18.0879 7.18492 18.0879 6.61508 17.7364 6.2636C17.3849 5.91213 16.8151 5.91213 16.4636 6.2636L12 10.7272L7.5364 6.2636Z\"\n                                fill=\"white\"\n                              />\n                            </g>\n                          </svg>\n                        </div>\n                      </Dialog.Close>\n                    </Dialog.Content>\n                  </Dialog.Root>\n                </ContainerModal>\n              </ButtonContainer>\n            </ActionGroup>\n          </CollateralItem>\n          <ButtonContainerMobile>\n            <ContainerModal>\n              <Dialog.Root>\n                <Dialog.Trigger asChild>\n                  <Button\n                    width=\"100%\"\n                    disabled={\n                      (state.collateralBalances &&\n                        state.collateralBalances[index].tokenBalance === 0) ||\n                      state.loadingSupplyCollateral\n                    }\n                  >\n                    {state.loadingSupplyCollateral ? \"Loading...\" : \"Supply\"}\n                  </Button>\n                </Dialog.Trigger>\n\n                <Dialog.Overlay className=\"DialogOverlay\" />\n                <Dialog.Content className=\"DialogContent\">\n                  <Dialog.Title className=\"DialogTitle\">\n                    Supply {item.name}\n                  </Dialog.Title>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n\n                      gap: 24,\n                    }}\n                  >\n                    <Widget\n                      props={{\n                        onConfirm: supplyToContract,\n                        decimals: item.decimals,\n                        address: item.address,\n                        loading: state.loadingSupplyCollateral,\n                        selectedItem: item,\n                        balance:\n                          state.collateralBalances &&\n                          state.collateralBalances[index].tokenBalance,\n\n                        type: \"supply\",\n                      }}\n                      src=\"thalesb.near/widget/Input\"\n                    />\n                    <CollateralInfoModal />\n                  </div>\n                  <Dialog.Close asChild>\n                    <div className=\"IconButton\" aria-label=\"Close\">\n                      <svg\n                        width=\"24\"\n                        height=\"24\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                      >\n                        <g id=\"Essential icons/X-mark\">\n                          <path\n                            id=\"Union\"\n                            d=\"M7.5364 6.2636C7.18492 5.91213 6.61508 5.91213 6.2636 6.2636C5.91213 6.61508 5.91213 7.18492 6.2636 7.5364L10.7272 12L6.2636 16.4636C5.91213 16.8151 5.91213 17.3849 6.2636 17.7364C6.61508 18.0879 7.18492 18.0879 7.5364 17.7364L12 13.2728L16.4636 17.7364C16.8151 18.0879 17.3849 18.0879 17.7364 17.7364C18.0879 17.3849 18.0879 16.8151 17.7364 16.4636L13.2728 12L17.7364 7.5364C18.0879 7.18492 18.0879 6.61508 17.7364 6.2636C17.3849 5.91213 16.8151 5.91213 16.4636 6.2636L12 10.7272L7.5364 6.2636Z\"\n                            fill=\"white\"\n                          />\n                        </g>\n                      </svg>\n                    </div>\n                  </Dialog.Close>\n                </Dialog.Content>\n              </Dialog.Root>\n            </ContainerModal>\n            <ContainerModal>\n              <Dialog.Root>\n                <Dialog.Trigger asChild>\n                  <GhostButton\n                    width=\"100%\"\n                    disabled={\n                      (state.formattedBalance &&\n                        state.formattedBalance === 0) ||\n                      state.loadingWithdrawCollateral\n                    }\n                  >\n                    {state.loadingWithdrawCollateral\n                      ? \"Loading...\"\n                      : \"Withdraw\"}\n                  </GhostButton>\n                </Dialog.Trigger>\n\n                <Dialog.Overlay className=\"DialogOverlay\" />\n                <Dialog.Content className=\"DialogContent\">\n                  <Dialog.Title className=\"DialogTitle\">\n                    Supply {item.name}\n                  </Dialog.Title>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                      gap: 24,\n                    }}\n                  >\n                    <Widget\n                      props={{\n                        onConfirm: withdrawToContract,\n                        address: item.address,\n                        loading: state.loadingWithdrawCollateral,\n                        selectedItem: item,\n                        balance:\n                          state.collateralBalances &&\n                          state.collateralBalances[index].collateralBalance,\n\n                        type: \"withdraw\",\n                      }}\n                      src=\"thalesb.near/widget/Input\"\n                    />\n                    <CollateralInfoModal />\n                  </div>\n                  <Dialog.Close asChild>\n                    <div className=\"IconButton\" aria-label=\"Close\">\n                      <svg\n                        width=\"24\"\n                        height=\"24\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                      >\n                        <g id=\"Essential icons/X-mark\">\n                          <path\n                            id=\"Union\"\n                            d=\"M7.5364 6.2636C7.18492 5.91213 6.61508 5.91213 6.2636 6.2636C5.91213 6.61508 5.91213 7.18492 6.2636 7.5364L10.7272 12L6.2636 16.4636C5.91213 16.8151 5.91213 17.3849 6.2636 17.7364C6.61508 18.0879 7.18492 18.0879 7.5364 17.7364L12 13.2728L16.4636 17.7364C16.8151 18.0879 17.3849 18.0879 17.7364 17.7364C18.0879 17.3849 18.0879 16.8151 17.7364 16.4636L13.2728 12L17.7364 7.5364C18.0879 7.18492 18.0879 6.61508 17.7364 6.2636C17.3849 5.91213 16.8151 5.91213 16.4636 6.2636L12 10.7272L7.5364 6.2636Z\"\n                            fill=\"white\"\n                          />\n                        </g>\n                      </svg>\n                    </div>\n                  </Dialog.Close>\n                </Dialog.Content>\n              </Dialog.Root>\n            </ContainerModal>\n          </ButtonContainerMobile>\n        </div>\n      ))}\n    </GridItem>\n    <GridItem span={3}>\n      <SectionHeader>Net Borrow APR</SectionHeader>\n      <InfoSection marginTop={12}>\n        <InfoRow>\n          <InfoLabel>APR</InfoLabel>\n          <InfoValue>0.7900</InfoValue>\n        </InfoRow>\n        <InfoRow>\n          <InfoLabel>Fee</InfoLabel>\n          <InfoValue>0.0000</InfoValue>\n        </InfoRow>\n        <InfoRow>\n          <InfoLabel>Interest</InfoLabel>\n          <InfoValue>0.5100</InfoValue>\n        </InfoRow>\n      </InfoSection>\n    </GridItem>\n    <GridItem span={3}>\n      <SectionHeader>Net Supply APR</SectionHeader>\n      <InfoSection marginTop={12}>\n        <InfoRow>\n          <InfoLabel>APR</InfoLabel>\n          <InfoValue>0.7900</InfoValue>\n        </InfoRow>\n        <InfoRow>\n          <InfoLabel>Fee</InfoLabel>\n          <InfoValue>0.0000</InfoValue>\n        </InfoRow>\n        <InfoRow>\n          <InfoLabel>Interest</InfoLabel>\n          <InfoValue>0.5100</InfoValue>\n        </InfoRow>\n      </InfoSection>\n    </GridItem>\n    <GridItem span={6} style={{ maxHeight: \"220px\" }} rowSpan={2}>\n      <CollateralInfo />\n    </GridItem>\n  </GridContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thalesb.near/widget/DashboardLayout", "fact_widget_deployments_id": "7cc75b94a862f9194f63fe5abedd238a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}