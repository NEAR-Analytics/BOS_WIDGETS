{"tx_hash": "AR6BMKGorZ5789nuQz6A13u8gKgXUPNoicbvGyTsQiBZ", "action_id_social": "EFiWGXroyjB1UsAUrN1eeGhztCNiku119cSoU4RM4UM6-0-widget", "block_id": 112693295, "block_timestamp": "2024-02-12T17:51:15.949Z", "signer_id": "socialcheck.near", "widget_name": "ProfileCheck", "source_code": "const accountId = context.accountId;\nconst sybilProvider = props.sybilProvider;\nconst contract = \"v1.socialcheck.near\";\nif (!accountId) {\n  return \"Please sign in with NEAR wallet to edit your profile\";\n}\n\nconst initialProfile = Social.getr(`${accountId}/profile`);\nif (initialProfile === null) {\n  return \"Loading\";\n}\n\nconst [profile, setProfile] = useState(initialProfile || {});\nconst [fieldErrors, setFieldErrors] = useState({});\nconst [prompt, setPrompt] = useState(\"\");\n\n// Define the validation function\nfunction isProfileValid(profile) {\n  let invalidFields = [];\n\n  if (typeof profile?.name !== \"string\" || profile.name?.trim() === \"\") {\n    invalidFields.push(\"name\");\n  }\n\n  const isStandardImageValid =\n    profile.image?.ipfs_cid && typeof profile.image?.ipfs_cid === \"string\";\n  const isNftImageValid =\n    profile.image?.nft && typeof profile.image.nft?.contractId === \"string\";\n  const isUrlImageValid =\n    profile.image?.url && typeof profile.image?.url === \"string\";\n\n  if (!isNftImageValid && !isStandardImageValid && !isUrlImageValid) {\n    invalidFields.push(\"image\");\n  }\n\n  const isBackgroundImageValid =\n    profile.backgroundImage?.ipfs_cid &&\n    typeof profile.backgroundImage?.ipfs_cid === \"string\";\n  const isBackgroundNftValid =\n    profile.backgroundImage?.nft &&\n    typeof profile.backgroundImage?.nft.contractId === \"string\";\n  const isBackgroundUrlValid =\n    profile.backgroundImage?.url &&\n    typeof profile.backgroundImage?.url === \"string\";\n\n  if (\n    !isBackgroundImageValid &&\n    !isBackgroundNftValid &&\n    !isBackgroundUrlValid\n  ) {\n    invalidFields.push(\"backgroundImage\"); // Corrected from \"image\" to \"backgroundImage\"\n  }\n\n  if (\n    !profile.description ||\n    typeof profile.description !== \"string\" ||\n    profile.description.trim() === \"\"\n  ) {\n    invalidFields.push(\"description\");\n  }\n\n  const hasValidTag = Object.values(profile.tags || []).some(\n    (tag) => tag !== null\n  );\n  if (!hasValidTag) {\n    invalidFields.push(\"tags\");\n  }\n\n  const hasValidLinktree = [\"twitter\", \"github\", \"telegram\", \"website\"].some(\n    (key) =>\n      profile.linktree[key] &&\n      typeof profile.linktree[key] === \"string\" &&\n      profile.linktree[key].trim() !== \"\"\n  );\n  if (!hasValidLinktree) {\n    invalidFields.push(\"linktree\");\n  }\n\n  return {\n    isValid: invalidFields.length === 0,\n    invalidFields: invalidFields,\n  };\n}\nconst [isValidProfile, setIsValidProfile] = useState(\n  isProfileValid(initialProfile || {})\n);\n\nfunction handleProfileChange(updatedProfile) {\n  console.log(\"Profile updated:\", updatedProfile);\n  setProfile(updatedProfile);\n}\n\nfunction handleSubmit() {\n  const newValidity = isProfileValid(profile);\n  console.log(\"Is new profile valid?\", newValidity);\n  setIsValidProfile(newValidity.isValid);\n  if (newValidity.isValid) {\n    Near.call([\n      {\n        contractName: \"social.near\",\n        methodName: \"set\",\n        args: {\n          data: { [accountId]: { profile } },\n        },\n        deposit: 4e22,\n        gas: 4e13,\n      },\n      {\n        contractName: contract,\n        methodName: \"verify_social_profile_completeness\",\n        gas: 7e13,\n        deposit: 5e21,\n      },\n    ]);\n  } else {\n    // Update field errors\n    const newFieldErrors = {};\n    newValidity.invalidFields.forEach((field) => {\n      newFieldErrors[field] = true;\n    });\n    setFieldErrors(newFieldErrors);\n    setPrompt(\"Error Messages:\");\n  }\n}\n\nconst Modal = styled.div`\n  display: flex;\n  flex-direction: column;\n  background: white;\n  padding: 25px;\n  max-width: 800px;\n  width: fit-content;\n  border-radius: 10px;\n  white-space: nowrap;\n  text-align: center;\n  position: fixed;\n  left: 50%;\n  top: 50%;\n  z-index: 99999;\n  border-radius: 6px;\n  box-shadow: rgba(14, 18, 22, 0.35) 0px 10px 38px -10px,\n    rgba(14, 18, 22, 0.2) 0px 10px 20px -15px;\n  transform: translate(-50%, -50%);\n  .close-icon {\n    margin-left: auto;\n    margin-bottom: 1rem;\n    cursor: pointer;\n  }\n`;\n\nconst ErrorMessage = styled.div`\n  color: red;\n  font-size: 0.8em;\n  margin-top: 5px;\n`;\n\nfunction renderErrorMessages() {\n  const errorMessages = {\n    name: \"Name is required.\",\n    image: \"Profile picture is required.\",\n    backgroundImage: \"Background image is required.\",\n    description: \"About section is required.\",\n    tags: \"At least one tag is required.\",\n    linktree: \"At least one external profile link is required..\",\n  };\n\n  return Object.keys(fieldErrors)\n    .filter((field) => fieldErrors[field]) // Filter out fields without errors\n    .map((field) => (\n      <ErrorMessage key={field}>{errorMessages[field]}</ErrorMessage>\n    ));\n}\n\nconst completedCheckMsg = (\n  <div>\n    Go to{\" \"}\n    <a href=\"https://app.nada.bot/\" target=\"_blank\">\n      {\" \"}\n      Nada.bot\n    </a>{\" \"}\n    app to verify\n  </div>\n);\nconst isCheckComplete = Near.view(contract, \"has_complete_profile_check\", {\n  account_id: accountId,\n});\nuseEffect(() => {\n  if (isCheckComplete === null) return;\n  else if (isCheckComplete) return setPrompt(completedCheckMsg);\n  else {\n    const newValidity = isProfileValid(profile);\n    if (newValidity.isValid) {\n      Near.call(\n        contract,\n        \"verify_social_profile_completeness\",\n        null,\n        7e13,\n        5e21\n      );\n    } else {\n      // Update field errors\n      const newFieldErrors = {};\n      newValidity.invalidFields.forEach((field) => {\n        newFieldErrors[field] = true;\n      });\n      setFieldErrors(newFieldErrors);\n      setPrompt(\"Error Messages:\");\n    }\n  }\n}, [isCheckComplete]);\nreturn (\n  <div className=\"row\">\n    <div className=\"col-lg-6\">\n      <div>\n        <h4>Edit profile of @{accountId}</h4>\n      </div>\n      <div className=\"mb-2\">\n        <Widget\n          src=\"near/widget/MetadataEditor\"\n          props={{\n            initialMetadata: profile,\n            onChange: handleProfileChange,\n            options: {\n              name: { label: \"Name\" },\n              image: { label: \"Profile picture\" },\n              backgroundImage: { label: \"Background image\" },\n              description: { label: \"About\" },\n              tags: {\n                label: \"Tags\",\n                value: profile.tags,\n                tagsPattern: \"*/profile/tags/*\",\n                placeholder:\n                  \"rust, engineer, artist, humanguild, nft, learner, founder\",\n              },\n              linktree: {\n                links: [\n                  {\n                    label: \"Twitter\",\n                    prefix: \"https://twitter.com/\",\n                    name: \"twitter\",\n                  },\n                  {\n                    label: \"Github\",\n                    prefix: \"https://github.com/\",\n                    name: \"github\",\n                  },\n                  {\n                    label: \"Telegram\",\n                    prefix: \"https://t.me/\",\n                    name: \"telegram\",\n                  },\n                  {\n                    label: \"Website\",\n                    prefix: \"https://\",\n                    name: \"website\",\n                  },\n                ],\n              },\n            },\n          }}\n        />\n      </div>\n      <div className=\"mb-2\">\n        <div className=\"btn btn-primary\" onClick={handleSubmit}>\n          Save & Verify\n        </div>\n\n        <a\n          className=\"btn btn-outline-primary ms-2\"\n          href={`#/mob.near/widget/ProfilePage?accountId=${accountId}`}\n        >\n          View profile\n        </a>\n      </div>\n    </div>\n    <div className=\"col-lg-6\">\n      <div>\n        <Widget\n          src=\"mob.near/widget/ProfilePage\"\n          props={{ accountId, profile: profile }}\n        />\n      </div>\n    </div>\n    {prompt && (\n      <Modal>\n        <div className=\"close-icon\" onClick={() => setPrompt(\"\")}>\n          X\n        </div>\n        <div> {prompt}</div>\n        {Object.keys(fieldErrors).length > 0 && (\n          <div>{renderErrorMessages()}</div>\n        )}\n      </Modal>\n    )}\n  </div>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/socialcheck.near/widget/ProfileCheck", "fact_widget_deployments_id": "4de03e4a20ba4df9f4de15f7646ad432", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}