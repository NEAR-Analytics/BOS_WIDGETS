{"tx_hash": "2NmgsFUZPrK6GGCqxM5Ae8UP29kz1PEKsNqBpPWu4xDb", "action_id_social": "CJkS9gb2ZFnGvfgpxyJ4cExXnEktGVLx4RaEsoFMJFNz-0-widget", "block_id": 119511215, "block_timestamp": "2024-05-22T19:34:59.689Z", "signer_id": "old.potlock.near", "widget_name": "Cart.Checkout", "source_code": "const donationContractId = \"donate.potlock.near\";\nconst IPFS_BASE_URL = \"https://nftstorage.link/ipfs/\";\n// const TRASH_ICON_URL =\n//   IPFS_BASE_URL + \"bafkreifuvrxly3wuy4xdmavmdeb2o47nv6pzxwz3xmy6zvkxv76e55lj3y\";\nconst { getCart, getCartItemCount, removeItemsFromCart } = VM.require(\n  \"old.potlock.near/widget/SDK.cart\"\n) || {\n  getCart: () => {},\n  getCartItemCount: () => 0,\n  removeItemsFromCart: () => {},\n};\nconst numCartItems = getCartItemCount();\nconst cart = getCart();\nconst DEFAULT_GATEWAY = \"https://bos.potlock.org/\";\nconst POTLOCK_TWITTER_ACCOUNT_ID = \"PotLock_\";\nconst DEFAULT_SHARE_HASHTAGS = [\"BOS\", \"PublicGoods\", \"Donations\"];\nconst [projectId, setProjectId] = useState(\"\");\nconst Container = styled.div`\n  background: #fafafa;\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  min-height: 100vh;\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\nconst SuccessContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  //   justify-content: center;\n  width: 100%;\n  padding: 24px;\n  gap: 24px;\n`;\n// const ButtonsContainer = styled.div`\n//   display: flex;\n//   flex-direction: row;\n//   gap: 24px;\n//   width: 50%;\n//   align-items: center;\n//   justify-content: center;\n// `;\nconst ColumnLeft = styled.div`\n  display: flex;\n  flex-direction: column;\n  //   background: #fafafa;\n  width: 55%;\n  //   background: pink;\n  padding: 48px 40px 48px 64px;\n  gap: 48px;\n  @media screen and (max-width: 768px) {\n    width: 100%;\n    padding: 24px 16px 24px 16px;\n  }\n`;\nconst ColumnRight = styled.div`\n  //   background: yellow;\n  flex: 1;\n  padding: 152px 148px 152px 84px;\n  border-left: 1px #c7c7c7 solid;\n  @media screen and (max-width: 768px) {\n    padding: 24px 16px 24px 16px;\n    border-left: none;\n    border-top: 1px #c7c7c7 solid;\n  }\n`;\nconst Title = styled.div`\n  color: #2e2e2e;\n  font-size: 48px;\n  font-family: Lora;\n  font-weight: 500;\n  line-height: 56px;\n  word-wrap: break-word;\n  text-align: center;\n`;\nconst Icon = styled.svg`\n  width: 1rem;\n  height: 1rem;\n  path {\n    transition: 300ms;\n  }\n`;\nconst ActionsContainer = styled.div`\n  width: 100%;\n  padding: 16px;\n  background: white;\n  border: 1px solid #dbdbdb;\n  box-shadow: 0px -2px 0px #dbdbdb inset;\n  border-radius: 6px;\n  overflow: hidden;\n  justify-content: flex-start;\n  align-items: center;\n  display: inline-flex;\n  gap: 24px;\n`;\nconst InnerContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  gap: 6px;\n  :hover path {\n    fill: #dd3345;\n  }\n`;\nconst SubTitle = styled.div`\n  color: #2e2e2e;\n  font-weight: 600;\n  font-size: 14px;\n`;\nconst TxLink = styled.a`\n  color: #2e2e2e;\n  cursor: pointer;\n  &:hover {\n    text-decoration: none;\n  }\n`;\nState.init({\n  selectedProjectIds: [],\n  masterSelectorSelected: false,\n  successfulDonationRecipientId: null,\n  successfulDonationsRecipientProfiles: null,\n});\nconst allSelected =\n  state.selectedProjectIds.length !== 0 &&\n  state.selectedProjectIds.length === numCartItems;\nif (props.transactionHashes && !state.successfulDonationsRecipientProfiles) {\n  // handles the case where the user is redirected from the wallet after a successful donation\n  const transactionHashes = props.transactionHashes.split(\",\");\n  for (let i = 0; i < transactionHashes.length; i++) {\n    const txHash = transactionHashes[i];\n    const body = JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"tx\",\n      params: [txHash, context.accountId],\n    });\n    const res = fetch(\"https://rpc.mainnet.near.org\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body,\n    });\n    if (res.ok) {\n      const methodName =\n        res.body.result.transaction.actions[0].FunctionCall.method_name;\n      const successVal = res.body.result.status?.SuccessValue;\n      const result = JSON.parse(\n        Buffer.from(successVal, \"base64\").toString(\"utf-8\")\n      ); // atob not working\n      const args = JSON.parse(\n        Buffer.from(\n          res.body.result.transaction.actions[0].FunctionCall.args,\n          \"base64\"\n        ).toString(\"utf-8\")\n      );\n      const recipientId =\n        methodName === \"donate\"\n          ? result.recipient_id\n          : methodName === \"ft_transfer_call\"\n          ? JSON.parse(args.msg).recipient_id\n          : \"\";\n      if (recipientId) {\n        Near.asyncView(\"social.near\", \"get\", {\n          keys: [`${recipientId}/profile/**`],\n        }).then((socialData) => {\n          State.update({\n            successfulDonationsRecipientProfiles: {\n              ...state.successfulDonationsRecipientProfiles,\n              [recipientId]: socialData[recipientId][\"profile\"],\n            },\n          });\n        });\n      }\n    }\n  }\n}\nuseEffect(() => {\n  // handles extension wallet case, where user is not redirected (therefore no props.transactionHashes)\n  if (\n    state.successfulDonationRecipientId &&\n    !state.successfulDonationsRecipientProfiles\n  ) {\n    Near.asyncView(\"social.near\", \"get\", {\n      keys: [`${state.successfulDonationRecipientId}/profile/**`],\n    }).then((socialData) => {\n      State.update({\n        successfulDonationsRecipientProfiles: {\n          // don't spread the existing state, as it may be null\n          [state.successfulDonationRecipientId]:\n            socialData[state.successfulDonationRecipientId][\"profile\"],\n        },\n      });\n    });\n  }\n}, [\n  state.successfulDonationRecipientId,\n  state.successfulDonationsRecipientProfiles,\n]);\nconst twitterIntent = useMemo(() => {\n  if (!state.successfulDonationsRecipientProfiles) return;\n  const recipientIds = Object.keys(state.successfulDonationsRecipientProfiles);\n  const twitterIntentBase = \"https://twitter.com/intent/tweet?text=\";\n  // if more than one recipient, share the Explore Projects page; otherwise, share the project page\n  let url =\n    DEFAULT_GATEWAY +\n    `old.potlock.near/widget/Index?referrerId=${context.accountId}`;\n  if (recipientIds.length === 1) {\n    url = url + `&tab=project&projectId=${recipientIds[0]}`;\n  } else {\n    url = url + `&tab=projects`;\n  }\n  // Initialize an empty array to hold the recipient profiles along with their identifiers\n  const recipientProfiles = [];\n  // Iterate over each entry in the successfulDonationsRecipientProfiles object\n  for (const [recipientId, profile] of Object.entries(\n    state.successfulDonationsRecipientProfiles\n  )) {\n    // Determine the identifier to use: Twitter handle, name, or recipient ID\n    const identifier = profile.linktree?.twitter\n      ? `@${profile.linktree.twitter}`\n      : profile.name\n      ? profile.name\n      : recipientId;\n    // Add the profile and its identifier to the array\n    recipientProfiles.push({\n      identifier,\n      hasTwitter: !!profile.linktree?.twitter,\n    });\n  }\n  // Sort the recipientProfiles array to put ones with Twitter handles first\n  recipientProfiles.sort((a, b) => {\n    if (a.hasTwitter && !b.hasTwitter) return -1;\n    if (!a.hasTwitter && b.hasTwitter) return 1;\n    return 0;\n  });\n  // Extract the identifiers from the sorted array\n  const sortedIdentifiers = recipientProfiles.map(\n    (profile) => profile.identifier\n  );\n  // Join the sorted recipient identifiers with \" & \" to create a single string\n  const recipientsText = sortedIdentifiers.join(\" & \");\n  let text = `I just donated to ${recipientsText} on @${POTLOCK_TWITTER_ACCOUNT_ID}! Support public goods at `;\n  text = encodeURIComponent(text);\n  url = encodeURIComponent(url);\n  return (\n    twitterIntentBase +\n    text +\n    `&url=${url}` +\n    `&hashtags=${DEFAULT_SHARE_HASHTAGS.join(\",\")}`\n  );\n}, [state.successfulDonationsRecipientProfiles]);\nreturn (\n  // <div>\n  <Container>\n    {props.transactionHashes || state.successfulDonationRecipientId ? (\n      <SuccessContainer>\n        <Title>Thanks for donating!</Title>\n        {twitterIntent && (\n          <Widget\n            src={\"old.potlock.near/widget/Components.Button\"}\n            props={{\n              href: twitterIntent,\n              target: \"_blank\",\n              type: \"primary\",\n              text: \"Share to Twitter\",\n              disabled: !twitterIntent,\n              style: {\n                width: \"300px\",\n              },\n            }}\n          />\n        )}\n        <Widget\n          src={\"old.potlock.near/widget/Components.Button\"}\n          props={{\n            href: props.hrefWithParams(`?tab=projects`),\n            type: twitterIntent ? \"secondary\" : \"primary\",\n            text: \"Explore projects\",\n            style: {\n              width: \"300px\",\n            },\n          }}\n        />\n        {/* {twitterIntent && props.checkoutSuccessTxHash ? (\n          <TxLink\n            target=\"_blank\"\n            href={`https://nearblocks.io/txns/${props.checkoutSuccessTxHash}`}\n          >\n            View transaction\n          </TxLink>\n        ) : (\n          props.checkoutSuccessTxHash && (\n            <Widget\n              src={\"old.potlock.near/widget/Components.Button\"}\n              props={{\n                href: `https://nearblocks.io/txns/${props.checkoutSuccessTxHash}`,\n                target: \"_blank\",\n                type: \"secondary\",\n                text: \"View transaction\",\n                disabled: !props.checkoutSuccessTxHash,\n                style: {\n                  width: \"300px\",\n                },\n              }}\n            />\n          )\n        )} */}\n      </SuccessContainer>\n    ) : (\n      <>\n        <ColumnLeft>\n          <Title>Donation Cart</Title>\n          <ActionsContainer>\n            <InnerContainer>\n              <Widget\n                src={\"old.potlock.near/widget/Inputs.Checkbox\"}\n                props={{\n                  id: \"masterSelector\",\n                  disabled: numCartItems === 0,\n                  checked: state.masterSelectorSelected,\n                  onClick: (e) => {\n                    // if allSelected, then deselect all\n                    // if not allSelected, then select all\n                    const selectedProjectIds = Object.keys(cart).filter((_) => {\n                      if (allSelected) {\n                        return false;\n                      }\n                      return true;\n                    });\n                    State.update({\n                      selectedProjectIds,\n                      masterSelectorSelected: !allSelected,\n                    });\n                  },\n                }}\n              />\n              <SubTitle>Select all</SubTitle>\n            </InnerContainer>\n            <InnerContainer\n              style={{ cursor: \"pointer\" }}\n              onClick={() => {\n                // doesn't do anything if nothing selected\n                if (state.selectedProjectIds.length === 0) return;\n                // delete selected projects\n                removeItemsFromCart(\n                  state.selectedProjectIds.map((id) => ({ id }))\n                );\n                // uncheck box\n                State.update({\n                  selectedProjectIds: [],\n                  masterSelectorSelected: false,\n                });\n              }}\n            >\n              <Icon\n                viewBox=\"0 0 12 14\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  d=\"M2.5 14C2.0875 14 1.73437 13.8531 1.44062 13.5594C1.14687 13.2656 1 12.9125 1 12.5V2.5H0V1H4V0H8V1H12V2.5H11V12.491C11 12.9137 10.8531 13.2708 10.5594 13.5625C10.2656 13.8542 9.9125 14 9.5 14H2.5ZM9.5 2.5H2.5V12.5H9.5V2.5ZM4 11H5.5V4H4V11ZM6.5 11H8V4H6.5V11Z\"\n                  fill=\"#7B7B7B\"\n                />\n              </Icon>\n              <SubTitle>Delete</SubTitle>\n            </InnerContainer>\n          </ActionsContainer>\n          {numCartItems === 0 ? (\n            <div>No items in cart</div>\n          ) : (\n            Object.keys(cart).map((projectId) => {\n              // setProjectId(projectId); // wtf is this?? commenting out\n              const checked = state.selectedProjectIds.includes(projectId);\n              return (\n                <Widget\n                  src={\"old.potlock.near/widget/Cart.CheckoutItem\"}\n                  props={{\n                    ...props,\n                    cartItem: cart[projectId],\n                    checked,\n                    handleCheckboxClick: (e) => {\n                      // if selected, then deselect\n                      // else, select\n                      let selectedProjectIds = state.selectedProjectIds;\n                      if (checked) {\n                        selectedProjectIds = selectedProjectIds.filter(\n                          (id) => id !== projectId\n                        );\n                      } else {\n                        selectedProjectIds.push(projectId);\n                      }\n                      const updatedState = {\n                        selectedProjectIds,\n                      };\n                      if (\n                        selectedProjectIds.length !== 0 &&\n                        selectedProjectIds.length !== numCartItems\n                      ) {\n                        updatedState.masterSelectorSelected = false;\n                      }\n                      State.update(updatedState);\n                    },\n                  }}\n                />\n              );\n            })\n          )}\n        </ColumnLeft>\n        <ColumnRight>\n          <Widget\n            src={\"old.potlock.near/widget/Cart.CheckoutBreakdown\"}\n            props={{\n              ...props,\n              projectId: projectId,\n              updateSuccessfulDonationRecipientId: (recipientId) =>\n                State.update({ successfulDonationRecipientId: recipientId }),\n            }}\n          />\n        </ColumnRight>\n      </>\n    )}\n  </Container>\n  // </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/old.potlock.near/widget/Cart.Checkout", "fact_widget_deployments_id": "08954b57be2c348edc573a679b77fed2", "inserted_timestamp": "2024-05-22T20:51:25.115Z", "modified_timestamp": "2024-05-22T21:51:10.417Z", "__row_index": 0}