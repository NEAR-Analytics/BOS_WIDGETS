{"tx_hash": "2NmgsFUZPrK6GGCqxM5Ae8UP29kz1PEKsNqBpPWu4xDb", "action_id_social": "CJkS9gb2ZFnGvfgpxyJ4cExXnEktGVLx4RaEsoFMJFNz-0-widget", "block_id": 119511215, "block_timestamp": "2024-05-22T19:34:59.689Z", "signer_id": "old.potlock.near", "widget_name": "Pots.FundModal", "source_code": "const { isMatchingPoolModalOpen, onClose, potDetail, referrerId, potId } =\n  props;\nconst {\n  protocol_config_provider,\n  chef_fee_basis_points,\n  chef,\n  base_currency,\n  min_matching_pool_donation_amount,\n  referral_fee_matching_pool_basis_points,\n} = potDetail;\nState.init({\n  matchingPoolDonationAmountNear: \"\",\n  matchingPoolDonationAmountNearError: \"\",\n  matchingPoolDonationMessage: \"\",\n  matchingPoolDonationMessageError: \"\",\n  bypassProtocolFee: false,\n  bypassChefFee: false,\n  fundAsDao: false,\n  daoAddress: \"\",\n  daoAddressError: \"\",\n  daoPolicy: {},\n});\nconst {\n  matchingPoolDonationAmountNear,\n  matchingPoolDonationAmountNearError,\n  matchingPoolDonationMessage,\n  matchingPoolDonationMessageError,\n  bypassProtocolFee,\n  bypassChefFee,\n  fundAsDao,\n  daoAddress,\n  daoAddressError,\n} = state;\nconst { yoctosToNear, doesUserHaveDaoFunctionCallProposalPermissions } =\n  VM.require(\"old.potlock.near/widget/utils\") || {\n    yoctosToNear: () => \"\",\n    doesUserHaveDaoFunctionCallProposalPermissions: () => \"\",\n  };\nconst { _address } = VM.require(\n  \"old.potlock.near/widget/Components.DonorsUtils\"\n) || {\n  _address: () => \"\",\n};\nconst { MAX_DONATION_MESSAGE_LENGTH, SUPPORTED_FTS, ONE_TGAS } = VM.require(\n  \"old.potlock.near/widget/constants\"\n) || {\n  ONE_TGAS: 0,\n  MAX_DONATION_MESSAGE_LENGTH: 0,\n  SUPPORTED_FTS: {},\n};\nBig.PE = 100;\nconst FIFTY_TGAS = \"50000000000000\";\nconst THREE_HUNDRED_TGAS = \"300000000000000\";\nconst MIN_DAO_PROPOSAL_DEPOSIT_FALLBACK = \"100000000000000000000000\"; // 0.1N\nconst protocolConfigContractId = protocol_config_provider.split(\":\")[0];\nconst protocolConfigViewMethodName = protocol_config_provider.split(\":\")[1];\nconst protocolConfig = Near.view(\n  protocolConfigContractId,\n  protocolConfigViewMethodName,\n  {}\n);\nconst protocolFeeRecipientProfile = Social.getr(\n  `${protocolConfig?.account_id}/profile`\n);\nconst chefProfile = Social.getr(`${chef}/profile`);\nconst chefFeeAmountNear = bypassChefFee\n  ? 0\n  : (matchingPoolDonationAmountNear * potDetail?.chef_fee_basis_points) /\n      10_000 || 0;\nconst protocolFeeAmountNear = bypassProtocolFee\n  ? 0\n  : (matchingPoolDonationAmountNear * protocolConfig?.basis_points) / 10_000 ||\n    0;\nconst referrerFeeAmountNear = referrerId\n  ? (matchingPoolDonationAmountNear * referral_fee_matching_pool_basis_points) /\n      10_000 || 0\n  : 0;\nconst handleMatchingPoolDonation = () => {\n  const args = {\n    message: matchingPoolDonationMessage,\n    matching_pool: true,\n    referrer_id: referrerId || null,\n    bypass_protocol_fee: bypassProtocolFee,\n  };\n  if (state.bypassChefFee) {\n    args.custom_chef_fee_basis_points = 0;\n  }\n  const amountFloat = parseFloat(matchingPoolDonationAmountNear || 0);\n  if (!amountFloat) {\n    State.update({ matchingPoolDonationAmountNearError: \"Invalid amount\" });\n    return;\n  }\n  const amountIndivisible =\n    SUPPORTED_FTS[base_currency.toUpperCase()].toIndivisible(amountFloat);\n  const transactions = [\n    {\n      contractName: potId,\n      methodName: \"donate\",\n      deposit: amountIndivisible,\n      args,\n      gas: ONE_TGAS.mul(100),\n    },\n  ];\n  // if it is a DAO, we need to convert transactions to DAO function call proposals\n  if (state.fundAsDao) {\n    const clonedTransactions = JSON.parse(JSON.stringify(transactions));\n    transactions = clonedTransactions.map((tx) => {\n      const action = {\n        method_name: tx.methodName,\n        gas: FIFTY_TGAS,\n        deposit: tx.deposit ? tx.deposit.toString() : \"0\",\n        args: Buffer.from(JSON.stringify(tx.args), \"utf-8\").toString(\"base64\"),\n      };\n      return {\n        ...tx,\n        contractName: state.daoAddress,\n        methodName: \"add_proposal\",\n        args: {\n          proposal: {\n            description: `Contribute to matching pool for ${potDetail.pot_name} pot (${potId}) on Potlock`,\n            kind: {\n              FunctionCall: {\n                receiver_id: tx.contractName,\n                actions: [action],\n              },\n            },\n          },\n        },\n        deposit:\n          state.daoPolicy.proposal_bond || MIN_DAO_PROPOSAL_DEPOSIT_FALLBACK,\n        gas: THREE_HUNDRED_TGAS,\n      };\n    });\n  }\n  Near.call(transactions);\n  // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n  // <---- EXTENSION WALLET HANDLING ----> // TODO: implement\n};\nconst ModalTitle = styled.div`\n  color: #525252;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 20px;\n  word-wrap: break-word;\n  margin: 8px 0px;\n`;\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n`;\nconst UserChipLink = styled.a`\n  display: flex;\n  flex-direction: row;\n  margin: 0px 4px;\n  margin-left: auto;\n  padding: 2px 12px;\n  gap: 4px;\n  border-radius: 32px;\n  background: #ebebeb;\n  &:hover {\n    text-decoration: none;\n  }\n`;\nconst TextBold = styled.div`\n  color: #292929;\n  font-size: 12px;\n  font-weight: 600;\n  line-height: 20px;\n  word-wrap: break-word;\n  text-align: center;\n`;\nconst FeeText = styled.div`\n  color: #292929;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 20px;\n  word-wrap: break-word;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\nconst Label = styled.label`\n  width: 100%;\n  font-size: 12px;\n  line-height: 16px;\n  word-wrap: break-word;\n  color: #2e2e2e;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\nconsole.log(protocolFeeRecipientProfile);\nreturn (\n  <Widget\n    src={\"old.potlock.near/widget/Components.Modal\"}\n    props={{\n      ...props,\n      isModalOpen: isMatchingPoolModalOpen,\n      onClose,\n      children: (\n        <>\n          <Widget\n            src={\"old.potlock.near/widget/Inputs.Checkbox\"}\n            props={{\n              id: \"fundAsDaoSelector\",\n              label: \"Fund as DAO\",\n              checked: fundAsDao,\n              onClick: (e) => {\n                State.update({ fundAsDao: e.target.checked });\n              },\n            }}\n          />\n          {fundAsDao && (\n            <Widget\n              src={\"old.potlock.near/widget/Inputs.Text\"}\n              props={{\n                inputStyle: {\n                  background: \"#FAFAFA\",\n                },\n                placeholder: \"Enter DAO address\",\n                value: daoAddress,\n                onChange: (daoAddress) =>\n                  State.update({\n                    daoAddress: daoAddress.trim().toLowerCase(),\n                  }),\n                validate: () => {\n                  Near.asyncView(daoAddress, \"get_policy\", {})\n                    .then((policy) => {\n                      if (!policy) {\n                        State.update({\n                          daoAddressError: \"Invalid DAO address\",\n                        });\n                      }\n                      if (\n                        !doesUserHaveDaoFunctionCallProposalPermissions(\n                          context.accountId,\n                          policy\n                        )\n                      ) {\n                        State.update({\n                          daoAddressError:\n                            \"Your account does not have permission to create proposals\",\n                        });\n                      } else {\n                        State.update({\n                          daoAddressError: \"\",\n                          daoPolicy: policy,\n                        });\n                      }\n                    })\n                    .catch((e) => {\n                      State.update({ daoAddressError: \"Invalid DAO address\" });\n                    });\n                },\n                error: daoAddressError,\n              }}\n            />\n          )}\n          <ModalTitle>\n            Enter matching pool contribution amount in NEAR\n            {[\"0\", \"1\"].includes(min_matching_pool_donation_amount)\n              ? \"(no minimum)\"\n              : `(Min. ${yoctosToNear(min_matching_pool_donation_amount)})`}\n          </ModalTitle>\n          <Widget\n            src={\"old.potlock.near/widget/Inputs.Text\"}\n            props={{\n              inputStyle: {\n                background: \"#FAFAFA\",\n              },\n              placeholder: \"Enter amount here in NEAR\",\n              value: matchingPoolDonationAmountNear,\n              onChange: (matchingPoolDonationAmountNear) =>\n                State.update({\n                  matchingPoolDonationAmountNear,\n                }),\n              validate: () => {\n                // TODO: add validation logic here\n                State.update({ matchingPoolDonationAmountNearError: \"\" });\n              },\n              error: matchingPoolDonationAmountNearError,\n            }}\n          />\n          <Widget\n            src={\"old.potlock.near/widget/Inputs.TextArea\"}\n            props={{\n              noLabel: true,\n              inputRows: 5,\n              inputStyle: {\n                background: \"#FAFAFA\",\n              },\n              placeholder: \"Enter an optional message\",\n              value: matchingPoolDonationMessage,\n              onChange: (matchingPoolDonationMessage) =>\n                State.update({ matchingPoolDonationMessage }),\n              validate: () => {\n                if (\n                  matchingPoolDonationMessage.length >\n                  MAX_DONATION_MESSAGE_LENGTH\n                ) {\n                  State.update({\n                    matchingPoolDonationMessageError: `Message must be less than ${MAX_DONATION_MESSAGE_LENGTH} characters`,\n                  });\n                  return;\n                }\n                State.update({ matchingPoolDonationMessageError: \"\" });\n              },\n              error: matchingPoolDonationMessageError,\n            }}\n          />\n          <Row>\n            <Widget\n              src={\"old.potlock.near/widget/Inputs.Checkbox\"}\n              props={{\n                id: \"bypassProtocolFeeSelector\",\n                checked: bypassProtocolFee,\n                onClick: (e) => {\n                  State.update({ bypassProtocolFee: e.target.checked });\n                },\n              }}\n            />\n            <Label htmlFor=\"bypassProtocolFeeSelector\">\n              Bypass {protocolConfig?.basis_points / 100 || \"-\"}% protocol fee\n              to{\" \"}\n              <UserChipLink\n                href={`https://near.social/mob.near/widget/ProfilePage?accountId=${protocolConfig?.account_id}`}\n                target=\"_blank\"\n              >\n                <Widget\n                  src={\"old.potlock.near/widget/Project.ProfileImage\"}\n                  props={{\n                    ...props,\n                    accountId: protocolConfig?.account_id,\n                    style: {\n                      height: \"12px\",\n                      width: \"12px\",\n                    },\n                  }}\n                />\n                <TextBold>\n                  {_address(\n                    protocolFeeRecipientProfile?.name ||\n                      protocolConfig?.account_id\n                  )}\n                </TextBold>\n              </UserChipLink>\n            </Label>\n          </Row>\n          {chef && chef_fee_basis_points > 0 && (\n            <Row style={{ marginTop: \"6px\" }}>\n              <Widget\n                src={\"old.potlock.near/widget/Inputs.Checkbox\"}\n                props={{\n                  id: \"bypassChefFeeSelector\",\n                  checked: bypassChefFee,\n                  onClick: (e) => {\n                    State.update({ bypassChefFee: e.target.checked });\n                  },\n                }}\n              />\n              <Label htmlFor=\"bypassChefFeeSelector\">\n                Bypass {chef_fee_basis_points / 100 || \"-\"}% chef fee to\n                <UserChipLink\n                  href={`https://near.social/mob.near/widget/ProfilePage?accountId=${chef}`}\n                  target=\"_blank\"\n                >\n                  <Widget\n                    src={\"old.potlock.near/widget/Project.ProfileImage\"}\n                    props={{\n                      ...props,\n                      accountId: chef,\n                      style: {\n                        height: \"12px\",\n                        width: \"12px\",\n                      },\n                    }}\n                  />\n                  <TextBold>{chefProfile?.name || chef}</TextBold>\n                </UserChipLink>\n              </Label>\n            </Row>\n          )}\n          <Row style={{ marginTop: \"12px\" }}>\n            <FeeText>Protocol fee: {protocolFeeAmountNear} NEAR</FeeText>\n          </Row>\n          {chef && chef_fee_basis_points > 0 && (\n            <Row style={{ marginTop: \"12px\" }}>\n              <FeeText>Chef fee: {chefFeeAmountNear} NEAR</FeeText>\n            </Row>\n          )}\n          <Row style={{ marginTop: \"6px\" }}>\n            {referrerId && (\n              <FeeText>\n                Referrer fee (to {referrerId}): {referrerFeeAmountNear} NEAR\n              </FeeText>\n            )}\n          </Row>\n          <Row style={{ marginTop: \"6px\" }}>\n            <FeeText>\n              Net donation amount:{\" \"}\n              {matchingPoolDonationAmountNear -\n                protocolFeeAmountNear -\n                chefFeeAmountNear -\n                referrerFeeAmountNear}{\" \"}\n              NEAR\n            </FeeText>\n          </Row>\n          <Row style={{ justifyContent: \"flex-end\", marginTop: \"12px\" }}>\n            <Widget\n              src={\"old.potlock.near/widget/Components.Button\"}\n              props={{\n                type: \"primary\",\n                disabled:\n                  daoAddressError ||\n                  !matchingPoolDonationAmountNear ||\n                  !!matchingPoolDonationAmountNearError ||\n                  !parseFloat(matchingPoolDonationAmountNear),\n                text: `${\n                  fundAsDao ? \"Create proposal to contribute \" : \"Contribute\"\n                }${\n                  matchingPoolDonationAmountNear\n                    ? ` ${matchingPoolDonationAmountNear} ${base_currency.toUpperCase()}`\n                    : \"\"\n                } to matching pool`,\n                onClick: handleMatchingPoolDonation,\n              }}\n            />\n          </Row>\n        </>\n      ),\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/old.potlock.near/widget/Pots.FundModal", "fact_widget_deployments_id": "f58b40a651db2dc1a4af02cc4cae7e73", "inserted_timestamp": "2024-05-22T20:51:25.115Z", "modified_timestamp": "2024-05-22T21:51:10.417Z", "__row_index": 1}