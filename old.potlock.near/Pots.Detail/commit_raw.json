{"tx_hash": "2NmgsFUZPrK6GGCqxM5Ae8UP29kz1PEKsNqBpPWu4xDb", "action_id_social": "CJkS9gb2ZFnGvfgpxyJ4cExXnEktGVLx4RaEsoFMJFNz-0-widget", "block_id": 119511215, "block_timestamp": "2024-05-22T19:34:59.689Z", "signer_id": "old.potlock.near", "widget_name": "Pots.Detail", "source_code": "const { potId } = props;\nconst { doesUserHaveDaoFunctionCallProposalPermissions } = VM.require(\n  \"old.potlock.near/widget/utils\"\n) || { doesUserHaveDaoFunctionCallProposalPermissions: () => \"\" };\nconst {\n  ONE_TGAS,\n  SUPPORTED_FTS: { NEAR },\n} = VM.require(\"old.potlock.near/widget/constants\") || {\n  ONE_TGAS: 0,\n  SUPPORTED_FTS: {},\n};\nconst PotSDK = VM.require(\"old.potlock.near/widget/SDK.pot\") || {\n  getConfig: () => {},\n  asyncGetApplications: () => {},\n  asyncGetPublicRoundDonations: () => {},\n};\nconst potDetail = PotSDK.getConfig(potId);\nconst MAX_APPLICATION_MESSAGE_LENGTH = 1000;\nBig.PE = 100;\nconst FIFTY_TGAS = \"50000000000000\";\nconst THREE_HUNDRED_TGAS = \"300000000000000\";\nconst MIN_PROPOSAL_DEPOSIT_FALLBACK = \"100000000000000000000000\"; // 0.1N\nconst Wrapper = styled.div``;\nconst SidebarContainer = styled.div`\n  width: 25%;\n  // width: 500px;\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\nconst Container = styled.div`\n  padding: 0px 68px;\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n    width: 100%;\n    padding: 0;\n  }\n`;\nconst ContainerInner = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 68px 0px;\n`;\nconst BodyContainer = styled.div`\n  margin-top: 52px;\n  padding: 0 4rem;\n  flex: 1;\n  width: 100%;\n  @media screen and (max-width: 768px) {\n    padding: 0;\n  }\n`;\nconst Divider = styled.div`\n  height: 1px;\n  width: 100%;\n  background-color: #292929;\n`;\nconst ModalTitle = styled.div`\n  color: #525252;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 20px;\n  word-wrap: break-word;\n  margin-bottom: 8px;\n`;\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\nState.init({\n  isApplicationModalOpen: false,\n  applicationMessage: \"\",\n  applicationMessageError: \"\",\n  applicationSuccess: false,\n  isDao: false,\n  daoAddress: \"\",\n  daoAddressError: \"\",\n  daoPolicy: null,\n  registryStatus: null,\n});\n// if (state.sybilRequirementMet === null) {\n//   if (potDetail.sybil_wrapper_provider) {\n//     const [contractId, methodName] = potDetail.sybil_wrapper_provider.split(\":\");\n//     Near.asyncView(contractId, methodName, { account_id: context.accountId })\n//       .then((result) => {\n//         State.update({ sybilRequirementMet: result });\n//       })\n//       .catch((e) => {\n//         State.update({ sybilRequirementMet: false });\n//       });\n//   } else {\n//     State.update({ sybilRequirementMet: true });\n//   }\n// }\nconst noPot = potDetail === undefined;\nconst loading = potDetail === null;\nif (loading) return <div class=\"spinner-border text-secondary\" role=\"status\" />;\nif (noPot) return \"No pot found\";\nconst now = Date.now();\nconst applicationNotStarted = now < potDetail.application_start_ms;\nconst applicationOpen =\n  now >= potDetail.application_start_ms && now < potDetail.application_end_ms;\nconst publicRoundOpen =\n  now >= potDetail.public_round_start_ms && now < potDetail.public_round_end_ms;\nconst publicRoundClosed = now >= potDetail.public_round_end_ms;\nconst payoutsPending = publicRoundClosed && !potDetail.cooldown_end_ms;\n// these will be passed down to child components\nprops.navOptions = [\n  {\n    label: \"Projects\",\n    id: \"projects\",\n    disabled: false,\n    source: \"old.potlock.near/widget/Pots.Projects\",\n    href: props.hrefWithParams(`?tab=pot&potId=${potId}&nav=projects`),\n  },\n  {\n    label: \"Applications\",\n    id: \"applications\",\n    disabled: false,\n    source: \"old.potlock.near/widget/Pots.Applications\",\n    href: props.hrefWithParams(`?tab=pot&potId=${potId}&nav=applications`),\n  },\n  {\n    label: \"Donations\",\n    id: \"donations\",\n    disabled: false,\n    source: \"old.potlock.near/widget/Pots.Donations\",\n    href: props.hrefWithParams(`?tab=pot&potId=${potId}&nav=donations`),\n  },\n  {\n    label: \"Sponsors\",\n    id: \"sponsors\",\n    disabled: false,\n    source: \"old.potlock.near/widget/Pots.Sponsors\",\n    href: props.hrefWithParams(`?tab=pot&potId=${potId}&nav=sponsors`),\n  },\n  {\n    label: \"Payouts\",\n    id: \"payouts\",\n    disabled: now < potDetail.public_round_start_ms, // TODO: ADD BACK IN\n    source: \"old.potlock.near/widget/Pots.Payouts\",\n    href: props.hrefWithParams(`?tab=pot&potId=${potId}&nav=payouts`),\n  },\n  {\n    label: \"Settings\",\n    id: \"settings\",\n    disabled: false,\n    source: \"old.potlock.near/widget/Pots.Settings\",\n    href: props.hrefWithParams(`?tab=pot&potId=${potId}&nav=settings`),\n  },\n];\nif (!props.nav) {\n  let nav;\n  applicationNotStarted\n    ? (nav = \"sponsors\")\n    : applicationOpen\n    ? (nav = \"applications\")\n    : publicRoundOpen\n    ? (nav = \"projects\")\n    : !payoutsPending\n    ? (nav = \"donations\")\n    : (nav = \"payouts\");\n  props.nav = nav;\n} // default to home tab\n// const imageHeightPx = 120;\n// const profileImageTranslateYPx = 220;\nconst handleSendApplication = () => {\n  const args = {\n    message: state.applicationMessage,\n  };\n  let deposit = NEAR.toIndivisible(\"0.01\");\n  const extraDeposit = Big(state.applicationMessage.length * 0.0001).mul(\n    Big(10).pow(24)\n  );\n  deposit = deposit.plus(extraDeposit);\n  const transactions = [\n    {\n      contractName: potId,\n      methodName: \"apply\",\n      deposit,\n      args,\n      gas: ONE_TGAS.mul(100),\n    },\n  ];\n  // if it is a DAO, we need to convert transactions to DAO function call proposals\n  if (state.isDao) {\n    const clonedTransactions = JSON.parse(JSON.stringify(transactions));\n    transactions = clonedTransactions.map((tx) => {\n      const action = {\n        method_name: tx.methodName,\n        gas: FIFTY_TGAS,\n        deposit: tx.deposit ? tx.deposit.toString() : \"0\",\n        args: Buffer.from(JSON.stringify(tx.args), \"utf-8\").toString(\"base64\"),\n      };\n      return {\n        ...tx,\n        contractName: state.daoAddress,\n        methodName: \"add_proposal\",\n        args: {\n          proposal: {\n            description: `Application to PotLock pot: ${potDetail.pot_name} (${potId})`,\n            kind: {\n              FunctionCall: {\n                receiver_id: tx.contractName,\n                actions: [action],\n              },\n            },\n          },\n        },\n        deposit: state.daoPolicy.proposal_bond || MIN_PROPOSAL_DEPOSIT_FALLBACK,\n        gas: THREE_HUNDRED_TGAS,\n      };\n    });\n  }\n  Near.call(transactions);\n  // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n  // <---- EXTENSION WALLET HANDLING ---->\n  // poll for updates\n  const pollIntervalMs = 1000;\n  // const totalPollTimeMs = 60000; // consider adding in to make sure interval doesn't run indefinitely\n  const pollId = setInterval(() => {\n    PotSDK.asyncGetApplications(potId).then((applications) => {\n      const application = applications.find(\n        (application) =>\n          application.project_id ===\n          (state.isDao ? state.daoAddress : context.accountId)\n      );\n      if (application) {\n        clearInterval(pollId);\n        State.update({ applicationSuccess: true });\n      }\n    });\n  }, pollIntervalMs);\n};\nconst verifyIsOnRegistry = (address) => {\n  Near.asyncView(\"lists.potlock.near\", \"get_registrations_for_registrant\", {\n    registrant_id: address,\n  }).then((registrations) => {\n    const registration = registrations.find(\n      (registration) => registration.list_id === 1 // potlock registry list id\n    );\n    if (registration) {\n      State.update({ registryStatus: registration.status });\n    }\n  });\n};\nuseEffect(() => {\n  if (!state.isDao) {\n    verifyIsOnRegistry(context.accountId || \"\");\n  }\n}, []);\n// const registryRequirementMet = state.isOnRegistry || !potDetail.registry_provider;\nconst registrationApproved = state.registryStatus === \"Approved\";\nconst registrationNotApproved =\n  state.registryStatus && state.registryStatus !== \"Approved\";\nconst registrationApprovedOrNoRegistryProvider =\n  registrationApproved || !potDetail?.registry_provider;\nconst isError = state.applicationMessageError || state.daoAddressError;\n// Get total public donations\nconst allDonationsPaginated = useCache(() => {\n  const limit = 480; // number of donations to fetch per req\n  const donationsCount = potDetail.public_donations_count;\n  const paginations = [\n    ...Array(\n      parseInt(donationsCount / limit) + (donationsCount % limit > 0 ? 1 : 0)\n    ).keys(),\n  ];\n  try {\n    const allDonations = paginations.map((index) =>\n      PotSDK.asyncGetPublicRoundDonations(potId, {\n        from_index: index * limit,\n        limit: limit,\n      })\n    );\n    return Promise.all(allDonations);\n  } catch (error) {\n    console.error(\n      `error getting public donations from ${index} to ${index * limit}`,\n      error\n    );\n  }\n}, \"pot-public-donations\");\nconst allDonations = allDonationsPaginated\n  ? allDonationsPaginated.flat()\n  : null;\nreturn (\n  <Wrapper>\n    <Widget\n      src={\"old.potlock.near/widget/Pots.HeaderStatus\"}\n      props={{\n        ...props,\n        potDetail: potDetail,\n      }}\n    />\n    <Widget\n      src={\"old.potlock.near/widget/Pots.Header\"}\n      props={{\n        ...props,\n        potDetail: potDetail,\n        setApplicationModalOpen: (isOpen) =>\n          State.update({ isApplicationModalOpen: isOpen }),\n        applicationSuccess: state.applicationSuccess,\n        registrationApproved,\n        allDonations,\n        registryStatus: state.registryStatus,\n      }}\n    />\n    <Widget\n      src={\"old.potlock.near/widget/Profile.Tabs\"}\n      props={{\n        ...props,\n      }}\n    />\n    <BodyContainer>\n      <Widget\n        src={props.navOptions.find((option) => option.id == props.nav).source}\n        props={{\n          ...props,\n          potDetail: potDetail,\n          allDonations,\n        }}\n      />\n    </BodyContainer>\n    <Widget\n      src={\"old.potlock.near/widget/Components.Modal\"}\n      props={{\n        ...props,\n        isModalOpen: state.isApplicationModalOpen,\n        onClose: () => State.update({ isApplicationModalOpen: false }),\n        children: (\n          <>\n            <ModalTitle>\n              Application message <span style={{ color: \"#DD3345\" }}>*</span>\n            </ModalTitle>\n            <Widget\n              src={\"old.potlock.near/widget/Inputs.TextArea\"}\n              props={{\n                noLabel: true,\n                inputRows: 5,\n                inputStyle: {\n                  background: \"#FAFAFA\",\n                },\n                placeholder: \"Your application message here...\",\n                value: state.applicationMessage,\n                onChange: (applicationMessage) =>\n                  State.update({ applicationMessage }),\n                validate: () => {\n                  if (\n                    state.applicationMessage.length >\n                    MAX_APPLICATION_MESSAGE_LENGTH\n                  ) {\n                    State.update({\n                      applicationMessageError: `Application message must be less than ${MAX_APPLICATION_MESSAGE_LENGTH} characters`,\n                    });\n                    return;\n                  }\n                  State.update({ applicationMessageError: \"\" });\n                },\n                error: state.applicationMessageError,\n              }}\n            />\n            <Row style={{ margin: \"12px 0px\" }}>\n              <Widget\n                src={\"old.potlock.near/widget/Inputs.Checkbox\"}\n                props={{\n                  id: \"isDaoSelector\",\n                  checked: state.isDao,\n                  onClick: (e) => {\n                    State.update({\n                      isDao: e.target.checked,\n                    });\n                    if (!e.target.checked) {\n                      // check current account ID against registry\n                      verifyIsOnRegistry(context.accountId);\n                    }\n                  },\n                  label: \"I'm applying as a DAO\",\n                }}\n              />\n            </Row>\n            {state.isDao && (\n              <Widget\n                src={\"old.potlock.near/widget/Inputs.Text\"}\n                props={{\n                  label: \"DAO address *\",\n                  placeholder: \"E.g. mydao.sputnikdao.near\",\n                  value: state.daoAddress,\n                  onChange: (daoAddress) =>\n                    State.update({ daoAddress, daoAddressError: \"\" }),\n                  validate: () => {\n                    // **CALLED ON BLUR**\n                    Near.asyncView(state.daoAddress, \"get_policy\", {})\n                      .then((policy) => {\n                        const hasPermissions = !policy\n                          ? false\n                          : doesUserHaveDaoFunctionCallProposalPermissions(\n                              context.accountId,\n                              policy\n                            );\n                        State.update({\n                          daoAddressError: hasPermissions\n                            ? \"\"\n                            : \"You don't have required permissions to submit proposals to this DAO.\",\n                          daoPolicy: policy,\n                        });\n                        // check registry\n                        verifyIsOnRegistry(state.daoAddress);\n                      })\n                      .catch((e) => {\n                        State.update({\n                          daoAddressError: \"Invalid DAO address\",\n                        });\n                      });\n                  },\n                  error: state.daoAddressError,\n                  disabled: isUpdate ? !isAdminOrGreater : false,\n                }}\n              />\n            )}\n            <Row style={{ justifyContent: \"flex-end\", marginTop: \"12px\" }}>\n              <Widget\n                src={\"old.potlock.near/widget/Components.Button\"}\n                props={{\n                  type: \"primary\",\n                  // text: registrationApprovedOrNoRegistryProvider\n                  //   ? state.isDao\n                  //     ? \"Propose to Send Application\"\n                  //     : \"Send application\"\n                  //   : \"Register to apply\",\n                  text: state.isDao\n                    ? \"Propose to Send Application\"\n                    : registrationApprovedOrNoRegistryProvider\n                    ? \"Send application\"\n                    : \"Register to apply\",\n                  onClick:\n                    state.isDao || registrationApprovedOrNoRegistryProvider\n                      ? handleSendApplication\n                      : null,\n                  disabled: isError,\n                  href:\n                    state.isDao || registrationApprovedOrNoRegistryProvider\n                      ? null\n                      : props.hrefWithParams(`?tab=createproject`),\n                  target:\n                    state.isDao || registrationApprovedOrNoRegistryProvider\n                      ? \"_self\"\n                      : \"_blank\",\n                }}\n              />\n            </Row>\n          </>\n        ),\n      }}\n    />\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/old.potlock.near/widget/Pots.Detail", "fact_widget_deployments_id": "6e832230ee42abfec86b2fee47432346", "inserted_timestamp": "2024-05-22T20:51:25.115Z", "modified_timestamp": "2024-05-22T21:51:10.417Z", "__row_index": 1}