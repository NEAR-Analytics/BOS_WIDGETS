{"tx_hash": "9zqTVjxAkPtBfjqX2fT5FzifJjSP21C86jFz6qdKKgVy", "action_id_social": "HNSjPxZHjQ2Lff1uQ66xsSN13rddtn5VTT4ywqvZwWUv-0-widget", "block_id": 119511074, "block_timestamp": "2024-05-22T19:32:15.684Z", "signer_id": "old.potlock.near", "widget_name": "Library", "source_code": "const { Button, TipOnPotlock } = VM.require(\n  \"old.potlock.near/widget/Components.ui.Button\"\n) || {\n  Button: () => <></>,\n  TipOnPotlock: () => <></>,\n};\nconst { Volunteer, Component } = VM.require(\n  \"old.potlock.near/widget/Components.Icons\"\n) || {\n  Volunteer: () => <></>,\n  Component: () => <></>,\n};\nconst ButtonPreview = (\n  <div>\n    <div className=\"d-flex align-items-center gap-3 mb-3 flex-wrap\">\n      <Button variant=\"outline\">\n        <Volunteer />\n        Outline\n      </Button>\n      <Button variant=\"primary\">\n        <Volunteer />\n        Primary\n      </Button>\n      <Button variant=\"standard\">\n        <Volunteer />\n        Standard\n      </Button>\n      <Button variant=\"tonal\">\n        <Volunteer />\n        Tonal\n      </Button>\n      <Button variant=\"brand-outline\">\n        <Volunteer />\n        Brand Outline\n      </Button>\n    </div>\n    <div className=\"d-flex align-items-center gap-3 mb-3 flex-wrap\">\n      <Button variant=\"outline\">Outline</Button>\n      <Button variant=\"primary\">Primary</Button>\n      <Button variant=\"standard\">Standard</Button>\n      <Button variant=\"tonal\">Tonal</Button>\n      <Button variant=\"brand-outline\">Brand Outline</Button>\n    </div>\n  </div>\n);\nconst TipOnPotlockPreview = (\n  <div>\n    <div className=\"d-flex align-items-center gap-3 mb-3 flex-wrap\">\n      <TipOnPotlock variant=\"outline\" />\n      <TipOnPotlock variant=\"primary\" />\n      <TipOnPotlock variant=\"standard\" />\n      <TipOnPotlock variant=\"tonal\" />\n      <TipOnPotlock variant=\"brand-outline\" />\n    </div>\n  </div>\n);\nconst components = [\n  {\n    name: \"Button\",\n    category: \"Buttons/Navigation\",\n    widgetSrc: \"old.potlock.near/widget/Components.ui.Button\",\n    description:\n      \"Button component with four different variants, and icon support.\",\n    requiredProps: {\n      children: \"Button Text\",\n      onClick: \"Callback function to handle button click\",\n    },\n    optionalProps: {\n      id: \"ID of the button\",\n      variant: \"Variant of the button (outline, primary, standard, tonal)\",\n      className: \"Additional classnames for button\",\n      style: \"Additional styles for button\",\n    },\n    preview: ButtonPreview,\n    embedCode: `\n  const { Button } = VM.require(\"old.potlock.near/widget/Components.ui.Button\");\n  const { Volunteer } = VM.require(\"old.potlock.near/widget/Components.Icons\");\n  \n  return (\n      <Button\n        onClick={(e) => {\n          // handle on click\n        }}\n        variant=\"outline\"\n      >\n        <Volunteer />\n        Donate\n      </Button>\n  );`,\n  },\n  {\n    name: \"Public Goods Legos\",\n    category: \"Buttons/Navigation\",\n    widgetSrc: \"old.potlock.near/widget/Components.ui.Button\",\n    description:\n      \"Button component with four different variants, and icon support.\",\n    requiredProps: {\n      onClick: \"Callback function to handle button click\",\n    },\n    optionalProps: {\n      id: \"ID of the button\",\n      variant: \"Variant of the button (outline, primary, standard, tonal)\",\n      className: \"Additional classnames for button\",\n      style: \"Additional styles for button\",\n    },\n    preview: TipOnPotlockPreview,\n    embedCode: `\n  const { TipOnPotlock } = VM.require(\"old.potlock.near/widget/Components.ui.Button\");\n  return (\n    <div className=\"d-flex align-items-center gap-3 mb-3\">\n    <TipOnPotlock variant=\"outline\" />\n    <TipOnPotlock variant=\"primary\" />\n    <TipOnPotlock variant=\"standard\" />\n    <TipOnPotlock variant=\"tonal\" />\n  </div>\n  );`,\n  },\n];\nconst renderProps = (props, optional) => {\n  return Object.entries(props || {}).map(([key, desc]) => {\n    return (\n      <tr key={key}>\n        <td>\n          <span className={`code prop-key${optional ? \" optional\" : \"\"}`}>\n            {key}\n          </span>\n        </td>\n        <td className=\"prop-desc\">\n          <Markdown text={desc} />\n        </td>\n      </tr>\n    );\n  });\n};\nconst renderComponent = (component, index) => {\n  const id = component.name.toLowerCase().replace(/ /g, \"-\");\n  return (\n    <div className=\"component\">\n      <div className=\"anchor\" id={id}>\n        <a href={`#${id}`}>\n          <h2>{component.name}</h2>\n        </a>\n        <p>{component.description}</p>\n        <h3>Preview</h3>\n        {component.preview}\n        <h3>Component</h3>\n        <div className=\"d-flex flex-row flex-wrap justify-content-between mb-3\">\n          <div className=\"path font-monospace\">\n            <OverlayTrigger\n              placement=\"auto\"\n              overlay={\n                <Tooltip>\n                  {state.copied ? \"Copied!\" : \"Copy to clipboard\"}\n                </Tooltip>\n              }\n            >\n              <Widget\n                onClick={() => {\n                  clipboard.writeText(props.text).then(() => {\n                    State.update({ copied: true });\n                    if (props.onCopy) {\n                      props.onCopy(props.text);\n                    }\n                  });\n                }}\n                src=\"mob.near/widget/CopyButton\"\n                props={{\n                  text: component.widgetSrc,\n                  label: component.widgetSrc,\n                }}\n              />\n            </OverlayTrigger>\n          </div>\n        </div>\n        <h3>Props</h3>\n        <table className=\"props table table-bordered mb-3\">\n          <thead>\n            <tr>\n              <th>Key</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {renderProps(component.requiredProps)}\n            {renderProps(component.optionalProps, true)}\n          </tbody>\n        </table>\n        <h3>Example</h3>\n        <div className=\"embed-code\">\n          <Markdown text={`\\`\\`\\`jsx\\n${component.embedCode}\\n\\`\\`\\``} />\n          <div className=\"embed-copy\">\n            <Widget\n              src=\"old.potlock.near/widget/Components.ui.Button\"\n              props={{\n                text: component.embedCode,\n                className: \"btn btn-outline-light\",\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nconst Wrapper = styled.div`\n  h2,\n  h3,\n  label,\n  p {\n    color: black;\n  }\n  .component {\n    padding: 0.5em 12px;\n    padding-bottom: 0;\n    margin-bottom: 3em;\n    &:hover {\n      background: rgba(0, 0, 0, 0.03);\n    }\n    table,\n    th,\n    td {\n      background: #fff;\n      color: #000;\n    }\n    label {\n      font-size: 20px;\n    }\n    .code {\n      display: inline-flex;\n      line-height: normal;\n      border-radius: 0.3em;\n      padding: 0 4px;\n      border: 1px solid #ddd;\n      background: rgba(0, 0, 0, 0.03);\n      font-family: var(--bs-font-monospace);\n    }\n    .path {\n    }\n    .preview {\n      background-color: white;\n      padding: 12px;\n      border: 1px solid #eee;\n      border-radius: 12px;\n      pre {\n        margin-bottom: 0;\n      }\n    }\n    .props {\n      .prop-key {\n        background: #f7f7f7;\n        border: 1px solid #dddddd;\n        color: black;\n        border-radius: 8px;\n        padding: 2px 4px;\n        font-weight: 600;\n        &.optional {\n          font-weight: 400;\n        }\n      }\n      .prop-desc {\n        p {\n          margin-bottom: 0;\n          color: #000;\n        }\n      }\n    }\n    .embed-code {\n      position: relative;\n      .embed-copy {\n        position: absolute;\n        top: 18px;\n        right: 10px;\n      }\n    }\n  }\n`;\nconst renderMenuItem = (c, i) => {\n  const prev = i ? components[i - 1] : null;\n  const res = [];\n  const id = c.name.toLowerCase().replaceAll(\" \", \"-\");\n  res.push(\n    <div className=\"menu-item\" key={i}>\n      <a href={`#${id}`} className=\"d-flex align-items-center gap-2\">\n        <Component />\n        {c.name}\n      </a>\n    </div>\n  );\n  return res;\n};\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(5, minmax(0, 1fr));\n  gap: 1rem;\n  .main {\n    grid-column: span 4 / span 4;\n  }\n  .aside {\n    grid-column: span 1 / span 1;\n    border-radius: 16px;\n    border: 1px solid var(--stroke-color, rgba(154, 127, 127, 0.2));\n    background: var(--bg-1, #fff);\n    width: 100%;\n    min-height: 80vh;\n    display: flex;\n    padding: 24px 12px;\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 16px;\n    margin-bottom: 1rem;\n    .menu-item {\n      width: 100%;\n      display: flex;\n    }\n    a {\n      all: unset;\n      display: inline-flex;\n      padding: 8px 12px;\n      justify-content: flex-start;\n      align-items: center;\n      gap: 4px;\n      border-radius: 8px;\n      font-size: 14px;\n      font-weight: 500;\n      transition: all 300ms;\n      background: var(--button-outline-bg, #fff);\n      color: var(--button-outline-color, #000);\n      border: 1px solid var(--stroke-color, rgba(154, 127, 127, 0.2)) !important;\n      cursor: pointer;\n      align-self: stretch;\n      width: 100%;\n      text-align: left;\n      &:hover {\n        background: var(--button-outline-hover-bg, #cdcdcd);\n        color: var(--button-outline-hover-color, #000);\n      }\n    }\n    svg path {\n      fill: #000;\n    }\n  }\n  .top {\n    grid-column: span 1 / span 1;\n    border-radius: 16px;\n    border: 1px solid var(--stroke-color, rgba(154, 127, 127, 0.2));\n    background: var(--bg-1, #fff);\n    width: 100%;\n    display: flex;\n    padding: 24px 12px;\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 16px;\n    margin-bottom: 1rem;\n    .menu-item {\n      width: 100%;\n      display: flex;\n    }\n    a {\n      all: unset;\n      display: inline-flex;\n      padding: 8px 12px;\n      justify-content: flex-start;\n      align-items: center;\n      gap: 4px;\n      border-radius: 8px;\n      font-size: 14px;\n      font-weight: 500;\n      transition: all 300ms;\n      background: var(--button-outline-bg, #fff);\n      color: var(--button-outline-color, #000);\n      border: 1px solid var(--stroke-color, rgba(154, 127, 127, 0.2)) !important;\n      cursor: pointer;\n      align-self: stretch;\n      width: 100%;\n      text-align: left;\n      &:hover {\n        background: var(--button-outline-hover-bg, #cdcdcd);\n        color: var(--button-outline-hover-color, #000);\n      }\n    }\n    svg path {\n      fill: #000;\n    }\n  }\n  @media screen and (max-width: 768px) {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    .aside {\n      flex-direction: row;\n      border: none;\n      overflow-x: auto;\n      min-height: auto;\n      gap: 2rem;\n      .menu-item {\n        width: max-content;\n        flex-shrink: 0;\n        a {\n          flex-shrink: 0;\n        }\n      }\n    }\n  }\n`;\nreturn (\n  <Grid className=\"\">\n    <div className=\"aside\">\n      {components.map((component, index) => renderMenuItem(component, index))}\n    </div>\n    <Wrapper className=\"main\">\n      <div\n        style={{\n          paddingLeft: \"1rem\",\n        }}\n        className=\"top d-flex justify-content-center\"\n      >\n        <h3\n          style={{\n            padding: \"0\",\n            margin: 0,\n          }}\n        >\n          Library\n        </h3>\n      </div>\n      {components.map((component, index) => renderComponent(component, index))}\n    </Wrapper>\n  </Grid>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/old.potlock.near/widget/Library", "fact_widget_deployments_id": "f29259b9bdcacb17025a53bc4f7f718c", "inserted_timestamp": "2024-05-22T20:51:25.115Z", "modified_timestamp": "2024-05-22T21:51:10.417Z", "__row_index": 1}