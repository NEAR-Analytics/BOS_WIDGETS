{"tx_hash": "HC1Q9UdyZg3bcCQsp8HnygX82xrbMs7hQvKJrprsa8VR", "action_id_social": "FW3DcpyCLtNNekUnK3QxDrYa6XnDWXf1ABYc1LtsCJJb-0-widget", "block_id": 99348517, "block_timestamp": "2023-08-21T21:53:24.557Z", "signer_id": "ihyshan.near", "widget_name": "DAOs.index", "source_code": "const getFollowedDAOs = (accountId) => {\r\n  let following = Social.keys(`${accountId}/graph/follow/*`, \"final\", {\r\n    return_type: \"BlockHeight\",\r\n  });\r\n\r\n  following =\r\n    following === null\r\n      ? null\r\n      : Object.keys(following[accountId].graph.follow).filter((account) =>\r\n          account.endsWith(\".sputnik-dao.near\"),\r\n        );\r\n  return following;\r\n};\r\n\r\n\r\nconst { router } = props;\r\nconst filter = props.filter;\r\nconst accountId = props.accountId ?? context.accountId ?? \"\";\r\n\r\nlet followedDAOs = null;\r\nif (filter === \"followedDAOs\") {\r\n  followedDAOs = getFollowedDAOs(accountId);\r\n  if (followedDAOs === null) return \"\";\r\n}\r\n\r\nconst publicApiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\r\nconst resPerPage = 10;\r\n\r\nconst forgeUrl = (apiUrl, params) =>\r\n  apiUrl +\r\n  Object.keys(params)\r\n    .sort()\r\n    .reduce((paramString, p) => paramString + `${p}=${params[p]}&`, \"?\");\r\n\r\nlet daos = null;\r\nif (filter === \"followedDAOs\") {\r\n  daos = followedDAOs.map((dao) => ({\r\n    contract_id: dao,\r\n  }));\r\n} else if (filter === \"myDAOs\") {\r\n  daos = useCache(\r\n    () =>\r\n      // TODO: need better API for this, fetching all members daos is not efficient\r\n      asyncFetch(forgeUrl(`https://api.pikespeak.ai/daos/members`, {}), {\r\n        mode: \"cors\",\r\n        headers: {\r\n          \"x-api-key\": publicApiKey,\r\n        },\r\n      }).then((res) => {\r\n        return res.body[accountId][\"daos\"].map((dao) => ({\r\n          contract_id: dao,\r\n        }));\r\n      }),\r\n    \"my-daos-\" + accountId,\r\n    { subscribe: false }\r\n  );\r\n} else if (filter === \"ndcDAOs\") {\r\n  daos = [\r\n    \"ndctrust.sputnik-dao.near\",\r\n    \"gwg.sputnik-dao.near\",\r\n    \"gwg-stables.sputnik-dao.near\",\r\n  ].map((dao) => ({\r\n    contract_id: dao,\r\n  }));\r\n} else {\r\n  daos = useCache(\r\n    () =>\r\n      asyncFetch(forgeUrl(`https://api.pikespeak.ai/daos/all`, {}), {\r\n        mode: \"cors\",\r\n        headers: {\r\n          \"x-api-key\": publicApiKey,\r\n          \"cache-control\": \"max-age=86400\", // 1 day\r\n        },\r\n      }).then((res) => res.body),\r\n    \"all-daos\",\r\n    { subscribe: false }\r\n  );\r\n}\r\n\r\nconst createDAOLink = \"#/astraplusplus.ndctools.near/widget/index?tab=create-dao\";\r\n\r\nconst renderHeader = () => (\r\n  <div className=\"d-flex justify-content-between gap-2 align-items-center\">\r\n    <h2 className=\"h2\">DAOs</h2>\r\n    <Widget\r\n      src=\"nearui.near/widget/Input.Button\"\r\n      props={{\r\n        variant: \"info\",\r\n        size: \"lg\",\r\n        buttonProps: {\r\n          style: {\r\n            fontWeight: 500,\r\n          },\r\n        },\r\n        children: (\r\n          <>\r\n            Create a new DAO\r\n            <i className=\"bi bi-plus-lg\"></i>\r\n          </>\r\n        ),\r\n        href: createDAOLink,\r\n      }}\r\n    />\r\n  </div>\r\n);\r\n\r\nconst renderDAOs = () => {\r\n  return (\r\n    <Widget\r\n      src=\"astraplusplus.ndctools.near/widget/DAOs.list\"\r\n      props={{\r\n        daos,\r\n        router,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nreturn (\r\n  <div>\r\n    {renderHeader()}\r\n    {renderDAOs()}\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ihyshan.near/widget/DAOs.index", "fact_widget_deployments_id": "c96e28ca3f9fdf297d628268a4c7136d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}