{"tx_hash": "5tdrgcGs2XCEveJS5gcLAMLhRa7hWqXM7GWcp6YjAk5z", "action_id_social": "59NTngQejzFWAgxgHUHKZEuHHLDAWogaUC8pjnmAv64H-0-widget", "block_id": 107149114, "block_timestamp": "2023-12-04T16:47:29.367Z", "signer_id": "marketplacebos.near", "widget_name": "TrendingPost.ChartValueAll", "source_code": "const findHashtags = (str) => {\n  const regexp = /\\B\\#\\w\\w+\\b/g;\n  let match;\n  let tags = [];\n  while ((match = regexp.exec(str)) !== null) {\n    tags.push(match[0]);\n  }\n  return tags;\n};\nconst respBlock = fetch(\"https://api.nearblocks.io/v1/stats\");\n\nconst newBlock30Days = Math.round(\n  parseInt(respBlock.body.stats[0].block) -\n    (30 * 24 * 3600) / parseInt(respBlock.body.stats[0].avg_block_time)\n);\n\nlet BlockHeightPost30Days = [];\nconst getBlockHeight30daysPost = Social.index(\"post\", \"main\", {\n  from: newBlock30Days,\n  limit: 99999,\n});\n\ngetBlockHeight30daysPost.forEach((item) => {\n  BlockHeightPost30Days.push({\n    accountId: item.accountId,\n    blockHeight: item.blockHeight,\n  });\n});\n\nlet post30days = [];\nBlockHeightPost30Days.forEach((item) => {\n  const post = Social.get(`${item.accountId}/post/main`, item.blockHeight);\n  if (post) {\n    post30days.push(JSON.parse(post).text);\n  }\n});\n\nlet tagCount30Days = {};\npost30days.forEach((item) => {\n  const tags = findHashtags(item);\n  if (tags.length > 0) {\n    tags.forEach((tag) => {\n      if (tagCount30Days[tag]) {\n        tagCount30Days[tag] = tagCount30Days[tag] + 1;\n      } else {\n        tagCount30Days[tag] = 1;\n      }\n    });\n  }\n});\nlet entries30days = Object.entries(tagCount30Days);\nlet post30daySorted = entries30days.sort((b, a) => a[1] - b[1]);\n\nconst newBlock1Days = Math.round(\n  parseInt(respBlock.body.stats[0].block) -\n    (1 * 24 * 3600) / parseInt(respBlock.body.stats[0].avg_block_time)\n);\nconst newBlock3Days = Math.round(\n  parseInt(respBlock.body.stats[0].block) -\n    (3 * 24 * 3600) / parseInt(respBlock.body.stats[0].avg_block_time)\n);\nconst newBlock7Days = Math.round(\n  parseInt(respBlock.body.stats[0].block) -\n    (7 * 24 * 3600) / parseInt(respBlock.body.stats[0].avg_block_time)\n);\nconst allPost = Social.get(\"*/post/main/\", \"final\");\n\nconst tagCountAll = {};\nconst tagCount1Days = {};\nconst tagCount3Days = {};\nconst tagCount7Days = {};\nObject.keys(allPost).forEach((item) => {\n  const tags = findHashtags(JSON.parse(allPost[item].post.main).text);\n  if (tags.length > 0) {\n    tags.forEach((tag) => {\n      tagCountAll[tag] = 0;\n      tagCount1Days[tag] = 0;\n      tagCount3Days[tag] = 0;\n      tagCount7Days[tag] = 0;\n    });\n  }\n});\nObject.keys(tagCountAll).forEach((tag) => {\n  const countAllPost = Social.index(\"hashtag\", tag.replace(\"#\", \"\"), {\n    from: newBlock,\n    limit: 999,\n    order: \"asc\",\n  });\n  const count1DaysPost = Social.index(\"hashtag\", tag.replace(\"#\", \"\"), {\n    from: newBlock1Days,\n    limit: 999,\n    order: \"asc\",\n  });\n  const count3DaysPost = Social.index(\"hashtag\", tag.replace(\"#\", \"\"), {\n    from: newBlock3Days,\n    limit: 999,\n    order: \"asc\",\n  });\n  const count7DaysPost = Social.index(\"hashtag\", tag.replace(\"#\", \"\"), {\n    from: newBlock7Days,\n    limit: 999,\n    order: \"asc\",\n  });\n  tagCountAll[tag] = countAllPost.length || 0;\n  tagCount1Days[tag] = count1DaysPost.length || 0;\n  tagCount3Days[tag] = count3DaysPost.length || 0;\n  tagCount7Days[tag] = count7DaysPost.length || 0;\n});\n\nlet entriesALL = Object.entries(tagCountAll);\nlet allPostSorted = entriesALL.sort((b, a) => a[1] - b[1]);\n\nlet entries1 = Object.entries(tagCount1Days);\nlet day1PostSorted = entries1.sort((b, a) => a[1] - b[1]);\n\nlet entries3 = Object.entries(tagCount3Days);\nlet day3PostSorted = entries3.sort((b, a) => a[1] - b[1]);\n\nlet entries7 = Object.entries(tagCount7Days);\nlet day7PostSorted = entries7.sort((b, a) => a[1] - b[1]);\n\nlet totalItemsAll = 0;\n\n// Sum the values in the allPostSorted array\nfor (let i = 0; i < post30daySorted.length; i++) {\n  totalItemsAll += post30daySorted[i][1];\n}\n\nconst labelN = \"Top 10 trending tags on NEAR Social in all time\";\n\nconst backgroundcolorP = [\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n];\n\nconst borderColorP = [\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n  \"blue\",\n];\n\n// Assuming item1 and item2 are properties of the objects in the 'sorted' array\nlet dataP = [];\nlet labelP = [];\n\n// Assuming allPostSorted has at least 20 items\nfor (let i = 0; i < 10; i++) {\n  if (post30daySorted[i]) {\n    dataP.push(post30daySorted[i][1]); // Assuming item[1] contains the data for dataP\n    labelP.push(post30daySorted[i][0]); // Assuming item[0] contains the data for labelP\n  }\n}\n\n// ... (rest of the code remains unchanged)\n\nconst StyledTable = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 20px;\n  border: none;\n  overflow: auto;\n  @media (max-width: 968px) {\n    font-size: 8px;\n  }\n  @media (max-width: 768px) {\n    font-size: 8px;\n  }\n`;\n\nconst StyledTh = styled.th`\n  padding: 12px;\n  text-align: left;\n  background-color: #f2f2f2;\n  border: none;\n  text-align: center;\n`;\n\nconst StyledTd = styled.td`\n  padding: 12px;\n  border: none;\n  text-align: center;\n`;\n\nconst StyledTotalContainer = styled.div`\n  border: 4px solid black;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 20px;\n`;\n\nconst StyledTotalLabel = styled.div`\n  font-weight: bold;\n  font-size: 18px;\n`;\n\nconst StyledTotalValue = styled.div`\n  font-weight: bold;\n  font-size: 24px;\n  margin-top: 8px;\n`;\n\nconst Table = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const filteredTags = post30daySorted\n    .filter((item) => item[0].toLowerCase().includes(searchTerm.toLowerCase()))\n    .slice(0, 10);\n  return (\n    <>\n      <StyledTotalContainer>\n        <StyledTotalLabel>Total Posts</StyledTotalLabel>\n        <StyledTotalValue>{totalItemsAll}</StyledTotalValue>\n      </StyledTotalContainer>\n      <br />\n      <br />\n      <br />\n\n      <Widget\n        src=\"marketplacebos.near/widget/TrendingPost.ChartPost\"\n        props={{\n          dataP: dataP,\n          labelP: labelP,\n          backgroundcolorP: backgroundcolorP,\n          borderColorP: borderColorP,\n          labelN: labelN,\n        }}\n      />\n      <br />\n      <br />\n      <br />\n      <br />\n\n      <StyledTable>\n        <thead>\n          <tr>\n            <StyledTh>TAG NAME</StyledTh>\n            <StyledTh>TOTAL POST</StyledTh>\n          </tr>\n        </thead>\n        <tbody>\n          {post30daySorted &&\n            post30daySorted\n              .filter((item, index) => index <= 100)\n              .map((item) => (\n                <tr>\n                  <StyledTd>\n                    <a\n                      href={`https://near.social/marketplacebos.near/widget/TrendingPost.TableValue?hashtag=${item[0].replace(\n                        \"#\",\n                        \"\"\n                      )}`}\n                    >\n                      {item[0]}\n                    </a>\n                  </StyledTd>\n                  <StyledTd>{item[1]}</StyledTd>\n                </tr>\n              ))}\n        </tbody>\n      </StyledTable>\n    </>\n  );\n};\n\nreturn (\n  <>\n    <Table />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/marketplacebos.near/widget/TrendingPost.ChartValueAll", "fact_widget_deployments_id": "f89706fb71ea9058576d27b60235234c", "inserted_timestamp": "2023-12-04T18:41:08.230Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 8}