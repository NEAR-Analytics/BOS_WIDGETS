{"tx_hash": "4Tsxvqfd1LokQRydXRYa54edoP7Kjt8mY8MNx3PYhfr1", "action_id_social": "rBLE4M4VM4uvf7FMvLEpZXwSj7nJwx73qM4zVLKAbVH-0-widget", "block_id": 106405544, "block_timestamp": "2023-11-24T05:04:22.852Z", "signer_id": "marketplacebos.near", "widget_name": "Button.ButtonEdit.Button0001", "source_code": "State.init({\n  cMethod: props.cMethod,\n  widgetName: props.widgetName || `FastUI-${props.contractAddress}`,\n  name: \"\",\n  description: \"\",\n  website: \"\",\n  image: {\n    ipfs_cid: \"\",\n  },\n  clicked: false,\n  export: false,\n  img: null,\n  tags,\n  choose,\n});\n\nconst onInputChangeWidgetName = ({ target }) => {\n  State.update({ widgetName: target.value.replaceAll(\" \", \"-\") });\n  State.update({ clicked: false });\n  State.update({ export: false });\n};\nconst onInputChangeWidgetTitle = ({ target }) => {\n  State.update({ name: target.value });\n};\nconst onInputChangeWidgetDescription = ({ target }) => {\n  State.update({ description: target.value });\n};\nconst onInputChangeWidgetWebsite = ({ target }) => {\n  State.update({ website: target.value });\n};\nconst uploadFileUpdateState = (body) => {\n  asyncFetch(\"https://ipfs.near.social/add\", {\n    method: \"POST\",\n    headers: { Accept: \"application/json\" },\n    body,\n  }).then((res) => {\n    const cid = res.body.cid;\n    State.update({ image: { ipfs_cid: cid } });\n    State.update({ img: { cid } });\n  });\n};\n\nconst filesOnChange = (files) => {\n  if (files) {\n    State.update({ img: { uploading: true, cid: null } });\n    uploadFileUpdateState(files[0]);\n  }\n};\nconst taggedWidgets = Social.keys(`*/widget/*/metadata/tags/*`, \"final\");\nlet tags = [];\nif (Object.keys(taggedWidgets)) {\n  Object.keys(taggedWidgets).forEach((item) => {\n    if (taggedWidgets[item].widget) {\n      if (Object.keys(taggedWidgets[item].widget).length > 0) {\n        Object.keys(taggedWidgets[item].widget).forEach((item1) => {\n          if (taggedWidgets[item].widget[item1].metadata.tags) {\n            if (\n              Object.keys(taggedWidgets[item].widget[item1].metadata.tags)\n                .length > 0\n            ) {\n              Object.keys(\n                taggedWidgets[item].widget[item1].metadata.tags\n              ).forEach((tag) => {\n                tags.push(tag);\n              });\n            }\n          }\n        });\n      }\n    }\n  });\n}\n\nState.update({ tags: tags });\nconst openModal = () => {\n  State.update({ clicked: false });\n  State.update({ export: false });\n};\nconst exportForm = () => {\n  if (!state.clicked) {\n    State.update({ clicked: true });\n    let tagsObj = null;\n    if (state.choose) {\n      tagsObj = state.choose.reduce((accumulator, value) => {\n        return { ...accumulator, [value]: \"\" };\n      }, {});\n    }\n    const exportListData = Social.get(\n      `${context.accountId}/magicbuild/widgetList`\n    );\n\n    const exporttList = JSON.parse(exportListData) || [];\n\n    const isExist = false;\n    exporttList.forEach((item, index) => {\n      if (item.widgetName == state.widgetName) {\n        exporttList[index].widgetName = state.widgetName;\n        isExist = true;\n      }\n    });\n    if (!isExist) {\n      exporttList.push({ widgetName: state.widgetName });\n    }\n    console.log(\"cssStyle\", abi.cssStyle.replaceAll(\"\\n\", \"\"));\n\n    // const data = {\n    //   widget: {\n    //     [state.widgetName]: {\n    //       \"\":\n    //       //paste date code export\n    //     ,\n    //       metadata: {\n    //         name: state.name,\n    //         description: state.description,\n    //         linktree: {\n    //           website: state.website,\n    //         },\n    //         image: {\n    //           ipfs_cid: state.img.cid,\n    //         },\n    //         tags: tagsObj,\n    //       },\n    //     },\n    //   },\n    //   magicbuild: { widgetList: exporttList },\n    // };\n    Social.set(data, {\n      force: true,\n      onCommit: () => {\n        State.update({ export: true });\n      },\n      onCancel: () => {\n        State.update({ clicked: false });\n      },\n    });\n  }\n};\n\nconst Input = styled.input`\n    width: 50%;\n    border-radius: 4px;\n  `;\n\nconst [inputText, setInputText] = useState(\"\");\nconst [inputFontsize, setinputFontsize] = useState(\"\");\nconst [exportedText, setExportedText] = useState(\"\");\n\nconst handleInputChangeFont = (event) => {\n  setinputFontsize(event.target.value);\n  setExportedText(`${inputText} ${event.target.value}`);\n  // console.log(\"Exported text state:\", `${inputText} ${event.target.value}`);\n};\n\nconst handleInputChange = (event) => {\n  setInputText(event.target.value);\n\n  setExportedText(`${event.target.value} ${inputFontsize}`);\n  // console.log(\"Exported text state:\", `${event.target.value} ${inputFontsize}`);\n};\n\nconst SaveButton = styled.button`\n  width: 80px;\n  height: 35px;\n  display: flex;\n  align-items: center;\n  background-color: white;\n  color: black;\n  font-size:10px;\n  border-radius: 2em;\n  padding: 0.5rem;\n  position: absolute; \n  bottom: 10px;\n  right: 10px;\n`;\n\nconst Button0001 = styled.button`\n  width: 80%;\n  height: 40px;\n  all: unset;\n  display: flex;\n  align-items: center;\n  position: relative;\n  padding: 0.6em 2em;\n  border: mediumspringgreen solid 0.15em;\n  border-radius: 0.25em;\n  color: mediumspringgreen;\n  font-size: 1.2em;\n  font-weight: 600;\n  cursor: pointer;\n  overflow: hidden;\n  transition: border 300ms, color 300ms;\n  user-select: none;\n\n  p {\n    z-index: 1;\n  }\n\n  &:hover {\n    color: #212121;\n  }\n\n  &:active {\n    border-color: teal;\n  }\n\n  &::before,\n  &::after {\n    content: \"\";\n    position: absolute;\n    width: 9em;\n    aspect-ratio: 1;\n    background: mediumspringgreen;\n    opacity: 50%;\n    border-radius: 50%;\n    transition: transform 500ms, background 300ms;\n  }\n\n  &::before {\n    left: 0;\n    transform: translateX(-8em);\n  }\n\n  &::after {\n    right: 0;\n    transform: translateX(8em);\n  }\n\n  &:hover::before {\n    transform: translateX(-1em);\n  }\n\n  &:hover::after {\n    transform: translateX(1em);\n  }\n\n  &:active::before,\n  &:active::after {\n    background: teal;\n  }\n`;\n\nconst updateTextProp = () => {\n  const updatedProps = {\n    component: (\n      <Widget\n        src=\"marketplacebos.near/widget/Button.ButtonP.Button0001\"\n        props={{ text: inputText, fontsize: inputFontsize }}\n      />\n    ),\n  };\n  setProps(updatedProps);\n  alert(`Exported UI with text: ${inputText} ${inputFontsize}`);\n};\n\nconst props = {\n  copyBtn:\n    \"const Button0001 = styled.button`\" +\n    `width: 80%;\n  height: 40px;\n  all: unset;\n  display: flex;\n  align-items: center;\n  position: relative;\n  padding: 0.6em 2em;\n  border: mediumspringgreen solid 0.15em;\n  border-radius: 0.25em;\n  color: mediumspringgreen;\n  font-size: 1.2em;\n  font-weight: 600;\n  cursor: pointer;\n  overflow: hidden;\n  transition: border 300ms, color 300ms;\n  user-select: none;\n\n  p {\n    z-index: 1;\n  }\n\n  &:hover {\n    color: #212121;\n  }\n\n  &:active {\n    border-color: teal;\n  }\n\n  &::before,\n  &::after` +\n    `\\n{ content: \"\";` +\n    `position: absolute;\n    width: 9em;\n    aspect-ratio: 1;\n    background: mediumspringgreen;\n    opacity: 50%;\n    border-radius: 50%;\n    transition: transform 500ms, background 300ms;\n  }\n\n  &::before {\n    left: 0;\n    transform: translateX(-8em);\n  }\n\n  &::after {\n    right: 0;\n    transform: translateX(8em);\n  }\n\n  &:hover::before {\n    transform: translateX(-1em);\n  }\n\n  &:hover::after {\n    transform: translateX(1em);\n  }\n\n  &:active::before,\n  &:active::after {\n    background: teal;\n  }` +\n    \"`;\" +\n    `\\n return(\n    <Button0001>Button 0001</Button0001>\n)`,\n  component: (\n    <Widget\n      src=\"marketplacebos.near/widget/Button.ButtonP.Button0001\"\n      props={{ text: inputText, fontsize: inputFontsize }}\n    />\n  ),\n  text:\n    \"const Button0001 = styled.button`\\n\" +\n    `  width: 80%;\n  height: 40px;\n  all: unset;\n  display: flex;\n  align-items: center;\n  position: relative;\n  padding: 0.6em 2em;\n  border: mediumspringgreen solid 0.15em;\n  border-radius: 0.25em;\n  color: mediumspringgreen;\n  font-size: 1.2em;\n  font-weight: 600;\n  cursor: pointer;\n  overflow: hidden;\n  transition: border 300ms, color 300ms;\n  user-select: none;\n\n  p {\n    z-index: 1;\n  }\n\n  &:hover {\n    color: #212121;\n  }\n\n  &:active {\n    border-color: teal;\n  }\n\n  &::before,\n  &::after` +\n    `\\n{ content: \"\";` +\n    `position: absolute;\n    width: 9em;\n    aspect-ratio: 1;\n    background: mediumspringgreen;\n    opacity: 50%;\n    border-radius: 50%;\n    transition: transform 500ms, background 300ms;\n  }\n\n  &::before {\n    left: 0;\n    transform: translateX(-8em);\n  }\n\n  &::after {\n    right: 0;\n    transform: translateX(8em);\n  }\n\n  &:hover::before {\n    transform: translateX(-1em);\n  }\n\n  &:hover::after {\n    transform: translateX(1em);\n  }\n\n  &:active::before,\n  &:active::after {\n    background: teal;\n  }` +\n    \"`;\" +\n    `\\n return(\n    <Button0001>Button 0001</Button0001>\n)`,\n  editText: `text: \"Button\", fontsize: \"1.2em\"`,\n  editInput: (\n    <>\n      {\" \"}\n      <label> text:</label> <br />\n      <Input type=\"text\" value={inputText} onChange={handleInputChange} />\n      <br />\n      <label> fontsize : </label> <br />\n      <Input\n        type=\"text\"\n        value={inputFontsize}\n        onChange={handleInputChangeFont}\n      />\n      <br />\n      <>\n        <label></label>\n        <button\n          data-bs-toggle=\"modal\"\n          data-bs-target={`#export-${Date.now()}`}\n          class=\"btn btn-primary form-control \"\n          onClick={openModal}\n        >\n          \ud83d\udd3cExport\n        </button>\n        <div\n          class=\"modal fade\"\n          id={`export-${Date.now()}`}\n          tabindex=\"-2\"\n          aria-labelledby=\"exportLabel\"\n          aria-hidden=\"true\"\n        >\n          <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n              <div class=\"modal-header\">\n                <h1 class=\"modal-title fs-5\" id=\"exportLabel\">\n                  Export Widget\n                </h1>\n                <button\n                  type=\"button\"\n                  class=\"btn-close\"\n                  data-bs-dismiss=\"modal\"\n                  aria-label=\"Close\"\n                ></button>\n              </div>\n              <div class=\"modal-body\">\n                {state.export && state.widgetName ? (\n                  <>\n                    <div class=\"alert alert-primary\" role=\"alert\">\n                      <a\n                        href={`https://near.social/${context.accountId}/widget/${state.widgetName}`}\n                      >\n                        {`https://near.social/${context.accountId}/widget/${state.widgetName}`}\n                      </a>\n                    </div>\n                  </>\n                ) : (\n                  <>\n                    <div class=\"form-group\">\n                      <label>Widget URL</label>\n                      <input\n                        class=\"form-control\"\n                        defaultValue={state.widgetName || \"\"}\n                        onChange={(e) => onInputChangeWidgetName(e)}\n                      />\n                      <small class=\"form-text text-muted\">\n                        A new widget configured with the form will be created.\n                      </small>\n                    </div>\n                    <div class=\"form-group pt-2\">\n                      <label>Name</label>\n                      <input\n                        class=\"form-control\"\n                        defaultValue={state.name || \"\"}\n                        onChange={(e) => onInputChangeWidgetTitle(e)}\n                      />\n                    </div>\n                    <div class=\"form-group pt-2\">\n                      <label>Description</label>\n                      <input\n                        class=\"form-control\"\n                        defaultValue={state.description || \"\"}\n                        onChange={(e) => onInputChangeWidgetDescription(e)}\n                      />\n                    </div>\n                    <div class=\"form-group pt-2\">\n                      <label></label>\n                      <Files\n                        multiple={false}\n                        accepts={[\"image/*\"]}\n                        minFileSize={1}\n                        clickable\n                        className=\"btn btn-outline-primary\"\n                        onChange={filesOnChange}\n                      >\n                        {state.img?.uploading ? (\n                          <> Uploading </>\n                        ) : (\n                          \"Upload Logo Application\"\n                        )}\n                      </Files>\n                    </div>\n                    <div class=\"form-group pt-2\">\n                      <label></label>\n                      {state.img && !state.img.uploading ? (\n                        <img\n                          class=\"rounded w-50 h-50\"\n                          style={{ objectFit: \"cover\" }}\n                          src={`https://ipfs.near.social/ipfs/${state.img.cid}`}\n                          alt=\"upload preview\"\n                        />\n                      ) : (\n                        \"\"\n                      )}\n                    </div>\n                    <div class=\"form-group pt-2\">\n                      <label>Website</label>\n                      <input\n                        class=\"form-control\"\n                        defaultValue={state.website || \"\"}\n                        onChange={(e) => onInputChangeWidgetWebsite(e)}\n                      />\n                    </div>\n                    <div class=\"form-group pt-2\">\n                      <label>Tags</label>\n\n                      <Typeahead\n                        options={state.tags || []}\n                        multiple\n                        onChange={(value) => {\n                          State.update({ choose: value });\n                        }}\n                        placeholder=\"Input tag...\"\n                      />\n                    </div>\n                  </>\n                )}\n              </div>\n              <div class=\"modal-footer\">\n                <button\n                  type=\"button\"\n                  class=\"btn btn-secondary\"\n                  data-bs-dismiss=\"modal\"\n                >\n                  Close\n                </button>\n\n                <button\n                  type=\"button\"\n                  disabled={state.clicked}\n                  onClick={exportForm}\n                  class=\"btn btn-primary\"\n                >\n                  Export\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </>{\" \"}\n    </>\n  ),\n};\n\nreturn (\n  <>\n    <Widget src=\"marketplacebos.near/widget/CardMain.CardEdit\" props={props} />\n  </>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/marketplacebos.near/widget/Button.ButtonEdit.Button0001", "fact_widget_deployments_id": "b63bfe8afc8c7fc72625e152adbe21fb", "inserted_timestamp": "2023-11-24T07:19:22.225Z", "modified_timestamp": "2023-11-24T07:19:22.225Z", "__row_index": 0}