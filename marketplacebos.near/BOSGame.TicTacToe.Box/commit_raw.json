{"tx_hash": "9WomYcDwWUiP9azGEQLfBXVmgHfZQQWKHeXpEzfFYSKM", "action_id_social": "DnZMGrH4HNMnQrauSTGnYNGQgMkVgGdXd8ZDXScUmWK4-0-widget", "block_id": 106032311, "block_timestamp": "2023-11-19T05:22:52.876Z", "signer_id": "marketplacebos.near", "widget_name": "BOSGame.TicTacToe.Box", "source_code": "const StyledBox = styled.button`\n  background-color: #ffffff;\n  border: none;\n  border-radius: 10%;\n  box-shadow: 0px 0px 8px #888888;\n  width: 5rem;\n  height: 5rem;\n  text-align: center;\n  font-size: 5em;\n  font-family: \"Fredoka\", sans-serif;\n  font-weight: bold;\n  line-height: 5rem;\n  margin: 0.5rem;\n\n  &:hover {\n    box-shadow: 0px 0px 15px #888888;\n  }\n\n  &.x {\n    color: rgb(255, 70, 37);\n  }\n\n  &.o {\n    color: rgb(44, 135, 255);\n  }\n`;\n\nconst BoardMain = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 6rem);\n  place-items: center;\n  justify-content: center;\n`;\n\nconst ResetNow = styled.button`\n  width: 20%;\n  border: none;\n  border-radius: 0.5rem;\n  background-color: rgb(0, 110, 255);\n  color: white;\n  font-size: 2rem;\n  padding: 0.5rem 1rem;\n  margin: 2rem auto;\n  display: block;\n  display: flex; /* \u0110\u1eb7t hi\u1ec3n th\u1ecb th\u00e0nh flex */\n  justify-content: center; /* C\u0103n gi\u1eefa theo chi\u1ec1u ngang */\n  &:hover {\n    background-color: rgb(0, 119, 255);\n  }\n`;\n\nconst ScoreboardContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-evenly;\n  width: 20rem;\n  font-size: 1.5rem;\n  background-color: white;\n  margin: 3rem auto;\n  box-shadow: 0px 0px 8px #888888;\n  border-radius: 0.5rem;\n  font-weight: bold;\n`;\n\nconst Board = ({ board, onClick }) => {\n  return (\n    <BoardMain className=\"board\">\n      {board.map((value, idx) => {\n        return (\n          <Box value={value} onClick={() => value === null && onClick(idx)} />\n        );\n      })}\n    </BoardMain>\n  );\n};\nconst Box = ({ value, onClick }) => {\n  const style = value === \"X\" ? \"box x\" : \"box o\";\n\n  return (\n    <StyledBox className={style} onClick={onClick}>\n      {value}\n    </StyledBox>\n  );\n};\nconst ResetButton = ({ resetBoard }) => {\n  return (\n    <ResetNow className=\"reset-btn\" onClick={resetBoard}>\n      Reset\n    </ResetNow>\n  );\n};\nconst ScoreBoard = ({ scores, xPlaying }) => {\n  const { xScore, oScore } = scores;\n\n  return (\n    <ScoreboardContainer className=\"scoreboard\">\n      <span className={`score x-score ${!xPlaying && \"inactive\"}`}>\n        X - {xScore}\n      </span>\n      <span className={`score o-score ${xPlaying && \"inactive\"}`}>\n        O - {oScore}\n      </span>\n    </ScoreboardContainer>\n  );\n};\n\nconst WIN_CONDITIONS = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nconst [xPlaying, setXPlaying] = useState(true);\nconst [board, setBoard] = useState(Array(9).fill(null));\nconst [scores, setScores] = useState({ xScore: 0, oScore: 0 });\nconst [gameOver, setGameOver] = useState(false);\n\nconst handleBoxClick = (boxIdx) => {\n  // Step 1: Update the board\n  const updatedBoard = board.map((value, idx) => {\n    if (idx === boxIdx) {\n      return xPlaying ? \"X\" : \"O\";\n    } else {\n      return value;\n    }\n  });\n\n  setBoard(updatedBoard);\n\n  const winner = checkWinner(updatedBoard);\n\n  if (winner) {\n    if (winner === \"O\") {\n      let { oScore } = scores;\n      oScore += 1;\n      setScores({ ...scores, oScore });\n    } else {\n      let { xScore } = scores;\n      xScore += 1;\n      setScores({ ...scores, xScore });\n    }\n  }\n\n  setXPlaying(!xPlaying);\n};\n\nconst checkWinner = (board) => {\n  for (let i = 0; i < WIN_CONDITIONS.length; i++) {\n    const [x, y, z] = WIN_CONDITIONS[i];\n\n    if (board[x] && board[x] === board[y] && board[y] === board[z]) {\n      setGameOver(true);\n      return board[x];\n    }\n  }\n};\n\nconst resetBoard = () => {\n  setGameOver(false);\n  setBoard(Array(9).fill(null));\n};\n\nreturn (\n  <div className=\"App\">\n    <ScoreBoard scores={scores} xPlaying={xPlaying} />\n    <Board board={board} onClick={gameOver ? resetBoard : handleBoxClick} />\n    <ResetButton resetBoard={resetBoard} />\n  </div>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/marketplacebos.near/widget/BOSGame.TicTacToe.Box", "fact_widget_deployments_id": "dc2ca31653ae66c11ff2616857f929ed", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}