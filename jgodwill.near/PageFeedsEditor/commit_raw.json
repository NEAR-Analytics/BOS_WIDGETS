{"tx_hash": "92wY9JHTgfF3kxMm13FGZ169Pxn88TgS1M5ctSyjdvCC", "action_id_social": "4AvGD46htNMk8pKQKpmTEa6oXpF2C6GkGDdtZsPquqQM-0-widget", "block_id": 107928176, "block_timestamp": "2023-12-14T13:51:22.972Z", "signer_id": "jgodwill.near", "widget_name": "PageFeedsEditor", "source_code": "const pageFeedPattern = props.pageFeedPattern ?? \"*/profile/*\";\nconst placeholder = props.placeholder ?? \"Feeds\";\nconst initialPageFeedsObject = props.initialPageFeedsObject || {};\nconst accountId = context.accountId;\n\nconst pageFeedsObject = Social.keys(pageFeedPattern, \"final\");\n\nif (pageFeedsObject === null) {\n  return \"Loading\";\n}\n\nState.init({\n  account: accountId,\n});\nconst accounts = Object.entries(pageFeedsObject);\n\nconst allWidgets = [];\n\nfor (let i = 0; i < accounts.length; ++i) {\n  const accountId = accounts[i][0];\n  allWidgets.push(accountId);\n}\n\n// const pageFeedsCount = {};\n\n// const processPageFeedObject = (obj) => {\n//   Object.entries(obj).forEach((kv) => {\n//     if (typeof kv[1] === \"object\") {\n//       processPageFeedObject(kv[1]);\n//     } else {\n//       pageFeedsCount[pageFeed] = (pageFeedsCount[pageFeed] || 0) + 1;\n//     }\n//   });\n// };\n\n// const getpageFeeds = () => {\n//   processPageFeedObject(pageFeedsObject);\n//   const pageFeeds = Object.entries(pageFeedsCount);\n//   pageFeeds.sort((a, b) => b[1] - a[1]);\n//   return pageFeeds.map((t) => ({\n//     name: t[0],\n//     count: t[1],\n//   }));\n// };\n\n// console.log(Object.keys(initialPageFeedsObject));\nif (!state.allPageFeeds) {\n  initState({\n    allPageFeeds: allWidgets,\n    pageFeeds: Object.keys(initialPageFeedsObject).map((pageFeed) => pageFeed),\n    originalPageFeeds: Object.fromEntries(\n      Object.keys(initialPageFeedsObject).map((pageFeed) => [pageFeed, null])\n    ),\n    id: `pageFeeds-selector-${Date.now()}`,\n  });\n  console.log(\"we'renot here\", allPageFeeds);\n}\n\nconst setPageFeeds = (pageFeeds) => {\n  pageFeeds = pageFeeds.map((o) => {\n    o = o;\n    return o;\n  });\n\n  const newPageFeedsObject = Object.fromEntries(\n    pageFeeds.map((pageFeed) => [pageFeed, \"\"])\n  );\n  const updatedPageFeedsObject = {\n    ...state.originalPageFeeds,\n    ...newPageFeedsObject,\n  };\n\n  State.update({ pageFeeds: pageFeeds });\n  if (props.setPageFeedsObject) {\n    props.setPageFeedsObject(updatedPageFeedsObject);\n  }\n};\n\nreturn (\n  <>\n    <Typeahead\n      id={state.id}\n      multiple\n      labelKey=\"name\"\n      onChange={setPageFeeds}\n      options={allWidgets}\n      placeholder={placeholder}\n      selected={state.pageFeeds}\n      positionFixed\n      allowNew\n    />\n    {props.debug && (\n      <div>\n        Debugging pageFeeds:\n        <pre>{JSON.stringify(state.pageFeeds)}</pre>\n      </div>\n    )}\n  </>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/jgodwill.near/widget/PageFeedsEditor", "fact_widget_deployments_id": "e2e5c5023a5b4c47ccd93dd69fea5aca", "inserted_timestamp": "2023-12-14T15:50:26.715Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 8}