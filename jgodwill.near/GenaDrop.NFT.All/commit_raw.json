{"tx_hash": "AqkDnauiPYFPAGgfa93ND1GSSvEbgm9gBgVtPW5WouNT", "action_id_social": "9HDsV7jQv5XysDZ7LSyN64LAb9r9NtMB1CFKMhVPtZsf-0-widget", "block_id": 103265936, "block_timestamp": "2023-10-13T08:21:38.844Z", "signer_id": "jgodwill.near", "widget_name": "GenaDrop.NFT.All", "source_code": "const limit = props.limit ?? 475;\nconst nftContract = props.nftContract ?? \"nft.genadrop.near\";\nState.init({\n  offset: 0,\n  tokens: [],\n  hasMore: true,\n  nftCount: 0,\n});\n\nfunction fetchTokens() {\n  asyncFetch(\"https://graph.mintbase.xyz/mainnet\", {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"omni-site\",\n      \"Content-Type\": \"application/json\",\n      \"x-hasura-role\": \"anonymous\",\n    },\n    body: JSON.stringify({\n      query: `\n          query MyQuery {\n            mb_views_nft_tokens(\n                limit: ${limit},\n                offset: ${state.offset}\n              where: { nft_contract_id: { _eq: \"${nftContract}\" }}\n              order_by: {minted_timestamp: desc}\n            ) {\n            \n              media\n              owner\n              token_id\n            }\n          }\n        `,\n    }),\n  }).then((res) => {\n    if (res.ok) {\n      const tokens = res.body.data.mb_views_nft_tokens;\n      if (tokens.length > 0) {\n        State.update({\n          tokens: [...state.tokens, ...tokens],\n          offset: state.offset + limit,\n          hasMore: true,\n        });\n      } else {\n        State.update({\n          hasMore: false,\n        });\n      }\n    }\n  });\n  State.update({\n    nftCount:\n      state.nftCount > 0 ? state.tokens.length / 2 : state.tokens.length,\n  });\n}\n\nfetchTokens();\n\nfunction Sharddog({ owner, media, token }) {\n  const size = \"144px\";\n\n  return (\n    <a\n      href={`/mob.near/widget/NftImage?tokenId=${token}&contractId=${nftContract}`}\n      target=\"_blank\"\n    >\n      <Widget\n        src=\"mob.near/widget/Image\"\n        props={{\n          image: {\n            url: media,\n          },\n          style: {\n            width: size,\n            height: size,\n            objectFit: \"cover\",\n            minWidth: size,\n            minHeight: size,\n            maxWidth: size,\n            maxHeight: size,\n            overflowWrap: \"break-word\",\n          },\n        }}\n      />\n    </a>\n  );\n}\n\nconst size = \"144px\";\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(143px, 0.1fr));\n\n  @media (hover: none) {\n    grid-template-columns: repeat(auto-fill, minmax(143px, 0.1fr));\n  }\n  margin: 0 auto;\n`;\n\nconst Title = styled.h6`\n  text-align: center;\n  padding: 1rem 0;\n  font-weight: 700;\n`;\n\nconst Inst = styled.div`\n  h5{\n    text-align: center;\n    font-weight: 700;\n  }\n  padding: 1rem;\n  pre{\n    display:inline;\n  }\n`;\n\nconst loader = (\n  <div className=\"loader\" key={\"loader\"}>\n    <span\n      className=\"spinner-grow spinner-grow-sm me-1\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />\n    Loading ...\n  </div>\n);\n\nconsole.log(\"count\", state.nftCount);\nreturn (\n  <InfiniteScroll\n    pageStart={0}\n    loadMore={fetchTokens}\n    hasMore={state.hasMore}\n    loader={loader}\n  >\n    <Inst>\n      <h5>How to Send a Post to the Author as an NFT on the NEAR Blockchain</h5>\n      <ol>\n        <li>\n          Find a post with an image that you want to send to the author as an\n          NFT.\n        </li>\n        <li>\n          {\" \"}\n          Click the three dots<pre>(...)</pre> in the top right corner of the\n          post.\n        </li>\n        <li>\n          Click on <pre>\"Send this Post to the Author as a NEAR NFT\"</pre>.\n        </li>\n        <li>\n          A pop-up window will appear asking you to confirm your selection.\n        </li>\n        <li>\n          Click <pre>\"Confirm\"</pre> to send the post to the author as an NFT.\n        </li>\n      </ol>\n    </Inst>\n    <Title>NFT Count: {Math.trunc(state.nftCount)}</Title>\n    <Grid>\n      {state.tokens?.map((it) => {\n        console.log(\"It \" + it.tokenid);\n        return (\n          <Sharddog owner={it.owner} media={it.media} token={it.token_id} />\n        );\n      })}\n    </Grid>\n  </InfiniteScroll>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jgodwill.near/widget/GenaDrop.NFT.All", "fact_widget_deployments_id": "db131d8ca85e97617a99de298b1c9812", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}