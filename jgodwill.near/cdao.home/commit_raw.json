{"tx_hash": "CyFutBdkoUVQBZfvexQejifngxxhCvUXMGrPqcmohHR1", "action_id_social": "3f7vHeycNgUG54LWAufDhwYeULkj4GWJKKoGGgZJ5Pt6-0-widget", "block_id": 101048840, "block_timestamp": "2023-09-13T17:30:39.617Z", "signer_id": "jgodwill.near", "widget_name": "cdao.home", "source_code": "const Main = styled.div`\n*{\n    box-sizing: inherit;\n    text-decoration: none;\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    color: unset;\n    font-family: 'Playfair Display';\n}\n.section{\n    display: flex;\n    align-items: center;\n    padding: 1.5rem 5rem;\n}\n\n.hero{\n    width: 100%;\n    position: relative;\n    /* background: #00d8c9; */\n    background: #000000;\n    background: linear-gradient(63deg,#000000 0%, #b38b08 50%, #ffc501 100%);\n    background: -webkit-linear-gradient(63deg,#000000 0%, #b38b08 50%, #ffc501 100%);\n    background: -moz-linear-gradient(63deg,#000000 0%, #b38b08 50%, #ffc501 100%);\n    color: #fff;\n    align-content: center;\n    margin: 0 auto;\n    padding: 2rem inherit;\n    height: 100vh;\n}\n.heroRight{\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n}\n.heroLeft{\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 2rem 0px;\n}\n\n.heroTitle{\n    font-size: max(1.5rem, 5vw);\n    font-weight: 700;\n    line-height: 1.0;\n    margin-bottom: 1rem;\n}\n\n.heroBody{\n    opacity: .6;\n}\n\n.heroCTA, .artCTA{\n    margin-top: 1rem;\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    width: 100%;\n}\n\n.button{\n    padding: .5rem 1rem;\n    border-radius: 5px;\n    background-color: #fff;\n    color: #122a58;\n    font-size: 1.2rem;\n    transition: all .3s ease-in-out;\n    border: 1px solid #ffc501;\n}\n\n.heroCTA a:hover{\n    background-color: #000;\n    color: #fff;\n}\n.button.sec{\n    background: transparent;\n    color: #ffc501;\n    border: none;\n}\n.stats{\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    margin-top: 1rem;\n    padding: 1rem 0px;\n}\n.stat{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: .5rem;\n    padding: 0px 1rem;\n    text-align: center;\n    border-right: 1px solid #ffc501;\n}\n\n.stat:last-child{\n    border-right: none;\n}\n\n.statTitle{\n    font-size: 2.6rem;\n    font-weight: 700;\n    line-height: 1.0;\n}\n\n.statBody{\n    font-size: .8rem;\n    line-height: 1.0;\n  text-align: center;\n  line-height: 24px;\n  opacity: .5;\n}\n.featuredArt{\n    width: 40vw;\n    max-width: 500px;\n    height: 100%;\n    /* border-top-left-radius: 50px; */\n    /* box shadow */\n    box-shadow: 0px 0px 20px rgba(0,0,0,.5);\n    clip-path: polygon(30% 16%, 84% 16%, 84% 100%, 16% 100%, 16% 28%);\n    border-radius: .5rem;\n}\n\n.artCard{\n    /* tranluscent card */\n    border-radius: .5rem;\n    padding: 2rem;\n    margin: 1rem;\n    /* box shadow */\n    box-shadow: 0 15px 25px rgba(129, 124, 124, 0.2);\n    /* make it glass like */\n    /* background-color: rgba(255,255,255,.2); */\n    /* backdrop-filter: blur(15px); */\n    /* -webkit-backdrop-filter: blur(15px); */\n    position: absolute;\n    bottom: -60px;\n    right: -3vw;\n    width: 80%;\n    max-width: 400px;\n    height: 170px;\n    /* z-index: 1; */\n    /* glasslike more visible border */\n    border: 1px solid rgba(255,255,255,.5);\n    clip-path: polygon(26% 16%, 84% 16%, 84% 100%, 16% 100%, 16% 36%);\n    color: #ffc501;\n    padding-left:16%;\n}\n\n.featured{\n    position: relative;\n    width: fit-content;\n}\n\n.blurredBG, .artCard{\n    background: rgba(255,255,255,.2);\n}\n\n.blurredBG>.blurbg{\n    background-color: #000000dc;\n    width: 100%;\n    height: 100%;\n}\n\n.blurredBG{\n    -webkit-filter: blur(14px);\n    filter: blur(14px);\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    background-size: cover;\n}\n.cardContent{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 1rem;\n    padding: 1rem;\n    text-align: center;\n    position: absolute;\n    z-index: 1;\n    color: #ffc501 !important;\n}\n.artName{\n    font-size: .9rem;\n    font-weight: 700;\n    line-height: 1.0;\n}\n`;\n\nconst nft = props.nft ?? {\n  contractId: props.contractId,\n  tokenId: props.tokenId,\n};\n\nconst contractId = props.contractId;\nconst tokenId = props.tokenId;\nconst className = props.className ?? \"img-fluid\";\nconst style = props.style;\nconst alt = props.alt;\nconst thumbnail = props.thumbnail;\nconst fallbackUrl = props.fallbackUrl;\nconst loadingUrl =\n  props.loadingUrl ??\n  \"https://ipfs.near.social/ipfs/bafkreidoxgv2w7kmzurdnmflegkthgzaclgwpiccgztpkfdkfzb4265zuu\";\n\nState.init({\n  contractId,\n  tokenId,\n  description: \"\",\n  text: \"\",\n  message: false,\n  listings: [],\n  loadingBuying: false,\n  title: \"\",\n  owner: \"\",\n  imageUrl: null,\n});\n\nconst currentChainProps = {\n  near: {\n    img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTrJuxjGxj4QmyreE6ix4ygqm5pK9Nn_rdc8Ndw6lmJcd0SSnm2zBIc2xJ_My1V0WmK2zg&usqp=CAU\",\n    livePrice: \"near\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/near-mainnet\",\n    chain: \"near\",\n    id: \"1112\",\n    explorer: \"https://explorer.near.org/?query=\",\n    logoUrl:\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTrJuxjGxj4QmyreE6ix4ygqm5pK9Nn_rdc8Ndw6lmJcd0SSnm2zBIc2xJ_My1V0WmK2zg&usqp=CAU\",\n  },\n  aurora: {\n    img: \"https://s2.coinmarketcap.com/static/img/coins/200x200/14803.png\",\n    id: \"1313161554\",\n    chain: \"Aurora\",\n    explorer: \"https://aurorascan.dev/\",\n    explorerTx: \"https://aurorascan.dev/\",\n    livePrice: \"ethereum\",\n    contract: \"0xe93097f7C3bF7A0E0F1261c5bD88F86D878667B5\",\n    subgraph:\n      \"https://api.thegraph.com/subgraphs/name/prometheo/aurora-mainnet\",\n  },\n  arbitrum: {\n    img: \"https://assets.coingecko.com/coins/images/16547/large/photo_2023-03-29_21.47.00.jpeg?1680097630\",\n    id: \"42161\",\n    contract: \"0x27E52A81975F5Fb836e79007E3c478C6c0E6E9FB\",\n    chain: \"Arbitrum\",\n    explorer: \"https://arbiscan.io/\",\n    explorerTx: \"https://arbiscan.io/\",\n    livePrice: \"ethereum\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/arbitrum\",\n  },\n  celo: {\n    img: \"https://assets.coingecko.com/coins/images/11090/large/InjXBNx9_400x400.jpg?1674707499\",\n    id: \"42220\",\n    livePrice: \"celo\",\n    contract: \"0x5616BCcc278F7CE8B003f5a48f3754DDcfA4db5a\",\n    explorer: \"https://explorer.celo.org/address/\",\n    explorerTx: \"https://explorer.celo.org/\",\n    chain: \"Celo\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/celo-mainnet\",\n  },\n  polygon: {\n    img: \"https://altcoinsbox.com/wp-content/uploads/2023/03/matic-logo.webp\",\n    id: \"137\",\n    chain: \"Polygon\",\n    livePrice: \"matic-network\",\n    contract: \"0x57Eb0aaAf69E22D8adAe897535bF57c7958e3b1b\",\n    explorer: \"https://polygonscan.com/address/\",\n    explorerTx: \"https://polygonscan.com/\",\n    subgraph:\n      \"https://api.thegraph.com/subgraphs/name/prometheo/polygon-mainnet\",\n  },\n  aptos: {\n    img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQqBinSwbRdx76qY4A3qvVkM9g_mKoGCBDT0sqTT02TgRvKquV2Vlc8fSRmLyuhBS3-CaA&usqp=CAU\",\n  },\n  sui: {\n    img: \"https://blog.sui.io/content/images/2023/04/Sui_Droplet_Logo_Blue-3.png\",\n  },\n};\n\nconst nftMetadata =\n  nft.contractMetadata ?? Near.view(contractId, \"nft_metadata\");\nconst tokenMetadata =\n  nft.tokenMetadata ??\n  Near.view(contractId, \"nft_token\", {\n    token_id: tokenId,\n  }).metadata;\n\nif (contractId !== state.contractId || tokenId !== tokenId) {\n  State.update({\n    contractId,\n    tokenId,\n    imageUrl: null,\n  });\n}\n\nlet imageUrl = null;\n\nconst handleBuyClick = (price, owner) => {\n  const contract = new ethers.Contract(\n    currentChainProps[props.chainState].contract,\n    listAbi,\n    Ethers.provider().getSigner()\n  );\n\n  const nftContract = contractId.split(tokenId)[0];\n  State.update({\n    loadingBuying: true,\n  });\n  contract\n    .nftSale(price, tokenId, owner, nftContract, { value: price })\n    .then((transactionHash) => transactionHash.wait())\n    .then((ricit) => {\n      console.log(\"does not get hiere\", ricit);\n      State.update({\n        message: true,\n        error: false,\n        loadingBuying: false,\n        text: `${currentChainProps[props.chainState].explorerTx}/tx/${\n          ricit.transactionHash\n        }`,\n      });\n    })\n    .catch((err) => {\n      console.log(\"couldnt finish\", err);\n      State.update({\n        error: true,\n        loadingBuying: false,\n        text: err.reason,\n      });\n    });\n};\n\nfunction fetchTokens() {\n  asyncFetch(\"https://graph.mintbase.xyz/mainnet\", {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"omni-site\",\n      \"Content-Type\": \"application/json\",\n      \"x-hasura-role\": \"anonymous\",\n    },\n    body: JSON.stringify({\n      query: `\n          query MyQuery {\n              mb_views_nft_tokens(\n              where: { nft_contract_id: { _eq: \"${contractId}\" }, token_id: {_eq: \"${tokenId}\"}}\n              order_by: {minted_timestamp: desc}\n            ) {\n                attributes {\n                    attribute_display_type\n                    attribute_value\n                }\n                media \n                owner\n                token_id\n                nft_contract_id\n                description\n                title\n                listings {\n                    price\n                    unlisted_at\n                    listed_by\n                }\n            }\n          }\n        `,\n    }),\n  }).then((res) => {\n    if (res.ok) {\n      const tokens = res.body.data.mb_views_nft_tokens;\n      const token = tokens[0];\n      State.update({\n        description: token.description,\n        owner: token.owner,\n        listings: token.listings[0],\n        title: token.title,\n      });\n      if (!token && props.chainState !== (\"aptos\" || \"sui\")) {\n        let response = fetch(currentChainProps[props.chainState]?.subgraph, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            query: `\n            query MyQuery {\n             nfts(where: {tokenID: \"${tokenId}\"}) {\n                category\n                chain\n                createdAtTimestamp\n                id\n                isSold\n                isListed\n                price\n                tokenID\n                owner {\n                    id\n                }\n                tokenIPFSPath\n                transactions {\n                  price\n                }\n                }\n            }\n        `,\n          }),\n        });\n\n        const collectionData = response.body.data.nfts;\n\n        if (collectionData) {\n          const nftBody = collectionData.map((data) => {\n            const fetchIPFSData = fetch(\n              data.tokenIPFSPath.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\n            );\n\n            if (fetchIPFSData.ok) {\n              const nft = fetchIPFSData.body;\n              let nftObject = {};\n              nftObject.contract_id = data.id;\n              nftObject.sold = data.isSold;\n              nftObject.isListed = data.isListed;\n              nftObject.owner = data.owner.id;\n              nftObject.price = data.price;\n              nftObject.token_id = data.tokenID;\n              nftObject.name = nft?.name;\n              nftObject.description = nft?.description;\n              nftObject.attributes = nft?.properties;\n              nftObject.image = nft?.image.replace(\n                \"ipfs://\",\n                \"https://ipfs.io/ipfs/\"\n              );\n              return nftObject;\n            }\n          });\n          State.update({\n            title: nftBody[0].name,\n            imageUrl: nftBody[0].image,\n            owner: nftBody[0]?.owner,\n            description: nftBody[0]?.description,\n            price: nftBody[0].price,\n          });\n        }\n      }\n      if (!token) {\n        const response = fetch(\"https://api.indexer.xyz/graphql\", {\n          method: \"POST\",\n          headers: {\n            \"x-api-key\": \"Krqwh4b.bae381951d6050d351945c0c750f1510\",\n            \"x-api-user\": \"Banyan\",\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            query: `query MyQuery {\n  ${props.chainState} {\n    nfts(\n      where: { contract_id: { _eq: \"${contractId}\" }, token_id: {_eq: \"${tokenId}\"}}\n    ) {\n      contract_id\n      name\n      media_url\n      token_id\n      media_type\n      owner\n      \n      staked_owner\n      listings {\n        listed\n        price\n      }\n      attributes {\n        rarity\n        value\n        type\n        score\n      }\n     }\n     }\n    }`,\n          }),\n        });\n        const token = response.body.data[props.chainState].nfts;\n        if (token) {\n          State.update({\n            title: token[0].name,\n            listings: token[0].listings,\n            attributes: token[0].attributes,\n            imageUrl: token[0].media_url,\n          });\n        }\n      }\n    }\n  });\n}\n\nfetchTokens();\n\nif (nftMetadata && tokenMetadata) {\n  let tokenMedia = tokenMetadata.media || \"\";\n\n  imageUrl =\n    tokenMedia.startsWith(\"https://\") ||\n    tokenMedia.startsWith(\"http://\") ||\n    tokenMedia.startsWith(\"data:image\")\n      ? tokenMedia\n      : nftMetadata.base_uri\n      ? `${nftMetadata.base_uri}/${tokenMedia}`\n      : tokenMedia.startsWith(\"Qm\") || tokenMedia.startsWith(\"ba\")\n      ? `https://ipfs.near.social/ipfs/${tokenMedia}`\n      : tokenMedia;\n\n  if (!tokenMedia && tokenMetadata.reference) {\n    if (\n      nftMetadata.base_uri === \"https://arweave.net\" &&\n      !tokenMetadata.reference.startsWith(\"https://\")\n    ) {\n      const res = fetch(`${nftMetadata.base_uri}/${tokenMetadata.reference}`);\n      imageUrl = res.body.media;\n    } else if (\n      tokenMetadata.reference.startsWith(\"https://\") ||\n      tokenMetadata.reference.startsWith(\"http://\")\n    ) {\n      const res = fetch(tokenMetadata.reference);\n      imageUrl = JSON.parse(res.body).media;\n    } else if (tokenMetadata.reference.startsWith(\"ar://\")) {\n      const res = fetch(\n        `${\"https://arweave.net\"}/${tokenMetadata.reference.split(\"//\")[1]}`\n      );\n      imageUrl = JSON.parse(res.body).media;\n    }\n  }\n\n  if (!imageUrl) {\n    imageUrl = false;\n  }\n}\n\nconst replaceIpfs = (imageUrl) => {\n  if (state.oldUrl !== imageUrl && imageUrl) {\n    const match = rex.exec(imageUrl);\n    if (match) {\n      const newImageUrl = `https://ipfs.near.social/ipfs/${match[1]}${\n        match[2] || \"\"\n      }`;\n      if (newImageUrl !== imageUrl) {\n        State.update({\n          oldUrl: imageUrl,\n          imageUrl: newImageUrl,\n        });\n        return;\n      }\n    }\n  }\n  if (state.imageUrl !== false) {\n    State.update({\n      imageUrl: false,\n    });\n  }\n};\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\nconst thumb = (imageUrl) =>\n  thumbnail && imageUrl && !imageUrl.startsWith(\"data:image/\")\n    ? `https://i.near.social/${thumbnail}/${imageUrl}`\n    : imageUrl;\n\nconst img = state.imageUrl !== null ? state.imageUrl : imageUrl;\nconst src = img !== false ? img : fallbackUrl;\n\nconst closeModal = () => State.update({ message: false });\n\nconst getUsdValue = (price) => {\n  const res = fetch(\n    `https://api.coingecko.com/api/v3/simple/price?ids=${\n      currentChainProps[props.chainState]?.livePrice\n    }&vs_currencies=usd`\n  );\n  if (res.ok) {\n    const multiplyBy = Object.values(res?.body)[0]?.usd;\n    const value = multiplyBy * price.toFixed(2);\n    return value.toFixed(4) !== \"NaN\" ? `$${value.toFixed(2)}` : 0;\n  }\n};\n\nconst PRICE_CONVERSION_CONSTANT =\n  props.chainState == \"near\" ? 1000000000000000000000000 : 1000000000000000000;\nreturn (\n  <Main>\n    <div class=\"section hero\">\n      <div class=\"heroLeft\">\n        <h1 class=\"heroTitle\">We are the global community for creatives</h1>\n        <p class=\"heroBody\">\n          With CreativesDAO, artists have the freedom to express themselves and\n          create impactful projects that promote decentralization and\n          sustainability, spreading the blockchain gospel.\n        </p>\n        <div class=\"heroCTA\">\n          <a href=\"#\" class=\"button\">\n            Join Us\n          </a>\n          <a\n            href=\"https://www.creativesdao.org/funding\"\n            class=\"button sec\"\n            target=\"_blank\"\n          >\n            Apply for funding\n          </a>\n        </div>\n        {/*stats if necessary */}\n        <div class=\"stats\">\n          <div class=\"stat\">\n            <h3 class=\"statTitle\">50k</h3>\n            <span class=\"statBody\">NFTs minted</span>\n          </div>\n          <div class=\"stat\">\n            <h3 class=\"statTitle\">24+</h3>\n            <span class=\"statBody\">\n              Countries With active creative communities\n            </span>\n          </div>\n          <div class=\"stat\">\n            <h3 class=\"statTitle\">70+</h3>\n            <span class=\"statBody\">\n              DAOs Associated with Creatives DAO (50% of active DAOS on NEAR)\n            </span>\n          </div>\n        </div>\n      </div>\n      <div class=\"heroRight\">\n        <img\n          class=\"featuredArt\"\n          src={\n            src ||\n            \"https://genadrop.mypinata.cloud/ipfs/QmZbtU8RnMymJAJRpTriZgDXVeeCpm5RyXMJNquGoVc4Rb\"\n          }\n        />\n        {/*Custom artwork placed on Bid */}\n        <div class=\"artCard\">\n          <div class=\"blurredBG\">\n            <div class=\"blurbg\"></div>\n          </div>\n          <div class=\"cardContent\">\n            <div class=\"artLHS\">\n              <div class=\"artTitle\">\n                <div class=\"artName\">{state.title}</div>\n                <div class=\"artCreator\">{state.owner}</div>\n              </div>\n              <div class=\"artBody\">{state.description}</div>\n            </div>\n            <div class=\"artRHS\">\n              <div class=\"artPrice\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"section create\">\n      <h2 class=\"sectionTitle\">Create</h2>\n      <div class=\"createCards\">\n        <a href=\"#\" class=\"card\">\n          <div class=\"cardTitle\">DAO</div>\n          <div class=\"cardBody\">Create your own DAO</div>\n        </a>\n        <a href=\"#\" class=\"card\">\n          <div class=\"cardTitle\">Artist Page</div>\n          <div class=\"cardBody\">Become an artist on Creative DAO</div>\n        </a>\n        <a href=\"#\" class=\"card\">\n          <div class=\"cardTitle\">NFT</div>\n          <div class=\"cardBody\">Create an NFT</div>\n        </a>\n      </div>\n    </div>\n    <div class=\"section create\">\n      <h2 class=\"sectionTitle\">CDAO</h2>\n      {/*funds flow */}\n    </div>\n    <div class=\"section create\">\n      <h2 class=\"sectionTitle\">Case Studies</h2>\n      {/*Show 3 posts, with a see all CTA that goes to explore posts */}\n    </div>\n    <div class=\"section create\">\n      <h2 class=\"sectionTitle\">Featured NFTs</h2>\n      {/*show featured NFTs. Show More CTA */}\n    </div>\n    <div class=\"section create\">\n      <h2 class=\"sectionTitle\">Checkout our Communities</h2>\n      {/*Pages from DAO. Pin top 3 Featured communities. show more CTA */}\n    </div>\n    <div class=\"section create\">\n      <h2 class=\"sectionTitle\">Partners</h2>\n      {/*working with NDC, Near Foundation, Minority Programmers */}\n    </div>\n    <div class=\"section create\">\n      <h2 class=\"sectionTitle\">CDAO Community Calendar</h2>\n      {/*CDAO Community Calendar */}\n    </div>\n  </Main>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jgodwill.near/widget/cdao.home", "fact_widget_deployments_id": "799945df1f37ec32742f0531d92d5e1f", "inserted_timestamp": "2023-09-13T19:30:38.127Z", "modified_timestamp": "2023-09-13T19:30:38.127Z", "__row_index": 3}