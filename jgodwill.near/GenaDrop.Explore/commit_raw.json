{"tx_hash": "HA8LV9ENwHA6SPwSFnNPZ6zM2SRcdhPyg6uka1zb7p63", "action_id_social": "3aRQf9271k99ahCk2CU53GD2hYFxp82kvZHaYLdf5ZzL-0-widget", "block_id": 95954858, "block_timestamp": "2023-07-08T00:55:29.920Z", "signer_id": "jgodwill.near", "widget_name": "GenaDrop.Explore", "source_code": "const ownerId = \"minorityprogrammers.near\"; // attribution\nlet accountId = context.accountId;\ninitState({\n  inputCollectionSlug: \"genadrop-contract.nftgen.near\" || \"nft.genadrop.near\",\n  collectionSlug: \"genadrop-contract.nftgen.near\" || \"nft.genadrop.near\",\n  collectionData: {},\n  searchTerm: \"\",\n  nftData: [],\n  singleNftProps: {},\n  isNFTButtonClicked: false,\n  filteredNFTData: [],\n});\n\nconst PRICE_CONVERSION_VALUE = 1000000000000000000000000;\n\nconst nearLogo =\n  \"https://ipfs.near.social/ipfs/bafkreidptf634houwtbxryegonzyys3wnz3m75zqyxfcot5u42slwdtb2e\";\n\nconst getUsdValue = (price) => {\n  const res = fetch(\n    `https://api.coingecko.com/api/v3/simple/price?ids=Near&vs_currencies=usd`\n  );\n  if (res.ok) {\n    const multiplyBy = Object.values(res?.body)[0]?.usd;\n    const value = multiplyBy * price.toFixed(2);\n    return value.toFixed(3);\n  }\n};\n\nconst fetchData = () => {\n  State.update({ nftData: [] });\n\n  let response = fetch(\n    \"https://api.thegraph.com/subgraphs/name/prometheo/near-mainnet\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query: `\n            query MyQuery {\n             nfts( orderBy: createdAtTimestamp) {\n                category\n                chain\n                createdAtTimestamp\n                id\n                isSold\n                isListed\n                price\n                tokenID\n                owner {\n                    id\n                }\n                tokenIPFSPath\n                transactions {\n                  price\n                  txDate\n                  txId\n                  to {\n                    id\n                  }\n                  owner: from {\n                    id\n                  }\n                  type\n                }\n                }\n            }\n        `,\n      }),\n    }\n  );\n\n  console.log(response.body.data.nfts);\n  if (!response.ok) {\n    return \"Loading\";\n  }\n  const collectionData = response.body.data.nfts;\n\n  if (collectionData) {\n    const nftBody = collectionData.map((data) => {\n      const fetchIPFSData = fetch(\n        data.tokenIPFSPath.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\n      );\n\n      if (fetchIPFSData.status === 403) {\n        console.log(fetchIPFSData);\n        return State.update({ error: true });\n      }\n      if (!fetchIPFSData.ok) {\n        return \"Loading NFTS from IPFS\";\n      }\n      if (fetchIPFSData.ok) {\n        const nft = fetchIPFSData.body;\n\n        let nftObject = {};\n        nftObject.id = data.id;\n        nftObject.sold = data.isSold;\n        nftObject.isListed = data.isListed;\n        nftObject.owner = data.owner.id;\n        nftObject.price = data.price;\n        nftObject.tokenId = data.tokenID;\n        nftObject.name = nft?.name;\n        nftObject.description = nft?.description;\n        nftObject.image = nft?.image;\n        return nftObject;\n      }\n    });\n    State.update({\n      nftData: nftBody,\n    });\n  }\n};\nfetchData();\n\nconst updateInputCollectionSlug = (e) => {\n  State.update({ inputCollectionSlug: e.target.value });\n};\n\nconst handleFetchButtonClick = () => {\n  State.update({ collectionSlug: state.inputCollectionSlug });\n  fetchData();\n};\n\nconst updateCollectionSlug = (e) => {\n  State.update({ collectionSlug: e.target.value });\n};\n\nconst getRarityColor = (rarity) => {\n  if (rarity < 0.1) {\n    return \"#ee0000\";\n  } else if (rarity < 0.25) {\n    return \"#ff9900\";\n  } else if (rarity < 0.5) {\n    return \"#ffc300\";\n  } else {\n    return \"#61c700\";\n  }\n};\n\nconst seachInputHandler = (e) => {\n  const value = e.target.value.toLowerCase();\n  const searched = state.nftData.filter((nft) =>\n    nft.name.toLowerCase().includes(value)\n  );\n  State.update({\n    searchTerm: value,\n    filteredNFTData: searched,\n  });\n};\n\nconst Stats = styled.div`\n      display: flex;\n      align-items: center;\n      justify-content: space-around;\n      width: \"100%\";\n      max-width: 800px;\n      gap: 20px;\n  `;\n\nconst Main = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    margin-bottom: 20px;\n  `;\n\nconst PageTitle = styled.h1`\n  text-align:center;\n  font-size: 4vw; \n  font-weight: bold; \n  margin-bottom: 20px; \n  color: #0f1d40;\n  `;\n\nconst NFTCard = styled.div`\n   display: flex;\n   flex-flow: column nowrap;\n   -ms-flex-flow:column nowrap;\n   align-items:center;\n   background: #fff;\n   border-radius: 10px;\n   border: 1.41429px solid rgba(28,27,28,.2);\n   box-shadow: 5.65714px 5.65714px 11.3143px rgba(28,27,28,.04);\n   padding: 8px 0px;\n   background-color:#fff;\n   max-width: 350px;\n   margin: 0 auto;\n   &:hover &>div>img{\n     transform:scale(1.05);\n   }\n   .button{\n   padding: .75em 2em;\n   border-radius: .7em;\n   color: var(--main-color);\n   border: 1px solid transparent;\n   transition: all .3s;\n   cursor: pointer;\n    color: #fff;\n    background: #0d99ff;\n    &:hover{\n        color: #0d99ff;\n        background:#fff;\n    }\n  @media screen and (max-width: 540px){ \n    padding: .5em 2em;    \n    }\n    }\n    .button.inactive{\n      border: 1px solid transparent;\n      background: #c4c4c4;\n      color: #fff;\n      padding: .5em 1em;\n      cursor:not-allowed;\n    }\n  `;\n\nconst NFTCardText = styled.div`\n  width: 100%;\n  // padding: 0px 1rem;\n  `;\n\nconst NFTCards = styled.div`\n  display: grid;\n  gap: 2rem;\n  grid-template-columns: repeat(auto-fit, minmax(270px, 1fr));\n  justify-content: center;\n  background: #e4f1fb;\n  background: linear-gradient(180deg,#e4f1fb 0%, rgba(0,255,0,0) 3%);\n  background: -webkit-linear-gradient(180deg,#e4f1fb 0%, rgba(0,255,0,0) 3%);\n  background: -moz-linear-gradient(270deg,#e4f1fb 0%, rgba(0,255,0,0) 3%);\n  padding: 20px 3rem 1rem 3rem;\n  width:100%;\n`;\n\nconst ImageCard = styled.div`\n  height:250px;\n  width: 96%;\n  border-radius: 0.5rem;\n  overflow:hidden;\n  margin-bottom: .4rem;\n  &>img{\n  object-fit: cover;\n  transition: all 0.3s ease-in-out;\n  }\n  &>img:hover{\n    transform:scale(1.05);\n  }\n`;\nconst InputContainer = styled.div`\n    width:80%;\n    max-width: 700px;\n    display: flex;\n    align-items: center;\n    justify-content:center;\n    margin: 1rem auto 1rem auto;\n    &>input{\n        outline: none;\n    }\n    &>input:hover, &>input:focus{\n      border: 1px solid #0d99ff;\n      box-shadow: none;\n    }\n`;\n\nconst Hero = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n  background-image: url(https://www.genadrop.com/static/media/banner-marketplace.e5c03bb6.svg);\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-positiion: center;\n  width: 100%;\n  padding: 2rem;\n`;\n\nconst RankCard = styled.span`\n  background-color: rgba(28,27,28,.06);\n  border-radius: .5rem;\n  color: #000;\n  display: inline-block;\n  font-size: 12px;\n  font-weight: bold;\n  padding: 8px;\n`;\n\nconst PriceArea = styled.div`\n  display: flex;\n  align-items: center;\n  color: #0d99ff;\n  &>*{\n  margin: 0px;\n  padding: 0px;\n  }\n  &>h6{\n    font-weight: 700;\n    font-size: 1.2rem;\n  }\n  &>span{\n  font-size: 1.2rem;\n  margin: 0px;\n  }\n`;\nconst Logo = styled.div`\n    &>img {\n        width: 55px;\n        border-radius: 100%;\n    }\n`;\nconst HandleViewNft = (nft) => {\n  State.update({ singleNftProps: nft, isNFTButtonClicked: true });\n  console.log(nft);\n};\n\nif (state.isNFTButtonClicked) {\n  return <Widget src=\"agwaze.near/widget/GenaDrop.NFTDetails\" props={state} />;\n}\n\nconsole.log(state.nftData);\nreturn (\n  <>\n    <Hero className=\"w-100\">\n      <PageTitle>\n        Find, Buy and Sell NEAR NFTs on <br />\n        \ud83d\udca7GenaDrop\n      </PageTitle>\n      <InputContainer>\n        <input\n          type=\"search\"\n          value={state.searchTerm}\n          placeholder=\"Search NFTs\"\n          onChange={seachInputHandler}\n        />\n      </InputContainer>\n    </Hero>\n    {state.nftData.length > 0 ? (\n      <NFTCards>\n        {state.searchTerm === \"\" ? (\n          state.nftData.map((nft) => (\n            <a\n              href={`/#/mob.near/widget/MyPage?accountId=${nft.nft_state.owner}`}\n              style={{ textDecoration: \"none\", color: \"inherit\" }}\n            >\n              <NFTCard className=\"card\">\n                <ImageCard>\n                  <img\n                    src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n                    alt={nft.name}\n                    width=\"100%\"\n                    height=\"100%\"\n                    className=\"rounded-3\"\n                  />\n                </ImageCard>\n                <NFTCardText>\n                  <hr />\n                  <div className=\"d-flex my-4 justify-content-between w-100 px-2\">\n                    <RankCard>\n                      Owner: {nft.owner.slice(0, 6)}...{nft.owner.slice(38)}\n                    </RankCard>\n                  </div>\n                  <div className=\"px-2\">\n                    <h3\n                      style={{\n                        fontSize: \"16px\",\n                        margin: \"0 0 10px\",\n                        wordBreak: \"break-all\",\n                      }}\n                    >\n                      {nft.name}\n                    </h3>\n                  </div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"space-between\",\n                      marginBottom: \"5px\",\n                    }}\n                    className=\"px-2\"\n                  >\n                    <div>\n                      <div style={{ color: \"#a4a9b6\" }}>Token ID</div>\n                      <p\n                        style={{\n                          fontSize: \"14px\",\n                          marginBottom: \"5px\",\n                          color: \"#0d99ff\",\n                        }}\n                      >\n                        {nft.tokenId}\n                      </p>\n                    </div>\n                    <Logo>\n                      <img src={nearLogo} />\n                    </Logo>\n                  </div>\n                  {/*<p style={{ fontSize: \"14px\" }} className=\"px-2\">\n                    Collection: {nft.collection.slug}\n                  </p>*/}\n                  <hr />\n                  <div\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"space-between\",\n                      marginBottom: \"5px\",\n                    }}\n                    className=\"px-2\"\n                  >\n                    <div className=\"px-2\">\n                      <div style={{ color: \"#a4a9b6\", fontSize: \"1.1rem\" }}>\n                        Price\n                      </div>\n                      <PriceArea>\n                        <h6>\n                          {(nft.price / PRICE_CONVERSION_VALUE).toFixed(2)}\n                        </h6>\n                        <span>\n                          (${getUsdValue(nft.price / PRICE_CONVERSION_VALUE)})\n                        </span>\n                      </PriceArea>\n                    </div>\n                    {accountId === nft.owner ? (\n                      !nft.isListed && (\n                        //Add logic from\n                        <button className=\"button active\">List</button>\n                      )\n                    ) : !nft.isListed ? (\n                      //Add logic from\n                      <button className=\"button inactive\">Not Listed</button>\n                    ) : !nft.isSold ? (\n                      <button\n                        // onClick={() => HandleViewNft(nft)}\n                        className=\"button active\"\n                      >\n                        Buy Now{\" \"}\n                      </button>\n                    ) : (\n                      <button className=\"button inactive\">Sold</button>\n                    )}\n                  </div>\n                </NFTCardText>\n              </NFTCard>\n            </a>\n          ))\n        ) : state.filteredNFTData.length > 0 ? (\n          state.filteredNFTData.map((nft) => (\n            <a\n              href={`/#/mob.near/widget/MyPage?accountId=${nft.nft_state.owner}`}\n              style={{ textDecoration: \"none\", color: \"inherit\" }}\n            >\n              <NFTCard className=\"card\">\n                <ImageCard>\n                  <img\n                    src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n                    alt={nft.name}\n                    width=\"100%\"\n                    height=\"100%\"\n                    className=\"rounded-3\"\n                  />\n                </ImageCard>\n                <NFTCardText>\n                  <hr />\n                  <div className=\"d-flex my-4 justify-content-between w-100 px-2\">\n                    <RankCard>\n                      Owner: {nft.owner.slice(0, 6)}...{nft.owner.slice(38)}\n                    </RankCard>\n                  </div>\n                  <div className=\"px-2\">\n                    <h3\n                      style={{\n                        fontSize: \"16px\",\n                        margin: \"0 0 10px\",\n                        wordBreak: \"break-all\",\n                      }}\n                    >\n                      {nft.name}\n                    </h3>\n                  </div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"space-between\",\n                      marginBottom: \"5px\",\n                    }}\n                    className=\"px-2\"\n                  >\n                    <div>\n                      <div style={{ color: \"#a4a9b6\" }}>Token ID</div>\n                      <p\n                        style={{\n                          fontSize: \"14px\",\n                          marginBottom: \"5px\",\n                          color: \"#0d99ff\",\n                        }}\n                      >\n                        {nft.tokenId}\n                      </p>\n                    </div>\n                    <Logo>\n                      <img src={nearLogo} />\n                    </Logo>\n                  </div>\n                  {/*<p style={{ fontSize: \"14px\" }} className=\"px-2\">\n                    Collection: {nft.collection.slug}\n                  </p>*/}\n                  <hr />\n                  <div\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"space-between\",\n                      marginBottom: \"5px\",\n                    }}\n                    className=\"px-2\"\n                  >\n                    <div className=\"px-2\">\n                      <div style={{ color: \"#a4a9b6\", fontSize: \"1.1rem\" }}>\n                        Price\n                      </div>\n                      <PriceArea>\n                        <h6>\n                          {(nft.price / PRICE_CONVERSION_VALUE).toFixed(2)}\n                        </h6>\n                        <span>\n                          (${getUsdValue(nft.price / PRICE_CONVERSION_VALUE)})\n                        </span>\n                      </PriceArea>\n                    </div>\n                    {accountId === nft.owner ? (\n                      !nft.isListed && (\n                        //Add logic from\n                        <button className=\"button active\">List</button>\n                      )\n                    ) : !nft.isListed ? (\n                      //Add logic from\n                      <button className=\"button inactive\">Not Listed</button>\n                    ) : !nft.isSold ? (\n                      <button\n                        // onClick={() => HandleViewNft(nft)}\n                        className=\"button active\"\n                      >\n                        Buy Now{\" \"}\n                      </button>\n                    ) : (\n                      <button className=\"button inactive\">Sold</button>\n                    )}\n                  </div>\n                </NFTCardText>\n              </NFTCard>\n            </a>\n          ))\n        ) : (\n          <div>No results found for \"{state.searchTerm}\".</div>\n        )}\n      </NFTCards>\n    ) : (\n      <div>No NFTs available.</div>\n    )}\n    <Widget src=\"jgodwill.near/widget/GenaDrop.Footer\" />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jgodwill.near/widget/GenaDrop.Explore", "fact_widget_deployments_id": "4c85a7fb7f85243ff52f8cc441a0925c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 13}