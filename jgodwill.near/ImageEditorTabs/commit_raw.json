{"tx_hash": "A336XywHvamcwYAtXJcwBobw7onYagZ3g5TUJtxjWGjW", "action_id_social": "CMWXomGgQKSJ7paJvNNftx51XGSdQzU6HcoHYHWzNR3a-0-widget", "block_id": 108232557, "block_timestamp": "2023-12-18T07:12:59.789Z", "signer_id": "jgodwill.near", "widget_name": "ImageEditorTabs", "source_code": "const image = props.image;\nconst onChange = props.onChange;\n\nconst Tab = {\n  Upload: \"Upload\",\n  NFT: \"NFT\",\n  URL: \"URL\",\n};\n\nconst origTab = () =>\n  image.nft.contractId || image.nft.tokenId\n    ? Tab.NFT\n    : !image.ipfs_cid && image.url\n    ? Tab.URL\n    : Tab.Upload;\n\nState.init({\n  origImage: image,\n  tab: origTab(),\n  url: image.url,\n  nft: image.nft ?? {},\n  img: { cid: image.ipfs_cid },\n});\n\nconst setTab = (tab) => State.update({ tab });\n\nif (JSON.stringify(image) !== JSON.stringify(state.image)) {\n  State.update({\n    image,\n  });\n}\n\nlet localImage = {};\n\nif (state.origImage.nft.contractId || state.origImage.nft.tokenId) {\n  localImage.nft = {};\n  if (state.origImage.nft.contractId) {\n    localImage.nft.contractId = null;\n  }\n  if (state.origImage.nft.tokenId) {\n    localImage.nft.tokenId = null;\n  }\n}\nif (state.origImage.ipfs_cid) {\n  localImage.ipfs_cid = null;\n}\nif (state.origImage.url) {\n  localImage.url = null;\n}\n\nif (state.tab === Tab.NFT && (state.nft.contractId || state.nft.tokenId)) {\n  localImage.nft = {\n    contractId: state.nft.contractId || \"\",\n    tokenId: state.nft.tokenId || \"\",\n  };\n} else if (state.tab === Tab.Upload && state.img.cid) {\n  localImage.ipfs_cid = state.img.cid;\n}\nif (state.tab === Tab.URL && state.url) {\n  localImage.url = state.url;\n}\n\nif (onChange && JSON.stringify(image) !== JSON.stringify(localImage)) {\n  onChange(localImage);\n}\n\nconst debounce = (func, wait) => {\n  const pause = wait || 350;\n  let timeout;\n\n  return (args) => {\n    const later = () => {\n      clearTimeout(timeout);\n      func(args);\n    };\n\n    clearTimeout(timeout);\n    timeout = setTimeout(later, pause);\n  };\n};\n\nconst onNFTChange = debounce((e) => {\n  State.update({\n    nft: {\n      ...state.nft,\n      [e.target.id]: e.target.value,\n    },\n  });\n});\nconst onImageChange = debounce((e) => {\n  State.update({\n    [e.target.id]: e.target.value,\n  });\n});\n\nconst Wrap = styled.div`\n .nav-tabs{\n    background: #fbfbfb;\n    font-weight: 500;\n    --bs-nav-pills-border-radius: 0;\n    --bs-nav-link-color: #B0B0B0;\n    --bs-nav-pills-link-active-color: #000;\n    --bs-nav-pills-link-active-bg: #fbfbfb;\n    --bs-nav-link-padding-y: 0.75rem;\n    border-bottom: 1px solid #eee;\n    padding-top: 3px;\n  }\n  .nav-link.active {\n    border-bottom: 3px solid #000;\n    font-weight: 600;\n  }\n\n  .nav-item:hover {\n    background: rgba(0, 0, 0, 0.15);\n    *{color: #000 !important;}\n  }\n\n  margin: 0 -12px;\n`;\n\nreturn (\n  <Wrap>\n    <ul className={`nav nav-tabs`}>\n      <li className=\"nav-item\">\n        <button\n          className={`nav-link ${state.tab === Tab.Upload ? \"active\" : \"\"}`}\n          aria-current=\"page\"\n          onClick={() => setTab(Tab.Upload)}\n        >\n          Upload\n        </button>\n      </li>\n      <li className=\"nav-item\">\n        <button\n          className={`nav-link ${state.tab === Tab.NFT ? \"active\" : \"\"}`}\n          aria-current=\"page\"\n          onClick={() => setTab(Tab.NFT)}\n        >\n          NFT\n        </button>\n      </li>\n      <li className=\"nav-item\">\n        <button\n          className={`nav-link ${state.tab === Tab.URL ? \"active\" : \"\"}`}\n          aria-current=\"page\"\n          onClick={() => setTab(Tab.URL)}\n        >\n          URL\n        </button>\n      </li>\n    </ul>\n    <div\n      className=\"p-2\"\n      style={{\n        background: \"#fdfdfd\",\n        border: \"solid 1px #dee2e6\",\n        borderTop: 0,\n        borderBottomLeftRadius: \".375rem\",\n        borderBottomRightRadius: \".375rem\",\n        minHeight: \"9em\",\n      }}\n    >\n      <div className={`${state.tab === Tab.Upload ? \"\" : \"visually-hidden\"}`}>\n        <IpfsImageUpload image={state.img} />\n      </div>\n      <div className={`${state.tab === Tab.NFT ? \"\" : \"visually-hidden\"}`}>\n        NFT contract\n        <input\n          type=\"text\"\n          id=\"contractId\"\n          defaultValue={state.nft.contractId}\n          onChange={onNFTChange}\n        />\n        NFT token id\n        <input\n          type=\"text\"\n          id=\"tokenId\"\n          defaultValue={state.nft.tokenId}\n          onChange={onNFTChange}\n        />\n      </div>\n      <div className={`${state.tab === Tab.URL ? \"\" : \"visually-hidden\"}`}>\n        Image URL\n        <input\n          type=\"text\"\n          id=\"url\"\n          defaultValue={state.url}\n          onChange={onImageChange}\n        />\n      </div>\n    </div>\n  </Wrap>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/jgodwill.near/widget/ImageEditorTabs", "fact_widget_deployments_id": "987aefec32d17ba58f227d7fffd16419", "inserted_timestamp": "2023-12-18T09:23:01.629Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 0}