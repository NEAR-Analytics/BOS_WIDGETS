{"tx_hash": "8Y8qGn4rhix2gftxi9TAGUiVVv8frWu3hFsonu82Z8PF", "action_id_social": "FtqVF5hLRxmXEtxxVDt1dfqXdMsnXsAgM51g5v9ZZv7c-0-widget", "block_id": 104057626, "block_timestamp": "2023-10-23T21:32:15.659Z", "signer_id": "jgodwill.near", "widget_name": "CPlanet.Common.Compose", "source_code": "const autocompleteEnabled = props.autocompleteEnabled ?? true;\n\nif (state.image === undefined) {\n  State.init({\n    image: {},\n    text: props.initialText || \"\",\n    nftChainState: \"\",\n  });\n\n  if (props.onHelper) {\n    const extractMentions = (text) => {\n      const mentionRegex =\n        /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\n      mentionRegex.lastIndex = 0;\n      const accountIds = new Set();\n      for (const match of text.matchAll(mentionRegex)) {\n        if (\n          !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n          !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length)) &&\n          match[1].length >= 2 &&\n          match[1].length <= 64\n        ) {\n          accountIds.add(match[1].toLowerCase());\n        }\n      }\n      return [...accountIds];\n    };\n\n    const extractHashtags = (text) => {\n      const hashtagRegex = /#(\\w+)/gi;\n      hashtagRegex.lastIndex = 0;\n      const hashtags = new Set();\n      for (const match of text.matchAll(hashtagRegex)) {\n        if (\n          !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n          !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length))\n        ) {\n          hashtags.add(match[1].toLowerCase());\n        }\n      }\n      return [...hashtags];\n    };\n\n    const extractMentionNotifications = (text, item) =>\n      extractMentions(text || \"\")\n        .filter((accountId) => accountId !== context.accountId)\n        .map((accountId) => ({\n          key: accountId,\n          value: {\n            type: \"mention\",\n            item,\n          },\n        }));\n\n    props?.onHelper({\n      extractHashtags,\n      extractMentions,\n      extractTagNotifications: extractMentionNotifications,\n      extractMentionNotifications,\n    });\n  }\n}\nState.init({\n  isChecked: false,\n  nftChainState: \"Near\",\n});\n\nconst chains = [\n  {\n    id: \"137\",\n    name: \"Polygon\",\n    url: \"https://ipfs.near.social/ipfs/bafkreie5h5oq6suoingcwuzj32m3apv56rl56wpwpaxmevlk5vndlypxze\",\n  },\n  {\n    id: \"1313161554\",\n    name: \"Aurora\",\n    url: \"https://ipfs.near.social/ipfs/bafkreiajqik4gjbmkh7z2gylpjzrsuht7simjecpxuoqn6icqfbioswzuy\",\n  },\n  {\n    id: \"42220\",\n    name: \"Celo\",\n    url: \"https://ipfs.near.social/ipfs/bafkreifu6ufsdf2ivrs5febt7l25wdys6odzfelgjauzod7owrfug56cxe\",\n  },\n  {\n    id: \"43114\",\n    name: \"Avax\",\n    url: \"https://ipfs.near.social/ipfs/bafkreifhu5fytsjcmjluarfnu6kcdhaqz4rgdrbbzf6dlsmggqb7oi3w4e\",\n  },\n  {\n    id: \"42161\",\n    name: \"Arbitrum\",\n    url: \"https://ipfs.near.social/ipfs/bafkreiffax4lnya337rz5ph75faondeqmpy6xj37yprwvxbru4qc5emsiq\",\n  },\n  {\n    id: \"0\",\n    name: \"Near\",\n    url: \"https://ipfs.near.social/ipfs/bafkreigv55ubnx3tfhbf56toihekuxvgzfqn5c3ndbfjcg3e4uvaeuy5cm\",\n  },\n];\n\nconst updateChain = (chain) => {\n  State.update({ nftChainState: chain });\n};\n\nconst content = (state.text ||\n  state.image.cid ||\n  state?.nftContractId ||\n  state?.nftTokenId ||\n  state?.nftChainState) && {\n  type: \"md\",\n  text: state.text,\n  image: state.image.cid ? { ipfs_cid: state.image.cid } : undefined,\n  embeddedNFT: {\n    contractId: state.nftContractId,\n    tokenId: state.nftTokenId,\n    chain: state.nftChainState,\n  },\n};\n\nif (content && props.extraContent) {\n  Object.assign(content, props.extraContent);\n}\n\nfunction autoCompleteAccountId(id) {\n  let text = state.text.replace(/[\\s]{0,1}@[^\\s]*$/, \"\");\n  text = `${text} @${id}`.trim() + \" \";\n  State.update({ text, showAccountAutocomplete: false });\n}\n\nconst onChange = (text) => {\n  const showAccountAutocomplete = /@[\\w][^\\s]*$/.test(text);\n  State.update({ text, showAccountAutocomplete });\n};\n\nconst jContent = JSON.stringify(content);\nif (props.onChange && jContent !== state.jContent) {\n  State.update({\n    jContent,\n  });\n  props.onChange({ content });\n}\n\nconst onCompose = () => {\n  State.update({\n    image: {},\n    text: \"\",\n    embeddedNFT: {},\n  });\n};\n\nconst TextareaWrapper = styled.div`\n    display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n\n  textarea {\n    display: flex;\n    align-items: center;\n    transition: all 0.3s ease;\n  }\n\n  textarea::placeholder {\n    padding-top: 4px;\n    font-size: 20px;\n  }\n\n  textarea:focus::placeholder {\n    font-size: inherit;\n    padding-top: 0px;\n  }\n\n  &::after,\n  textarea, iframe {\n    width: 100%;\n    padding: 8px 0;\n    min-width: 1em;\n    height: unset;\n    min-height: 3em;\n    font: inherit;\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: 0px solid #eee;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n  }\n\n  iframe {\n    padding: 0;\n  }\n\n  textarea:focus, textarea:not(:empty) {\n    border-bottom: 1px solid #eee;\n    min-height: 5em;\n  }\n\n  &::after {\n    content: attr(data-value) ' ';\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n  &.markdown-editor::after {\n    padding-top: 66px;\n    font-family: monospace;\n    font-size: 14px;\n  }\n`;\n\nconst EmbedNFT = styled.div`\n  margin: 10px;\n`;\n\n//\n\n// const Overlay = styled.div`\n//   position: absolute;\n//   top: 0;\n//   left: 0;\n//   right: 0;\n//   bottom: 0;\n//   background-color: rgba(0, 0, 0, 0.5);\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n//   z-index: 10;\n//   height: 100vh;\n//   width: 100vw;\n// `;\n\nconst Content = styled.div`\n  // background-color: white;\n  padding: 20px;\n  border-radius: .5rem;\n  margin-top: 2rem;\n  // border: 4px solid rgba(13, 154, 255, 0.317);\n`;\n\nconst Title = styled.h3`\n  margin-bottom: 10px;\n`;\n\nconst Button = styled.div`\nbackground: transparent;\nfont-weight: 600;\ncursor: pointer;\n`;\n\nconst Input = styled.input`\n  display: block;\n  padding:.5em;\n  width:100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus{\n    border:1px solid #0d99ff;\n  }\n  ::placeholder {\n    color: palevioletred;\n  }\n`;\n\nconst Card = styled.div`\npadding: 1em;\nborder: 1px solid #e5e8eb;\ngap: 2em;\nmargin: 10px auto;\nborder-radius: .7em;\n`;\n\nconst handleCheckboxChange = () => {\n  State.update({ isChecked: !state.isChecked, isOpen: true });\n};\n\nconst onClose = () => {\n  State.update({\n    isOpen: false,\n    isChecked: false,\n    nftChainState: \"Near\",\n  });\n};\n\n// if (state.isChecked === true) {\n//   State.update({\n//     nftChainState: \"Near\",\n//   });\n// }\nif (state.isChecked === false) {\n  State.update({\n    nftChainState: \"\",\n  });\n}\n\nconsole.log(state.isChecked);\n\nconst onChangeContractID = (contractId) => {\n  State.update({\n    nftContractId: contractId,\n  });\n};\n\nconst onChangeTokenID = (tokenId) => {\n  State.update({\n    nftTokenId: tokenId,\n  });\n};\n// const onOpen = () =>{\n//   State.update({\n//     isOpen: true\n//   })\n// }\n// console.log(state.isChecked);\nconsole.log(content);\nreturn (\n  <div className=\"text-bg-light rounded-4\">\n    <TextareaWrapper className=\"p-3\" data-value={state.text || \"\"}>\n      <textarea\n        value={state.text || \"\"}\n        onInput={(event) => onChange(event.target.value)}\n        onKeyUp={(event) => {\n          if (event.key === \"Escape\") {\n            State.update({ showAccountAutocomplete: false });\n          }\n        }}\n        placeholder={props.placeholder ?? \"What's happening?\"}\n      />\n\n      {autocompleteEnabled && state?.showAccountAutocomplete && (\n        <div className=\"pt-1 w-100 overflow-hidden\">\n          <Widget\n            src=\"mob.near/widget/AccountAutocomplete\"\n            props={{\n              term: state.text.split(\"@\").pop(),\n              onSelect: autoCompleteAccountId,\n              onClose: () => State.update({ showAccountAutocomplete: false }),\n            }}\n          />\n        </div>\n      )}\n    </TextareaWrapper>\n    <div className=\"d-flex flex-row p-2 border-top\">\n      <div className=\"flex-grow-1\">\n        {!state.isChecked && (\n          <IpfsImageUpload\n            image={state.image}\n            className=\"btn btn-outline-secondary border-0 rounded-3\"\n          />\n        )}\n        {!state.image.cid && (\n          <EmbedNFT>\n            <div className=\"form-check form-switch embed\">\n              <input\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                role=\"switch\"\n                id=\"embed\"\n                checked={state.isChecked}\n                onChange={handleCheckboxChange}\n              />\n              <label htmlFor=\"embed\">Embed an NFT</label>\n            </div>\n            {state.isChecked && (\n              <div>\n                <Card>\n                  <div className=\"d-flex align-center text-center gap-2\">\n                    <div>Select Chain</div>\n                    <Widget\n                      src=\"jgodwill.near/widget/GenaDrop.ChainsDropdown\"\n                      props={{ chains: chains, updateChain }}\n                    />\n                  </div>\n                  {state.nftChainState && (\n                    <Card>\n                      <h4>Enter the NFT details</h4>\n                      <Card>\n                        NFT Contract ID:\n                        <Input\n                          type=\"text\"\n                          onChange={(e) => onChangeContractID(e.target.value)}\n                          value={state.nftContractId}\n                        />\n                      </Card>\n                      <Card>\n                        NFT Token Id:\n                        <Input\n                          type=\"text\"\n                          onChange={(e) => onChangeTokenID(e.target.value)}\n                          value={state.nftTokenId}\n                        />\n                      </Card>\n                      {/*state.nftContractId && state.nftTokenId && (\n                      <Widget\n                        src=\"jgodwill.near/widget/GenaDrop.NFTEmbedPreview\"\n                        props={{\n                          contractId: state.nftContractId,\n                          tokenId: state.nftTokenId,\n                          chainState: state.nftChainState.toLowerCase(),\n                        }}\n                      />\n                    )*/}\n                    </Card>\n                  )}\n                </Card>\n              </div>\n            )}\n          </EmbedNFT>\n        )}\n      </div>\n      <div>{props.composeButton && props.composeButton(onCompose)}</div>\n    </div>\n  </div>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/jgodwill.near/widget/CPlanet.Common.Compose", "fact_widget_deployments_id": "2630493855ae463f997fa9e6fe565ee3", "inserted_timestamp": "2023-10-23T23:32:19.358Z", "modified_timestamp": "2023-10-23T23:32:19.358Z", "__row_index": 3}