{"tx_hash": "J6CJv1QYNsRbnG4Rt263xrC6JUWrJMVJqAaMdPUnb5Ly", "action_id_social": "CxCJaDYgRUmfrzgGsRvsmu8AEBoUWi2HqEQBbzwcupqB-0-widget", "block_id": 103284379, "block_timestamp": "2023-10-13T14:07:14.797Z", "signer_id": "jgodwill.near", "widget_name": "GenaDrop.NFTEmbedPreview", "source_code": "const nft = props.nft ?? {\n  contractId: props.contractId,\n  tokenId: props.tokenId,\n};\n\nconst contractId = props.contractId;\nconst tokenId = props.tokenId;\nconst className = props.className ?? \"img-fluid\";\nconst style = props.style;\nconst alt = props.alt;\nconst thumbnail = props.thumbnail;\nconst fallbackUrl = props.fallbackUrl;\nconst loadingUrl =\n  props.loadingUrl ??\n  \"https://ipfs.near.social/ipfs/bafkreidoxgv2w7kmzurdnmflegkthgzaclgwpiccgztpkfdkfzb4265zuu\";\n\nState.init({\n  contractId,\n  tokenId,\n  description: \"\",\n  text: \"\",\n  message: false,\n  listings: [],\n  loadingBuying: false,\n  title: \"\",\n  owner: \"\",\n  imageUrl: null,\n});\n\nconst profile = props.profile ?? Social.getr(`${state.owner}/profile`);\n\nconst currentChainProps = {\n  near: {\n    img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTrJuxjGxj4QmyreE6ix4ygqm5pK9Nn_rdc8Ndw6lmJcd0SSnm2zBIc2xJ_My1V0WmK2zg&usqp=CAU\",\n    livePrice: \"near\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/near-mainnet\",\n    chain: \"near\",\n    id: \"1112\",\n    explorer: \"https://explorer.near.org/?query=\",\n    logoUrl:\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTrJuxjGxj4QmyreE6ix4ygqm5pK9Nn_rdc8Ndw6lmJcd0SSnm2zBIc2xJ_My1V0WmK2zg&usqp=CAU\",\n  },\n  aurora: {\n    img: \"https://s2.coinmarketcap.com/static/img/coins/200x200/14803.png\",\n    id: \"1313161554\",\n    chain: \"Aurora\",\n    explorer: \"https://aurorascan.dev/\",\n    explorerTx: \"https://aurorascan.dev/\",\n    livePrice: \"ethereum\",\n    contract: \"0xe93097f7C3bF7A0E0F1261c5bD88F86D878667B5\",\n    subgraph:\n      \"https://api.thegraph.com/subgraphs/name/prometheo/aurora-mainnet\",\n  },\n  arbitrum: {\n    img: \"https://assets.coingecko.com/coins/images/16547/large/photo_2023-03-29_21.47.00.jpeg?1680097630\",\n    id: \"42161\",\n    contract: \"0x27E52A81975F5Fb836e79007E3c478C6c0E6E9FB\",\n    chain: \"Arbitrum\",\n    explorer: \"https://arbiscan.io/\",\n    explorerTx: \"https://arbiscan.io/\",\n    livePrice: \"ethereum\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/arbitrum\",\n  },\n  celo: {\n    img: \"https://assets.coingecko.com/coins/images/11090/large/InjXBNx9_400x400.jpg?1674707499\",\n    id: \"42220\",\n    livePrice: \"celo\",\n    contract: \"0x5616BCcc278F7CE8B003f5a48f3754DDcfA4db5a\",\n    explorer: \"https://explorer.celo.org/address/\",\n    explorerTx: \"https://explorer.celo.org/\",\n    chain: \"Celo\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/celo-mainnet\",\n  },\n  polygon: {\n    img: \"https://altcoinsbox.com/wp-content/uploads/2023/03/matic-logo.webp\",\n    id: \"137\",\n    chain: \"Polygon\",\n    livePrice: \"matic-network\",\n    contract: \"0x57Eb0aaAf69E22D8adAe897535bF57c7958e3b1b\",\n    explorer: \"https://polygonscan.com/address/\",\n    explorerTx: \"https://polygonscan.com/\",\n    subgraph:\n      \"https://api.thegraph.com/subgraphs/name/prometheo/polygon-mainnet\",\n  },\n  aptos: {\n    img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQqBinSwbRdx76qY4A3qvVkM9g_mKoGCBDT0sqTT02TgRvKquV2Vlc8fSRmLyuhBS3-CaA&usqp=CAU\",\n  },\n  sui: {\n    img: \"https://blog.sui.io/content/images/2023/04/Sui_Droplet_Logo_Blue-3.png\",\n  },\n};\n\nconst listAbi = [\n  \"function createMarketplaceItem(address nftContract, uint256 tokenId, uint256 price, string calldata category, address seller) public payable {}\",\n  \"function nftSale(uint256 price, uint256 tokenId, address seller, address nftContract) public payable {}\",\n];\n\nconst NoNFTLoading = styled.div`\n  width: 100%;\n  min-height: 80vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst nftMetadata =\n  nft.contractMetadata ?? Near.view(contractId, \"nft_metadata\");\nconst tokenMetadata =\n  nft.tokenMetadata ??\n  Near.view(contractId, \"nft_token\", {\n    token_id: tokenId,\n  }).metadata;\n\nif (contractId !== state.contractId || tokenId !== tokenId) {\n  State.update({\n    contractId,\n    tokenId,\n    imageUrl: null,\n  });\n}\n\nlet imageUrl = null;\n\nconst handleBuyClick = (price, owner) => {\n  const contract = new ethers.Contract(\n    currentChainProps[props.chainState].contract,\n    listAbi,\n    Ethers.provider().getSigner()\n  );\n\n  const nftContract = contractId.split(tokenId)[0];\n  State.update({\n    loadingBuying: true,\n  });\n  contract\n    .nftSale(price, tokenId, owner, nftContract, { value: price })\n    .then((transactionHash) => transactionHash.wait())\n    .then((ricit) => {\n      console.log(\"does not get hiere\", ricit);\n      State.update({\n        message: true,\n        error: false,\n        loadingBuying: false,\n        text: `${currentChainProps[props.chainState].explorerTx}/tx/${\n          ricit.transactionHash\n        }`,\n      });\n    })\n    .catch((err) => {\n      console.log(\"couldnt finish\", err);\n      State.update({\n        error: true,\n        loadingBuying: false,\n        text: err.reason,\n      });\n    });\n};\n\nfunction fetchTokens() {\n  asyncFetch(\"https://graph.mintbase.xyz/mainnet\", {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"omni-site\",\n      \"Content-Type\": \"application/json\",\n      \"x-hasura-role\": \"anonymous\",\n    },\n    body: JSON.stringify({\n      query: `\n          query MyQuery {\n              mb_views_nft_tokens(\n              where: { nft_contract_id: { _eq: \"${contractId}\" }, token_id: {_eq: \"${tokenId}\"}}\n              order_by: {minted_timestamp: desc}\n            ) {\n                attributes {\n                    attribute_display_type\n                    attribute_value\n                }\n                media \n                owner\n                token_id\n                nft_contract_id\n                description\n                title\n                listings {\n                    price\n                    unlisted_at\n                    listed_by\n                }\n            }\n          }\n        `,\n    }),\n  }).then((res) => {\n    if (res.ok) {\n      const tokens = res.body.data.mb_views_nft_tokens;\n      const token = tokens[0];\n      State.update({\n        description: token.description,\n        owner: token.owner,\n        listings: token.listings[0],\n        title: token.title,\n      });\n      if (!token && props.chainState !== (\"aptos\" || \"sui\")) {\n        let response = fetch(currentChainProps[props.chainState]?.subgraph, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            query: `\n            query MyQuery {\n             nfts(where: {tokenID: \"${tokenId}\"}) {\n                category\n                chain\n                createdAtTimestamp\n                id\n                isSold\n                isListed\n                price\n                tokenID\n                owner {\n                    id\n                }\n                tokenIPFSPath\n                transactions {\n                  price\n                }\n                }\n            }\n        `,\n          }),\n        });\n        const collectionData = response.body.data.nfts;\n\n        if (collectionData) {\n          const nftBody = collectionData.map((data) => {\n            const fetchIPFSData = fetch(\n              data.tokenIPFSPath.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\n            );\n\n            if (fetchIPFSData.ok) {\n              const nft = fetchIPFSData.body;\n              let nftObject = {};\n              nftObject.contract_id = data.id;\n              nftObject.sold = data.isSold;\n              nftObject.isListed = data.isListed;\n              nftObject.owner = data.owner.id;\n              nftObject.price = data.price;\n              nftObject.token_id = data.tokenID;\n              nftObject.name = nft?.name;\n              nftObject.description = nft?.description;\n              nftObject.attributes = nft?.properties;\n              nftObject.image = nft?.image.replace(\n                \"ipfs://\",\n                \"https://ipfs.io/ipfs/\"\n              );\n              return nftObject;\n            }\n          });\n          State.update({\n            title: nftBody[0].name,\n            imageUrl: nftBody[0].image,\n            owner: nftBody[0]?.owner,\n            description: nftBody[0]?.description,\n            price: nftBody[0].price,\n          });\n        }\n      }\n      if (!token) {\n        const response = fetch(\"https://api.indexer.xyz/graphql\", {\n          method: \"POST\",\n          headers: {\n            \"x-api-key\": \"Krqwh4b.bae381951d6050d351945c0c750f1510\",\n            \"x-api-user\": \"Banyan\",\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            query: `query MyQuery {\n  ${props.chainState} {\n    nfts(\n      where: { contract_id: { _eq: \"${contractId}\" }, token_id: {_eq: \"${tokenId}\"}}\n    ) {\n      contract_id\n      name\n      media_url\n      token_id\n      media_type\n      owner\n      \n      staked_owner\n      listings {\n        listed\n        price\n      }\n      attributes {\n        rarity\n        value\n        type\n        score\n      }\n     }\n     }\n    }`,\n          }),\n        });\n        const token = response.body.data[props.chainState].nfts;\n        if (token) {\n          State.update({\n            title: token[0].name,\n            listings: token[0].listings,\n            attributes: token[0].attributes,\n            imageUrl: token[0].media_url,\n          });\n        }\n      }\n    }\n  });\n}\n\nfetchTokens();\n\nif (props.contractId && props.tokenId && !state.title) {\n  return (\n    <NoNFTLoading>\n      <img\n        src=\"https://ipfs.near.social/ipfs/bafkreidoxgv2w7kmzurdnmflegkthgzaclgwpiccgztpkfdkfzb4265zuu\"\n        alt=\"\"\n      />\n    </NoNFTLoading>\n  );\n}\nif (nftMetadata && tokenMetadata) {\n  let tokenMedia = tokenMetadata.media || \"\";\n\n  imageUrl =\n    tokenMedia.startsWith(\"https://\") ||\n    tokenMedia.startsWith(\"http://\") ||\n    tokenMedia.startsWith(\"data:image\")\n      ? tokenMedia\n      : nftMetadata.base_uri\n      ? `${nftMetadata.base_uri}/${tokenMedia}`\n      : tokenMedia.startsWith(\"Qm\") || tokenMedia.startsWith(\"ba\")\n      ? `https://ipfs.near.social/ipfs/${tokenMedia}`\n      : tokenMedia;\n\n  if (!tokenMedia && tokenMetadata.reference) {\n    if (\n      nftMetadata.base_uri === \"https://arweave.net\" &&\n      !tokenMetadata.reference.startsWith(\"https://\")\n    ) {\n      const res = fetch(`${nftMetadata.base_uri}/${tokenMetadata.reference}`);\n      imageUrl = res.body.media;\n    } else if (\n      tokenMetadata.reference.startsWith(\"https://\") ||\n      tokenMetadata.reference.startsWith(\"http://\")\n    ) {\n      const res = fetch(tokenMetadata.reference);\n      imageUrl = JSON.parse(res.body).media;\n    } else if (tokenMetadata.reference.startsWith(\"ar://\")) {\n      const res = fetch(\n        `${\"https://arweave.net\"}/${tokenMetadata.reference.split(\"//\")[1]}`\n      );\n      imageUrl = JSON.parse(res.body).media;\n    }\n  }\n\n  if (!imageUrl) {\n    imageUrl = false;\n  }\n}\n\nconst replaceIpfs = (imageUrl) => {\n  if (state.oldUrl !== imageUrl && imageUrl) {\n    const match = rex.exec(imageUrl);\n    if (match) {\n      const newImageUrl = `https://ipfs.near.social/ipfs/${match[1]}${\n        match[2] || \"\"\n      }`;\n      if (newImageUrl !== imageUrl) {\n        State.update({\n          oldUrl: imageUrl,\n          imageUrl: newImageUrl,\n        });\n        return;\n      }\n    }\n  }\n  if (state.imageUrl !== false) {\n    State.update({\n      imageUrl: false,\n    });\n  }\n};\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nif (state.sender === undefined) {\n  const accounts = Ethers?.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\nconst thumb = (imageUrl) =>\n  thumbnail && imageUrl && !imageUrl.startsWith(\"data:image/\")\n    ? `https://i.near.social/${thumbnail}/${imageUrl}`\n    : imageUrl;\n\nconst img = state.imageUrl !== null ? state.imageUrl : imageUrl;\nconst src = img !== false ? img : fallbackUrl;\n\nconst Root = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    padding: 0;\n    align-items: center;\n    justify-content: center;\n`;\nconst MainContainer = styled.div`\n    padding: 30px;\n    height: auto;\n    max-width: 1300px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst TopSection = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  justify-content: center;\n  width: 100%;\n  @media screen and (max-width: 600px) {\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nconst TopImageContainer = styled.div`\n  padding: 1em;\n  background: #ffffff;\n    width: 50%;\n    min-width: 355px;\n  // border: 2px solid #cacdd5;\n  border: 4px solid rgba(13, 154, 255, 0.317);\n  margin-right: 20px;\n  box-shadow: 2px 7px 22px rgba(28, 27, 28, 0.1);\n  border-radius: 0.7em;\n  .Top-section{\n    display: flex;\n    justify-content: space-between;\n    padding: 0 .4rem;\n  }\n  &>img {\n    width: 100%;\n  }\n`;\n\nconst loadingAnimation = styled.keyframes`\n  0% { content: \"Loading\"; }\n  25% { content: \"Loading.\"; }\n  50% { content: \"Loading..\"; }\n  75% { content: \"Loading...\"; }\n`;\n\n// const BuyButton = styled.button`\n//   padding: 10px 15px;\n//   font-size: 14px;\n//   margin-top: 20px;\n//   background-color: #007bff;\n//   color: #fff;\n//   width:  120px;\n//   border-radius: 16px;\n//   border: none;\n//   cursor: pointer;\n//   transition: background-color 0.3s ease;\n\n//   &:hover {\n//     background-color: #0056b3;\n//   }\n//   &.loading {\n//     background: #0056b5;\n//     cursor: not-allowed;\n//   }\n//   &.loading::before {\n//     content: \"Loading\";\n//     animation: ${loadingAnimation} 1s infinite;\n//     display: inline-block;\n//   }\n// `;\n\nconst HeaderText = styled.h1`\n  font-size: 1.5rem;\n`;\n\nconst Logo = styled.div`\n    &>img {\n        width: 30px;\n        margin-right: 5px;\n    }\n`;\n\nconst RightSection = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    margin-right: 10px;\n`;\n\nconst Description = styled.div`\n     width: 100%;\n    border-radius: 1em;\n    background: #ffffff;\n    border: 2px solid #eeeff2;\n    padding: 1em;\n    margin-top: 10px;\n    box-shadow: 2px 7px 22px rgba(28, 27, 28, 0.1);\n    &>h6{\n        font-weight: 600;\n        font-size: 1.5rem;\n    }\n    \n`;\n\nconst AttributeContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n`;\n\nconst SwapButton = styled.button`\n  background: white;\n  padding: 5px 7px;\n  width: 90px;\n  border-radius: 8px;\n  border: 1px solid #0d99ff;\n  color: #0d99ff;\n`;\n\nconst Attribute = styled.div`\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    padding: 0.5em;\n    border-radius: 0.5em;\n    width: 206px;\n    background: #fafafb;\n    margin-bottom: 20px;\n    border: 1px solid #86ccff;\n    border-radius: 10.6849px;\n    &>*span {\n        padding: 0;\n        color: #b2b7c2;\n    }\n`;\n\nconst TransactionTable = styled.div`\n     width: 100%;\n  max-width: 70%;\n  background: #ffffff;\n  border: 2px solid #eeeff2;\n  box-shadow: 2px 7px 22px rgba(28, 27, 28, 0.1);\n  border-radius: 16px;\n  margin-bottom: 40px;\n`;\n\nconst TableHeader = styled.div`\n    width: 100%;\n  padding: 0.5em;\n  font-weight: 600;\n  font-size: 1.5rem;\n  margin-bottom: 0.5em;\n  display: flex;\n  justify-content: flex-start;\n  gap: 1em;\n  background: #f5f6f7;\n  border-radius: 14px 14px 0px 0px;\n  &>h1 {\n    font-size: 24px;\n  }\n`;\n\nconst TableBody = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    padding: 0.5em;\n    justify-content: space-between;\n    border-bottom: 1px solid #dde1e6;\n`;\n\nconst RowType = styled.div`\n     display: inline-flex;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 0.5em;\n  font-size: 0.75rem;\n  padding: 0.25em 1em;\n  border-radius: 0.7em;\n  border: 1px solid #a4a9b6;\n`;\n\nconst RowBody = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-top: 10px;\n    padding-left: 7px;\n    width: 100%;\n    justify-content: space-between;\n    p {\n        margin: 0;\n        border-bottom: 1px solid #e5e8eb;\n        font-size: 12px;\n        min-width: 100px;\n        text-align: center;\n    }\n    span {\n        font-size: 12px;\n    }\n`;\n\nconst Popup = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  backdrop-filter: blur(5px); /* Apply background blur */\n  \n`;\n\nconst MintDetails = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n    color: #525c76;\n    &>span {\n        font-size: 14px;\n    }\n    &>a {\n        cursor: pointer;\n    }\n`;\n\n// const HandleList = () => {\n//   console.log(props.singleNftProps);\n// };\n\nconst closeModal = () => State.update({ message: false });\n\nconst ownerName = profile.name;\nconsole.log(ownerName);\nreturn (\n  <Root>\n    <MainContainer>\n      <TopSection>\n        <TopImageContainer>\n          <div className=\"Top-section\">\n            <HeaderText>{state.title || \"AI Sunset\"}</HeaderText>\n            {props.chainState ? (\n              <Logo>\n                <img src={currentChainProps[props.chainState]?.img} />\n              </Logo>\n            ) : (\n              <Logo>\n                <Widget\n                  src=\"jgodwill.near/widget/GenaDrop.NearLogo\"\n                  props={{ width: 25 }}\n                />\n              </Logo>\n            )}\n          </div>\n          <Description>\n            <img\n              src={\n                src ||\n                \"https://genadrop.mypinata.cloud/ipfs/QmZbtU8RnMymJAJRpTriZgDXVeeCpm5RyXMJNquGoVc4Rb\"\n              }\n              alt=\"NFT\"\n              width=\"100%\"\n              height=\"100%\"\n              className=\"rounded-3\"\n            />\n            <div\n              style={{\n                display: \"flex\",\n                marginTop: \"10px\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <p\n                style={{\n                  marginBottom: \"0.5em\",\n                  fontSize: \"0.85rem\",\n                  color: \"#0d99ff\",\n                }}\n              >\n                Owner\n              </p>\n              <a\n                target=\"_blank\"\n                style={{ textDecoration: \"none\" }}\n                href={\n                  state.owner && tokenId\n                    ? currentChainProps[props.chainState]?.explorer +\n                      state.owner\n                    : \"#\"\n                }\n              >\n                <span style={{ fontSize: \"0.9rem\", fontWeight: 600 }}>\n                  {state.owner?.length > 25\n                    ? state.owner.slice(0, 8) + \"...\" + state.owner.slice(34)\n                    : state.owner?.length < 25\n                    ? state.owner.slice(0, 12) + \"...near\"\n                    : !state.owner && tokenId\n                    ? \"----\"\n                    : \"nft.genadrop.near\".slice(0, 8) +\n                      \"...\" +\n                      \"near\"}\n                </span>\n              </a>\n            </div>\n          </Description>\n          <RightSection>\n            <Description>\n              <h6>Description</h6>\n              <span>\n                {state.description\n                  ? state.description\n                  : tokenId && !state.description\n                  ? \"--No Description--\"\n                  : \"Ai generated sunset cliffs\"}\n              </span>\n            </Description>\n            {/*<Description>\n              <h6>Details</h6>\n              <MintDetails>\n                <span>Mint Address</span>\n                <a\n                  target=\"_blank\"\n                  href={\n                    state.owner && tokenId\n                      ? currentChainProps[props.chainState]?.explorer +\n                        state.owner\n                      : \"#\"\n                  }\n                >\n                  {state.owner?.length > 25\n                    ? state.owner.slice(0, 8) + \"...\" + state.owner.slice(34)\n                    : state.owner?.length < 25\n                    ? state.owner.slice(0, 12) + \"...near\"\n                    : !state.owner && tokenId\n                    ? \"----\"\n                    : \"genadrop-contract.nftgen.near\".slice(0, 8) +\n                      \"...\" +\n                      \"near\"}\n                </a>\n              </MintDetails>\n            </Description>*/}\n          </RightSection>\n        </TopImageContainer>\n      </TopSection>\n    </MainContainer>\n  </Root>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jgodwill.near/widget/GenaDrop.NFTEmbedPreview", "fact_widget_deployments_id": "78d5af7e150d4004322da25d0028f035", "inserted_timestamp": "2023-10-13T15:54:14.928Z", "modified_timestamp": "2023-10-13T15:54:14.928Z", "__row_index": 3}