{"tx_hash": "BmP32aDXFvE8NetDpFcj9z8dSHPHMDijtGHoaL7XLoWe", "action_id_social": "Aji9cPHRo8xvU5bAqkZ5oGwsjFsfNo8dr85pqejAZzUJ-0-widget", "block_id": 107923276, "block_timestamp": "2023-12-14T12:25:08.883Z", "signer_id": "jgodwill.near", "widget_name": "CPlanet.MainPage.Common.Compose", "source_code": "const autocompleteEnabled = props.autocompleteEnabled ?? true;\n\nif (state.image === undefined) {\n  State.init({\n    image: {},\n    text: props.initialText || \"\",\n    nftChainState: \"Near\",\n    isChecked: false,\n  });\n\n  if (props.onHelper) {\n    const extractMentions = (text) => {\n      const mentionRegex =\n        /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\n      mentionRegex.lastIndex = 0;\n      const accountIds = new Set();\n      for (const match of text.matchAll(mentionRegex)) {\n        if (\n          !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n          !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length)) &&\n          match[1].length >= 2 &&\n          match[1].length <= 64\n        ) {\n          accountIds.add(match[1].toLowerCase());\n        }\n      }\n      return [...accountIds];\n    };\n\n    const extractHashtags = (text) => {\n      const hashtagRegex = /#(\\w+)/gi;\n      hashtagRegex.lastIndex = 0;\n      const hashtags = new Set();\n      for (const match of text.matchAll(hashtagRegex)) {\n        if (\n          !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n          !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length))\n        ) {\n          hashtags.add(match[1].toLowerCase());\n        }\n      }\n      return [...hashtags];\n    };\n\n    const extractMentionNotifications = (text, item) =>\n      extractMentions(text || \"\")\n        .filter((accountId) => accountId !== context.accountId)\n        .map((accountId) => ({\n          key: accountId,\n          value: {\n            type: \"mention\",\n            item,\n          },\n        }));\n\n    props.onHelper({\n      extractHashtags,\n      extractMentions,\n      extractTagNotifications: extractMentionNotifications,\n      extractMentionNotifications,\n    });\n  }\n}\n\nconst chains = [\n  {\n    id: \"137\",\n    name: \"Polygon\",\n    url: \"https://ipfs.near.social/ipfs/bafkreie5h5oq6suoingcwuzj32m3apv56rl56wpwpaxmevlk5vndlypxze\",\n  },\n  {\n    id: \"1313161554\",\n    name: \"Aurora\",\n    url: \"https://ipfs.near.social/ipfs/bafkreiajqik4gjbmkh7z2gylpjzrsuht7simjecpxuoqn6icqfbioswzuy\",\n  },\n  {\n    id: \"42220\",\n    name: \"Celo\",\n    url: \"https://ipfs.near.social/ipfs/bafkreifu6ufsdf2ivrs5febt7l25wdys6odzfelgjauzod7owrfug56cxe\",\n  },\n  // {\n  //   id: \"43114\",\n  //   name: \"Avax\",\n  //   url: \"https://ipfs.near.social/ipfs/bafkreifhu5fytsjcmjluarfnu6kcdhaqz4rgdrbbzf6dlsmggqb7oi3w4e\",\n  // },\n  {\n    id: \"42161\",\n    name: \"Arbitrum\",\n    url: \"https://ipfs.near.social/ipfs/bafkreiffax4lnya337rz5ph75faondeqmpy6xj37yprwvxbru4qc5emsiq\",\n  },\n  {\n    id: \"0\",\n    name: \"Near\",\n    url: \"https://ipfs.near.social/ipfs/bafkreigv55ubnx3tfhbf56toihekuxvgzfqn5c3ndbfjcg3e4uvaeuy5cm\",\n  },\n];\nconst accountId = context.accountId;\n\nconst data = Social.keys(\"*/profile\", \"final\");\n\nif (!data) {\n  return \"Loading\";\n}\n\nState.init({\n  account: accountId,\n});\nconst accounts = Object.entries(data);\n\nconst allWidgets = [];\n\nfor (let i = 0; i < accounts.length; ++i) {\n  const accountId = accounts[i][0];\n  allWidgets.push(accountId);\n}\nconst onChangeAccount = (account) => {\n  State.update({\n    account: account[0],\n  });\n};\n\nconst updateChain = (chain) => {\n  State.update({ nftChainState: chain, nftTokenId: \"\", nftContractId: \"\" });\n};\n\nconst content = (state.text ||\n  state.image.cid ||\n  state.nftContractId ||\n  state.nftTokenId ||\n  state.nftChainState) && {\n  type: \"md\",\n  text: state.text,\n  image: state.image.cid ? { ipfs_cid: state.image.cid } : undefined,\n  embeddedNFT: {\n    contractId: state.nftContractId,\n    tokenId: state.nftTokenId,\n    chain: state.nftChainState,\n  },\n};\n\nif (content && props.extraContent) {\n  Object.assign(content, props.extraContent);\n}\n\nfunction autoCompleteAccountId(id) {\n  let text = state.text.replace(/[\\s]{0,1}@[^\\s]*$/, \"\");\n  text = `${text} @${id}`.trim() + \" \";\n  State.update({ text, showAccountAutocomplete: false });\n}\n\nconst onChange = (text) => {\n  const showAccountAutocomplete = /@[\\w][^\\s]*$/.test(text);\n  State.update({ text, showAccountAutocomplete });\n};\n\nconst jContent = JSON.stringify(content);\nif (props.onChange && jContent !== state.jContent) {\n  State.update({\n    jContent,\n  });\n  props.onChange({ content, isChecked: state.isChecked });\n}\nconsole.log(\"checked\", isChecked);\n\nconst onCompose = () => {\n  State.update({\n    image: {},\n    text: \"\",\n    embeddedNFT: {},\n  });\n};\n\nconst [markdownEditor, setMarkdownEditor] = useState(false);\n\nconst TextareaWrapper = styled.div`\n    display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n\n  textarea {\n    display: flex;\n    align-items: center;\n    transition: all 0.3s ease;\n  }\n\n  textarea::placeholder {\n    padding-top: 4px;\n    font-size: 20px;\n  }\n\n  textarea:focus::placeholder {\n    font-size: inherit;\n    padding-top: 0px;\n  }\n\n  &::after,\n  textarea, iframe {\n    width: 100%;\n    padding: 8px 0;\n    min-width: 1em;\n    height: unset;\n    min-height: 3em;\n    font: inherit;\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: 0px solid #eee;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n  }\n\n  iframe {\n    padding: 0;\n  }\n\n  textarea:focus, textarea:not(:empty) {\n    border-bottom: 1px solid #eee;\n    min-height: 5em;\n  }\n\n  &::after {\n    content: attr(data-value) ' ';\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n  &.markdown-editor::after {\n    padding-top: 66px;\n    font-family: monospace;\n    font-size: 14px;\n  }\n`;\n\nconst Wrapper = styled.div`\n  border-bottom: 1px solid #eee;\n  line-height: normal;\n  display: flex;\n  padding: 12px 12px 6px;\n\n  .left {\n    min-width: 40px;\n    margin-right: 22px;\n  }\n  .right {\n    margin-top: -4px;\n    flex-grow: 1;\n    min-width: 0;\n  }\n\n  .up-buttons {\n    margin-top: 6px;\n    margin-left: -16px;\n\n     @media screen and (max-width: 540px){\n      margin-left: -50px;\n     }\n  }\n`;\n\nconst embedCss = `\n.rc-md-editor {\n  border: 0;\n}\n.rc-md-editor .editor-container>.section {\n  border: 0;\n}\n.rc-md-editor .editor-container .sec-md .input {\n  overflow-y: auto;\n  padding: 8px 0 !important;\n  line-height: normal;\n}\n`;\n\nconst EmbedNFT = styled.div`\n  margin: 10px 2px;\n  .attach-nft-label{\n   border-radius: 32px;\n   color: #B0B0B0; ;\n  border: 1px solid #EFEFEF;\n  background: #F8F8F8;\n    :hover,\n    :focus, &:disabled {\n      background: #d7dbde;\n      outline: none;\n      border: 1px solid #EFEFEF;\n      color: #000;\n    }\n  }\n  .bottom-buttons{\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    align-items: center;\n    .compose{\n      justify-self: flex-end;\n      float: right;\n    }\n  }\n`;\n\nconst Content = styled.div`\n  // background-color: white;\n  padding: 20px;\n  border-radius: .5rem;\n  margin-top: 2rem;\n  // border: 4px solid rgba(13, 154, 255, 0.317);\n`;\n\nconst Title = styled.h3`\n  margin-bottom: 10px;\n`;\n\nconst Search = styled.div`\nmargin-top: 12px;\n    // justify-content: center;\ndisplay: flex;\nwidth: 100%;\nflex-wrap: wrap;\ninput {\n    border-radius: 8px;\n    flex-shrink: 0;\n    height: 48px;\n    width: 100%;\n    background: #F8F8F8;\n    overflow: hidden;\n    color: #B0B0B0;\n    text-overflow: ellipsis;\n    font-family: Helvetica Neue;\n    font-size: 20px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 148%; /* 29.6px */\n}\n`;\n\nconst Button = styled.div`\nbackground: transparent;\nfont-weight: 600;\ncursor: pointer;\n`;\n\nconst Input = styled.input`\n  display: block;\n  padding:.5em;\n  width:100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus{\n    border:1px solid #0d99ff;\n  }\n  ::placeholder {\n    color: palevioletred;\n  }\n`;\n\nconst Card = styled.div`\npadding: 1em;\nborder: 1px solid #e5e8eb;\ngap: 2em;\nmargin: 10px auto;\nborder-radius: .7em;\nwidth: 100%;\n`;\nconst SelectCard = styled.div`\ndisplay: flex;\npadding: 1em;\ngap: 2em;\njustify-content: center;\nalign-items: center;\nmargin: 10px auto;\nwidth: 100%;\nborder-radius: .7em;\nheight: 100%;\n  @media screen and (max-width: 540px){\n    flex-wrap: wrap;\n  }\n`;\n\nconst Actions = styled.div`\n  display: flex;\n  gap: .5rem;\n  .upload-image-button, .mkd-butn {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: #f1f3f5;\n    color: #11181c;\n    border-radius: 40px;\n    height: 40px;\n    min-width: 40px;\n    font-size: 0;\n    border: none;\n    cursor: pointer;\n    transition: background 200ms, opacity 200ms;\n\n    &::before {\n      font-size: 16px;\n    }\n\n    :hover,\n    :focus {\n      background: #d7dbde;\n      outline: none;\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n\n    span {\n      margin-left: 12px;\n    }\n  }\n`;\n\nconst handleCheckboxChange = () => {\n  State.update({\n    isChecked: !state.isChecked,\n    isOpen: true,\n    account: accountId,\n  });\n  props.onChange({ isChecked: state.isChecked });\n};\n\nconst onClose = () => {\n  State.update({\n    isOpen: false,\n    isChecked: false,\n    nftChainState: \"Near\",\n  });\n};\n\nif (state.isChecked === true) {\n  setMarkdownEditor(false);\n} else {\n  State.update({\n    nftTokenId: \"\",\n    nftContractId: \"\",\n  });\n}\n\nconsole.log(state.isChecked);\n\nconst onChangeContractID = (contractId) => {\n  State.update({\n    nftContractId: contractId,\n  });\n};\n\nconst onChangeTokenID = (tokenId) => {\n  State.update({\n    nftTokenId: tokenId,\n  });\n};\nconsole.log(content);\n\nreturn (\n  <Wrapper>\n    <div className=\"left\">\n      <Widget\n        loading=\"\"\n        src=\"jgodwill.near/widget/CPlanet.MainPage.N.Post.Left\"\n        props={{ accountId: context.accountId }}\n      />\n    </div>\n    <div className=\"right\">\n      <TextareaWrapper\n        className={markdownEditor ? \"markdown-editor\" : \"\"}\n        data-value={state.text || \"\"}\n      >\n        {markdownEditor ? (\n          <Widget\n            key={`markdown-editor-${markdownEditor}`}\n            src=\"mob.near/widget/MarkdownEditorIframe\"\n            props={{\n              initialText: state.text,\n              onChange,\n              embedCss,\n            }}\n          />\n        ) : (\n          <textarea\n            key=\"textarea\"\n            className=\"normal_input\"\n            value={state.text || \"\"}\n            onInput={(event) => onChange(event.target.value)}\n            onKeyUp={(event) => {\n              if (event.key === \"Escape\") {\n                State.update({ showAccountAutocomplete: false });\n              }\n            }}\n            placeholder={props.placeholder ?? \"What's happening?\"}\n          />\n        )}\n        {autocompleteEnabled && state.showAccountAutocomplete && (\n          <div className=\"pt-1 w-100 overflow-hidden\">\n            <Widget\n              src=\"mob.near/widget/AccountAutocomplete\"\n              props={{\n                term: state.text.split(\"@\").pop(),\n                onSelect: autoCompleteAccountId,\n                onClose: () => State.update({ showAccountAutocomplete: false }),\n              }}\n            />\n          </div>\n        )}\n      </TextareaWrapper>\n      <div className=\"up-buttons d-flex flex-row\">\n        <div className=\"flex-grow-1\">\n          <Actions>\n            {!state.isChecked && (\n              <IpfsImageUpload\n                image={state.image}\n                className=\"upload-image-button bi bi-image\"\n                title=\"Upload an image\"\n              />\n            )}\n            <button\n              className=\"bi bi-code-square mkd-butn\"\n              title=\"Use the markdown Editor\"\n              onClick={() =>\n                setMarkdownEditor(markdownEditor ? false : Date.now())\n              }\n            ></button>\n          </Actions>\n          <EmbedNFT>\n            {state.isChecked && (\n              <div>\n                <Card>\n                  <div className=\"d-flex align-center text-center gap-2\">\n                    <SelectCard>\n                      <Card>\n                        <div>Select a Chain</div>\n                        <Widget\n                          src=\"jgodwill.near/widget/CPlanet.ChainsDropdown\"\n                          props={{ chains: chains, updateChain }}\n                        />\n                      </Card>\n                      {state.nftChainState === \"Near\" && (\n                        <Card>\n                          Near Wallet Address:\n                          <Search>\n                            <Typeahead\n                              id=\"async-example\"\n                              className=\"type-ahead\"\n                              isLoading={isLoading}\n                              labelKey=\"search\"\n                              minLength={1}\n                              options={allWidgets}\n                              onChange={(value) => onChangeAccount(value)}\n                              placeholder={accountId}\n                              allowNew\n                            />\n                          </Search>\n                        </Card>\n                      )}\n                    </SelectCard>\n                  </div>\n                  {state.nftChainState === \"Near\" ? (\n                    <div>\n                      <div\n                        className=\"p-2 rounded mt-3\"\n                        style={{\n                          background: \"#fdfdfd\",\n                          border: \"solid 1px #dee2e6\",\n                          borderBottomLeftRadius: \".375rem\",\n                          borderBottomRightRadius: \".375rem\",\n                          minHeight: \"9em\",\n                        }}\n                      >\n                        <div>\n                          <div className=\"mt-2\">\n                            <Widget\n                              src={`jgodwill.near/widget/genadrop-nft-selector`}\n                              props={{\n                                onChange: ({ contractId, tokenId }) => {\n                                  State.update({\n                                    contractId: contractId,\n                                    tokenId: tokenId,\n                                  });\n                                  onChangeTokenID(tokenId);\n                                  onChangeContractID(contractId);\n                                },\n                                accountId: state.account,\n                                headingText: \"Select an NFT to embed\",\n                              }}\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ) : (\n                    <Card>\n                      <h4>Enter the NFT details</h4>\n                      <Card>\n                        NFT Contract ID:\n                        <Input\n                          type=\"text\"\n                          onChange={(e) => onChangeContractID(e.target.value)}\n                          value={state.nftContractId}\n                        />\n                      </Card>\n                      <Card>\n                        NFT Token Id:\n                        <Input\n                          type=\"text\"\n                          onChange={(e) => onChangeTokenID(e.target.value)}\n                          value={state.nftTokenId}\n                        />\n                      </Card>\n                    </Card>\n                  )}\n                </Card>\n              </div>\n            )}\n            <div className=\"bottom-buttons\">\n              {!state.image.cid && (\n                <div>\n                  <input\n                    type=\"checkbox\"\n                    className=\"btn-check attach-nft-btn\"\n                    id=\"btn-check-2\"\n                    checked={state.isChecked}\n                    onChange={handleCheckboxChange}\n                    autocomplete=\"off\"\n                  />\n                  <label\n                    className=\"btn btn-dark attach-nft-label\"\n                    for=\"btn-check-2\"\n                  >\n                    {!state.isChecked ? (\n                      <>\n                        <i className=\"bi bi-paperclip attah-ico\"></i> Attach an\n                        NFT\n                      </>\n                    ) : (\n                      <>\n                        Remove NFT <i className=\"bi bi-x-lg\"></i>\n                      </>\n                    )}\n                  </label>\n                </div>\n              )}\n              <div className=\"compose\">\n                {props.composeButton && props.composeButton(onCompose)}\n              </div>\n            </div>\n          </EmbedNFT>\n        </div>\n      </div>\n    </div>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jgodwill.near/widget/CPlanet.MainPage.Common.Compose", "fact_widget_deployments_id": "df41138aee9c238e666b275368ea6497", "inserted_timestamp": "2023-12-14T14:20:53.493Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 26}