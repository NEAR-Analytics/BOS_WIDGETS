{"tx_hash": "46PUKZUfcFmJxxSrfzWaTnKs8Q6zgT11EizoRwMPwoK2", "action_id_social": "5Z633gTuckGnokhPqrmmk7uiwotMbsmjof1vzge1uTSu-0-widget", "block_id": 106877530, "block_timestamp": "2023-11-30T16:49:26.641Z", "signer_id": "yousouf.near", "widget_name": "crossword2", "source_code": "const [puzzles, setPuzzles] = useState([\r\n  {\r\n    grid: [\r\n      [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n      [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n      [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n      [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n      [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n      [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n      [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n      [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n      [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n    ],\r\n    clues: {\r\n      across: [\r\n        { number: 1, clue: \"Horizontal word\", length: 9, answer: \"CROSSWORD\" },\r\n        {\r\n          number: 4,\r\n          clue: \"Another horizontal word\",\r\n          length: 7,\r\n          answer: \"PUZZLES\",\r\n        },\r\n      ],\r\n      down: [\r\n        { number: 2, clue: \"Vertical word\", length: 9, answer: \"VERTICAL\" },\r\n        {\r\n          number: 3,\r\n          clue: \"Another vertical word\",\r\n          length: 7,\r\n          answer: \"LETTERS\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  // Add more puzzles as needed\r\n]);\r\n\r\nconst [selectedCell, setSelectedCell] = useState({ row: 0, col: 0 });\r\nconst [highlightedCells, setHighlightedCells] = useState([]);\r\nconst [currentPuzzle, setCurrentPuzzle] = useState(null);\r\nconst [congratulatoryMessage, setCongratulatoryMessage] = useState(\"\");\r\nconst [clueNumbers, setClueNumbers] = useState([]);\r\n\r\nuseEffect(() => {\r\n  // Fetch puzzles in random order\r\n  const shuffledPuzzles = [...puzzles].sort(() => Math.random() - 0.5);\r\n  setCurrentPuzzle(shuffledPuzzles[0]);\r\n}, [puzzles]);\r\n\r\nuseEffect(() => {\r\n  // Set clue numbers\r\n  const newClueNumbers = Array.from({ length: currentPuzzle.grid.length }, () =>\r\n    Array(currentPuzzle.grid[0].length).fill(null)\r\n  );\r\n\r\n  currentPuzzle.clues.across.forEach((acrossClue) => {\r\n    const { number } = acrossClue;\r\n    const row = selectedCell.row;\r\n    const col = selectedCell.col - (number - 1);\r\n    if (col >= 0 && col < currentPuzzle.grid[row].length) {\r\n      newClueNumbers[row][col] = number;\r\n    }\r\n  });\r\n\r\n  currentPuzzle.clues.down.forEach((downClue) => {\r\n    const { number } = downClue;\r\n    const row = selectedCell.row - (number - 1);\r\n    const col = selectedCell.col;\r\n    if (row >= 0 && row < currentPuzzle.grid.length) {\r\n      newClueNumbers[row][col] = number;\r\n    }\r\n  });\r\n\r\n  setClueNumbers(newClueNumbers);\r\n}, [currentPuzzle, selectedCell]);\r\n\r\n// Function to handle user input\r\nconst handleInputChange = (event) => {\r\n  const { value } = event.target;\r\n  // Update the grid at the selected cell with the user input\r\n  const newGrid = [...currentPuzzle.grid];\r\n  newGrid[selectedCell.row][selectedCell.col] = value.toUpperCase();\r\n  setCurrentPuzzle((prev) => ({ ...prev, grid: newGrid }));\r\n};\r\n\r\n// Function to handle cell selection\r\nconst handleCellClick = (row, col) => {\r\n  // Update the selected cell when a cell is clicked\r\n  setSelectedCell({ row, col });\r\n};\r\n\r\n// Function to check answers\r\nconst checkAnswers = () => {\r\n  const newHighlightedCells = [];\r\n\r\n  // Check across clues\r\n  currentPuzzle.clues.across.forEach((acrossClue) => {\r\n    const answer = acrossClue.answer.toUpperCase();\r\n    for (let i = 0; i < answer.length; i++) {\r\n      const row = selectedCell.row;\r\n      const col = selectedCell.col - i;\r\n      if (\r\n        col >= 0 &&\r\n        col < currentPuzzle.grid[row].length &&\r\n        currentPuzzle.grid[row][col] !== answer[i]\r\n      ) {\r\n        newHighlightedCells.push({ row, col });\r\n      }\r\n    }\r\n  });\r\n\r\n  // Check down clues\r\n  currentPuzzle.clues.down.forEach((downClue) => {\r\n    const answer = downClue.answer.toUpperCase();\r\n    for (let i = 0; i < answer.length; i++) {\r\n      const row = selectedCell.row - i;\r\n      const col = selectedCell.col;\r\n      if (\r\n        row >= 0 &&\r\n        row < currentPuzzle.grid.length &&\r\n        currentPuzzle.grid[row][col] !== answer[i]\r\n      ) {\r\n        newHighlightedCells.push({ row, col });\r\n      }\r\n    }\r\n  });\r\n\r\n  setHighlightedCells(newHighlightedCells);\r\n\r\n  // Check if all answers are correct\r\n  const isAllCorrect = newHighlightedCells.length === 0;\r\n  if (isAllCorrect) {\r\n    setCongratulatoryMessage(\"Congratulations! All answers are correct!\");\r\n  } else {\r\n    setCongratulatoryMessage(\"\");\r\n  }\r\n};\r\n\r\n// Render the component\r\nreturn (\r\n  <div>\r\n    <h1>Crossword Game</h1>\r\n    {currentPuzzle && (\r\n      <div>\r\n        {currentPuzzle.grid.map((row, rowIndex) => (\r\n          <div key={rowIndex} style={{ display: \"flex\" }}>\r\n            {row.map((cell, colIndex) => (\r\n              <div\r\n                key={colIndex}\r\n                style={{\r\n                  position: \"relative\",\r\n                  width: \"40px\",\r\n                  height: \"40px\",\r\n                  textAlign: \"center\",\r\n                  border: \"1px solid black\",\r\n                  backgroundColor:\r\n                    highlightedCells.some(\r\n                      (highlightedCell) =>\r\n                        highlightedCell.row === rowIndex &&\r\n                        highlightedCell.col === colIndex\r\n                    ) || cell === \" \"\r\n                      ? \"yellow\"\r\n                      : \"black\",\r\n                }}\r\n              >\r\n                <span\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    top: \"0\",\r\n                    right: \"0\",\r\n                    fontSize: \"8px\",\r\n                    color: \"blue\",\r\n                  }}\r\n                >\r\n                  {clueNumbers[rowIndex][colIndex]}\r\n                </span>\r\n                <input\r\n                  type=\"text\"\r\n                  value={cell === \" \" ? \"\" : cell}\r\n                  onChange={handleInputChange}\r\n                  onClick={() => handleCellClick(rowIndex, colIndex)}\r\n                  style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    border: \"none\",\r\n                    outline: \"none\",\r\n                    fontSize: \"16px\",\r\n                    backgroundColor: \"transparent\",\r\n                    color: \"white\",\r\n                  }}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n        <div>\r\n          <button onClick={checkAnswers}>Check Answers</button>\r\n        </div>\r\n        <div>\r\n          <h2>Clues</h2>\r\n          <div>\r\n            <h3>Across</h3>\r\n            <ul>\r\n              {currentPuzzle.clues.across.map((acrossClue) => (\r\n                <li\r\n                  key={acrossClue.number}\r\n                >{`${acrossClue.number}. ${acrossClue.clue}`}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          <div>\r\n            <h3>Down</h3>\r\n            <ul>\r\n              {currentPuzzle.clues.down.map((downClue) => (\r\n                <li\r\n                  key={downClue.number}\r\n                >{`${downClue.number}. ${downClue.clue}`}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        {congratulatoryMessage && <p>{congratulatoryMessage}</p>}\r\n      </div>\r\n    )}\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/yousouf.near/widget/crossword2", "fact_widget_deployments_id": "83a8f39fd7b3b33db0d0b5ec1c6d7a20", "inserted_timestamp": "2023-11-30T18:22:08.043Z", "modified_timestamp": "2023-12-20T02:50:47.065Z", "__row_index": 0}