{"tx_hash": "78NQ66ZcDqZA4KBEdUGpNnJ8B6hyiKwcpjka9Xnw1BDr", "action_id_social": "GxFGmFwM92dVTwAuLyFcmkCRLDSMVKXCUcio9UbBtEE5-0-widget", "block_id": 106928160, "block_timestamp": "2023-12-01T12:17:32.282Z", "signer_id": "yousouf.near", "widget_name": "tic-tac-toe", "source_code": "const calculateWinner = (squares) => {\r\n  const lines = [];\r\n\r\n  for (let i = 0; i < 5; i++) {\r\n    lines.push([i, i + 5, i + 10, i + 15, i + 20]); // Vertical lines\r\n    lines.push([i * 5, i * 5 + 1, i * 5 + 2, i * 5 + 3, i * 5 + 4]); // Horizontal lines\r\n  }\r\n\r\n  for (let i = 0; i < 5; i++) {\r\n    lines.push([i * 6, i * 6 + 1, i * 6 + 2, i * 6 + 3, i * 6 + 4]); // Diagonal from top-left to bottom-right\r\n    lines.push([i, i + 7, i + 14, i + 21, i + 28]); // Diagonal from top-right to bottom-left\r\n  }\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c, d, e] = lines[i];\r\n    if (\r\n      squares[a] &&\r\n      squares[a] === squares[b] &&\r\n      squares[a] === squares[c] &&\r\n      squares[a] === squares[d] &&\r\n      squares[a] === squares[e]\r\n    ) {\r\n      return squares[a];\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst isBoardFull = (squares) => {\r\n  return squares.every((square) => square !== null);\r\n};\r\n\r\nconst getRandomMove = (squares) => {\r\n  const emptySquares = squares.reduce((acc, value, index) => {\r\n    if (!value) acc.push(index);\r\n    return acc;\r\n  }, []);\r\n\r\n  const randomIndex = Math.floor(Math.random() * emptySquares.length);\r\n  return emptySquares[randomIndex];\r\n};\r\n\r\nconst [squares, setSquares] = useState(Array(25).fill(null));\r\nconst [xIsNext, setXIsNext] = useState(true);\r\nconst [isGameOver, setGameOver] = useState(false);\r\n\r\nconst handleClick = (index) => {\r\n  if (\r\n    squares[index] ||\r\n    calculateWinner(squares) ||\r\n    isBoardFull(squares) ||\r\n    isGameOver\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const newSquares = [...squares];\r\n  newSquares[index] = xIsNext ? \"X\" : \"O\";\r\n  setSquares(newSquares);\r\n  setXIsNext(!xIsNext);\r\n\r\n  if (!isBoardFull(newSquares) && !calculateWinner(newSquares)) {\r\n    // Computer's move\r\n    const computerMove = getRandomMove(newSquares);\r\n    newSquares[computerMove] = \"O\";\r\n    setSquares(newSquares);\r\n    setXIsNext(true);\r\n  }\r\n};\r\n\r\nuseEffect(() => {\r\n  const winner = calculateWinner(squares);\r\n  const full = isBoardFull(squares);\r\n\r\n  if (winner || full) {\r\n    setGameOver(true);\r\n  }\r\n}, [squares]);\r\n\r\nconst resetGame = () => {\r\n  setSquares(Array(25).fill(null));\r\n  setGameOver(false);\r\n  setXIsNext(true);\r\n};\r\n\r\nlet status;\r\nif (isGameOver) {\r\n  const winner = calculateWinner(squares);\r\n  if (winner) {\r\n    status = `Winner: ${winner === \"X\" ? \"Player\" : \"Computer\"}`;\r\n  } else {\r\n    status = \"It's a draw!\";\r\n  }\r\n} else {\r\n  status = `Next player : ${xIsNext ? \"Player\" : \"Computer\"}`;\r\n}\r\n\r\nreturn (\r\n  <div>\r\n    <div\r\n      style={{\r\n        backgroundColor: \"#8eff8e\",\r\n        fontSize: \"34px\",\r\n        fontWeight: \"bold\",\r\n        textAlign: \"center\",\r\n      }}\r\n    >\r\n      <h5>Tic-Tac-Toe Game on BOS</h5>\r\n    </div>\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        marginTop: \"50px\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          backgroundColor: isGameOver ? \"#8eff8e\" : \"#fff\",\r\n          border: \"1px solid #ccc\",\r\n          borderRadius: \"8px\",\r\n          boxShadow: \"0px 0px 10px 0px rgba(0, 0, 0, 0.2)\",\r\n          padding: \"20px\",\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"repeat(5, 1fr)\",\r\n          gap: \"10px\",\r\n          fontSize: \"24px\",\r\n          fontWeight: \"bold\",\r\n          textAlign: \"center\",\r\n          cursor: \"pointer\",\r\n          transition: \"background-color 0.3s ease-in-out\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            fontSize: \"24px\",\r\n            marginBottom: \"20px\",\r\n            gridColumn: \"span 5\",\r\n          }}\r\n        >\r\n          {status}\r\n        </div>\r\n\r\n        {squares.map((value, index) => (\r\n          <button\r\n            key={index}\r\n            className=\"square\"\r\n            onClick={() => handleClick(index)}\r\n            style={{\r\n              backgroundColor: isGameOver ? \"#8eff8e\" : \"#fff\",\r\n              border: \"1px solid #ccc\",\r\n              fontSize: \"24px\",\r\n              fontWeight: \"bold\",\r\n              padding: \"20px\",\r\n              textAlign: \"center\",\r\n              width: \"60px\",\r\n              height: \"60px\",\r\n              cursor: \"pointer\",\r\n              transition: \"background-color 0.3s ease-in-out\",\r\n            }}\r\n          >\r\n            {value}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n\r\n    <div style={{ marginTop: \"20px\", textAlign: \"center\" }}>\r\n      <button onClick={resetGame}>Reset Game</button>\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/yousouf.near/widget/tic-tac-toe", "fact_widget_deployments_id": "2f85d2f31e9b54982f43433eccd11422", "inserted_timestamp": "2023-12-01T14:27:23.057Z", "modified_timestamp": "2023-12-20T03:02:01.702Z", "__row_index": 6}