{"tx_hash": "3XzX2Ky2UrRFYhyq8HXLNzjnggn1RLXy9cMXToWpj27H", "action_id_social": "3o5C8a9waAqzf6PWsp3e2ZExeegVy9Hc73FSQfwdMqY6-0-widget", "block_id": 112966793, "block_timestamp": "2024-02-16T18:45:43.044Z", "signer_id": "webengine.near", "widget_name": "SocialFeedPage", "source_code": "import { useEffect, useState } from 'react';\nimport Button from './Button';\nimport Post, { type PostProps } from './Post';\nimport s from './SocialFeedPage.module.css';\n\ntype GraphqlResponse = {\n  data: {\n    dataplatform_near_social_feed_moderated_posts: PostProps[];\n    dataplatform_near_social_feed_moderated_posts_aggregate: {\n      aggregate: {\n        count: number;\n      };\n    };\n  };\n};\n\nconst GRAPHQL_ENDPOINT = 'https://near-queryapi.api.pagoda.co';\nconst LIMIT = 10;\n\nfunction SocialFeedPage() {\n  const [loading, setLoading] = useState(false);\n  const [posts, setPosts] = useState<PostProps[]>([]);\n\n  const fetchGraphQL = async (\n    operationsDoc: string,\n    operationName: string,\n    variables: Record<string, any>\n  ) => {\n    const response = await fetch(`${GRAPHQL_ENDPOINT}/v1/graphql`, {\n      method: 'POST',\n      headers: { 'x-hasura-role': 'dataplatform_near' },\n      body: JSON.stringify({\n        query: operationsDoc,\n        variables: variables,\n        operationName: operationName,\n      }),\n    });\n    const result: GraphqlResponse = await response.json();\n    return result;\n  }\n\n  const createQuery = () => {\n    const indexerQueries = `\n      query GetPostsQuery($offset: Int, $limit: Int) {\n        dataplatform_near_social_feed_moderated_posts(order_by: [{ block_height: desc }], offset: $offset, limit: $limit) {\n          account_id\n          block_height\n          block_timestamp\n          content\n          receipt_id\n          accounts_liked\n          last_comment_timestamp\n          comments(order_by: {block_height: asc}) {\n            account_id\n            block_height\n            block_timestamp\n            content\n          }\n          verifications {\n            human_provider\n            human_valid_until\n            human_verification_level\n          }\n        }\n        dataplatform_near_social_feed_moderated_posts_aggregate {\n          aggregate {\n            count\n          }\n        }\n      }\n    `;\n\n    return indexerQueries;\n  };\n\n  const loadMorePosts = async () => {\n    try {\n      const queryName = 'GetPostsQuery';\n\n      setLoading(true);\n\n      const { data } = await fetchGraphQL(createQuery(), queryName, {\n        offset: posts.length,\n        limit: LIMIT,\n      });\n\n      if (data) {\n        const newPosts = data.dataplatform_near_social_feed_moderated_posts;\n        if (newPosts.length > 0) {\n          let filteredPosts = newPosts;\n          setPosts([...posts, ...filteredPosts]);\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadMorePosts();\n  }, []);\n\n  return (\n    <div className={s.wrapper}>\n      <div className={s.container}>\n        <h1>Latest Posts</h1>\n\n        <div className={s.posts}>\n          {posts.map((post) => {\n            return <Post props={post} id={post.receipt_id} key={post.receipt_id} />;\n          })}\n        </div>\n\n        <div className={s.footer}>\n          <Button props={{ children: 'Load More', onClick: loadMorePosts, disabled: loading }} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SocialFeedPage as BWEComponent;", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/webengine.near/widget/SocialFeedPage", "fact_widget_deployments_id": "9d124b9fc119c6162d2bf6a2ed230a10", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}