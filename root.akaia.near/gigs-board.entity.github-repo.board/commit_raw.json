{"tx_hash": "5wdbeoMv59gmobGv1s6tHQ37YjD3mKuhYomfNnR9utx5", "action_id_social": "4TLkhUFwB5WLfVt76GKLRuP5L2f4YvSLjSFviU31SuU4-0-widget", "block_id": 94152812, "block_timestamp": "2023-06-14T03:00:58.049Z", "signer_id": "root.akaia.near", "widget_name": "gigs-board.entity.github-repo.board", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n\n/* INCLUDE: \"shared/lib/gui\" */\nconst Card = styled.div`\n  &:hover {\n    box-shadow: rgba(3, 102, 214, 0.3) 0px 0px 0px 3px;\n  }\n`;\n\nconst CompactContainer = styled.div`\n  width: fit-content !important;\n  max-width: 100%;\n`;\n\nconst Magnifiable = styled.div`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n/* END_INCLUDE: \"shared/lib/gui\" */\n\nconst dataToColumns = (data, columns) =>\n  Object.values(columns).reduce(\n    (registry, column) => ({\n      ...registry,\n\n      [column.id]: [\n        ...(registry[column.id] ?? []),\n\n        ...data.filter((ticket) =>\n          column?.labelSearchTerms.every((searchTerm) =>\n            searchTerm.length > 0\n              ? ticket.labels.some((label) =>\n                  label.name.toLowerCase().includes(searchTerm.toLowerCase())\n                )\n              : true\n          )\n        ),\n      ],\n    }),\n\n    {}\n  );\n\nconst withType = (type) => (data) => ({ ...data, type });\n\nconst GithubRepoBoard = ({\n  columns,\n  dataTypesIncluded,\n  description,\n  editorTrigger,\n  isEditable,\n  pageURL,\n  repoURL,\n  ticketState,\n  title,\n}) => {\n  const ticketStateForSure =\n    ticketState === \"open\" || ticketState === \"closed\" || ticketState === \"all\"\n      ? ticketState\n      : \"all\";\n\n  State.init({\n    ticketsByColumn: {},\n  });\n\n  if (repoURL) {\n    const pullRequests = dataTypesIncluded.PullRequest\n      ? (\n          fetch(\n            `https://api.github.com/repos/${repoURL\n              .split(\"/\")\n              .slice(-2)\n              .concat([\"pulls\"])\n              .join(\"/\")}?state=${ticketStateForSure}`\n          ).body ?? []\n        ).map(withType(\"PullRequest\"))\n      : [];\n\n    const issues = dataTypesIncluded.Issue\n      ? (\n          fetch(\n            `https://api.github.com/repos/${repoURL\n              .split(\"/\")\n              .slice(-2)\n              .concat([\"issues\"])\n              .join(\"/\")}state=${ticketStateForSure}`\n          ).body ?? []\n        ).map(withType(\"Issue\"))\n      : [];\n\n    State.update({\n      ticketsByColumn: dataToColumns([...issues, ...pullRequests], columns),\n    });\n  }\n\n  return (\n    <div className=\"d-flex flex-column gap-4 pb-4\">\n      <div className=\"d-flex flex-column align-items-center gap-2\">\n        <h5 className=\"h5 d-inline-flex gap-2 m-0\">\n          <i className=\"bi bi-kanban-fill\" />\n          <span>{(title?.length ?? 0) > 0 ? title : \"Untitled board\"}</span>\n        </h5>\n\n        <p className=\"m-0 py-1 text-secondary text-center\">{description}</p>\n      </div>\n\n      <div className=\"d-flex justify-content-end gap-3\">\n        {pageURL ? (\n          <a\n            className=\"card-link d-inline-flex me-auto\"\n            href={pageURL}\n            rel=\"noreferrer\"\n            role=\"button\"\n            target=\"_blank\"\n            title=\"Link to this board\"\n          >\n            <span className=\"hstack gap-2\">\n              <i className=\"bi bi-share\" />\n              <span>Open in new tab</span>\n            </span>\n          </a>\n        ) : null}\n\n        {pageURL ? (\n          <button\n            className=\"btn shadow btn-sm btn-outline-secondary d-inline-flex gap-2\"\n            onClick={() => clipboard.writeText(pageURL)}\n          >\n            <i className=\"bi bi-clipboard-fill\" />\n            <span>Copy link</span>\n          </button>\n        ) : null}\n\n        {isEditable ? (\n          <button\n            className=\"btn shadow btn-sm btn-primary d-inline-flex gap-2\"\n            onClick={editorTrigger}\n          >\n            <i className=\"bi bi-wrench-adjustable-circle-fill\" />\n            <span>Configure</span>\n          </button>\n        ) : null}\n      </div>\n\n      <div className=\"d-flex gap-3\" style={{ overflowX: \"auto\" }}>\n        {Object.keys(columns).length > 0 ? (\n          Object.values(columns).map((column) => (\n            <div className=\"col-3\" key={column.id}>\n              <div className=\"card rounded-4\">\n                <div\n                  className={[\n                    \"card-body d-flex flex-column gap-3\",\n                    \"border border-2 border-secondary rounded-4\",\n                  ].join(\" \")}\n                >\n                  <h6 className=\"card-title h6 d-flex align-items-center gap-2 m-0\">\n                    {column.title}\n\n                    <span className=\"badge rounded-pill bg-secondary\">\n                      {(state.ticketsByColumn[column.id] ?? []).length}\n                    </span>\n                  </h6>\n\n                  <p class=\"text-secondary m-0\">{column.description}</p>\n\n                  <div class=\"d-flex flex-column gap-3\">\n                    {(state.ticketsByColumn[column.id] ?? []).map((data) =>\n                      widget(\"entity.github-repo.ticket\", { data }, data.id)\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div\n            className={[\n              \"d-flex align-items-center justify-content-center\",\n              \"w-100 text-black-50 opacity-50\",\n            ].join(\" \")}\n            style={{ height: 384 }}\n          >\n            No columns were created so far.\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nreturn GithubRepoBoard(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/root.akaia.near/widget/gigs-board.entity.github-repo.board", "fact_widget_deployments_id": "f481aec915d1a0a8388241d2382d8a97", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}