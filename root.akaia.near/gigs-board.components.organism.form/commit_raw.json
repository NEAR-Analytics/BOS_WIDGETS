{"tx_hash": "Bypg7qtenELFkYJGWUpqfgsgBkAw6A5Tn9FV1HKea54C", "action_id_social": "4yVv1hukUHD6P3hL9GWTRnL2oqNo9hWDuZWXprhtMci2-0-widget", "block_id": 95781990, "block_timestamp": "2023-07-05T19:23:46.016Z", "signer_id": "root.akaia.near", "widget_name": "gigs-board.components.organism.form", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/form\" */\n/**\n *! TODO: Extract into separate library module\n *! once `useForm` is converted into a form factory widget\n */\nconst traversalUpdate = ({\n  input,\n  target: treeOrBranch,\n  path: [currentBranchKey, ...remainingBranch],\n  params,\n  via: nodeUpdate,\n}) => ({\n  ...treeOrBranch,\n\n  [currentBranchKey]:\n    remainingBranch.length > 0\n      ? traversalUpdate({\n          input,\n\n          target:\n            typeof treeOrBranch[currentBranchKey] === \"object\"\n              ? treeOrBranch[currentBranchKey]\n              : {\n                  ...((treeOrBranch[currentBranchKey] ?? null) !== null\n                    ? { __archivedLeaf__: treeOrBranch[currentBranchKey] }\n                    : {}),\n                },\n\n          path: remainingBranch,\n          via: nodeUpdate,\n        })\n      : nodeUpdate({\n          input,\n          lastKnownState: treeOrBranch[currentBranchKey],\n          params,\n        }),\n});\n\nconst fieldDefaultUpdate = ({\n  input,\n  lastKnownState,\n  params: { arrayDelimiter },\n}) => {\n  switch (typeof input) {\n    case \"boolean\":\n      return input;\n\n    case \"object\":\n      return Array.isArray(input) && typeof lastKnownState === \"string\"\n        ? input.join(arrayDelimiter ?? \",\")\n        : input;\n\n    case \"string\":\n      return Array.isArray(lastKnownState)\n        ? input.split(arrayDelimiter ?? \",\").map((string) => string.trim())\n        : input;\n\n    default: {\n      if ((input ?? null) === null) {\n        switch (typeof lastKnownState) {\n          case \"boolean\":\n            return !lastKnownState;\n\n          default:\n            return lastKnownState;\n        }\n      } else return input;\n    }\n  }\n};\n\nconst useForm = ({ stateKey: formStateKey }) => ({\n  formValues: state[formStateKey],\n\n  formUpdate:\n    ({ path: fieldPath, via: fieldCustomUpdate, ...params }) =>\n    (fieldInput) =>\n      State.update((lastKnownState) =>\n        traversalUpdate({\n          input: fieldInput?.target?.value ?? fieldInput,\n          target: lastKnownState,\n          path: [formStateKey, ...fieldPath],\n          params,\n\n          via:\n            typeof fieldCustomUpdate === \"function\"\n              ? fieldCustomUpdate\n              : fieldDefaultUpdate,\n        })\n      ),\n});\n/* END_INCLUDE: \"core/lib/form\" */\n/* INCLUDE: \"core/lib/hashmap\" */\nconst HashMap = {\n  isEqual: (input1, input2) =>\n    input1 !== null &&\n    typeof input1 === \"object\" &&\n    input2 !== null &&\n    typeof input2 === \"object\"\n      ? JSON.stringify(HashMap.toOrdered(input1)) ===\n        JSON.stringify(HashMap.toOrdered(input2))\n      : false,\n\n  toOrdered: (input) =>\n    Object.keys(input)\n      .sort()\n      .reduce((output, key) => ({ ...output, [key]: input[key] }), {}),\n\n  pick: (object, subsetKeys) =>\n    Object.fromEntries(\n      Object.entries(object ?? {}).filter(([key, _]) =>\n        subsetKeys.includes(key)\n      )\n    ),\n};\n/* END_INCLUDE: \"core/lib/hashmap\" */\n\nconst fieldParamsByType = {\n  array: {\n    name: \"components.molecule.text-input\",\n    inputProps: { type: \"text\" },\n  },\n\n  boolean: {\n    name: \"components.atom.switch\",\n  },\n\n  string: {\n    name: \"components.molecule.text-input\",\n    inputProps: { type: \"text\" },\n  },\n};\n\nconst fieldsRenderDefault = ({\n  schema,\n  formValues,\n  formUpdate,\n  isEditable,\n}) => (\n  <>\n    {Object.entries(schema).map(\n      ([\n        fieldKey,\n        { format, inputProps, label, order, style, ...fieldProps },\n      ]) => {\n        const contentDisplayClassName = [\n          (formValues[fieldKey]?.length ?? 0) > 0 ? \"\" : \"text-muted\",\n          \"m-0\",\n        ].join(\" \");\n\n        const fieldType = Array.isArray(formValues[fieldKey])\n          ? \"array\"\n          : typeof (formValues[fieldKey] ?? \"\");\n\n        return (\n          <>\n            {!isEditable && (\n              <div\n                className=\"d-flex gap-3\"\n                key={`${formValues.handle}-${fieldKey}`}\n                style={{ order }}\n              >\n                <label className=\"fw-bold w-25\">{label}</label>\n\n                {format !== \"markdown\" ? (\n                  <p className={[contentDisplayClassName, \"w-75\"].join(\" \")}>\n                    {(fieldType === \"array\"\n                      ? formValues[fieldKey]\n                          .filter((string) => string.length > 0)\n                          .join(\", \")\n                      : formValues[fieldKey]\n                    )?.toString?.() || \"none\"}\n                  </p>\n                ) : (\n                  <p className={[contentDisplayClassName, \"w-75\"].join(\" \")}>\n                    {(formValues[fieldKey]?.length ?? 0) > 0 ? (\n                      <Markdown text={formValues[fieldKey]} />\n                    ) : (\n                      \"none\"\n                    )}\n                  </p>\n                )}\n              </div>\n            )}\n\n            {isEditable &&\n              widget(fieldParamsByType[fieldType].name, {\n                ...fieldProps,\n                className: \"w-100\",\n                format,\n                key: `${formValues.handle}-${fieldKey}`,\n                label,\n                onChange: formUpdate({ path: [fieldKey] }),\n                style: { ...style, order },\n\n                value:\n                  fieldType === \"array\"\n                    ? formValues[fieldKey].join(\", \")\n                    : formValues[fieldKey],\n\n                inputProps: {\n                  ...(inputProps ?? {}),\n\n                  ...(fieldParamsByType[typeof formValues[fieldKey]]\n                    .inputProps ?? {}),\n                },\n              })}\n          </>\n        );\n      }\n    )}\n  </>\n);\n\nconst Form = ({\n  actionsAdditional,\n  cancelLabel,\n  classNames,\n  fieldsRender: fieldsRenderCustom,\n  heading,\n  isEditorActive,\n  isMutable,\n  noEditorFrame,\n  onCancel,\n  onSubmit,\n  schema,\n  submitLabel,\n  values,\n  ...restProps\n}) => {\n  const fieldsRender =\n    typeof fieldsRenderCustom === \"function\"\n      ? fieldsRenderCustom\n      : fieldsRenderDefault;\n\n  const initialValues =\n    typeof schema === \"object\"\n      ? HashMap.pick(values ?? {}, Object.keys(schema))\n      : {};\n\n  State.init({\n    isEditorActive: isEditorActive ?? false,\n    values: initialValues,\n  });\n\n  if (\n    !state.isEditorActive &&\n    JSON.stringify(initialValues) !== JSON.stringify(state.values)\n  ) {\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      values: initialValues,\n    }));\n  }\n\n  const onEditorToggle = (forcedState) =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      isEditorActive: forcedState ?? !lastKnownState.isEditorActive,\n    }));\n\n  const { formValues, formUpdate } = useForm({ stateKey: \"values\" }),\n    hasUnsubmittedChanges = !HashMap.isEqual(formValues, initialValues);\n\n  const onCancelClick = () => {\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      values: initialValues,\n      isEditorActive: false,\n    }));\n\n    if (typeof onSubmit === \"function\") onSubmit(initialValues);\n    if (typeof onCancel === \"function\") onCancel();\n  };\n\n  const onSubmitClick = () => {\n    onEditorToggle(false);\n    if (typeof onSubmit === \"function\") onSubmit(formValues);\n  };\n\n  return widget(\"components.molecule.tile\", {\n    className: classNames.root,\n    heading,\n    noFrame: noEditorFrame,\n\n    headerSlotRight:\n      isMutable && !state.isEditorActive\n        ? widget(\"components.atom.button\", {\n            classNames: {\n              root: \"btn-sm btn-secondary\",\n              adornment: \"bi bi-pen-fill\",\n            },\n\n            label: \"Edit\",\n            onClick: () => onEditorToggle(true),\n          })\n        : null,\n\n    children: (\n      <div className=\"flex-grow-1 d-flex flex-column gap-3\">\n        <div\n          className={`d-flex flex-column gap-${state.isEditorActive ? 1 : 4}`}\n        >\n          {fieldsRender({\n            formValues,\n            formUpdate,\n            isEditable: isMutable && state.isEditorActive,\n            onFormSubmit: onSubmit,\n            schema,\n          })}\n        </div>\n\n        {!noEditorFrame && isMutable && state.isEditorActive ? (\n          <div className=\"d-flex align-items-center justify-content-end gap-3 mt-auto\">\n            {actionsAdditional ? (\n              <div className=\"me-auto\">{actionsAdditional}</div>\n            ) : null}\n\n            {widget(\"components.atom.button\", {\n              classNames: { root: \"btn-outline-danger shadow-none border-0\" },\n              label: cancelLabel ?? \"Cancel\",\n              onClick: onCancelClick,\n            })}\n\n            {widget(\"components.atom.button\", {\n              classNames: {\n                root: classNames.submit ?? \"btn-success\",\n                adornment: `bi ${classNames.submitAdornment}`,\n              },\n\n              disabled: !hasUnsubmittedChanges,\n              label: submitLabel ?? \"Submit\",\n              onClick: onSubmitClick,\n            })}\n          </div>\n        ) : null}\n      </div>\n    ),\n\n    ...restProps,\n  });\n};\n\nreturn Form(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/root.akaia.near/widget/gigs-board.components.organism.form", "fact_widget_deployments_id": "63845fbdaab99bb0602ce53ab8fce660", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}