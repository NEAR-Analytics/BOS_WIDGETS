{"tx_hash": "3AfgXNiwgXmDB8vfdDndbJbTnTUw3r1mgo1n1dXLH7q8", "action_id_social": "3ekyzLvvJUt2dMwtkZikMb89w2cuTvmZ6GzuA1zZGt6t-0-widget", "block_id": 94058826, "block_timestamp": "2023-06-12T18:48:45.763Z", "signer_id": "root.akaia.near", "widget_name": "gigs-board.components.organism.form", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"shared/lib/form\" */\n/**\n *! TODO: Extract into separate library module\n *! once `useForm` is converted into a form factory widget\n */\nconst traversalUpdate = ({\n  input,\n  target: treeOrBranch,\n  path: [currentBranchKey, ...remainingBranch],\n  params,\n  via: nodeUpdate,\n}) => ({\n  ...treeOrBranch,\n\n  [currentBranchKey]:\n    remainingBranch.length > 0\n      ? traversalUpdate({\n          input,\n\n          target:\n            typeof treeOrBranch[currentBranchKey] === \"object\"\n              ? treeOrBranch[currentBranchKey]\n              : {\n                  ...((treeOrBranch[currentBranchKey] ?? null) !== null\n                    ? { __archivedLeaf__: treeOrBranch[currentBranchKey] }\n                    : {}),\n                },\n\n          path: remainingBranch,\n          via: nodeUpdate,\n        })\n      : nodeUpdate({\n          input,\n          lastKnownState: treeOrBranch[currentBranchKey],\n          params,\n        }),\n});\n\nconst fieldDefaultUpdate = ({\n  input,\n  lastKnownState,\n  params: { arrayDelimiter },\n}) => {\n  switch (typeof input) {\n    case \"boolean\":\n      return input;\n\n    case \"object\":\n      return Array.isArray(input) && typeof lastKnownState === \"string\"\n        ? input.join(arrayDelimiter ?? \",\")\n        : input;\n\n    case \"string\":\n      return Array.isArray(lastKnownState)\n        ? input.split(arrayDelimiter ?? \",\").map((string) => string.trim())\n        : input;\n\n    default: {\n      if ((input ?? null) === null) {\n        switch (typeof lastKnownState) {\n          case \"boolean\":\n            return !lastKnownState;\n\n          default:\n            return lastKnownState;\n        }\n      } else return input;\n    }\n  }\n};\n\nconst useForm = ({ stateKey: formStateKey }) => ({\n  formState: state[formStateKey],\n\n  formUpdate:\n    ({ path: fieldPath, via: fieldCustomUpdate, ...params }) =>\n    (fieldInput) =>\n      State.update((lastKnownState) =>\n        traversalUpdate({\n          input: fieldInput?.target?.value ?? fieldInput,\n          target: lastKnownState,\n          path: [formStateKey, ...fieldPath],\n          params,\n\n          via:\n            typeof fieldCustomUpdate === \"function\"\n              ? fieldCustomUpdate\n              : fieldDefaultUpdate,\n        })\n      ),\n});\n/* END_INCLUDE: \"shared/lib/form\" */\n/* INCLUDE: \"shared/lib/record\" */\nconst pick = (object, subsetKeys) =>\n  Object.fromEntries(\n    Object.entries(object ?? {}).filter(([key, _]) => subsetKeys.includes(key))\n  );\n/* END_INCLUDE: \"shared/lib/record\" */\n\nconst fieldsRenderDefault = ({ schema, formState, formUpdate, isEditable }) => (\n  <>\n    {Object.entries(schema).map(([fieldKey, fieldProps]) => (\n      <>\n        {!isEditable && (\n          <div\n            className=\"d-flex gap-3\"\n            key={`${formState.handle}-${fieldKey}`}\n            style={{ order: fieldProps.order }}\n          >\n            <label className=\"fw-bold w-25\">{fieldProps.label}</label>\n\n            <p\n              className={\n                (formState[fieldKey] ?? null) === null ? \"text-muted\" : \"\"\n              }\n            >\n              {formState[fieldKey] ?? \"none\"}\n            </p>\n          </div>\n        )}\n\n        {isEditable &&\n          widget(\"components.molecule.text-input\", {\n            ...fieldProps,\n            className: \"w-100\",\n            key: `${formState.handle}-${fieldKey}`,\n            onChange: formUpdate({ path: [fieldKey] }),\n            style: { order: fieldProps.order },\n            value: formState[fieldKey],\n          })}\n      </>\n    ))}\n  </>\n);\n\nconst Form = ({\n  actionsAdditional,\n  cancelLabel,\n  classNames,\n  data,\n  fieldsRender: fieldsRenderCustom,\n  heading,\n  isMutable,\n  onCancel,\n  onSubmit,\n  schema,\n  submitLabel,\n}) => {\n  const fieldsRender =\n    typeof fieldsRenderCustom === \"function\"\n      ? fieldsRenderCustom\n      : fieldsRenderDefault;\n\n  const fieldValues = pick(data, Object.keys(schema)) ?? {};\n\n  State.init({\n    initialState: fieldValues,\n    data: fieldValues,\n    isEditorActive: false,\n  });\n\n  const onEditorToggle = (forcedState) =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      isEditorActive: forcedState ?? !lastKnownState.isEditorActive,\n    }));\n\n  const { formState, formUpdate } = useForm({ stateKey: \"data\" });\n\n  const noSubmit =\n    JSON.stringify(formState) === JSON.stringify(state.initialState ?? {});\n\n  const onCancelClick = () => {\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      data: lastKnownState.initialState,\n      isEditorActive: false,\n    }));\n\n    return typeof onCancel === \"function\" ? onCancel() : null;\n  };\n\n  const onSubmitClick = () => {\n    onEditorToggle(false);\n    return typeof onSubmit === \"function\" ? onSubmit(formState) : null;\n  };\n\n  return widget(\"components.molecule.tile\", {\n    className: classNames.root,\n    heading,\n\n    headerSlotRight:\n      isMutable && !state.isEditorActive\n        ? widget(\"components.atom.button\", {\n            classNames: {\n              root: \"btn-sm btn-primary\",\n              adornment: \"bi bi-pen-fill\",\n            },\n\n            label: \"Edit\",\n            onClick: () => onEditorToggle(true),\n          })\n        : null,\n\n    children: (\n      <div className=\"flex-grow-1 d-flex flex-column gap-1\">\n        {fieldsRender({\n          formState,\n          formUpdate,\n          isEditable: isMutable && state.isEditorActive,\n          schema,\n        })}\n\n        {isMutable && state.isEditorActive ? (\n          <div className=\"d-flex align-items-center justify-content-end gap-3 pt-3 mt-auto\">\n            {actionsAdditional ? (\n              <div className=\"me-auto\">{actionsAdditional}</div>\n            ) : null}\n\n            {widget(\"components.atom.button\", {\n              classNames: { root: \"btn-outline-danger shadow-none border-0\" },\n              label: cancelLabel ?? \"Cancel\",\n              onClick: onCancelClick,\n            })}\n\n            {widget(\"components.atom.button\", {\n              classNames: {\n                root: \"btn-success\",\n                adornment: `bi ${classNames.submitAdornment}`,\n              },\n\n              disabled: noSubmit,\n              label: submitLabel ?? \"Submit\",\n              onClick: onSubmitClick,\n            })}\n          </div>\n        ) : null}\n      </div>\n    ),\n  });\n};\n\nreturn Form(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/root.akaia.near/widget/gigs-board.components.organism.form", "fact_widget_deployments_id": "6e26844a3929c95e05aef6dfe5350114", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}