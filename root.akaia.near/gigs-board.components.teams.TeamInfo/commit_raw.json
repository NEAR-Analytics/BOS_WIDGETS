{"tx_hash": "2XyCracowMNzjEK71674Sqzf3QCzcHurwYYotSrk3UyG", "action_id_social": "CcKsqdSqVuLKBw5E9ZEdq4HvbVvshApnJubJqLNVWx1o-0-widget", "block_id": 92110464, "block_timestamp": "2023-05-18T02:11:35.875Z", "signer_id": "root.akaia.near", "widget_name": "gigs-board.components.teams.TeamInfo", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst SharedState = {\n  components: {\n    community: {\n      CommunityHeader: {\n        read: () => {\n          Storage.get(\n            \"state\",\n            `${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.components.community.CommunityHeader`\n          );\n        },\n      },\n    },\n  },\n\n  localWrite: (state) => {\n    Storage.set(\"state\", state);\n  },\n};\n\n/**\n * Reads a board config from DevHub contract storage.\n * Currently a mock.\n *\n * Boards are indexed by their ids.\n */\nconst boardConfigByBoardId = ({ boardId }) => {\n  return {\n    probablyUUIDv4: {\n      id: \"probablyUUIDv4\",\n\n      columns: [\n        { title: \"Draft\", labelFilters: [\"S-draft\"] },\n        { title: \"Review\", labelFilters: [\"S-review\"] },\n      ],\n\n      dataTypes: { Issue: true, PullRequest: true },\n      description: \"Latest NEAR Enhancement Proposals by status\",\n      repoURL: \"https://github.com/near/NEPs\",\n      title: \"NEAR Protocol NEPs\",\n    },\n  }[boardId];\n};\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n\nconst CompactContainer = styled.div`\n  width: fit-content !important;\n  max-width: 100%;\n`;\n\nconst FormCheckLabel = styled.label`\n  white-space: nowrap;\n`;\n/* END_INCLUDE: \"common.jsx\" */\n\nconst Card = styled.div`\n  &:hover {\n    box-shadow: rgba(3, 102, 214, 0.3) 0px 0px 0px 3px;\n  }\n`;\n\nconst metadata = props.members_list[props.member];\nconst isTeam = props.member.startsWith(\"team:\");\nconst memberBadge = isTeam ? \"bi-people-fill\" : \"person-fill\";\nconst header = isTeam ? (\n  <div class=\"d-flex\">\n    <i class=\"bi bi-people-fill me-1\"></i>\n    {props.member}\n  </div>\n) : (\n  <Widget\n    src={`neardevgov.near/widget/ProfileLine`}\n    props={{ accountId: props.member }}\n  />\n);\n\nconst permissionDesc = {\n  \"edit-post\": \"Can edit posts with these labels\",\n  \"use-labels\": \"Can assign and unassign these labels\",\n};\n\nconst permissionExplainer = (permission) => {\n  if (permission.startsWith(\"starts-with:\")) {\n    let s = permission.substring(\"starts-with:\".length);\n    if (s == \"\") {\n      return \"Any label\";\n    } else {\n      return `Labels that start with \"${s}\"`;\n    }\n  } else {\n    return permission;\n  }\n};\n\nconst permissionsFilter = (permissionType) => {\n  let res = [];\n  for (const [pattern, permissions] of Object.entries(metadata.permissions)) {\n    if (permissions.includes(permissionType)) {\n      res.push(pattern);\n    }\n  }\n  return res;\n};\n\nconst permissionsRenderer = (permissionType) => {\n  let permissions = permissionsFilter(permissionType);\n  if (permissions.length > 0) {\n    return (\n      <p class=\"card-text\" key={`${permissionType}-permissions`}>\n        {permissionDesc[permissionType]}:\n        {permissions.map((permission) => (\n          <span class=\"badge text-bg-primary\" key={permission}>\n            {permissionExplainer(permission)}\n          </span>\n        ))}\n      </p>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nreturn (\n  <Card className=\"card my-2 border-secondary\">\n    <div className=\"card-header\">\n      <small class=\"text-muted\">{header}</small>\n    </div>\n    <div className=\"card-body\">\n      <p class=\"card-text\" key=\"description\">\n        <Markdown class=\"card-text\" text={metadata.description}></Markdown>\n      </p>\n      {permissionsRenderer(\"edit-post\")}\n      {permissionsRenderer(\"use-labels\")}\n      {metadata.children ? (\n        <div class=\"vstack\">\n          {metadata.children.map((child) =>\n            widget(\n              \"components.teams.TeamInfo\",\n              { member: child, members_list: props.members_list },\n              child\n            )\n          )}\n        </div>\n      ) : null}\n    </div>\n  </Card>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/root.akaia.near/widget/gigs-board.components.teams.TeamInfo", "fact_widget_deployments_id": "2a879a025e586b453c8d4e80ca224e27", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 28}