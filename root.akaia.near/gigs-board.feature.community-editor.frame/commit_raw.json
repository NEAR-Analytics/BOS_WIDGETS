{"tx_hash": "Bypg7qtenELFkYJGWUpqfgsgBkAw6A5Tn9FV1HKea54C", "action_id_social": "4yVv1hukUHD6P3hL9GWTRnL2oqNo9hWDuZWXprhtMci2-0-widget", "block_id": 95781990, "block_timestamp": "2023-07-05T19:23:46.016Z", "signer_id": "root.akaia.near", "widget_name": "gigs-board.feature.community-editor.frame", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/hashmap\" */\nconst HashMap = {\n  isEqual: (input1, input2) =>\n    input1 !== null &&\n    typeof input1 === \"object\" &&\n    input2 !== null &&\n    typeof input2 === \"object\"\n      ? JSON.stringify(HashMap.toOrdered(input1)) ===\n        JSON.stringify(HashMap.toOrdered(input2))\n      : false,\n\n  toOrdered: (input) =>\n    Object.keys(input)\n      .sort()\n      .reduce((output, key) => ({ ...output, [key]: input[key] }), {}),\n\n  pick: (object, subsetKeys) =>\n    Object.fromEntries(\n      Object.entries(object ?? {}).filter(([key, _]) =>\n        subsetKeys.includes(key)\n      )\n    ),\n};\n/* END_INCLUDE: \"core/lib/hashmap\" */\n/* INCLUDE: \"core/adapter/dev-hub\" */\nconst devHubAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst DevHub = {\n  edit_community_github: ({ handle, github }) =>\n    Near.call(devHubAccountId, \"edit_community_github\", { handle, github }) ??\n    null,\n\n  get_access_control_info: () =>\n    Near.view(devHubAccountId, \"get_access_control_info\") ?? null,\n\n  get_all_authors: () => Near.view(devHubAccountId, \"get_all_authors\") ?? null,\n\n  get_all_communities: () =>\n    Near.view(devHubAccountId, \"get_all_communities\") ?? null,\n\n  get_all_labels: () => Near.view(devHubAccountId, \"get_all_labels\") ?? null,\n\n  get_community: ({ handle }) =>\n    Near.view(devHubAccountId, \"get_community\", { handle }) ?? null,\n\n  get_post: ({ post_id }) =>\n    Near.view(devHubAccountId, \"get_post\", { post_id }) ?? null,\n\n  get_posts_by_author: ({ author }) =>\n    Near.view(devHubAccountId, \"get_posts_by_author\", { author }) ?? null,\n\n  get_posts_by_label: ({ label }) =>\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? null,\n\n  get_root_members: () =>\n    Near.view(devHubAccountId, \"get_root_members\") ?? null,\n\n  useQuery: ({ name, params, initialData }) => {\n    const initialState = { data: null, error: null, isLoading: true };\n\n    const cacheState = useCache(\n      () =>\n        Near.asyncView(devHubAccountId, name, params ?? {})\n          .then((response) => ({\n            ...initialState,\n\n            data:\n              (initialData ?? null) !== null\n                ? { ...initialData, ...(response ?? {}) }\n                : response ?? null,\n\n            isLoading: false,\n          }))\n          .catch((error) => ({\n            ...initialState,\n            error: props?.error ?? error,\n            isLoading: false,\n          })),\n\n      JSON.stringify({ name, params }),\n      { subscribe: true }\n    );\n\n    return cacheState === null ? initialState : cacheState;\n  },\n};\n/* END_INCLUDE: \"core/adapter/dev-hub\" */\n/* INCLUDE: \"entity/viewer\" */\nconst access_control_info = DevHub.useQuery({\n  name: \"get_access_control_info\",\n});\n\nconst Viewer = {\n  isDevHubModerator:\n    access_control_info.data === null || access_control_info.isLoading\n      ? false\n      : access_control_info.data.members_list[\n          \"team:moderators\"\n        ]?.children?.includes?.(context.accountId) ?? false,\n};\n/* END_INCLUDE: \"entity/viewer\" */\n\nconst CommunityDefaults = {\n  handle: null,\n  admins: [context.accountId],\n  name: \"\",\n  description: \"\",\n  bio_markdown: null,\n\n  logo_url:\n    \"https://ipfs.near.social/ipfs/bafkreibysr2mkwhb4j36h2t7mqwhynqdy4vzjfygfkfg65kuspd2bawauu\",\n\n  banner_url:\n    \"https://ipfs.near.social/ipfs/bafkreic4xgorjt6ha5z4s5e3hscjqrowe5ahd7hlfc5p4hb6kdfp6prgy4\",\n\n  tag: \"\",\n  github_handle: null,\n  telegram_handle: null,\n  twitter_handle: null,\n  website_url: null,\n  github: null,\n  sponsorship: null,\n  wiki1: null,\n  wiki2: null,\n};\n\nconst CommunityEditorFrame = ({ handle }) => {\n  State.init({\n    canEdit: false,\n    data: null,\n    hasUnsavedChanges: false,\n    isCommunityNew: typeof handle !== \"string\",\n  });\n\n  const community = state.isCommunityNew\n    ? { data: CommunityDefaults, error: null, isLoading: false }\n    : DevHub.useQuery({\n        name: \"get_community\",\n        params: { handle },\n        initialData: CommunityDefaults,\n      });\n\n  const canEdit =\n    typeof handle !== \"string\" ||\n    (community.data?.admins ?? []).includes(context.accountId) ||\n    Viewer.isDevHubModerator;\n\n  const isSynced = HashMap.isEqual(state.data, community.data);\n\n  if (state.data === null) {\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      data: community.data,\n      hasUnsavedChanges: false,\n      isCommunityNew: typeof handle !== \"string\",\n    }));\n  } else if (\n    typeof handle === \"string\" &&\n    !state.hasUnsavedChanges &&\n    !community.isLoading &&\n    !isSynced\n  ) {\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      data: community.data,\n      hasUnsavedChanges: false,\n    }));\n  }\n\n  const onSubformSubmit = (partial) => {\n    State.update((lastKnownState) => {\n      const dataUpdate = Object.entries(partial).reduce(\n        (update, [key, value]) => ({\n          ...update,\n\n          [key]:\n            typeof value !== \"string\" || (value?.length ?? 0) > 0\n              ? value ?? null\n              : null,\n        }),\n        {}\n      );\n\n      const data = {\n        ...lastKnownState.data,\n        ...dataUpdate,\n      };\n\n      return {\n        ...lastKnownState,\n        data,\n        hasUnsavedChanges: !HashMap.isEqual(data, community.data),\n      };\n    });\n  };\n\n  const onSubmit = () =>\n    Near.call(\n      nearDevGovGigsContractAccountId,\n      state.isCommunityNew ? \"add_community\" : \"edit_community\",\n\n      {\n        handle: state.isCommunityNew ? state.data?.handle : handle,\n\n        community: {\n          ...(state.data ?? {}),\n\n          admins: state.data?.admins.filter(\n            (maybeAccountId) => maybeAccountId.length > 0\n          ),\n        },\n      }\n    );\n\n  const onDelete = () =>\n    Near.call(nearDevGovGigsContractAccountId, \"delete_community\", { handle });\n\n  return community.isLoading && !state.isCommunityNew ? (\n    <div>Loading...</div>\n  ) : (\n    <div className=\"d-flex flex-column align-items-center gap-4 p-4\">\n      {typeof community.data?.handle === \"string\" || state.isCommunityNew ? (\n        <>\n          {widget(\"feature.community-editor.branding-section\", {\n            isMutable: canEdit,\n            onSubmit: onSubformSubmit,\n            values: state.data,\n          })}\n\n          {widget(\"components.organism.form\", {\n            classNames: {\n              submit: \"btn-primary\",\n              submitAdornment: \"bi-check-circle-fill\",\n            },\n\n            heading: \"Basic information\",\n            isEditorActive: state.isCommunityNew,\n            isMutable: canEdit,\n            onSubmit: onSubformSubmit,\n            submitLabel: \"Accept\",\n            values: state.data,\n\n            schema: {\n              name: {\n                inputProps: {\n                  min: 2,\n                  max: 30,\n                  placeholder: \"Community name.\",\n                  required: true,\n                },\n\n                label: \"Name\",\n                order: 1,\n              },\n\n              description: {\n                inputProps: {\n                  min: 2,\n                  max: 60,\n\n                  placeholder:\n                    \"Describe your community in one short sentence that will appear in the discovery communities page.\",\n\n                  required: true,\n                },\n\n                label: \"Description\",\n                order: 2,\n              },\n\n              handle: {\n                inputProps: {\n                  min: 2,\n                  max: 40,\n\n                  placeholder:\n                    \"Choose unique URL handle for your community by adding letters and numbers. Example: zero-knowledge.\",\n\n                  required: true,\n                },\n\n                label: \"Handle\",\n                order: 3,\n              },\n\n              tag: {\n                inputProps: {\n                  min: 2,\n                  max: 20,\n\n                  placeholder:\n                    \"Choose one tag for your community. Any posts with this tag will show up in your community feed.\",\n\n                  required: true,\n                },\n\n                label: \"Tag\",\n                order: 4,\n              },\n            },\n          })}\n\n          {widget(\"components.organism.form\", {\n            classNames: {\n              submit: \"btn-primary\",\n              submitAdornment: \"bi-check-circle-fill\",\n            },\n\n            heading: \"About\",\n            isMutable: canEdit,\n            onSubmit: onSubformSubmit,\n            submitLabel: \"Accept\",\n            values: state.data,\n\n            schema: {\n              bio_markdown: {\n                format: \"markdown\",\n\n                inputProps: {\n                  min: 2,\n                  max: 200,\n\n                  placeholder:\n                    \"Tell more about your community. This will appear in the About section of your community\u2019s homepage.\",\n                },\n\n                label: \"Bio\",\n                multiline: true,\n                order: 1,\n              },\n\n              twitter_handle: {\n                inputProps: { min: 2, max: 60 },\n                label: \"Twitter handle\",\n                order: 2,\n              },\n\n              github_handle: {\n                inputProps: { min: 2, max: 60 },\n                label: \"Github organization handle\",\n                order: 3,\n              },\n\n              telegram_handle: {\n                inputProps: { min: 2, max: 60 },\n                label: \"Telegram handle\",\n                order: 4,\n              },\n\n              website_url: {\n                inputProps: { min: 2, max: 60 },\n                label: \"Website\",\n                order: 5,\n              },\n            },\n          })}\n\n          {widget(\"components.organism.form\", {\n            classNames: {\n              submit: \"btn-primary\",\n              submitAdornment: \"bi-check-circle-fill\",\n            },\n\n            heading: \"Permissions\",\n            isMutable: canEdit,\n            onSubmit: onSubformSubmit,\n            submitLabel: \"Accept\",\n            values: state.data,\n\n            schema: {\n              admins: {\n                format: \"comma-separated\",\n                inputProps: { required: true },\n                label: \"Admins\",\n                order: 1,\n              },\n            },\n          })}\n\n          {widget(\"components.organism.form\", {\n            classNames: {\n              submit: \"btn-primary\",\n              submitAdornment: \"bi-check-circle-fill\",\n            },\n\n            heading: \"Wiki page 1\",\n            isMutable: canEdit,\n            onSubmit: (value) => onSubformSubmit({ wiki1: value }),\n            submitLabel: \"Accept\",\n            values: state.data?.wiki1,\n\n            schema: {\n              name: {\n                label: \"Name\",\n                order: 1,\n              },\n\n              content_markdown: {\n                format: \"markdown\",\n                label: \"Content\",\n                multiline: true,\n                order: 2,\n              },\n            },\n          })}\n\n          {widget(\"components.organism.form\", {\n            classNames: {\n              submit: \"btn-primary\",\n              submitAdornment: \"bi-check-circle-fill\",\n            },\n\n            heading: \"Wiki page 2\",\n            isMutable: canEdit,\n            onSubmit: (value) => onSubformSubmit({ wiki2: value }),\n            submitLabel: \"Accept\",\n            values: state.data?.wiki2,\n\n            schema: {\n              name: {\n                label: \"Name\",\n                order: 1,\n              },\n\n              content_markdown: {\n                format: \"markdown\",\n                label: \"Content\",\n                multiline: true,\n                order: 2,\n              },\n            },\n          })}\n\n          {!state.isCommunityNew && Viewer.isDevHubModerator ? (\n            <div\n              className=\"d-flex justify-content-center gap-4 p-4 w-100\"\n              style={{ maxWidth: 896 }}\n            >\n              {widget(\"components.atom.button\", {\n                classNames: {\n                  root: \"btn-lg btn-outline-danger border-none\",\n                },\n\n                label: \"Delete community\",\n                onClick: onDelete,\n              })}\n            </div>\n          ) : null}\n\n          {canEdit && state.hasUnsavedChanges && (\n            <div\n              className=\"position-fixed end-0 bottom-0 bg-transparent pe-4 pb-4\"\n              style={{\n                borderTopLeftRadius: \"100%\",\n              }}\n            >\n              {widget(\"components.atom.button\", {\n                classNames: {\n                  root: \"btn-lg btn-success\",\n\n                  adornment: `bi ${\n                    state.isCommunityNew\n                      ? \"bi-rocket-takeoff-fill\"\n                      : \"bi-exclamation-triangle-fill\"\n                  }`,\n\n                  adornmentHover: `bi ${\n                    state.isCommunityNew\n                      ? \"bi-rocket-takeoff-fill\"\n                      : \"bi-sign-merge-right-fill\"\n                  }`,\n                },\n\n                isCollapsible: true,\n                label: state.isCommunityNew ? \"Launch\" : \"Save\",\n                onClick: onSubmit,\n              })}\n            </div>\n          )}\n        </>\n      ) : (\n        <div\n          className=\"d-flex flex-column justify-content-center align-items-center w-100\"\n          style={{ height: 384 }}\n        >\n          <h2 className=\"h2\">{`Community with handle ${community.handle} not found.`}</h2>\n        </div>\n      )}\n    </div>\n  );\n};\n\nreturn <CommunityEditorFrame {...props} />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/root.akaia.near/widget/gigs-board.feature.community-editor.frame", "fact_widget_deployments_id": "5cc5602a238093eb1bd87c9d2e851e61", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 11}