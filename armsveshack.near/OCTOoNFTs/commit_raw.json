{"tx_hash": "2rgZMq3oMefjaGaSRS3JwNXp3U9xax8CHTgChbgGr894", "action_id_social": "7QUYvx71FoMvogixm47SWMF75W3nZKYdVQZvYMN9YPew-0-widget", "block_id": 116815275, "block_timestamp": "2024-04-14T08:39:21.448Z", "signer_id": "armsveshack.near", "widget_name": "OCTOoNFTs", "source_code": "const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nconst contractAddress = \"0xe4531Ad329830F47F8982110A3F89aE425a7c21E\";\nconst address2 = \"0x9567D433240681653fb4DD3E05e08D60fe54210d\";\nconst message = props.message || `Balance: `;\nconst unit = props.unit || `TEST`;\nconst [chainId, setChainID] = useState(false);\n\nconst [data, setData] = useState([\n  {\n    id: 1,\n    name: \"My House\",\n    publicData: \"Registry ID 3182\",\n    privateData: \"Address: Carrer Santander 3, 3-2. 08020 Barcelona\",\n  },\n  {\n    id: 2,\n    name: \"My Work\",\n    publicData: \"Registry ID 2563\",\n    privateData: \"Address: Carrer Arago 101, 2-2. 08015 Barcelona\",\n  },\n  //{ id: 3, name: \"Item 3\", publicData: \"Public 3\", privateData: \"Private 2\" },\n]);\n\nconst [whitelist, setWhitelist] = useState([\n  {\n    id: 1,\n    dataId: 1,\n    address: \"0x9567D433240681653fb4DD3E05e08D60fe54210d\",\n    dateTime: \"2024/04/25 18:00:00\",\n    active: 1,\n  },\n  {\n    id: 1,\n    dataId: 1,\n    address: \"0x00f02f3a111D452C0DFbF576f09A4003b2F18284\",\n    dateTime: \"2024/04/10 9:00:00\",\n    active: 0,\n  },\n  //{ id: 3, name: \"Item 3\", publicData: \"Public 3\", privateData: \"Private 2\" },\n]);\n\nconst abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"initialOwner\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"ERC721IncorrectOwner\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ERC721InsufficientApproval\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"approver\",\n        type: \"address\",\n      },\n    ],\n    name: \"ERC721InvalidApprover\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n    ],\n    name: \"ERC721InvalidOperator\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"ERC721InvalidOwner\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"receiver\",\n        type: \"address\",\n      },\n    ],\n    name: \"ERC721InvalidReceiver\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"ERC721InvalidSender\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ERC721NonexistentToken\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnableInvalidOwner\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnableUnauthorizedAccount\",\n    type: \"error\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"approved\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"ApprovalForAll\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getApproved\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n    ],\n    name: \"isApprovedForAll\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ownerOf\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"safeMint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setApprovalForAll\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"interfaceId\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"supportsInterface\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokenURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst getTokenBalance = (receiver) => {\n  const iface = new ethers.utils.Interface(abi);\n  const encodedData2 = iface.encodeFunctionData(\"balanceOf\", [\n    \"0x9567D433240681653fb4DD3E05e08D60fe54210d\",\n  ]);\n  const provider3 = new Ethers.provider(window.ethereum);\n\n  const contract = new Ethers.provider()\n    .call({\n      to: contractAddress,\n      data: encodedData2,\n    })\n    .then((rawBalance) => {\n      console.log(rawBalance);\n    });\n};\n\nconst getNetwork = () => {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      setChainID(chainIdData.chainId);\n    });\n};\n\nuseEffect(() => {\n  // This code runs after the component is mounted\n  console.log(\"Component mounted\");\n  if (Ethers.provider()) {\n    getTokenBalance();\n    getNetwork();\n  }\n  return () => {\n    console.log(\"Component unmounted\");\n  };\n}, []);\n\nfunction Modal({ onClose, show, children }) {\n  if (!show) {\n    return <></>;\n  }\n\n  return (\n    <div\n      class=\"modal-backdrop\"\n      style={{\n        position: \"fixed\",\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        backgroundColor: \"rgba(224,224,224,0.3)\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n\n        zIndex: 2,\n      }}\n      onClick={() => {\n        onClose();\n      }}\n    >\n      <div\n        class=\"rounded-2xl px-4 py-4\"\n        style={{\n          width: \"40%\",\n          minHeight: \"80px\",\n          padding: \"20px\",\n          color: \"#0047AB\",\n          backgroundColor: \"rgba(224,224,224)\",\n          //borderRadius: '0.45rem',\n          //border: '3px solid #66CC99',\n          alignItems: \"center\",\n        }}\n        onClick={(e) => {\n          e.stopPropagation();\n        }}\n      >\n        <div class=\"rounded-lg bg-lime-300 py-4 px-4 border-0\">{children}</div>\n      </div>\n    </div>\n  );\n}\n\nuseEffect(() => {\n  const intervalId = setInterval(() => {\n    setDots((prevDots) => (prevDots.length < 3 ? prevDots + \".\" : \"\"));\n  }, 700);\n  return () => clearInterval(intervalId);\n}, []);\n\nconst prettyAddress = (address) => {\n  const string =\n    address.substring(0, 2) +\n    \"...\" +\n    address.substring(address.length - 4, address.length);\n  return string;\n};\n\nif (state.balance === undefined && sender) {\n  Ethers.provider()\n    .getBalance(sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    font-weight: bold;\n    background-color: #FFFFFF;\n    color: #0047AB;\n    padding: 5px;\n    border-radius: 0.45rem;\n  `,\n  });\n}\nconst Theme = state.theme;\n\nconst Navbar = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 5px;\n  color: white;\n  background-color: #0600e1;\n  \n  h1 {\n    margin-top: 7px;\n    margin-left: 5px;\n    font-size: 40px;\n    font-weight: bold;\n  }\n\n  div {\n    display: flex;\n    align-items: center;\n  }\n`;\n\nconst LeftSide = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nconst RightSide = styled.div`\n  display: flex;\n  background-color: #FFFFFF;\n  gap: 10px;\n  border-radius: 0.45rem;\n  border: 2px solid #007bff;\n`;\n\nconst Footer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n`;\n\nreturn (\n  <Theme>\n    <div class=\"main-container\">\n      <Navbar>\n        <div>\n          <img\n            src=\"https://docs.oasis.io/img/logo.png\"\n            alt=\"OCTOONFT Banner\"\n            height=\"40\"\n            width=\"40\"\n          />\n          <h1>OCTO oNFT </h1>\n        </div>\n      </Navbar>\n      <div class=\"header\">\n        <Navbar>\n          <LeftSide>\n            <div>\n              {sender ? <>{prettyAddress(sender)}</> : \"\"} -\n              {(chainId = 23295 ? \"Sapphire Testnet\" : \"\")} -{message}{\" \"}\n              {state.balance} {unit}\n            </div>\n          </LeftSide>\n          <RightSide>\n            <Web3Connect\n              className=\"styled.div\"\n              connectLabel=\"Connect\"\n              disconnectLabel=\"Disconnect\"\n              connectingLabel=\"Connecting...\"\n            />\n          </RightSide>\n        </Navbar>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <div>\n          <h1>My list of NFT's</h1>\n          {sender && ethers.utils.getAddress(sender) ===\n          ethers.utils.getAddress(address2) ? (\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                gap: \"10px\",\n                padding: \"5px\",\n              }}\n            >\n              {data.map((item) => (\n                <div>\n                  <div\n                    key={item.id}\n                    style={{\n                      border: \"1px solid black\",\n                      borderRadius: \"0.45rem\",\n                      padding: \"5px\",\n                    }}\n                  >\n                    <h2>{item.name}</h2>\n                    <p>{item.publicData}</p>\n                    <p style={{ fontStyle: \"italic\" }}>{item.privateData}</p>\n\n                    <div style={{ padding: \"5px\" }}>\n                      <input\n                        type=\"text\"\n                        value={text}\n                        placeholder=\"Whitelist address\"\n                        onChange={handleChange}\n                      />\n                    </div>\n                    <div style={{ padding: \"5px\" }}>\n                      <input\n                        type=\"date\"\n                        value={date}\n                        onChange={handleDateChange}\n                      />\n                      <input\n                        type=\"time\"\n                        value={time}\n                        onChange={handleTimeChange}\n                      />\n                    </div>\n                    <button type=\"submit\" variant=\"primary\">\n                      Whitelist\n                    </button>\n                  </div>\n                  {whitelist && (\n                    <div>\n                      <h3>Whitelisted Addresses</h3>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"column\",\n                          //justifyContent: \"left\",\n                          alignItems: \"center\",\n                          gap: \"10px\",\n                          padding: \"5px\",\n                        }}\n                      >\n                        {whitelist.map((white) => (\n                          <div>\n                            {white.id == item.id ? (\n                              <div\n                                key={white.id}\n                                style={{\n                                  border: \"1px solid black\",\n                                  borderRadius: \"0.45rem\",\n                                  padding: \"5px\",\n                                }}\n                              >\n                                <h2>{white.name}</h2>\n                                <p>{prettyAddress(white.address)}</p>\n                                <p>{white.dateTime}</p>\n                                {white.active ? (\n                                  <button type=\"submit\" variant=\"primary\">\n                                    Revoke\n                                  </button>\n                                ) : (\n                                  <div>Time ended</div>\n                                )}\n                              </div>\n                            ) : (\n                              <div\n                                key={white.id}\n                                style={{\n                                  border: \"1px solid white\",\n                                  borderRadius: \"0.45rem\",\n                                  padding: \"5px\",\n                                }}\n                              >\n                                <h2></h2>\n                                <p>&nbsp;</p>\n                                <p>&nbsp;</p>\n                                {white.active ? (\n                                  <button\n                                    style={{\n                                      backgroundColor: \"white\",\n                                      color: \"white\",\n                                      border: \"white\",\n                                    }}\n                                  >\n                                    &nbsp;\n                                  </button>\n                                ) : (\n                                  <div>&nbsp;</div>\n                                )}\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div>\n              <br></br>\n              <br></br>\n              <br></br>\n              No NFT's in your wallet\n              <br></br>\n              <br></br>\n              <br></br>\n              <br></br>\n              <br></br>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n    <Footer>\n      <a href=\"https://near.social/mob.near/widget/MyPage?accountId=devgovgigs.near\">\n        <img\n          src=\"https://i.ibb.co/BcD8HT2/powered-by-DH-dark.png\"\n          alt=\"Banner\"\n          target=\"_blank\"\n        />\n      </a>\n      <br></br>\n      <br></br>\n      <br></br>\n    </Footer>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/armsveshack.near/widget/OCTOoNFTs", "fact_widget_deployments_id": "e26ce9abe0e8cdd9019241ea9ac33db8", "inserted_timestamp": "2024-04-14T11:08:30.024Z", "modified_timestamp": "2024-04-14T11:08:30.024Z", "__row_index": 0}