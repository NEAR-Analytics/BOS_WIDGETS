{"tx_hash": "6kh2ZW4YJKxr1JQRweKjws7CMMV57HVdeJhYZor9Lgs5", "action_id_social": "9PS2Ey1GMh2TbVCT7bUhmR5vVdAVm9MNidfXhR1LJmdz-0-widget", "block_id": 110766553, "block_timestamp": "2024-01-19T04:46:00.151Z", "signer_id": "create.near", "widget_name": "repository.content", "source_code": "const Content = styled.div`\n  flex: 1;\n  margin: 8px;\n  padding: 20px;\n  background-color: #f9f9f9;\n  width: 97.5%;\n  overflow: auto;\n`;\n\nconst Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  width: 50%;\n  background-color: #fff;\n`;\n\nconst Grid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n\n  @media (min-width: 600px) {\n    gap: 20px;\n  }\n`;\n\nconst GridItem = styled.div`\n  flex: 1 0 calc(33.333% - 10px); // Three per row by default\n\n  @media (min-width: 600px) {\n    flex: 1 0 calc(25% - 20px); // Four per row on wider screens\n  }\n`;\n\nconst Columns = styled.div`\n  display: flex;\n`;\n\nconst Column = styled.div`\n  min-width: 200px;\n  border-right: 1px solid #e0e0e0;\n`;\n\nfunction flattenObject(obj, parentKey) {\n  parentKey = parentKey ?? \"\";\n  let paths = [];\n\n  Object.keys(obj).forEach((key) => {\n    const currentPath = parentKey ? `${parentKey}/${key}` : key;\n\n    if (typeof obj[key] === \"object\") {\n      paths = paths.concat(flattenObject(obj[key], currentPath));\n    } else if (obj[key] === true) {\n      paths.push(currentPath);\n    }\n  });\n\n  return paths;\n}\n\nconst layout = props.layout || \"LIST\";\nconst setPath = props.setPath || (() => {});\nconst path = props.path || props.src || \"create.near/widget/GitBos\";\n\nlet data;\nconst parts = path.split(\"/\");\nif (parts.length > 2) {\n  parts.pop();\n  parts.push(\"*\");\n  const newPath = parts.join(\"/\");\n  const keys = Social.keys(newPath, \"final\");\n  const flattenedKeys = flattenObject(keys);\n  const escapedPath = path.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n  const regex = `^${escapedPath}(\\\\..+)?$`;\n  const matchingKeys = flattenedKeys.filter((it) => it.match(regex));\n  let rawData = Social.getr(matchingKeys, \"final\");\n\n  function removeFirstTwoLevels(obj) {\n    let result = {};\n\n    Object.keys(obj).forEach((firstLevelKey) => {\n      let firstLevelObj = obj[firstLevelKey];\n      if (typeof firstLevelObj === \"object\" && firstLevelObj !== null) {\n        Object.keys(firstLevelObj).forEach((secondLevelKey) => {\n          let secondLevelObj = firstLevelObj[secondLevelKey];\n          if (typeof secondLevelObj === \"object\" && secondLevelObj !== null) {\n            result = { ...result, ...secondLevelObj };\n          }\n        });\n      }\n    });\n\n    return result;\n  }\n\n  data = removeFirstTwoLevels(rawData);\n} else {\n  data = Social.getr(path, \"final\");\n}\n\nconst showPreview = props.showPreview || false;\nconst setSelectedPath = props.setSelectedPath || (() => {});\nconst selectedPath = props.selectedPath || \"\";\n\nconsole.log(selectedPath);\n\nif (!data) {\n  return \"Loading...\";\n}\n\nState.init({\n  activePath: [],\n  selectedPath: \"\",\n});\n\nfunction setActivePath(v) {\n  State.update({ activePath: v });\n}\n\nconst ArrowIcon = styled.span`\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  border-top: 2px solid black;\n  border-right: 2px solid black;\n  transform: ${(props) =>\n    props.isExpanded ? \"rotate(135deg)\" : \"rotate(45deg)\"};\n  margin-right: 5px;\n`;\n\nconst ItemContainer = styled.span`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  cursor: pointer;\n  font-size: 18px;\n`;\n\nconst ItemInfo = styled.span`\n  display: flex;\n  gap: 10px;\n  width: 200px;\n  justify-content: space-between;\n`;\n\nconst ItemDetails = styled.span`\n  display: flex;\n  gap: 4px;\n  align-items: center;\n`;\n\nconst IconDiv = styled.div`\n  background-color: white;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 5em;\n  height: 5em;\n  cursor: pointer;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  &:hover {\n    transform: scale(1.05);\n    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);\n  }\n\n  &:active {\n    transform: scale(0.95);\n    background-color: #f0f0f0;\n  }\n`;\n\nconst { ContextMenu } = VM.require(\"efiz.near/widget/Module.ContextMenu\");\n\nContextMenu = ContextMenu || (() => <></>);\n\nfunction deleteFile(path) {\n  function buildObjectWithLastNull(path) {\n    const parts = path.split(\"/\").slice(1);\n    let currentObj = {};\n    let pointer = currentObj;\n\n    parts.forEach((component, i) => {\n      if (i === parts.length - 1) {\n        pointer[component] = null;\n      } else {\n        pointer[component] = {};\n        pointer = pointer[component];\n      }\n    });\n\n    return currentObj;\n  }\n\n  const result = buildObjectWithLastNull(path);\n  Social.set(result);\n}\n\nfunction deleteFolder(path, data) {\n  function setLeavesToNull(obj) {\n    Object.keys(obj).forEach((key) => {\n      if (typeof obj[key] === \"object\" && obj[key] !== null) {\n        obj[key] = setLeavesToNull(obj[key]);\n      } else {\n        obj[key] = null;\n      }\n    });\n    return obj;\n  }\n\n  function buildObjectWithPath(path, data) {\n    const parts = path.split(\"/\").slice(1);\n    const value = parts.reduce(\n      (current, part) => (current && current[part] ? current[part] : undefined),\n      data\n    );\n    let currentObj = {};\n    let pointer = currentObj;\n\n    parts.forEach((component, i) => {\n      if (i === parts.length - 1) {\n        pointer[component] = setLeavesToNull(value);\n      } else {\n        pointer[component] = {};\n        pointer = pointer[component];\n      }\n    });\n    return currentObj;\n  }\n\n  const newData = buildObjectWithPath(path, data);\n  Social.set(newData);\n}\n\nfunction calculateSize(data) {\n  const str = typeof data === \"object\" ? JSON.stringify(data) : data;\n  let sizeInBytes = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    const charCode = str.charCodeAt(i);\n    if (charCode <= 0x7f) {\n      sizeInBytes += 1;\n    } else if (charCode <= 0x7ff) {\n      sizeInBytes += 2;\n    } else if (charCode <= 0xffff) {\n      sizeInBytes += 3;\n    } else {\n      sizeInBytes += 4;\n    }\n  }\n\n  if (sizeInBytes < 1024) {\n    return sizeInBytes + \" Bytes\";\n  } else if (sizeInBytes < 1024 * 1024) {\n    return (sizeInBytes / 1024).toFixed(2) + \" KB\";\n  } else {\n    return (sizeInBytes / (1024 * 1024)).toFixed(2) + \" MB\";\n  }\n}\n\nfunction determineType(path, data) {\n  const parts = path.split(\"/\");\n  if (parts.length === 1) {\n    return \"account\";\n  } else {\n    const v = parts[1];\n    return v;\n  }\n}\n\nconst iconMap = {\n  nametag: \"bi bi-person-badge\",\n  profile: \"bi bi-person-circle\",\n  index: \"bi bi-list-ol\",\n  graph: \"bi bi-graph-up\",\n  widget: \"bi bi-layout-text-sidebar-reverse\",\n  post: \"bi bi-file-post\",\n  thing: \"bi bi-box\",\n  type: \"bi bi-type\",\n  settings: \"bi bi-gear\",\n};\n\nconst handleColumnClick = (key) => {\n  setActivePath([...state.activePath, key]);\n};\n\nconst things = Object.keys(data); //this\n\nfunction organizeData(data) {\n  const result = {};\n\n  data.forEach((path) => {\n    if (path.includes(\".\")) {\n      const parts = path.split(\".\");\n      let current = result;\n\n      parts.forEach((part, index) => {\n        if (index === parts.length - 1) {\n          current[part] = path;\n        } else {\n          if (!current[part] || typeof current[part] === \"string\") {\n            current[part] = {};\n          }\n          current = current[part];\n        }\n      });\n    } else {\n      if (!result[path]) {\n        result[path] = {};\n      }\n      result[path][path] = path;\n    }\n  });\n\n  return result;\n}\n\nconst organizedData = organizeData(things);\n\nif (!organizeData) {\n  return \"Loading...\";\n}\n// return <p>{JSON.stringify(organizedData)}</p>;\n\nfunction RenderData({ data, layout }) {\n  switch (layout) {\n    case \"LIST\":\n      const dataList =\n        state.activePath.length === 0 ? data : getNestedData(data, activePath);\n\n      return (\n        <>\n          {Object.keys(dataList).map(\n            (\n              key // this\n            ) => (\n              <div key={key}>\n                <Widget\n                  src=\"create.near/widget/repository.file\"\n                  loading={<></>}\n                  props={{\n                    path: key,\n                    data: dataList[key],\n                    level: 0,\n                    eFile: ({ key, data, level }) => {\n                      const updatedPath = [path, key].join(\"/\");\n                      return (\n                        <ContextMenu\n                          Item={() => (\n                            // TODO: Honestly, eFile and eFolder should be the same component.\n                            <ItemContainer\n                              onDoubleClick={() => setPath(updatedPath)} // open file\n                              onClick={() => setSelectedPath(updatedPath)}\n                              style={{\n                                marginLeft: level * 20,\n                                backgroundColor:\n                                  selectedPath === updatedPath\n                                    ? \"#f0f0f0\"\n                                    : \"transparent\",\n                              }}\n                            >\n                              <ItemDetails>\n                                <i className=\"bi bi-file-earmark\"></i>\n                                <span>{key.split(\".\").pop()}</span>{\" \"}\n                              </ItemDetails>\n                              <ItemInfo>\n                                <span>{calculateSize(data)}</span>\n                                <span>{determineType(updatedPath, data)}</span>\n                                <span />\n                              </ItemInfo>\n                            </ItemContainer>\n                          )}\n                          passProps={{\n                            delete: { path: updatedPath, data },\n                          }}\n                          handlers={{\n                            delete: ({ path }) => {\n                              deleteFile(path);\n                            },\n                          }}\n                          items={{\n                            delete: () => (\n                              <>\n                                <i className=\"menu__item__icon bi bi-x-lg\" />\n                                Delete\n                              </>\n                            ),\n                          }}\n                        />\n                      );\n                    },\n                    eFolder: ({ toggleExpand, isExpanded, key, level }) => {\n                      const updatedPath = [path, key].join(\"/\");\n                      return (\n                        <ContextMenu\n                          Item={() => (\n                            <ItemContainer\n                              onDoubleClick={() => setPath(updatedPath)} // open folder\n                              onClick={() => {\n                                toggleExpand();\n                              }}\n                              style={{\n                                marginLeft: level * 20,\n                              }}\n                            >\n                              <ItemDetails>\n                                <ArrowIcon isExpanded={isExpanded} />\n                                <i className=\"bi bi-folder\"></i>\n                                <span>{key.split(\"/\").pop()}</span>{\" \"}\n                              </ItemDetails>\n                              <ItemInfo>\n                                <span>--</span>\n                                <span>Folder</span>\n                                <span />\n                              </ItemInfo>\n                            </ItemContainer>\n                          )}\n                          passProps={{\n                            delete: { path: updatedPath, data },\n                          }}\n                          handlers={{\n                            delete: ({ path, data }) => {\n                              // TODO: This is broken, I think because of the adjusted data object.\n                              deleteFolder(path, data);\n                            },\n                          }}\n                          items={{\n                            delete: () => (\n                              <>\n                                <i className=\"menu__item__icon bi bi-x-lg\" />\n                                Delete\n                              </>\n                            ),\n                          }}\n                        />\n                      );\n                    },\n                  }}\n                />\n              </div>\n            )\n          )}\n        </>\n      );\n\n    case \"GRID\":\n      return (\n        <Grid>\n          {Object.keys(data).map((key) => {\n            const updatedPath = [path, key].join(\"/\");\n            return (\n              <GridItem key={key}>\n                <ContextMenu\n                  Item={() => (\n                    <IconDiv onClick={() => setPath(updatedPath)}>\n                      <i className={`${iconMap[key] || \"bi bi-file\"}`} />\n                      {key}\n                    </IconDiv>\n                  )}\n                  passProps={{\n                    delete: { path: updatedPath },\n                  }}\n                  handlers={{\n                    delete: ({ path }) => {\n                      deleteFile(path);\n                    },\n                  }}\n                  items={{\n                    delete: () => (\n                      <>\n                        <i className=\"menu__item__icon bi bi-x-lg\" />\n                        Delete\n                      </>\n                    ),\n                  }}\n                />\n              </GridItem>\n            );\n          })}\n        </Grid>\n      );\n\n    case \"COLUMNS\":\n      return (\n        <p>TBD</p>\n        // <Columns>\n        //   {state.activePath.map((pathKey, idx) => (\n        //     <Column key={idx}>\n        //       {Object.keys(\n        //         getNestedData(data, state.activePath.slice(0, idx + 1))\n        //       ).map((key) => (\n        //         <div key={key} onClick={() => handleColumnClick(key)}>\n        //           {key}\n        //         </div>\n        //       ))}\n        //     </Column>\n        //   ))}\n        // </Columns>\n      );\n\n    default:\n      return null;\n  }\n}\n\nconst [expandedFolder, setExpandedFolder] = useState(null);\n\nfunction toggleFolder(key) {\n  if (expandedFolder === key) {\n    setExpandedFolder(null);\n  } else {\n    setExpandedFolder(key);\n  }\n}\n\nreturn (\n  <Content>\n    <RenderData layout={layout} data={organizedData} />\n  </Content>\n);\n", "metadata": {}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/create.near/widget/repository.content", "fact_widget_deployments_id": "805caf25f7b1c2330f09519c35336777", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}