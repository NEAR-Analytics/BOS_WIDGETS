{"tx_hash": "2hKkcSeGt7SfEzdWTRoReSaF92G5jLc62761X8GEds3p", "action_id_social": "5EVEt322Kn83cg7Sr7HhBeAyMQ7Ses8YjMoMM6rHzhia-0-widget", "block_id": 110528861, "block_timestamp": "2024-01-16T07:09:25.792Z", "signer_id": "create.near", "widget_name": "SDKs.DAO.Main", "source_code": "// ---------------\n// view methods //\n// ---------------\n\nconst daos = Near.view(factoryId, \"get_dao_list\");\nconst daoVersion = Near.view(daoId, \"version\");\nconst factory = Near.view(daoId, \"get_factory_info\");\nconst policy = Near.view(daoId, \"get_policy\");\nconst config = Near.view(daoId, \"get_config\");\n\n// PROPOSALS\nconst proposal = Near.view(daoId, \"get_proposal\", {\n  id: parseInt(proposalId),\n});\nconst lastProposalId = Near.view(daoId, \"get_last_proposal_id\");\nlet proposals = [];\nif (lastProposalId) {\n  proposals =\n    Near.view(daoId, \"get_proposals\", {\n      from_index: Math.max(0, lastProposalId - limit),\n      limit,\n    }) || [];\n  proposals.reverse();\n}\n\n// ROLES + PERMISSIONS\nconst groups = policy.roles\n  .filter((role) => role.name === groupId)\n  .map((role) => {\n    const group = role.kind.Group;\n\n    return group;\n  });\nconst check = groups.map((group) => {\n  return !group\n    ? false\n    : group.filter((address) => address === accountId).length > 0;\n})?.[0];\nconst processPolicy = (policy) => {\n  const roles = {};\n  const options = [];\n  policy.roles.forEach((role) => {\n    if (role.kind.Group) {\n      if (!roles[role.name]) {\n        roles[role.name] = role;\n        options.push({ text: role.name, value: role.name });\n      }\n    }\n  });\n  State.update({ rolesOptions: options });\n  return roles;\n};\nconst allowedRoles = useCache(\n  () =>\n    Near.asyncView(daoId, \"get_policy\").then((policy) => processPolicy(policy)),\n  daoId + \"-remove-member-proposal\",\n  { subscribe: false }\n);\n\n// BOUNTIES\nconst bounty = Near.view(daoId, \"get_bounty\", {\n  id: bountyId,\n});\nconst claims = Near.view(daoId, \"get_bounty_claims\", {\n  account_id: accountId,\n});\nconst numberOfClaims = Near.view(daoId, \"get_bounty_number_of_claims\", {\n  id: bountyId,\n});\nconst loadBounties = () => {\n  const lastBountyId =\n    state.lastBountyId !== null\n      ? state.lastBountyId\n      : Near.view(daoId, \"get_last_bounty_id\");\n  if (lastBountyId === null) return;\n\n  const fromIndex = Math.max(0, lastBountyId - bountiesPerPage + 1); // Ensures fromIndex is never less than 0\n  const limit = fromIndex === 0 ? lastBountyId + 1 : bountiesPerPage; // Ensure we don't fetch the same bounties twice if fromIndex is 0\n\n  const newBounties = Near.view(daoId, \"get_bounties\", {\n    from_index: fromIndex,\n    limit: limit,\n  });\n  if (newBounties === null) return;\n\n  State.update({\n    ...state,\n    hasMore: fromIndex > 0,\n    bounties: [...state.bounties, ...newBounties.reverse()],\n    lastBountyId: fromIndex - 1,\n  });\n};\n\n// BUFFER ZONE\nconst function_call_args = JSON.stringify({\n  token_id: \"2498\",\n  receiver_id: \"0xedward.near\",\n});\nconst args = Buffer.from(function_call_args, \"utf-8\").toString(\"base64\");\n\n// -----------------\n// change methods //\n// -----------------\n\n// UTILS\nconst call = ({ daoId, methodName, args, deposit }) => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName,\n      args,\n      deposit: deposit,\n      gas: gas,\n    },\n  ]);\n};\n\nconst actions = {\n  AddProposal: \"create proposal\",\n  VoteApprove: \"vote approve\",\n  VoteReject: \"vote reject\",\n  VoteRemove: \"vote remove\",\n};\n\nconst proposalTypes = [\n  \"All\",\n  \"Transfer\",\n  \"Vote\",\n  \"FunctionCall\",\n  \"AddBounty\",\n  \"BountyDone\",\n  \"AddMemberToRole\",\n  \"RemoveMemberFromRole\",\n  \"ChangeConfig\",\n  \"ChangePolicy\",\n  \"ChangePolicyUpdateParameters\",\n  \"ChangePolicyUpdateDefaultVotePolicy\",\n  \"ChangePolicyRemoveRole\",\n  \"ChangePolicyAddOrUpdateRole\",\n  \"FactoryInfoUpdate\",\n  \"SetStakingContract\",\n  \"UpgradeRemote\",\n  \"UpgradeSelf\",\n].map((t) => {\n  return {\n    value: t,\n    label: t,\n  };\n});\n\nconst addProposal = ({ daoId, proposal }) => {\n  const policy = Near.view(daoId, \"get_policy\");\n\n  if (policy === null) {\n    return \"Loading...\";\n  }\n\n  const deposit = policy.proposal_bond;\n\n  call({\n    daoId,\n    methodName: \"add_proposal\",\n    args: {\n      proposal,\n    },\n    deposit,\n  });\n};\n\n// CREATE DAO\nconst newDao_args = {\n  config,\n  policy,\n};\nconst dao_args = Buffer.from(JSON.stringify(newDao_args), \"utf-8\").toString(\n  \"base64\"\n);\nconst handleCreate = () => {\n  Near.call([\n    {\n      contractName: \"sputnik-dao.near\",\n      methodName: \"create\",\n      args: {\n        name: daoName,\n        args: dao_args,\n      },\n      deposit: \"7000000000000000000000000\",\n      gas: \"200000000000000\",\n    },\n  ]);\n};\n\n// ADD MEMBER\nconst handleProposal = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: `add ${memberId ?? accountId} to ${roleId ?? \"council\"}`,\n          kind: {\n            AddMemberToRole: {\n              member_id: memberId ?? accountId,\n              role: roleId ?? \"council\",\n            },\n          },\n        },\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\n\n// REMOVE MEMBER\nconst handleProposal = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: `remove ${memberId ?? accountId} from ${\n            roleId ?? \"council\"\n          }`,\n          kind: {\n            RemoveMemberFromRole: {\n              member_id: memberId ?? accountId,\n              role: roleId ?? \"council\",\n            },\n          },\n        },\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\n\n// POLL\nconst handleProposal = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description,\n          kind: \"Vote\",\n        },\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\n\n// TRANSFER\nconst transferProposal = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: `transfer ${amount} ${token_id} to ${receiver_id}`,\n          kind: {\n            Transfer: {\n              token_id,\n              receiver_id,\n              amount,\n            },\n          },\n        },\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\n\n// BOUNTY PROPOSAL\nconst handleProposal = () => {\n  const bounty = {\n    description,\n    token,\n    amount,\n    times,\n    max_deadline,\n  };\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: `offer ${amount} ${token_id} (up to ${times} claims)`,\n          kind: {\n            AddBounty: {\n              bounty,\n            },\n          },\n        },\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\n\n// BOUNTY CLAIM\nconst handleClaim = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"bounty_claim\",\n      args: {\n        id: JSON.parse(bounty.id),\n        deadline: bounty.max_deadline,\n      },\n      deposit: deposit,\n      gas: gas,\n    },\n  ]);\n};\n\n// BOUNTY UNCLAIM\nconst handleUnclaim = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"bounty_giveup\",\n      args: {\n        id: JSON.parse(bounty.id),\n      },\n      gas: gas,\n    },\n  ]);\n};\n\n// BOUNTY SUBMIT WORK\nconst handleSubmit = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: \"work submitted\",\n          kind: {\n            BountyDone: {\n              receiver_id: accountId,\n              bounty_id: JSON.parse(bounty.id),\n            },\n          },\n        },\n      },\n      deposit: deposit,\n      gas: gas,\n    },\n  ]);\n};\n\n// FUNCTION CALL\nconst createFunctionCallProposal = ({\n  daoId,\n  receiver_id,\n  method_name,\n  args,\n}) => {\n  const proposal_args = Buffer.from(JSON.stringify(args), \"utf-8\").toString(\n    \"base64\"\n  );\n  addProposal({\n    daoId,\n    proposal: {\n      description: `call ${method_name} to ${receiver_id}`,\n      kind: {\n        FunctionCall: {\n          receiver_id,\n          actions: [\n            {\n              method_name,\n              args: proposal_args,\n              deposit: \"100000000000000000000000\",\n              gas: \"219000000000000\",\n            },\n          ],\n        },\n      },\n    },\n  });\n};\nfunction decodeArgs() {\n  try {\n    const args64 = proposal.kind[\"FunctionCall\"].actions[0].args;\n    const jsonArgs = JSON.parse(\n      Buffer.from(args64, \"base64\").toString(\"utf-8\")\n    );\n    return JSON.stringify(jsonArgs, undefined, 2);\n  } catch {\n    return \"failed to deserialize\";\n  }\n}\n\n// VOTE\nconst actProposal = ({ daoId, proposal }) => {\n  const policy = Near.view(daoId, \"get_policy\");\n\n  if (policy === null) {\n    return \"Loading...\";\n  }\n\n  const deposit = policy.proposal_bond;\n\n  call({\n    daoId,\n    methodName: \"act_proposal\",\n    args: {\n      proposal,\n    },\n    deposit,\n  });\n};\nfunction vote(action) {\n  return Near.call(daoId, \"act_proposal\", {\n    id: proposal.id,\n    action,\n  });\n}\nconst handleApprove = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"act_proposal\",\n      args: {\n        id: JSON.parse(proposal.id),\n        action: \"VoteApprove\",\n      },\n      gas: gas,\n    },\n  ]);\n};\nconst handleReject = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"act_proposal\",\n      args: {\n        id: JSON.parse(proposal.id),\n        action: \"VoteReject\",\n      },\n      gas: gas,\n    },\n  ]);\n};\nconst handleSpam = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"act_proposal\",\n      args: {\n        id: JSON.parse(proposal.id),\n        action: \"VoteRemove\",\n      },\n      gas: gas,\n    },\n  ]);\n};\n\n// CREATE DAO POST\nconst create = (v) => {\n  createFunctionCallProposal({\n    daoId: \"build.sputnik-dao.near\",\n    receiver_id: \"social.near\",\n    method_name: \"set\",\n    args: {\n      data: {\n        \"build.sputnik-dao.near\": {\n          post: {\n            main: JSON.stringify(v),\n          },\n          index: {\n            post: JSON.stringify({\n              key: \"main\",\n              value: {\n                type: \"md\",\n              },\n            }),\n          },\n        },\n      },\n    },\n  });\n};\n\nreturn { createFunctionCallProposal, create };\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/create.near/widget/SDKs.DAO.Main", "fact_widget_deployments_id": "1d5d77fdbf0e3d1548a4467a649e87f3", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}