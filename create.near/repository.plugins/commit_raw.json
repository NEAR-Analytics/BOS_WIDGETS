{"tx_hash": "CczR2XPuDEo7KjgSZbs7rQxt1sEtaSrvGxYFRtuJeBqN", "action_id_social": "7WeuMut76FQze91sUjaZavdxJPbxuBSembnHLHzbhs54-0-widget", "block_id": 110661723, "block_timestamp": "2024-01-17T21:47:20.069Z", "signer_id": "create.near", "widget_name": "repository.plugins", "source_code": "if (!props.src) return \"\";\n\nState.init({\n  copiedShareUrl: false,\n  showVoteButton: false,\n});\n\nconst src = props.src ?? \"hack.near/widget/community\";\nconst primaryAction = props.primaryAction || \"viewDetails\";\nconst [accountId, type, name] = src.split(\"/\");\nconst metadata = Social.get(`${accountId}/${type}/${name}/metadata/**`) || {};\nconst tags = Object.keys(metadata.tags || {});\nconst appUrl = `/${src}`;\nconst detailsUrl = `/create.near/widget/repository?src=${src}`;\nconst shareUrl = `https://everything.dev${detailsUrl}`;\nconst size = props.size || \"large\";\nconst descMaxWords = props.descMaxWords || 30;\n\nif (props.showDesc && metadata.description) {\n  const text = metadata.description.split(\" \");\n  metadata.description = text.slice(0, descMaxWords);\n  if (text.length >= descMaxWords) {\n    metadata.description.push(\"...\");\n  }\n  metadata.description = metadata.description.join(\" \");\n}\n\nconst handleCloseMenu = () => {\n  props.onCloseMenu();\n};\n\nconst handleClose = () => {\n  State.update;\n};\n\nconst primaryActions = {\n  open: {\n    display: \"Open\",\n    url: appUrl,\n  },\n  viewDetails: {\n    display: \"View Details\",\n    url: detailsUrl,\n  },\n};\n\nconst sizes = {\n  medium: {\n    gap: \"16px\",\n    thumbnail: \"56px\",\n    title: \"16px\",\n  },\n  large: {\n    gap: \"16px\",\n    thumbnail: \"100px\",\n    title: \"32px\",\n  },\n};\n\nconst Wrapper = styled.div``;\n\nconst Header = styled.div`\n  display: flex;\n  align-items: center;\n  gap: ${(p) => sizes[p.size].gap};\n  margin-bottom: 32px;\n\n  > * {\n    min-width: 0;\n  }\n\n  @media (max-width: 770px) {\n    gap: 16px;\n  }\n`;\n\nconst TagsWrapper = styled.div`\n  margin-bottom: 16px;\n`;\n\nconst Actions = styled.div`\n  display: flex;\n  gap: 12px;\n  flex-wrap: wrap;\n  margin-bottom: 16px;\n`;\n\nconst Title = styled.h1`\n  font-size: ${(p) => sizes[p.size].title};\n  line-height: 1.2em;\n  color: #11181c;\n  margin: 0 0 8px;\n  font-weight: 600;\n\n  @media (max-width: 770px) {\n    font-size: 16px;\n    margin: 0;\n  }\n`;\n\nconst Thumbnail = styled.div`\n  width: ${(p) => sizes[p.size].thumbnail};\n  height: ${(p) => sizes[p.size].thumbnail};\n  flex-shrink: 0;\n  border: 1px solid #eceef0;\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: 0px 1px 3px rgba(16, 24, 40, 0.1),\n    0px 1px 2px rgba(16, 24, 40, 0.06);\n\n  img {\n    object-fit: cover;\n    width: 100%;\n    height: 100%;\n  }\n\n  @media (max-width: 770px) {\n    width: 58px;\n    height: 58px;\n  }\n`;\n\nconst sharedButtonStyles = `\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 16px;\n  height: 32px;\n  border-radius: 50px;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n  text-align: center;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    text-decoration: none;\n    outline: none;\n  }\n\n  i {\n    color: #7E868C;\n  }\n\n  .bi-16 {\n    font-size: 16px;\n  }\n`;\n\nconst Button = styled.button`\n  ${sharedButtonStyles}\n  color: ${(p) => (p.primary ? \"#09342E\" : \"#11181C\")} !important;\n  background: ${(p) => (p.primary ? \"#59E692\" : \"#FBFCFD\")};\n  border: ${(p) => (p.primary ? \"none\" : \"1px solid #D7DBDF\")};\n\n  &:hover,\n  &:focus {\n    background: ${(p) => (p.primary ? \"rgb(112 242 164)\" : \"#ECEDEE\")};\n  }\n`;\n\nconst ButtonLink = styled(\"Link\")`\n  ${sharedButtonStyles}\n  color: ${(p) => (p.primary ? \"#09342E\" : \"#11181C\")} !important;\n  background: ${(p) => (p.primary ? \"#59E692\" : \"#FBFCFD\")};\n  border: ${(p) => (p.primary ? \"none\" : \"1px solid #D7DBDF\")};\n\n  &:hover,\n  &:focus {\n    background: ${(p) => (p.primary ? \"rgb(112 242 164)\" : \"#ECEDEE\")};\n  }\n`;\n\nconst Text = styled.p`\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${(p) => (p.bold ? \"#11181C\" : \"#687076\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n  overflow: ${(p) => (p.ellipsis ? \"hidden\" : \"visible\")};\n  text-overflow: ${(p) => (p.ellipsis ? \"ellipsis\" : \"unset\")};\n  white-space: ${(p) => (p.ellipsis ? \"nowrap\" : \"\")};\n\n  i {\n    margin-right: 4px;\n  }\n`;\n\nconst votes = Social.index(\"vote\", src);\n\nconst dataLoading = votes === null;\nconst votesByUsers = {};\n\n(votes || []).forEach((vote) => {\n  if (vote.value.type === \"vote\") {\n    votesByUsers[vote.accountId] = vote;\n  } else if (vote.value.type === \"unvote\") {\n    delete votesByUsers[vote.accountId];\n  }\n});\n\nif (state.hasVote === true) {\n  votesByUsers[context.accountId] = {\n    accountId: context.accountId,\n  };\n} else if (state.hasVote === false) {\n  delete votesByUsers[context.accountId];\n}\n\nconst accountsWithVotes = Object.keys(votesByUsers);\nconst voteCount = accountsWithVotes.length;\nconst hasVote = context.accountId && !!votesByUsers[context.accountId];\n\nfunction checkNearConEventDate() {\n  const today = new Date();\n  const compareDate = new Date(\"2023-11-05T00:00:00\");\n\n  if (today >= compareDate) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction loadAppQuestData() {\n  if (state.apps.length > 0) return;\n\n  asyncFetch(\n    \"https://storage.googleapis.com/databricks-near-query-runner/output/nearcon_apps/apps_qualified.json\"\n  ).then((res) => {\n    const apps = JSON.parse(res.body).data.map((app_raw) => {\n      const app = JSON.parse(app_raw);\n      return { ...app };\n    });\n    if (!apps) return;\n\n    const isAppSignedUpToNearConAppQuest = apps.some((app) => app.name === src);\n    const showVoteButton =\n      isAppSignedUpToNearConAppQuest && checkNearConEventDate();\n\n    State.update({\n      showVoteButton,\n    });\n  });\n}\n\nloadAppQuestData();\n\nconst VoteButton = styled.div`\n  line-height: 20px;\n  min-height: 20px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: left;\n  .icon {\n    position: relative;\n    &:before {\n      margin: -8px;\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      border-radius: 50%;\n    }\n  }\n\n  .count {\n    margin-left: 8px;\n  }\n\n  &:not([disabled]) {\n    cursor: pointer;\n  }\n\n  &:not([disabled]):hover {\n    opacity: 1 !important;\n\n  }\n`;\n\nconst voteClick = () => {\n  if (state.loading || dataLoading || !context.accountId) {\n    return;\n  }\n  State.update({\n    loading: true,\n  });\n  const type = hasVote ? \"unvote\" : \"vote\";\n  const data = {\n    index: {\n      vote: JSON.stringify({\n        key: src,\n        value: {\n          type,\n        },\n      }),\n    },\n  };\n\n  if (item.type === \"social\" && typeof item.path === \"string\") {\n    const keys = item.path.split(\"/\");\n    if (keys.length > 0) {\n      data.graph = {\n        vote: {},\n      };\n      let root = data.graph.vote;\n      keys.slice(0, -1).forEach((key) => {\n        root = root[key] = {};\n      });\n      root[keys[keys.length - 1]] = hasVote ? null : \"\";\n    }\n  }\n\n  if (!hasVote && props.notifyAccountId) {\n    data.index.notify = JSON.stringify({\n      key: props.notifyAccountId,\n      value: {\n        type,\n        item,\n      },\n    });\n  }\n  Social.set(data, {\n    onCommit: () => State.update({ loading: false, hasVote: !hasVote }),\n    onCancel: () => State.update({ loading: false }),\n  });\n};\n\nconst title = hasVote ? \"Downvote\" : \"Upvote\";\nconst inner = (\n  <div className=\"d-inline-flex align-items-center\">\n    <VoteButton\n      disabled={state.loading || dataLoading || !context.accountId}\n      title={title}\n      onClick={voteClick}\n    >\n      <span className={`icon ${state.loading ? \"loading \" : \"\"}`}>\n        {hasVote ? (\n          <>\n            {\" \"}\n            <i class=\"bi mx-2 bi-arrow-down-square\" /> Downvote{\" \"}\n          </>\n        ) : (\n          <>\n            {\" \"}\n            <i className=\"bi mx-1 bi-arrow-up-square\"></i> Upvote{\" \"}\n          </>\n        )}\n      </span>\n    </VoteButton>\n  </div>\n);\n\nfunction normalizeMarkdown(text) {\n  // convert headers to normal text (remove # symbols)\n  text = text.replace(/^#+\\s*/gm, \"\");\n  // convert bold and italic to normal text (remove * and _ symbols)\n  text = text.replace(/(\\*\\*|__)(.*?)\\1/g, \"$2\");\n  text = text.replace(/(\\*|_)(.*?)\\1/g, \"$2\");\n  // remove links\n  text = text.replace(/\\[(.*?)\\]\\(.*?\\)/g, \"$1\");\n  // remove images\n  text = text.replace(/!\\[(.*?)\\]\\(.*?\\)/g, \"$1\");\n  return text.trim();\n}\n\nreturn (\n  <Wrapper>\n    <Header size={size}>\n      <Thumbnail size={size}>\n        <Widget\n          src=\"mob.near/widget/Image\"\n          props={{\n            image: metadata.image,\n            fallbackUrl:\n              \"https://ipfs.near.social/ipfs/bafkreifc4burlk35hxom3klq4mysmslfirj7slueenbj7ddwg7pc6ixomu\",\n            alt: metadata.name,\n          }}\n        />\n      </Thumbnail>\n\n      <div>\n        <Title size={size}>{metadata.name || name}</Title>\n        <Text ellipsis>{src}</Text>\n      </div>\n    </Header>\n\n    {props.showTags && tags.length > 0 && (\n      <TagsWrapper>\n        <Widget\n          src=\"near/widget/Tags\"\n          props={{\n            tags,\n          }}\n        />\n      </TagsWrapper>\n    )}\n\n    <Actions>\n      <ButtonLink\n        primary\n        href={primaryActions[primaryAction].url}\n        onClick={handleCloseMenu}\n      >\n        {primaryActions[primaryAction].display}\n      </ButtonLink>\n\n      {context.accountId === accountId ? (\n        <ButtonLink href={`/edit/${src}`}>\n          <>\n            <i className=\"bi bi-pencil-fill\"></i> Edit\n          </>\n        </ButtonLink>\n      ) : (\n        <ButtonLink onClick={() => State.update({ showForkModal: true })}>\n          <>\n            <i className=\"bi bi-git\"></i> Fork\n          </>\n        </ButtonLink>\n      )}\n      <ButtonLink onClick={() => State.update({ showUpdateModal: true })}>\n        {context.accountId === accountId ? (\n          <>\n            <i class=\"bi bi-tsunami\"></i> Update\n          </>\n        ) : (\n          <>\n            <i class=\"bi bi-stars\"></i> Request\n          </>\n        )}\n      </ButtonLink>\n      <Button type=\"button\" onClick={voteClick}>\n        {inner}\n        {context.accountId == accountId ? `(${voteCount})` : null}\n      </Button>\n      <OverlayTrigger\n        placement=\"top\"\n        overlay={<Tooltip>Copy URL to clipboard</Tooltip>}\n      >\n        <Button\n          type=\"button\"\n          onMouseLeave={() => {\n            State.update({ copiedShareUrl: false });\n          }}\n          onClick={() => {\n            clipboard.writeText(shareUrl).then(() => {\n              State.update({ copiedShareUrl: true });\n            });\n          }}\n        >\n          {state.copiedShareUrl ? (\n            <i className=\"bi bi-16 bi-check\"></i>\n          ) : (\n            <i className=\"bi bi-16 bi-link-45deg\"></i>\n          )}\n          Share\n        </Button>\n      </OverlayTrigger>\n    </Actions>\n    <>\n      {state.showUpdateModal && (\n        <Widget\n          src=\"create.near/widget/repository.update\"\n          props={{\n            handleClose: () => State.update({ showUpdateModal: false }),\n            src,\n          }}\n        />\n      )}\n    </>\n    <>\n      {state.showForkModal && (\n        <Widget\n          src=\"create.near/widget/repository.fork\"\n          props={{\n            handleClose: () => State.update({ showForkModal: false }),\n            src,\n          }}\n        />\n      )}\n    </>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/create.near/widget/repository.plugins", "fact_widget_deployments_id": "734deba3b038d9cbae53d2472143a23c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}