{"tx_hash": "63EqCUSmqkN2tUSEW8sGKsuxTpCGrxcTESm29LzkphCL", "action_id_social": "G9y6sdfQu1QauM4TqNtKbJKrKDikbFVdLrQXEdMUrvCW-1-widget", "block_id": 89947951, "block_timestamp": "2023-04-19T14:38:53.358Z", "signer_id": "nearcon.birchmd.near", "widget_name": "Draft-0", "source_code": "const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (!sender) return <Web3Connect connectLabel=\"Connect with Web3\" />;\n\nconst contractAbi = fetch(\n  \"https://gist.githubusercontent.com/birchmd/3db801d6115ceaaafb3d7e8fd94e0dc2/raw/5aa660a746d8f137df2c77142bfba36057dab6ef/TicTacToe.abi.json\"\n);\nif (!contractAbi.ok) {\n  return (\n    <>\n      <p>Failed to load Tic Tac Toe contract ABI.</p>\n      <div>{JSON.stringify(contractAbi)}</div>\n    </>\n  );\n}\n\nconst contract_address = \"0xFe1241A79C614841AfC00B50183c30610348896F\";\nconst iface = new ethers.utils.Interface(contractAbi.body);\n\nconst contract = new ethers.Contract(\n  contract_address,\n  contractAbi.body,\n  Ethers.provider().getSigner()\n);\n\ninitState({\n  board: {\n    isGameOver: false,\n    board: [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n  },\n  pendingPlayer: \"X\",\n  player: \"X\",\n  playerNumber: 1,\n  expectNewState: true,\n  firstQuery: true,\n  startingNewGame: false,\n});\n\nconst newGame = () => {\n  // Don't allow sending new transactions while waiting\n  // for the state to update.\n  if (state.expectNewState) {\n    return;\n  }\n\n  let player_prefernece;\n\n  if (state.pendingPlayer == \"X\") {\n    State.update({ player: \"X\", playerNumber: 1 });\n    player_prefernece = 1;\n  } else {\n    State.update({ player: \"O\", playerNumber: 17 });\n    player_prefernece = 0;\n  }\n\n  contract.newGame(player_prefernece).then((tx) => {\n    State.update({ expectNewState: true, startingNewGame: true });\n    tx.wait().then((rx) => {\n      console.log(rx);\n      getGameState();\n    });\n  });\n};\n\nconst hex2BN = (hex) => {\n  let input;\n  if (hex.startsWith(\"0x\")) {\n    input = hex.substring(2);\n  } else {\n    input = hex;\n  }\n  return new BN(input, 16);\n};\n\nconst parseBoardHex = (boardHex) => {\n  const boardArray = hex2BN(boardHex).toArray(\"big\", 11);\n  const isGameOver = boardArray[0] != 0;\n  const board = [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"];\n  var x;\n  for (let i = 0; i < 9; i++) {\n    x = boardArray[i + 2];\n    if (x == 1) {\n      board[i] = \"X\";\n    } else if (x == 17) {\n      board[i] = \"O\";\n    }\n  }\n  return { isGameOver, board };\n};\n\nconst getGameState = () => {\n  // shot curcuit to avoid constantly hitting the RPC\n  if (!state.expectNewState) {\n    return;\n  }\n\n  const encodedData = iface.encodeFunctionData(\"getGameState\", [sender]);\n\n  Ethers.provider()\n    .call({\n      to: contract_address,\n      data: encodedData,\n    })\n    .then((boardHex) => {\n      const result = parseBoardHex(boardHex);\n      const expectNewState =\n        state.expectNewState &&\n        !state.firstQuery &&\n        result.isGameOver == state.board.isGameOver &&\n        JSON.stringify(result.board) === JSON.stringify(state.board.board);\n\n      var winner = null;\n      if (result.isGameOver) {\n        // figure out who won\n        const setsOf3 = [\n          [0, 1, 2], // rows\n          [3, 4, 5],\n          [6, 7, 8],\n          [0, 3, 6], // columns\n          [1, 4, 7],\n          [2, 5, 8],\n          [0, 4, 8], // diagonals\n          [2, 4, 6],\n        ];\n        for (let i = 0; i < setsOf3.length; i++) {\n          const idxs = setsOf3[i];\n          const is3InARow = idxs.every((j) => {\n            return result.board[j] == result.board[idxs[0]];\n          });\n          if (is3InARow) {\n            winner = \"Winner: \" + result.board[idxs[0]];\n            break;\n          }\n        }\n        if (!winner) {\n          winner = \"Draw\";\n        }\n      }\n\n      var total = 0;\n      for (let i = 0; i < 9; i++) {\n        if (result.board[i] == \"X\") {\n          total += 1;\n        } else if (result.board[i] == \"O\") {\n          total -= 1;\n        }\n      }\n      let player;\n      let playerNumber;\n      if (total == 0) {\n        player = \"X\";\n        playerNumber = 1;\n      } else {\n        player = \"O\";\n        playerNumber = 17;\n      }\n\n      if (!state.firstQuery && player !== state.player) {\n        player = state.player;\n        playerNumber = state.playerNumber;\n        expectNewState = true;\n      }\n      if (result.isGameOver && !state.startingNewGame) {\n        expectNewState = false;\n      }\n\n      State.update({\n        board: result,\n        player,\n        playerNumber,\n        winner,\n        expectNewState,\n        firstQuery: false,\n      });\n    });\n};\n\nconst playerMove = (index) => {\n  if (\n    !state.expectNewState &&\n    !state.board.isGameOver &&\n    state.board.board[index] == \".\"\n  ) {\n    const move =\n      \"0x\" +\n      (\n        new BN(state.playerNumber) * new BN(256).pow(new BN(8 - index))\n      ).toString(16);\n    contract.takePlayerTurn(move).then((tx) => {\n      State.update({ expectNewState: true, startingNewGame: false });\n      tx.wait().then((rx) => {\n        console.log(rx);\n        getGameState();\n      });\n    });\n  }\n};\n\nconst BottomCell = styled.td`\n    padding: 15px;\n    border-collapse: collapse;\n`;\nconst TopLeftCell = styled.td`\n    padding: 15px;\n    border-collapse: collapse;\n    border-right: 1px solid;\n    border-bottom: 1px solid;\n`;\nconst TopCenterCell = styled.td`\n    padding: 15px;\n    border-collapse: collapse;\n    border-bottom: 1px solid;\n`;\nconst TopRightCell = styled.td`\n    padding: 15px;\n    border-collapse: collapse;\n    border-left: 1px solid;\n    border-bottom: 1px solid;\n`;\nconst MiddleLeftCell = styled.td`\n    padding: 15px;\n    border-collapse: collapse;\n    border-right: 1px solid;\n    border-bottom: 1px solid;\n`;\nconst MiddleCenterCell = styled.td`\n    padding: 15px;\n    border-collapse: collapse;\n    border-bottom: 1px solid;\n`;\nconst MiddleRightCell = styled.td`\n    padding: 15px;\n    border-collapse: collapse;\n    border-left: 1px solid;\n    border-bottom: 1px solid;\n`;\nconst BottomLeftCell = styled.td`\n    padding: 15px;\n    border-collapse: collapse;\n    border-right: 1px solid;\n`;\nconst BottomCenterCell = styled.td`\n    padding: 15px;\n    border-collapse: collapse;\n`;\nconst BottomRightCell = styled.td`\n    padding: 15px;\n    border-collapse: collapse;\n    border-left: 1px solid;\n`;\n\nreturn (\n  <>\n    {getGameState()}\n    <table>\n      <tr>\n        <TopLeftCell onClick={() => playerMove(0)}>\n          {state.board.board[0]}\n        </TopLeftCell>\n        <TopCenterCell onClick={() => playerMove(1)}>\n          {state.board.board[1]}\n        </TopCenterCell>\n        <TopRightCell onClick={() => playerMove(2)}>\n          {state.board.board[2]}\n        </TopRightCell>\n      </tr>\n      <tr>\n        <MiddleLeftCell onClick={() => playerMove(3)}>\n          {state.board.board[3]}\n        </MiddleLeftCell>\n        <MiddleCenterCell onClick={() => playerMove(4)}>\n          {state.board.board[4]}\n        </MiddleCenterCell>\n        <MiddleRightCell onClick={() => playerMove(5)}>\n          {state.board.board[5]}\n        </MiddleRightCell>\n      </tr>\n      <tr>\n        <BottomLeftCell onClick={() => playerMove(6)}>\n          {state.board.board[6]}\n        </BottomLeftCell>\n        <BottomCenterCell onClick={() => playerMove(7)}>\n          {state.board.board[7]}\n        </BottomCenterCell>\n        <BottomRightCell onClick={() => playerMove(8)}>\n          {state.board.board[8]}\n        </BottomRightCell>\n      </tr>\n    </table>\n    <br></br>\n    {state.board.isGameOver && <div>{state.winner}</div>}\n    {state.expectNewState ? (\n      <div>\n        <p>Waiting for new data from RPC...</p>\n      </div>\n    ) : (\n      <div />\n    )}\n    <br></br>\n    <label for=\"selectPlayer\">Play as:</label>\n    <select\n      id=\"selectPlayer\"\n      onChange={(e) => State.update({ pendingPlayer: e.target.value })}\n    >\n      <option value=\"X\">X</option>\n      <option value=\"O\">O</option>\n    </select>\n    <div class=\"mb-3\">\n      <button onClick={newGame}>New Game</button>\n    </div>\n  </>\n);\n", "metadata": {"description": "Play tic tac toe against a smart contract on Aurora! Game state and moves are persisted on-chain!", "name": "Aurora-Tic-Tac-Toe", "tags": {"ethdenver2023": ""}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearcon.birchmd.near/widget/Draft-0", "fact_widget_deployments_id": "5f2f8ede0dd4c0243d96a0006a2136ca", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 46}