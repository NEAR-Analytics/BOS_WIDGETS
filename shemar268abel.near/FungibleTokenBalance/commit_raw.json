{"tx_hash": "Bpx3YL2NLmFgU4aSzSniMLPvBLem4dtzYYURoqKyDKSk", "action_id_social": "B2jq1JGB7AF92NAqG5p55wfDNRT4hP9ZbpfegURHVEea-0-widget", "block_id": 98760253, "block_timestamp": "2023-08-14T04:23:43.849Z", "signer_id": "shemar268abel.near", "widget_name": "FungibleTokenBalance", "source_code": "State.init({\n  activeTokens: null,\n  inputAmount: \"\",\n  inputReceiver: \"\",\n  root: null,\n  errorTransfer: null,\n});\n\n// Start of Style component\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700;800\"\n).body;\n\nconst _root = styled.div`\n  ${cssFont}\n  padding: 16px;\n  width: 420px;\n  height: 100%;\n  font-family: Poppins, sans-serif;\n  border-radius: 12px;\n  border: 1.5px solid #e6e6e6;\n  box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.25);\n  margin: 16px auto;\n\n  p {\n    font-size: 14px;\n    margin: 0;\n  }\n`;\n\nif (!state.root) {\n  State.update({ root: _root });\n}\n\nconst Account = styled.div`\n  .account-address {\n    font-size: 24px;\n    font-weight: 800;\n    margin-bottom: 16px;\n  }\n\n  .token-info-wrapper {\n    font-size: 16px;\n    margin-bottom: 12px;\n    display: flex;\n    justify-content: space-between;\n    color: #585858;\n  }\n`;\n\nconst FungibleToken = styled.div`\n  display: flex;\n  padding: 12px 8px;\n  border-top: 1px solid #e6e6e6;\n  align-items: center;\n  cursor: pointer;\n\n  &:hover {\n    background: #f5f5f5;\n  }\n\n  .token-icon {\n    width: 40px;\n    height: 40px;\n    border-radius: 20px;\n    margin-right: 12px;\n  }\n\n  .token-info {\n    flex: 1;\n  }\n\n  .token-info-name {\n    font-weight: 600;\n  }\n\n  .token-info-usd-price {\n    color: #585858;\n  }\n\n  .token-balance {\n    text-align: right;\n  }\n\n  .token-balance-usd {\n    color: #585858;\n  }\n`;\n\nconst SendToken = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  width: auto;\n  padding: 8px;\n  position: relative;\n\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  input[type=\"number\"] {\n    -moz-appearance: textfield; /* Firefox */\n  }\n\n  .title-send-token {\n    font-size: 20px;\n    font-weight: 600;\n  }\n\n  .token-icon {\n    width: 80px;\n    height: 80px;\n    margin-bottom: 12px;\n  }\n\n  .back-icon {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    cursor: pointer;\n  }\n\n  .input-amount {\n    width: 100%;\n    border: none;\n    outline: none;\n    font-size: 30px;\n    font-weight: 600;\n    margin: auto;\n    text-align: center;\n    margin: 12px 0;\n  }\n\n  .input-amount:focus {\n    outline: none;\n    border: none;\n  }\n\n  .asset-available-wrapper {\n    display: flex;\n    justify-content: end;\n    width: 100%;\n    color: #585858;\n  }\n\n  .asset-available-wrapper p {\n    font-size: 12px;\n  }\n\n  .send-to-wrapper {\n    margin: 12px 0;\n    margin-top: 8px;\n    width: 100%;\n  }\n\n  .send-to-label-text {\n    color: #585858;\n    font-size: 12px;\n    text-align: left;\n  }\n\n  .send-to-button {\n    width: 100%;\n    border: none;\n    outline: none;\n    background: #5a58e5;\n    color: white;\n    border-radius: 12px;\n    margin-top: 8px;\n    padding: 12px;\n    font-size: 14px;\n  }\n\n  .error-message {\n    color: #ff0033;\n  }\n`;\n// End of style\n\nconst accountId = props.accountId || context.accountId;\n\nif (!accountId) return <p>Please provide account id as props</p>;\n\nconst data = fetch(\n  `https://api.kitwallet.app/account/${accountId}/likelyTokensFromBlock?fromBlockTimestamp=0`\n).body;\nconst tokenPrice = fetch(\"https://indexer.ref.finance/list-token-price\").body;\n\nconst contractData = data.list\n  .map((contract) => {\n    const ftMetadata = Near.view(contract, \"ft_metadata\", `{}`);\n    const ftBalance = Near.view(contract, \"ft_balance_of\", {\n      account_id: accountId,\n    });\n\n    if (!ftMetadata || !ftBalance) return null;\n\n    if (ftBalance === \"0\") return null;\n\n    const parsedBalance = Big(ftBalance)\n      .div(Big(10).pow(ftMetadata.decimals))\n      .toFixed(5);\n\n    const usdPrice = JSON.parse(tokenPrice)[contract].price;\n    const balanceInUsd = parseFloat(parsedBalance) * parseFloat(usdPrice);\n\n    return {\n      ...ftMetadata,\n      balance: parsedBalance,\n      usdPrice,\n      contract,\n      balanceInUsd: balanceInUsd ? balanceInUsd.toFixed(2) : null,\n    };\n  })\n  .filter((item) => item);\n\nconst onClickSendToken = () => {\n  // TODO:\n  // - check if account has enough balance\n  // - check if balance is valid (not negative, not zero, not more than balance)\n  // - check if account id is valid\n  // - check if account id is not the same as current account\n\n  if (!state.inputAmount || !state.inputReceiver)\n    return State.update({ errorTransfer: \"Please fill all fields\" });\n\n  Near.call(\n    state.activeTokens.contract,\n    \"ft_transfer\",\n    {\n      amount: Big(state.inputAmount).times(\n        Big(10).pow(state.activeTokens.decimals)\n      ),\n      receiver_id: state.inputReceiver,\n    },\n    undefined,\n    1\n  );\n};\n\nconst Root = state.root;\nconst totalValue = contractData.reduce((total, item) => {\n  return total + (item.balanceInUsd ? parseFloat(item.balanceInUsd) : 0);\n}, 0);\n\nreturn (\n  <Root>\n    {state.activeTokens ? (\n      <SendToken>\n        <div\n          class=\"back-icon\"\n          onClick={() =>\n            State.update({\n              activeTokens: null,\n              inputAmount: \"\",\n              inputReceiver: \"\",\n            })\n          }\n        >\n          <svg\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M15.41 16.59L10.83 12L15.41 7.41L14 6L8 12L14 18L15.41 16.59Z\"\n              fill=\"black\"\n            />\n          </svg>\n        </div>\n        {state.activeTokens.icon && (\n          <img class=\"token-icon\" src={state.activeTokens.icon} />\n        )}\n        <p class=\"title-send-token\">Send {state.activeTokens.name}</p>\n        <input\n          required\n          type=\"number\"\n          class=\"input-amount\"\n          min=\"0.1\"\n          placeholder=\"10\"\n          autofocus\n          value={state.inputAmount}\n          onChange={(e) =>\n            State.update({ inputAmount: e.target.value, errorTransfer: null })\n          }\n        />\n        <div class=\"asset-available-wrapper\">\n          <p>\n            Available: {state.activeTokens.balance} {state.activeTokens.symbol}\n          </p>\n        </div>\n        <div class=\"send-to-wrapper\">\n          <p class=\"send-to-label-text\">Send to</p>\n          <input\n            required\n            value={state.inputReceiver}\n            onChange={(e) =>\n              State.update({\n                inputReceiver: e.target.value,\n                errorTransfer: null,\n              })\n            }\n            placeholder=\"account id\"\n            style={{ fontSize: \"14px\", padding: \"10px 8px\" }}\n          />\n        </div>\n        {state.errorTransfer && (\n          <p class=\"error-message\">{state.errorTransfer}</p>\n        )}\n        <button type=\"submit\" class=\"send-to-button\" onClick={onClickSendToken}>\n          Continue\n        </button>\n      </SendToken>\n    ) : (\n      <>\n        <Account>\n          <p\n            style={{\n              textAlign: \"center\",\n            }}\n            class=\"account-address\"\n          >\n            {accountId}\n          </p>\n          <div class=\"token-info-wrapper\">\n            <p>My Assets</p>\n            <p>Token balance</p>\n          </div>\n        </Account>\n        {contractData?.map((item) => (\n          <FungibleToken onClick={() => State.update({ activeTokens: item })}>\n            <div class=\"token-icon\">\n              {item.icon && <img class=\"token-icon\" src={item.icon} />}\n            </div>\n            <div class=\"token-info\">\n              <p class=\"token-info-name\">{item.name}</p>\n              <p class=\"token-info-usd-price\">\n                {item.usdPrice ? `$${item.usdPrice}` : \"Price unavailable\"}\n              </p>\n            </div>\n            <div class=\"token-balance\">\n              <p>\n                {item.balance} {item.symbol}\n              </p>\n              <p class=\"token-balance-usd\">\n                {item.balanceInUsd ? `\u2248 ${item.balanceInUsd} USD` : \"-\"}\n              </p>\n            </div>\n          </FungibleToken>\n        ))}\n        <div\n          style={{\n            textAlign: \"right\",\n            width: \"100%\",\n            backgroundColor: \"transparent\",\n          }}\n        >\n          <h4>Total: ${totalValue.toFixed(2)}</h4>\n        </div>\n      </>\n    )}\n  </Root>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/shemar268abel.near/widget/FungibleTokenBalance", "fact_widget_deployments_id": "1b0aefa560c1120769520e4546a0b2e0", "inserted_timestamp": "2023-08-14T05:49:48.809Z", "modified_timestamp": "2023-08-14T05:49:48.809Z", "__row_index": 10}