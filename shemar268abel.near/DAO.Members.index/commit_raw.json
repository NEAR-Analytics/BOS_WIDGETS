{"tx_hash": "48LLoDq43KiZD6cry7uiPAKersj6dpzHVr8fWN5bWdNW", "action_id_social": "2K5472a3CKVhR9VA4rX5gbundcMhu8gbBDijjvgAmi9q-0-widget", "block_id": 113528815, "block_timestamp": "2024-02-25T03:43:10.821Z", "signer_id": "shemar268abel.near", "widget_name": "DAO.Members.index", "source_code": "const daoId = props.daoId || \"marmaj-research.sputnik-dao.near\";\r\n\r\nState.init({\r\n  filterByRole,\r\n  usersToShow: 3, // New state variable\r\n});\r\n\r\nconst processPolicy = (policy) => {\r\n  const obj = {\r\n    policy,\r\n    users: {},\r\n    roles: {},\r\n    everyone: {},\r\n  };\r\n  policy.roles.forEach((role) => {\r\n    if (role.kind === \"Everyone\") {\r\n      obj.everyone = role;\r\n    }\r\n    if (role.kind.Group) {\r\n      if (!obj.roles[role.name]) {\r\n        obj.roles[role.name] = role;\r\n      }\r\n      role.kind.Group.forEach((user) => {\r\n        if (!obj.users[user]) {\r\n          obj.users[user] = [];\r\n        }\r\n\r\n        obj.users[user].push(role.name);\r\n      });\r\n    }\r\n  });\r\n\r\n  return obj;\r\n};\r\n\r\nconst policy = useCache(\r\n  () =>\r\n    Near.asyncView(daoId, \"get_policy\").then((policy) => processPolicy(policy)),\r\n  daoId + \"-policy\",\r\n  { subscribe: false }\r\n);\r\n\r\nif (policy === null) return \"\";\r\n\r\nconst isUserAllowedTo = (user, kind, action) => {\r\n  const userRoles = policy.users[user] || [\"Everyone\"];\r\n\r\n  let allowed = false;\r\n\r\n  userRoles.forEach((role) => {\r\n    let permissions = policy.roles[role].permissions;\r\n    if (role === \"Everyone\") {\r\n      permissions = policy.everyone.permissions;\r\n    }\r\n    const allowedRole =\r\n      permissions.includes(`${kind.toString()}:${action.toString()}`) ||\r\n      permissions.includes(`${kind.toString()}:*`) ||\r\n      permissions.includes(`*:${action.toString()}`) ||\r\n      permissions.includes(\"*:*\");\r\n    allowed = allowed || allowedRole;\r\n    return allowedRole;\r\n  });\r\n\r\n  return allowed;\r\n};\r\n\r\nconst onRemoveUserProposal = (memberId, roleId) => {\r\n  Near.call([\r\n    {\r\n      contractName: daoId,\r\n      methodName: \"add_proposal\",\r\n      args: {\r\n        proposal: {\r\n          description: \"Remove DAO member\",\r\n          kind: {\r\n            RemoveMemberFromRole: {\r\n              member_id: memberId,\r\n              role: roleId ?? \"council\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      gas: 219000000000000,\r\n      deposit: policy.policy.proposal_bond,\r\n    },\r\n  ]);\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  .userRow {\r\n    width: 100%;\r\n    @media screen and (min-width: 600px) {\r\n      width: calc(50% - 1rem);\r\n    }\r\n    @media screen and (min-width: 1400px) {\r\n      width: calc(33% - 1rem);\r\n    }\r\n  }\r\n`;\r\n\r\nconst renderUserRow = (user, roles, i) => {\r\n  return (\r\n    <div key={i} className=\"ndc-card ratio-1x1\">\r\n      <div className=\"flex-column p-2\">\r\n        <Widget\r\n          src=\"nui.sking.near/widget/Element.User\"\r\n          props={{\r\n            accountId: user,\r\n            options: {\r\n              showHumanBadge: true,\r\n              showImage: true,\r\n              showSocialName: true,\r\n            },\r\n          }}\r\n        />\r\n        <div className=\"d-flex gap-1 mt-3 flex-wrap mb-3\">\r\n          {roles.map((role, i) => {\r\n            return (\r\n              <Widget\r\n                src=\"nui.sking.near/widget/Input.Button\"\r\n                props={{\r\n                  children: role,\r\n                  size: \"sm\",\r\n                  variant: \"default\",\r\n                  className: \"text-capitalize\",\r\n                }}\r\n                key={i}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"d-flex flex-column gap-2 mt-auto flex-wrap w-100\">\r\n          <Widget\r\n            src=\"nui.sking.near/widget/Social.FollowButton\"\r\n            props={{\r\n              accountId: user,\r\n              size: \"sm\",\r\n              className: \"w-100\",\r\n            }}\r\n          />\r\n          {isUserAllowedTo(\r\n            context.accountId,\r\n            \"remove_member_from_role\",\r\n            \"AddProposal\"\r\n          ) && (\r\n            <Widget\r\n              src=\"nui.sking.near/widget/Layout.Modal\"\r\n              props={{\r\n                toggle: (\r\n                  <Widget\r\n                    src=\"nui.sking.near/widget/Input.Button\"\r\n                    props={{\r\n                      children: \"Propose to Remove\",\r\n                      size: \"sm\",\r\n                      variant: [\"danger\", \"outline\"],\r\n                      className: \"w-100\",\r\n                    }}\r\n                  />\r\n                ),\r\n                content: (\r\n                  <div className=\"ndc-card p-4\">\r\n                    <Widget\r\n                      src=\"nui.sking.near/widget/Input.Select\"\r\n                      props={{\r\n                        label: \"Propose to remove from role:\",\r\n                        options: roles.map((r) => {\r\n                          return {\r\n                            title: r,\r\n                            value: r,\r\n                          };\r\n                        }),\r\n                        onChange: (v) => State.update({ removeFromRole: v }),\r\n                        value: state.removeFromRole,\r\n                      }}\r\n                    />\r\n                    <Widget\r\n                      src=\"nui.sking.near/widget/Input.Button\"\r\n                      props={{\r\n                        children: \"Propose to Remove\",\r\n                        size: \"sm\",\r\n                        variant: [\"danger\"],\r\n                        className: \"w-100\",\r\n                        onClick: () =>\r\n                          onRemoveUserProposal(user, state.removeFromRole),\r\n                      }}\r\n                    />\r\n                  </div>\r\n                ),\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst renderGroups = () => {\r\n  return (\r\n    <div className=\"d-flex gap-2 flex-wrap\">\r\n      <Widget\r\n        src=\"nui.sking.near/widget/Input.Button\"\r\n        props={{\r\n          children: `all (${Object.keys(policy.users).length})`,\r\n          size: \"sm\",\r\n          variant: !state.filterByRole ? \"primary\" : \"default\",\r\n          className: \"text-capitalize\",\r\n          onClick: () =>\r\n            State.update({\r\n              filterByRole: null,\r\n            }),\r\n        }}\r\n        key={i}\r\n      />\r\n      {Object.keys(policy.roles).map((role, i) => {\r\n        return (\r\n          <Widget\r\n            src=\"nui.sking.near/widget/Input.Button\"\r\n            props={{\r\n              children: `${role} (${policy.roles[role].kind.Group.length})`,\r\n              size: \"sm\",\r\n              variant: state.filterByRole === role ? \"primary\" : \"default\",\r\n              className: \"text-capitalize\",\r\n              onClick: () =>\r\n                State.update({\r\n                  filterByRole: role,\r\n                }),\r\n            }}\r\n            key={i}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst actions = {\r\n  AddProposal: \"create proposal\",\r\n  VoteApprove: \"vote approve\",\r\n  VoteReject: \"vote reject\",\r\n  VoteRemove: \"vote remove\",\r\n};\r\n\r\nconst kinds = {\r\n  config: \"Change config\",\r\n  policy: \"Change policy\",\r\n  add_member_to_role: \"Add member to role\",\r\n  remove_member_from_role: \"Remove member from role\",\r\n  call: \"Call\",\r\n  upgrade_self: \"Upgrade self\",\r\n  upgrade_remote: \"Upgrade remote\",\r\n  transfer: \"Transfer\",\r\n  set_vote_token: \"Set staking contract\",\r\n  add_bounty: \"Add bounty\",\r\n  bounty_done: \"Bounty done\",\r\n  vote: \"Vote\",\r\n  factory_info_update: \"Factory info update\",\r\n  policy_add_or_update_role: \"Change policy add or update role\",\r\n  policy_remove_role: \"Change policy remove role\",\r\n  policy_update_default_vote_policy: \"Change policy update default vote policy\",\r\n  policy_update_parameters: \"Change policy update parameters\",\r\n  \"*\": \"All types\",\r\n};\r\n\r\nconst renderPermissions = (role) => {\r\n  const permissions = new Map();\r\n\r\n  const rolePermissions =\r\n    role === \"all\"\r\n      ? policy.everyone?.permissions\r\n      : policy.roles[role].permissions;\r\n\r\n  rolePermissions?.forEach((p) => {\r\n    const [kindKey, actionKey] = p.split(\":\");\r\n\r\n    const kind = kinds[kindKey] || kindKey;\r\n    const action = actions[actionKey] || actionKey;\r\n\r\n    if (!permissions.has(action)) {\r\n      permissions.set(action, new Set());\r\n    }\r\n\r\n    permissions.get(action).add(kind);\r\n  });\r\n\r\n  const filteredPermissions = new Map(\r\n    [...permissions].filter(([action, kindsSet]) => kindsSet.size > 0)\r\n  );\r\n\r\n  const sortedPermissions = Array.from(filteredPermissions.entries()).sort(\r\n    (a, b) => {\r\n      if (a[0] === actions.AddProposal) {\r\n        return -1;\r\n      }\r\n      if (b[0] === actions.AddProposal) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    }\r\n  );\r\n\r\n  return sortedPermissions.map(([action, kindsSet], i) => (\r\n    <li key={i}>\r\n      <span className=\"text-capitalize\">{action}</span>{\" \"}\r\n      {action === actions.AddProposal\r\n        ? \"of the following types:\"\r\n        : \"on proposals of the following types:\"}\r\n      <ul>\r\n        {Array.from(kindsSet).map((kind, j) => (\r\n          <li key={j}>{kind}</li>\r\n        ))}\r\n      </ul>\r\n    </li>\r\n  ));\r\n};\r\n\r\nconst users = !state.filterByRole\r\n  ? Object.keys(policy.users)\r\n  : Object.keys(policy.users).filter((user) =>\r\n      policy.users[user].includes(state.filterByRole)\r\n    );\r\n\r\n// Limit users to the first `usersToShow` items\r\nconst limitedUsers = users.slice(0, state.usersToShow);\r\n\r\nreturn (\r\n  <Wrapper className=\"d-flex flex-column gap-2\">\r\n    <div className=\"d-flex gap-2 flex-column\">\r\n      {limitedUsers.map((user, i) =>\r\n        renderUserRow(user, policy.users[user], i)\r\n      )}\r\n    </div>\r\n    {users.length > state.usersToShow && (\r\n      <button\r\n        style={{\r\n          display: \"block\",\r\n          width: \"100%\",\r\n          padding: \"10px\",\r\n          margin: \"10px 0\",\r\n          borderRadius: \"10px\",\r\n          border: \"1px solid #ddd\",\r\n          backgroundColor: \"#f5f5f5\",\r\n          cursor: \"pointer\",\r\n          color: \"#000\",\r\n        }}\r\n        onClick={() => State.update({ usersToShow: state.usersToShow + 3 })}\r\n      >\r\n        Show More\r\n      </button>\r\n    )}\r\n  </Wrapper>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/shemar268abel.near/widget/DAO.Members.index", "fact_widget_deployments_id": "4b0a4cc277a447b36dc95ba433378c40", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}