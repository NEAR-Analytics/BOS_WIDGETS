{"tx_hash": "Cbu73GWCimohDeoBz9nEhVm7syFHvbhdeBhG4rLRqDvL", "action_id_social": "8UbEchw7XFU4r9Qp5btF2SbaH9sBktUS3CvhM4zpcyhS-0-widget", "block_id": 98343208, "block_timestamp": "2023-08-08T12:01:30.215Z", "signer_id": "c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e", "widget_name": "BalancerAPITokenTable", "source_code": "// Typecheck your tokens Array (ApiRes.tokens): https://gist.github.com/dredshep/1960149838d1415c70e53997866ca3a7#file-zkevmbalancerapiresponsetypes-ts\n// Sample token prop object: https://gist.github.com/dredshep/1960149838d1415c70e53997866ca3a7#file-example_tokens_object-json\n\nif (!props.tokens?.map) {\n  return (\n    <div className=\"bg-warning p-2 rounded-2\">\n      `props.tokens` must be an array.\n    </div>\n  );\n}\n\nconst abbreviateNumber = (num) => {\n  if (isNaN(num)) return null;\n\n  if (num === 0) return \"0\";\n\n  const k = 1000;\n  const sizes = [\"K\", \"M\", \"B\", \"T\", \"Qa\", \"Qi\"];\n  const i = Math.floor(Math.log(num) / Math.log(k));\n\n  return (num / Math.pow(k, i)).toFixed(2) + (sizes[i - 1] ?? \"\");\n};\n\nconst calculateTokenValue = (token) => {\n  // If there are nested tokens, ignore them and return the value of this token\n  if (token.token?.pool?.tokens) {\n    return token.balance * token.priceRate;\n  }\n\n  // If there are no nested tokens, calculate the value as usual\n  return token.balance * token.priceRate;\n};\n\nconst StyledTable = styled.table`\n  color: #fff;\n  background-color: #333;\n  width: 100%;\n  border-collapse: separate;\n  border-spacing: 0;\n  border-radius: 10px;\n  overflow: hidden;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.15);\n  margin-bottom: 1em;\n  font-family: 'Roboto', sans-serif;\n`;\n\nconst StyledHeader = styled.th`\n  padding: 20px 10px;\n  text-align: left;\n  background-color: #444;\n`;\n\nconst StyledCell = styled.td`\n  padding: 20px 10px;\n  background-color: #333;\n`;\n\nconst getBorderColor = (level) => {\n  const colors = [\n    \"#88C0D0\",\n    \"#5E81AC\",\n    \"#BF616A\",\n    \"#D08770\",\n    \"#EBCB8B\",\n    \"#A3BE8C\",\n    \"#B48EAD\",\n    \"#8FBCBB\",\n    \"#4C566A\",\n  ];\n  return colors[level <= 8 ? level - 1 : 8];\n};\n\nconst cellStyles = `\n  background-color: #333;\n  padding: 20px 10px;\n`;\n\nconst StyledCellWithBorder = styled.td`\n  padding: 20px 10px;\n  background-color: #333;\n  border-left: ${(props) =>\n    `${2 + props.level * 2}px solid ${getBorderColor(props.level + 1)}`};\n  padding-left: ${(props) => `${1 + props.level * 0.5}em`};\n`;\n\nconst StyledRow = styled.tr`\n  &:nth-child(even) {\n    ${StyledCell}, ${StyledCellWithBorder} {\n      background-color: #444;\n    }\n  }\n\n  &:hover {\n    ${StyledCell}, ${StyledCellWithBorder} {\n      background-color: #555;\n    }\n  }\n`;\n\nconst RenderRow = ({ token, level, parentAddress }) => {\n  const hasNestedTokens = token.token?.pool?.tokens;\n\n  if (token.address === parentAddress) return null;\n\n  const value = calculateTokenValue(token);\n\n  return (\n    <Fragment key={token.symbol}>\n      <StyledRow>\n        <StyledCellWithBorder level={level * 2}>\n          {token.symbol}\n          {level}\n        </StyledCellWithBorder>\n        {hasNestedTokens ? (\n          <StyledCell></StyledCell>\n        ) : (\n          <StyledCell>\n            {token.balance === \"0\" ? \"0\" : abbreviateNumber(token.balance)}\n          </StyledCell>\n        )}\n        <StyledCell>\n          ${parseFloat(token.token?.latestUSDPrice).toFixed(2)}\n        </StyledCell>\n        <StyledCell>\n          {token.weight ? token.weight * 100 + \"%\" : <></>}\n        </StyledCell>\n        <StyledCell>${value.toFixed(2)}</StyledCell>\n      </StyledRow>\n      {hasNestedTokens &&\n        token.token.pool.tokens.map((nestedToken) => (\n          <RenderRow\n            token={nestedToken}\n            level={level + 1}\n            parentAddress={token.address}\n          />\n        ))}\n    </Fragment>\n  );\n};\n\nconst NestedTable = ({ tokens }) => {\n  return (\n    <StyledTable className=\"table\">\n      <thead>\n        <StyledRow>\n          <StyledHeader>Symbol</StyledHeader>\n          <StyledHeader>Balance</StyledHeader>\n          <StyledHeader>USD Price</StyledHeader>\n          <StyledHeader>Weight</StyledHeader>\n          <StyledHeader>Value</StyledHeader>\n        </StyledRow>\n      </thead>\n      <tbody>\n        {tokens.map((token) => (\n          <RenderRow key={token.symbol} token={token} level={0} />\n        ))}\n      </tbody>\n    </StyledTable>\n  );\n};\n\nreturn <NestedTable tokens={props.tokens} />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/BalancerAPITokenTable", "fact_widget_deployments_id": "0264af0e1026362e90ac3cd0694d045b", "inserted_timestamp": "2023-08-08T13:22:42.340Z", "modified_timestamp": "2023-08-08T13:22:42.340Z", "__row_index": 1}