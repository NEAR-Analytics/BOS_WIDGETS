{"tx_hash": "3c7cML32cb7RxdP2TJVX3S9qcXW9ypznmdEK8mRe9VeK", "action_id_social": "BKjwy5LeaxKCQcc1EZf4aMAW2YXBAQ2Eur2ootN98V3k-0-widget", "block_id": 98281292, "block_timestamp": "2023-08-07T14:52:34.435Z", "signer_id": "c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e", "widget_name": "BalancerAPITokenTable", "source_code": "// Typecheck your tokens Array (ApiRes.tokens): https://gist.github.com/dredshep/1960149838d1415c70e53997866ca3a7#file-zkevmbalancerapiresponsetypes-ts\n// Sample token prop object: https://gist.github.com/dredshep/1960149838d1415c70e53997866ca3a7#file-example_tokens_object-json\n\nif (!props.tokens?.map) {\n  return (\n    <div className=\"bg-warning p-2 rounded-2\">\n      `props.tokens` must be an array.\n    </div>\n  );\n}\n\nconst abbreviateNumber = (num) => {\n  if (isNaN(num)) return null;\n\n  if (num === 0) return \"0\";\n\n  const k = 1000;\n  const sizes = [\"K\", \"M\", \"B\", \"T\", \"Qa\", \"Qi\"];\n  const i = Math.floor(Math.log(num) / Math.log(k));\n\n  return (num / Math.pow(k, i)).toFixed(2) + (sizes[i - 1] ?? \"\");\n};\n\nconst StyledTable = styled.table`\n  color: #fff;\n  background-color: #333;\n  width: 100%;\n  border-collapse: separate;\n  border-spacing: 0;\n  border-radius: 10px;\n  overflow: hidden;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.15);\n  margin-bottom: 1em;\n  font-family: 'Roboto', sans-serif;\n`;\n\nconst StyledHeader = styled.th`\n  padding: 20px 10px;\n  text-align: left;\n  background-color: #444;\n`;\n\nconst StyledCell = styled.td`\n  padding: 20px 10px;\n  background-color: #333;\n`;\n\nconst StyledRow = styled.tr`\n  &:nth-child(even) {\n    ${StyledCell} {\n      background-color: #444;\n    }\n  }\n\n  &:hover {\n    ${StyledCell} {\n      background-color: #555;\n    }\n  }\n`;\n\nconst RenderRow = ({ token, level, parentAddress }) => {\n  const hasNestedTokens = token.token?.pool?.tokens;\n\n  if (token.address === parentAddress) return null;\n\n  return (\n    <Fragment key={token.symbol}>\n      <StyledRow>\n        <StyledCell style={{ paddingLeft: `${1 + level}em` }}>\n          {token.symbol}\n        </StyledCell>\n        {hasNestedTokens ? (\n          <StyledCell></StyledCell>\n        ) : (\n          <StyledCell>\n            {token.balance === \"0\" ? \"0\" : abbreviateNumber(token.balance)}\n          </StyledCell>\n        )}\n        <StyledCell>\n          ${parseFloat(token.token?.latestUSDPrice).toFixed(2)}\n        </StyledCell>\n        <StyledCell>\n          {token.weight ? token.weight * 100 + \"%\" : <></>}\n        </StyledCell>\n        <StyledCell>\n          ${abbreviateNumber(token.token?.latestUSDPrice * token.balance)}\n        </StyledCell>\n      </StyledRow>\n      {hasNestedTokens &&\n        token.token.pool.tokens.map((nestedToken) => (\n          <RenderRow\n            token={nestedToken}\n            level={level + 1}\n            parentAddress={token.address}\n          />\n        ))}\n    </Fragment>\n  );\n};\n\nconst NestedTable = ({ tokens }) => {\n  return (\n    <StyledTable className=\"table\">\n      <thead>\n        <StyledRow>\n          <StyledHeader>Symbol</StyledHeader>\n          <StyledHeader>Balance</StyledHeader>\n          <StyledHeader>USD Price</StyledHeader>\n          <StyledHeader>Weight</StyledHeader>\n          <StyledHeader>Value</StyledHeader>\n        </StyledRow>\n      </thead>\n      <tbody>\n        {tokens.map((token) => (\n          <RenderRow key={token.symbol} token={token} level={0} />\n        ))}\n      </tbody>\n    </StyledTable>\n  );\n};\n\nreturn <NestedTable tokens={props.tokens} />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/BalancerAPITokenTable", "fact_widget_deployments_id": "cf114ea7b32010dfbee8d0b775ddd545", "inserted_timestamp": "2023-08-07T15:50:05.377Z", "modified_timestamp": "2023-08-07T15:50:05.377Z", "__row_index": 0}