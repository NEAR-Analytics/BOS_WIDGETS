{"tx_hash": "Brh1JE1uBNcG3vXRteNWvtfKPr1fVKUYaXkDvQ8FkS6", "action_id_social": "378avgdmo6zQeadHUar7WRVEzQ97MoPYK4TMKoDXKigf-0-widget", "block_id": 96421682, "block_timestamp": "2023-07-14T02:49:30.436Z", "signer_id": "c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e", "widget_name": "BalancerPoolContainer", "source_code": "//@ts-check\n\n/** @typedef {Object} SBalancer @property {string} id @property {number} poolCount @property {string} totalLiquidity */\n/** @typedef {Object} SToken @property {string} name @property {string} symbol @property {string} address @property {number} decimals @property {string} totalBalanceUSD @property {string} totalBalanceNotional @property {string} totalVolumeUSD @property {string} totalVolumeNotional @property {string | null} latestUSDPrice @property {SLatestPrice | null} latestPrice */\n/** @typedef {Object} SLatestPrice @property {string} pricingAsset @property {string} price @property {SPoolId} poolId */\n/** @typedef {Object} SPoolId @property {string} totalWeight */\n/** @typedef {Object} SPool @property {string} id @property {string} address @property {string[]} tokensList @property {string} totalWeight @property {string} totalShares @property {string} holdersCount @property {string} poolType @property {number} poolTypeVersion @property {{ token: SToken }[]} tokens */\n/** @typedef {Object} SBalancerGQLResponse @property {SBalancer[]} balancers @property {SPool[]} pools */\n/** @typedef {Object} TokenWeights @property {string} address @property {number} weight */\n/** @typedef {Object} TransformedPool @property {string} totalValueLocked @property {TokenWeights[]} tokenWeights @property {string} id @property {string} address @property {string[]} tokensList @property {string} totalWeight @property {string} totalShares @property {string} holdersCount @property {string} poolType @property {number} poolTypeVersion @property {SToken[]} tokens */\n/** @typedef {Object} TransformedData @property {SBalancer[]} balancers @property {TransformedPool[]} pools */\n/** @typedef {Object} StatePool @property {string} id @property {boolean} approved @property {boolean} depositing @property {boolean} withdrawing @property {boolean} approving @property {boolean} loading */\n/** @typedef {Object} PoolAndBalance @property {string} poolAddress @property {string | undefined} balance */\n\n/**\n * @name formatAndAbbreviateNumber\n * @description Formats a number with commas as thousands separators and abbreviates it with a letter suffix\n * @param {number} num - The number to format and abbreviate\n * @returns {string} The formatted and abbreviated number as a string\n * @example const formattedNumber = formatAndAbbreviateNumber(1234567.89);\n * console.log(formattedNumber); // \"1.23M\"\n */\nfunction formatAndAbbreviateNumber(num) {\n  let counter = 0;\n  const abbreviations = [\"\", \"K\", \"M\", \"B\", \"T\", \"Quadrillion\", \"Quintillion\"];\n\n  while (num >= 1000) {\n    num /= 1000;\n    counter++;\n  }\n\n  const stringNum = num.toFixed(2);\n\n  // Split number into integer and decimal parts\n  let parts = Number(stringNum).toString().split(\".\");\n  // Add commas every three digits to the integer part\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n  return parts.join(\".\") + abbreviations[counter];\n}\n\n/**\n * @name calculateTokenWeights\n * @description Calculate the token weights in a pool\n * @param {SBalancerGQLResponse[\"pools\"][0]} pool\n * @returns {{\n * address: string,\n * weight: number\n * }[]}\n * @example const tokenWeights = calculateTokenWeights(pool);\n * console.log(tokenWeights);\n */\nfunction calculateTokenWeights(pool) {\n  const totalValueLocked = calculateTotalValueLocked(pool);\n  const getWeight = (\n    /** @type {number} */ value,\n    /** @type {number} */ decimals\n  ) => value / (Number(totalValueLocked.num) * Number(\"1e\" + decimals));\n  const weights = pool.tokens.map((_token) => {\n    const { token } = _token;\n    const floated = parseFloat(token.totalBalanceUSD);\n    const weight = floated === 0 ? 0 : getWeight(floated, token.decimals);\n    return {\n      address: token.address,\n      weight: parseFloat(weight.toFixed(1)),\n      token,\n    };\n  });\n  return weights;\n}\n\n/**\n * @name calculateTotalValueLocked\n * @description Calculate the total value locked in a pool\n * @param {SBalancerGQLResponse[\"pools\"][0]} pool\n * @returns {{ num: number, str: string }} The total value locked as a number and a string\n * @example const totalValueLocked = calculateTotalValueLocked(pool);\n * console.log(totalValueLocked);\n */\nfunction calculateTotalValueLocked(pool) {\n  const totalLiquidity = pool.tokens.reduce((acc, _token) => {\n    const { token } = _token;\n    const usdBalance =\n      parseFloat(token.totalBalanceUSD) / Number(\"1e\" + token.decimals);\n    if (usdBalance) {\n      return acc + usdBalance;\n    }\n    return acc;\n  }, 0);\n  return {\n    num: totalLiquidity,\n    str: formatAndAbbreviateNumber(totalLiquidity),\n  };\n}\n\n// const zkEVMGraphQLUri =\n//   // \"https://api.studio.thegraph.com/query/24660/balancer-polygon-zk-v2/version/latest\";\n//   \"https://api.studio.thegraph.com/proxy/24660/balancer-sepolia-v2/version/latest\";\n\n/**\n * @name getGraphQlQuerySync\n * @description Synchronously sends a GraphQL query to the specified URI and returns the response data\n * @param {string} query - The GraphQL query to send\n * @returns {SBalancerGQLResponse} The response data from the GraphQL query\n * @example const data = getGraphQlQuerySync(query);\n */\nfunction getGraphQlQuerySync(query) {\n  const options = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ query }),\n  };\n  const chainId = state.chainId || \"0x1\";\n  // @ts-ignore\n  const { body } = fetch(chainInfoObject[chainId].balancerSubgraphUrl, options);\n  return body.data;\n}\n\n/**\n * @name runAllInOneQuery\n * @description Get the pool data from the Balancer subgraph\n * @returns {SBalancerGQLResponse}\n * @example const data = runAllInOneQuery();\n */\nfunction runAllInOneQuery() {\n  const page = state.page || 0;\n  const query = `{\n    balancers(first: 5) {\n      id\n      poolCount\n      totalLiquidity\n    }\n    pools(first: 10, skip: ${page * 10}) {\n      id\n      address\n      tokensList\n      totalWeight\n      totalShares\n      holdersCount\n      poolType\n      poolTypeVersion\n      tokens {\n        token {\n          name\n          symbol\n          address\n          decimals\n          totalBalanceUSD\n          totalBalanceNotional\n          totalVolumeUSD\n          totalVolumeNotional\n          latestUSDPrice\n          latestPrice {\n            pricingAsset\n            price\n            poolId {\n              totalWeight\n            }\n          }\n        }\n      }\n    }\n  }`;\n\n  /** @type {SBalancerGQLResponse} */\n  const data = getGraphQlQuerySync(query);\n  return data;\n}\n\n/**\n * @name getTransformedData\n * @description Get the transformed data from the Balancer subgraph data and the calculations\n * @returns {TransformedData}\n * @example const data = getTransformedData();\n * console.log(data);\n */\n\nfunction getTransformedData() {\n  const data = runAllInOneQuery();\n  /** @type {TransformedPool[]} */\n  const transformedPools = data.pools.map((pool) => {\n    const totalValueLocked = calculateTotalValueLocked(pool).str;\n    const tokenWeights = calculateTokenWeights(pool);\n    const flattenedTokens = pool.tokens.map((_token) => {\n      const { token } = _token;\n      return token;\n    });\n    const tokens = flattenedTokens.sort((a, b) => {\n      const aBalance = parseFloat(a.totalBalanceUSD);\n      const bBalance = parseFloat(b.totalBalanceUSD);\n      return bBalance - aBalance;\n    });\n\n    // fill in the rest of the data\n    return {\n      ...pool,\n      tokens,\n      totalValueLocked,\n      tokenWeights,\n    };\n  });\n  /** @type {TransformedData} */\n  const transformedData = {\n    balancers: data.balancers,\n    pools: transformedPools,\n  };\n  return transformedData;\n}\n\n/**\n * @typedef {Object} State\n * @property {string | undefined} userAddress - The user's address\n * @property {string | undefined} chainId - The chain ID\n * @property {number} page - The current page\n */\nState.init({ userAddress: undefined, chainId: undefined, page: 0 });\n\n/**@type {string | undefined} */\nconst userAddress = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (userAddress) State.update({ userAddress });\n\n/** @type {ChainInfoObject} */\nconst chainInfoObject = {\n  \"0x1\": {\n    name: \"Ethereum Mainnet\",\n    chainId: \"0x1\", // 1\n    shortName: \"eth\",\n    chain: \"ETH\",\n    network: \"mainnet\",\n    networkId: \"1\",\n    nativeCurrency: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpc: [\"https://main-light.eth.linkpool.io\"],\n    faucets: [],\n    explorers: [\"https://etherscan.io\"],\n    balancerQueriesAddress: \"0xE39B5e3B6D74016b2F6A9673D7d7493B6DF549d5\",\n    vaultAddress: \"0xBA12222222228d8Ba445958a75a0704d566BF2C8\",\n    balancerSubgraphUrl:\n      \"https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-v2\",\n  },\n  // goerli\n  \"0x5\": {\n    name: \"Goerli Testnet\",\n    chainId: \"0x5\", // 5\n    shortName: \"gor\",\n    chain: \"ETH\",\n    network: \"goerli\",\n    networkId: \"5\",\n    nativeCurrency: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpc: [\"https://rpc.goerli.mudit.blog/\"],\n    faucets: [\n      \"https://goerli-faucet.slock.it/?address=${ADDRESS}\",\n      \"https://faucet.goerli.mudit.blog\",\n    ],\n    explorers: [\"https://goerli.etherscan.io\"],\n    balancerQueriesAddress: \"0xE39B5e3B6D74016b2F6A9673D7d7493B6DF549d5\",\n    vaultAddress: \"0xBA12222222228d8Ba445958a75a0704d566BF2C8\",\n    balancerSubgraphUrl:\n      \"https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-goerli-v2\",\n  },\n  // zkEVM\n  \"0x44d\": {\n    name: \"zkEVM Mainnet\",\n    chainId: \"0x44d\", // 1101\n    shortName: \"zkEVM\",\n    chain: \"ETH\",\n    network: \"mainnet\",\n    networkId: \"44\",\n    nativeCurrency: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpc: [\"https://rpc.ankr.com/polygon_zkevm\"],\n    faucets: [],\n    explorers: [\"https://zkevm.polygonscan.com\"],\n    balancerQueriesAddress: \"0x809B79b53F18E9bc08A961ED4678B901aC93213a\",\n    vaultAddress: \"0xBA12222222228d8Ba445958a75a0704d566BF2C8\",\n    balancerSubgraphUrl:\n      \"https://api.studio.thegraph.com/query/24660/balancer-polygon-zk-v2/version/latest\",\n  },\n  \"0xaa36a7\": {\n    name: \"Sepolia Testnet\",\n    chainId: \"0xaa36a7\", // 11155111\n    shortName: \"sep\",\n    chain: \"ETH\",\n    network: \"testnet\",\n    // networkId: \"31337\",\n    networkId: \"11155111\",\n    nativeCurrency: {\n      name: \"Sepolia Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpc: [\"https://rpc.sepolia.dev\"],\n    faucets: [\"https://faucet.sepolia.dev\"],\n    explorers: [\"https://sepolia.etherscan.io\"],\n    balancerQueriesAddress: \"0x1802953277FD955f9a254B80Aa0582f193cF1d77\",\n    vaultAddress: \"0xBA12222222228d8Ba445958a75a0704d566BF2C8\",\n    balancerSubgraphUrl:\n      \"https://api.studio.thegraph.com/query/24660/balancer-sepolia-v2/version/latest\",\n  },\n};\n/**\n * @param {string} hexString\n */\nfunction removeLeadingZero(hexString) {\n  if (hexString.startsWith(\"0x\")) {\n    return \"0x\" + parseInt(hexString, 16).toString(16);\n  }\n}\n\n// get ethers chain id and update state\nfunction getNetwork() {\n  const getNetworkReq = Ethers?.provider?.()?.getNetwork?.();\n  getNetworkReq\n    ?.then((/** @type {{ chainId: string | number; }} */ network) => {\n      const hexId = removeLeadingZero(ethers.utils.hexlify(network.chainId));\n      State.update({\n        chainId: hexId,\n      });\n    })\n    ?.catch((error) => {\n      console.log(\"Error while getting network\", error);\n    });\n}\n\ntry {\n  getNetwork();\n} catch (error) {\n  console.log(\"2nd TryCatch (promise?): Error while getting network\", error);\n}\n\n// if we don't have a chain id yet, try to get it before calling getTransformedData\nif (!state.chainId) {\n  setTimeout(() => {\n    try {\n      if (!state.chainId) {\n        getNetwork();\n      }\n    } catch (error) {\n      console.log(\n        \"3rd TryCatch (timeout?): Error while getting network\",\n        error\n      );\n    }\n  }, 2500);\n}\n\nfunction ConnectButton() {\n  return (\n    <Popover.Root>\n      <Popover.Trigger\n        className=\"btn btn-primary btn-md mb-3\"\n        style={{\n          filter: \"hue-rotate(40deg) saturate(80%) brightness(115%)\",\n        }}\n        // style={{ height: \"40px\" }}\n      >\n        {userAddress\n          ? \"Disconnect | Switch Network\"\n          : \"Connect wallet with Web3\"}\n      </Popover.Trigger>\n      <Popover.Content\n        className=\"container py-4 text-dark\"\n        style={{\n          width: \"max-content\",\n          zIndex: 1000,\n          // backgroundColor: \"#1e1e1e\",\n          backgroundColor: \"#f1f1f1\",\n          borderRadius: \"8px\",\n          // apply some deep shadow\n          boxShadow: \"0px 0px 20px 0px rgba(0,0,0,0.75)\",\n        }}\n      >\n        <Popover.Arrow style={{ fill: \"#1e1e1e\" }} />\n        <Widget\n          src=\"c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/NetworkSwitcherWithInfoTest\"\n          props={{ chainInfoObject }}\n        />\n      </Popover.Content>\n    </Popover.Root>\n  );\n}\n\nif (!state.chainId) {\n  // @ts-ignore\n  return (\n    <div className=\"bg-dark d-flex flex-column align-items-center text-light\">\n      <h1>Web3 not connected</h1>\n      <ConnectButton />\n    </div>\n  );\n}\n\nif (state.chainId && !chainInfoObject[state.chainId]) {\n  // @ts-ignore\n  return (\n    <div className=\"bg-dark d-flex flex-column align-items-center text-light\">\n      <h1>Unsupported network, please switch:</h1>\n      <ConnectButton />\n    </div>\n  );\n}\n\nconst transformedData = getTransformedData();\n\nif (\n  !transformedData ||\n  !state.chainId ||\n  !state.userAddress ||\n  typeof state.page !== \"number\"\n) {\n  // @ts-ignore\n  return (\n    <div className=\"bg-dark d-flex flex-column align-items-center text-light\">\n      <h1>Loading...</h1>\n      <ConnectButton />\n    </div>\n  );\n}\n\nfunction PaginationComponent() {\n  const page = state.page;\n  const setPage = (newPage) => {\n    State.update({ page: newPage });\n  };\n  const maxPage = Math.ceil(transformedData.balancers[0].poolCount / 10);\n  return (\n    <div className=\"d-flex justify-content-center mb-3 align-items-center gap-2\">\n      {/* first page with double quote left */}\n      <button\n        className=\"btn btn-primary btn-md\"\n        style={{\n          filter: \"hue-rotate(40deg) saturate(80%) brightness(115%)\",\n        }}\n        onClick={() => setPage(0)}\n        disabled={page === 0}\n      >\n        {\"\u00ab\"}\n      </button>\n      <button\n        className=\"btn btn-primary btn-md\"\n        style={{\n          filter: \"hue-rotate(40deg) saturate(80%) brightness(115%)\",\n        }}\n        onClick={() => setPage(page - 1)}\n        disabled={page === 0}\n      >\n        Previous\n      </button>\n      <span className=\"mx-1\">\n        Page {page + 1} of {maxPage}\n      </span>\n      <button\n        className=\"btn btn-primary btn-md\"\n        style={{\n          filter: \"hue-rotate(40deg) saturate(80%) brightness(115%)\",\n        }}\n        onClick={() => setPage(page + 1)}\n        disabled={page === maxPage - 1}\n      >\n        Next\n      </button>\n      {/* last page with double quote right */}\n      <button\n        className=\"btn btn-primary btn-md\"\n        style={{\n          filter: \"hue-rotate(40deg) saturate(80%) brightness(115%)\",\n        }}\n        onClick={() => setPage(maxPage - 1)}\n        disabled={page === maxPage - 1}\n      >\n        {\"\u00bb\"}\n      </button>\n    </div>\n  );\n}\n\nfunction MainExport() {\n  const _currentNetworkId = Ethers.send(\"eth_chainId\", []);\n  if (!_currentNetworkId) {\n    return (\n      <div className=\"bg-dark d-flex flex-column align-items-center text-light\">\n        <h1>Web3 not connected</h1>\n        <ConnectButton />\n      </div>\n    );\n  }\n  const currentNetworkId =\n    removeLeadingZero(_currentNetworkId || \"0x1\") || \"0x1\";\n  return (\n    <div className=\"bg-dark d-flex flex-column align-items-center text-light pt-3\">\n      {/* <Web3Connect connectLabel={\"Connect to Web3\"} /> */}\n      <ConnectButton />\n      {transformedData.balancers[0].poolCount > 10 && <PaginationComponent />}\n      <h1>Balancer Pools</h1>\n      <div className=\"d-flex flex-wrap gap-3 justify-content-center\">\n        {transformedData?.pools?.map((pool) => {\n          return (\n            <Widget\n              src=\"c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/BalancerPool\"\n              props={{\n                pool,\n                // this is an error in the widget, as both stake and unstake are supported in one widget\n                operation: \"stake\",\n                vaultAddress: chainInfoObject[currentNetworkId].vaultAddress,\n                balancerQueriesAddress:\n                  chainInfoObject[currentNetworkId].balancerQueriesAddress,\n              }}\n            />\n          );\n        })}\n      </div>\n      {transformedData.balancers[0].poolCount > 10 && <PaginationComponent />}\n    </div>\n  );\n}\n\n//@ts-ignore\nreturn <MainExport />;\n", "metadata": {"description": "", "linktree": {"website": "https://github.com/dredshep/balancer-pools-bos/blob/ddc12735082ef08c90159a3faa29579a9abbf054/Widgets/BalancerPoolContainer/BalancerPoolContainer.jsx"}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/BalancerPoolContainer", "fact_widget_deployments_id": "4a5b9b8b09ec29c9ea91292ed9705c5c", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 5}