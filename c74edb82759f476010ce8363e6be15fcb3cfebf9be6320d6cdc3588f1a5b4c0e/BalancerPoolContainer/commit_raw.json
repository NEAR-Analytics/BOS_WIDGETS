{"tx_hash": "GFVpgnyUdVKpm1yL9rTC4PccxX8YhWjruGxEHEaXcRgd", "action_id_social": "4kU9QWuJB4F3wNQc8jra8UPtAcnWPMDyCkTEwFPSFYbV-0-widget", "block_id": 97847680, "block_timestamp": "2023-08-01T15:10:22.609Z", "signer_id": "c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e", "widget_name": "BalancerPoolContainer", "source_code": "function formatAndAbbreviateNumber(num) {\n  let counter = 0;\n  const abbreviations = [\"\", \"K\", \"M\", \"B\", \"T\", \"Quadrillion\", \"Quintillion\"];\n\n  while (num >= 1000) {\n    num /= 1000;\n    counter++;\n  }\n\n  const stringNum = num.toFixed(2);\n\n  // Split number into integer and decimal parts\n  let parts = Number(stringNum).toString().split(\".\");\n  // Add commas every three digits to the integer part\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n  return parts.join(\".\") + abbreviations[counter];\n}\n\nfunction calculateTokenWeights(pool) {\n  const totalValueLocked = calculateTotalValueLocked(pool);\n  const getWeight = (\n    /** @type {number} */ value,\n    /** @type {number} */ decimals\n  ) => value / (Number(totalValueLocked.num) * Number(\"1e\" + decimals));\n  const weights = pool.tokens.map((_token) => {\n    const { token } = _token;\n    const floated = parseFloat(token.totalBalanceUSD);\n    const weight = floated === 0 ? 0 : getWeight(floated, token.decimals);\n    return {\n      address: token.address,\n      weight: parseFloat(weight.toFixed(1)),\n      token,\n    };\n  });\n  return weights;\n}\n\nfunction calculateTotalValueLocked(pool) {\n  const totalLiquidity = pool.tokens.reduce((acc, _token) => {\n    const { token } = _token;\n    const usdBalance =\n      parseFloat(token.totalBalanceUSD) / Number(\"1e\" + token.decimals);\n    if (usdBalance) {\n      return acc + usdBalance;\n    }\n    return acc;\n  }, 0);\n  return {\n    num: totalLiquidity,\n    str: formatAndAbbreviateNumber(totalLiquidity),\n  };\n}\n\nfunction getGraphQlQuerySync(query) {\n  const options = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ query }),\n  };\n  const chainId = state.chainId || \"0x1\";\n  // @ts-ignore\n  const { body } = fetch(chainInfoObject[chainId].balancerSubgraphUrl, options);\n  return body.data;\n}\n\nfunction getOnlyPoolIds() {\n  const query = `{\n    pools( where: { totalLiquidity_gt: 0 } ) {\n      id\n    }\n  }`;\n  const data = getGraphQlQuerySync(query);\n  return data;\n}\n\nfunction runAllInOneQuery(hideZeroBalances) {\n  const page = state.page || 0;\n  const query = `{\n    balancers(first: 5) {\n      id\n      poolCount\n      totalLiquidity\n    }\n    pools(\n      first: 10,\n      skip: ${page * 10},\n      orderBy: totalLiquidity,\n      orderDirection: desc,\n      # hide zero balance here optionally, only if hideZeroBalances is true\n      ${hideZeroBalances ? \"where: { totalLiquidity_gt: 0 }\" : \"\"}\n    ) {\n      id\n      address\n      tokensList\n      totalWeight\n      totalShares\n      holdersCount\n      poolType\n      poolTypeVersion\n      totalLiquidity\n      owner\n      createTime\n      tokens {\n        token {\n          name\n          symbol\n          address\n          decimals\n          totalBalanceUSD\n          totalBalanceNotional\n          totalVolumeUSD\n          totalVolumeNotional\n          latestUSDPrice\n          latestPrice {\n            pricingAsset\n            price\n            poolId {\n              totalWeight\n            }\n          }\n        }\n      }\n    }\n  }`;\n\n  /** @type {SBalancerGQLResponse} */\n  const data = getGraphQlQuerySync(query);\n  return data;\n}\n\nfunction hexToNumString(hex) {\n  return ethers.BigNumber.from(hex).toString();\n}\n\nconst getAPIData = (chainId, poolId) => {\n  const url = `https://api.balancer.fi/pools/${hexToNumString(\n    chainId\n  )}/${poolId}`;\n  // @ts-ignore\n  const res = fetch(url).body;\n  return res;\n};\n\nfunction getTransformedData() {\n  const data = runAllInOneQuery(!state.showZeroLiquidity);\n  /** @type {TransformedPool[]} */\n  if (!data?.pools?.map) return { balancers: [], pools: [] };\n  const transformedPools = data.pools.map((pool) => {\n    const poolId = pool?.id;\n    const chainId = state?.chainId || \"0x1\";\n    const aprRes = getAPIData(chainId, poolId);\n\n    const graphLiquidity = pool.totalLiquidity;\n    const apiLiquidity = aprRes?.totalLiquidity;\n    const totalValueLocked = formatAndAbbreviateNumber(\n      apiLiquidity\n        ? parseFloat(apiLiquidity)\n        : graphLiquidity\n        ? parseFloat(graphLiquidity)\n        : 0\n    );\n\n    const tokenWeights = calculateTokenWeights(pool);\n    const flattenedTokens = pool.tokens.map((_token) => {\n      const { token } = _token;\n      return token;\n    });\n    const tokens = flattenedTokens.sort((a, b) => {\n      const aBalance = parseFloat(a.totalBalanceUSD);\n      const bBalance = parseFloat(b.totalBalanceUSD);\n      return bBalance - aBalance;\n    });\n    const owner = pool.owner ?? \"0x0000000000000000000000000000000000000000\";\n\n    // fill in the rest of the data\n    return {\n      ...pool,\n      tokens,\n      totalValueLocked,\n      tokenWeights,\n      owner,\n    };\n  });\n  /** @type {TransformedData} */\n  const transformedData = {\n    balancers: data.balancers,\n    pools: transformedPools,\n  };\n  return transformedData;\n}\n\nState.init({\n  userAddress: undefined,\n  chainId: undefined,\n  page: 0,\n  forceMaxPage: false,\n  forcedMaxPage: 0,\n  showZeroLiquidity: false,\n});\n\nconst userAddress = Ethers?.send?.(\"eth_requestAccounts\", [])?.[0];\nif (userAddress) State.update({ userAddress });\n\nconst chainInfoObject = {\n  \"0x1\": {\n    name: \"Ethereum Mainnet\",\n    chainId: \"0x1\", // 1\n    shortName: \"eth\",\n    chain: \"ETH\",\n    network: \"mainnet\",\n    networkId: \"1\",\n    nativeCurrency: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpc: [\"https://main-light.eth.linkpool.io\"],\n    faucets: [],\n    explorers: [\"https://etherscan.io\"],\n    balancerQueriesAddress: \"0xE39B5e3B6D74016b2F6A9673D7d7493B6DF549d5\",\n    vaultAddress: \"0xBA12222222228d8Ba445958a75a0704d566BF2C8\",\n    balancerSubgraphUrl:\n      \"https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-v2\",\n  },\n  // goerli\n  \"0x5\": {\n    name: \"Goerli Testnet\",\n    chainId: \"0x5\", // 5\n    shortName: \"gor\",\n    chain: \"ETH\",\n    network: \"goerli\",\n    networkId: \"5\",\n    nativeCurrency: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpc: [\"https://rpc.goerli.mudit.blog/\"],\n    faucets: [\n      \"https://goerli-faucet.slock.it/?address=${ADDRESS}\",\n      \"https://faucet.goerli.mudit.blog\",\n    ],\n    explorers: [\"https://goerli.etherscan.io\"],\n    balancerQueriesAddress: \"0xE39B5e3B6D74016b2F6A9673D7d7493B6DF549d5\",\n    vaultAddress: \"0xBA12222222228d8Ba445958a75a0704d566BF2C8\",\n    balancerSubgraphUrl:\n      \"https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-goerli-v2\",\n  },\n  // zkEVM\n  \"0x44d\": {\n    name: \"zkEVM Mainnet\",\n    chainId: \"0x44d\", // 1101\n    shortName: \"zkEVM\",\n    chain: \"ETH\",\n    network: \"mainnet\",\n    networkId: \"44\",\n    nativeCurrency: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpc: [\"https://rpc.ankr.com/polygon_zkevm\"],\n    faucets: [],\n    explorers: [\"https://zkevm.polygonscan.com\"],\n    balancerQueriesAddress: \"0x809B79b53F18E9bc08A961ED4678B901aC93213a\",\n    vaultAddress: \"0xBA12222222228d8Ba445958a75a0704d566BF2C8\",\n    balancerSubgraphUrl:\n      \"https://api.studio.thegraph.com/query/24660/balancer-polygon-zk-v2/version/latest\",\n  },\n  \"0xaa36a7\": {\n    name: \"Sepolia Testnet\",\n    chainId: \"0xaa36a7\", // 11155111\n    shortName: \"sep\",\n    chain: \"ETH\",\n    network: \"testnet\",\n    // networkId: \"31337\",\n    networkId: \"11155111\",\n    nativeCurrency: {\n      name: \"Sepolia Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpc: [\"https://rpc.sepolia.dev\"],\n    faucets: [\"https://faucet.sepolia.dev\"],\n    explorers: [\"https://sepolia.etherscan.io\"],\n    balancerQueriesAddress: \"0x1802953277FD955f9a254B80Aa0582f193cF1d77\",\n    vaultAddress: \"0xBA12222222228d8Ba445958a75a0704d566BF2C8\",\n    balancerSubgraphUrl:\n      \"https://api.studio.thegraph.com/query/24660/balancer-sepolia-v2/version/latest\",\n  },\n};\nfunction removeLeadingZero(hexString) {\n  if (hexString.startsWith(\"0x\")) {\n    return \"0x\" + parseInt(hexString, 16).toString(16);\n  }\n}\n\nfunction getNetwork() {\n  const getNetworkReq = Ethers?.provider?.()?.getNetwork?.();\n  getNetworkReq\n    ?.then((/** @type {{ chainId: string | number; }} */ network) => {\n      const hexId = removeLeadingZero(ethers.utils.hexlify(network.chainId));\n      State.update({\n        chainId: hexId,\n      });\n    })\n    ?.catch((error) => {\n      console.log(\"Error while getting network\", error);\n    });\n}\n\ntry {\n  getNetwork();\n} catch (error) {\n  console.log(\"2nd TryCatch (promise?): Error while getting network\", error);\n}\n\nif (!state.chainId) {\n  setTimeout(() => {\n    try {\n      if (!state.chainId) {\n        getNetwork();\n      }\n    } catch (error) {\n      console.log(\n        \"3rd TryCatch (timeout?): Error while getting network\",\n        error\n      );\n    }\n  }, 2500);\n}\n\nfunction ConnectButton() {\n  return (\n    <Popover.Root>\n      <Popover.Trigger\n        className=\"btn btn-primary btn-md mb-3\"\n        style={{\n          filter: \"hue-rotate(40deg) saturate(80%) brightness(115%)\",\n        }}\n      >\n        {userAddress\n          ? \"Disconnect | Switch Network\"\n          : \"Connect wallet with Web3\"}\n      </Popover.Trigger>\n      <Popover.Content\n        className=\"container py-4 text-dark\"\n        style={{\n          width: \"max-content\",\n          zIndex: 1000,\n          backgroundColor: \"#f1f1f1\",\n          borderRadius: \"8px\",\n          boxShadow: \"0px 0px 20px 0px rgba(0,0,0,0.75)\",\n        }}\n      >\n        <Popover.Arrow style={{ fill: \"#1e1e1e\" }} />\n        <Widget\n          src=\"c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/NetworkSwitcherWithInfoTest\"\n          props={{ chainInfoObject }}\n        />\n      </Popover.Content>\n    </Popover.Root>\n  );\n}\n\nif (!state.chainId) {\n  // @ts-ignore\n  return (\n    <div className=\"bg-dark d-flex flex-column align-items-center text-light\">\n      <h1>Web3 not connected</h1>\n      <ConnectButton />\n    </div>\n  );\n}\n\nif (state.chainId && !chainInfoObject[state.chainId]) {\n  // @ts-ignore\n  return (\n    <div className=\"bg-dark d-flex flex-column align-items-center text-light\">\n      <h1>Unsupported network, please switch:</h1>\n      <ConnectButton />\n    </div>\n  );\n}\n\nconst transformedData = getTransformedData();\n\nif (\n  !transformedData ||\n  !state.chainId ||\n  !state.userAddress ||\n  typeof state.page !== \"number\"\n) {\n  // @ts-ignore\n  return (\n    <div className=\"bg-dark d-flex flex-column align-items-center text-light\">\n      <h1>Loading...</h1>\n      <ConnectButton />\n    </div>\n  );\n}\n\n// loading component with rotating icon and a big loading text\nfunction LoadingComponent() {\n  return (\n    <div className=\"d-flex flex-column align-items-center text-light\">\n      <h1>Loading...</h1>\n      <div className=\"spinner-border text-light\" role=\"status\">\n        <span className=\"visually-hidden\">Loading...</span>\n      </div>\n    </div>\n  );\n}\nfunction PaginationComponent({ forceMaxPage, forcedMaxPage }) {\n  if (typeof transformedData?.balancers?.length !== \"number\")\n    return <LoadingComponent />;\n  forceMaxPage = forceMaxPage || false;\n  forcedMaxPage = forcedMaxPage || 0;\n  const page = state.page;\n  if (typeof page !== \"number\") return undefined;\n  const setPage = (newPage) => {\n    State.update({ page: newPage });\n  };\n  const bPoolCountDividedBy10 = Math.ceil(\n    transformedData.balancers[0].poolCount / 10\n  );\n  const maxPage = forceMaxPage ? forcedMaxPage : bPoolCountDividedBy10;\n  return (\n    <div className=\"d-flex justify-content-center mb-3 align-items-center gap-2\">\n      {/* first page with double quote left */}\n      <button\n        className=\"btn btn-primary btn-md\"\n        style={{\n          filter: \"hue-rotate(40deg) saturate(80%) brightness(115%)\",\n        }}\n        onClick={() => setPage(0)}\n        disabled={page === 0}\n      >\n        {\"\u00ab\"}\n      </button>\n      <button\n        className=\"btn btn-primary btn-md\"\n        style={{\n          filter: \"hue-rotate(40deg) saturate(80%) brightness(115%)\",\n        }}\n        onClick={() => setPage(page - 1)}\n        disabled={page === 0}\n      >\n        Previous\n      </button>\n      <span className=\"mx-1\">\n        Page {page + 1} of {maxPage}\n      </span>\n      <button\n        className=\"btn btn-primary btn-md\"\n        style={{\n          filter: \"hue-rotate(40deg) saturate(80%) brightness(115%)\",\n        }}\n        onClick={() => setPage(page + 1)}\n        disabled={page === maxPage - 1}\n      >\n        Next\n      </button>\n      {/* last page with double quote right */}\n      <button\n        className=\"btn btn-primary btn-md\"\n        style={{\n          filter: \"hue-rotate(40deg) saturate(80%) brightness(115%)\",\n        }}\n        onClick={() => setPage(maxPage - 1)}\n        disabled={page === maxPage - 1}\n      >\n        {\"\u00bb\"}\n      </button>\n    </div>\n  );\n}\n\nlet forceMaxPage = false;\nlet forcedMaxPage = 0;\n\nconst breakpoint = 500;\n\nconst DesktopOnly = styled.div`\n  @media (max-width: ${breakpoint}px) {\n    display: none;\n  }\n`;\n\nconst MobileOnly = styled.div`\n  @media (min-width: ${breakpoint}px) {\n    display: none;\n  }\n`;\n\nconst PrettyTable = styled.div`\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n    width: 100%;\n    border-radius: 20px; /* rounded corners */\n    overflow: hidden; /* for rounded corners */\n    background: #333; /* dark mode */\n    color: #fff; /* text color */\n\n    th,\n    td {\n      padding: 16px;\n    }\n    thead tr {\n      background-color: #222; /* dark grey */\n      text-align: left;\n      /*&:hover {\n        background: #1f1f1f; /* hover effect */\n      }*/\n    }\n    tbody \n    tbody tr:nth-child(odd) {\n      background-color: #333; /* alternate row color */\n      /*&:hover {\n        background: #2f2f2f; /* hover effect */\n      }*/\n    }\n    tbody tr:nth-child(even) {\n      background-color: #222; /* alternate row color */\n      /*&:hover {\n        background: #1f1f1f; /* hover effect */\n      }*/\n    }\n  }\n`;\n\nfunction MainExport() {\n  if (!state.chainId) {\n    return (\n      <div className=\"bg-dark d-flex flex-column align-items-center text-light\">\n        <h1>Web3 not connected</h1>\n        <ConnectButton />\n      </div>\n    );\n  }\n  const chainId = state.chainId || \"0x1\";\n  // if transformedData?.pools is an empty array, set the page to previous page until we get a non-empty array\n  if (\n    transformedData?.pools?.length === 0 &&\n    transformedData?.balancers?.length !== 0\n  ) {\n    const page = state.page;\n    if (typeof page !== \"number\") return <LoadingComponent />;\n    if (page > 0) {\n      State.update({ page: page - 1 });\n    }\n  }\n  if (\n    transformedData?.pools?.length < 10 &&\n    transformedData?.balancers?.length > 0\n  ) {\n    State.update({ forceMaxPage: true });\n    State.update({ forcedMaxPage: state.page + 1 });\n  }\n  return (\n    <div className=\"bg-dark d-flex flex-column align-items-center text-light pt-3\">\n      <ConnectButton />\n      {transformedData.balancers[0].poolCount > 10 ? (\n        <PaginationComponent\n          forceMaxPage={state.forceMaxPage}\n          forcedMaxPage={state.forcedMaxPage}\n        />\n      ) : (\n        <div className=\"mb-3 mt-1 text-center text-light fs-5 fw-bold\">\n          <LoadingComponent />\n        </div>\n      )}\n      <div className=\"form-check form-switch mb-3\">\n        <input\n          className={\n            \"form-check-input fs-4\" +\n            (state.showZeroLiquidity ? \"\" : \" bg-secondary\")\n          }\n          style={{\n            filter: \"hue-rotate(40deg) saturate(80%) brightness(115%)\",\n            cursor: \"pointer\",\n          }}\n          type=\"checkbox\"\n          id=\"flexSwitchCheckDefault\"\n          checked={state.showZeroLiquidity}\n          onChange={() => {\n            State.update({ showZeroLiquidity: !state.showZeroLiquidity });\n            State.update({ page: 0 });\n            State.update({ forceMaxPage: false });\n            State.update({ forcedMaxPage: 0 });\n          }}\n        />\n        <label\n          className=\"form-check-label fs-5 mt-1 ms-1\"\n          htmlFor=\"flexSwitchCheckDefault\"\n        >\n          Show pools with zero liquidity\n        </label>\n      </div>\n\n      <h1 className=\"mt-3\">Balancer Pools</h1>\n      <div className=\"d-flex flex-wrap gap-3 justify-content-center\">\n        <MobileOnly>\n          {transformedData?.pools?.map((pool) => {\n            return (\n              <Widget\n                src=\"c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/BalancerPool\"\n                props={{\n                  pool,\n                  // this is an error in the widget, as both stake and unstake are supported in one widget\n                  operation: \"stake\",\n                  vaultAddress: chainInfoObject[chainId].vaultAddress,\n                  balancerQueriesAddress:\n                    chainInfoObject[chainId].balancerQueriesAddress,\n                  chainId: chainId,\n                }}\n              />\n            );\n          })}\n        </MobileOnly>\n        <DesktopOnly>\n          <PrettyTable>\n            <table\n              className=\"table table-sm table-transparent text-light\"\n              style={{\n                // max size is like 150px\n                maxWidth: \"min-content\",\n                marginTop: \"-0.25rem\",\n              }}\n            >\n              <thead>\n                <tr>\n                  <th className=\"fw-bold\">\n                    <div className=\"d-flex\">\n                      <i className=\"bi bi-circle-fill text-secondary\"></i>\n                      <i\n                        className=\"bi bi-circle-fill text-secondary\"\n                        style={{ marginLeft: \"-7px\" }}\n                      ></i>\n                      <i\n                        className=\"bi bi-circle-fill text-secondary\"\n                        style={{ marginLeft: \"-7px\" }}\n                      ></i>\n                    </div>\n                  </th>\n                  <th className=\"fw-bold\">Tokens</th>\n                  <th className=\"fw-bold\">APR</th>\n                  <th className=\"fw-bold\">Pool&nbsp;value</th>\n                  <th className=\"fw-bold\">Your&nbsp;balance</th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n                {transformedData?.pools?.map((pool) => {\n                  return (\n                    <Widget\n                      src=\"c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/BalancerPoolTableRow\"\n                      props={{\n                        pool,\n                        operation: \"stake\",\n                        vaultAddress: chainInfoObject[chainId].vaultAddress,\n                        balancerQueriesAddress:\n                          chainInfoObject[chainId].balancerQueriesAddress,\n                        chainId: chainId,\n                      }}\n                    />\n                  );\n                })}\n              </tbody>\n            </table>\n          </PrettyTable>\n        </DesktopOnly>\n      </div>\n      {transformedData.balancers[0].poolCount > 10 && (\n        <PaginationComponent\n          forceMaxPage={state.forceMaxPage}\n          forcedMaxPage={state.forcedMaxPage}\n        />\n      )}\n    </div>\n  );\n}\n\nreturn <MainExport />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/BalancerPoolContainer", "fact_widget_deployments_id": "fca8495e74d4b56a698d240205c7b6c6", "inserted_timestamp": "2023-08-01T17:18:55.508Z", "modified_timestamp": "2023-08-01T17:18:55.508Z", "__row_index": 6}