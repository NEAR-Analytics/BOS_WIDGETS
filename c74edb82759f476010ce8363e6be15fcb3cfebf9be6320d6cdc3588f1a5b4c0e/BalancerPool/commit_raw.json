{"tx_hash": "GYLhWkRjCMNkDpES8NmCP6WUsryHJEh4qvTjdgsXZDu3", "action_id_social": "EXJKhNeVNAQbGwSGAcStKSbEodw6YZFh82ziLDaKszkj-0-widget", "block_id": 96852203, "block_timestamp": "2023-07-19T17:15:35.361Z", "signer_id": "c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e", "widget_name": "BalancerPool", "source_code": "// @ts-check\n\n/** @typedef {Object} SBalancer @property {string} id @property {number} poolCount @property {string} totalLiquidity */\n/** @typedef {Object} SToken @property {string} name @property {string} symbol @property {string} address @property {number} decimals @property {string} totalBalanceUSD @property {string} totalBalanceNotional @property {string} totalVolumeUSD @property {string} totalVolumeNotional @property {string | null} latestUSDPrice @property {SLatestPrice | null} latestPrice */\n/** @typedef {Object} SLatestPrice @property {string} pricingAsset @property {string} price @property {SPoolId} poolId */\n/** @typedef {Object} SPoolId @property {string} totalWeight */\n/** @typedef {Object} SPool @property {string} id @property {string} address @property {string[]} tokensList @property {string} totalWeight @property {string} totalShares @property {string} holdersCount @property {string} poolType @property {number} poolTypeVersion @property {{ token: SToken }[]} tokens */\n/** @typedef {Object} SBalancerGQLResponse @property {SBalancer[]} balancers @property {SPool[]} pools */\n/** @typedef {Object} TokenWeights @property {string} address @property {number} weight */\n/** @typedef {Object} TransformedPool @property {string} totalValueLocked @property {TokenWeights[]} tokenWeights @property {string} id @property {string} address @property {string[]} tokensList @property {string} totalWeight @property {string} totalShares @property {string} holdersCount @property {string} poolType @property {number} poolTypeVersion @property {SToken[]} tokens */\n/** @typedef {Object} TransformedData @property {SBalancer[]} balancers @property {TransformedPool[]} pools */\n/** @typedef {Object} StatePool @property {string} id @property {boolean} approved @property {boolean} depositing @property {boolean} withdrawing @property {boolean} approving @property {boolean} loading */\n/** @typedef {Object} PoolAndBalance @property {string} poolAddress @property {string | undefined} balance */\n\nconst erc20ABI =\n  // @ts-ignore\n  fetch(\"https://raw.githubusercontent.com/dredshep/dev/main/abi.json\").body;\n\n/**\n * @typedef {Object} State\n * @property {string | undefined} poolBalance - The user's balance of the pool's tokens\n * @property {string | undefined} errorGettingBalance - Error message when trying to get the user's balance, if any.\n * @property {string | undefined} userAddress - The user's address\n * @property {number} refreshTick - A number that triggers a refresh of the data when it changes\n */\n\nState.init({\n  poolBalance: undefined,\n  errorGettingBalance: undefined,\n  userAddress: undefined,\n  refreshTick: 0,\n});\nif (state.errorGettingBalance)\n  console.log(\"Error getting balance: \", state.errorGettingBalance);\n\nconst missingProps = [];\n\n// @ts-ignore\nif (!props.pool) missingProps.push(\"pool (TransformedPool)\");\n// @ts-ignore\nif (!props.operation) missingProps.push('operation (\"stake\" | \"unstake\")');\n// @ts-ignore\nif (!props.vaultAddress) missingProps.push(\"vaultAddress (string)\");\n// @ts-ignore\nif (!props.balancerQueriesAddress)\n  missingProps.push(\"balancerQueriesAddress (string)\");\n// @ts-ignore\nif (props.pool && !props.pool.id)\n  missingProps.push(\"pool has no id, check type (TransformedPool)\");\n// @ts-ignore\nif (!props.chainId) missingProps.push(\"chainId (number | string)\");\n\nconst pool =\n  // @ts-ignore\n  props.pool;\n\n/** @type {string} */\nconst VAULT_ADDRESS =\n  // @ts-ignore\n  props.vaultAddress;\n\n/** @type {string} */\nconst BALANCER_QUERIES_ADDRESS =\n  // @ts-ignore\n  props.balancerQueriesAddress;\n\n/** @type {number | string} */\nconst CHAIN_ID =\n  // @ts-ignore\n  props.chainId;\n\nfunction MissingPropsWarning({ missingProps }) {\n  return (\n    <div\n      className=\"card border-warning mb-3 shadow\"\n      style={{ maxWidth: \"30rem\", margin: \"auto\" }}\n    >\n      <div className=\"card-header text-white bg-warning\">\n        <h4 className=\"card-title mb-0\">Attention!</h4>\n      </div>\n      <div className=\"card-body text-danger\">\n        <p className=\"card-text\">\n          There {missingProps.length === 1 ? \"is\" : \"are\"} {missingProps.length}{\" \"}\n          missing prop{missingProps.length === 1 ? \"\" : \"s\"}:\n        </p>\n        <ul className=\"list-group list-group-flush\">\n          {missingProps.map((prop) => (\n            <li key={prop} className=\"list-group-item\">\n              <pre className=\"m-0\">{prop}</pre>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nif (missingProps.length) {\n  // @ts-ignore\n  return <MissingPropsWarning missingProps={missingProps} />;\n}\n\nconst userAddress = Ethers.send(\"eth_requestAccounts\", [])[0];\nState.update({ userAddress });\n\n/**\n * @param {string} poolAddress\n * @param {string} userAddress\n */\nfunction getUserBalance(poolAddress, userAddress) {\n  if (!Ethers.provider()?.getSigner?.()) {\n    State.update({\n      userAddress: undefined,\n      errorGettingBalance: \"No signer, user disconnected\",\n    });\n    console.log(\"No signer, user disconnected, exiting getUserBalance()\");\n    return;\n  }\n  try {\n    const erc20 = new ethers.Contract(\n      poolAddress,\n      erc20ABI,\n      Ethers.provider().getSigner()\n    );\n    if (!userAddress) return;\n    const balance = erc20\n      .balanceOf(userAddress)\n      .then((/** @type {{ toString: () => string; }} */ balance) => {\n        const formattedBalance = ethers.utils.formatUnits(balance, 18);\n        return formattedBalance;\n      });\n    return balance;\n  } catch (e) {\n    return `Error in getUserBalance(). params:\n- poolAddress: ${poolAddress}\n- userAddress: ${userAddress}\n- error: ${e}`;\n  }\n}\n\n/**\n * @param {string | undefined} poolAddress\n * @param {string | undefined} userAddress\n */\nfunction getUserBalanceOnceAndUpdateState(poolAddress, userAddress) {\n  if (!userAddress) {\n    console.log(\"No user address, exiting getUserBalanceOnceAndUpdateState()\");\n    return;\n  }\n  if (!poolAddress) {\n    console.log(\"No pool address, exiting getUserBalanceOnceAndUpdateState()\");\n    return;\n  }\n  const balanceProcessor = getUserBalance(poolAddress, userAddress);\n  if (typeof balanceProcessor === \"string\") {\n    console.log(\n      \"Error getting balance using getUserBalanceOnceAndUpdateState():\",\n      balanceProcessor\n    );\n    return;\n  }\n  if (balanceProcessor && balanceProcessor.then) {\n    balanceProcessor.then((newBalance) => {\n      State.update({\n        poolBalance: newBalance,\n      });\n    });\n  } else {\n    console.log(\n      \"Got balance using getUserBalanceOnceAndUpdateState(); it was undefined.\"\n    );\n  }\n}\nlet updatedBalance;\nif (!updatedBalance) {\n  getUserBalanceOnceAndUpdateState(pool.address, state.userAddress);\n}\nupdatedBalance = true;\n\nfunction getPoolBalance({}) {\n  const userAddress = Ethers.signer().getAddress();\n  if (!userAddress) State.update({ errorGettingBalance: \"Not connected\" });\n  const { tokens } = pool;\n  const tokenAddresses = tokens.map((token) => token.address);\n  const contract = new ethers.Contract(\n    userAddress,\n    erc20ABI,\n    Ethers.provider().getSigner()\n  );\n  const balance = contract.balanceOf(pool.address);\n  return balance;\n}\n\nconst VerticalPair = ({ title, value, end }) => {\n  const isEnd = !!end;\n  return (\n    <div className=\"d-flex flex-column\">\n      <p\n        className={\n          \"text-secondary text-uppercase fw-bold mb-0 text-nowrap \" +\n          (isEnd ? \" text-end\" : \"\")\n        }\n        style={{\n          fontSize: \"0.9rem\",\n          letterSpacing: \"0.033rem\",\n        }}\n      >\n        {title}\n      </p>\n      <p className={\"fw-bold\" + (isEnd ? \" text-end\" : \"\") + \" fs-5\"}>\n        {value || \"-\"}\n      </p>\n    </div>\n  );\n};\n\n/**\n * @typedef {Object} StakeUnstakeButtonAndFormProps\n * @property {\"stake\"|\"unstake\"} operation\n * @property {TransformedPool} pool\n * @property {string} vaultAddress\n * @property {string} balancerQueriesAddress\n */\n\n/** @type {StakeUnstakeButtonAndFormProps} */\nconst stakeWidgetProps = {\n  pool,\n  operation: \"stake\",\n  vaultAddress: VAULT_ADDRESS,\n  balancerQueriesAddress: BALANCER_QUERIES_ADDRESS,\n};\n\n/** @type {StakeUnstakeButtonAndFormProps} */\nconst unstakeWidgetProps = {\n  pool,\n  operation: \"unstake\",\n  vaultAddress: VAULT_ADDRESS,\n  balancerQueriesAddress: BALANCER_QUERIES_ADDRESS,\n};\n\nfunction MainComponent() {\n  console.log(\"pool.id\", pool.id);\n  return (\n    <div\n      key={pool.id}\n      className=\"card bg-dark text-light rounded-4 shadow border-0 p-3\"\n      style={{\n        width: \"450px\",\n      }}\n    >\n      <div className=\"card-header\">\n        <h5 className=\"card-title\">\n          {pool.tokens\n            .map((t) => <span title={t.name}>{t.symbol || \"a\"}</span>)\n            // @ts-ignore\n            .reduce((prev, curr) => [prev, \" / \", curr])}\n        </h5>\n      </div>\n      <div className=\"card-body d-flex flex-column\">\n        <div className=\"\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <VerticalPair\n                end={false}\n                title=\"Pool Type\"\n                value={\n                  <span className=\"text-nowrap\">\n                    {pool.poolType} v{pool.poolTypeVersion}\n                  </span>\n                }\n              />\n              <VerticalPair\n                end={false}\n                title=\"Total Value Locked\"\n                value={`$${pool.totalValueLocked}`}\n              />\n            </div>\n            <div className=\"col-md-6\">\n              <VerticalPair\n                end={false}\n                title=\"Amount of Holders\"\n                value={`${pool.holdersCount}`}\n              />\n              <table\n                className=\"table table-sm table-transparent text-light border-secondary\"\n                style={{\n                  // max size is like 150px\n                  maxWidth: \"200px\",\n                  marginTop: \"-0.25rem\",\n                }}\n              >\n                <thead>\n                  <tr>\n                    <th className=\"fw-bold\">Token</th>\n                    <th className=\"fw-bold\">Weight</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {pool.tokens.map((t) => (\n                    <tr key={t.symbol}>\n                      <td\n                        title={\n                          \"1 \" +\n                          t.name +\n                          \" is worth $\" +\n                          parseFloat(t.latestUSDPrice || \"0\").toFixed(2)\n                        }\n                      >\n                        {t.symbol}\n                      </td>\n                      <td\n                        title={\n                          (\n                            parseFloat(t.totalBalanceNotional) /\n                            Number(\"1e\" + t.decimals)\n                          ).toFixed(2) +\n                          \" \" +\n                          t.symbol\n                        }\n                      >\n                        {pool.tokenWeights.find((w) => w.address === t.address)\n                          ? `${\n                              pool.tokenWeights.find(\n                                (w) => w.address === t.address\n                              )?.weight * 100\n                            }%`\n                          : \"N/A\"}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            <div className=\"d-flex justify-content-between\">\n              <VerticalPair\n                title=\"APR\"\n                value={\n                  <span style={{ color: \"#a75fff\" }} className=\"fs-4\">\n                    <Widget\n                      src=\"c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/APRText\"\n                      props={{\n                        chainId: CHAIN_ID,\n                        poolId: pool.id,\n                      }}\n                    />\n                  </span>\n                }\n                end={false}\n              />\n              <VerticalPair\n                title=\"Your Balance\"\n                value={state.poolBalance}\n                end\n              />\n            </div>\n          </div>\n          <div className=\"mt-3 d-flex justify-content-end\">\n            <div className=\"d-flex flex-column align-items-end\">\n              <div className=\"d-flex justify-content-end gap-3\">\n                {/* tiny reload button */}\n                <button\n                  className=\"btn btn-sm btn-outline-secondary fs-5 pt-2\"\n                  onClick={() => {\n                    getUserBalanceOnceAndUpdateState(pool.address, userAddress);\n                    State.update({\n                      refreshTick: state.refreshTick + 1,\n                    });\n                  }}\n                >\n                  <i className=\"bi bi-arrow-clockwise\"></i>\n                </button>\n                {state.refreshTick >= 0 && (\n                  <>\n                    <Widget\n                      src=\"c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/StakeUnstakeButtonAndForm\"\n                      props={{ ...unstakeWidgetProps }}\n                      key={(state.refreshTick + 1).toString()}\n                    />\n                    <Widget\n                      src=\"c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/StakeUnstakeButtonAndForm\"\n                      props={{ ...stakeWidgetProps }}\n                      key={(state.refreshTick + 2).toString()}\n                    />\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// @ts-ignore\nreturn <MainComponent />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/BalancerPool", "fact_widget_deployments_id": "9c3cfa51abf3bfbb2e503133b6e7e1e3", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}