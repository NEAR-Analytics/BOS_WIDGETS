{"tx_hash": "6qhq4x656QSWiduaEbq21Hd7p41GUREkV9cfpd7fGPBd", "action_id_social": "Awx1mY9poDgLEv7Uu5pQDVER12aFTgzcSqhFUCxc7LPU-0-widget", "block_id": 97854144, "block_timestamp": "2023-08-01T17:14:42.283Z", "signer_id": "c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e", "widget_name": "BalancerPoolTableRow", "source_code": "// In order to debug, use the code version with comments & types\n// Find it here: https://github.com/dredshep/balancer-pools-bos/blob/master/Widgets/BalancerPool/BalancerPool-table-row.jsx\n\nconst erc20ABI = fetch(\n  \"https://raw.githubusercontent.com/dredshep/dev/main/abi.json\"\n).body;\n\nState.init({\n  poolBalance: undefined,\n  errorGettingBalance: undefined,\n  userAddress: undefined,\n  refreshTick: 0,\n  seeMore: false,\n});\n\nfunction toggleSeeMore() {\n  State.update({ seeMore: !state.seeMore });\n}\n\nif (state.errorGettingBalance)\n  console.log(\"Error getting balance: \", state.errorGettingBalance);\n\nconst missingProps = [];\n\nif (!props.pool) missingProps.push(\"pool (TransformedPool)\");\nif (!props.operation) missingProps.push('operation (\"stake\" | \"unstake\")');\nif (!props.vaultAddress) missingProps.push(\"vaultAddress (string)\");\nif (!props.balancerQueriesAddress)\n  missingProps.push(\"balancerQueriesAddress (string)\");\nif (props.pool && !props.pool.id)\n  missingProps.push(\"pool has no id, check type (TransformedPool)\");\nif (props.pool && !props.pool.owner)\n  missingProps.push(\"pool has no owner, check type (TransformedPool)\");\nif (props.pool && !props.pool.createTime)\n  missingProps.push(\"pool has no createTime, check type (TransformedPool)\");\nif (!props.chainId) missingProps.push(\"chainId (number | string)\");\n\nconst pool = props.pool;\n\nconst VAULT_ADDRESS = props.vaultAddress;\n\nconst BALANCER_QUERIES_ADDRESS = props.balancerQueriesAddress;\n\nconst CHAIN_ID = props.chainId;\n\nfunction MissingPropsWarning({ missingProps }) {\n  return (\n    <div\n      className=\"card border-warning mb-3 shadow\"\n      style={{ maxWidth: \"30rem\", margin: \"auto\" }}\n    >\n      <div className=\"card-header text-white bg-warning\">\n        <h4 className=\"card-title mb-0\">Attention!</h4>\n      </div>\n      <div className=\"card-body text-danger\">\n        <p className=\"card-text\">\n          There {missingProps.length === 1 ? \"is\" : \"are\"} {missingProps.length}{\" \"}\n          missing prop{missingProps.length === 1 ? \"\" : \"s\"}:\n        </p>\n        <ul className=\"list-group list-group-flush\">\n          {missingProps.map((prop) => (\n            <li key={prop} className=\"list-group-item\">\n              <pre className=\"m-0\">{prop}</pre>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nif (missingProps.length) {\n  return <MissingPropsWarning missingProps={missingProps} />;\n}\n\n/**\n * Formats and abbreviates a number with a suffix based on its magnitude.\n * @param {number} num - The number to format and abbreviate.\n * @returns {string} The formatted and abbreviated number with a suffix.\n */\nfunction formatAndAbbreviateNumber(num) {\n  let counter = 0;\n  const abbreviations = [\"\", \"K\", \"M\", \"B\", \"T\", \"Quadrillion\", \"Quintillion\"];\n\n  while (num >= 1000) {\n    num /= 1000;\n    counter++;\n  }\n\n  const stringNum = num.toFixed(2);\n\n  // Split number into integer and decimal parts\n  let parts = Number(stringNum).toString().split(\".\");\n  // Add commas every three digits to the integer part\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n  return parts.join(\".\") + abbreviations[counter];\n}\n\nconst userAddress = Ethers.send(\"eth_requestAccounts\", [])[0];\nState.update({ userAddress });\n\nfunction getUserBalance(poolAddress, userAddress) {\n  if (!Ethers.provider()?.getSigner?.()) {\n    State.update({\n      userAddress: undefined,\n      errorGettingBalance: \"No signer, user disconnected\",\n    });\n    console.log(\"No signer, user disconnected, exiting getUserBalance()\");\n    return;\n  }\n  try {\n    const erc20 = new ethers.Contract(\n      poolAddress,\n      erc20ABI,\n      Ethers.provider().getSigner()\n    );\n    if (!userAddress) return;\n    const balance = erc20.balanceOf(userAddress).then((balance) => {\n      const formattedBalance = ethers.utils.formatUnits(balance, 18);\n      return formattedBalance;\n    });\n    return balance;\n  } catch (e) {\n    return `Error in getUserBalance(). params:\n- poolAddress: ${poolAddress}\n- userAddress: ${userAddress}\n- error: ${e}`;\n  }\n}\n\nfunction getUserBalanceOnceAndUpdateState(poolAddress, userAddress) {\n  if (!userAddress) {\n    console.log(\"No user address, exiting getUserBalanceOnceAndUpdateState()\");\n    return;\n  }\n  if (!poolAddress) {\n    console.log(\"No pool address, exiting getUserBalanceOnceAndUpdateState()\");\n    return;\n  }\n  const balanceProcessor = getUserBalance(poolAddress, userAddress);\n  if (typeof balanceProcessor === \"string\") {\n    console.log(\n      \"Error getting balance using getUserBalanceOnceAndUpdateState():\",\n      balanceProcessor\n    );\n    return;\n  }\n  if (balanceProcessor && balanceProcessor.then) {\n    balanceProcessor.then((newBalance) => {\n      State.update({\n        poolBalance: newBalance,\n      });\n    });\n  } else {\n    console.log(\n      \"Got balance using getUserBalanceOnceAndUpdateState(); it was undefined.\"\n    );\n  }\n}\nlet updatedBalance;\nif (!updatedBalance) {\n  getUserBalanceOnceAndUpdateState(pool.address, state.userAddress);\n}\nupdatedBalance = true;\n\nfunction getPoolBalance({}) {\n  const userAddress = Ethers.signer().getAddress();\n  if (!userAddress) State.update({ errorGettingBalance: \"Not connected\" });\n  const { tokens } = pool;\n  const tokenAddresses = tokens.map((token) => token.address);\n  const contract = new ethers.Contract(\n    userAddress,\n    erc20ABI,\n    Ethers.provider().getSigner()\n  );\n  const balance = contract.balanceOf(pool.address);\n  return balance;\n}\n\nconst VerticalPair = ({ title, value, end }) => {\n  const isEnd = !!end;\n  return (\n    <div className=\"d-flex flex-column align-items-start\">\n      <p\n        className={\n          \"text-secondary text-uppercase fw-bold mb-0 text-nowrap \" +\n          (isEnd ? \" text-end\" : \"\")\n        }\n        style={{\n          fontSize: \"0.9rem\",\n          letterSpacing: \"0.033rem\",\n        }}\n      >\n        {title}\n      </p>\n      <p className={\"fw-bold\" + (isEnd ? \" text-end\" : \"\") + \" fs-5\"}>\n        {value || \"-\"}\n      </p>\n    </div>\n  );\n};\n\nconst stakeWidgetProps = {\n  pool,\n  operation: \"stake\",\n  vaultAddress: VAULT_ADDRESS,\n  balancerQueriesAddress: BALANCER_QUERIES_ADDRESS,\n};\n\nconst unstakeWidgetProps = {\n  pool,\n  operation: \"unstake\",\n  vaultAddress: VAULT_ADDRESS,\n  balancerQueriesAddress: BALANCER_QUERIES_ADDRESS,\n};\n\nconst PrettyTable = styled.div`\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n    width: 100%;\n    border-radius: 20px; /* rounded corners */\n    overflow: hidden; /* for rounded corners */\n    background: #333; /* dark mode */\n    color: #fff; /* text color */\n\n    th,\n    td {\n      padding: 16px;\n    }\n    thead tr {\n      background-color: #222; /* dark grey */\n      text-align: left;\n      /*&:hover {\n        background: #1f1f1f; /* hover effect */\n      }*/\n    }\n    tbody \n    tbody tr:nth-child(odd) {\n      background-color: #333; /* alternate row color */\n      /*&:hover {\n        background: #2f2f2f; /* hover effect */\n      }*/\n    }\n    tbody tr:nth-child(even) {\n      background-color: #222; /* alternate row color */\n      /*&:hover {\n        background: #1f1f1f; /* hover effect */\n      }*/\n    }\n  }\n`;\n\nconst HoverableTd = styled.td`\n  /* align td content center in the table way */\n  text-align: center;\n  &:hover {\n    background: #2f2f2f; /* hover effect */\n    cursor: pointer; /* hand cursor on hover */\n  }\n`;\n\nconst ImageWithPlaceholder = ({\n  imageUrl,\n  placeholderUrl,\n  index,\n  length,\n  alt,\n}) => {\n  const imageExists = fetch(imageUrl)?.body;\n  const zIndex = length - index;\n  const marginLeft = index === 0 ? \"\" : \"-7px\";\n  return imageExists ? (\n    <img\n      src={imageUrl}\n      alt={alt}\n      width=\"24\"\n      height=\"24\"\n      className=\"rounded-circle\"\n      style={{\n        marginLeft,\n        zIndex,\n      }}\n    />\n  ) : (\n    <img\n      src={placeholderUrl}\n      alt={alt}\n      width=\"24\"\n      height=\"24\"\n      className=\"rounded-circle\"\n      style={{ marginLeft, zIndex }}\n    />\n  );\n};\n\nfunction stringNumToFixed2(stringNum) {\n  return stringNum === undefined ? undefined : parseFloat(stringNum).toFixed(2);\n}\n\nfunction unixTimeToISO(unixTime) {\n  return new Date(unixTime * 1000).toISOString().slice(0, 10);\n}\n\nfunction addressTo3Colors(address) {\n  const hexColors = address.slice(2);\n  const color1 = hexColors.slice(0, 6);\n  const color2 = hexColors.slice(6, 12);\n  const color3 = hexColors.slice(12, 18);\n  return `shape1Color=${color1}&shape2Color=${color2}&shape3Color=${color3}`;\n}\n\nfunction CoolTr() {\n  return (\n    <tr\n      onClick={() => {\n        toggleSeeMore();\n      }}\n    >\n      <td>\n        <div className=\"d-flex\">\n          {pool.tokensList.map((token, index, arr) => (\n            <ImageWithPlaceholder\n              key={token}\n              imageUrl={`https://raw.githubusercontent.com/balancer/tokenlists/main/src/assets/images/tokens/${token}.png`}\n              placeholderUrl={`https://api.dicebear.com/6.x/shapes/svg?seed=${token}&height=24&width=24&${addressTo3Colors(\n                token\n              )}`}\n              alt={token}\n              index={index}\n              length={arr.length}\n            />\n          ))}\n        </div>\n      </td>\n      <td>{pool.tokens.map((t) => t.symbol).join(\" / \")}</td>\n      <td>\n        <Widget\n          src=\"c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/APRText\"\n          props={{\n            chainId: CHAIN_ID,\n            poolId: pool.id,\n          }}\n        />\n      </td>\n      <td>${pool.totalValueLocked}</td>\n      <td>\n        {stringNumToFixed2(state.poolBalance) ?? \"-\"}\n        {state.poolBalance ? \"BPT\" : \"\"}\n      </td>\n      <Popover.Root>\n        <HoverableTd\n          style={{\n            padding: 0,\n            borderSpacing: 0,\n            height: \"45px\",\n            width: \"45px\",\n          }}\n        >\n          <Popover.Content asChild>\n            <div\n              className=\"border-2 border-secondary rounded-4 shadow border-bottom-1\"\n              style={{\n                zIndex: \"3\",\n                backgroundColor: \"#393e41\",\n              }}\n            >\n              <div className=\"d-flex justify-content-between align-items-center pb-4 border-bottom border-secondary pt-4 px-4\">\n                <div>\n                  <h5 className=\"text-light fw-bold d-flex p-0 m-0\">\n                    Pool Details\n                  </h5>\n                </div>\n                <div>\n                  <Popover.Close className=\"btn btn-sm btn-secondary\">\n                    <i className=\"bi bi-x-lg text-white\"></i>\n                  </Popover.Close>\n                </div>\n              </div>\n              <div className=\"d-flex w-100 gap-3 col-12 p-4\">\n                <div className=\"col-md-6\">\n                  <VerticalPair\n                    end={false}\n                    title=\"Amount of Holders\"\n                    value={`${pool.holdersCount}`}\n                  />\n                  <VerticalPair\n                    end={false}\n                    title=\"Owner\"\n                    value={\n                      <a\n                        href={`https://etherscan.io/address/${pool.owner}`}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        {pool.owner.slice(0, 6) +\n                          \"...\" +\n                          pool.owner.slice(pool.owner.length - 6)}\n                      </a>\n                    }\n                  />\n                </div>\n                <div className=\"col-md-6\">\n                  <VerticalPair\n                    end={false}\n                    title=\"Pool Type\"\n                    value={`${pool.poolType} ${pool.poolTypeVersion}`}\n                  />\n                  <VerticalPair\n                    end={false}\n                    title=\"Create Time\"\n                    value={unixTimeToISO(pool.createTime)}\n                  />\n                </div>\n              </div>\n\n              <div className=\"d-flex justify-content-between text-light fw-bold rounded-top align-items-center px-4\">\n                <div>\n                  {/* 2x2 grid with some info like amount of holders, pool type, token composition (weights) */}\n                  <PrettyTable className=\"col-md-6\">\n                    <table\n                      className=\"table table-sm table-transparent text-light\"\n                      style={{\n                        maxWidth: \"200px\",\n                        marginTop: \"-0.25rem\",\n                      }}\n                    >\n                      <thead>\n                        <tr className=\"border-secondary\">\n                          <th className=\"fw-bold\">Token</th>\n                          <th className=\"fw-bold\">Weight</th>\n                          <th className=\"fw-bold\">Amount</th>\n                          <th className=\"fw-bold\">USD&nbsp;Price</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {pool.tokens.map((t) => (\n                          <tr key={t.symbol}>\n                            <td title={t.name}>{t.symbol}</td>\n                            <td>\n                              {pool.tokenWeights.find(\n                                (w) => w.address === t.address\n                              )\n                                ? `${\n                                    (pool?.tokenWeights?.find(\n                                      (w) => w.address === t.address\n                                    )?.weight ?? 0) * 100\n                                  }%`\n                                : \"N/A\"}\n                            </td>\n                            <td key={\"balance\" + t.address + state.refreshTick}>\n                              {formatAndAbbreviateNumber(\n                                parseFloat(\n                                  stringNumToFixed2(t.totalBalanceNotional) ??\n                                    \"0\"\n                                )\n                              )}\n                            </td>\n                            <td key={\"price\" + t.address + state.refreshTick}>\n                              ${parseFloat(t.latestUSDPrice || \"0\").toFixed(2)}\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </PrettyTable>\n                </div>\n              </div>\n              <div className=\"d-flex justify-content-end gap-3 pb-4 px-4\">\n                {state.refreshTick >= 0 && (\n                  <div className=\"d-flex gap-3 mt-4\">\n                    <button\n                      className=\"btn btn-sm btn-outline-secondary fs-5 pt-2\"\n                      onClick={() => {\n                        getUserBalanceOnceAndUpdateState(\n                          pool.address,\n                          userAddress\n                        );\n                        State.update({\n                          refreshTick: state.refreshTick + 1,\n                        });\n                      }}\n                    >\n                      <i className=\"bi bi-arrow-clockwise\"></i>\n                    </button>\n                    <div style={{ maxWidth: \"150px\" }}>\n                      <Widget\n                        src=\"c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/StakeUnstakeButtonAndForm\"\n                        props={{ ...unstakeWidgetProps }}\n                        key={(state.refreshTick + 1).toString()}\n                      />\n                    </div>\n                    <div style={{ maxWidth: \"150px\" }}>\n                      <Widget\n                        src=\"c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/StakeUnstakeButtonAndForm\"\n                        props={{ ...stakeWidgetProps }}\n                        key={(state.refreshTick + 2).toString()}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </Popover.Content>\n          <Popover.Trigger\n            className=\"d-flex justify-content-center align-items-center\"\n            asChild\n            style={{\n              height: \"100%\",\n              width: \"100%\",\n            }}\n          >\n            <i\n              className=\"bi bi-graph-up-arrow text-primary\"\n              style={{\n                filter: \"hue-rotate(40deg) saturate(80%) brightness(115%)\",\n              }}\n            ></i>\n          </Popover.Trigger>\n        </HoverableTd>\n      </Popover.Root>\n    </tr>\n  );\n}\n\nreturn <CoolTr />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/BalancerPoolTableRow", "fact_widget_deployments_id": "5a6a7b56e2833c966115f2190fa7f08a", "inserted_timestamp": "2023-08-01T19:21:30.704Z", "modified_timestamp": "2023-08-01T19:21:30.704Z", "__row_index": 4}