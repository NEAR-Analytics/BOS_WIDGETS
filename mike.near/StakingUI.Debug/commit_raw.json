{"tx_hash": "A2V8jggk14xL2rMsrQHPVzzoL5CNnhAZ4oJVobvX93C", "action_id_social": "6RFinTSdEfU5fgxNTyQDcwMZHdysG2bHmx7pGX36xi7N-0-widget", "block_id": 111891172, "block_timestamp": "2024-02-02T00:07:09.770Z", "signer_id": "mike.near", "widget_name": "StakingUI.Debug", "source_code": "// const LogoWhite = VM.require(\"mike.near/widget/NearLogo2024White\");\n// console.log('aloha LogoWhite', LogoWhite)\nconst ProgressBar = VM.require(\"mike.near/widget/ProgressBar\");\n\nconst openAnotherModal = (validatorAddress, amount) => {\n  Near.call(validatorAddress, \"unstake\", { amount });\n  // Near.call(validatorAddress, \"unstake\", { amount: `\"${amount}\"` });\n};\nconst StakeUnstakeWithdraw = ({ validator, method, amount }) => {\n  //   console.log(\"aloha amount\", amount);\n  // amount = `\"${amount}\"`;\n  // const [stakingAmount, setStakingAmount] = useState(amount);\n  // const [isVisible, setIsVisible] = useState(true); // State to control visibility for fade-out effect\n\n  // Assuming maxAmount is defined somewhere in your component or props\n  const maxAmount = 100; // Placeholder value\n\n  // const handleStakeAllMinusThree = () => {\n  //     // const stakeAmount = Math.max(0, maxAmount - 3);\n  //     const stakeAmount = amount;\n  //     setStakingAmount(stakeAmount);\n  // };\n\n  const handleCancel = () => {\n    // Start the fade-out effect\n    setShowStakingModal(false);\n  };\n\n  const handleUnstake = () => {\n    // Dummy function to simulate fetching data\n    console.log(\"Unstaking...\");\n    /*\n            {\n              contractName: args[0],\n              methodName: args[1],\n              args: args[2] ?? {},\n              gas: args[3],\n              deposit: args[4],\n            },\n         */\n    console.log(\"oh cmon amount\", amount);\n    console.log(\"oh cmon validator\", validator);\n    openAnotherModal(validator, amount);\n    // const ret = Near.call(validatorAddress, \"unstake\", { amount: amount }, \"final\");\n    // Near.call(validatorAddress, \"unstake\", { amount: amount }, \"final\");\n    // console.log('aloha ret', ret);\n    // const stakedBalancePromise = Near.asyncView(\n    //     validatorAddress,\n    //     \"get_account_staked_balance\",\n    //     { account_id: accountId },\n    //     \"final\"\n    // );\n    // Here you could actually fetch data or perform some asynchronous operation\n  };\n\n  const containerStyle = {\n    boxShadow: \"0 3px 6px rgba(0, 0, 0, 0.6)\",\n    border: \"3px solid #f2f1e9\",\n    backgroundColor: \"rgba(0, 0, 0, .7)\",\n    // background: 'radial-gradient(ellipse at 20% 0, rgba(0, 0, 0, 0.8) 93%, rgba(151, 151, 255, .8) 100%)',\n    // rgba(0, 0, 0, 0.7),\n    background:\n      \"radial-gradient(circle at center, rgba(255, 255, 255, 0.7), rgba(0, 0, 0, 0.7) 100%), radial-gradient(circle at 10% 90%, rgba(200, 200, 255, 0.8), transparent 60%),radial-gradient(circle at 50% 50%, rgba(151, 151, 255, 0.7), transparent 50%)\",\n    // background: 'radial-gradient(ellipse at center, rgba(0, 0, 0, 0.8) 90%, rgba(151, 151, 255, .8) 100%),radial-gradient(circle at center, rgba(0, 0, 0, 0.8) 80%, green 90%)',\n\n    padding: \"20px\",\n    width: \"100%\",\n    margin: \"0 auto\",\n    borderRadius: \"13px\",\n    overflow: \"auto\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    transition: \"opacity 0.3s ease-out\",\n    // transform: \"rotate(19deg) skewX(31deg) skewY(19deg) scale(.666)\",\n    // transform: \"rotate(19deg)\",\n    // transformOrigin = \"50% 66%\",\n  };\n\n  const titleStyle = {\n    textAlign: \"center\",\n    color: \"#f2f1e9\",\n    fontWeight: \"bold\",\n    marginBottom: \"6px\",\n    textShadow: `\n        -1px -1px 0 #000,\n        1px -1px 0 #000,\n        -1px 1px 0 #000,\n        1px 1px 0 #000`,\n    letterSpacing: \"1px\",\n  };\n\n  return (\n    <div style={containerStyle}>\n      <h2 style={titleStyle}>{method} NEAR</h2>\n      <input\n        value={amount}\n        onChange={(e) => setStakingAmount(e.target.value)}\n        style={{\n          padding: \"13px\",\n          width: \"80%\",\n          margin: \"13px auto\",\n          display: \"block\",\n        }}\n      />\n      <button\n        onClick={handleUnstake}\n        style={{ padding: \"13px\", margin: \"13px auto\", display: \"block\" }}\n      >\n        Unstake\n      </button>\n      <button\n        onClick={handleCancel}\n        style={{ padding: \"13px\", margin: \"13px auto\", display: \"block\" }}\n      >\n        Cancel\n      </button>\n    </div>\n  );\n};\n\nconst { mainnetValidators } = VM.require(\n  \"mike.near/widget/StakingUI.getValidators\"\n);\n\n// State initialization\nconst [progressVal, setProgressVal] = useState(0);\n// 219 validators, sending at least two messages, sometimes a third.\n// this sane starting place helps so the progress bar doesn't jump around\nconst [progressMax, setProgressMax] = useState(440);\nconst [started, setStarted] = useState(false);\nconst [showProgressBar, setShowProgressBar] = useState(true);\nconst [validatorStakingDetails, setValidatorStakingDetails] = useState([]);\nconst [isLoading, setIsLoading] = useState(true); // State to manage the loading overlay\nconst [showStakingModal, setShowStakingModal] = useState(false);\nconst [stakingModalData, setStakingModalData] = useState(false);\n\nconst YOCTO_DIGITS = 24;\n\n// Modified from near-js utils\nfunction formatNearAmount(balance) {\n  balance = balance.toString();\n\n  // Pad the balance if it's shorter than YOCTO_DIGITS\n  if (balance.length <= YOCTO_DIGITS) {\n    balance = balance.padStart(YOCTO_DIGITS + 1, \"0\");\n  }\n\n  const wholeStr = balance.substring(0, balance.length - YOCTO_DIGITS) || \"0\";\n  let fractionStr = balance\n    .substring(balance.length - YOCTO_DIGITS)\n    .padEnd(YOCTO_DIGITS, \"0\");\n\n  fractionStr = fractionStr.substring(0, 3);\n  const fullNumber = `${wholeStr}.${fractionStr}`;\n\n  return fullNumber;\n}\n\nfunction cleanupAmount(amt) {\n  // Remove commas by splitting on them and joining the parts back together\n  return amt.split(\",\").join(\"\").trim();\n}\n\nfunction trimLeadingZeroes(str) {\n  // Find the first non-zero character\n  let firstNonZeroIndex = 0;\n  while (firstNonZeroIndex < str.length && str[firstNonZeroIndex] === \"0\") {\n    firstNonZeroIndex++;\n  }\n\n  // Return the substring from the first non-zero character or '0' if all characters were zeroes\n  return firstNonZeroIndex === str.length\n    ? \"0\"\n    : str.substring(firstNonZeroIndex);\n}\n\n// Modified from near-js utils\nfunction parseNearAmount(amt) {\n  if (!amt) {\n    return null;\n  }\n\n  amt = cleanupAmount(amt);\n  const split = amt.split(\".\");\n  const wholePart = split[0];\n  const fracPart = split[1] || \"\";\n\n  // Check for valid format\n  if (split.length > 2 || fracPart.length > YOCTO_DIGITS) {\n    throw new Error(`Cannot parse '${amt}' as NEAR amount`);\n  }\n\n  // Combine the whole part and the fractional part padded to NEAR_NOMINATION_EXP length\n  return trimLeadingZeroes(wholePart + fracPart.padEnd(YOCTO_DIGITS, \"0\"));\n}\n\n// below is useful, just loud\n// const himike = formatNearAmount(\"60606060606060606\")\n// console.log('aloha himike', himike)\n// const himike2 = parseNearAmount(\"666\")\n// console.log('aloha himike2', himike2)\n\nfunction createValidatorQueries(validators) {\n  let accountId = context.accountId;\n  // Take into account the component loading, honestly\n  let progressCounter = 20;\n\n  const updateProgress = ({ amount }) => {\n    if (!amount) amount = 1;\n    progressCounter = progressCounter + amount;\n    if (progressCounter % 20 == 0 && progressCounter > progressVal) {\n      setProgressVal(progressCounter);\n    }\n  };\n\n  const isPositiveNumber = (str) => {\n    return !!str && !isNaN(str) && parseFloat(str) > 0;\n  };\n\n  const wrappedPromises = validators.map((validatorAddress) => {\n    // Fetching staked and unstaked balances\n    const stakedBalancePromise = Near.asyncView(\n      validatorAddress,\n      \"get_account_staked_balance\",\n      { account_id: accountId },\n      \"final\"\n    );\n    const unstakedBalancePromise = Near.asyncView(\n      validatorAddress,\n      \"get_account_unstaked_balance\",\n      { account_id: accountId },\n      \"final\"\n    );\n\n    updateProgress(stakedBalancePromise.length + unstakedBalancePromise.length);\n\n    return Promise.all([stakedBalancePromise, unstakedBalancePromise])\n      .then(([stakedBalance, unstakedBalance]) => {\n        // weird hack seeing that 1 yoctonear seems to say it can be unstaked\n        // seems like a contract / near-js bug\n        unstakedBalance = unstakedBalance === \"1\" ? \"0\" : unstakedBalance;\n\n        const isHighlight =\n          isPositiveNumber(unstakedBalance) || isPositiveNumber(stakedBalance);\n        if (isPositiveNumber(unstakedBalance)) {\n          // If unstaked balance is positive, check if it's available, adding another Promise\n          return Near.asyncView(\n            validatorAddress,\n            \"is_account_unstaked_balance_available\",\n            { account_id: accountId },\n            \"final\"\n          ).then((isAvailable) => {\n            updateProgress();\n            return {\n              validatorAddress,\n              stakedBalance,\n              unstakedBalance,\n              isHighlight,\n              isUnstakedBalanceAvailable: isAvailable,\n            };\n          });\n        } else {\n          // If not, just return the balances\n          updateProgress();\n          return {\n            validatorAddress,\n            stakedBalance,\n            unstakedBalance,\n            isHighlight,\n            isUnstakedBalanceAvailable: null,\n          };\n        }\n      })\n      .catch((err) => {\n        console.error(\n          \"Error fetching balances for \",\n          validatorAddress,\n          \": \",\n          err\n        );\n        updateProgress();\n        return null;\n      });\n  });\n\n  updateProgress(wrappedPromises.length);\n  Promise.all(wrappedPromises)\n    .then((results) => {\n      const detailedStakingInfo = results.filter((info) => {\n        return info !== null;\n      });\n      setValidatorStakingDetails(detailedStakingInfo);\n      // intentionally not setting IsLoading here, the UI needs to finish\n    })\n    .catch((err) => {\n      console.error(\"Error with promise all: \", err);\n      setIsLoading(false);\n    });\n}\n\n// It seems like using VM.require and useEffect is odd, so I am using a normal function here\nconst start = () => {\n  // if it hasn't loaded the external widget yet, return\n  if (!!!mainnetValidators) return;\n  //   setStarted(true);\n  // kick off the useEffect below\n};\n\nstart();\n\nuseEffect(() => {\n  // We need this check here again\n  if (!!!mainnetValidators) return;\n\n  mainnetValidators.getAddresses().then((vals) => {\n    setProgressMax(vals.length * 2);\n    createValidatorQueries(vals);\n  });\n}, [started]);\n\nuseEffect(async () => {\n  if (progressVal >= progressMax) {\n    // Compare these two approaches by commenting them out, it's interesting.\n\n    // setIsLoading(false);\n    const timer = setTimeout(() => setIsLoading(false), 300);\n    return () => clearTimeout(timer);\n  }\n}, [progressVal, progressMax]);\n\nconst LoadingModal = () => {\n  // This helps with the flash of red if it hasn't loaded yet\n  if (!!!ProgressBar) {\n    return <></>;\n  } else {\n    return (\n      <div\n        style={{\n          position: \"fixed\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: \"translate(-50%, -150%)\",\n          padding: \"6px\",\n          width: \"19%\",\n          height: \"13%\",\n          backgroundColor: \"rgba(0, 0, 0, 0.2)\",\n          backdropFilter: \"blur(6px)\",\n          display: isLoading ? \"flex\" : \"none\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          borderRadius: \"300px\", // Optional: for rounded corners\n          transition: \"opacity 0.2s ease-out, background-color 0.2s ease\",\n          opacity: isLoading ? 1 : 0,\n          zIndex: 999,\n          background: `linear-gradient(to bottom, rgba(255, 255, 255, 0) 0%, rgba(0, 0, 0, 0.2) 100%)`,\n          boxShadow: \"0 8px 32px 0 rgba(31, 38, 135, 0.37)\",\n        }}\n      >\n        <ProgressBar key={progressVal} value={progressVal} max={progressMax} />\n      </div>\n    );\n  }\n};\n\n// Interesting, this seems to need to be above the StakeUnstakeWithdrawModal declaration\nconst walletUnstake = ({ validator, amount }) => {\n  // console.log('aloha! validator', validator);\n  // console.log('aloha! amount', amount);\n  setStakingModalData({ validator, method: \"unstake\", amount });\n  setShowStakingModal(true);\n};\n\n// debug by commenting this badboy out to see it\nconst stakingModalDisplayStyles = {\n  display: showStakingModal ? \"flex\" : \"none\",\n  opacity: showStakingModal ? 1 : 0,\n};\n\nconst StakeUnstakeWithdrawModal = () => {\n  // This helps with the flash of red if it hasn't loaded yet\n  if (!!!StakeUnstakeWithdraw) {\n    return <></>;\n  } else {\n    const handleOutsideClick = (e) => {\n      // because we stop event propagation, we can just close it here\n      setShowStakingModal(false);\n    };\n\n    const outerDivStyle = {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      backgroundColor: \"rgba(0, 0, 0, 0.6)\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      zIndex: 998,\n      cursor: \"pointer\",\n      ...stakingModalDisplayStyles,\n    };\n\n    const innerDivStyle = {\n      cursor: \"auto\",\n      position: \"relative\",\n      width: \"37%\",\n      height: \"auto\",\n      maxHeight: \"90%\",\n      padding: \"1%\",\n      background:\n        \"radial-gradient(ellipse, rgba(151, 151, 255, .8) 19%, rgba(0, 0, 0, 0.8) 100%)\",\n      // backgroundColor: \"rgba(0, 0, 0, .3)\",\n      backdropFilter: \"grayscale(100%)\",\n      borderRadius: \"13px\",\n      boxShadow:\n        \"0 0 15px rgba(255, 255, 255, 0.6), 0 0 20px rgba(255, 255, 255, 0.4), 0 0 25px rgba(255, 255, 255, 0.3), 0 0 30px rgba(255, 255, 255, 0.2), 0 0 35px rgba(255, 255, 255, 0.1), 0 0 40px rgba(255, 255, 255, 0.05)\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    };\n\n    return (\n      <div style={outerDivStyle} onClick={handleOutsideClick}>\n        <div style={innerDivStyle} onClick={(e) => e.stopPropagation()}>\n          <StakeUnstakeWithdraw\n            validator={stakingModalData.validator}\n            method={stakingModalData.method}\n            amount={stakingModalData.amount}\n          />\n        </div>\n      </div>\n    );\n  }\n};\n\nconst highlightedRows = useMemo(\n  () => validatorStakingDetails.filter((row) => row.isHighlight),\n  [validatorStakingDetails]\n);\nconst rangedRows = useMemo(\n  () => validatorStakingDetails.filter((row) => !row.isHighlight),\n  [validatorStakingDetails]\n);\n\nreturn (\n  <div\n    style={{\n      fontFamily: \"'Lucida Console', Monaco, monospace\",\n      padding: \"6px\",\n    }}\n  >\n    <LoadingModal />\n    <StakeUnstakeWithdrawModal />\n    <div>\n      <h1 style={{ color: \"#fff\" }}>Staking</h1>\n      <div>\n        <h3>Highlighted</h3>\n        <div\n          className=\"faux-table\"\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            margin: \"6px 0\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              // marginBottom: '6px' // space between the header and the table content\n            }}\n          >\n            <div\n              className=\"faux-table-header\"\n              style={{\n                display: \"flex\",\n                borderRadius: \"6px 6px 0 0\",\n                background: \"#000\",\n                color: \"#f2f1e9\",\n                textTransform: \"uppercase\",\n                padding: \"9px\",\n                fontWeight: \"bold\",\n              }}\n            >\n              <div style={{ flex: 3, padding: \"0 10px\" }}>Validator</div>\n              <div style={{ flex: 2, padding: \"0 10px\" }}>Staked</div>\n              <div style={{ flex: 2, padding: \"0 10px\" }}>Unstaked</div>\n              <div style={{ flex: 1, padding: \"0 10px\" }}>Can Withdraw</div>\n            </div>\n            <div\n              style={{\n                height: \"6px\",\n                background: \"linear-gradient(to right, #00ec97, #fff, #00ec97)\", // Example gradient\n              }}\n            />\n          </div>\n\n          {highlightedRows.map((detail) => (\n            <div\n              key={detail.validatorAddress}\n              className=\"faux-table-row\"\n              style={{\n                display: \"flex\",\n                background: \"#111\",\n                color: \"#fff\",\n                borderBottom: \"1px solid #333\",\n                padding: \"10px\",\n              }}\n            >\n              <div style={{ flex: 3, padding: \"0 10px\" }}>\n                {detail.validatorAddress}\n              </div>\n              <div style={{ flex: 2, padding: \"0 10px\" }}>\n                {formatNearAmount(detail.stakedBalance)}\n                <button style={{ marginLeft: \"10px\" }}>Stake</button>\n              </div>\n              <div style={{ flex: 2, padding: \"0 10px\" }}>\n                {formatNearAmount(detail.unstakedBalance) === \"0.000\"\n                  ? \"\u2014\"\n                  : formatNearAmount(detail.unstakedBalance)}\n                <button\n                  onClick={() =>\n                    walletUnstake({\n                      validator: detail.validatorAddress,\n                      amount: detail.stakedBalance,\n                    })\n                  }\n                >\n                  Unstake\n                </button>\n                {detail.isUnstakedBalanceAvailable ? (\n                  <button\n                    style={{ marginLeft: \"10px\" }}\n                    onClick={() => console.log(\"unimplemented bro\")}\n                  >\n                    Withdraw\n                  </button>\n                ) : null}\n              </div>\n              <div\n                style={{\n                  flex: 1,\n                  padding: \"0 10px\",\n                }}\n              >\n                {detail.isUnstakedBalanceAvailable !== null\n                  ? detail.isUnstakedBalanceAvailable.toString()\n                  : \"\"}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div>\n        <h3>Others</h3>\n        <div\n          className=\"faux-table\"\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            margin: \"6px 0\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n            }}\n          >\n            <div\n              className=\"faux-table-header\"\n              style={{\n                display: \"flex\",\n                borderRadius: \"6px 6px 0 0\",\n                background: \"#000\",\n                color: \"#f2f1e9\",\n                textTransform: \"uppercase\",\n                padding: \"10px\",\n                fontWeight: \"bold\",\n              }}\n            >\n              <div style={{ flex: 3, padding: \"0 10px\" }}>Validator</div>\n              <div style={{ flex: 2, padding: \"0 10px\" }}>Staked</div>\n            </div>\n            <div\n              style={{\n                height: \"6px\",\n                background: \"linear-gradient(to right, #ff7966, #fff, #ff7966)\", // Example gradient\n              }}\n            />\n          </div>\n          {rangedRows.map((detail) => (\n            <div\n              key={detail.validatorAddress}\n              className=\"faux-table-row\"\n              style={{\n                display: \"flex\",\n                background: \"#111\",\n                color: \"#fff\",\n                borderBottom: \"1px solid #333\",\n                padding: \"10px\",\n              }}\n            >\n              <div style={{ flex: 3, padding: \"0 10px\" }}>\n                {detail.validatorAddress}\n              </div>\n              <div style={{ flex: 2, padding: \"0 10px\" }}>\n                <button style={{ marginLeft: \"10px\" }}>Stake</button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mike.near/widget/StakingUI.Debug", "fact_widget_deployments_id": "c049e5f84ffca044c32145a2ba1dca93", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}