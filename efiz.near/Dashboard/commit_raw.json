{"tx_hash": "3CdsUEayLq46vSMkcmPiQSMsikXjWzj44wKcsfW1tz8B", "action_id_social": "9Re59yWXjLhFUfmBtDHrquxGwWoUydVgZM2TUvemNfgA-0-widget", "block_id": 95934084, "block_timestamp": "2023-07-07T18:32:01.475Z", "signer_id": "efiz.near", "widget_name": "Dashboard", "source_code": "const typeWhitelist = JSON.parse(props.typeWhitelist || \"null\") || [\n  \"md\",\n  \"social\",\n  \"every.near/type/image\",\n];\n\nState.init({\n  index: [],\n  domainFilter: \"\",\n  keyFilter: \"\",\n  accountFilter: \"\",\n  hashtagFilter: \"\",\n  showModal: false,\n  modalData: {},\n  selectedKeys: {},\n});\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  border: 1px solid #ccc;\n  table-layout: fixed;\n`;\n\nconst TableHeader = styled.th`\n  padding: 8px;\n  background-color: #f2f2f2;\n  text-align: left;\n  text-overflow: ellipsis;\n  width: auto;\n  flex-shrink: 0; /* Added CSS rule to prevent growth */\n`;\n\nconst TableCell = styled.td`\n  padding: 8px;\n  border: 1px solid #ccc;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 220px;\n`;\n\nconst Select = styled.select`\n  height: 30px;\n`;\n\nconst Button = styled.button`\n`;\n\nconst Input = styled.input`\n`;\n\nconst availableTypes = JSON.parse(props.availableTypes) || [\n  \"efiz.near/type/paragraph\",\n  \"efiz.near/type/Image\",\n  \"efiz.near/type/document\",\n  \"efiz.near/type/feed\",\n  \"efiz.near/type/idea\",\n  \"efiz.near/type/markdown\",\n  \"efiz.near/type/topic\",\n];\n\nfunction handleTypeChange(e) {\n  State.update({ selectedType: e.target.value });\n}\n\nfunction executeQuery() {\n  let index = [];\n  const domainFilter = [\"post\"];\n  if (state.domainFilter.trim() !== \"\") {\n    domainFilter = state.domainFilter?.split(\",\")?.map((item) => item.trim());\n  }\n\n  const key = \"main\";\n\n  const hashtagFilter = [];\n  if (state.hashtagFilter.trim() !== \"\") {\n    state.hashtagFilter?.split(\",\").map((item) => item.trim());\n  }\n\n  const accountFilter = undefined;\n  if (state.hashtagFilter.trim() !== \"\") {\n    state?.accountFilter?.split(\",\")?.map((item) => item.trim()) || undefined;\n  }\n\n  if (hashtagFilter.length) {\n    index = hashtagFilter.map((it) => ({\n      action: \"hashtag\",\n      key: it.toLowerCase(),\n      options: {\n        limit: 10,\n        order: \"desc\",\n        accountId: accountFilter,\n      },\n    }));\n  } else {\n    index = domainFilter.map((it) => ({\n      action: it,\n      key,\n      options: {\n        limit: 10,\n        order: \"desc\",\n        accountId: accountFilter,\n      },\n    }));\n  }\n\n  State.update({\n    index,\n  });\n}\n\n// const type\nconst things = JSON.parse(Social.get(\"efiz.near/thing/**\") || null);\nconst type = JSON.parse(Social.get(state.selectedType) || null);\n\nconst handleView = (key, data) => {\n  State.update({ showModal: true, modalData: { key, data } });\n};\n\nconst handleDelete = (key) => {\n  // Need a delete cascade\n  Social.set({ thing: { [key]: null } });\n};\n\nfunction Headers() {\n  return (\n    <tr>\n      <TableHeader>key</TableHeader>\n      <TableHeader>blockHeight</TableHeader>\n      {type &&\n        type?.properties?.map((property) => (\n          <TableHeader key={property.name}>{property.name}</TableHeader>\n        ))}\n      <TableHeader>actions</TableHeader>\n    </tr>\n  );\n}\n\nfunction Row({ key, data }) {\n  const thing = JSON.parse(data);\n  const properties = thing.data;\n  if (typeof properties === \"object\") {\n    return (\n      <>\n        <TableCell>{key}</TableCell>\n        <TableCell>{JSON.stringify(properties)}</TableCell>\n        <TableCell>\n          <Button onClick={() => handleView(key, data)}>view</Button>\n          <Button onClick={() => handleDelete(key)}>delete</Button>\n        </TableCell>\n      </>\n    );\n  } else {\n  }\n}\n\nfunction Rows() {\n  const things = Social.get(\"efiz.near/thing/**\");\n  if (things) {\n    const keys = Object.keys(things);\n    return keys.map((t) => (\n      <tr key={t}>\n        <Row key={t} data={things[t]} />\n      </tr>\n    ));\n  } else {\n    return <p>Nothing found</p>;\n  }\n}\n\nreturn (\n  <>\n    {state.showModal ? (\n      <>\n        <Button\n          onClick={() => State.update({ showModal: false, modalData: {} })}\n        >\n          close\n        </Button>\n        <Widget\n          src=\"efiz.near/widget/Every.Raw.Edit\"\n          props={{ value: JSON.parse(state.modalData.data) }}\n        />\n      </>\n    ) : (\n      <>\n        <Input\n          value={state.domainFilter}\n          onChange={(e) => State.update({ domainFilter: e.target.value })}\n          placeholder={\"action/domains\"}\n        />\n        <Input\n          value={state.keyFilter}\n          onChange={(e) => State.update({ keyFilter: e.target.value })}\n          placeholder={\"keys\"}\n        />\n        <Input\n          value={state.accountFilter}\n          onChange={(e) => State.update({ accountFilter: e.target.value })}\n          placeholder={\"accounts\"}\n        />\n        <Input\n          value={state.hashtagFilter}\n          onChange={(e) => State.update({ hashtagFilter: e.target.value })}\n          placeholder={\"hashtags\"}\n        />\n        <Select value={state.selectedType} onChange={handleTypeChange}>\n          <option value=\"\">Select a type</option>\n          {availableTypes.map((it) => (\n            <option value={it} key={it}>\n              {it}\n            </option>\n          ))}\n        </Select>\n        <Button onClick={executeQuery}>query</Button>\n        <Table>\n          <thead>\n            <Headers />\n          </thead>\n          <tbody>\n            <Rows />\n          </tbody>\n        </Table>\n      </>\n    )}\n  </>\n);\n", "metadata": {"platform": "Components.gg"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/Dashboard", "fact_widget_deployments_id": "68e603b10576ac754ab31943fd762823", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 102}