{"tx_hash": "DW1wxcLkYnceESTUG468qxrpniJLtK5xbgbozTfZx31b", "action_id_social": "A6hxFUPwKSptNwdxXuZ4HYrEqes7dsykudzWMdNFfELQ-0-widget", "block_id": 111180672, "block_timestamp": "2024-01-24T06:26:58.852Z", "signer_id": "efiz.near", "widget_name": "AbstractionHacks.Submit", "source_code": "/**\n * build box submit hackathon\n * or submit project to whatever hackathon is main\n */\n\nconst Root = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Header = styled.h1`\n  font-size: 24px;\n  margin-bottom: 10px;\n`;\n\nconst Subheader = styled.p`\n  font-size: 16px;\n  color: #555;\n  margin-bottom: 20px;\n`;\n\nconst FormContainer = styled.div`\n  width: 80%;\n  max-width: 600px;\n`;\n\nconst FormGroup = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n  display: block;\n  margin-bottom: 8px;\n`;\n\nconst Subtext = styled.p`\n  font-size: 12px;\n  color: #888;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 10px;\n  margin-top: 5px;\n  box-sizing: border-box;\n`;\n\nconst Textarea = styled.textarea`\n  width: 100%;\n  padding: 10px;\n  margin-top: 5px;\n  box-sizing: border-box;\n`;\n\nconst CheckboxGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst CheckboxLabel = styled.label`\n  margin-right: 15px;\n`;\n\nconst CheckBox = styled.input`\n  margin-right: 5px;\n`;\n\nconst ConsentContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst ConsentCheckbox = styled.input`\n  margin-right: 5px;\n`;\n\nconst ConsentLabel = styled.label`\n  font-size: 14px;\n`;\n\nconst SubmitButton = styled.button`\n  background-color: #4caf50;\n  color: white;\n  padding: 10px 15px;\n  font-size: 16px;\n  border: none;\n  cursor: pointer;\n  border-radius: 5px;\n\n  &:hover {\n    background-color: #45a049;\n  }\n`;\n\nconst [title, setTitle] = useState(\"\");\nconst [description, setDescription] = useState(\"\");\nconst [tracks, setTracks] = useState([]);\nconst [teammates, setTeammates] = useState(\"\");\nconst [projectLink, setProjectLink] = useState(\"\");\nconst [demoLink, setDemoLink] = useState(\"\");\nconst [contactInfo, setContactInfo] = useState(\"\");\nconst [consentChecked, setConsentChecked] = useState(false);\nconst [referrer, setReferrer] = useState(\"\");\n\nconst handleCheckboxChange = (track) => {\n  if (tracks.includes(track)) {\n    setTracks(tracks.filter((t) => t !== track));\n  } else {\n    setTracks([...tracks, track]);\n  }\n};\n\nconst normalize = (v) => {\n  // snag from devhub\n};\n\nconst handleSubmit = () => {\n  if (contactInfo && consentChecked) {\n    const projectPath = `${context.accountId}/every/project/${normalize(\n      title\n    )}`;\n    const notes = \"\"; // what I learned\n    // Add your submission logic here\n    console.log(\"Form submitted:\", {\n      title,\n      description,\n      tracks,\n      teammates,\n      projectLink,\n      demoLink,\n      contactInfo,\n    });\n\n    Social.set({\n      post: {\n        main: JSON.stringify({\n          text: `I've just submitted my project to abstraction hacks #abstraction #hack #build #everything\\n\\n[EMBED](buildbox.near/widget/embed?project=${projectPath})\\n\\n ${notes}`,\n          image: \"\",\n          type: \"md\",\n          metadata: {},\n        }),\n      },\n      every: {\n        // it's like we create a project and a submission at the same time\n        project: {\n          \"my-project\": {\n            // normalized title?\n            \"\": JSON.stringify({\n              tracks,\n              teammates,\n              projectLink,\n              demoLink,\n              contactInfo,\n              repository,\n            }),\n            metadata: {\n              title,\n              description,\n              image,\n              backgroundImage,\n              category: \"\", // this would be nice to be a thing stored somewhere\n              type: \"every.near/type/project\", // this is type stored on chain, defines stringified JSON\n              tags: {},\n            },\n          },\n        },\n      },\n      buildbox: {\n        hackathon: {\n          \"abstraction-hacks-W2024\": {\n            submission: {\n              \"----every/project----\": \"\", // get from community voice, creates ID from accountId + project name\n            },\n          },\n        },\n      },\n    });\n  } else {\n    // TODO show error\n    // \"Please provide your Personal Contact Info and consent to submit.\"\n  }\n};\n\nreturn (\n  <Root>\n    <Header>Submit Project: Abstraction Hacks</Header>\n    <Subheader>\n      Post your submission for Abstraction Hacks. Add a link to your component,\n      GitHub, and tag your team members. On a checklist, indicate which tracks\n      you are opt-in for.\n    </Subheader>\n\n    <FormContainer>\n      <FormGroup>\n        <Label>Title</Label>\n        <Subtext>{/* Populate subtext here */}</Subtext>\n        <Input\n          type=\"text\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n      </FormGroup>\n\n      <FormGroup>\n        <Label>Description</Label>\n        <Subtext>{/* Populate subtext here */}</Subtext>\n        <Textarea\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n        />\n      </FormGroup>\n\n      <FormGroup>\n        <Label>Tracks</Label>\n        <Subtext>Check the tracks you are opting in for</Subtext>\n        <CheckboxGroup>\n          {[\n            \"Pagoda's Chain Signatures\",\n            \"General Prize\",\n            \"Keypom\",\n            \"Metatransactions\",\n            \"Abstraction on BOS\",\n            \"Mintbase\",\n            \"Postlock Bounty\",\n            \"NEAR Balkans\",\n          ].map((track) => (\n            <CheckboxLabel key={track}>\n              <CheckBox\n                type=\"checkbox\"\n                checked={tracks.includes(track)}\n                onChange={() => handleCheckboxChange(track)}\n              />\n              {track}\n            </CheckboxLabel>\n          ))}\n        </CheckboxGroup>\n      </FormGroup>\n\n      <FormGroup>\n        <Label>Teammates</Label>\n        <Subtext>@ the near addresses of your teammates</Subtext>\n        <Input\n          type=\"text\"\n          value={teammates}\n          onChange={(e) => setTeammates(e.target.value)}\n        />\n      </FormGroup>\n\n      <FormGroup>\n        <Label>Project Link</Label>\n        <Subtext>Put a URL of your project</Subtext>\n        <Input\n          type=\"text\"\n          value={projectLink}\n          onChange={(e) => setProjectLink(e.target.value)}\n        />\n      </FormGroup>\n\n      <FormGroup>\n        <Label>Demo Link</Label>\n        <Subtext>Put a URL of your demo/pitch</Subtext>\n        <Input\n          type=\"text\"\n          value={demoLink}\n          onChange={(e) => setDemoLink(e.target.value)}\n        />\n      </FormGroup>\n      <FormGroup>\n        <Label>Personal Contact Info</Label>\n        <Subtext>Email/Telegram</Subtext>\n        <Input\n          type=\"text\"\n          value={contactInfo}\n          onChange={(e) => setContactInfo(e.target.value)}\n        />\n      </FormGroup>\n\n      <FormGroup>\n        <Label>How did you hear about this hackathon?</Label>\n        <Subtext>Developer DAO, 100x Devs, Build DAO, Twitter, ...</Subtext>\n        <Input\n          type=\"text\"\n          value={referrer}\n          onChange={(e) => setReferrer(e.target.value)}\n        />\n      </FormGroup>\n\n      <ConsentContainer>\n        <ConsentCheckbox\n          type=\"checkbox\"\n          checked={consentChecked}\n          onChange={() => setConsentChecked(!consentChecked)}\n        />\n        <ConsentLabel>\n          I consent to my personal contact info being saved in the social.near\n          contract\n        </ConsentLabel>\n      </ConsentContainer>\n      <SubmitButton\n        onClick={handleSubmit}\n        disabled={!contactInfo || !consentChecked}\n      >\n        Submit\n      </SubmitButton>\n    </FormContainer>\n  </Root>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/AbstractionHacks.Submit", "fact_widget_deployments_id": "33cc1857245f752567df68d7acfe89e4", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}