{"tx_hash": "92Z1s4Fwrj4Rrcuix2Q7QmBY3t7hNC4moyT3sMoT7JhP", "action_id_social": "AzQLJhbcxVydipYQRdFU2gypNa15rNfVYPGA7nZQe3JS-0-widget", "block_id": 94214735, "block_timestamp": "2023-06-15T02:55:10.656Z", "signer_id": "efiz.near", "widget_name": "every.post", "source_code": "const data = props.data;\n\nconst domainKeyPairs = data.domainKeyPairs;\nconst typeWhitelist = data.typeWhitelist;\nconst hashtagWhitelist = data.hashtagWhitelist;\nconst hashtagBlacklist = data.hashtagBlacklist;\nconst accountWhitelist = data.accountWhitelist;\nconst accountBlacklist = data.accountBlacklist;\nconst feedOrder = data.feedOrder || \"desc\";\n\nif (hashtagBlacklist.length) {\n  hashtagBlacklist = hashtagBlacklist.map((it) => it.toLowerCase());\n}\n\nlet index = [];\nconst options = {\n  limit: 10,\n  order: feedOrder,\n  accountId: accountWhitelist.length ? accountWhitelist : undefined,\n};\n// posts indexed via a hashtag are saved differently\n// than posts indexed via a domain/action\nif (hashtagWhitelist.length) {\n  // get all posts saved under the hashtags\n  // and we will filter domains and keys later\n  index = hashtagWhitelist.map((it) => ({\n    action: \"hashtag\",\n    key: it.toLowerCase(),\n    options,\n  }));\n} else {\n  // else, get all posts saved under the domain/action key pairs\n  index = domainKeyPairs?.map((it) => ({\n    action: it.domain,\n    key: it.key,\n    options,\n  }));\n}\n\nconst Post = styled.div`\n  border-bottom: 1px solid #eceef0;\n  padding: 24px 0 12px;\n\n  @media (max-width: 1200px) {\n    padding: 12px 0 0;\n  }\n`;\n\nfunction extractPath(a) {\n  let path;\n  if (hashtagWhitelist.length) {\n    // May want to revisit this again\n    // The path doesn't represent where this came from\n    // For example, a comment is indexed under the parent post's key\n    // but is saved under a regular post/comment path\n    path = a.value.path;\n  } else {\n    path = `${a.accountId}/${a.action}/${a.key}`;\n  }\n  return path;\n}\n\nconst extractHashtags = (text) => {\n  const hashtagRegex = /#(\\w+)/gi;\n  hashtagRegex.lastIndex = 0;\n  const hashtags = new Set();\n  for (const match of text.matchAll(hashtagRegex)) {\n    if (\n      !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n      !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length))\n    ) {\n      hashtags.add(match[1].toLowerCase());\n    }\n  }\n  return [...hashtags];\n};\n\nconst renderItem = (a) => {\n  // Filter out post if account is in blacklist\n  if (accountBlacklist.length && accountBlacklist.includes(a.accountId)) {\n    return <></>;\n  }\n\n  const path = extractPath(a);\n  const blockHeight = a.blockHeight;\n  // Filter out post if type is not in whitelist\n  if (hashtagWhitelist.length) {\n    // although you can't really do this for hashtags... cuz the type is always \"social\"\n    // so we're just gonna return for now...\n    return (\n      <Widget\n        src=\"every.near/widget/every.post.view\"\n        props={{\n          path,\n          blockHeight: a.blockHeight,\n        }}\n      />\n    );\n  } else {\n    if (typeWhitelist.includes(a.value.type)) {\n      const post = Social.get(path, blockHeight);\n      // Filter out post if it contains a blacklisted hashtag\n      // (only works for type md)\n      if (hashtagBlacklist.length && a.value.type === \"md\") {\n        // extractHashtags from the text\n        // if hashtags equal the blacklist, then don't show\n        if (post) {\n          const content = JSON.parse(post).text;\n          const hashtags = extractHashtags(content);\n          // return <p>{JSON.stringify(hashtags)}</p>;\n          const val = hashtagBlacklist.some((item) => hashtags.includes(item));\n          if (val) {\n            return <></>;\n          }\n        }\n      }\n      return (\n        <Widget\n          src=\"every.near/widget/every.post.view\"\n          props={{\n            path,\n            blockHeight: a.blockHeight,\n          }}\n        />\n      );\n    }\n  }\n};\n\nreturn (\n  <Widget src=\"mob.near/widget/MergedIndexFeed\" props={{ index, renderItem }} />\n);\n", "metadata": null, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/every.post", "fact_widget_deployments_id": "a1f9c48aa62d99ef1f56865e37b07c35", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}