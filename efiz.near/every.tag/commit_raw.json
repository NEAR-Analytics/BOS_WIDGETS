{"tx_hash": "BKb4z7kzXgt4KQCYGHdNaQSzdbPn1ASjf9gbFk6i8Pgi", "action_id_social": "CgDTDQNmScAF9EF3MGT8tXsoFGucwTaNj1GJDNaB2VBm-0-widget", "block_id": 95480319, "block_timestamp": "2023-07-01T20:39:41.265Z", "signer_id": "efiz.near", "widget_name": "every.tag", "source_code": "const tagsPattern = props.tagsPattern ?? \"*/profile/tags/*\";\nconst placeholder = props.placeholder ?? \"Tags\";\nconst initialTagsObject = props.initialTagsObject || {};\n\nconst tagsObject = Social.keys(tagsPattern, \"final\");\n\nif (tagsObject === null) {\n  return \"Loading\";\n}\n\nconst normalizeTag = (tag) =>\n  tag\n    .replaceAll(/[- \\.]/g, \"_\")\n    .replaceAll(/[^\\w]+/g, \"\")\n    .replaceAll(/_+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\")\n    .toLowerCase()\n    .trim(\"-\");\n\nconst tagsCount = {};\n\nconst processTagsObject = (obj) => {\n  Object.entries(obj).forEach((kv) => {\n    if (typeof kv[1] === \"object\") {\n      processTagsObject(kv[1]);\n    } else {\n      const tag = normalizeTag(kv[0]);\n      tagsCount[tag] = (tagsCount[tag] || 0) + 1;\n    }\n  });\n};\n\nconst getTags = () => {\n  processTagsObject(tagsObject);\n  const tags = Object.entries(tagsCount);\n  tags.sort((a, b) => b[1] - a[1]);\n  return tags.map((t) => ({\n    name: t[0],\n    count: t[1],\n  }));\n};\n\nif (!state.allTags) {\n  initState({\n    allTags: getTags(),\n    tags: Object.keys(initialTagsObject).map((tag) => ({\n      name: normalizeTag(tag),\n    })),\n    originalTags: Object.fromEntries(\n      Object.keys(initialTagsObject).map((tag) => [tag, null])\n    ),\n    id: `tags-selector-${Date.now()}`,\n    name: props.name ?? \"\",\n  });\n}\n\nconst setTags = (tags) => {\n  tags = tags.map((o) => {\n    o.name = normalizeTag(o.name);\n    return o;\n  });\n  State.update({ tags });\n  if (props.setTagsObject) {\n    props.setTagsObject(\n      Object.assign(\n        {},\n        state.originalTags,\n        Object.fromEntries(tags.map((tag) => [tag.name, \"\"]))\n      )\n    );\n  }\n};\n\nconst onChangeName = (name) => {\n  State.update({\n    name,\n  });\n};\n\nconst filteredTags = state.allTags.filter((tag) =>\n  tag.name.includes(state.name)\n);\n\nconst total_tags = state.allTags.length;\n\nconst filtered_tags = filteredTags.length;\n\nconst Container = styled.div`\n  margin: 1rem;\n  font-family: Arial, sans-serif;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 2rem;\n  border: 1px solid #ccc;\n  padding: 0.5rem;\n  border-radius: 5px;\n`;\n\nconst Input = styled.input`\n  flex-grow: 1;\n  margin-right: 1rem;\n  padding: 0.5rem;\n  border: none;\n`;\n\nconst Count = styled.span`\n  background-color: #f0f0f0;\n  padding: 0.5rem;\n  border-radius: 5px;\n`;\n\nconst TagContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n`;\n\nconst TagName = styled.span`\n  font-weight: bold;\n`;\n\nreturn (\n  <Container>\n    <InputContainer>\n      <Input\n        placeholder=\"search...\"\n        type=\"text\"\n        value={state.name}\n        onChange={(e) => onChangeName(e.target.value)}\n      />\n      <Count>{state.name ? filtered_tags : total_tags}</Count>\n    </InputContainer>\n    {filteredTags?.map((tag, j) => (\n      <TagContainer>\n        <TagName>{tag.name}</TagName>\n        <p>{tag.count}</p>\n      </TagContainer>\n    ))}\n  </Container>\n);\n// add filter by DAOs with profiles\n", "metadata": null, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/every.tag", "fact_widget_deployments_id": "55166e5ad123f623a20e5ff7abd4809a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}