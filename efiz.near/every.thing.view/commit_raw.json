{"tx_hash": "54jHuew2HV3rcpjTqNrYKzMg5Wu4jLeGrf6SgRuzNCBW", "action_id_social": "8whrR887YN2gnicPq3wN7WEhyAnMRuLH6KeBY8C9cYSQ-0-widget", "block_id": 95110546, "block_timestamp": "2023-06-26T23:59:30.175Z", "signer_id": "efiz.near", "widget_name": "every.thing.view", "source_code": "const path = props.path; // every piece of data on social contract has a path\nconst blockHeight = props.blockHeight || \"final\"; // and a blockHeight (~version)\n\n// split the path\nconst parts = path.split(\"/\");\nconst creatorId = parts[0];\n\nlet type;\nif (parts.length === 1) {\n  // every root of a path is an account\n  type = \"account\";\n} else {\n  // otherwise the \"standard\" is the type (widget, post, type, thing...)\n  // for thing, we'll extract the actual \"Type\" later\n  type = parts[1];\n}\n\nconst Container = styled.div`\n  border: 1px solid #ccc;\n  height: fit-content;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  border-bottom: 1px solid #ccc;\n`;\n\nconst IconBox = styled.div`\n  font-family: \"Times New Roman\";\n  font-size: 2em;\n  line-height: 1.25;\n  font-weight: 400;\n  cursor: pointer;\n`;\n\nconst Content = styled.div`\n  padding: 1px;\n  min-height: 10px;\n`;\n\nconst Button = styled.button`\n  text-transform: lowercase !important;\n`;\n\nconst ButtonRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: flex-end;\n  gap: 4px;\n`;\n\n// DROPDOWN //\n\nfunction Modifier() {\n  const renderIcon = () => {\n    const icon =\n      Social.get(`${context.accountId}/settings/every/thing/icon`) ||\n      `<svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"black\"\n        width=\"24px\"\n        height=\"24px\"\n      >\n        <circle cx=\"12\" cy=\"12\" r=\"8\" />\n      </svg>`;\n    return <Widget code={`return (${icon})`} />;\n  };\n\n  return (\n    <Widget\n      src=\"efiz.near/widget/Common.Dropdown\"\n      props={{\n        renderIcon: renderIcon,\n        elements: [],\n      }}\n    />\n  );\n}\n\nfunction Thing() {\n  // Renders the path according to type\n  switch (type) {\n    case \"widget\": {\n      // TODO: Verify that props are passed\n      // How to allow user to lock at a specific blockHeight?\n      return <Widget src={path} props={props} />;\n    }\n    case \"thing\": {\n      // get the thing data\n      const thing = JSON.parse(Social.get(path, blockHeight) || \"null\");\n      type = thing.type || null;\n      // get the type data\n      const typeObj = JSON.parse(Social.get(type, blockHeight) || \"null\");\n      if (typeObj === null) {\n        console.log(\n          `edge case: thing ${path} had an invalid type: ${thingType}`\n        );\n      }\n      // determine the widget to render this thing\n      const widgetSrc = thing.template?.src || typeObj?.widgets?.view;\n      // Template\n      return (\n        <Widget\n          src={widgetSrc}\n          props={{ data: thing.data, path, blockHeight }}\n        />\n      );\n    }\n    case \"post\": {\n      // TODO: Can we make this more efficient by checking the post type\n      // potentially passing in the template for that thing?\n      // Or maybe not...\n      return (\n        <Widget\n          src=\"every.near/widget/every.post.view\"\n          props={{\n            path,\n            blockHeight: a.blockHeight,\n          }}\n        />\n      );\n    }\n    case \"account\": {\n      return <Widget src=\"efiz.near/widget/Tree\" props={{ rootPath: path }} />;\n    }\n    case \"settings\": {\n      // Standardize path to {accountId}/settings/**\n      parts.splice(2);\n      parts.push(\"**\");\n      path = parts.join(\"/\");\n      return (\n        <Widget\n          src=\"efiz.near/widget/Every.Setting\"\n          props={{ path, blockHeight }}\n        />\n      );\n    }\n  }\n  // DEFAULT:\n  return <p>The type: {type} is not yet supported.</p>;\n}\n\nreturn (\n  <Container id={path}>\n    <Header>\n      <ButtonRow>\n        <Modifier />\n      </ButtonRow>\n    </Header>\n    <Content>\n      <Thing />\n    </Content>\n  </Container>\n);\n", "metadata": null, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/every.thing.view", "fact_widget_deployments_id": "1a4228cf9d5638bb848ea9d9713c6580", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 19}