{"tx_hash": "B8q1dSo5T1jBs7YD5M8khgET6jqEFdkC2V1kLjYvqmDS", "action_id_social": "5Gq2n6rGDvSE3fg5BRazz8FPXeGzcoCp8c8bDJ5Sr3EN-0-widget", "block_id": 95206718, "block_timestamp": "2023-06-28T06:07:54.304Z", "signer_id": "efiz.near", "widget_name": "create", "source_code": "const item = props.item;\nconst onChange = props.onChange;\n\nconst Input = styled.input`\n  height: 30px;\n`;\n\nconst Select = styled.select`\n  height: 30px;\n`;\n\nconst Button = styled.button`\n  text-transform: lowercase !important;\n  padding: 8px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Label = styled.label`\n`;\n\nState.init({\n  ...item.value,\n});\n\nconst DynamicInput = ({ type, onChange, value, placeholder }) => {\n  if (type === \"boolean\") {\n    return (\n      <Select onChange={onChange} value={value}>\n        <option value=\"true\">true</option>\n        <option value=\"false\">false</option>\n      </Select>\n    );\n  } else {\n    return (\n      <Input\n        type={type}\n        onChange={onChange}\n        value={value}\n        placeholder={placeholder}\n      />\n    );\n  }\n};\n\n// Primitive checks\nif ([\"string\", \"number\", \"date\", \"time\", \"boolean\"].includes(item.type)) {\n  return (\n    <DynamicInput\n      type={item.type === \"string\" ? \"text\" : item.type}\n      onChange={(e) => onChange({ [item.name]: e.target.value })}\n      value={state[item.name] || \"\"}\n      placeholder={item.name}\n    />\n  );\n}\n\n// On-chain Type\nconst type = JSON.parse(Social.get(item.type, \"final\") || \"null\");\nconst properties = type.properties || [];\nconst createWidgetSrc = type.widgets?.create;\n\nconst handleInputChange = (name, value) => {\n  State.update({ [name]: value });\n  if (props.onChange) {\n    props.onChange({ [name]: value });\n  }\n};\n\nfunction Property({ property, value }) {\n  // If property is multiple values\n  if (property.isMulti === \"true\") {\n    // Build an array (recursively calls this Widget)\n    return (\n      <Widget\n        src=\"efiz.near/widget/every.array.build\"\n        props={{\n          item: { ...property, value },\n          onChange: (val) => handleInputChange(property.name, val),\n        }}\n      />\n    );\n  }\n  // Else check for primitives\n  if ([\"string\", \"number\", \"date\", \"time\", \"boolean\"].includes(property.type)) {\n    return (\n      <DynamicInput\n        type={property.type === \"string\" ? \"text\" : property.type}\n        onChange={(e) => handleInputChange(property.name, e.target.value)}\n        value={state[property.name] || \"\"}\n        placeholder={property.name}\n      />\n    );\n  } else {\n    // This requires a specific type of creator\n    // (like image upload)\n    // TODO: I don't think this does what I want it to yet...\n    const propertyType = JSON.parse(\n      Social.get(property.type, \"final\") || \"null\"\n    );\n    const widgetSrc = propertyType?.widgets?.create;\n    // it would be great to modify the onChange function\n    return (\n      <Widget\n        src={widgetSrc}\n        props={{ onChange: (e) => handleInputChange(property.name, e) }}\n      />\n    );\n  }\n}\n\nreturn (\n  <Container>\n    {createWidgetSrc ? (\n      <>\n        <Widget src={createWidgetSrc} props={{ onChange }} />\n      </>\n    ) : (\n      <>\n        {properties?.map((property) => (\n          <div key={property.name}>\n            <Label>{property.name}</Label>\n            <Row>\n              <Property property={property} value={item.value[property.name]} />\n            </Row>\n          </div>\n        ))}\n      </>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/create", "fact_widget_deployments_id": "cb5a07186c4c39578d98816f5d1c1e66", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 26}