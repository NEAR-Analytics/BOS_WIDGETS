{"tx_hash": "E7Rn4RHeEo1ZxunSYdCa87nBygxLaiq5wgRL8C6sQom8", "action_id_social": "BKVbJAW5FftQUnQsGSCVcZSeJtn7x1AHnKy9e99EdB6j-0-widget", "block_id": 95145733, "block_timestamp": "2023-06-27T11:01:02.545Z", "signer_id": "efiz.near", "widget_name": "create", "source_code": "const item = props.item;\nconst onChange = props.onChange;\n\nconst Input = styled.input`\n  height: 30px;\n`;\n\nconst Select = styled.select`\n  height: 30px;\n`;\n\nconst Button = styled.button`\n  text-transform: lowercase !important;\n  padding: 8px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Label = styled.label`\n`;\n\nState.init({\n  ...item.value,\n});\n\n// Primitive checks\nif (item.type === \"string\") {\n  return <Input onChange={onChange} value={item.value} />;\n} else if (item.type === \"boolean\") {\n  return (\n    <Select onChange={onChange} value={item.value}>\n      <option value=\"true\">true</option>\n      <option value=\"false\">false</option>\n    </Select>\n  );\n} else if (item.type === \"number\") {\n  return <Input type=\"number\" onChange={onChange} value={item.value} />;\n} else if (item.type === \"date\" || item.type === \"time\") {\n  return <Input type={item.type} onChange={onChange} value={item.value} />;\n}\n\n// On-chain Type\nconst type = JSON.parse(Social.get(item.type, \"final\") || \"null\");\nconst properties = type.properties || [];\n\nconst handleInputChange = (name, value) => {\n  State.update({ [name]: value });\n  if (props.onChange) {\n    props.onChange({ [name]: value });\n  }\n};\n\nfunction Property({ property, value }) {\n  // If property is multiple values\n  if (property.isMulti === \"true\") {\n    // Build an array (recursively calls this Widget)\n    return (\n      <Widget\n        src=\"efiz.near/widget/every.array.build\"\n        props={{\n          item: { ...property, value },\n          onChange: (val) => handleInputChange(property.name, val),\n        }}\n      />\n    );\n  }\n  // Else check for primitives\n  if (property.type === \"string\") {\n    return (\n      <Input\n        onChange={(e) => handleInputChange(property.name, e.target.value)}\n        value={state[property.name] || \"\"}\n        placeholder={property.name}\n      />\n    );\n  } else if (property.type === \"date\" || property.type === \"time\") {\n    return (\n      <Input\n        type={property.type}\n        onChange={(e) => handleInputChange(property.name, e.target.value)}\n        value={state[property.name] || \"\"}\n        placeholder={property.name}\n      />\n    );\n  } else if (property.type === \"boolean\") {\n    return (\n      <Select\n        onChange={(e) => handleInputChange(property.name, e.target.value)}\n        value={state[property.name] || \"\"}\n      >\n        <option value=\"true\">true</option>\n        <option value=\"false\">false</option>\n      </Select>\n    );\n  } else if (property.type === \"number\") {\n    return (\n      <Input\n        type=\"number\"\n        onChange={(e) =>\n          handleInputChange(property.name, parseInt(e.target.value, 10))\n        }\n        value={state[property.name] || \"\"}\n        placeholder={property.name}\n      />\n    );\n  } else if (property.type === \"tags\") {\n    return (\n      <Widget\n        src=\"mob.near/widget/TagsEditor\"\n        props={{\n          initialTagsObject: state[property.name] || [],\n          tagsPattern: \"*/profile/tags/*\",\n          placeholder: \"\",\n          setTagsObject: (tags) => {\n            handleInputChange(property.name, tags);\n          },\n        }}\n      />\n    );\n  } else {\n    // This requires a specific type of creator\n    // (like image upload)\n    // TODO: I don't think this does what I want it to yet...\n    const propertyType = JSON.parse(\n      Social.get(property.type, \"final\") || \"null\"\n    );\n    const widgetSrc = propertyType?.widgets?.create;\n    // it would be great to modify the onChange function\n    return <Widget src={widgetSrc} onChange={onChange} />;\n  }\n}\n\nreturn (\n  <Container>\n    {properties?.map((property) => (\n      <div key={property.name}>\n        <Label>{property.name}</Label>\n        <Row>\n          <Property property={property} value={item.value[property.name]} />\n        </Row>\n      </div>\n    ))}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/create", "fact_widget_deployments_id": "8f45db245c4450a3c30b291cd7efde34", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 28}