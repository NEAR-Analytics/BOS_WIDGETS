{"tx_hash": "GzNr6uqXxhqNWaNe9Guf5iPUrvXjAuKeZdGcoqHW76cv", "action_id_social": "8k4s2BuvrWyXNMay2jmijNUB6XXR4dJDfpUt41nETXh5-0-widget", "block_id": 100023830, "block_timestamp": "2023-08-30T19:12:42.355Z", "signer_id": "efiz.near", "widget_name": "everything.sdk", "source_code": "const isPrimitiveType = (type) =>\n  [\"string\", \"number\", \"boolean\", \"date\", \"md\"].includes(type);\n\nconst isComplexType = (type) =>\n  Array.isArray(type)\n    ? \"typesArray\" // I don't know if we still need to handle this\n    : type === \"array\"\n    ? \"array\"\n    : typeof type === \"object\"\n    ? \"object\"\n    : typeof type === \"string\" && !isPrimitiveType(type)\n    ? \"custom\"\n    : null;\n\nconst getDefaultForPrimitive = (type, defaultValue) => {\n  if (defaultValue !== undefined) {\n    return defaultValue;\n  }\n  switch (type) {\n    case \"string\":\n      return \"\";\n    case \"number\":\n      return null; // should this be 0?\n    case \"boolean\":\n      return null; // do we want this to be false?\n    case \"date\":\n      return null; // do we want this to be today?\n    case \"md\":\n      return null;\n  }\n};\n\nconst typeToEmptyData = (typeDef) => {\n  const obj = {};\n\n  Object.keys(typeDef.properties).forEach((key) => {\n    const fieldSchema = typeDef.properties[key];\n    const type = fieldSchema.type;\n\n    if (isPrimitiveType(type)) {\n      obj[key] = getDefaultForPrimitive(type, fieldSchema.defaultValue);\n    } else if (isComplexType(type) === \"array\") {\n      obj[key] = fieldSchema.defaultValue ? [...fieldSchema.defaultValue] : [];\n    } else if (isComplexType(type) === \"object\") {\n      obj[key] = typeToEmptyData({ properties: type.properties });\n    } else {\n      console.log(\"edge case not handled for type: \" + type);\n      obj[key] = fieldSchema.defaultValue ?? null;\n    }\n  });\n\n  return obj;\n};\n\nfunction checkProps(props, typeDef, prefix) {\n  if (!prefix) {\n    prefix = \"\";\n  }\n  const missingProps = [];\n\n  for (const [key, value] of Object.entries(typeDef.properties)) {\n    const fullKey = prefix ? `${prefix}.${key}` : key;\n\n    if (!props.hasOwnProperty(key)) {\n      missingProps.push(`${fullKey}`);\n      continue;\n    }\n\n    const propValue = props[key];\n\n    if (value.type === \"object\" && value.properties) {\n      missingProps.push(...checkProps(propValue, value, fullKey));\n    }\n\n    if (value.validation && value.validation.required && propValue == null) {\n      missingProps.push(`${fullKey} (required)`);\n    }\n  }\n\n  return missingProps;\n}\n\nfunction MissingPropsWarning({ props, typeDef, WarningElement }) {\n  const missingProps = checkProps(props, typeDef);\n  return (\n    missingProps.length > 0 && (\n      <>\n        {WarningElement ? (\n          <WarningElement missingProps={missingProps} />\n        ) : (\n          <div\n            className=\"card border-warning mb-3 shadow\"\n            style={{ maxWidth: \"30rem\", margin: \"auto\" }}\n          >\n            <div className=\"card-header text-white bg-warning\">\n              <h4 className=\"card-title mb-0\">Attention!</h4>\n            </div>\n            <div className=\"card-body text-danger\">\n              <p className=\"card-text\">\n                There {missingProps.length === 1 ? \"is\" : \"are\"}{\" \"}\n                {missingProps.length} missing or invalid prop\n                {missingProps.length === 1 ? \"\" : \"s\"}:\n              </p>\n              <ul className=\"list-group list-group-flush\">\n                {missingProps.map((prop) => (\n                  <li key={prop} className=\"list-group-item\">\n                    <pre className=\"m-0\">{prop}</pre>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        )}\n      </>\n    )\n  );\n}\n\nreturn {\n  isPrimitiveType,\n  isComplexType,\n  getDefaultForPrimative,\n  typeToEmptyData,\n  checkProps,\n  MissingPropsWarning,\n};\n", "metadata": {}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/everything.sdk", "fact_widget_deployments_id": "903c21728de7236e1551728d0a65e419", "inserted_timestamp": "2023-08-30T21:19:11.961Z", "modified_timestamp": "2023-08-30T21:19:11.961Z", "__row_index": 0}