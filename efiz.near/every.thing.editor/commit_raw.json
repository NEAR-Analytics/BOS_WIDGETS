{"tx_hash": "8z2tMVBYMc9WqpVv6yPcdTJjNJw52y6wLeSRDnpUjgg6", "action_id_social": "8NNjkxCLmrHNJpahPo4oEmYKSCu2VEzN3S4P66KgZzR4-0-widget", "block_id": 97552831, "block_timestamp": "2023-07-28T19:37:43.663Z", "signer_id": "efiz.near", "widget_name": "every.thing.editor", "source_code": "const path = props.path;\nconst blockHeight = props.blockHeight || \"final\";\n\n// const jThing = Social.get(path, blockHeight);\n// const thing = JSON.parse(jThing);\n\n// const jType = Social.get(thing.type, \"final\");\n\n// const jWidget = Social.get(thing.template.src, \"final\");\n\nconst files = {\n  THING: {\n    path: \"efiz.near/thing/core\",\n    language: \"json\",\n    code: '{\"data\":{\"name\":\"elliot\\'s\",\"tagline\":\"everything\",\"isUnderConstruction\":\"false\",\"views\":[]},\"template\":{\"src\":\"efiz.near/widget/fun.template\"},\"type\":\"every.near/type/core\"}',\n  },\n  TYPE: {\n    path: \"every.near/type/core\",\n    language: \"json\",\n    code: '{\"properties\":[{\"name\":\"name\",\"type\":\"string\",\"required\":true},{\"name\":\"tagline\",\"type\":\"string\"},{\"name\":\"isUnderConstruction\",\"type\":\"boolean\",\"isMulti\":false},{\"name\":\"views\",\"type\":\"efiz.near/type/core.view\",\"isMulti\":\"true\"}],\"widgets\":{\"view\":\"efiz.near/widget/view\"}}',\n  },\n  WIDGET: {\n    path: \"efiz.near/widget/view\",\n    language: \"javascript\",\n    code: 'const data = props.data;\\nconst path = props.path;\\n\\nconst Header = styled.div`\\n  height: 40px;\\n  width: 100%;\\n  display: flex;\\n  justify-content: flex-end;\\n  align-items: center;\\n  gap: 4px;\\n`;\\n\\nconst Container = styled.div`\\n  width: 100%;\\n  height: 30vh;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  background: rgb(0,212,255);\\nbackground: radial-gradient(circle, rgba(0,212,255,1) 31%, rgba(9,9,121,1) 93%, rgba(11,17,18,1) 95%);\\n\\n  @media (max-width: 767px) {\\n    justify-content: flex-start;\\n  }\\n`;\\n\\nconst InnerContainer = styled.div`\\n  width: 80%;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  max-width: 535px;\\n\\n  @media (max-width: 767px) {\\n    width: 100%;\\n  }\\n`;\\n\\nconst Row = styled.div`\\n  display: flex;\\n  flex-direction: row;\\n  width: 100%;  \\n//   border: 2px solid orange;\\n\\n  @media (max-width: 767px) {\\n    flex-direction: column;\\n  }\\n`;\\n\\nconst Column = styled.div`\\n  flex: 1;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  flex-direction: column;\\n//   border: 2px solid green;\\n  padding: 20px;\\n\\n  @media (max-width: 767px) {\\n    border-top: none;\\n    padding: 10px;\\n  }\\n`;\\n\\nconst IconBox = styled.div`\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  margin-top: 10px;\\n  \\n\\n  svg {\\n    width: 50px;\\n    height: 50px;\\n  }\\n\\n  @media (max-width: 767px) {\\n    margin-top: 0;\\n    svg {\\n      width: 40px;\\n      height: 40px;\\n    }\\n  }\\n`;\\n\\nconst ActionButton = styled.button`\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  cursor: pointer;\\n`;\\n\\nconst Button = styled.button`\\n  text-transform: lowercase !important;\\n`;\\n\\nconst ButtonRow = styled.div`\\n    display: flex;\\n    flex-direction: row;\\n    gap: 8px;\\n`;\\n\\nconst Link = styled.a`\\n  text-decoration: none;\\n  color: inherit;\\n  cursor: pointer;\\n`;\\n\\nconst SubjectField = styled.input`\\n  font-size: 4em;\\n  line-height: 1.25;\\n  font-weight: 400;\\n  cursor: pointer;\\n  border: none;\\n  outline: none;\\n  background: none;\\n  width: 100%;\\n\\n  @media (max-width: 767px) {\\n    font-size: 1.5em;\\n  }\\n`;\\n\\nconst Title = styled.p`\\n  line-height: 1.25;\\n  font-weight: 400;\\n  font-size: 4em;\\n  margin-bottom: 0;\\n`;\\n\\nconst Subtitle = styled.p`\\n  line-height: 1.25;\\n  font-weight: 400;\\n  font-size: 2em;\\n  margin-left: 70px;\\n`;\\n\\nconst Text = styled.p`\\n  line-height: 1.25;\\n  font-weight: 400;\\n  font-size: 2em;\\n`;\\n\\nconst Subtext = styled.p`\\n  line-height: 1.25;\\n  font-weight: 400;\\n  font-size: 1em;\\n`;\\n\\nfunction Thing() {\\n  if (state.thingSrc) {\\n    return (\\n      <>\\n        <Widget\\n          src={\"every.near/widget/every.thing.view\"}\\n          props={{ path: state.thingSrc }}\\n        />\\n      </>\\n    );\\n  }\\n}\\n\\n// how can we have this be custom?\\n// settings/every/subject\\n\\nfunction handleInputChange(e) {\\n  State.update({\\n    path: e.target.value,\\n  });\\n}\\n\\nconst Grid = styled.div`\\n  display: grid;\\n  grid-template-columns: repeat(3, 1fr);\\n\\n  @media (hover: none) {\\n    grid-template-columns: repeat(1, 1fr);\\n  }\\n  padding: 20px;\\n`;\\n\\nfunction Edges() {\\n  const edges = Social.index(\"edge\", path);\\n\\n  if (!edges) {\\n    return <></>;\\n  }\\n\\n  return (\\n    <>\\n      {edges?.map((it) => {\\n        const parts = it.value.path?.split(\"/\");\\n        if (![\"core.feed\", \"community\"].includes(parts[2])) {\\n          return (\\n            <Button onClick={() => State.update({ thingSrc: it.value.path })}>\\n              {parts[2]}\\n            </Button>\\n          );\\n        }\\n      })}\\n    </>\\n  );\\n}\\n\\nreturn (\\n  <>\\n    <Container>\\n      <InnerContainer>\\n        <Row>\\n          <Column>\\n            <Title>{data.name}</Title>\\n            <Subtitle>{data.tagline}</Subtitle>\\n          </Column>\\n        </Row>\\n      </InnerContainer>\\n    </Container>\\n    {data.isUnderConstruction === \"true\" ? (\\n      <Widget\\n        src=\"efiz.near/widget/Every.Thing.View\"\\n        props={{ path: \"efiz.near/thing/under.construction\" }}\\n      />\\n    ) : null}\\n    <ButtonRow>\\n      <Edges />\\n    </ButtonRow>\\n    <>\\n      <Thing />\\n    </>\\n  </>\\n);',\n  },\n};\n\nState.init({\n  view: \"THING\",\n});\n\nconst Button = styled.button``;\n\nfunction onChange(e) {\n  State.update({\n    code: e.target.value,\n  });\n}\n\n// const parts = state.path.split(\"/\");\n\nreturn (\n  <div>\n    <div>\n      <Button onClick={() => State.update({ view: \"THING\" })}>thing</Button>\n      <Button onClick={() => State.update({ view: \"TYPE\" })}>type</Button>\n      <Button onClick={() => State.update({ view: \"WIDGET\" })}>widget</Button>\n    </div>\n    <Widget\n      src={\"efiz.near/widget/MonacoEditor\"}\n      props={{\n        path: files[state.view].path,\n        language: files[state.view].language,\n        code: files[state.view].code,\n        onChange: onChange,\n      }}\n    />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/every.thing.editor", "fact_widget_deployments_id": "18c2b158d25460db961cc5c6dbd2cf6e", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 27}