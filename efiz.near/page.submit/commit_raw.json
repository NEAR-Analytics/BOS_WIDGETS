{"tx_hash": "pRDVAawwMSMZeHqinzh4yzYnRtj9ej9NZNpm2bt3dKB", "action_id_social": "AZaaFKvzWR4SAu594RdjH9wU1JrThucKgkBbd2tPcLq8-0-widget", "block_id": 112023733, "block_timestamp": "2024-02-03T16:51:01.183Z", "signer_id": "efiz.near", "widget_name": "page.submit", "source_code": "// this is where you can create a hackathon\n\n// then you have people submit projects to the hackathon, but they create the project locally\n\nconst { normalize } = VM.require(\"buildbox.near/widget/utils.stringUtils\") || {\n  normalize: (s) => s,\n};\n\nconst app = props.app || \"buildbox\";\nconst type = props.type || \"project\";\n\nconst accountId = context.accountId;\n\nconst Root = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  background-color: #292320;\n  color: #fff;\n  gap: 5rem;\n\n  padding: 64px 80px;\n`;\n\nconst Header = styled.h1`\n  color: #fff;\n  font-size: 90px;\n  max-width: 900px;\n  font-style: normal;\n  text-align: left;\n  font-weight: 500;\n  line-height: 108px;\n  text-transform: lowercase;\n\n  @media screen and (max-width: 768px) {\n    font-size: 36px;\n    max-width: 70%;\n    line-height: 43px;\n  }\n`;\n\nconst Subheader = styled.p`\n  color: rgb(255, 255, 255);\n  font-size: 24px;\n  max-width: 800px;\n  text-align: left;\n  line-height: 36px;\n\n  @media screen and (max-width: 768px) {\n    font-size: 16px;\n    line-height: 24px;\n  }\n`;\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  gap: 2rem;\n\n  @media screen and (max-width: 768px) {\n    gap: 1rem;\n  }\n`;\n\nconst FormContainer = styled.div`\n  width: 100%;\n  max-width: 600px;\n`;\n\nconst FormGroup = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n  display: block;\n  margin-bottom: 8px;\n  font-size: 24px;\n`;\n\nconst Subtext = styled.p`\n  font-size: 12px;\n  color: #c0c0c0;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 10px;\n  margin-top: 5px;\n  box-sizing: border-box;\n  background-color: #292320;\n  color: #fff;\n  border: 1px solid #fff;\n  outline: none;\n  border-radius: 0.5rem;\n`;\n\nconst Textarea = styled.textarea`\n  width: 100%;\n  padding: 10px;\n  margin-top: 5px;\n  box-sizing: border-box;\n  background-color: #292320;\n  color: #fff;\n  border: 1px solid #fff;\n  outline: none;\n  border-radius: 0.5rem;\n`;\n\nconst CheckboxGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst CheckboxLabel = styled.label`\n  margin-right: 15px;\n  color: #fff;\n`;\n\nconst CheckBox = styled.input`\n  margin-right: 5px;\n`;\n\nconst ConsentContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  margin-bottom: 1rem;\n`;\n\nconst ConsentCheckbox = styled.input`\n  margin-right: 5px;\n  margin-top: 5px;\n`;\n\nconst ConsentLabel = styled.label`\n  font-size: 14px;\n`;\n\nconst SubmitButton = styled.button`\n  color: #000;\n  cursor: pointer;\n  display: inline-block;\n  font-size: 18px;\n  box-shadow: 5px 6px 0 0 #000;\n  font-style: normal;\n  transition: 0.3s;\n  font-weight: 500;\n  border-color: #000;\n  border-width: 1px;\n  border-radius: 0;\n  padding: 16px 24px;\n  background-color: #ffcf77;\n\n  &:hover {\n    opacity: 0.5;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst [title, setTitle] = useState(\"\");\nconst [description, setDescription] = useState(\"\");\nconst [tracks, setTracks] = useState([]);\nconst [teammates, setTeammates] = useState(\"\");\nconst [projectLink, setProjectLink] = useState(\"\");\nconst [demoLink, setDemoLink] = useState(\"\");\nconst [contactInfo, setContactInfo] = useState(\"\");\nconst [consentChecked, setConsentChecked] = useState(false);\nconst [referrer, setReferrer] = useState(\"\");\nconst [learning, setLearning] = useState(\"\");\n\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\nconst [isEmailValid, setIsEmailValid] = useState(true);\n\nfunction isValidEmail(email) {\n  return emailRegex.test(email);\n}\n\nuseEffect(() => {\n  setIsEmailValid(isValidEmail(contactInfo));\n  if (contactInfo === \"\") {\n    setIsEmailValid(true);\n  }\n}, [contactInfo]);\n\nconst handleCheckboxChange = (track) => {\n  if (tracks.includes(track)) {\n    setTracks(tracks.filter((t) => t !== track));\n  } else {\n    setTracks([...tracks, track]);\n  }\n};\n\nconst handleSubmit = () => {\n  const id = normalize(title);\n  const path = `${context.accountId}/${app}/${type}/${id}`;\n\n  Social.set(\n    {\n      post: {\n        main: JSON.stringify({\n          text: `I've just submitted a ${type} to Abstraction Hacks! #build #${type} #abstraction #hack \\n\\n[EMBED](${path})\\n\\n`,\n          image: \"\",\n          type: \"md\",\n        }),\n      },\n      index: {\n        post: JSON.stringify({ key: \"main\", value: { type: \"md\" } }),\n      },\n      buildbox: {\n        [type]: {\n          [id]: {\n            \"\": JSON.stringify({\n              title,\n              description,\n              tracks,\n              teammates,\n              projectLink,\n              demoLink,\n              contactInfo,\n              referrer,\n              learning,\n            }),\n            metadata: {\n              name: title,\n              description,\n              image,\n              backgroundImage,\n              type: `buildbox.near/type/${type}`, // for later\n              tags,\n            },\n          },\n          hackathon: {\n            abstractionhacks: {\n              submissions: {\n                [`${context.accountId}-${normalize(title)}`]: \"\",\n              },\n            },\n          },\n        },\n      },\n    },\n    {\n      force: true,\n      onCommit: (v) => console.log(\"onCommit\", v),\n      onCancel: (v) => console.log(\"onCancel\", v),\n    }\n  );\n};\n\nconst pageDescription = `Congratulations for making it here! Please be sure to fill out all of the following fields in the suggested format so we can review them in the most efficient way.\n\nTo be eligible for the Abstraction Hacks prize, you must:\n\n- Submit to only one team for General Prize. For Mintbase, Potlock you can submit multiple.\n- Have a public GitHub repository with a README.md file.\n- Include a video to a demo in your README.md file.\n- If submitting a previous project, you must have made significant changes during the hackathon.\n- Specify which bounties you are tackling\n\n**Additional Details**\n\n- Submit to only one team: You may not submit the same project to multiple teams.\n- Public GitHub repository: Your GitHub repository must be public so that the judges can view your code.\n- README.md file: Your README.md file should include a description of your project, how to run it, and any other relevant information.\n- Video to a demo: Your video demo should show your project in action.\n- Significant changes: If submitting a previous project, you must have made significant changes during the hackathon and provide proof of what you changed during the hackathon. This could includes adding dates and timestamps of any code written before and after the hackathon (ie: adding new features, improving the performance of your code, or fixing bugs).`;\n\nreturn (\n  <Root>\n    <HeaderContainer>\n      <Header>\ud83d\udce6 Abstraction Hacks Projects Submission</Header>\n      <Subheader>\n        <Markdown text={pageDescription} />\n      </Subheader>\n    </HeaderContainer>\n    <FormContainer>\n      <FormGroup>\n        <Label htmlFor=\"title\">\n          Title<span className=\"text-danger\">*</span>\n        </Label>\n        <Subtext>What do you want to call this project?</Subtext>\n        <Input\n          name=\"title\"\n          id=\"title\"\n          type=\"text\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n      </FormGroup>\n\n      <FormGroup>\n        <Label htmlFor=\"description\">\n          Description<span className=\"text-danger\">*</span>\n        </Label>\n        <Subtext>\n          1-2 paragraphs explaining what did you build and what problem(s) does\n          it solve?\n        </Subtext>\n        <Textarea\n          name=\"description\"\n          id=\"description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n        />\n      </FormGroup>\n\n      <FormGroup>\n        <Label>\n          Tracks<span className=\"text-danger\">*</span>\n        </Label>\n        <Subtext>Check the tracks you are opting in for</Subtext>\n        <CheckboxGroup>\n          {[\n            \"General Prize\",\n            \"Mintbase\",\n            \"Keypom\",\n            \"Abstraction on BOS\",\n            \"Postlock Bounty\",\n            \"NEAR Balkans\",\n            \"Pagoda's Chain Signatures\",\n            \"Metatransactions\",\n          ].map((track) => (\n            <CheckboxLabel key={track}>\n              <CheckBox\n                type=\"checkbox\"\n                checked={tracks.includes(track)}\n                onChange={() => handleCheckboxChange(track)}\n              />\n              {track}\n            </CheckboxLabel>\n          ))}\n        </CheckboxGroup>\n      </FormGroup>\n\n      <FormGroup>\n        <Label htmlFor=\"teammates\">\n          Teammates<span className=\"text-danger\">*</span>\n        </Label>\n        <Subtext>@ the near addresses of your teammates</Subtext>\n        <Input\n          name=\"teammates\"\n          id=\"teammates\"\n          type=\"text\"\n          value={teammates}\n          onChange={(e) => setTeammates(e.target.value)}\n        />\n      </FormGroup>\n\n      <FormGroup>\n        <Label htmlFor=\"projectLink\">\n          Project's Public Github w/ Readme.md\n          <span className=\"text-danger\">*</span>\n        </Label>\n        <Subtext>{/*Put a URL of your project*/}</Subtext>\n        <Input\n          name=\"projectLink\"\n          id=\"projectLink\"\n          type=\"text\"\n          value={projectLink}\n          onChange={(e) => setProjectLink(e.target.value)}\n        />\n      </FormGroup>\n\n      <FormGroup>\n        <Label htmlFor=\"demoLink\">\n          Demo Link<span className=\"text-danger\">*</span>\n        </Label>\n        <Subtext>Keep it under two minutes</Subtext>\n        <Input\n          id=\"demoLink\"\n          name=\"demoLink\"\n          type=\"text\"\n          value={demoLink}\n          onChange={(e) => setDemoLink(e.target.value)}\n        />\n      </FormGroup>\n      <FormGroup>\n        <Label htmlFor=\"contactInfo\">\n          Contact Email<span className=\"text-danger\">*</span>\n        </Label>\n        <Subtext>\n          This information will be on-chain and it is how we will communicate\n          with you and distribute prizes\n        </Subtext>\n        <Input\n          name=\"contactInfo\"\n          id=\"contactInfo\"\n          type=\"text\"\n          value={contactInfo}\n          onChange={(e) => setContactInfo(e.target.value)}\n        />\n        <span className=\"text-danger\" style={{ fontSize: 12 }}>\n          {!isEmailValid &&\n            \"Your Email is invalid. Please check it for mistakes.\"}\n        </span>\n      </FormGroup>\n      <FormGroup>\n        <Label htmlFor=\"learning\">\n          What did you learn?<span className=\"text-danger\">*</span>\n        </Label>\n        <Subtext></Subtext>\n        <Textarea\n          name=\"learning\"\n          id=\"learning\"\n          value={learning}\n          onChange={(e) => setLearning(e.target.value)}\n        />\n      </FormGroup>\n\n      <FormGroup>\n        <Label htmlFor=\"referrer\">\n          How did you hear about this hackathon?\n          <span className=\"text-danger\">*</span>\n        </Label>\n        <Subtext>\n          ie: Developer DAO, 100x Devs, BuildDAO, NEAR DevHub, etc...\n        </Subtext>\n        <Input\n          name=\"referrer\"\n          id=\"referrer\"\n          type=\"text\"\n          value={referrer}\n          onChange={(e) => setReferrer(e.target.value)}\n        />\n      </FormGroup>\n\n      <ConsentContainer>\n        <ConsentCheckbox\n          type=\"checkbox\"\n          checked={consentChecked}\n          onChange={() => setConsentChecked(!consentChecked)}\n          name=\"consent\"\n          id=\"consent\"\n        />\n        <ConsentLabel htmlFor=\"consent\">\n          By clicking here, you acknowledge that your responses above will be\n          stored permanently on the blockchain and are accessible to anyone\n          analyzing the social.near contract. Please ensure you are comfortable\n          with this before proceeding.<span className=\"text-danger\">*</span>\n        </ConsentLabel>\n      </ConsentContainer>\n      <SubmitButton\n        onClick={handleSubmit}\n        disabled={\n          !title ||\n          !description ||\n          tracks.length === 0 ||\n          !teammates ||\n          !projectLink ||\n          !demoLink ||\n          !contactInfo ||\n          !referrer ||\n          !learning ||\n          !consentChecked ||\n          !isEmailValid\n        }\n      >\n        Submit\n      </SubmitButton>\n    </FormContainer>\n  </Root>\n);\n", "metadata": {"fork_of": "buildbox.near/widget/page.submit@111581363"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/page.submit", "fact_widget_deployments_id": "0934343967457ba0fffdc5e949f5c27c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}