{"tx_hash": "HG7CsRzCguuBkH9xqQFhcQZikRkkiET9Cxw1B9Mktz7n", "action_id_social": "5VbYEwRnqRhTxGzT5uYgVX7dskLrdwVw5Pn7ejrmGN9m-0-widget", "block_id": 98222633, "block_timestamp": "2023-08-06T19:32:55.730Z", "signer_id": "efiz.near", "widget_name": "Chat.create", "source_code": "const pPath = props.pPath;\n\nfunction createRoom() {\n  const chatroom = JSON.parse(Social.get(pPath) || \"null\");\n  const [accountId, thing, chatId] = pPath.split(\"/\");\n\n  const feeds = chatroom.rooms;\n  let data = {\n    thing: {},\n  };\n\n  switch (state.chatType) {\n    case \"ALL\": {\n      feeds.push(\"every.near/thing/post\");\n    }\n    case \"HASHTAG\":\n      {\n        const type = \"efiz.near/type/feed\";\n        const newFeed = {\n          sources: [\n            {\n              domain: \"post\",\n              key: \"main\",\n            },\n          ],\n          typeWhitelist: [\"md\"],\n          hashtagWhitelist: [state.newHashtag],\n        };\n        data.thing[thingId] = {\n          data: JSON.stringify(newFeed),\n        };\n        data.index.every = JSON.stringify({\n          key: type,\n          value: {\n            thingId,\n            type,\n          },\n        });\n        feeds.push(`${context.accountId}/thing/${thingId}`);\n      }\n      const thingId = generateUID();\n    case \"PRIVATE\": {\n      const teamId = generateUID();\n      const accounts = Object.keys(state.invites);\n      const room = {\n        sources: [\n          {\n            domain: \"every\",\n            key: teamId,\n          },\n        ],\n        typeWhitelist: [\"md\"],\n        accountWhitelist: accounts,\n      };\n      const item = {\n        type: \"thing\",\n        path: `${context.accountId}/thing/${teamId}`,\n      };\n      data.thing[teamId] = {\n        \"\": JSON.stringify(room),\n        metadata: {\n          name: \"test\",\n          description: \"test chatroom\",\n        },\n      };\n      data.graph[teamId] = state.accounts;\n\n      const notifications = accounts.map((accountId) => {\n        if (accountId !== context.accountId) {\n          return {\n            key: accountId,\n            value: {\n              type: \"invite\",\n              item,\n            },\n          };\n        }\n      });\n\n      if (notifications.length) {\n        data.index.notify = JSON.stringify(\n          notifications.length > 1 ? notifications : notifications[0]\n        );\n      }\n    }\n    case \"CUSTOM\": {\n    }\n  }\n  chatroom.rooms = feeds;\n  data.thing[chatId] = {\n    \"\": JSON.stringify(chatroom),\n  };\n\n  Social.set(data, {\n    onCommit: () => {},\n    onCancel: () => {},\n  });\n}\n\nfunction generateUID() {\n  return (\n    Math.random().toString(16).slice(2) +\n    Date.now().toString(36) +\n    Math.random().toString(16).slice(2)\n  );\n}\n\nif (state.chatType) {\n  function renderCreate() {\n    switch (state.chatType) {\n      case \"ALL\": {\n        // Adds the every feed\n        return <p>all</p>;\n      }\n      case \"HASHTAG\": {\n        // Creates a hashtag feed\n        return (\n          <p>\n            <input\n              onChange={(e) => State.update({ newHashtag: e.target.value })}\n              value={state.newHashtag}\n              placeholder=\"hashtag\"\n            />\n          </p>\n        );\n      }\n      case \"PRIVATE\": {\n        // Creates a team feed\n        return <p>private</p>;\n      }\n      case \"CUSTOM\": {\n        // Other creator\n        return <p>custom</p>;\n      }\n    }\n  }\n  return (\n    <>\n      <button\n        onClick={() =>\n          State.update({\n            chatType: null,\n          })\n        }\n      >\n        back\n      </button>\n      {renderCreate()}\n      <button onClick={createRoom}>create</button>\n    </>\n  );\n} else {\n  const Wrapper = styled.div`\n  border-radius: 12px;\n  border: 1px solid #eceef0;\n  box-shadow: 0px 1px 3px rgba(16, 24, 40, 0.1),\n    0px 1px 2px rgba(16, 24, 40, 0.06);\n  cursor: pointer;\n  \n  transform: translateY(0);\n  transition: transform 0.2s ease;\n\n  &:hover {\n    transform: translateY(-3px);\n  }\n\n  a {\n    color: #4498e0;\n    font-size: 0.8rem;\n    font-weight: 600;\n    text-decoration: none;\n\n    &:hover {\n      color: #4498e0cc;\n  }\n`;\n  const TileGrid = ({ tiles }) => {\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          {tiles.map((tile, index) => (\n            <div key={index} className=\"col-md mb-4 \">\n              <Wrapper\n                className={\"p-4 rounded text-center\"}\n                onClick={tile.onClick}\n              >\n                <div className=\"icon\">\n                  <i className={`bi ${tile.icon}`}></i>\n                </div>\n                <h5 className=\"title\">{tile.title}</h5>\n              </Wrapper>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  function setType(ct) {\n    State.update({\n      chatType: ct,\n    });\n  }\n\n  const tiles = [\n    { icon: \"bi-box\", title: \"all\", onClick: () => setType(\"ALL\") },\n    { icon: \"bi-heart\", title: \"hashtag\", onClick: () => setType(\"HASHTAG\") },\n    { icon: \"bi-star\", title: \"private\", onClick: () => setType(\"PRIVATE\") },\n    { icon: \"bi-lightbulb\", title: \"custom\", onClick: () => setType(\"CUSTOM\") },\n  ];\n\n  return (\n    <div>\n      <TileGrid tiles={tiles} />\n    </div>\n  );\n}\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/Chat.create", "fact_widget_deployments_id": "93b1e34636bd69a7d43557da19bf5f3a", "inserted_timestamp": "2023-08-06T20:45:00.706Z", "modified_timestamp": "2023-08-06T20:45:00.706Z", "__row_index": 0}