{"tx_hash": "2FFfqbcBghufwEfJJ19EizvE7wmPQrFKy8SG5L6DcyHw", "action_id_social": "9XJSaXDDZEyFeysBdv8BeWE1ZxPJK7v65YqLsf6PMcMh-0-widget", "block_id": 111809296, "block_timestamp": "2024-01-31T23:54:39.395Z", "signer_id": "james.near", "widget_name": "optical.demo", "source_code": "const $ = VM.require(\"sdks.near/widget/Loader\");\nconst { LensSDK } = $(\"@sdks/lens-sdk\");\nconst { Constants } = $(\"@sdks/lens/definitions\");\n\nState.init({\n  evmAddress: \"\",\n  handleToCreate: \"\",\n  lastAuthenticationResult: \"\",\n  lastProfileResult: \"\",\n  lastProfileWriteResult: \"\",\n  lastPublicationReadResult: \"\",\n  lastPublicationWriteResult: \"\",\n  lastPublicationSearchResult: \"\",\n  lastProfileSearchResult: \"\",\n  lastNotificationResult: \"\",\n  lastTransactionResult: \"\",\n  lastCustomRequestResult: \"\",\n  handleCreated: null,\n  alive: null,\n  profiles: [],\n  login: null,\n  verify: null,\n  refresh: null,\n  list: null,\n  revoke: null,\n  customProfileHandle: \"lens/mattb\",\n  searchProfileTerm: \"stani\",\n  searchPublicationTerm: \"NEAR Protocol\",\n  transactionHash:\n    \"0xa46ff9fe2c68c0c5ff4347b449bf73373733d01a0377dc44bb1c684c2e702ca0\",\n  transactionId: \"\",\n  testPublication: \"0x01-0x02c5\",\n  onlyOnce: true,\n  customRequest: `query Profile($request: ProfileRequest!) {\n  profile(request: $request) {\n    operations {\n      isFollowedByMe {\n        value\n      }\n    }\n  }\n}`,\n  customRequestParameters: `{\n  \"request\": {\n    \"forHandle\": \"lens/mattb\"\n  }\n}`,\n});\n\nLensSDK = new LensSDK(State, state);\n\nif (!state.evmAddress && Ethers.provider()) {\n  Ethers.provider()\n    .send(\"eth_requestAccounts\", [])\n    .then(([address]) => {\n      if (address) {\n        State.update({ evmAddress: address });\n      }\n    });\n}\n\nconst Response = styled.div`\n  width:100%;\n  overflow-y:auto;\n  border-radius:10px;\n  background-color:rgba(0,0,0,.06);\n  border:1px solid rgba(0,0,0,.05);\n  color:rgba(0,0,0,.5);\n  font-size:.8rem;\n  font-weight:bold;\n  padding:20px;\n  overflow-wrap:break-word;\n`;\n\nconst [lensHandle, setLensHandle] = useState(\"lens/mattb\");\nconst [followersData, setFollowersData] = useState([]);\n\nuseEffect(() => {\n  const fetchProfile = LensSDK.profile.getProfile || LensSDK.profile.fetch;\n\n  if (fetchProfile) {\n    fetchProfile({ handle: lensHandle })\n      .then((profile) => {\n        const followersRequest = {\n          profileId: profile.id,\n        };\n\n        LensSDK.profile\n          .followers(followersRequest)\n          .then((followersResponse) => {\n            console.log(\"Followers:\", followersResponse); // Debugging log\n            const profileIds = followersResponse.profiles.map(\n              (follower) => follower.id\n            );\n            console.log(\"Profile IDs:\", profileIds); // Debugging log\n            setFollowersData(profileIds);\n          })\n          .catch((error) => console.error(\"Error fetching followers:\", error));\n      })\n      .catch((error) => console.error(\"Error fetching profile:\", error));\n  } else {\n    console.error(\"Profile fetch method not available in LensSDK\");\n  }\n}, [lensHandle]);\n\nreturn (\n  <>\n    <div className=\"m-3\">\n      <h3>Optical ~ DEMO</h3>\n      <h5>Lens Graph Visualizer</h5>\n      <div className=\"mb-3\">\n        <input\n          placeholder=\"lens/<handle>\"\n          value={lensHandle}\n          onChange={(e) => setLensHandle(e.target.value)}\n        />\n      </div>\n      <button\n        className=\"btn btn-primary m-1\"\n        onClick={() => {\n          LensSDK.profile\n            .fetch({\n              forHandle: lensHandle,\n            })\n            .then((profile) => {\n              LensSDK.profile\n                .following({\n                  for: profile.id,\n                })\n                .then((paginatedResult) => {\n                  State.update({ lastProfileResult: paginatedResult });\n                });\n            });\n        }}\n      >\n        Following\n      </button>\n      <button\n        className=\"btn btn-primary m-1\"\n        onClick={() => {\n          LensSDK.profile\n            .fetch({\n              forHandle: lensHandle,\n            })\n            .then((profile) => {\n              LensSDK.profile\n                .followers({\n                  of: profile.id,\n                })\n                .then((paginatedResult) => {\n                  State.update({ lastProfileResult: paginatedResult });\n                });\n            });\n        }}\n      >\n        Followers\n      </button>\n    </div>\n    <div className=\"m-3\">\n      {state.lastProfileResult && (\n        <Response>\n          {JSON.stringify(\n            state.lastProfileResult.profiles.map((profile) => profile.id)\n          )}\n        </Response>\n      )}\n    </div>\n  </>\n);\n", "metadata": {"fork_of": "sdks.near/widget/SDKs.Lens.LensSDK@111796349"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/james.near/widget/optical.demo", "fact_widget_deployments_id": "8c6b8dae4590e96985d37995a9ab8379", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}