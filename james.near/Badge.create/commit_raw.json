{"tx_hash": "92mbgyoiuNHUmyjfVyyVgjFQmhVrBNZuuXdSAdsR5UsR", "action_id_social": "EVVyMNK2bJVwJt9Gr4SHKteQVrfAYQq2jVQ56yS7CChk-0-widget", "block_id": 112471138, "block_timestamp": "2024-02-09T14:58:54.071Z", "signer_id": "james.near", "widget_name": "Badge.create", "source_code": "const [badgeSrc, setBadgeSrc] = useState(\"every.near\");\nconst [badgeId, setBadgeId] = useState(\"builder\");\n\nconst blockHeight = props.blockHeight || \"final\";\nconst [accountIds, setAccountIds] = useState([\n  `${context.accountId || \"every.near\"}`,\n]);\nconst [inputValue, setInputValue] = useState(\"\");\n\nconst handleAddAccountId = () => {\n  if (inputValue.trim() !== \"\" && !accountIds.includes(inputValue)) {\n    const newAccountIds = [...accountIds, inputValue];\n    setAccountIds(newAccountIds);\n    onResolverChange(newAccountIds);\n    setInputValue(\"\");\n  }\n};\n\nconst handleRemoveAccountId = (accountId) => {\n  const newAccountIds = accountIds.filter((id) => id !== accountId);\n  setAccountIds(newAccountIds);\n  onResolverChange(newAccountIds);\n};\n\nconst handleInputChange = (e) => {\n  setInputValue(e.target.value);\n};\n\nconst [badgeName, setBadgeName] = useState(\"Proof of Build\");\nconst [description, setDescription] = useState(\"~ good builder vibes ~\");\nconst [imageUrl, setImageUrl] = useState(\"\");\n\nconst badge = Social.get(`${badgeSrc}/badge/${badgeId}`, \"final\");\n\nlet importedTypes = [];\nconst availableTypes = JSON.parse(props.availableTypes) || [\n  \"string\",\n  \"boolean\",\n  \"number\",\n  \"date\",\n  \"time\",\n  \"tags\",\n  ...importedTypes,\n];\n\nconst Container = styled.div`\n  margin: 20px 0;\n`;\n\nconst FormContainer = styled.div`\n  border: 1px solid #ccc;\n  padding: 23px;\n  margin: 19px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst Input = styled.input`\n  flex: 1;\n  max-width: 200px;\n  margin-bottom: 10px;\n  height: 30px;\n`;\n\nconst Select = styled.select`\n  height: 30px;\n`;\n\nconst Button = styled.button`\n  height: 30px;\n`;\n\nconst Text = styled.p`\n  display: inline-block;\n  margin-right: 10px;\n`;\n\nconst BadgeImage = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  justify-content: center;\n  text-align: center;\n  width: 100%; \n\n    img {\n      width: 4rem !important;\n      height: 4rem !important;\n      border-radius: 50%;\n      image-rendering: pixelated;\n      object-fit: cover;\n    }`;\n\nconst handleBadgeIdChange = (e) => {\n  setBadgeId(e.target.value.toLowerCase());\n};\n\nconst handleBadgeNameChange = (e) => {\n  setBadgeName(e.target.value);\n};\nconst handleDescriptionChange = (e) => {\n  setDescription(e.target.value);\n};\nconst handleAccountIdsChange = (e) => {\n  setAccountIds(e.target.value);\n};\nconst handleImageUrlChange = (e) => {\n  setImageUrl(e.target.value);\n};\n\nconst composeData = () => {\n  const data = {\n    badge: {\n      [badgeId]: {\n        metadata: {\n          name: badgeName,\n          description,\n          image: {\n            url: imageUrl,\n          },\n        },\n        accounts: accountsObject,\n      },\n    },\n  };\n\n  const accountsObject = accountIds.reduce((acc, accountId) => {\n    acc[accountId] = \"\";\n    return acc;\n  }, {});\n\n  if (Object.keys(accountsObject).length > 0) {\n    data.badge[badgeId].accounts = accountsObject;\n  } else {\n    delete data.badge[badgeId].accounts;\n  }\n\n  return data;\n};\n\nfunction TypeSelect({ value, onChange }) {\n  return (\n    <Select value={value} onChange={onChange}>\n      {availableTypes.map((it) => (\n        <option value={it} key={it}>\n          {it}\n        </option>\n      ))}\n    </Select>\n  );\n}\n\nfunction MultiSelect({ value, onChange }) {\n  return (\n    <Select value={value} onChange={onChange}>\n      <option value={false}>single</option>\n      <option value={true}>multi</option>\n    </Select>\n  );\n}\n\nconst handleResolverTypeChange = (e) => {\n  setResolverType(e.target.value);\n};\n\nconst handleResolverDataChange = (newData) => {\n  setResolverData(newData);\n};\n\nconst serializedAccountsObject = JSON.stringify(\n  accountIds.reduce((acc, accountId) => {\n    acc[accountId] = \"\";\n    return acc;\n  }, {}),\n  null,\n  2\n);\n\nconst markdownText = `\n\\`\\`\\`json\n{\n  \"badge\": {\n    \"${badgeId}\": {\n      \"metadata\": {\n        \"name\": \"${badgeName}\",\n        \"description\": \"${description}\",\n        \"image\": {\n          \"url\": \"${imageUrl}\"\n        }\n      },\n      \"accounts\": ${serializedAccountsObject}\n    }\n  }\n}`;\n\nreturn (\n  <Container>\n    <FormContainer>\n      <Text>\n        <Row>\n          <h3 className=\"m-1\">Near Social Badge Creator</h3>\n          <div className=\"m-2\">\n            <Widget src=\"james.near/widget/BuilderHat\" props={{ accountId }} />\n          </div>\n        </Row>\n        <h5 className=\"m-1\">\n          -- inspired by <a href=\"https://everything.dev\">everything</a>,\n          <a href=\"https://hyperfiles.org\">Hyperfiles</a>,\n          <a href=\"https://archetype.computer\">Archetype</a>, and\n          <a href=\"https://near.social/zavodil.near/widget/social-avatar-editor\">\n            NS Avatars\n          </a>\n        </h5>\n        <p className=\"m-1 mt-2\">\n          <i>\n            Below, you may customize fields to build attestations of a specific\n            type:{\" \"}\n            <a href=\"https://github.com/NearSocial/standards/blob/main/types/badge\">\n              <b>badges</b>\n            </a>\n          </i>\n        </p>\n      </Text>\n      <BadgeImage className=\"d-flex flex-column align-items-center justify-content-center text-center\">\n        <div>\n          <div className=\"m-3 d-flex flex-row\">\n            <Widget\n              src=\"james.near/widget/Badge\"\n              props={{ imageUrl, badge: true }}\n            />\n            <div className=\"ms-3\">\n              <div className=\"m-1\">{badgeName}</div>\n              <div className=\"small text-truncate\">\n                <i className=\"bi bi-person-badge\"></i>\n                badge/{badgeId}\n              </div>\n            </div>\n          </div>\n          <div className=\"mt-4\">\n            <p>\n              <b>What does your badge signify?</b>\n            </p>\n            <p>{description}</p>\n          </div>\n        </div>\n      </BadgeImage>\n      <div className=\"m-3 mt-4\">\n        <h5 className=\"m-2\">\n          <b>Badge ID:</b>\n        </h5>\n        <div className=\"m-3\">\n          <input\n            type=\"text\"\n            placeholder=\"badge name\"\n            value={badgeId}\n            onChange={handleBadgeIdChange}\n          />\n        </div>\n        <h5 className=\"m-2\">\n          <b>Badge Name:</b>\n        </h5>\n        <div className=\"m-3\">\n          <input\n            type=\"text\"\n            placeholder=\"name\"\n            value={badgeName}\n            onChange={handleBadgeNameChange}\n          />\n        </div>\n        <h5 className=\"m-2\">\n          <b>Short Description:</b>\n        </h5>\n        <div className=\"m-3\">\n          <input\n            placeholder=\"description\"\n            value={description}\n            onChange={handleDescriptionChange}\n          ></input>\n        </div>\n        <h5 className=\"m-2\">\n          <b>Image Link:</b>\n        </h5>\n        <div className=\"m-3\">\n          <input\n            placeholder=\"url\"\n            value={image}\n            onChange={handleImageUrlChange}\n          ></input>\n        </div>\n      </div>\n      <div className=\"m-4\">\n        <h5>\n          <b>Recipients:</b>\n        </h5>\n        <p>Give initial attestations to anyone with a NEAR account.</p>\n        <p>\n          <i>OPTIONAL \u2014 Badges can be claimed or distributed later.</i>\n        </p>\n\n        <div className=\"m-2\">\n          <div className=\"d-flex flex-row mt-3\">\n            <div style={{ flexGrow: 1, marginRight: \"8px\" }}>\n              <input\n                type=\"text\"\n                style={{ width: \"100%\" }}\n                value={inputValue}\n                onChange={handleInputChange}\n                placeholder=\"example.near\"\n              />\n            </div>\n            <button className=\"btn btn-dark\" onClick={handleAddAccountId}>\n              Add\n            </button>\n          </div>\n          <br />\n          {accountIds.map((accountId) => (\n            <>\n              <div\n                className=\"d-flex flex-row justify-content-between\"\n                key={accountId}\n              >\n                <Widget\n                  src=\"james.near/widget/profile.inline\"\n                  props={{ accountId }}\n                />\n                <div className=\"ml-auto\">\n                  <button\n                    className=\"btn btn-light\"\n                    onClick={() => handleRemoveAccountId(accountId)}\n                  >\n                    Remove\n                  </button>\n                </div>\n              </div>\n              <br />\n            </>\n          ))}\n        </div>\n      </div>\n      <div className=\"m-3\">\n        <h4 className=\"m-2\">Data Structure</h4>\n        <p className=\"m-2\">\n          This badge would be saved under your account like this...\n        </p>\n      </div>\n      <div className=\"m-3\">\n        <Markdown\n          text={markdownText}\n          syntaxHighlighterProps={{\n            wrapLines: true,\n            lineProps,\n            showLineNumbers: true,\n            lineNumberStyle: { display: !props.showLineNumber && \"none\" },\n          }}\n        />\n      </div>\n      <div className=\"m-3\">\n        <CommitButton style={{ width: \"100%\" }} force data={composeData()}>\n          Save\n        </CommitButton>\n      </div>\n    </FormContainer>\n  </Container>\n);\n", "metadata": {"fork_of": "flowscience.near/widget/schema.editor@112365674"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/james.near/widget/Badge.create", "fact_widget_deployments_id": "918e5c6bdc2a38c30b214656aa55695b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}