{"tx_hash": "DzVzpuKAC5Gs6zL8KvXbMpsJjiyiCC6VJgRkyVrKV1j4", "action_id_social": "9KTsUn96L1rc2GWXUV92k7RQVogJxqYwcCEF3HYjhRza-0-widget", "block_id": 115990515, "block_timestamp": "2024-04-02T15:31:23.109Z", "signer_id": "thomasguntenaar.near", "widget_name": "devhub.components.organism.Configurator", "source_code": "const Struct = VM.require(\"thomasguntenaar.near/widget/core.lib.struct\");\n\nif (!Struct) {\n  return <p>Loading modules...</p>;\n}\n\nconst useForm = ({ initialValues, onUpdate, stateKey }) => {\n  const initialFormState = {\n    hasUnsubmittedChanges: false,\n    values: initialValues ?? {},\n  };\n\n  const formState = state[stateKey] ?? null;\n\n  const formReset = () =>\n    State.update((lastKnownComponentState) => ({\n      ...lastKnownComponentState,\n      [stateKey]: initialFormState,\n      hasUnsubmittedChanges: false,\n    }));\n\n  const formUpdate =\n    ({ path, via: customFieldUpdate, ...params }) =>\n    (fieldInput) => {\n      const transformFn = (node) => {\n        if (typeof customFieldUpdate === \"function\") {\n          return customFieldUpdate({\n            input: fieldInput?.target?.value ?? fieldInput,\n            lastKnownValue: node,\n            params,\n          });\n        } else {\n          return Struct.defaultFieldUpdate({\n            input: fieldInput?.target?.value ?? fieldInput,\n            lastKnownValue: node,\n            params,\n          });\n        }\n      };\n      const updatedValues = Struct.deepFieldUpdate(\n        formState?.values ?? {},\n        path,\n        (node) => transformFn(node)\n      );\n      State.update((lastKnownComponentState) => ({\n        ...lastKnownComponentState,\n        [stateKey]: {\n          hasUnsubmittedChanges: !Struct.isEqual(\n            updatedValues,\n            initialFormState.values\n          ),\n          values: updatedValues,\n        },\n      }));\n\n      if (typeof onUpdate === \"function\") {\n        onUpdate(updatedValues);\n      }\n    };\n\n  return {\n    hasUnsubmittedChanges: formState?.hasUnsubmittedChanges ?? false,\n    values: {\n      ...(initialValues ?? {}),\n      ...(formState?.values ?? {}),\n    },\n    reset: formReset,\n    stateKey,\n    update: formUpdate,\n  };\n};\n\nconst ValueView = styled.div`\n  & > p {\n    margin: 0;\n  }\n`;\n\nconst fieldParamsByType = {\n  array: {\n    name: \"components.molecule.Input\",\n    inputProps: { type: \"text\" },\n  },\n\n  boolean: {\n    name: \"components.atom.Toggle\",\n  },\n\n  string: {\n    name: \"components.molecule.Input\",\n    inputProps: { type: \"text\" },\n  },\n};\n\nconst defaultFieldsRender = ({ schema, form, isEditable }) => (\n  <>\n    {Object.entries(schema).map(\n      (\n        [key, { format, inputProps, noop, label, order, style, ...fieldProps }],\n        idx\n      ) => {\n        const fieldKey = `${idx}-${key}`,\n          fieldValue = form.values[key];\n\n        const fieldType = Array.isArray(fieldValue)\n          ? \"array\"\n          : typeof (fieldValue ?? \"\");\n\n        const isDisabled = noop ?? inputProps.disabled ?? false;\n\n        const viewClassName = [\n          (fieldValue?.length ?? 0) > 0 ? \"\" : \"text-muted\",\n          \"m-0\",\n        ].join(\" \");\n\n        return (\n          <>\n            <div\n              className={[\n                \"d-flex gap-3\",\n                isEditable || noop ? \"d-none\" : \"\",\n              ].join(\" \")}\n              key={fieldKey}\n              style={{ order }}\n            >\n              <label className=\"fw-bold w-25\">{label}</label>\n\n              <ValueView className={[viewClassName, \"w-75\"].join(\" \")}>\n                {format !== \"markdown\" ? (\n                  <span>\n                    {(fieldType === \"array\" && format === \"comma-separated\"\n                      ? fieldValue\n                          .filter((string) => string.length > 0)\n                          .join(\", \")\n                      : fieldValue\n                    )?.toString?.() || \"none\"}\n                  </span>\n                ) : (fieldValue?.length ?? 0) > 0 ? (\n                  <Widget\n                    src={\n                      \"thomasguntenaar.near/widget/devhub.components.molecule.MarkdownViewer\"\n                    }\n                    props={{\n                      text: fieldValue,\n                    }}\n                  />\n                ) : (\n                  <span>none</span>\n                )}\n              </ValueView>\n            </div>\n            <Widget\n              src={`thomasguntenaar.near/widget/devhub.${\n                (fieldParamsByType[fieldType] ?? fieldParamsByType[\"string\"])\n                  .name\n              }`}\n              props={{\n                ...fieldProps,\n                className: [\n                  \"w-100\",\n                  fieldProps.className ?? \"\",\n                  isEditable && !noop ? \"\" : \"d-none\",\n                ].join(\" \"),\n\n                disabled: isDisabled,\n                format,\n                key: `${fieldKey}--editable`,\n                label,\n                onChange: form.update({ path: [key] }),\n                style: { ...style, order },\n\n                value:\n                  fieldType === \"array\" && format === \"comma-separated\"\n                    ? fieldValue.join(\", \")\n                    : fieldValue,\n\n                inputProps: {\n                  ...(inputProps ?? {}),\n                  disabled: isDisabled,\n\n                  title:\n                    noop ?? false\n                      ? \"Temporarily disabled due to technical reasons.\"\n                      : inputProps.title,\n\n                  ...(fieldParamsByType[fieldType].inputProps ?? {}),\n                  tabIndex: order,\n                },\n              }}\n            />\n          </>\n        );\n      }\n    )}\n  </>\n);\n\nconst Configurator = ({\n  actionsAdditional,\n  cancelLabel,\n  classNames,\n  externalState,\n  fieldsRender: customFieldsRender,\n  formatter: toFormatted,\n  isValid,\n  isActive,\n  onCancel,\n  onChange,\n  onSubmit,\n  schema,\n  submitIcon,\n  submitLabel,\n  hideSubmitBtn,\n}) => {\n  const fieldsRender = customFieldsRender || defaultFieldsRender;\n\n  const initialValues = Struct.typeMatch(schema)\n    ? Struct.pick(externalState ?? {}, Object.keys(schema))\n    : {};\n\n  const form = useForm({ initialValues, onUpdate: onChange, stateKey: \"form\" });\n\n  const formFormattedValues = toFormatted\n    ? toFormatted(form.values)\n    : form.values;\n\n  const internalValidation = () =>\n    Object.keys(schema).every((key) => {\n      const fieldDefinition = schema[key];\n      const value = form.values[key];\n      if (!value || value.length === 0) {\n        return !fieldDefinition.inputProps.required;\n      } else if (\n        fieldDefinition.inputProps.min &&\n        fieldDefinition.inputProps.min > value?.length\n      ) {\n        return false;\n      } else if (\n        fieldDefinition.inputProps.max &&\n        fieldDefinition.inputProps.max < value?.length\n      ) {\n        return false;\n      } else if (\n        fieldDefinition.inputProps.allowCommaAndSpace === false &&\n        /^[^,\\s]*$/.test(value) === false\n      ) {\n        return false;\n      } else if (\n        fieldDefinition.inputProps.validUrl === true &&\n        /^(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/.test(\n          value\n        ) === false\n      ) {\n        return false;\n      }\n      return true;\n    });\n\n  const isFormValid = () => {\n    return internalValidation() && (!isValid || isValid(formFormattedValues));\n  };\n\n  const onCancelClick = () => {\n    form.reset();\n    if (onCancel) onCancel();\n  };\n\n  const onSubmitClick = () => {\n    if (onSubmit && isFormValid()) {\n      onSubmit(formFormattedValues);\n    }\n  };\n\n  return (\n    <div className=\"flex-grow-1 d-flex flex-column gap-4\">\n      <div className={`d-flex flex-column gap-${isActive ? 1 : 4}`}>\n        {fieldsRender({\n          form,\n          isEditable: isActive,\n          schema,\n        })}\n      </div>\n      {isActive && !hideSubmitBtn && (\n        <div className=\"d-flex align-items-center justify-content-end gap-3 mt-auto\">\n          {actionsAdditional ? (\n            <div className=\"me-auto\">{actionsAdditional}</div>\n          ) : null}\n\n          <Widget\n            src={\"thomasguntenaar.near/widget/devhub.components.molecule.Button\"}\n            props={{\n              classNames: { root: \"btn-outline-danger shadow-none border-0\" },\n              label: cancelLabel || \"Cancel\",\n              onClick: onCancelClick,\n            }}\n          />\n          <Widget\n            src={\"thomasguntenaar.near/widget/devhub.components.molecule.Button\"}\n            props={{\n              classNames: { root: classNames.submit || \"btn-success\" },\n              disabled: !form.hasUnsubmittedChanges || !isFormValid(),\n              icon: submitIcon || {\n                type: \"bootstrap_icon\",\n                variant: \"bi-check-circle-fill\",\n              },\n              label: submitLabel || \"Submit\",\n              onClick: onSubmitClick,\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nreturn Configurator(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thomasguntenaar.near/widget/devhub.components.organism.Configurator", "fact_widget_deployments_id": "61978f5f221b92ee1d4d8e5f0d89e9a8", "inserted_timestamp": "2024-04-02T16:32:41.462Z", "modified_timestamp": "2024-04-02T17:33:21.922Z", "__row_index": 9}