{"tx_hash": "GUGEo1MQeuZfSb98xNioQWK8gac8wbGFC27H2GFDiFQz", "action_id_social": "F2koHSefXNoE7z1xibFRLA3qBFvn76hLxCF4froz5kjt-0-widget", "block_id": 100609818, "block_timestamp": "2023-09-07T19:32:48.788Z", "signer_id": "thomasguntenaar.near", "widget_name": "gigs-board.feature.github-integration.kanban-board-editor", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/gui/form\" */\nconst defaultFieldUpdate = ({\n  input,\n  lastKnownValue,\n  params: { arrayDelimiter },\n}) => {\n  switch (typeof input) {\n    case \"boolean\":\n      return input;\n\n    case \"object\":\n      return Array.isArray(input) && typeof lastKnownValue === \"string\"\n        ? input.join(arrayDelimiter ?? \",\")\n        : input;\n\n    case \"string\":\n      return Array.isArray(lastKnownValue)\n        ? input.split(arrayDelimiter ?? \",\").map((string) => string.trim())\n        : input;\n\n    default: {\n      if ((input ?? null) === null) {\n        switch (typeof lastKnownValue) {\n          case \"boolean\":\n            return !lastKnownValue;\n\n          default:\n            return lastKnownValue;\n        }\n      } else return input;\n    }\n  }\n};\n\nconst useForm = ({ initialValues, stateKey: formStateKey, uninitialized }) => {\n  const initialFormState = {\n    hasUnsubmittedChanges: false,\n    values: initialValues ?? {},\n  };\n\n  const formState = state[formStateKey] ?? null,\n    isSynced = Struct.isEqual(formState?.values ?? {}, initialFormState.values);\n\n  const formReset = () =>\n    State.update((lastKnownComponentState) => ({\n      ...lastKnownComponentState,\n      [formStateKey]: initialFormState,\n      hasUnsubmittedChanges: false,\n    }));\n\n  const formUpdate =\n    ({ path, via: customFieldUpdate, ...params }) =>\n    (fieldInput) => {\n      const updatedValues = Struct.deepFieldUpdate(\n        formState?.values ?? {},\n\n        {\n          input: fieldInput?.target?.value ?? fieldInput,\n          params,\n          path,\n\n          via:\n            typeof customFieldUpdate === \"function\"\n              ? customFieldUpdate\n              : defaultFieldUpdate,\n        }\n      );\n\n      State.update((lastKnownComponentState) => ({\n        ...lastKnownComponentState,\n\n        [formStateKey]: {\n          hasUnsubmittedChanges: !Struct.isEqual(\n            updatedValues,\n            initialFormState.values\n          ),\n\n          values: updatedValues,\n        },\n      }));\n    };\n\n  if (\n    !uninitialized &&\n    (formState === null ||\n      (Object.keys(formState?.values ?? {}).length > 0 &&\n        !formState.hasUnsubmittedChanges &&\n        !isSynced))\n  ) {\n    formReset();\n  }\n\n  return {\n    ...(formState ?? initialFormState),\n    isSynced,\n    reset: formReset,\n    update: formUpdate,\n  };\n};\n/* END_INCLUDE: \"core/lib/gui/form\" */\n/* INCLUDE: \"core/lib/gui/attractable\" */\nconst AttractableDiv = styled.div`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst AttractableLink = styled.a`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst AttractableImage = styled.img`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n/* END_INCLUDE: \"core/lib/gui/attractable\" */\n/* INCLUDE: \"core/lib/uuid\" */\nconst uuid = () =>\n  [Date.now().toString(16)]\n    .concat(\n      Array.from(\n        { length: 4 },\n        () => Math.floor(Math.random() * 0xffffffff) & 0xffffffff\n      ).map((value) => value.toString(16))\n    )\n    .join(\"-\");\n\nconst withUUIDIndex = (data) => {\n  const id = uuid();\n\n  return Object.fromEntries([[id, { ...data, id }]]);\n};\n/* END_INCLUDE: \"core/lib/uuid\" */\n/* INCLUDE: \"core/lib/struct\" */\nconst Struct = {\n  deepFieldUpdate: (\n    node,\n    { input, params, path: [nextNodeKey, ...remainingPath], via: toFieldValue }\n  ) => ({\n    ...node,\n\n    [nextNodeKey]:\n      remainingPath.length > 0\n        ? Struct.deepFieldUpdate(\n            Struct.typeMatch(node[nextNodeKey]) ||\n              Array.isArray(node[nextNodeKey])\n              ? node[nextNodeKey]\n              : {\n                  ...((node[nextNodeKey] ?? null) !== null\n                    ? { __archivedLeaf__: node[nextNodeKey] }\n                    : {}),\n                },\n\n            { input, path: remainingPath, via: toFieldValue }\n          )\n        : toFieldValue({\n            input,\n            lastKnownValue: node[nextNodeKey],\n            params,\n          }),\n  }),\n\n  isEqual: (input1, input2) =>\n    Struct.typeMatch(input1) && Struct.typeMatch(input2)\n      ? JSON.stringify(Struct.toOrdered(input1)) ===\n        JSON.stringify(Struct.toOrdered(input2))\n      : false,\n\n  toOrdered: (input) =>\n    Object.keys(input)\n      .sort()\n      .reduce((output, key) => ({ ...output, [key]: input[key] }), {}),\n\n  pick: (object, subsetKeys) =>\n    Object.fromEntries(\n      Object.entries(object ?? {}).filter(([key, _]) =>\n        subsetKeys.includes(key)\n      )\n    ),\n\n  typeMatch: (input) =>\n    input !== null && typeof input === \"object\" && !Array.isArray(input),\n};\n/* END_INCLUDE: \"core/lib/struct\" */\n/* INCLUDE: \"core/adapter/dev-hub\" */\nconst devHubAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst DevHub = {\n  edit_community_github: ({ handle, github }) =>\n    Near.call(devHubAccountId, \"edit_community_github\", { handle, github }) ??\n    null,\n\n  get_access_control_info: () =>\n    Near.view(devHubAccountId, \"get_access_control_info\") ?? null,\n\n  get_all_authors: () => Near.view(devHubAccountId, \"get_all_authors\") ?? null,\n\n  get_all_communities: () =>\n    Near.view(devHubAccountId, \"get_all_communities\") ?? null,\n\n  get_all_labels: () => Near.view(devHubAccountId, \"get_all_labels\") ?? null,\n\n  get_community: ({ handle }) =>\n    Near.view(devHubAccountId, \"get_community\", { handle }) ?? null,\n\n  get_post: ({ post_id }) =>\n    Near.view(devHubAccountId, \"get_post\", { post_id }) ?? null,\n\n  get_posts_by_author: ({ author }) =>\n    Near.view(devHubAccountId, \"get_posts_by_author\", { author }) ?? null,\n\n  get_posts_by_label: ({ label }) =>\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? null,\n\n  get_root_members: () =>\n    Near.view(devHubAccountId, \"get_root_members\") ?? null,\n\n  useQuery: ({ name, params }) => {\n    const initialState = { data: null, error: null, isLoading: true };\n\n    const cacheState = useCache(\n      () =>\n        Near.asyncView(devHubAccountId, [\"get\", name].join(\"_\"), params ?? {})\n          .then((response) => ({\n            ...initialState,\n            data: response ?? null,\n            isLoading: false,\n          }))\n          .catch((error) => ({\n            ...initialState,\n            error: props?.error ?? error,\n            isLoading: false,\n          })),\n\n      JSON.stringify({ name, params }),\n      { subscribe: true }\n    );\n\n    return cacheState === null ? initialState : cacheState;\n  },\n};\n/* END_INCLUDE: \"core/adapter/dev-hub\" */\n/* INCLUDE: \"entity/viewer\" */\nconst access_control_info = DevHub.useQuery({\n  name: \"access_control_info\",\n});\n\nconst Viewer = {\n  can: {\n    editCommunity: (communityData) =>\n      Struct.typeMatch(communityData) &&\n      (communityData.admins.includes(context.accountId) ||\n        Viewer.role.isDevHubModerator),\n  },\n\n  role: {\n    isDevHubModerator:\n      access_control_info.data === null || access_control_info.isLoading\n        ? false\n        : access_control_info.data.members_list[\n            \"team:moderators\"\n          ]?.children?.includes?.(context.accountId) ?? false,\n  },\n};\n/* END_INCLUDE: \"entity/viewer\" */\n\nconst EditorSettings = {\n  maxColumnsNumber: 20,\n};\n\nconst CompactContainer = styled.div`\n  width: fit-content !important;\n  max-width: 100%;\n`;\n\nconst BoardConfigDefaults = {\n  id: uuid(),\n  columns: {},\n  dataTypesIncluded: { Issue: false, PullRequest: true },\n  description: \"\",\n  repoURL: \"\",\n  ticketState: \"all\",\n  title: \"\",\n};\n\nconst GithubKanbanBoardEditor = ({ communityHandle, pageURL }) => {\n  State.init({\n    editingMode: \"form\",\n    isEditorActive: false,\n  });\n\n  const community = DevHub.useQuery({\n    name: \"community\",\n    params: { handle: communityHandle },\n  });\n\n  const boards =\n    ((community?.data?.github ?? null) === null\n      ? {}\n      : JSON.parse(community.data.github)\n    )?.kanbanBoards ?? {};\n\n  // TODO: Should be taken from props once support for multiple boards is introduced\n  const boardId = Object.keys(boards)[0] ?? null;\n\n  const errors = {\n    noBoard: !Struct.typeMatch(boards[boardId]),\n    noBoards: !community.isLoading && Object.keys(boards).length === 0,\n    noBoardId: typeof boardId !== \"string\",\n    noCommunity: !community.isLoading && community.data === null,\n  };\n\n  const form = useForm({\n    initialValues: boards[boardId],\n    stateKey: \"board\",\n    uninitialized: errors.noBoards || errors.noBoardId,\n  });\n\n  const editorToggle = (forcedState) =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      isEditorActive: forcedState ?? !lastKnownState.isEditorActive,\n    }));\n\n  const onEditingModeChange = ({ target: { value } }) =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      editingMode: value,\n    }));\n\n  const boardCreate = () =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      board: { hasUnsubmittedChanges: false, values: BoardConfigDefaults },\n      isEditorActive: true,\n    }));\n\n  const columnsCreateNew = ({ lastKnownValue }) =>\n    Object.keys(lastKnownValue).length < EditorSettings.maxColumnsNumber\n      ? {\n          ...(lastKnownValue ?? {}),\n\n          ...withUUIDIndex({\n            description: \"\",\n            labelSearchTerms: [],\n            title: \"New column\",\n          }),\n        }\n      : lastKnownValue;\n\n  const columnsDeleteById =\n    (id) =>\n    ({ lastKnownValue }) =>\n      Object.fromEntries(\n        Object.entries(lastKnownValue).filter(([columnId]) => columnId !== id)\n      );\n\n  const onSubmit = () =>\n    DevHub.edit_community_github({\n      handle: communityHandle,\n\n      github: JSON.stringify({\n        kanbanBoards: {\n          ...boards,\n          [form.values.id]: form.values,\n        },\n      }),\n    });\n\n  const formElement =\n    Object.keys(form.values).length > 0 ? (\n      <>\n        <div className=\"d-flex gap-3 flex-column flex-lg-row\">\n          {widget(\n            \"components.molecule.text-input\",\n            {\n              className: \"flex-shrink-0\",\n              key: `${form.values.id}-title`,\n              label: \"Title\",\n              onChange: form.update({ path: [\"title\"] }),\n              placeholder: \"NEAR Protocol NEPs\",\n              value: form.values.title,\n            },\n            `${form.values.id}-title`\n          )}\n\n          {widget(\"components.molecule.text-input\", {\n            className: \"w-100\",\n            key: `${form.values.id}-repoURL`,\n            label: \"GitHub repository URL\",\n            onChange: form.update({ path: [\"repoURL\"] }),\n            placeholder: \"https://github.com/example-org/example-repo\",\n            value: form.values.repoURL,\n          })}\n        </div>\n\n        <div className=\"d-flex gap-3 flex-column flex-lg-row\">\n          <CompactContainer className=\"d-flex gap-3 flex-column justify-content-start p-2\">\n            <span\n              className=\"d-inline-flex gap-2\"\n              id={`${form.values.id}-dataTypesIncluded`}\n            >\n              <i className=\"bi bi-ticket-fill\" />\n              <span>Ticket type</span>\n            </span>\n\n            {Object.entries(form.values.dataTypesIncluded).map(\n              ([typeName, enabled]) =>\n                widget(\n                  \"components.atom.toggle\",\n\n                  {\n                    active: enabled,\n                    className: \"w-100\",\n                    key: typeName,\n                    label: typeName,\n\n                    onSwitch: form.update({\n                      path: [\"dataTypesIncluded\", typeName],\n                    }),\n                  },\n\n                  typeName\n                )\n            )}\n          </CompactContainer>\n\n          <CompactContainer className=\"d-flex gap-3 flex-column justify-content-start p-2\">\n            <span\n              className=\"d-inline-flex gap-2\"\n              id={`${form.values.id}-dataTypesIncluded`}\n            >\n              <i class=\"bi bi-cone-striped\" />\n              <span>Ticket state</span>\n            </span>\n\n            {widget(\"components.molecule.button-switch\", {\n              currentValue: form.values.ticketState,\n              key: \"ticketState\",\n              onChange: form.update({ path: [\"ticketState\"] }),\n\n              options: [\n                { label: \"All\", value: \"all\" },\n                { label: \"Open\", value: \"open\" },\n                { label: \"Closed\", value: \"closed\" },\n              ],\n\n              title: \"Editing mode selection\",\n            })}\n          </CompactContainer>\n\n          {widget(\"components.molecule.text-input\", {\n            className: \"w-100\",\n            inputProps: { className: \"h-75\" },\n            key: `${form.values.id}-description`,\n            label: \"Description\",\n            multiline: true,\n            onChange: form.update({ path: [\"description\"] }),\n            placeholder: \"Latest NEAR Enhancement Proposals by status.\",\n            value: form.values.description,\n          })}\n        </div>\n\n        <div className=\"d-flex align-items-center justify-content-between\">\n          <span className=\"d-inline-flex gap-2 m-0\">\n            <i className=\"bi bi-list-task\" />\n            <span>Columns ( max. 6 )</span>\n          </span>\n        </div>\n\n        <div className=\"d-flex flex-column align-items-center gap-3\">\n          {Object.values(form.values.columns).map(\n            ({ id, description, labelSearchTerms, title }) => (\n              <div\n                className=\"d-flex gap-3 border border-secondary rounded-4 p-3 w-100\"\n                key={id}\n              >\n                <div className=\"d-flex flex-column gap-1 w-100\">\n                  {widget(\"components.molecule.text-input\", {\n                    className: \"flex-grow-1\",\n                    key: `${form.values.id}-column-${id}-title`,\n                    label: \"Title\",\n                    onChange: form.update({ path: [\"columns\", id, \"title\"] }),\n                    placeholder: \"\ud83d\udc40 Review\",\n                    value: title,\n                  })}\n\n                  {widget(\"components.molecule.text-input\", {\n                    className: \"flex-grow-1\",\n                    key: `${form.values.id}-column-${id}-description`,\n                    label: \"Description\",\n\n                    onChange: form.update({\n                      path: [\"columns\", id, \"description\"],\n                    }),\n\n                    placeholder:\n                      \"NEPs that need a review by Subject Matter Experts.\",\n\n                    value: description,\n                  })}\n\n                  {widget(\"components.molecule.text-input\", {\n                    format: \"comma-separated\",\n                    key: `${form.values.id}-column-${title}-labelSearchTerms`,\n\n                    label: `Search terms for all the labels\n\t\t\t\t\t\t\t\t\t\t\tMUST be presented in included tickets`,\n\n                    onChange: form.update({\n                      path: [\"columns\", id, \"labelSearchTerms\"],\n                    }),\n\n                    placeholder: \"WG-, draft, review, proposal, ...\",\n                    value: labelSearchTerms.join(\", \"),\n                  })}\n                </div>\n\n                <div\n                  className=\"d-flex flex-column gap-3 border-start p-3 pe-0\"\n                  style={{ marginTop: -16, marginBottom: -16 }}\n                >\n                  <button\n                    className=\"btn btn-outline-danger shadow\"\n                    onClick={form.update({\n                      path: [\"columns\"],\n                      via: columnsDeleteById(id),\n                    })}\n                    title=\"Delete column\"\n                  >\n                    <i className=\"bi bi-trash-fill\" />\n                  </button>\n                </div>\n              </div>\n            )\n          )}\n        </div>\n      </>\n    ) : null;\n\n  return community.data === null || (!errors.noBoards && errors.noBoardId) ? (\n    <div>\n      {(community.isLoading && \"Loading...\") ||\n        (!errors.noBoards && errors.noBoardId\n          ? \"Error: board id not found in editor props.\"\n          : errors.noCommunity &&\n            `Community with handle ${communityHandle} not found.`)}\n    </div>\n  ) : (\n    <div className=\"d-flex flex-column gap-4\">\n      {state.isEditorActive && Object.keys(form.values).length > 0 ? (\n        <AttractableDiv className=\"d-flex flex-column gap-3 p-3 w-100 rounded-4\">\n          <div className=\"d-flex align-items-center justify-content-between gap-3\">\n            <h5 className=\"h5 d-inline-flex gap-2 m-0\">\n              <i className=\"bi bi-wrench-adjustable-circle-fill\" />\n              <span>Board configuration</span>\n            </h5>\n\n            {widget(\"components.molecule.button-switch\", {\n              currentValue: state.editingMode,\n              key: \"editingMode\",\n              onChange: onEditingModeChange,\n\n              options: [\n                { label: \"Form\", value: \"form\" },\n                { label: \"JSON\", value: \"JSON\" },\n              ],\n\n              title: \"Editing mode selection\",\n            })}\n          </div>\n\n          {state.editingMode === \"form\" ? (\n            formElement\n          ) : (\n            <div className=\"d-flex flex-column flex-grow-1 border-0 bg-transparent w-100\">\n              <textarea\n                className=\"form-control\"\n                disabled\n                rows=\"12\"\n                type=\"text\"\n                value={JSON.stringify(form.values ?? {}, null, \"\\t\")}\n              />\n            </div>\n          )}\n\n          <div className=\"d-flex align-items-center justify-content-end gap-3\">\n            <button\n              className=\"btn shadow btn-outline-secondary d-inline-flex gap-2 me-auto\"\n              disabled={\n                Object.keys(form.values.columns).length >=\n                EditorSettings.maxColumnsNumber\n              }\n              onClick={form.update({\n                path: [\"columns\"],\n                via: columnsCreateNew,\n              })}\n            >\n              <i className=\"bi bi-plus-lg\" />\n              <span>New column</span>\n            </button>\n\n            <button\n              className=\"btn btn-outline-danger border-0 d-inline-flex gap-2 align-items-center\"\n              onClick={() => editorToggle(false)}\n              style={{ width: \"fit-content\" }}\n            >\n              <span>Cancel</span>\n            </button>\n\n            <button\n              disabled={false}\n              className=\"btn shadow btn-success d-inline-flex gap-2 align-items-center\"\n              onClick={onSubmit}\n              style={{ width: \"fit-content\" }}\n            >\n              <i className=\"bi bi-cloud-arrow-up-fill\" />\n              <span>Save</span>\n            </button>\n          </div>\n        </AttractableDiv>\n      ) : null}\n\n      {Object.keys(form.values).length > 0 ? (\n        widget(\"entity.team-board.github-kanban\", {\n          ...form.values,\n          editorTrigger: () => editorToggle(true),\n          isEditable: Viewer.can.editCommunity(community.data),\n          pageURL,\n        })\n      ) : (\n        <div\n          className=\"d-flex flex-column align-items-center justify-content-center gap-4\"\n          style={{ height: 384 }}\n        >\n          <h5 className=\"h5 d-inline-flex gap-2 m-0\">\n            This community doesn't have GitHub integrations\n          </h5>\n\n          {Viewer.can.editCommunity(community.data) ? (\n            <button\n              className=\"btn shadow btn-primary d-inline-flex gap-2\"\n              onClick={boardCreate}\n            >\n              <i className=\"bi bi-kanban-fill\" />\n              <span>Create board</span>\n            </button>\n          ) : null}\n        </div>\n      )}\n    </div>\n  );\n};\n\nreturn GithubKanbanBoardEditor(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thomasguntenaar.near/widget/gigs-board.feature.github-integration.kanban-board-editor", "fact_widget_deployments_id": "332e0ffcc313eedcc32f666683b2433c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 7}