{"tx_hash": "EqRscUJNnUpk9jTTbqZS6E7577YXmxfApn7VooAem6bh", "action_id_social": "6ZzrtDD2EQMStkR1SnpfNxkj4ThWWZULsPXcwS2Kfj2r-0-widget", "block_id": 96614893, "block_timestamp": "2023-07-16T14:51:35.318Z", "signer_id": "thomasguntenaar.near", "widget_name": "gigs-board.feature.github-integration.kanban-board-editor", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/form\" */\n/**\n *! TODO: Extract into separate library module\n *! once `useForm` is converted into a form factory widget\n */\nconst traversalUpdate = ({\n  input,\n  target: treeOrBranch,\n  path: [currentBranchKey, ...remainingBranch],\n  params,\n  via: nodeUpdate,\n}) => ({\n  ...treeOrBranch,\n\n  [currentBranchKey]:\n    remainingBranch.length > 0\n      ? traversalUpdate({\n          input,\n\n          target:\n            typeof treeOrBranch[currentBranchKey] === \"object\"\n              ? treeOrBranch[currentBranchKey]\n              : {\n                  ...((treeOrBranch[currentBranchKey] ?? null) !== null\n                    ? { __archivedLeaf__: treeOrBranch[currentBranchKey] }\n                    : {}),\n                },\n\n          path: remainingBranch,\n          via: nodeUpdate,\n        })\n      : nodeUpdate({\n          input,\n          lastKnownState: treeOrBranch[currentBranchKey],\n          params,\n        }),\n});\n\nconst fieldDefaultUpdate = ({\n  input,\n  lastKnownState,\n  params: { arrayDelimiter },\n}) => {\n  switch (typeof input) {\n    case \"boolean\":\n      return input;\n\n    case \"object\":\n      return Array.isArray(input) && typeof lastKnownState === \"string\"\n        ? input.join(arrayDelimiter ?? \",\")\n        : input;\n\n    case \"string\":\n      return Array.isArray(lastKnownState)\n        ? input.split(arrayDelimiter ?? \",\").map((string) => string.trim())\n        : input;\n\n    default: {\n      if ((input ?? null) === null) {\n        switch (typeof lastKnownState) {\n          case \"boolean\":\n            return !lastKnownState;\n\n          default:\n            return lastKnownState;\n        }\n      } else return input;\n    }\n  }\n};\n\nconst useForm = ({ stateKey: formStateKey }) => ({\n  formState: state[formStateKey],\n\n  formUpdate:\n    ({ path: fieldPath, via: fieldCustomUpdate, ...params }) =>\n    (fieldInput) =>\n      State.update((lastKnownState) =>\n        traversalUpdate({\n          input: fieldInput?.target?.value ?? fieldInput,\n          target: lastKnownState,\n          path: [formStateKey, ...fieldPath],\n          params,\n\n          via:\n            typeof fieldCustomUpdate === \"function\"\n              ? fieldCustomUpdate\n              : fieldDefaultUpdate,\n        })\n      ),\n});\n/* END_INCLUDE: \"core/lib/form\" */\n/* INCLUDE: \"core/lib/gui/attractable\" */\nconst AttractableDiv = styled.div`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst AttractableLink = styled.a`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst AttractableImage = styled.img`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n/* END_INCLUDE: \"core/lib/gui/attractable\" */\n/* INCLUDE: \"core/lib/uuid\" */\nconst uuid = () =>\n  [Date.now().toString(16)]\n    .concat(\n      Array.from(\n        { length: 4 },\n        () => Math.floor(Math.random() * 0xffffffff) & 0xffffffff\n      ).map((value) => value.toString(16))\n    )\n    .join(\"-\");\n\nconst uuidIndexed = (data) => {\n  const id = uuid();\n\n  return Object.fromEntries([[id, { ...data, id }]]);\n};\n/* END_INCLUDE: \"core/lib/uuid\" */\n/* INCLUDE: \"core/adapter/dev-hub\" */\nconst contractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst DevHub = {\n  edit_community_github: ({ handle, github }) =>\n    Near.call(contractAccountId, \"edit_community_github\", { handle, github }) ??\n    null,\n\n  get_access_control_info: () =>\n    Near.view(contractAccountId, \"get_access_control_info\") ?? null,\n\n  get_all_authors: () =>\n    Near.view(contractAccountId, \"get_all_authors\") ?? null,\n\n  get_all_communities: () =>\n    Near.view(contractAccountId, \"get_all_communities\") ?? null,\n\n  get_all_labels: () => Near.view(contractAccountId, \"get_all_labels\") ?? null,\n\n  get_community: ({ handle }) =>\n    Near.view(contractAccountId, \"get_community\", { handle }) ?? null,\n\n  get_post: ({ post_id }) =>\n    Near.view(contractAccountId, \"get_post\", { post_id }) ?? null,\n\n  get_posts_by_author: ({ author }) =>\n    Near.view(contractAccountId, \"get_posts_by_author\", { author }) ?? null,\n\n  get_posts_by_label: ({ label }) =>\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? null,\n\n  get_root_members: () =>\n    Near.view(contractAccountId, \"get_root_members\") ?? null,\n};\n/* END_INCLUDE: \"core/adapter/dev-hub\" */\n\nconst CompactContainer = styled.div`\n  width: fit-content !important;\n  max-width: 100%;\n`;\n\nconst dataTypesLocked = {\n  Issue: true,\n  PullRequest: true,\n};\n\nconst boardConfigDefaults = {\n  id: uuid(),\n  columns: {},\n  dataTypesIncluded: { Issue: false, PullRequest: true },\n  description: \"\",\n  repoURL: \"\",\n  ticketState: \"all\",\n  title: \"\",\n};\n\nconst GithubKanbanBoardEditor = ({ communityHandle, pageURL }) => {\n  const communityData = DevHub.get_community({ handle: communityHandle });\n\n  if (communityData === null) {\n    return <div>Loading...</div>;\n  }\n\n  const communityGitHubKanbanBoards =\n    JSON.parse(communityData.github)?.kanbanBoards ?? {};\n\n  State.init({\n    boardConfig: null,\n    editingMode: \"form\",\n    isEditingAllowed: true, // According to user permission level\n    isEditorActive: false,\n  });\n\n  const onEditorToggle = (forcedState) =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      isEditorActive: forcedState ?? !lastKnownState.isEditorActive,\n    }));\n\n  const onEditingModeChange = ({ target: { value } }) =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      editingMode: value,\n    }));\n\n  if (\n    state.boardConfig === null &&\n    Object.keys(communityGitHubKanbanBoards).length > 0\n  ) {\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      boardConfig: Object.values(communityGitHubKanbanBoards)[0],\n    }));\n  }\n\n  const { formState, formUpdate } = useForm({ stateKey: \"boardConfig\" });\n\n  const boardsCreateNew = () =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      boardConfig: boardConfigDefaults,\n      isEditorActive: true,\n    }));\n\n  const columnsCreateNew = ({ lastKnownState }) =>\n    Object.keys(lastKnownState).length < 6\n      ? {\n          ...lastKnownState,\n\n          ...uuidIndexed({\n            description: \"\",\n            labelSearchTerms: [],\n            title: \"New column\",\n          }),\n        }\n      : lastKnownState;\n\n  const columnsDeleteById =\n    (id) =>\n    ({ lastKnownState }) =>\n      Object.fromEntries(\n        Object.entries(lastKnownState).filter(([columnId]) => columnId !== id)\n      );\n\n  const onSubmit = () =>\n    DevHub.edit_community_github({\n      handle: communityHandle,\n\n      github: JSON.stringify({\n        kanbanBoards: {\n          ...communityGitHubKanbanBoards,\n          [formState.id]: formState,\n        },\n      }),\n    });\n\n  const form =\n    formState !== null ? (\n      <>\n        <div className=\"d-flex gap-3 flex-column flex-lg-row\">\n          {widget(\n            \"components.molecule.text-input\",\n            {\n              className: \"flex-shrink-0\",\n              key: `${formState.id}-title`,\n              label: \"Title\",\n              onChange: formUpdate({ path: [\"title\"] }),\n              placeholder: \"NEAR Protocol NEPs\",\n              value: formState.title,\n            },\n            `${formState.id}-title`\n          )}\n\n          {widget(\"components.molecule.text-input\", {\n            className: \"w-100\",\n            key: `${formState.id}-repoURL`,\n            label: \"GitHub repository URL\",\n            onChange: formUpdate({ path: [\"repoURL\"] }),\n            placeholder: \"https://github.com/example-org/example-repo\",\n            value: formState.repoURL,\n          })}\n        </div>\n\n        <div className=\"d-flex gap-3 flex-column flex-lg-row\">\n          <CompactContainer className=\"d-flex gap-3 flex-column justify-content-start p-2\">\n            <span\n              className=\"d-inline-flex gap-2\"\n              id={`${formState.id}-dataTypesIncluded`}\n            >\n              <i className=\"bi bi-database-fill\" />\n              <span>Tracked data</span>\n            </span>\n\n            {Object.entries(formState.dataTypesIncluded).map(\n              ([typeName, enabled]) =>\n                widget(\n                  \"components.atom.toggle\",\n\n                  {\n                    active: enabled,\n                    className: \"w-100\",\n                    disabled: dataTypesLocked[typeName],\n                    key: typeName,\n                    label: typeName,\n\n                    onSwitch: formUpdate({\n                      path: [\"dataTypesIncluded\", typeName],\n                    }),\n                  },\n\n                  typeName\n                )\n            )}\n          </CompactContainer>\n\n          <CompactContainer className=\"d-flex gap-3 flex-column justify-content-start p-2\">\n            <span\n              className=\"d-inline-flex gap-2\"\n              id={`${formState.id}-dataTypesIncluded`}\n            >\n              <i class=\"bi bi-database-fill\" />\n              <span>Ticket state</span>\n            </span>\n\n            {widget(\"components.molecule.button-switch\", {\n              currentValue: formState.ticketState,\n              key: \"ticketState\",\n              onChange: formUpdate({ path: [\"ticketState\"] }),\n\n              options: [\n                { label: \"All\", value: \"all\" },\n                { label: \"Open\", value: \"open\" },\n                { label: \"Closed\", value: \"closed\" },\n              ],\n\n              title: \"Editing mode selection\",\n            })}\n          </CompactContainer>\n\n          {widget(\"components.molecule.text-input\", {\n            className: \"w-100\",\n            inputProps: { className: \"h-75\" },\n            key: `${formState.id}-description`,\n            label: \"Description\",\n            multiline: true,\n            onChange: formUpdate({ path: [\"description\"] }),\n            placeholder: \"Latest NEAR Enhancement Proposals by status.\",\n            value: formState.description,\n          })}\n        </div>\n\n        <div className=\"d-flex align-items-center justify-content-between\">\n          <span className=\"d-inline-flex gap-2 m-0\">\n            <i className=\"bi bi-list-task\" />\n            <span>Columns ( max. 6 )</span>\n          </span>\n        </div>\n\n        <div className=\"d-flex flex-column align-items-center gap-3\">\n          {Object.values(formState.columns).map(\n            ({ id, description, labelSearchTerms, title }) => (\n              <div\n                className=\"d-flex gap-3 border border-secondary rounded-4 p-3 w-100\"\n                key={id}\n              >\n                <div className=\"d-flex flex-column gap-1 w-100\">\n                  {widget(\"components.molecule.text-input\", {\n                    className: \"flex-grow-1\",\n                    key: `${formState.id}-column-${id}-title`,\n                    label: \"Title\",\n                    onChange: formUpdate({ path: [\"columns\", id, \"title\"] }),\n                    placeholder: \"\ud83d\udc40 Review\",\n                    value: title,\n                  })}\n\n                  {widget(\"components.molecule.text-input\", {\n                    className: \"flex-grow-1\",\n                    key: `${formState.id}-column-${id}-description`,\n                    label: \"Description\",\n\n                    onChange: formUpdate({\n                      path: [\"columns\", id, \"description\"],\n                    }),\n\n                    placeholder:\n                      \"NEPs that need a review by Subject Matter Experts.\",\n\n                    value: description,\n                  })}\n\n                  {widget(\"components.molecule.text-input\", {\n                    format: \"comma-separated\",\n                    key: `${formState.id}-column-${title}-labelSearchTerms`,\n\n                    label: `Search terms for all the labels\n\t\t\t\t\t\t\t\t\t\t\tMUST be presented in included tickets`,\n\n                    onChange: formUpdate({\n                      path: [\"columns\", id, \"labelSearchTerms\"],\n                    }),\n\n                    placeholder: \"WG-, draft, review, proposal, ...\",\n                    value: labelSearchTerms.join(\", \"),\n                  })}\n                </div>\n\n                <div\n                  className=\"d-flex flex-column gap-3 border-start p-3 pe-0\"\n                  style={{ marginTop: -16, marginBottom: -16 }}\n                >\n                  <button\n                    className=\"btn btn-outline-danger shadow\"\n                    onClick={formUpdate({\n                      path: [\"columns\"],\n                      via: columnsDeleteById(id),\n                    })}\n                    title=\"Delete column\"\n                  >\n                    <i className=\"bi bi-trash-fill\" />\n                  </button>\n                </div>\n              </div>\n            )\n          )}\n        </div>\n      </>\n    ) : null;\n\n  return (\n    <div className=\"d-flex flex-column gap-4\">\n      {state.isEditorActive && formState !== null ? (\n        <AttractableDiv className=\"d-flex flex-column gap-3 p-3 w-100 rounded-4\">\n          <div className=\"d-flex align-items-center justify-content-between gap-3\">\n            <h5 className=\"h5 d-inline-flex gap-2 m-0\">\n              <i className=\"bi bi-wrench-adjustable-circle-fill\" />\n              <span>Board configuration</span>\n            </h5>\n\n            {widget(\"components.molecule.button-switch\", {\n              currentValue: state.editingMode,\n              key: \"editingMode\",\n              onChange: onEditingModeChange,\n\n              options: [\n                { label: \"Form\", value: \"form\" },\n                { label: \"JSON\", value: \"JSON\" },\n              ],\n\n              title: \"Editing mode selection\",\n            })}\n          </div>\n\n          {state.editingMode === \"form\" ? (\n            form\n          ) : (\n            <div className=\"d-flex flex-column flex-grow-1 border-0 bg-transparent w-100\">\n              <textarea\n                className=\"form-control\"\n                disabled\n                rows=\"12\"\n                type=\"text\"\n                value={JSON.stringify(formState, null, \"\\t\")}\n              />\n            </div>\n          )}\n\n          <div className=\"d-flex align-items-center justify-content-end gap-3\">\n            <button\n              className=\"btn shadow btn-outline-secondary d-inline-flex gap-2 me-auto\"\n              disabled={Object.keys(formState.columns).length >= 6}\n              onClick={formUpdate({ path: [\"columns\"], via: columnsCreateNew })}\n            >\n              <i className=\"bi bi-plus-lg\" />\n              <span>New column</span>\n            </button>\n\n            <button\n              className=\"btn btn-outline-danger border-0 d-inline-flex gap-2 align-items-center\"\n              onClick={() => onEditorToggle(false)}\n              style={{ width: \"fit-content\" }}\n            >\n              <span>Cancel</span>\n            </button>\n\n            <button\n              disabled={false}\n              className=\"btn shadow btn-success d-inline-flex gap-2 align-items-center\"\n              onClick={onSubmit}\n              style={{ width: \"fit-content\" }}\n            >\n              <i className=\"bi bi-cloud-arrow-up-fill\" />\n              <span>Save</span>\n            </button>\n          </div>\n        </AttractableDiv>\n      ) : null}\n\n      {state.boardConfig !== null ? (\n        widget(\"entity.team-board.github-kanban\", {\n          ...state.boardConfig,\n          editorTrigger: () => onEditorToggle(true),\n          isEditable: state.isEditingAllowed,\n          pageURL,\n        })\n      ) : (\n        <div\n          className=\"d-flex flex-column align-items-center justify-content-center gap-4\"\n          style={{ height: 384 }}\n        >\n          <h5 className=\"h5 d-inline-flex gap-2 m-0\">\n            This community doesn't have GitHub integrations\n          </h5>\n\n          <button\n            className=\"btn shadow btn-primary d-inline-flex gap-2\"\n            onClick={boardsCreateNew}\n          >\n            <i className=\"bi bi-kanban-fill\" />\n            <span>Create board</span>\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nreturn GithubKanbanBoardEditor(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thomasguntenaar.near/widget/gigs-board.feature.github-integration.kanban-board-editor", "fact_widget_deployments_id": "e86016372228dac1dde00f92612d82fd", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}