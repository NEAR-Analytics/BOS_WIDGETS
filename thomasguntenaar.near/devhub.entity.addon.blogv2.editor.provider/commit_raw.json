{"tx_hash": "Gk93cghWo9EMzWnDbWs8FwM4D3Dz9nXX7viJc6XvXsn6", "action_id_social": "87e32gicCEJyhEh4YSyMs5dJ5jkosYEQjbuUYgMfDudv-0-widget", "block_id": 120007517, "block_timestamp": "2024-05-29T17:10:42.942Z", "signer_id": "thomasguntenaar.near", "widget_name": "devhub.entity.addon.blogv2.editor.provider", "source_code": "const { getPost, setCommunitySocialDB } = VM.require(\n  \"thomasguntenaar.near/widget/core.adapter.devhub-contract\"\n);\n\nconst { generateRandom6CharUUID } = VM.require(\n  \"thomasguntenaar.near/widget/core.lib.stringUtils\"\n);\n\ngenerateRandom6CharUUID || (generateRandom6CharUUID = () => {});\n\nconst { Layout, handle, communityAddonId } = props;\n\nsetCommunitySocialDB = setCommunitySocialDB || (() => <></>);\ngetPost = getPost || (() => <></>);\n\nconst handleGetData = (v) => {\n  const id = transformString(v.title);\n  return blogData[id] || {};\n};\n\nconst [blogData, setBlogData] = useState([]);\n\nconst initialBlogData =\n  Social.get([`${handle}.community.devhub.near/blog/**`], \"final\") || {};\n\nuseEffect(() => {\n  if (initialBlogData) {\n    setBlogData(initialBlogData);\n  }\n}, [initialBlogData]);\n\nfunction checkHashes() {\n  if (transactionHashes) {\n    // Fetch new blog data\n    const subscribeToBlogForNextFifteenSec = (tries) => {\n      if (tries >= 5) {\n        return;\n      }\n      Near.asyncView(\"social.near\", \"get\", {\n        keys: [`${handle}.community.devhub.near/blog/**`],\n      }).then((result) => {\n        try {\n          const newBlogPosts = result[`${handle}.community.devhub.near`].blog;\n          // Check the number of blogs in this instance with a different status\n          if (\n            flattenBlogObject(newBlogPosts).length !==\n            flattenBlogObject(blogData).length\n          ) {\n            setBlogData(newBlogPosts);\n          } else {\n            setTimeout(() => {\n              subscribeToBlogForNextFifteenSec(tries + 1);\n            }, 3000);\n          }\n        } catch (e) {}\n      });\n    };\n    // After a second subscribe to the blog data\n    setTimeout(() => {\n      subscribeToBlogForNextFifteenSec(0);\n    }, 1000);\n  }\n}\n\nuseEffect(() => {\n  // Only render one time\n  checkHashes();\n}, []);\n\n// Show only published blogs\nconst processedData = Object.keys(blogData)\n  .map((key) => {\n    return {\n      ...blogData[key].metadata,\n      id: key,\n      content: blogData[key][\"\"],\n    };\n  })\n  // Every instance of the blog tab has its own blogs\n  .filter((blog) => blog.communityAddonId === communityAddonId)\n  // Sort by published date\n  .sort((blog1, blog2) => {\n    if (data.orderBy === \"timeasc\") {\n      return new Date(blog1.publishedAt) - new Date(blog2.publishedAt);\n    }\n    if (data.orderBy === \"alpha\") {\n      return (blog1.title || \"\").localCompare(blog2.title || \"\");\n    }\n    // timedesc is the default order\n    return new Date(blog2.publishedAt) - new Date(blog1.publishedAt);\n  });\n\nfunction transformString(str) {\n  // Convert the string to lowercase\n  const lowerCaseStr = str.toLowerCase();\n\n  // Replace spaces with hyphens\n  const transformedStr = lowerCaseStr.replace(/ /g, \"-\");\n\n  // Return the transformed string\n  return transformedStr;\n}\n\nconst handleOnSubmit = (v, isEdit) => {\n  let id = isEdit\n    ? v.id\n    : `${transformString(v.title)}-${generateRandom6CharUUID()}`;\n  let publishedAt = new Date(v.date).toISOString().slice(0, 10);\n\n  let metadata = {\n    title: v.title,\n    publishedAt,\n    status: v.status,\n    subtitle: v.subtitle,\n    description: v.description,\n    author: v.author,\n    category: v.category,\n    updatedAt: new Date().toISOString().slice(0, 10),\n  };\n\n  if (!isEdit) {\n    // Set this once when created\n    metadata.createdAt = new Date().toISOString().slice(0, 10);\n    metadata.communityAddonId = communityAddonId;\n  }\n\n  setCommunitySocialDB({\n    handle,\n    data: {\n      blog: {\n        [id]: {\n          \"\": v.content,\n          metadata,\n        },\n      },\n    },\n  });\n};\n\nconst handleOnDelete = (id) => {\n  setCommunitySocialDB({\n    handle,\n    data: {\n      blog: {\n        [id]: {\n          \"\": null,\n          metadata: {\n            title: null,\n            createdAt: null,\n            updatedAt: null,\n            publishedAt: null,\n            status: null,\n            subtitle: null,\n            description: null,\n            author: null,\n            id: null,\n            category: null,\n            communityAddonId: null,\n          },\n        },\n      },\n    },\n  });\n};\n\nreturn (\n  <Layout\n    data={processedData || []}\n    getData={handleGetData}\n    onSubmit={handleOnSubmit}\n    onDelete={handleOnDelete}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thomasguntenaar.near/widget/devhub.entity.addon.blogv2.editor.provider", "fact_widget_deployments_id": "96397233430e736639c509dec2751917", "inserted_timestamp": "2024-05-29T19:43:20.222Z", "modified_timestamp": "2024-05-29T19:43:20.222Z", "__row_index": 4}