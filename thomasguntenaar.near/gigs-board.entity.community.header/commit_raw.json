{"tx_hash": "44vHffJ9tY6UeFbcfi3oZXJa2arTkLX421rUaiX4CUa9", "action_id_social": "DmQjQUMZYzoxz13LpiLz1oorh5d41AKp9KdoNzPDT429-0-widget", "block_id": 100366798, "block_timestamp": "2023-09-04T09:53:02.626Z", "signer_id": "thomasguntenaar.near", "widget_name": "gigs-board.entity.community.header", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/struct\" */\nconst Struct = {\n  deepFieldUpdate: (\n    node,\n    { input, params, path: [nextNodeKey, ...remainingPath], via: toFieldValue }\n  ) => ({\n    ...node,\n\n    [nextNodeKey]:\n      remainingPath.length > 0\n        ? Struct.deepFieldUpdate(\n            Struct.typeMatch(node[nextNodeKey]) ||\n              Array.isArray(node[nextNodeKey])\n              ? node[nextNodeKey]\n              : {\n                  ...((node[nextNodeKey] ?? null) !== null\n                    ? { __archivedLeaf__: node[nextNodeKey] }\n                    : {}),\n                },\n\n            { input, path: remainingPath, via: toFieldValue }\n          )\n        : toFieldValue({\n            input,\n            lastKnownValue: node[nextNodeKey],\n            params,\n          }),\n  }),\n\n  isEqual: (input1, input2) =>\n    Struct.typeMatch(input1) && Struct.typeMatch(input2)\n      ? JSON.stringify(Struct.toOrdered(input1)) ===\n        JSON.stringify(Struct.toOrdered(input2))\n      : false,\n\n  toOrdered: (input) =>\n    Object.keys(input)\n      .sort()\n      .reduce((output, key) => ({ ...output, [key]: input[key] }), {}),\n\n  pick: (object, subsetKeys) =>\n    Object.fromEntries(\n      Object.entries(object ?? {}).filter(([key, _]) =>\n        subsetKeys.includes(key)\n      )\n    ),\n\n  typeMatch: (input) =>\n    input !== null && typeof input === \"object\" && !Array.isArray(input),\n};\n/* END_INCLUDE: \"core/lib/struct\" */\n/* INCLUDE: \"core/adapter/dev-hub\" */\nconst devHubAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst DevHub = {\n  edit_community_github: ({ handle, github }) =>\n    Near.call(devHubAccountId, \"edit_community_github\", { handle, github }) ??\n    null,\n\n  create_workspace: ({ author_community_handle, metadata }) =>\n    Near.call(devHubAccountId, \"create_workspace\", {\n      author_community_handle,\n      metadata,\n    }) ?? null,\n\n  delete_workspace: ({ id }) =>\n    Near.call(devHubAccountId, \"delete_workspace\", { id }) ?? null,\n\n  update_workspace_metadata: ({ metadata }) =>\n    Near.call(devHubAccountId, \"update_workspace_metadata\", { metadata }) ??\n    null,\n\n  get_workspace_views_metadata: ({ workspace_id }) =>\n    Near.view(devHubAccountId, \"get_workspace_views_metadata\", {\n      workspace_id,\n    }) ?? null,\n\n  create_workspace_view: ({ view }) =>\n    Near.call(devHubAccountId, \"create_workspace_view\", { view }) ?? null,\n\n  update_workspace_view: ({ view }) =>\n    Near.call(devHubAccountId, \"update_workspace_view\", { view }) ?? null,\n\n  delete_workspace_view: ({ id }) =>\n    Near.call(devHubAccountId, \"delete_workspace_view\", { id }) ?? null,\n\n  get_access_control_info: () =>\n    Near.view(devHubAccountId, \"get_access_control_info\") ?? null,\n\n  get_all_authors: () => Near.view(devHubAccountId, \"get_all_authors\") ?? null,\n\n  get_all_communities: () =>\n    Near.view(devHubAccountId, \"get_all_communities\") ?? null,\n\n  get_all_labels: () => Near.view(devHubAccountId, \"get_all_labels\") ?? null,\n\n  get_community: ({ handle }) =>\n    Near.view(devHubAccountId, \"get_community\", { handle }) ?? null,\n\n  get_post: ({ post_id }) =>\n    Near.view(devHubAccountId, \"get_post\", { post_id }) ?? null,\n\n  get_posts_by_author: ({ author }) =>\n    Near.view(devHubAccountId, \"get_posts_by_author\", { author }) ?? null,\n\n  get_posts_by_label: ({ label }) =>\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? null,\n\n  get_root_members: () =>\n    Near.view(devHubAccountId, \"get_root_members\") ?? null,\n\n  useQuery: ({ name, params }) => {\n    const initialState = { data: null, error: null, isLoading: true };\n\n    const cacheState = useCache(\n      () =>\n        Near.asyncView(devHubAccountId, [\"get\", name].join(\"_\"), params ?? {})\n          .then((response) => ({\n            ...initialState,\n            data: response ?? null,\n            isLoading: false,\n          }))\n          .catch((error) => ({\n            ...initialState,\n            error: props?.error ?? error,\n            isLoading: false,\n          })),\n\n      JSON.stringify({ name, params }),\n      { subscribe: true }\n    );\n\n    return cacheState === null ? initialState : cacheState;\n  },\n};\n/* END_INCLUDE: \"core/adapter/dev-hub\" */\n/* INCLUDE: \"entity/viewer\" */\nconst access_control_info = DevHub.useQuery({\n  name: \"access_control_info\",\n});\n\nconst Viewer = {\n  can: {\n    editCommunity: (communityData) =>\n      Struct.typeMatch(communityData) &&\n      (communityData.admins.includes(context.accountId) ||\n        Viewer.role.isDevHubModerator),\n  },\n\n  workspacePermissions: (workspaceId) => {\n    const workspace_id = parseInt(workspaceId);\n\n    const defaultPermissions = { can_configure: false };\n\n    return !isNaN(workspace_id)\n      ? Near.view(devHubAccountId, \"get_account_workspace_permissions\", {\n          account_id: context.accountId,\n          workspace_id: workspace_id,\n        }) ?? defaultPermissions\n      : defaultPermissions;\n  },\n\n  role: {\n    isDevHubModerator:\n      access_control_info.data === null || access_control_info.isLoading\n        ? false\n        : access_control_info.data.members_list[\n            \"team:moderators\"\n          ]?.children?.includes?.(context.accountId) ?? false,\n  },\n};\n/* END_INCLUDE: \"entity/viewer\" */\n\nconst Header = styled.div`\n  overflow: hidden;\n  background: #fff;\n  margin-bottom: 25px;\n`;\n\nconst NavUnderline = styled.ul`\n  border-bottom: 1px #eceef0 solid;\n\n  a {\n    color: #687076;\n    text-decoration: none;\n  }\n\n  a.active {\n    font-weight: bold;\n    color: #0c7283;\n    border-bottom: 4px solid #0c7283;\n  }\n`;\n\nconst Button = styled.button`\n  height: 40px;\n  font-size: 14px;\n  border-color: #e3e3e0;\n  background-color: #ffffff;\n`;\n\nconst Banner = styled.div`\n  max-width: 100%;\n  width: 1320px;\n  height: 240px;\n`;\n\nconst LogoImage = styled.img`\n  top: -50px;\n`;\n\nconst SizedDiv = styled.div`\n  width: 150px;\n  height: 100px;\n`;\n\nconst CommunityHeader = ({ activeTabTitle, handle }) => {\n  State.init({\n    copiedShareUrl: false,\n  });\n\n  const community = DevHub.useQuery({\n    name: \"community\",\n    params: { handle },\n  });\n\n  if (community.data === null && community.isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  const tabs = [\n    {\n      defaultActive: true,\n      iconClass: \"bi bi-house-door\",\n      route: \"community.activity\",\n      title: \"Activity\",\n    },\n\n    ...[community.data?.wiki1, community.data?.wiki2]\n      .filter((maybeWikiPage) => maybeWikiPage ?? false)\n      .map(({ name }, idx) => ({\n        params: { id: idx + 1 },\n        route: \"community.wiki\",\n        title: name,\n      })),\n\n    {\n      iconClass: \"bi bi-people-fill\",\n      route: \"community.teams\",\n      title: \"Teams\",\n    },\n\n    {\n      iconClass: \"bi bi-coin\",\n      route: \"community.sponsorship\",\n      title: \"Sponsorship\",\n    },\n\n    {\n      iconClass: \"bi bi-github\",\n      route: \"community.github\",\n      title: \"GitHub\",\n    },\n\n    ...((community.data?.telegram_handle?.length ?? 0) > 0\n      ? [\n          {\n            iconClass: \"bi bi-telegram\",\n            route: \"community.telegram\",\n            title: \"Telegram\",\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <Header className=\"d-flex flex-column gap-3\">\n      <Banner\n        className=\"object-fit-cover\"\n        style={{\n          background: `center / cover no-repeat url(${community.data.banner_url})`,\n        }}\n      />\n\n      <div className=\"d-md-flex d-block justify-content-between container\">\n        <div className=\"d-md-flex d-block align-items-end\">\n          <div className=\"position-relative\">\n            <SizedDiv>\n              <LogoImage\n                src={community.data.logo_url}\n                alt=\"Community logo\"\n                width=\"150\"\n                height=\"150\"\n                className=\"border border-3 border-white rounded-circle shadow position-absolute\"\n              />\n            </SizedDiv>\n          </div>\n\n          <div>\n            <div className=\"h1 pt-3 ps-3 text-nowrap\">\n              {community.data.name}\n            </div>\n\n            <div className=\"ps-3 pb-2 text-secondary\">\n              {community.data.description}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"d-flex align-items-end gap-3\">\n          {Viewer.can.editCommunity(community.data) ? (\n            <a\n              href={href(\"community.edit-info\", { handle })}\n              className={[\n                \"d-flex align-items-center gap-2 border border-1 rounded-pill px-3 py-2\",\n                \"text-decoration-none text-dark text-nowrap font-weight-bold fs-6\",\n              ].join(\" \")}\n            >\n              <i className=\"bi bi-gear\" />\n              <span>Edit information</span>\n            </a>\n          ) : null}\n\n          <OverlayTrigger\n            placement=\"top\"\n            overlay={<Tooltip>Copy URL to clipboard</Tooltip>}\n          >\n            <Button\n              type=\"button\"\n              className={[\n                \"d-flex align-items-center gap-2 border border-1 rounded-pill px-3 py-2\",\n                \"text-dark text-nowrap font-weight-bold fs-6\",\n              ].join(\" \")}\n              onMouseLeave={() => {\n                State.update({ copiedShareUrl: false });\n              }}\n              onClick={() => {\n                clipboard\n                  .writeText(\n                    \"https://near.org\" + href(\"community.activity\", { handle })\n                  )\n                  .then(() => {\n                    State.update({ copiedShareUrl: true });\n                  });\n              }}\n            >\n              {state.copiedShareUrl ? (\n                <i className=\"bi bi-16 bi-check\"></i>\n              ) : (\n                <i className=\"bi bi-16 bi-link-45deg\"></i>\n              )}\n\n              <span>Share</span>\n            </Button>\n          </OverlayTrigger>\n        </div>\n      </div>\n\n      <NavUnderline className=\"nav\">\n        {tabs.map(({ defaultActive, params, route, title }) =>\n          title ? (\n            <li className=\"nav-item\" key={title}>\n              <a\n                aria-current={defaultActive && \"page\"}\n                className={[\n                  \"d-inline-flex gap-2\",\n                  activeTabTitle === title ? \"nav-link active\" : \"nav-link\",\n                ].join(\" \")}\n                href={href(route, { handle, ...(params ?? {}) })}\n              >\n                <span>{title}</span>\n              </a>\n            </li>\n          ) : null\n        )}\n      </NavUnderline>\n    </Header>\n  );\n};\n\nreturn CommunityHeader(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thomasguntenaar.near/widget/gigs-board.entity.community.header", "fact_widget_deployments_id": "c6d77a4609e8ca9e883a7c890a49847d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 45}