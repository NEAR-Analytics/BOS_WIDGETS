{"tx_hash": "E3TdmH4UXf14JkX7248gJEh67jAxQEohCdwpBJiuQkn1", "action_id_social": "8dB8C9b2Y4vNGAWdydJTVuwPptL3RmhvsR3pnA6v4NTV-0-widget", "block_id": 120353767, "block_timestamp": "2024-06-03T14:49:44.181Z", "signer_id": "thomasguntenaar.near", "widget_name": "devhub.entity.proposal.LinkedProposalsDropdown", "source_code": "const { href } = VM.require(\"thomasguntenaar.near/widget/core.lib.url\");\nhref || (href = () => {});\n\nconst linkedProposals = props.linkedProposals;\nconst onChange = props.onChange;\nconst [selectedProposals, setSelectedProposals] = useState(linkedProposals);\nconst [proposalsOptions, setProposalsOptions] = useState([]);\nconst [searchProposalId, setSearchProposalId] = useState(\"\");\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql`;\nconst queryName =\n  \"polyprogrammist_near_devhub_prod_v1_proposals_with_latest_snapshot\";\nconst query = `query GetLatestSnapshot($offset: Int = 0, $limit: Int = 10, $where: ${queryName}_bool_exp = {}) {\n${queryName}(\n  offset: $offset\n  limit: $limit\n  order_by: {proposal_id: desc}\n  where: $where\n) {\n  name\n  proposal_id\n}\n}`;\n\nuseEffect(() => {\n  if (JSON.stringify(linkedProposals) !== JSON.stringify(selectedProposals)) {\n    setSelectedProposals(linkedProposals);\n  }\n}, [linkedProposals]);\n\nuseEffect(() => {\n  if (JSON.stringify(linkedProposals) !== JSON.stringify(selectedProposals)) {\n    onChange(selectedProposals);\n  }\n}, [selectedProposals]);\n\nfunction separateNumberAndText(str) {\n  const numberRegex = /\\d+/;\n\n  if (numberRegex.test(str)) {\n    const number = str.match(numberRegex)[0];\n    const text = str.replace(numberRegex, \"\").trim();\n    return { number: parseInt(number), text };\n  } else {\n    return { number: null, text: str.trim() };\n  }\n}\n\nconst buildWhereClause = () => {\n  let where = {};\n  const { number, text } = separateNumberAndText(searchProposalId);\n\n  if (number) {\n    where = { proposal_id: { _eq: number }, ...where };\n  }\n\n  if (text) {\n    where = { name: { _ilike: `%${text}%` }, ...where };\n  }\n\n  return where;\n};\n\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(QUERYAPI_ENDPOINT, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": `polyprogrammist_near` },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n}\n\nconst fetchProposals = () => {\n  const FETCH_LIMIT = 30;\n  const variables = {\n    limit: FETCH_LIMIT,\n    offset: 0,\n    where: buildWhereClause(),\n  };\n  fetchGraphQL(query, \"GetLatestSnapshot\", variables).then(async (result) => {\n    if (result.status === 200) {\n      if (result.body.data) {\n        const proposalsData =\n          result.body.data\n            .polyprogrammist_near_devhub_prod_v1_proposals_with_latest_snapshot;\n\n        const data = [];\n        for (const prop of proposalsData) {\n          data.push({\n            label: \"# \" + prop.proposal_id + \" : \" + prop.name,\n            value: prop.proposal_id,\n          });\n        }\n        setProposalsOptions(data);\n      }\n    }\n  });\n};\n\nuseEffect(() => {\n  fetchProposals();\n}, [searchProposalId]);\n\nreturn (\n  <>\n    {selectedProposals.map((proposal) => {\n      return (\n        <div className=\"d-flex gap-2 align-items-center\">\n          <a\n            className=\"text-decoration-underline flex-1\"\n            href={href({\n              widgetSrc: \"thomasguntenaar.near/widget/app\",\n              params: {\n                page: \"proposal\",\n                id: proposal.value,\n              },\n            })}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {proposal.label}\n          </a>\n          <div\n            className=\"cursor-pointer\"\n            onClick={() => {\n              const updatedLinkedProposals = selectedProposals.filter(\n                (item) => item.value !== proposal.value\n              );\n              setSelectedProposals(updatedLinkedProposals);\n            }}\n          >\n            <i class=\"bi bi-trash3-fill\"></i>\n          </div>\n        </div>\n      );\n    })}\n\n    <Widget\n      src=\"thomasguntenaar.near/widget/devhub.components.molecule.DropDownWithSearch\"\n      props={{\n        selectedValue: \"\",\n        onChange: (v) => {\n          if (!selectedProposals.some((item) => item.value === v.value)) {\n            setSelectedProposals([...selectedProposals, v]);\n          }\n        },\n        options: proposalsOptions,\n        showSearch: true,\n        searchInputPlaceholder: \"Search by Id\",\n        defaultLabel: \"Search proposals\",\n        searchByValue: true,\n        onSearch: (value) => {\n          setSearchProposalId(value);\n        },\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thomasguntenaar.near/widget/devhub.entity.proposal.LinkedProposalsDropdown", "fact_widget_deployments_id": "d7752153bdba53d67599125b6b458561", "inserted_timestamp": "2024-06-03T16:43:44.628Z", "modified_timestamp": "2024-06-03T16:43:44.628Z", "__row_index": 15}