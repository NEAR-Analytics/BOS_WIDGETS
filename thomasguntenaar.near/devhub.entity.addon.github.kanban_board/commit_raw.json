{"tx_hash": "AN81kzeiqRGR6F2VdS29j3uL7BBtJMXza56FB7SxZS81", "action_id_social": "2ytiTg8Z8Te6dbDZTNSvQyN75Y4N2ckVyA9dnBvuVjGY-0-widget", "block_id": 112256365, "block_timestamp": "2024-02-06T20:06:32.109Z", "signer_id": "thomasguntenaar.near", "widget_name": "devhub.entity.addon.github.kanban_board", "source_code": "const { DataRequest } = VM.require(\n  \"thomasguntenaar.near/widget/core.lib.data-request\"\n);\nDataRequest || (DataRequest = { paginated: () => {} });\n\nconst dataToColumns = (data, columns) =>\n  Object.values(columns).reduce(\n    (registry, column) => ({\n      ...registry,\n      [column.id]:\n        column.labelSearchTerms.length > 0\n          ? [\n              ...(registry[column.id] ?? []),\n              ...data.filter((ticket) =>\n                column.labelSearchTerms.every((searchTerm) =>\n                  searchTerm.length > 0\n                    ? ticket.labels.some((label) =>\n                        label.name\n                          .toLowerCase()\n                          .includes(searchTerm.toLowerCase())\n                      )\n                    : false\n                )\n              ),\n            ]\n          : [],\n    }),\n\n    {}\n  );\n\nconst withType = (type) => (data) => ({ ...data, type });\n\nconst GithubKanbanBoard = ({\n  columns,\n  title,\n  description,\n  repoURL,\n  ticketState,\n  dataTypesIncluded,\n  metadata,\n}) => {\n  const ticketStateFilter =\n    ticketState === \"open\" || ticketState === \"closed\" || ticketState === \"all\"\n      ? ticketState\n      : \"all\";\n\n  State.init({\n    ticketsByColumn: {},\n  });\n\n  if (repoURL) {\n    const pullRequests = dataTypesIncluded.PullRequest\n      ? DataRequest?.paginated(\n          (pageNumber) =>\n            useCache(\n              () =>\n                asyncFetch(\n                  `https://api.github.com/repos/${repoURL\n                    .split(\"/\")\n                    .slice(-2)\n                    .concat([\"pulls\"])\n                    .join(\n                      \"/\"\n                    )}?state=${ticketStateFilter}&per_page=100&page=${pageNumber}`\n                ).then((res) => res?.body),\n              repoURL + pageNumber,\n              { subscribe: false }\n            ),\n          { startWith: 1 }\n        )\n      : [];\n\n    const issues = dataTypesIncluded.Issue\n      ? (\n          DataRequest?.paginated(\n            (pageNumber) =>\n              useCache(\n                () =>\n                  asyncFetch(\n                    `https://api.github.com/repos/${repoURL\n                      .split(\"/\")\n                      .slice(-2)\n                      .concat([\"issues\"])\n                      .join(\n                        \"/\"\n                      )}?state=${ticketStateFilter}&per_page=100&page=${pageNumber}`\n                  ).then((res) => res?.body),\n                repoURL + pageNumber,\n                { subscribe: false }\n              ),\n            { startWith: 1 }\n          ) ?? []\n        )?.map(withType(\"Issue\"))\n      : [];\n\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      ticketsByColumn: dataToColumns(\n        [...(issues ?? []), ...(pullRequests ?? [])],\n        columns\n      ),\n    }));\n  }\n\n  return (\n    <div>\n      <div className=\"d-flex flex-column align-items-center gap-2 pb-4\">\n        <h5 className=\"h5 d-inline-flex gap-2 m-0\">\n          <span>{title}</span>\n        </h5>\n\n        <p className=\"m-0 py-1 text-secondary text-center\">{description}</p>\n      </div>\n\n      <div className=\"d-flex gap-3 w-100\" style={{ overflowX: \"auto\" }}>\n        {Object.keys(columns).length === 0 ? (\n          <div\n            className={[\n              \"d-flex align-items-center justify-content-center\",\n              \"w-100 text-black-50 opacity-50\",\n            ].join(\" \")}\n            style={{ height: 384 }}\n          >\n            No columns were created so far.\n          </div>\n        ) : null}\n        {Object.values(columns ?? {})?.map((column) => {\n          const tickets = state.ticketsByColumn[column.id] ?? [];\n\n          return (\n            <div\n              className=\"col-3\"\n              style={{ minWidth: \"300px\" }}\n              key={`column-${column.id}-view`}\n            >\n              <div className=\"card rounded-4\">\n                <div\n                  style={{ height: \"75vh\", overflow: \"scroll\" }}\n                  className={[\n                    \"card-body d-flex flex-column gap-3 p-2\",\n                    \"border border-1 rounded-4\",\n                  ].join(\" \")}\n                >\n                  <span className=\"d-flex flex-column py-1\">\n                    <h6 className=\"card-title h6 d-flex align-items-center gap-2 m-0\">\n                      {column.title}\n\n                      <span className=\"badge rounded-pill bg-secondary\">\n                        {tickets.length}\n                      </span>\n                    </h6>\n\n                    <p class=\"text-secondary m-0\">{column.description}</p>\n                  </span>\n\n                  <div class=\"d-flex flex-column gap-2\">\n                    {tickets.map((ticket) => (\n                      <Widget\n                        src={`thomasguntenaar.near/widget/devhub.entity.addon.${metadata.ticket.type}`}\n                        props={{ metadata: metadata.ticket, payload: ticket }}\n                        key={ticket.id}\n                      />\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nreturn GithubKanbanBoard(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thomasguntenaar.near/widget/devhub.entity.addon.github.kanban_board", "fact_widget_deployments_id": "c9172994051e6fe3d5b84bb6459ca8a9", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 38}