{"tx_hash": "GgENKQEfHGBHkbjSeXZo6rZZDU7jhdjDi14xNnnWZA5G", "action_id_social": "G9wgmjf2uNVXHSLauJgZtwHxgQGrdearkmFNLhtroagp-0-widget", "block_id": 103209720, "block_timestamp": "2023-10-12T14:35:00.142Z", "signer_id": "thomasguntenaar.near", "widget_name": "gigs-board.components.organism.addon-configurator", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/struct\" */\nconst Struct = {\n  deepFieldUpdate: (\n    node,\n    { input, params, path: [nextNodeKey, ...remainingPath], via: toFieldValue }\n  ) => ({\n    ...node,\n\n    [nextNodeKey]:\n      remainingPath.length > 0\n        ? Struct.deepFieldUpdate(\n            Struct.typeMatch(node[nextNodeKey]) ||\n              Array.isArray(node[nextNodeKey])\n              ? node[nextNodeKey]\n              : {\n                  ...((node[nextNodeKey] ?? null) !== null\n                    ? { __archivedLeaf__: node[nextNodeKey] }\n                    : {}),\n                },\n\n            { input, path: remainingPath, via: toFieldValue }\n          )\n        : toFieldValue({\n            input,\n            lastKnownValue: node[nextNodeKey],\n            params,\n          }),\n  }),\n\n  isEqual: (input1, input2) =>\n    Struct.typeMatch(input1) && Struct.typeMatch(input2)\n      ? JSON.stringify(Struct.toOrdered(input1)) ===\n        JSON.stringify(Struct.toOrdered(input2))\n      : false,\n\n  toOrdered: (input) =>\n    Object.keys(input)\n      .sort()\n      .reduce((output, key) => ({ ...output, [key]: input[key] }), {}),\n\n  pick: (object, subsetKeys) =>\n    Object.fromEntries(\n      Object.entries(object ?? {}).filter(([key, _]) =>\n        subsetKeys.includes(key)\n      )\n    ),\n\n  typeMatch: (input) =>\n    input !== null && typeof input === \"object\" && !Array.isArray(input),\n};\n/* END_INCLUDE: \"core/lib/struct\" */\n/* INCLUDE: \"core/lib/gui/form\" */\nconst defaultFieldUpdate = ({\n  input,\n  lastKnownValue,\n  params: { arrayDelimiter },\n}) => {\n  switch (typeof input) {\n    case \"boolean\":\n      return input;\n\n    case \"object\": {\n      if (Array.isArray(input) && typeof lastKnownValue === \"string\") {\n        return input.join(arrayDelimiter ?? \",\");\n      } else {\n        return Array.isArray(lastKnownValue)\n          ? [...lastKnownValue, ...input]\n          : { ...lastKnownValue, ...input };\n      }\n    }\n\n    case \"string\":\n      return Array.isArray(lastKnownValue)\n        ? input.split(arrayDelimiter ?? \",\").map((string) => string.trim())\n        : input;\n\n    default: {\n      if ((input ?? null) === null) {\n        switch (typeof lastKnownValue) {\n          case \"boolean\":\n            return !lastKnownValue;\n\n          default:\n            return lastKnownValue;\n        }\n      } else return input;\n    }\n  }\n};\n\nconst useForm = ({ initialValues, onUpdate, stateKey, uninitialized }) => {\n  const initialFormState = {\n    hasUnsubmittedChanges: false,\n    values: initialValues ?? {},\n  };\n\n  const formState = state[stateKey] ?? null,\n    isSynced = Struct.isEqual(formState?.values ?? {}, initialFormState.values);\n\n  const formReset = () =>\n    State.update((lastKnownComponentState) => ({\n      ...lastKnownComponentState,\n      [stateKey]: initialFormState,\n      hasUnsubmittedChanges: false,\n    }));\n\n  const formUpdate =\n    ({ path, via: customFieldUpdate, ...params }) =>\n    (fieldInput) => {\n      const updatedValues = Struct.deepFieldUpdate(\n        formState?.values ?? {},\n\n        {\n          input: fieldInput?.target?.value ?? fieldInput,\n          params,\n          path,\n\n          via:\n            typeof customFieldUpdate === \"function\"\n              ? customFieldUpdate\n              : defaultFieldUpdate,\n        }\n      );\n\n      State.update((lastKnownComponentState) => ({\n        ...lastKnownComponentState,\n\n        [stateKey]: {\n          hasUnsubmittedChanges: !Struct.isEqual(\n            updatedValues,\n            initialFormState.values\n          ),\n\n          values: updatedValues,\n        },\n      }));\n\n      if (\n        typeof onUpdate === \"function\" &&\n        !Struct.isEqual(updatedValues, initialFormState.values)\n      ) {\n        onUpdate(updatedValues);\n      }\n    };\n\n  if (\n    !uninitialized &&\n    (formState === null || (!formState.hasUnsubmittedChanges && !isSynced))\n  ) {\n    formReset();\n  }\n\n  return {\n    ...(formState ?? initialFormState),\n    isSynced,\n    reset: formReset,\n    stateKey,\n    update: formUpdate,\n  };\n};\n/* END_INCLUDE: \"core/lib/gui/form\" */\n\nconst ValueWrapper = styled.div`\n  & > p {\n    margin: 0;\n  }\n`;\n\nconst fieldParamsByType = {\n  array: {\n    name: \"components.molecule.text-input\",\n    inputProps: { type: \"text\" },\n  },\n\n  boolean: {\n    name: \"components.atom.switch\",\n  },\n\n  string: {\n    name: \"components.molecule.text-input\",\n    inputProps: { type: \"text\" },\n  },\n};\n\n// Helper function to determine field type\nconst getFieldType = (fieldValue) => {\n  if (Array.isArray(fieldValue)) return \"array\";\n  return typeof (fieldValue ?? \"\");\n};\n\n// Helper function to format field value based on type and format\nconst formatFieldValue = (fieldType, format, fieldValue, arrayDelimiter) => {\n  if (fieldType === \"array\" && format === \"comma-separated\") {\n    return fieldValue\n      .filter((string) => string.length > 0)\n      .join(arrayDelimiter ?? \",\");\n  }\n  return fieldValue;\n};\n\nfunction FormFields({ schema, form, isEditable }) {\n  // Render a single form field\n  const renderFormField = ({ fieldKey, fieldConfig, form, isEditable }) => {\n    const { format, inputProps, label, order, style, ...fieldProps } =\n      fieldConfig;\n    const fieldType = getFieldType(form.values[fieldKey]);\n    const isMarkdown = format === \"markdown\";\n    const value = formatFieldValue(fieldType, format, form.values[fieldKey]);\n\n    if (isEditable) {\n      // Render editable field\n      return widget(fieldParamsByType[fieldType].name, {\n        ...fieldProps,\n        className: \"w-100\",\n        format,\n        key: `${fieldKey}`,\n        label,\n        onChange: form.update({ path: [fieldKey] }),\n        style: { ...style, order },\n        value,\n        inputProps: {\n          ...(inputProps ?? {}),\n          ...(fieldParamsByType[fieldType].inputProps ?? {}),\n          tabIndex: order,\n        },\n      });\n    } else {\n      // Render non-editable field\n      const contentDisplayClassName =\n        (form.values[fieldKey]?.length ?? 0) > 0 ? \"\" : \"text-muted\";\n      return (\n        <div className=\"d-flex gap-3\" key={`${fieldKey}`} style={{ order }}>\n          <label className=\"fw-bold w-25\">{label}</label>\n          <ValueWrapper className={[contentDisplayClassName, \"w-75\"].join(\" \")}>\n            {!isMarkdown ? (\n              <span>{value?.toString?.() || \"none\"}</span>\n            ) : (form.values[fieldKey]?.length ?? 0) > 0 ? (\n              widget(\"components.molecule.markdown-viewer\", {\n                text: form.values[fieldKey],\n              })\n            ) : (\n              <span>none</span>\n            )}\n          </ValueWrapper>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div className={`d-flex flex-column ${!isEditable && \"gap-4\"}`}>\n      {Object.entries(schema).map(([fieldKey, fieldConfig], idx) => (\n        <div key={idx}>\n          {renderFormField({ fieldKey, fieldConfig, form, isEditable })}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nconst Configurator = ({\n  actionsAdditional,\n  cancelLabel,\n  classNames,\n  data,\n  isValid,\n  onCancel,\n  onSubmit,\n  schema,\n  isEditActive,\n  submitIcon,\n  submitLabel,\n}) => {\n  const initialValues = Struct.typeMatch(schema)\n    ? Struct.pick(data ?? {}, Object.keys(schema))\n    : {};\n\n  const form = useForm({ initialValues, stateKey: \"form\" });\n\n  const formFormattedValues =\n    typeof toFormatted === \"function\" ? toFormatted(form.values) : form.values;\n\n  const isFormValid =\n    typeof isValid === \"function\" ? isValid(formFormattedValues) : true;\n\n  const onCancelClick = () => {\n    form.reset();\n    if (typeof onCancel === \"function\") onCancel();\n  };\n\n  const onSubmitClick = () => {\n    if (typeof onSubmit === \"function\" && isFormValid) {\n      onSubmit(formFormattedValues);\n    }\n  };\n\n  return (\n    <>\n      <FormFields form={form} isEditable={isEditActive} schema={schema} />\n      {isEditActive && (\n        <div className=\"d-flex align-items-center justify-content-end gap-3 mt-auto\">\n          {actionsAdditional && (\n            <div className=\"me-auto\">{actionsAdditional}</div>\n          )}\n\n          {widget(\"components.molecule.button\", {\n            classNames: { root: \"btn-outline-danger shadow-none border-0\" },\n            label: cancelLabel ?? \"Reset\",\n            onClick: onCancelClick,\n          })}\n\n          {widget(\"components.molecule.button\", {\n            classNames: { root: classNames.submit ?? \"btn-success\" },\n            disabled: !form.hasUnsubmittedChanges || !isFormValid,\n\n            icon: submitIcon ?? {\n              kind: \"bootstrap-icon\",\n              variant: \"bi-check-circle-fill\",\n            },\n\n            label: submitLabel ?? \"Submit\",\n            onClick: onSubmitClick,\n          })}\n        </div>\n      )}\n    </>\n  );\n};\n\nreturn Configurator(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thomasguntenaar.near/widget/gigs-board.components.organism.addon-configurator", "fact_widget_deployments_id": "3a3570b971e5dac7b90c16b1fe410cf8", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}