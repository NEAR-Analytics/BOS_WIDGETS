{"tx_hash": "HvRMYYJ15iqL95m4fmCo5C6BDT6TtjAPHtMRA3UijF1U", "action_id_social": "76bMNapBb7pZuGFHFf75nwWAnKrw6fqWbKQZHCHDg1Vv-0-widget", "block_id": 107996918, "block_timestamp": "2023-12-15T09:58:06.335Z", "signer_id": "thomasguntenaar.near", "widget_name": "devhub.entity.addon.blog.editor.provider", "source_code": "const { getPost } =\n  VM.require(\"thomasguntenaar.near/widget/core.adapter.devhub-contract\") ||\n  (() => {});\n\nconst { Layout, handle } = props;\n\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\n\nconst fetchGraphQL = (operationsDoc, operationName, variables) => {\n  return fetch(QUERYAPI_ENDPOINT, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": `bo_near` },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n};\n\nconst queryName =\n  props.queryName ?? `bo_near_devhub_v17_posts_with_latest_snapshot`;\n\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\n    ${queryName}(\n      limit: $limit\n      offset: $offset\n      order_by: {block_height: desc}\n      where: $where\n    ) {\n      post_id\n    }\n  }\n`;\n\nconst includeLabels = [\"blog\", handle];\n\nconst buildWhereClause = () => {\n  let where = {};\n  if (props.author) {\n    where = { author_id: { _eq: props.author }, ...where };\n  }\n  if (props.term) {\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\n  }\n  if (includeLabels && Array.isArray(includeLabels)) {\n    const labelConditions = includeLabels.map((label) => ({\n      labels: { _contains: label },\n    }));\n\n    where = { _and: [...labelConditions, where] };\n  }\n  if (props.excludeLabels && Array.isArray(props.excludeLabels)) {\n    const labelConditions = props.excludeLabels.map((label) => ({\n      labels: { _nin: label },\n    }));\n\n    where = { _and: [...labelConditions, where] };\n  }\n  if (!props.recency) {\n    where = { parent_id: { _is_null: true }, ...where };\n  }\n  return where;\n};\n\nconst variables = { limit: DISPLAY_COUNT, offset, where: buildWhereClause() };\n\nconst posts = fetch(QUERYAPI_ENDPOINT, {\n  method: \"POST\",\n  headers: { \"x-hasura-role\": `bo_near` },\n  body: JSON.stringify({\n    query: query,\n    variables: variables,\n    operationName: \"DevhubPostsQuery\",\n  }),\n});\n\nconst handleOnChange = (v) => {\n  console.log(\"onChange\", v);\n};\n\nconst handleGetData = (v) => {\n  const postId = parseInt(v);\n  const post = getPost({ post_id: postId });\n  const description = JSON.parse(post.snapshot.description || \"null\") || {};\n\n  return {\n    id: postId,\n    ...description,\n  };\n};\n\nconst handleOnSubmit = (v, isEdit) => {\n  console.log(isEdit);\n  if (isEdit) {\n    Near.call({\n      contractName: \"devgovgigs.near\",\n      methodName: \"edit_post\",\n      args: {\n        id: v.id,\n        labels: [\"blog\", handle],\n        body: {\n          post_type: \"Comment\",\n          description: JSON.stringify(v),\n          comment_version: \"V2\",\n        },\n      },\n      gas: Big(10).pow(14),\n    });\n  } else {\n    Near.call({\n      contractName: \"devgovgigs.near\",\n      methodName: \"add_post\",\n      args: {\n        labels: [\"blog\", handle],\n        body: {\n          post_type: \"Comment\",\n          description: JSON.stringify(v),\n          comment_version: \"V2\",\n        },\n      },\n      gas: Big(10).pow(14),\n    });\n  }\n};\n\nconst handleOnCancel = (v) => {\n  console.log(\"onCancel\", v);\n};\n\nreturn (\n  <Layout\n    data={posts.body.data.bo_near_devhub_v36_posts_with_latest_snapshot || []}\n    getData={handleGetData}\n    onChange={handleOnChange}\n    onSubmit={handleOnSubmit}\n    onCancel={handleOnCancel}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thomasguntenaar.near/widget/devhub.entity.addon.blog.editor.provider", "fact_widget_deployments_id": "44e34d21bf76cca70f63ed317cb36697", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 8}