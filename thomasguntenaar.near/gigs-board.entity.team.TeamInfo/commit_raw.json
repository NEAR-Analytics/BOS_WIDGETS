{"tx_hash": "5WmCwRRPL9iw5LKYt6rMyjSDNPoXGAp8ds1AXeQobUtc", "action_id_social": "3t9z1yQnixpUqmEeBLRwnjaEmfsTPc1FUz6UktjRDs5Z-0-widget", "block_id": 98458889, "block_timestamp": "2023-08-10T01:20:28.743Z", "signer_id": "thomasguntenaar.near", "widget_name": "gigs-board.entity.team.TeamInfo", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/gui/attractable\" */\nconst AttractableDiv = styled.div`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst AttractableLink = styled.a`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst AttractableImage = styled.img`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n/* END_INCLUDE: \"core/lib/gui/attractable\" */\n/* INCLUDE: \"core/adapter/dev-hub\" */\nconst devHubAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst DevHub = {\n  edit_community_github: ({ handle, github }) =>\n    Near.call(devHubAccountId, \"edit_community_github\", { handle, github }) ??\n    null,\n\n  get_access_control_info: () =>\n    Near.view(devHubAccountId, \"get_access_control_info\") ?? null,\n\n  get_all_authors: () => Near.view(devHubAccountId, \"get_all_authors\") ?? null,\n\n  get_all_communities: () =>\n    Near.view(devHubAccountId, \"get_all_communities\") ?? null,\n\n  get_all_labels: () => Near.view(devHubAccountId, \"get_all_labels\") ?? null,\n\n  get_community: ({ handle }) =>\n    Near.view(devHubAccountId, \"get_community\", { handle }) ?? null,\n\n  get_post: ({ post_id }) =>\n    Near.view(devHubAccountId, \"get_post\", { post_id }) ?? null,\n\n  get_posts_by_author: ({ author }) =>\n    Near.view(devHubAccountId, \"get_posts_by_author\", { author }) ?? null,\n\n  get_posts_by_label: ({ label }) =>\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? null,\n\n  get_root_members: () =>\n    Near.view(devHubAccountId, \"get_root_members\") ?? null,\n\n  useQuery: ({ name, params }) => {\n    const initialState = { data: null, error: null, isLoading: true };\n\n    const cacheState = useCache(\n      () =>\n        Near.asyncView(devHubAccountId, [\"get\", name].join(\"_\"), params ?? {})\n          .then((response) => ({\n            ...initialState,\n            data: response ?? null,\n            isLoading: false,\n          }))\n          .catch((error) => ({\n            ...initialState,\n            error: props?.error ?? error,\n            isLoading: false,\n          })),\n\n      JSON.stringify({ name, params }),\n      { subscribe: true }\n    );\n\n    return cacheState === null ? initialState : cacheState;\n  },\n};\n/* END_INCLUDE: \"core/adapter/dev-hub\" */\n/* INCLUDE: \"entity/viewer\" */\nconst access_control_info = DevHub.useQuery({\n  name: \"access_control_info\",\n});\n\nconst Viewer = {\n  can: {\n    editCommunity: (communityData) =>\n      Struct.typeMatch(communityData) &&\n      (communityData.admins.includes(context.accountId) ||\n        Viewer.role.isDevHubModerator),\n  },\n\n  role: {\n    isDevHubModerator:\n      access_control_info.data === null || access_control_info.isLoading\n        ? false\n        : access_control_info.data.members_list[\n            \"team:moderators\"\n          ]?.children?.includes?.(context.accountId) ?? false,\n  },\n};\n/* END_INCLUDE: \"entity/viewer\" */\n\nconst metadata = props.members_list[props.member];\nconst isTeam = props.member.startsWith(\"team:\");\nconst memberBadge = isTeam ? \"bi-people-fill\" : \"person-fill\";\nconst header = isTeam ? (\n  <div class=\"d-flex\">\n    <i class=\"bi bi-people-fill me-1\"></i>\n    {props.member}\n  </div>\n) : (\n  // TODO\n  // <Widget\n  //   src={`neardevgov.near/widget/ProfileLine`}\n  //   props={{ accountId: props.member }}\n  // />\n  <div class=\"d-flex\">\n    <i class=\"bi bi-people-fill me-1\"></i>\n    {props.member}\n  </div>\n);\n\nconst isContractOwner = nearDevGovGigsContractAccountId == context.accountId;\n\nconst SlimButton = styled.button`\n  height: 24px;\n  line-height: 12px;\n`;\n\nconst TeamDataDefaults = {\n  member: null,\n  description: null,\n  labels: Object.entries(metadata.permissions)\n    .map((entry) => entry[0])\n    .join(\",\"),\n};\n\nState.init({\n  addMember: false,\n  addLabel: false,\n  labelError: \"\",\n  memberError: \"\",\n  editLabels: false,\n  teamData: isTeam ? TeamDataDefaults : null,\n});\n\nconst permissionDesc = {\n  \"edit-post\": \"Can edit posts with these labels\",\n  \"use-labels\": \"Can assign and unassign these labels\",\n};\n\nconst permissionExplainer = (permission) => {\n  if (permission.startsWith(\"starts-with:\")) {\n    let s = permission.substring(\"starts-with:\".length);\n    if (s == \"\") {\n      return \"Any label\";\n    } else {\n      return `Labels that start with \"${s}\"`;\n    }\n  } else {\n    return permission;\n  }\n};\n\nconst permissionsFilter = (permissionType) => {\n  let res = [];\n  for (const [pattern, permissions] of Object.entries(metadata.permissions)) {\n    if (permissions.includes(permissionType)) {\n      res.push(pattern);\n    }\n  }\n  return res;\n};\n\nconst permissionsRenderer = (permissionType) => {\n  let permissions = permissionsFilter(permissionType);\n  if (permissions.length > 0) {\n    return (\n      <div class=\"d-flex justify-content-between\">\n        <p class=\"card-text\" key={`${permissionType}-permissions`}>\n          {permissionDesc[permissionType]}:\n          {permissions.map((permission) => (\n            <span class=\"badge text-bg-primary\" key={permission}>\n              {permissionExplainer(permission)}\n            </span>\n          ))}\n        </p>\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nfunction removeTeam(team) {\n  Near.call([\n    {\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: \"remove_member\",\n      args: { member: team },\n      deposit: Big(0).pow(21),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ]);\n}\n\nfunction removeMemberFromTeam(memberId) {\n  let isMemberInMultipleTeams =\n    Object.values(props.root_members).filter((metadata) =>\n      metadata.children.includes(memberId)\n    ).length > 1;\n  if (isMemberInMultipleTeams) {\n    // edit_member\n    let metadata = props.root_members[props.teamId] || {};\n    let newChildren =\n      metadata.children?.filter((item) => item !== memberId) || [];\n    Near.call([\n      {\n        contractName: nearDevGovGigsContractAccountId,\n        methodName: \"edit_member\",\n        args: {\n          member: props.teamId,\n          metadata: {\n            ...metadata,\n            children: [...newChildren],\n          },\n        },\n        deposit: Big(0).pow(21),\n        gas: Big(10).pow(12).mul(100),\n      },\n    ]);\n  } else {\n    // remove_member\n    Near.call([\n      {\n        contractName: nearDevGovGigsContractAccountId,\n        methodName: \"remove_member\",\n        args: { member: memberId },\n        deposit: Big(0).pow(21),\n        gas: Big(10).pow(12).mul(100),\n      },\n    ]);\n  }\n}\n\nfunction addMemberToTeam(memberData) {\n  let memberExists = !!props.members_list[memberData.member];\n  let metadata = props.members_list[memberData.member] || {};\n  Near.call([\n    {\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: memberExists ? \"edit_member\" : \"add_member\",\n      args: {\n        member: memberData.member,\n        metadata: {\n          ...metadata,\n          description: memberData.description,\n          parents: [...metadata.parents, props.teamId],\n        },\n      },\n      deposit: Big(0).pow(21),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ]);\n}\n\n// TODO edit labels from members as well as top level\nfunction editLabelsFromTeam(labelData) {\n  // Labels need to exist in order to add them to a team.\n  const possibleLabels = Object.keys(props.rules_list);\n  const team = props.member;\n  let newPermissions = {};\n  let allLabels = labelData.labels.split(\",\");\n  let legitLabels = allLabels.filter((label) => possibleLabels.includes(label));\n  legitLabels.forEach((label) => {\n    newPermissions[label] = [\"edit-post\", \"use-labels\"];\n  });\n  if (legitLabels.length) {\n    Near.call([\n      {\n        contractName: nearDevGovGigsContractAccountId,\n        methodName: \"edit_member\",\n        args: {\n          member: team,\n          metadata: {\n            ...props.root_members[team],\n            permissions: newPermissions,\n          },\n        },\n        deposit: Big(0).pow(21),\n        gas: Big(10).pow(12).mul(100),\n      },\n    ]);\n  } else {\n    State.update({\n      labelError:\n        \"Error labels do not exist yet, first add it in the restricted labels section or use starts-with:<label>\",\n    });\n  }\n}\n\nfunction removeLabelFromTeam(rule) {\n  // Copy\n  let permissions = { ...metadata.permissions };\n  delete permissions[rule];\n  Near.call([\n    {\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: \"edit_member\",\n      args: {\n        member: props.teamId,\n        metadata: {\n          ...metadata,\n          permissions: permissions,\n        },\n      },\n      deposit: Big(0).pow(21),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ]);\n}\n\nreturn (\n  <>\n    <AttractableDiv className=\"card my-2\">\n      <div className=\"card-body\">\n        <div class=\"d-flex justify-content-between\">\n          <small class=\"text-muted\">{header}</small>\n          <div class=\"d-flex\">\n            {props.teamLevel &&\n              (Viewer.role.isDevHubModerator || isContractOwner) &&\n              widget(\"components.layout.Controls\", {\n                title: \"Add member\",\n                onClick: () => {\n                  State.update({\n                    addMember: !state.addMember,\n                    addLabel: false,\n                  });\n                },\n              })}\n            {!props.teamLevel &&\n              (Viewer.role.isDevHubModerator || isContractOwner) && (\n                <button\n                  class=\"btn btn-light\"\n                  onClick={() => removeMemberFromTeam(props.member)}\n                >\n                  Remove\n                </button>\n              )}\n            {props.teamLevel &&\n              (Viewer.role.isDevHubModerator || isContractOwner) &&\n              widget(\"components.layout.Controls\", {\n                title: !state.editLabels ? \"Edit Labels\" : \"Stop Editing\",\n                icon: !state.editLabels\n                  ? \"bi-pencil-square\"\n                  : \"bi-stop-circle-fill\",\n                onClick: () => {\n                  if (!state.editLabels) {\n                    // Submit new labels\n                  }\n                  State.update({\n                    editLabels: !state.editLabels,\n                  });\n                },\n              })}\n            {props.teamLevel &&\n            ((Viewer.role.isDevHubModerator &&\n              props.member !== \"team:moderators\") ||\n              isContractOwner) ? (\n              <button\n                class=\"btn btn-light\"\n                onClick={() => removeTeam(props.member)}\n              >\n                Delete team\n              </button>\n            ) : null}\n          </div>\n        </div>\n      </div>\n      <div className=\"card-body\">\n        <p class=\"card-text\" key=\"description\">\n          <Markdown class=\"card-text\" text={metadata.description}></Markdown>\n        </p>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          {state.addMember &&\n            widget(\"components.organism.editor\", {\n              classNames: {\n                submit: \"btn-primary\",\n                submitAdornment: \"bi-check-circle-fill\",\n              },\n              heading: \"Adding member\",\n              isEditorActive: state.isEditorActive,\n              isEditingAllowed:\n                Viewer.role.isDevHubModerator || isContractOwner,\n              onChangesSubmit: addMemberToTeam,\n              submitLabel: \"Accept\",\n              data: state.teamData,\n              schema: {\n                member: {\n                  inputProps: {\n                    min: 2,\n                    max: 60,\n                    placeholder: \"member.near\",\n                    required: true,\n                  },\n                  label: \"Members name\",\n                  order: 2,\n                },\n                description: {\n                  inputProps: {\n                    min: 2,\n                    max: 60,\n                    placeholder: \"Description\",\n                    required: true,\n                  },\n                  label: \"Role description\",\n                  order: 3,\n                },\n              },\n            })}\n          {state.addLabel && state.labelError ? (\n            <div\n              class=\"alert alert-warning alert-dismissible fade show\"\n              role=\"alert\"\n            >\n              {state.labelError}\n              <button\n                type=\"button\"\n                class=\"btn-close\"\n                data-bs-dismiss=\"alert\"\n                aria-label=\"Close\"\n                onClick={() => State.update({ labelError: \"\" })}\n              ></button>\n            </div>\n          ) : null}\n          {state.editLabels &&\n            widget(\"components.organism.editor\", {\n              classNames: {\n                submit: \"btn-primary\",\n                submitAdornment: \"bi-check-circle-fill\",\n              },\n              heading: \"Labels\",\n              isEditorActive: state.isEditorActive,\n              isEditingAllowed:\n                Viewer.role.isDevHubModerator || isContractOwner,\n              onChangesSubmit: editLabelsFromTeam,\n              submitLabel: \"Accept\",\n              data: state.teamData,\n              schema: {\n                labels: {\n                  inputProps: {\n                    min: 2,\n                    max: 60,\n                    format: \"comma-separated\",\n                    placeholder: \"label1,label2,starts-with:label3\",\n                    required: true,\n                  },\n                  label: \"Labels\",\n                  order: 2,\n                },\n              },\n            })}\n        </div>\n        {permissionsRenderer(\"edit-post\")}\n        {permissionsRenderer(\"use-labels\")}\n        {metadata.children && (\n          <div class=\"vstack\">\n            {metadata.children.map((child) =>\n              widget(\n                \"entity.team.TeamInfo\",\n                {\n                  member: child,\n                  members_list: props.members_list,\n                  teamLevel: false,\n                  root_members: props.root_members,\n                  teamId: props.teamId,\n                },\n                child\n              )\n            )}\n          </div>\n        )}\n      </div>\n    </AttractableDiv>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thomasguntenaar.near/widget/gigs-board.entity.team.TeamInfo", "fact_widget_deployments_id": "4622879056c0b737528f6aa094a211e5", "inserted_timestamp": "2023-08-10T02:51:38.806Z", "modified_timestamp": "2023-08-10T02:51:38.806Z", "__row_index": 0}