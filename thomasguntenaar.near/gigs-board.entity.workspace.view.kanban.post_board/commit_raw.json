{"tx_hash": "GL1co4SCqiaic4fc7KWMngsPrWa49cGE4MyrFg69MPY", "action_id_social": "BkABfwQrRwy77PQm27g65fvC84HLCdPSaHFK5mgeufS5-0-widget", "block_id": 104699121, "block_timestamp": "2023-11-01T16:24:49.600Z", "signer_id": "thomasguntenaar.near", "widget_name": "gigs-board.entity.workspace.view.kanban.post_board", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/gui/attractable\" */\nconst AttractableDiv = styled.div`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst AttractableLink = styled.a`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst AttractableImage = styled.img`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n/* END_INCLUDE: \"core/lib/gui/attractable\" */\n/* INCLUDE: \"core/adapter/dev-hub\" */\nconst devHubAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst DevHub = {\n  get_root_members: () =>\n    Near.view(devHubAccountId, \"get_root_members\") ?? null,\n\n  has_moderator: ({ account_id }) =>\n    Near.view(devHubAccountId, \"has_moderator\", { account_id }) ?? null,\n\n  create_community: ({ inputs }) =>\n    Near.call(devHubAccountId, \"create_community\", { inputs }),\n\n  get_community: ({ handle }) =>\n    Near.view(devHubAccountId, \"get_community\", { handle }) ?? null,\n\n  get_account_community_permissions: ({ account_id, community_handle }) =>\n    Near.view(devHubAccountId, \"get_account_community_permissions\", {\n      account_id,\n      community_handle,\n    }) ?? null,\n\n  update_community: ({ handle, community }) =>\n    Near.call(devHubAccountId, \"update_community\", { handle, community }),\n\n  delete_community: ({ handle }) =>\n    Near.call(devHubAccountId, \"delete_community\", { handle }),\n\n  update_community_board: ({ handle, board }) =>\n    Near.call(devHubAccountId, \"update_community_board\", { handle, board }),\n\n  update_community_github: ({ handle, github }) =>\n    Near.call(devHubAccountId, \"update_community_github\", { handle, github }),\n\n  get_access_control_info: () =>\n    Near.view(devHubAccountId, \"get_access_control_info\") ?? null,\n\n  get_all_authors: () => Near.view(devHubAccountId, \"get_all_authors\") ?? null,\n\n  get_all_communities_metadata: () =>\n    Near.view(devHubAccountId, \"get_all_communities_metadata\") ?? null,\n\n  get_all_labels: () => Near.view(devHubAccountId, \"get_all_labels\") ?? null,\n\n  get_post: ({ post_id }) =>\n    Near.view(devHubAccountId, \"get_post\", { post_id }) ?? null,\n\n  get_posts_by_author: ({ author }) =>\n    Near.view(devHubAccountId, \"get_posts_by_author\", { author }) ?? null,\n\n  get_posts_by_label: ({ label }) =>\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? null,\n\n  useQuery: (name, params) => {\n    const initialState = { data: null, error: null, isLoading: true };\n\n    const cacheState = useCache(\n      () =>\n        Near.asyncView(devHubAccountId, [\"get\", name].join(\"_\"), params ?? {})\n          .then((response) => ({\n            ...initialState,\n            data: response ?? null,\n            isLoading: false,\n          }))\n          .catch((error) => ({\n            ...initialState,\n            error: props?.error ?? error,\n            isLoading: false,\n          })),\n\n      JSON.stringify({ name, params }),\n      { subscribe: true }\n    );\n\n    return cacheState === null ? initialState : cacheState;\n  },\n};\n/* END_INCLUDE: \"core/adapter/dev-hub\" */\n\nconst postTagsToIdSet = (tags) => {\n  return new Set(\n    tags\n      .map(\n        (tag) =>\n          Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n            label: tag,\n          }) ?? []\n      )\n      .flat(1)\n  );\n};\n\nconst configToColumnData = ({ columns, tags }) =>\n  Object.entries(columns).reduce((registry, [columnId, column]) => {\n    const postIds = (\n      Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n        label: column.tag,\n      }) ?? []\n    ).reverse();\n\n    return {\n      ...registry,\n\n      [columnId]: {\n        ...column,\n\n        postIds:\n          tags.required.length > 0\n            ? postIds.filter(\n                (postId) =>\n                  postTagsToIdSet(tags.required).has(postId) &&\n                  !postTagsToIdSet(tags.excluded).has(postId)\n              )\n            : postIds,\n      },\n    };\n  }, {});\n\nconst KanbanPostBoard = ({\n  metadata,\n  payload,\n  configurationControls,\n  isConfiguratorActive,\n  isSynced,\n  link,\n  onCancel,\n  onConfigure,\n  onDelete,\n  onSave,\n  permissions,\n}) => {\n  const columns = Object.entries(configToColumnData(payload)).map(\n    ([columnId, column]) => (\n      <div className=\"col-3\" key={`column-${columnId}-view`}>\n        <div className=\"card rounded-4\">\n          <div\n            className={[\n              \"card-body d-flex flex-column gap-3 p-2\",\n              \"border border-2 border-secondary rounded-4\",\n            ].join(\" \")}\n          >\n            <span className=\"d-flex flex-column py-1\">\n              <h6 className=\"card-title h6 d-flex align-items-center gap-2 m-0\">\n                {column.title}\n\n                <span className=\"badge rounded-pill bg-secondary\">\n                  {column.postIds.length}\n                </span>\n              </h6>\n\n              <p class=\"text-secondary m-0\">{column.description}</p>\n            </span>\n\n            <div class=\"d-flex flex-column gap-2\">\n              {column.postIds.map((postId) =>\n                widget(\n                  `entity.workspace.view.${metadata.ticket.type}`,\n                  { metadata: { id: postId, ...metadata.ticket } },\n                  postId\n                )\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  );\n\n  return widget(\"entity.workspace.view.layout\", {\n    configurationControls,\n    isConfiguratorActive,\n    isSynced,\n    link,\n    metadata,\n    onCancel,\n    onConfigure,\n    onDelete,\n    onSave,\n    permissions,\n\n    children: (\n      <>\n        <div\n          className={[\n            \"d-flex align-items-center justify-content-center w-100 text-black-50 opacity-50\",\n            columns.length === 0 ? \"\" : \"d-none\",\n          ].join(\" \")}\n          style={{ height: 384 }}\n        >\n          No columns were created so far.\n        </div>\n\n        {columns}\n      </>\n    ),\n  });\n};\n\nreturn KanbanPostBoard(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/thomasguntenaar.near/widget/gigs-board.entity.workspace.view.kanban.post_board", "fact_widget_deployments_id": "c4161fc796f9a1096169b18e80142e98", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}