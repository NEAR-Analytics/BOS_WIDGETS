{"tx_hash": "7YPKdDNMK7LXowa4GdJzRofs6UcXn5URmXSsipFUsR96", "action_id_social": "AqFJvs6G78V4E9BTTyaiv65PYWznivr3vYQXtTTNK8ru-0-widget", "block_id": 115040388, "block_timestamp": "2024-03-19T19:17:28.855Z", "signer_id": "kurodenjiro.near", "widget_name": "telgram-auth", "source_code": "const { accountId, showPlatform, code, state } = props;\r\n\r\nconst $ = VM.require(\"sdks.near/widget/Loader\");\r\nconst { LensSDK } = $(\"@sdks/lens-sdk\");\r\nconst { EthereumSigner } = $(\"@sdks/eth-signer\");\r\nLensSDK = new LensSDK(State, state);\r\n\r\nconst NEARBADGER_VERIFIERS_API = \"https://nearbadger-verifiers-api.vercel.app\";\r\nconst VERIFY_PLATFORM_ENDPOINT = \"verify\";\r\nconst CHALLENGE_ENDPONT = \"challenge\";\r\nconst LOGO_URL =\r\n  \"https://ipfs.near.social/ipfs/bafkreiagecke7lqgrdbzraafedvei47zshhtptelx5n2j4lldetm5or26q\";\r\nconst LENS_LOGO_URL =\r\n  \"https://ipfs.near.social/ipfs/bafkreiggkmczb7v43nicdia4n7xqkgynopby5k3nxs3zj6fij5eeurh23i\";\r\nconst FARCASTER_LOGO_URL =\r\n  \"https://ipfs.near.social/ipfs/bafkreia2gbtoqi6ysk2grk3v3n2qkwgfjogml5icntyp5ykdij6q457lay\";\r\nconst FARCASTER_BLACK_LOGO_URL =\r\n  \"https://ipfs.near.social/ipfs/bafkreif2ff55fa77acvcclxlccsidhyz5sos3abs5yln7daotbp35nwa7a\";\r\nconst X_LOGO_URL =\r\n  \"https://ipfs.near.social/ipfs/bafkreighn2xduhiqyf3kqn5nmlmdkekspde7lgk3rpf7xfhigntrgsobsi\";\r\nconst X_BLACK_LOGO_URL =\r\n  \"https://ipfs.near.social/ipfs/bafkreie3fgyixcxtqccylopewsodmfmci2ub7xwpx6aurimhuzxqytbyka\";\r\n\r\nconst GOOGLE_LOGO_URL =\r\n  \"https://ipfs.near.social/ipfs/bafkreidnwejlnl4b4kdlqwoivcro4n46fmnq43imzoy3c4ttlrfc2qs4vu\";\r\nconst TELEGRAM_LOGO_URL =\r\n  \"https://ipfs.near.social/ipfs/bafkreiexdjbjyfsdnoseyzxtobyixlq3s2ggcmlk7ffy6x5nev6kgzybvq\";\r\n\r\nconst REGISTRY_CONTRACT = \"checks.integrations.near\";\r\nconst TWITTER_AUTH_URL = `https://twitter.com/i/oauth2/authorize?state=twitter.${\r\n  context.accountId + \".\" + Math.floor(Math.random() * 10000000)\r\n}&code_challenge_method=plain&code_challenge=nearbadger&client_id=MjJLQ1U4aTdJWjgwMTZyb0o3YUg6MTpjaQ&response_type=code&redirect_uri=https%3A%2F%2Fnear.social%2Fmattb.near%2Fwidget%2FNearBadger.Pages.Authentication&scope=users.read%20tweet.read`;\r\nconst TELEGRAM_AUTH_URL = `https://oauth.telegram.org/auth?bot_id=6458699487&origin=https%3A%2F%2Fnearbadger-verifiers-api.vercel.app&embed=1&request_access=write&return_to=https%3A%2F%2Fnearbadger-verifiers-api.vercel.app%2Ftelegram-auth%3Fstate%3Dtelegram.${\r\n  context.accountId + \".\" + Math.floor(Math.random() * 10000000)\r\n}`;\r\n\r\nconst TELEGRAM_AUTH_URL_1 =\r\n  \"https://oauth.telegram.org/auth/push?bot_id=6458699487&origin=https%3A%2F%2Fnearbadger-verifiers-api.vercel.app&embed=1&request_access=write&return_to=https%3A%2F%2Fnearbadger-verifiers-api.vercel.app%2Ftelegram-auth%3Fstate%3Dtelegram.kurodenjiro.near.4941632\";\r\nconst GOOGLE_AUTH_URL = \"\";\r\n\r\nconst [platform, setPlatform] = useState(\"\");\r\nconst [evmAddress, setEvmAddress] = useState(\"\");\r\nconst [loadedProfiles, setLoadedProfiles] = useState(false);\r\nconst [lensProfiles, setLensProfiles] = useState([]);\r\nconst [selectedHandle, setSelectedHandle] = useState(\"\");\r\nconst [proof, setProof] = useState(\"\");\r\nconst [finished, setFinished] = useState(false);\r\nconst [displayError, setDisplayError] = useState(false);\r\nconst [success, setSuccess] = useState(false);\r\nconst cleanSelectedHandle = useMemo(() => {\r\n  let cleanAddress =\r\n    selectedHandle[0] == \"@\"\r\n      ? selectedHandle.substring(1, selectedHandle.length)\r\n      : selectedHandle;\r\n\r\n  return cleanAddress.split(\".eth\").shift();\r\n}, [selectedHandle]);\r\nconst [displayHandle, setDisplayHandle] = useState(\"\");\r\nconst [loadingEvmAddress, setLoadingEvmAddress] = useState(false);\r\nconst [onInit, setOnInit] = useState(true);\r\nconst [twitterUrl, setTwitterUrl] = useState(\"\");\r\nconst [telegramUrl, setTelegramUrl] = useState(\"\");\r\nconst [challenge, setChallenge] = useState(\"\");\r\nconst [loading, setLoading] = useState(false);\r\nconst [loadingTwitterChallenge, setLoadingTwitterChallenge] = useState(false);\r\nconst [loadingTelegramChallenge, setLoadingTelegramChallenge] = useState(false);\r\nconst timeout = null;\r\n\r\nif (showPlatform) {\r\n  setPlatform(showPlatform);\r\n}\r\n\r\nif (!evmAddress && Ethers.provider()) {\r\n  if (Ethers.provider().provider?.isMetaMask) {\r\n    const [account] = Ethers.provider().provider._state.accounts;\r\n    setEvmAddress(account);\r\n  } else if (Ethers.provider().provider?.connector) {\r\n    const [account] = Ethers.provider().provider.connector.accounts;\r\n    setEvmAddress(account);\r\n  } else {\r\n    Ethers.provider()\r\n      .send(\"eth_requestAccounts\", [])\r\n      .then(([account]) => {\r\n        setEvmAddress(account);\r\n      });\r\n  }\r\n}\r\n\r\nuseEffect(() => {\r\n  if (!evmAddress) {\r\n    return;\r\n  }\r\n\r\n  if (platform == \"lens\") {\r\n    LensSDK.authentication\r\n      .profiles({\r\n        for: evmAddress,\r\n      })\r\n      .then((profiles) => {\r\n        if (profiles.length > 0) {\r\n          const handles = profiles.map(\r\n            (profile) => `${profile.handle.fullHandle.split(\"/\").pop()}.lens`\r\n          );\r\n\r\n          setSelectedHandle(handles[0]);\r\n          setLensProfiles(handles);\r\n        }\r\n      });\r\n  }\r\n}, [platform]);\r\n\r\nconst Main = styled.div`\r\n    width:100%;\r\n    min-height:100vh;\r\n    padding:3rem 0;\r\n    background-color:#fafafa;\r\n    border-radius:20px;\r\n    display:flex;\r\n    justify-content:center;\r\n    align-items:center;\r\n`;\r\n\r\nconst Modal = styled.div`\r\n    display:flex;\r\n    max-width:350px;\r\n    min-width:250px;\r\n    align-items:center;\r\n    justify-content:center;\r\n    flex-direction:column;\r\n    border:1px solid rgba(0,0,0,.1);\r\n    border-radius:20px;\r\n    padding:5rem 2rem;\r\n    margin-top:auto;\r\n    margin-bottom:auto;\r\n    background-color:#fff;\r\n    flex-grow:0;\r\n    flex-shrink:1;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n    max-width:80px;\r\n    margin-bottom:1rem;\r\n    opacity:.8;\r\n    + p {\r\n      margin-bottom:1.5rem;\r\n      font-size:.9rem;\r\n    }\r\n`;\r\n\r\nconst AuthButton = styled.button`\r\n    position:relative;\r\n    padding:.4rem .7rem .4rem 2.7rem;\r\n    border-radius:7px;\r\n    background-color:${({ background }) => `${background || \"#f2f2f2\"}`};\r\n    font-size:.8rem;\r\n    font-weight:bold;\r\n    border:1px solid ${({ border }) => `${border || \"rgba(0,0,0,.05)\"}`};\r\n    color:${({ color }) => `${color || \"#000\"}`};\r\n    min-width:240px;\r\n    text-align:center;\r\n    cursor:pointer;\r\n    box-shadow: 0 0 0 0px rgba(0,0,0,.05);\r\n    transition: all .2s;\r\n    display:block;\r\n    margin:0;\r\n\r\n    margin-bottom:10px;\r\n\r\n    :last-of-type {\r\n        margin-bottom:10px;\r\n    }\r\n\r\n    &[href] {\r\n      text-decoration:none!important;\r\n      :last-of-type {\r\n        margin-bottom:20px;\r\n      }\r\n    }\r\n\r\n    :hover, :focus {\r\n        box-shadow: 0 0 0 3px rgba(0,0,0,.05);\r\n        transition: all .2s;\r\n        border:1px solid ${({ border }) => `${border || \"rgba(0,0,0,.05)\"}`};\r\n        color:${({ color }) => `${color || \"#000\"}`};\r\n    }\r\n    \r\n    .badge {\r\n      border-radius:0;\r\n      display:flex;\r\n      align-items:center;\r\n      justify-content:center;\r\n      height:100%;\r\n      position:absolute;\r\n      left:0;\r\n      top:0;\r\n      border-right:1px solid ${({ border }) =>\r\n        `${border || \"rgba(0,0,0,.05)\"}`};\r\n      padding:${({ padding }) => `${padding || \"0 7px\"}`};\r\n      min-width:40px;\r\n\r\n      img {\r\n        display:block;\r\n        position:relative;\r\n        padding:0;\r\n        margin:0;\r\n        left:0;\r\n        width:${({ badgeSize }) => `${badgeSize || \"20px\"}`};\r\n        pointer-events:none;\r\n      }\r\n    }\r\n`;\r\n\r\nconst Disclaimer = styled.p`\r\n    max-width:300px;\r\n    font-size:.7rem;\r\n    text-align:center;\r\n    margin-bottom:7px;\r\n`;\r\n\r\nconst Header = styled.h3`\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:center;\r\n    font-weight:bold;\r\n    margin-bottom:1.5rem;\r\n\r\n    img {\r\n        max-width:20px;\r\n        margin-right:5px;\r\n    }\r\n`;\r\n\r\nconst Step = styled.p`\r\n    display:flex;\r\n    align-items:center;\r\n    font-weight:bold;\r\n`;\r\n\r\nconst StepDescription = styled.div`\r\n    margin-bottom:2rem;\r\n    font-size:.8rem;\r\n\r\n    :last-of-type {\r\n        margin-bottom:2.5rem;\r\n    }\r\n\r\n    button {\r\n        align-self:center;\r\n        border-radius:50px;\r\n        font-weight:bold;\r\n        color:#000;\r\n        background-color:#F2F2F2;\r\n        border:1px solid rgba(0,0,0,.05);\r\n        padding:.3rem 1rem;\r\n        font-size:.8rem;\r\n        cursor:pointer;\r\n        transition: all .2s;\r\n        text-decoration:none!important;\r\n        margin-right:10px;\r\n        \r\n        :hover {\r\n            box-shadow: 0 0 0 3px rgba(0,0,0,.05);\r\n            border:1px solid rgba(0,0,0,.05);\r\n            transition: all .2s;\r\n            color:#000;\r\n            background-color:#F2F2F2;\r\n        }\r\n    }\r\n`;\r\n\r\nconst FinishButton = styled.a`\r\n    align-self:center;\r\n    border-radius:50px;\r\n    font-weight:bold;\r\n    color:#000;\r\n    background-color:#F2F2F2;\r\n    border:1px solid rgba(0,0,0,.05);\r\n    padding:.8rem 2rem;\r\n    font-size:17px;\r\n    cursor:pointer;\r\n    transition: all .2s;\r\n    text-decoration:none!important;\r\n    margin-bottom:15px;\r\n    min-width:150px;\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:center;\r\n\r\n    &.disabled {\r\n      pointer-events:none;\r\n      opacity:.5;\r\n    }\r\n    \r\n    :hover {\r\n        box-shadow: 0 0 0 3px rgba(0,0,0,.05);\r\n        transition: all .2s;\r\n        color:#000;\r\n    }\r\n`;\r\n\r\nconst AuthProcessWrapper = styled.div`\r\n    display:flex;\r\n    flex-direction:column;\r\n    width:100%;\r\n    justify-content:center;\r\n`;\r\n\r\nconst Handle = styled.button`\r\n    align-self:center;\r\n    border-radius:50px;\r\n    font-weight:bold;\r\n    color:#000;\r\n    background-color:#F2F2F2;\r\n    border:1px solid rgba(0,0,0,.05);\r\n    box-shadow: 0 0 0 ${({ selected }) =>\r\n      selected ? \"3px\" : \"0px\"} rgba(0,0,0,.05);\r\n    padding:.3rem 1rem;\r\n    font-size:.8rem;\r\n    cursor:pointer;\r\n    transition: all .2s;\r\n    text-decoration:none!important;\r\n    margin-right:10px;\r\n\r\n    :hover {\r\n        box-shadow: 0 0 0 3px rgba(0,0,0,.05);\r\n        transition: all .2s;\r\n        color:#000;\r\n    }\r\n`;\r\n\r\nconst ProfileInput = styled.input`\r\n    border:0;\r\n    padding: .5rem;\r\n    border:1px solid rgba(0,0,0,.1);\r\n    border-radius:10px;\r\n`;\r\n\r\nconst ErrorPill = styled.div`\r\n  background-color: #D32F2F;\r\n  border-color: #B71C1C;\r\n  border-style: solid;\r\n  border-width: 1px;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  color: white;\r\n  max-width: 300px;\r\n  margin: auto;\r\n  margin-bottom:1rem;\r\n  font-size:.8rem;\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  @keyframes rotation {\r\n    0% {\r\n        transform: rotate(0deg);\r\n    }\r\n    100% {\r\n        transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n  .spinner {\r\n    width: 40px;\r\n    height: 40px;\r\n    border: 5px solid rgba(0,0,0,.1);\r\n    border-bottom-color: rgba(0,0,0,.4);\r\n    border-radius: 50%;\r\n    display: inline-block;\r\n    box-sizing: border-box;\r\n    animation: rotation .5s linear infinite;\r\n  }\r\n`;\r\n\r\nconst ErrorModal = ({ children }) => {\r\n  return (\r\n    <>\r\n      {displayError && (\r\n        <ErrorPill>\r\n          {children.length ? (\r\n            children\r\n          ) : (\r\n            <>\r\n              Looks like there was an error verifying your profile ownership.\r\n              Please, review each step and try again.\r\n            </>\r\n          )}\r\n        </ErrorPill>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst signProof = (platform) => {\r\n  asyncFetch(`${NEARBADGER_VERIFIERS_API}/challenge/${platform}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      accountId: context.accountId,\r\n      handle: cleanSelectedHandle,\r\n    }),\r\n  }).then(({ ok, body: { challenge } }) => {\r\n    if (ok) {\r\n      EthereumSigner.sign(challenge.toString()).then((proof) => {\r\n        setProof(proof);\r\n      });\r\n    } else {\r\n      setDisplayError(true);\r\n    }\r\n  });\r\n};\r\n\r\nconst verifyProof = (platform, registryContract) => {\r\n  setDisplayError(false);\r\n\r\n  asyncFetch(`${NEARBADGER_VERIFIERS_API}/verify/${platform}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      accountId: context.accountId,\r\n      handle: cleanSelectedHandle || \"\",\r\n      proof,\r\n      challenge: challenge || \"\",\r\n    }),\r\n  }).then(\r\n    ({\r\n      ok,\r\n      body: { expirationBlockHeight, signature, handle: customHandle },\r\n    }) => {\r\n      if (ok) {\r\n        setSuccess(true);\r\n\r\n        Near.call(\r\n          registryContract || REGISTRY_CONTRACT,\r\n          \"register_social\",\r\n          {\r\n            platform,\r\n            signature,\r\n            handle: customHandle || cleanSelectedHandle,\r\n            proof,\r\n            max_block_height: expirationBlockHeight,\r\n          },\r\n          null,\r\n          0.01 * Math.pow(10, 24)\r\n        );\r\n      } else {\r\n        setDisplayError(true);\r\n      }\r\n      setLoading(false);\r\n    }\r\n  );\r\n};\r\n\r\nconst disabledAuthButtonStyles = {\r\n  opacity: \".5\",\r\n  pointerEvents: \"none\",\r\n};\r\n\r\nconst storePlatform = (platform) => {\r\n  Storage.set(\r\n    \"platform\",\r\n    JSON.stringify({\r\n      platform: platform,\r\n      expiration: Date.parse(new Date()) + 6 * 100000,\r\n    })\r\n  );\r\n};\r\n\r\nconst checkStoredPlatform = () => {\r\n  if (storedPlatform) {\r\n    const { platform, expiration } = JSON.parse(storedPlatform);\r\n    if (expiration > Date.parse(new Date())) {\r\n      setPlatform(platform);\r\n      Storage.set(\"platform\", null);\r\n    }\r\n  }\r\n};\r\n\r\nconst getTwitterChallenge = () => {\r\n  setLoadingTwitterChallenge(true);\r\n\r\n  asyncFetch(`${NEARBADGER_VERIFIERS_API}/challenge/${platform}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      accountId: context.accountId,\r\n      handle: cleanSelectedHandle,\r\n    }),\r\n  }).then(({ ok, body: { challenge } }) => {\r\n    if (ok) {\r\n      setTwitterUrl(challenge);\r\n    } else {\r\n      setDisplayError(true);\r\n    }\r\n\r\n    setLoadingTwitterChallenge(false);\r\n  });\r\n};\r\n\r\nconst storedPlatform = null;\r\n\r\nif (onInit) {\r\n  storedPlatform = Storage.get(\"platform\");\r\n  checkStoredPlatform();\r\n  setOnInit(false);\r\n}\r\n\r\nuseEffect(() => {\r\n  checkStoredPlatform();\r\n}, [storedPlatform]);\r\n\r\nuseEffect(() => {\r\n  if (code && state) {\r\n    setLoading(true);\r\n    const [statePlatform] = state.split(\".\");\r\n    setPlatform(statePlatform);\r\n    setProof(code);\r\n  }\r\n}, []);\r\n\r\nuseEffect(() => {\r\n  if (platform === \"twitter\" && proof) {\r\n    verifyProof(\"twitter\");\r\n  }\r\n  if (platform === \"telegram\" && proof) {\r\n    verifyProof(\"telegram\");\r\n  }\r\n}, [platform, challenge, proof]);\r\n\r\nconst AuthMethods = () => {\r\n  return (\r\n    <>\r\n      <AuthButton\r\n        style={context.accountId ? {} : disabledAuthButtonStyles}\r\n        onClick={() => {\r\n          setPlatform(\"lens\");\r\n          storePlatform(\"lens\");\r\n        }}\r\n      >\r\n        <span className=\"badge\">\r\n          <img src={LENS_LOGO_URL} width=\"100%\" />\r\n        </span>\r\n        Authenticate on Lens\r\n      </AuthButton>\r\n      <AuthButton\r\n        style={context.accountId ? {} : disabledAuthButtonStyles}\r\n        onClick={() => {\r\n          setPlatform(\"farcaster\");\r\n          storePlatform(\"farcaster\");\r\n        }}\r\n        background=\"#8A63D1\"\r\n        color=\"#FFF\"\r\n        border=\"rgba(0,0,0,.15)\"\r\n        badgeSize=\"17px\"\r\n      >\r\n        <span className=\"badge\">\r\n          <img src={FARCASTER_LOGO_URL} width=\"100%\" />\r\n        </span>\r\n        Authenticate on Farcaster\r\n      </AuthButton>\r\n      <AuthButton\r\n        as=\"a\"\r\n        style={context.accountId ? {} : disabledAuthButtonStyles}\r\n        href={TWITTER_AUTH_URL}\r\n        background=\"#000\"\r\n        color=\"#FFF\"\r\n        border=\"rgba(255,255,255,.15)\"\r\n        badgeSize=\"14px\"\r\n      >\r\n        <span className=\"badge\">\r\n          <img src={X_LOGO_URL} width=\"100%\" />\r\n        </span>\r\n        Authenticate on X\r\n      </AuthButton>\r\n      <AuthButton\r\n        as=\"a\"\r\n        style={disabledAuthButtonStyles}\r\n        href={GOOGLE_AUTH_URL}\r\n        background=\"#FFF\"\r\n        color=\"#000\"\r\n        border=\"rgba(0,0,0,.15)\"\r\n        badgeSize=\"17px\"\r\n      >\r\n        <span className=\"badge\">\r\n          <img src={GOOGLE_LOGO_URL} width=\"100%\" />\r\n        </span>\r\n        Authenticate on Google\r\n      </AuthButton>\r\n      <AuthButton\r\n        as=\"a\"\r\n        target={\"_parent\"}\r\n        style={context.accountId ? {} : disabledAuthButtonStyles}\r\n        href={TELEGRAM_AUTH_URL_1}\r\n        background=\"#0088cc\"\r\n        color=\"#FFF\"\r\n        border=\"rgba(0,0,0,.15)\"\r\n        badgeSize=\"17px\"\r\n      >\r\n        <span className=\"badge\">\r\n          <img src={TELEGRAM_LOGO_URL} width=\"100%\" />\r\n        </span>\r\n        Authenticate on Telegram\r\n      </AuthButton>\r\n    </>\r\n  );\r\n};\r\n\r\nconst AvailableHandles = ({ handles }) => {\r\n  return (\r\n    <>\r\n      {handles.map((handle) => (\r\n        <Handle\r\n          selected={selectedHandle == handle}\r\n          onClick={() => setSelectedHandle(handle)}\r\n        >\r\n          {handle}\r\n        </Handle>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nconst Auth = () => {\r\n  return (\r\n    <>\r\n      {!success && (\r\n        <>\r\n          {!platform && <AuthMethods />}\r\n          {platform && <AuthProcess platform={platform} />}\r\n\r\n          <Disclaimer>\r\n            Authenticating your profile <b>doesn't grant</b> nearbadger write\r\n            access to your account.\r\n          </Disclaimer>\r\n          <Disclaimer>\r\n            Each issued verification will remain <b>valid for 3 months</b>.\r\n          </Disclaimer>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst Success = () => (\r\n  <>\r\n    {success && (\r\n      <>\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <Header>Identity successfully verified!</Header>\r\n          <p>You may now get back to the app you were browsing</p>\r\n        </div>\r\n      </>\r\n    )}\r\n  </>\r\n);\r\n\r\nconst updateSelectedHandle = (handle) => {\r\n  setSelectedHandle(handle);\r\n};\r\n\r\nconst AuthProcess = ({ platform }) => {\r\n  const process = {\r\n    lens: (\r\n      <AuthProcessWrapper>\r\n        <Header>\r\n          <img src={LENS_LOGO_URL} width=\"100%\" />\r\n          Lens Protocol\r\n        </Header>\r\n        <Step>1. Connect your Ethereum wallet</Step>\r\n        <StepDescription>\r\n          <Web3Connect\r\n            connectLabel=\"Connect wallet\"\r\n            disconnectLabel=\"Disconnect wallet\"\r\n          />\r\n        </StepDescription>\r\n        <Step>2. Choose a profile</Step>\r\n        <StepDescription>\r\n          {lensProfiles.length > 0 && (\r\n            <AvailableHandles handles={lensProfiles} />\r\n          )}\r\n          {lensProfiles.length == 0 && \"No profiles to show yet.\"}\r\n        </StepDescription>\r\n        <Step>3. Sign a proof</Step>\r\n        <StepDescription>\r\n          <button onClick={() => signProof(\"lens\")}>Sign proof</button>\r\n        </StepDescription>\r\n        <ErrorModal />\r\n        <FinishButton onClick={() => verifyProof(\"lens\")}>\r\n          Verify profile\r\n        </FinishButton>\r\n      </AuthProcessWrapper>\r\n    ),\r\n    farcaster: (\r\n      <AuthProcessWrapper>\r\n        <Header>\r\n          <img src={FARCASTER_BLACK_LOGO_URL} width=\"100%\" />\r\n          Farcaster\r\n        </Header>\r\n        <Step>1. Link your Ethereum address to your Farcaster profile</Step>\r\n        <StepDescription>\r\n          To do so, go to the Warpcast app and click{\" \"}\r\n          <b>\r\n            Settings {\">\"} Connected addresses {\">\"} Connect address\r\n          </b>\r\n          <br />\r\n          <br />\r\n          If you already did it, you can skip this step\r\n        </StepDescription>\r\n        <Step>2. Connect your Ethereum wallet</Step>\r\n        <StepDescription>\r\n          <Web3Connect\r\n            connectLabel=\"Connect wallet\"\r\n            disconnectLabel=\"Disconnect wallet\"\r\n          />\r\n        </StepDescription>\r\n        <Step>3. Write down your Farcaster handle</Step>\r\n        <StepDescription>\r\n          <ProfileInput\r\n            placeholder=\"@handle\"\r\n            onChange={({ target: { value: text } }) => {\r\n              if (timeout) {\r\n                clearTimeout(timeout);\r\n              }\r\n\r\n              timeout = setTimeout(() => {\r\n                setSelectedHandle(text);\r\n              }, 300);\r\n            }}\r\n          />\r\n        </StepDescription>\r\n        <Step>4. Sign a proof</Step>\r\n        <StepDescription>\r\n          <button onClick={() => signProof(\"farcaster\")}>Sign proof</button>\r\n        </StepDescription>\r\n        <ErrorModal />\r\n        <FinishButton onClick={() => verifyProof(\"farcaster\")}>\r\n          Verify profile\r\n        </FinishButton>\r\n      </AuthProcessWrapper>\r\n    ),\r\n    twitter: (\r\n      <AuthProcessWrapper>\r\n        <Header>\r\n          <img src={X_BLACK_LOGO_URL} width=\"100%\" />\r\n        </Header>\r\n        <Step>Something went wrong...</Step>\r\n        <StepDescription>\r\n          Ouch! It looks like we weren't able to verify your information this\r\n          time. But don't worry, you can try it again.\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <FinishButton as=\"a\" href={TWITTER_AUTH_URL}>\r\n            Try again\r\n          </FinishButton>\r\n        </StepDescription>\r\n      </AuthProcessWrapper>\r\n    ),\r\n  };\r\n\r\n  return process[platform] || <>Auth method not found</>;\r\n};\r\n\r\nconst RequireNearAccount = () => {\r\n  return (\r\n    <>\r\n      {!success && (\r\n        <p style={{ textAlign: \"center\" }}>\r\n          {context.accountId == null ? (\r\n            <>Connect your NEAR account to start the verification process</>\r\n          ) : (\r\n            <>\r\n              This app requires <b>{accountId || context.accountId || \"you\"}</b>{\" \"}\r\n              to verify a profile\r\n            </>\r\n          )}\r\n        </p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nreturn (\r\n  <Main>\r\n    <Modal>\r\n      <Logo src={LOGO_URL}></Logo>\r\n      {!loading && (\r\n        <>\r\n          <RequireNearAccount />\r\n          <Auth />\r\n          <Success />\r\n        </>\r\n      )}\r\n      {loading && (\r\n        <>\r\n          <Spinner>\r\n            <span className=\"spinner\"></span>\r\n          </Spinner>\r\n          <p>Verifying proof...</p>\r\n        </>\r\n      )}\r\n    </Modal>\r\n  </Main>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/kurodenjiro.near/widget/telgram-auth", "fact_widget_deployments_id": "5cdc7905ecbce51d9993a94888384cd7", "inserted_timestamp": "2024-03-19T20:29:07.689Z", "modified_timestamp": "2024-03-19T20:29:07.689Z", "__row_index": 22}