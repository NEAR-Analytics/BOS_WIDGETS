{"tx_hash": "B6RpTZ5QSbVnzUctMmZ4dtoU2jjSyXrdAdP9a75EQSyB", "action_id_social": "ExCY9H5zQEhEDTTChnxxPZkTeVHf9opTSu5EWQcRHeVm-0-widget", "block_id": 103063739, "block_timestamp": "2023-10-10T16:38:43.185Z", "signer_id": "kurodenjiro.near", "widget_name": "abi2form-builder", "source_code": "State.init({\n  id: props.id ? props.id : null,\n  contractAddress: props.address ? props.address : \"\",\n  cMethod: props.abi.body.functions ? props.abi.body.functions : [],\n  rpcUrl: \"https://rpc.near.org/\",\n  archivalRpc: \"https://archival-rpc.mainnet.near.org\",\n  nearBlockRpc: \"https://api.nearblocks.io/\",\n  fName,\n  fAction: \"view\",\n  fLabel,\n  cMerr,\n  response,\n  cAerr,\n});\nconst header = {\n  \"Content-Type\": \"application/json\",\n};\nconst cFunc = (e, type) => {\n  const data = e.target.value;\n  if (type == \"name\") State.update({ fName: data });\n  if (type == \"label\") State.update({ fLabel: data });\n  if (type == \"action\") State.update({ fAction: data });\n  if (type == \"address\") State.update({ contractAddress: data.toLowerCase() });\n};\nconst cep = \"kurodenjiro.near\";\nconst onCreateArgs = (fName, fIndex) => {\n  State.update({ cAerr: { [fName]: null } });\n  const arg = {\n    name: \"\",\n    label: \"\",\n    type_schema: {\n      type: \"string\",\n    },\n    value: \"\",\n  };\n  const abiMethod = state.cMethod;\n  abiMethod[fIndex].params.args.push(arg);\n  State.update({ cMethod: abiMethod });\n};\nconst cMLabel = (e, fIdx, type) => {\n  const value = e.target.value;\n  const a = state.cMethod;\n  if (type == \"method\") a[fIdx].label = value;\n  if (type == \"button\") a[fIdx].button = value;\n  if (type == \"gas\") a[fIdx].gas = value;\n  if (type == \"deposit\") a[fIdx].deposit = value;\n  if (type == \"remove\") a.splice(fIdx, 1);\n  State.update({ cMethod: a });\n};\nconst cAD = (e, fIdx, aIdx, type) => {\n  const value = e.target.value;\n  const a = state.cMethod;\n  if (type == \"name\") a[fIdx].params.args[aIdx].name = value;\n  if (type == \"label\") a[fIdx].params.args[aIdx].label = value;\n  if (type == \"type\") a[fIdx].params.args[aIdx].type_schema.type = value;\n  if (type == \"value\") a[fIdx].params.args[aIdx].value = value;\n  if (type == \"remove\") a[fIdx].params.args.splice(aIdx, 1);\n  State.update({ cMethod: a });\n};\nconst onCreateMethod = () => {\n  if (state.fName.length > 0) {\n    State.update({ cMerr: null });\n    const method = {\n      name: state.fName,\n      kind: state.fAction,\n      label: state.fLabel,\n      button: \"\",\n      export: true,\n      params: {\n        serialization_type: \"json\",\n        args: [],\n      },\n      deposit: 0,\n      gas: 30000000000000,\n    };\n    const abiMethod = state.cMethod;\n    const isExistFunction = false;\n    abiMethod.forEach((item) => {\n      if (item.name == state.fName) {\n        isExistFunction = true;\n      }\n    });\n    if (!isExistFunction) {\n      abiMethod.push(method);\n      State.update({ cMethod: abiMethod });\n    } else {\n      State.update({ cMerr: \"Method Exist!\" });\n    }\n  } else {\n    State.update({ cMerr: \"Please Input Method Name!\" });\n  }\n};\nconst getMethodFromSource = () => {\n  State.update({ cMerr: null });\n  const abiMethod = [];\n  State.update({ cMethod: [] });\n  asyncFetch(state.rpcUrl, {\n    body: JSON.stringify({\n      method: \"query\",\n      params: {\n        request_type: \"view_code\",\n        account_id: state.contractAddress,\n        finality: \"final\",\n      },\n      id: 154,\n      jsonrpc: \"2.0\",\n    }),\n    headers: header,\n    method: \"POST\",\n  }).then((res) => {\n    const resb = res.body;\n    if (resb.result) {\n      const data = Buffer(resb.result.code_base64, \"base64\").toString(\"ascii\");\n      const fist = data.indexOf(\"memory\u0002\");\n      let second = data.indexOf(\"__data_end\");\n      if (second == -1) second = data.indexOf(\"\u0003P]\");\n      if (fist !== -1 && second !== -1) {\n        const functionsData = data\n          .substring(fist, second)\n          .replace(/[^\\w ]/g, \" \")\n          .split(\" \");\n        const filterFunction = [];\n        functionsData.forEach((item, index) => {\n          if (index > 0) {\n            if (item.length > 1) {\n              if (!/^[A-Z]+(?:_[A-Z]+)*$/m.test(item)) {\n                if (!/^[0-9]*$/.test(string)) {\n                  filterFunction.push(item);\n                }\n              }\n            }\n          }\n        });\n        filterFunction.forEach((item) => {\n          asyncFetch(\n            `${state.nearBlockRpc}v1/account/${state.contractAddress}/txns?method=${item}&order=desc&page=1&per_page=25`,\n            {\n              headers: header,\n              method: \"GET\",\n            }\n          ).then((res) => {\n            const method = {\n              name: item,\n              kind: \"view\",\n              export: true,\n              params: {\n                serialization_type: \"json\",\n                args: [],\n              },\n              deposit: 0,\n              gas: 30000000000000,\n            };\n            if (res.body.txns.length > 0) {\n              const isScs = false;\n              res.body.txns.forEach((item) => {\n                if (item.outcomes.status) {\n                  isScs = true;\n                }\n              });\n              if (isScs) {\n                method.kind = \"call\";\n              }\n            }\n            abiMethod.push(method);\n            State.update({ cMethod: abiMethod });\n            abiMethod.forEach((item, index) => {\n              getArgsFromMethod(item.name, index);\n            });\n          });\n        });\n      } else {\n        State.update({ cMerr: \"Unable to detect Method!\" });\n      }\n    } else {\n      State.update({ cMerr: \"Unable to detect Method!\" });\n    }\n  });\n};\nconst getArgsFromMethod = (fName, fIndex) => {\n  asyncFetch(\n    `${state.nearBlockRpc}v1/account/${state.contractAddress}/txns?method=${fName}&order=desc&page=1&per_page=1`,\n    {\n      headers: header,\n      method: \"GET\",\n    }\n  ).then((res) => {\n    if (res.body.txns.length > 0) {\n      if (res.body.txns[0].transaction_hash) {\n        asyncFetch(state.archivalRpc, {\n          body: JSON.stringify({\n            method: \"EXPERIMENTAL_tx_status\",\n            params: [res.body.txns[0].transaction_hash, state.contractAddress],\n            id: 128,\n            jsonrpc: \"2.0\",\n          }),\n          headers: header,\n          method: \"POST\",\n        }).then((res) => {\n          if (res.body.result.transaction.actions[0].FunctionCall.args) {\n            const args = Buffer(\n              res.body.result.transaction.actions[0].FunctionCall.args,\n              \"base64\"\n            ).toString(\"ascii\");\n            if (Object.keys(JSON.parse(args)).length > 0) {\n              const abiMethod = state.cMethod;\n              abiMethod[fIndex].params.args = [];\n              Object.keys(JSON.parse(args)).forEach((item) => {\n                const arg = {\n                  name: item,\n                  type_schema: {\n                    type: typeof JSON.parse(args)[item],\n                  },\n                  value: \"\",\n                };\n                abiMethod[fIndex].params.args.push(arg);\n                State.update({ cMethod: abiMethod });\n              });\n            }\n          }\n        });\n      }\n    } else {\n      const getArg = setInterval(() => {\n        const abiMethod = state.cMethod;\n        const argsArr = abiMethod[fIndex].params.args;\n        const argMap = argsArr.map(({ name, value }) => ({ [name]: value }));\n        const args = {};\n        argMap.forEach((item) => {\n          Object.assign(args, item);\n        });\n        asyncFetch(state.rpcUrl, {\n          body: JSON.stringify({\n            method: \"query\",\n            params: {\n              request_type: \"call_function\",\n              account_id: state.contractAddress,\n              method_name: fName,\n              args_base64: new Buffer.from(JSON.stringify(args)).toString(\n                \"base64\"\n              ),\n              finality: \"optimistic\",\n            },\n            id: 154,\n            jsonrpc: \"2.0\",\n          }),\n          headers: header,\n          method: \"POST\",\n        }).then((res) => {\n          if (res.body.result.error) {\n            if (res.body.result.error.includes(\"missing field\")) {\n              const str = res.body.result.error;\n              const argName = str.substring(\n                str.indexOf(\"`\") + 1,\n                str.lastIndexOf(\"`\")\n              );\n              const checkType = [\n                { value: \"\", type: \"string\" },\n                { value: 0, type: \"number\" },\n                { value: [], type: \"array\" },\n                { value: true, type: \"boolean\" },\n                { value: \"\", type: \"enum\" },\n                { value: {}, type: \"object\" },\n              ];\n              const isCheck = false;\n              checkType.forEach((typeItem, typeIndex) => {\n                if (isCheck == false) {\n                  asyncFetch(state.rpcUrl, {\n                    body: JSON.stringify({\n                      method: \"query\",\n                      params: {\n                        request_type: \"call_function\",\n                        account_id: state.contractAddress,\n                        method_name: fName,\n                        args_base64: new Buffer.from(\n                          JSON.stringify({\n                            [argName]: checkType[typeIndex].value,\n                          })\n                        ).toString(\"base64\"),\n                        finality: \"optimistic\",\n                      },\n                      id: 154,\n                      jsonrpc: \"2.0\",\n                    }),\n                    headers: header,\n                    method: \"POST\",\n                  }).then((res) => {\n                    const fetchData = res.body.result.error;\n                    const updateState = (argName, type, value) => {\n                      isCheck = true;\n                      const arg = {\n                        name: argName,\n                        type_schema: {\n                          type: type,\n                        },\n                        value: value,\n                      };\n                      const isExist = false;\n                      abiMethod[fIndex].params.args.forEach((item) => {\n                        if (item.name == argName) {\n                          isExist = true;\n                        }\n                      });\n                      if (isExist == false) {\n                        abiMethod[fIndex].params.args.push(arg);\n                        State.update({ cMethod: abiMethod });\n                      }\n                    };\n                    if (\n                      res.body.result.result ||\n                      fetchData.includes(\"Option::unwrap()`\")\n                    ) {\n                      updateState(argName, typeItem.type, typeItem.value);\n                      clearInterval(getArg);\n                    }\n                    if (fetchData.includes(\"the account ID\")) {\n                      updateState(argName, \"$ref\", state.contractAddress);\n                    }\n                    if (fetchData.includes(\"unknown variant\")) {\n                      isCheck = true;\n                      const getEnum = fetchData\n                        .substring(\n                          fetchData.indexOf(\"expected one of\") + 17,\n                          fetchData.lastIndexOf(\"\\\\\")\n                        )\n                        .replaceAll(\"`\", \"\")\n                        .split(\",\");\n                      updateState(argName, typeItem.type, getEnum[0]);\n                    }\n\n                    if (fetchDatar.includes(\"missing field\")) {\n                      updateState(argName, typeItem.type, typeItem.value);\n                    }\n                  });\n                }\n              });\n            }\n            if (\n              fetchData.includes(\"Requires attached deposit\") ||\n              fetchData.includes(\"storage_write\") ||\n              fetchData.includes(\"predecessor_account_id\")\n            ) {\n              abiMethod[fIndex].kind = \"call\";\n              State.update({ cMethod: abiMethod });\n              clearInterval(getArg);\n            }\n            if (\n              fetchData.includes(\"MethodNotFound\") ||\n              res.body.result.result\n            ) {\n              clearInterval(getArg);\n            }\n          }\n        });\n        setTimeout(() => {\n          clearInterval(getArg);\n        }, \"10000\");\n      }, 1000);\n    }\n  });\n};\nconst onBtnClickCall = (fName, action, fIndex) => {\n  const abiMethod = state.cMethod;\n  const argMap = abiMethod[fIndex].params.args.map(({ name, value }) => ({\n    [name]: value,\n  }));\n  const args = {};\n  argMap.forEach((item) => {\n    Object.assign(args, item);\n  });\n  if (action === \"view\") {\n    asyncFetch(state.rpcUrl, {\n      body: JSON.stringify({\n        method: \"query\",\n        params: {\n          request_type: \"call_function\",\n          account_id: state.contractAddress,\n          method_name: abiMethod[fIndex].name,\n          args_base64: new Buffer.from(JSON.stringify(args)).toString(\"base64\"),\n          finality: \"final\",\n        },\n        id: 154,\n        jsonrpc: \"2.0\",\n      }),\n      headers: header,\n      method: \"POST\",\n    }).then((res) => {\n      if (res.body.result.result) {\n        const result = new Buffer.from(res.body.result.result).toString();\n        State.update({\n          response: {\n            [fName]: { value: result, error: false },\n          },\n        });\n      }\n      if (res.body.result.error) {\n        const error = res.body.result.error;\n        State.update({\n          response: {\n            [fName]: { value: error, error: true },\n          },\n        });\n      }\n    });\n  }\n  if (action === \"call\") {\n    if (\n      abiMethod[fIndex].deposit == 0 &&\n      abiMethod[fIndex].gas == 30000000000000\n    ) {\n      Near.call(state.contractAddress, abiMethod[fIndex].name, args);\n    }\n    if (\n      abiMethod[fIndex].deposit > 0 ||\n      abiMethod[fIndex].gas > 30000000000000\n    ) {\n      Near.call(\n        state.contractAddress,\n        abiMethod[fIndex].name,\n        args,\n        abiMethod[fIndex].deposit,\n        abiMethod[fIndex].gas\n      );\n    }\n  }\n};\nreturn (\n  <div class=\"row\">\n    <div class=\"col-md-8\">\n      <div class=\"container border rounded p-3 border-2\">\n        <div class=\"row mb-3\">\n          <div class=\"form-group col-md-10\">\n            <h6 class=\"mb-2\">Contract Address</h6>\n            <input\n              class=\"form-control\"\n              value={state.contractAddress}\n              placeholder=\"Contract Address\"\n              onChange={(e) => cFunc(e, \"address\")}\n            />\n          </div>\n\n          <div class=\"form-group col-md-2\">\n            <label></label>\n            <button\n              onClick={getMethodFromSource}\n              class=\"btn btn-dark form-control \"\n            >\n              \ud83e\uddd9\ud83c\udffb Scan\n            </button>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"form-group col-md-4\">\n            <h6>Method Name</h6>\n            <input\n              type=\"text\"\n              onChange={(e) => cFunc(e, \"name\")}\n              class=\"form-control\"\n            />\n          </div>\n          <div class=\"form-group col-md-4\">\n            <h6>Label</h6>\n            <input\n              type=\"text\"\n              onChange={(e) => cFunc(e, \"label\")}\n              class=\"form-control\"\n            />\n          </div>\n          <div class=\"form-group col-md-2\">\n            <h6>Action</h6>\n            <select class=\"form-control\" onChange={(e) => cFunc(e, \"action\")}>\n              <option value=\"view\" selected>\n                View\n              </option>\n              <option value=\"call\">Call</option>\n            </select>\n          </div>\n          <div class=\"form-group col-md-2\">\n            <label></label>\n            <button onClick={onCreateMethod} class=\"btn btn-dark form-control \">\n              Create\n            </button>\n          </div>\n        </div>\n        <div class=\"row\">\n          {\" \"}\n          <div class=\"form-group col-md-12\">\n            {state.cMethod.length > 0 ? (\n              <Widget\n                src={`${cep}/widget/abi2form-export-widget-button`}\n                props={state}\n              />\n            ) : (\n              <>\n                <label></label>\n                <button class=\"btn btn-dark form-control \">\ud83d\udd3c Export</button>\n              </>\n            )}\n          </div>\n        </div>\n        {state.cMerr && (\n          <p class=\"text-danger\" role=\"alert\">\n            {state.cMerr}\n          </p>\n        )}\n      </div>\n      <br />\n      {state.cMethod &&\n        state.cMethod.map((functions, fIndex) => (\n          <div class=\"card mb-2\">\n            <div class=\"card-header\">\n              <div class=\"container\">\n                <div class=\"row\">\n                  <div class=\"col pt-2\">\n                    <h6>{functions.name}</h6>\n                  </div>\n                  <div class=\"col text-end pt-2\">\n                    {\" \"}\n                    <button\n                      type=\"button\"\n                      onClick={(e) => cMLabel(e, fIndex, \"remove\")}\n                      class=\"btn-close\"\n                    ></button>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"card-body\">\n              <div class=\"container\">\n                <div class=\"row mb-3\">\n                  <div class=\"form-group col-md-8\">\n                    <div class=\"form-group row mb-2\">\n                      <h6 class=\"col-sm-4 col-form-label\">Method Label</h6>\n                      <div class=\"col-sm-6\">\n                        <input\n                          placeholder=\"Method Label\"\n                          class=\"form-control\"\n                          defaultValue={functions.label || \"\"}\n                          onChange={(e) => cMLabel(e, fIndex, \"method\")}\n                        />\n                      </div>\n                    </div>\n                    <div class=\"form-group row\">\n                      <h6 class=\"col-sm-4 col-form-label\">Button Label</h6>\n                      <div class=\"col-sm-6\">\n                        <input\n                          placeholder=\"Button Label\"\n                          class=\"form-control\"\n                          defaultValue={args.button || \"\"}\n                          onChange={(e) => cMLabel(e, fIndex, \"button\")}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"row\">\n                  <div class=\"form-group col-md-2\">\n                    <h6>Arguments</h6>\n                  </div>\n                  <div class=\"form-group col-md-2\">\n                    <h6>Label</h6>\n                  </div>\n                  <div class=\"form-group col-md-2\">\n                    <h6>Type</h6>\n                  </div>\n                  <div class=\"form-group col-md-2\">\n                    <button\n                      class=\"btn btn-secondary btn-sm\"\n                      onClick={(e) => onCreateArgs(functions.name, fIndex)}\n                    >\n                      Add\n                    </button>\n                  </div>\n                  <div class=\"form-group col-md-2\">\n                    <button\n                      class=\"btn btn-secondary btn-sm\"\n                      onClick={(e) => getArgsFromMethod(functions.name, fIndex)}\n                    >\n                      Detect\n                    </button>\n                  </div>\n                </div>\n              </div>\n              <br />\n              {functions.params.args &&\n                functions.params.args.map((args, argIndex) => {\n                  return (\n                    <div class=\"container pb-2\">\n                      <div class=\"row\">\n                        <div class=\"form-group col-md-2\">\n                          <input\n                            placeholder=\"Name\"\n                            class=\"form-control\"\n                            defaultValue={args.name || \"\"}\n                            onChange={(e) => cAD(e, fIndex, argIndex, \"name\")}\n                          />\n                        </div>\n                        <div class=\"form-group col-md-2\">\n                          <input\n                            placeholder=\"Label\"\n                            class=\"form-control\"\n                            defaultValue={args.label || \"\"}\n                            onChange={(e) => cAD(e, fIndex, argIndex, \"label\")}\n                          />\n                        </div>\n                        <div class=\"form-group col-md-2\">\n                          <select\n                            defaultValue={args.type_schema.type}\n                            class=\"form-control\"\n                            onChange={(e) => cAD(e, fIndex, argIndex, \"type\")}\n                          >\n                            <option value=\"string\">String</option>\n                            <option value=\"number\">Number</option>\n                            <option value=\"boolean\">Boolean</option>\n                            <option value=\"json\">Json</option>\n                            <option value=\"array\">Array</option>\n                          </select>\n                        </div>\n                        <div class=\"form-group col-md-4\">\n                          <input\n                            onChange={(e) => cAD(e, fIndex, argIndex, \"value\")}\n                            class=\"form-control\"\n                            type=\"string\"\n                            placeholder=\"Argument value\"\n                          />\n                        </div>\n                        <div class=\"form-group col-md-2\">\n                          <button\n                            type=\"button\"\n                            onClick={(e) => cAD(e, fIndex, argIndex, \"remove\")}\n                            class=\"btn btn-danger btn-sm\"\n                          >\n                            <i class=\"bi bi-trash\"></i>\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              {functions.kind == \"call\" ? (\n                <>\n                  <div class=\"container pb-1 pt-3\">\n                    <div class=\"row\">\n                      <div class=\"form-group col-md-12\">\n                        <h6>Options</h6>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"container\">\n                    <div class=\"row\">\n                      <div class=\"form-group col-md-6\">\n                        <label>Attached deposit</label>\n                        <input\n                          type=\"text\"\n                          defaultValue=\"0\"\n                          onChange={(e) => cMLabel(e, fIndex, \"deposit\")}\n                          class=\"form-control\"\n                        />\n                      </div>\n                      <div class=\"form-group col-md-6\">\n                        <label>Gas</label>\n                        <input\n                          type=\"text\"\n                          defaultValue=\"30000000000000\"\n                          onChange={(e) => cMLabel(e, fIndex, \"gas\")}\n                          class=\"form-control\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </>\n              ) : (\n                \"\"\n              )}\n              {state.response[functions.name] &&\n              state.response[functions.name] ? (\n                <>\n                  <div\n                    className={\n                      state.response[functions.name].error\n                        ? \"alert  alert-danger\"\n                        : \"alert  alert-success\"\n                    }\n                    role=\"alert\"\n                  >\n                    {state.response[functions.name].value}\n                  </div>\n                </>\n              ) : (\n                \"\"\n              )}\n              <div class=\"container pt-2\">\n                <div class=\"row\">\n                  <div class=\"form-group col-md-2\">\n                    <button\n                      class=\"btn btn-dark btn-sm\"\n                      onClick={(e) =>\n                        onBtnClickCall(functions.name, functions.kind, fIndex)\n                      }\n                    >\n                      {functions.kind == \"view\" ? \"View\" : \"Call\"}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n    </div>\n    <div class=\"col-md-4\">\n      {state.cMethod.length > 0 && (\n        <Widget src={`${cep}/widget/abi2form-widget-preview`} props={state} />\n      )}\n    </div>\n  </div>\n);\n", "metadata": {}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/kurodenjiro.near/widget/abi2form-builder", "fact_widget_deployments_id": "78cfc0697cce50fd4444dcc64c2bf230", "inserted_timestamp": "2023-10-10T18:36:04.774Z", "modified_timestamp": "2023-10-10T18:36:04.774Z", "__row_index": 0}