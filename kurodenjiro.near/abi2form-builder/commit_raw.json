{"tx_hash": "8A5BM8oevzWYWBoE65Kms9a7FTnDLCgghS8CedBCVq5N", "action_id_social": "9FQq81EBuBSXquXmTabzkfRFCVTdDCnCESWxtYgTuwvp-0-widget", "block_id": 102271316, "block_timestamp": "2023-09-30T03:41:12.837Z", "signer_id": "kurodenjiro.near", "widget_name": "abi2form-builder", "source_code": "State.init({\r\n  contractAddress: \"trustcore.near\",\r\n  rpcUrl: \"https://rpc.near.org/\", //https://rpc.testnet.near.org\r\n  archivalRpc: \"https://archival-rpc.mainnet.near.org\", //https://archival-rpc.testnet.near.org\r\n  nearBlockRpc: \"https://api.nearblocks.io/\", // https://api-testnet.nearblocks.io\r\n  contractAbi: {\r\n    schema_version: \"0.3.0\",\r\n    metadata: {\r\n      name: \"\",\r\n      version: \"1.0.0\",\r\n      authors: [],\r\n      build: {\r\n        compiler: \"\",\r\n        builder: \"\",\r\n      },\r\n    },\r\n    body: {\r\n      functions: [],\r\n    },\r\n  },\r\n  functionsName,\r\n  functionsAction: \"view\",\r\n  contractAbiCall: [],\r\n  contractAbiView: [],\r\n  contractAbiArg,\r\n  createMethodError,\r\n  response,\r\n  createArgError,\r\n  checkMethodExport: [],\r\n  commitLoading: false,\r\n});\r\n\r\nconst onInputChangeFunctionsName = ({ target }) => {\r\n  State.update({ functionsName: target.value });\r\n};\r\nconst onInputChangeFunctionsAction = ({ target }) => {\r\n  State.update({ functionsAction: target.value });\r\n};\r\nconst onInputChangeContractAddress = ({ target }) => {\r\n  State.update({ contractAddress: target.value });\r\n};\r\nconst onCreateArgs = (functionsName, functionsAction, functionsIndex) => {\r\n  State.update({ createArgError: { [functionsName]: null } });\r\n  const arg = {\r\n    name: \"\",\r\n    type_schema: {\r\n      type: \"string\",\r\n    },\r\n    value: \"\",\r\n  };\r\n\r\n  if (functionsAction == \"view\") {\r\n    const abiView = state.contractAbiView;\r\n    abiView[functionsIndex].params.args.push(arg);\r\n    State.update({ contractAbiView: abiView });\r\n  }\r\n\r\n  if (functionsAction == \"call\") {\r\n    const abiCall = state.contractAbiCall;\r\n    abiCall[functionsIndex].params.args.push(arg);\r\n    State.update({ contractAbiCall: abiCall });\r\n  }\r\n};\r\nconst onInputChangeArgName = (\r\n  functionsAction,\r\n  e,\r\n  functionsIndex,\r\n  argsIndex\r\n) => {\r\n  if (functionsAction == \"view\") {\r\n    const abiView = state.contractAbiView;\r\n    abiView[functionsIndex].params.args[argsIndex].name = e.target.value;\r\n    State.update({ contractAbiView: abiView });\r\n    console.log(abiView);\r\n  }\r\n  if (functionsAction == \"call\") {\r\n    const abiCall = state.contractAbiCall;\r\n    abiCall[functionsIndex].params.args[argsIndex].name = e.target.value;\r\n    State.update({ contractAbiCall: abiCall });\r\n    console.log(abiCall);\r\n  }\r\n};\r\nconst onRemoveArg = (action, functionsIndex, argsIndex) => {\r\n  if (action == \"view\") {\r\n    const abiView = state.contractAbiView;\r\n    abiView[functionsIndex].params.args.splice(argsIndex, 1);\r\n    State.update({ contractAbiView: abiView });\r\n  }\r\n  if (action == \"call\") {\r\n    const abiCall = state.contractAbiCall;\r\n    abiCall[functionsIndex].params.args.splice(argsIndex, 1);\r\n    State.update({ contractAbiCall: abiCall });\r\n  }\r\n};\r\n\r\nconst onInputChangeArgType = (\r\n  functionsAction,\r\n  e,\r\n  functionsIndex,\r\n  argsIndex\r\n) => {\r\n  if (functionsAction == \"view\") {\r\n    const abiView = state.contractAbiView;\r\n    abiView[functionsIndex].params.args[argsIndex].type_schema.type =\r\n      e.target.value;\r\n    State.update({ contractAbiView: abiView });\r\n    console.log(abiView);\r\n  }\r\n  if (functionsAction == \"call\") {\r\n    const abiCall = state.contractAbiCall;\r\n    abiCall[functionsIndex].params.args[argsIndex].type_schema.type =\r\n      e.target.value;\r\n    State.update({ contractAbiCall: abiCall });\r\n    console.log(abiCall);\r\n  }\r\n};\r\nconst onInputChangeArgValue = (\r\n  functionsAction,\r\n  e,\r\n  functionsIndex,\r\n  argsIndex\r\n) => {\r\n  if (functionsAction == \"view\") {\r\n    const abiView = state.contractAbiView;\r\n    abiView[functionsIndex].params.args[argsIndex].value = e.target.value;\r\n    State.update({ contractAbiView: abiView });\r\n    console.log(abiView);\r\n  }\r\n  if (functionsAction == \"call\") {\r\n    const abiCall = state.contractAbiCall;\r\n    abiCall[functionsIndex].params.args[argsIndex].value = e.target.value;\r\n    State.update({ contractAbiCall: abiCall });\r\n    console.log(abiCall);\r\n  }\r\n};\r\nconst onCreateMethod = (e) => {\r\n  State.update({ createMethodError: null });\r\n  const method = {\r\n    name: state.functionsName,\r\n    kind: state.functionsAction,\r\n    export: true,\r\n    params: {\r\n      serialization_type: \"json\",\r\n      args: [],\r\n    },\r\n    deposit: 0,\r\n    gas: 30000000000000,\r\n  };\r\n  if (state.functionsAction == \"view\") {\r\n    const abiView = state.contractAbiView;\r\n    const isExistFunction = false;\r\n    abiView.forEach((item) => {\r\n      if (item.name == state.functionsName) {\r\n        isExistFunction = true;\r\n      }\r\n    });\r\n    if (!isExistFunction) {\r\n      abiView.push(method);\r\n      State.update({ contractAbiView: abiView });\r\n    } else {\r\n      State.update({ createMethodError: \"Function Exist\" });\r\n    }\r\n  }\r\n  if (state.functionsAction == \"call\") {\r\n    const abiCall = state.contractAbiCall;\r\n    const isExistFunction = false;\r\n    abiCall.forEach((item) => {\r\n      if (item.name == state.functionsName) {\r\n        isExistFunction = true;\r\n      }\r\n    });\r\n    if (!isExistFunction) {\r\n      abiCall.push(method);\r\n      console.log(abiCall);\r\n      State.update({ contractAbiCall: abiCall });\r\n    } else {\r\n      State.update({ createMethodError: \"Function Exist\" });\r\n    }\r\n  }\r\n};\r\n\r\nconst onInputChangeDeposit = (action, functionsIndex, e) => {\r\n  if (action == \"view\") {\r\n    const abiView = state.contractAbiView;\r\n    abiView[functionsIndex].deposit = parseInt(e.target.value);\r\n    State.update({ contractAbiView: abiView });\r\n  }\r\n  if (action == \"call\") {\r\n    const abiCall = state.contractAbiCall;\r\n    abiCall[functionsIndex].deposit = parseInt(e.target.value);\r\n    State.update({ contractAbiCall: abiCall });\r\n  }\r\n};\r\nconst onInputChangeGas = (action, functionsIndex, e) => {\r\n  if (action == \"view\") {\r\n    const abiView = state.contractAbiView;\r\n    abiView[functionsIndex].gas = e.target.value;\r\n    State.update({ contractAbiView: abiView });\r\n    console.log(abiView);\r\n  }\r\n  if (action == \"call\") {\r\n    const abiCall = state.contractAbiCall;\r\n    abiCall[functionsIndex].gas = parseInt(e.target.value);\r\n    State.update({ contractAbiCall: abiCall });\r\n  }\r\n};\r\nconst getMethodFromSource = () => {\r\n  asyncFetch(state.rpcUrl, {\r\n    body: JSON.stringify({\r\n      method: \"query\",\r\n      params: {\r\n        request_type: \"view_code\",\r\n        account_id: state.contractAddress,\r\n        finality: \"final\",\r\n      },\r\n      id: 154,\r\n      jsonrpc: \"2.0\",\r\n    }),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    method: \"POST\",\r\n  }).then((res) => {\r\n    if (res.body.result) {\r\n      const data = Buffer(res.body.result.code_base64, \"base64\").toString(\r\n        \"ascii\"\r\n      );\r\n      const fist = data.indexOf(\"memory\u0002\");\r\n      let second = data.indexOf(\"__data_end\");\r\n      if (second == -1) {\r\n        second = data.indexOf(\"\u0003P]\");\r\n      }\r\n\r\n      if (fist !== -1 && second !== -1) {\r\n        const functionsData = data\r\n          .substring(fist, second)\r\n          .replace(/[^\\w ]/g, \" \")\r\n          .split(\" \");\r\n        const filterFunction = [];\r\n        functionsData.forEach((item, index) => {\r\n          if (index > 0) {\r\n            if (item.length > 0) {\r\n              if (!/^[A-Z]+(?:_[A-Z]+)*$/m.test(item)) {\r\n                filterFunction.push(item);\r\n              }\r\n            }\r\n          }\r\n        });\r\n        const abiCall = [];\r\n        const abiView = [];\r\n        State.update({ contractAbiView: [] });\r\n        State.update({ contractAbiCall: [] });\r\n        filterFunction.forEach((item) => {\r\n          asyncFetch(state.rpcUrl, {\r\n            body: JSON.stringify({\r\n              method: \"query\",\r\n              params: {\r\n                request_type: \"call_function\",\r\n                account_id: state.contractAddress,\r\n                method_name: item,\r\n                args_base64: \"eyIiOiIifQ==\",\r\n                finality: \"optimistic\",\r\n              },\r\n              id: 128,\r\n              jsonrpc: \"2.0\",\r\n            }),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            method: \"POST\",\r\n          }).then((res) => {\r\n            if (res.body.result.error) {\r\n              const isCallFunction =\r\n                res.body.result.error.search(\"storage_write\");\r\n              if (isCallFunction !== -1) {\r\n                const method = {\r\n                  name: item,\r\n                  kind: \"call\",\r\n                  export: true,\r\n                  params: {\r\n                    serialization_type: \"json\",\r\n                    args: [],\r\n                  },\r\n                  deposit: 0,\r\n                  gas: 30000000000000,\r\n                };\r\n                abiCall.push(method);\r\n                State.update({ contractAbiCall: abiCall });\r\n              } else {\r\n                const method = {\r\n                  name: item,\r\n                  kind: \"view\",\r\n                  export: true,\r\n                  params: {\r\n                    serialization_type: \"json\",\r\n                    args: [],\r\n                  },\r\n                  deposit: 0,\r\n                  gas: 30000000000000,\r\n                };\r\n                abiView.push(method);\r\n                State.update({ contractAbiView: abiView });\r\n              }\r\n            } else {\r\n              const method = {\r\n                name: item,\r\n                kind: \"view\",\r\n                export: true,\r\n                params: {\r\n                  serialization_type: \"json\",\r\n                  args: [],\r\n                },\r\n              };\r\n              abiView.push(method);\r\n              State.update({ contractAbiView: abiView });\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  });\r\n};\r\nconst getArgsFromMethod = (functionsName, action, functionsIndex) => {\r\n  asyncFetch(\r\n    `${state.nearBlockRpc}v1/account/${state.contractAddress}/txns?method=${functionsName}&order=desc&page=1&per_page=1`,\r\n    {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"GET\",\r\n    }\r\n  ).then((res) => {\r\n    if (res.body.txns.length > 0) {\r\n      if (res.body.txns[0].transaction_hash) {\r\n        asyncFetch(state.archivalRpc, {\r\n          body: JSON.stringify({\r\n            method: \"EXPERIMENTAL_tx_status\",\r\n            params: [res.body.txns[0].transaction_hash, state.contractAddress],\r\n            id: 128,\r\n            jsonrpc: \"2.0\",\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n        }).then((res) => {\r\n          if (res.body.result.transaction.actions[0].FunctionCall.args) {\r\n            const args = Buffer(\r\n              res.body.result.transaction.actions[0].FunctionCall.args,\r\n              \"base64\"\r\n            ).toString(\"ascii\");\r\n            if (Object.keys(JSON.parse(args)).length > 0) {\r\n              Object.keys(JSON.parse(args)).forEach((item) => {\r\n                if (action == \"call\") {\r\n                  const arg = {\r\n                    name: item,\r\n                    type_schema: {\r\n                      type: typeof JSON.parse(args)[item],\r\n                    },\r\n                    value: \"\",\r\n                  };\r\n                  const abiCall = state.contractAbiCall;\r\n                  abiCall[functionsIndex].params.args = [];\r\n                  abiCall[functionsIndex].params.args.push(arg);\r\n                  State.update({ contractAbiCall: abiCall });\r\n                }\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  });\r\n};\r\nconst onBtnClickCall = (functionsName, action, functionsIndex) => {\r\n  if (action === \"view\") {\r\n    const abiView = state.contractAbiView;\r\n    const argMap = abiView[functionsIndex].params.args.map(\r\n      ({ name, value }) => ({\r\n        [name]: value,\r\n      })\r\n    );\r\n    const args = {};\r\n    argMap.forEach((item) => {\r\n      Object.assign(args, item);\r\n    });\r\n    asyncFetch(state.rpcUrl, {\r\n      body: JSON.stringify({\r\n        method: \"query\",\r\n        params: {\r\n          request_type: \"call_function\",\r\n          account_id: state.contractAddress,\r\n          method_name: abiView[functionsIndex].name,\r\n          args_base64: new Buffer.from(JSON.stringify(args)).toString(\"base64\"), //fix here\r\n          finality: \"final\",\r\n        },\r\n        id: 154,\r\n        jsonrpc: \"2.0\",\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    }).then((res) => {\r\n      if (res.body.result.result) {\r\n        const result = new Buffer.from(res.body.result.result).toString();\r\n        State.update({\r\n          response: {\r\n            [functionsName]: { value: result, error: false },\r\n          },\r\n        });\r\n      }\r\n      if (res.body.result.error) {\r\n        const error = res.body.result.error;\r\n        State.update({\r\n          response: {\r\n            [functionsName]: { value: error, error: true },\r\n          },\r\n        });\r\n      }\r\n    });\r\n  }\r\n  if (action === \"call\") {\r\n    const abiCall = state.contractAbiCall;\r\n    const argMap = abiCall[functionsIndex].params.args.map(\r\n      ({ name, value }) => ({\r\n        [name]: value,\r\n      })\r\n    );\r\n    const args = {};\r\n    argMap.forEach((item) => {\r\n      Object.assign(args, item);\r\n    });\r\n    Near.call(\r\n      state.contractAddress,\r\n      abiCall[functionsIndex].name,\r\n      args,\r\n      abiCall[functionsIndex].deposit,\r\n      abiCall[functionsIndex].gas\r\n    );\r\n  }\r\n};\r\n\r\nconst onSwitchChangeArgExport = (action, functionsIndex) => {\r\n  if (action == \"view\") {\r\n    const abiView = state.contractAbiView;\r\n    abiView[functionsIndex].export = !abiView[functionsIndex].export;\r\n    State.update({ contractAbiView: abiView });\r\n  }\r\n  if (action == \"call\") {\r\n    const abiCall = state.contractAbiCall;\r\n    abiCall[functionsIndex].export = !abiCall[functionsIndex].export;\r\n    console.log(abiCall);\r\n    State.update({ contractAbiCall: abiCall });\r\n  }\r\n};\r\n\r\nconst onRemoveMethod = (action, functionsIndex) => {\r\n  if (action == \"view\") {\r\n    const abiView = state.contractAbiView;\r\n    abiView.splice(functionsIndex, 1);\r\n    State.update({ contractAbiView: abiView });\r\n  }\r\n  if (action == \"call\") {\r\n    const abiCall = state.contractAbiCall;\r\n    abiCall.splice(functionsIndex, 1);\r\n    State.update({ contractAbiCall: abiCall });\r\n  }\r\n};\r\nconst Loading = (\r\n  <span\r\n    className=\"spinner-grow spinner-grow-sm me-1\"\r\n    role=\"status\"\r\n    aria-hidden=\"true\"\r\n  />\r\n);\r\nconst exportForm = () => {\r\n  const abi = {\r\n    schema_version: \"0.3.0\",\r\n    add: state.contractAddress,\r\n    metadata: {\r\n      name: state.contractAddress,\r\n      version: \"0.1.0\",\r\n      authors: [\"\"],\r\n    },\r\n    body: {\r\n      functions: [],\r\n    },\r\n  };\r\n  const abiView = state.contractAbiView;\r\n  abiView.forEach((item) => {\r\n    abi.body.functions.push(item);\r\n  });\r\n  const abiCall = state.contractAbiCall;\r\n  abiCall.forEach((item) => {\r\n    if (item.export) {\r\n      abi.body.functions.push(item);\r\n    }\r\n  });\r\n  const data = {\r\n    widget: {\r\n      \"abi2form-widget\": {\r\n        \"\":\r\n          \"const user = context.accountId;\\r\\nconst props = \" +\r\n          JSON.stringify(abi).replaceAll(\"\\\\\", \"\") +\r\n          \" \\r\\n\\r\\nreturn (\\r\\n  <>\\r\\n    <Widget src={`${user}/widget/abi2form-widget`} props={props} />\\r\\n  </>\\r\\n);\\r\\n\",\r\n      },\r\n    },\r\n  };\r\n  State.update({ commitLoading: true });\r\n  Social.set(data, {\r\n    force: true,\r\n    onCommit: () => {\r\n      State.update({ commitLoading: false });\r\n    },\r\n    onCancel: () => {\r\n      State.update({ commitLoading: false });\r\n    },\r\n  });\r\n  console.log(JSON.stringify(abi));\r\n};\r\nconst contractForm = (\r\n  <>\r\n    <div class=\"card mb-2\">\r\n      <div class=\"card-header\">Build ABI</div>\r\n      <div class=\"card-body\">\r\n        <div class=\"form-group\">\r\n          <label class=\"mb-2\">Contract Address</label>\r\n          <input\r\n            class=\"form-control\"\r\n            value={state.contractAddress}\r\n            placeholder=\"Contract Address\"\r\n            onChange={onInputChangeContractAddress}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </>\r\n);\r\nreturn (\r\n  <>\r\n    <div class=\"container border border-info p-3\">\r\n      {context.accountId ? contractForm : notLoggedInWarning}\r\n      <h3 class=\"text-center\">Create Method</h3>\r\n      <div class=\"container\">\r\n        <div class=\"row\">\r\n          <div class=\"form-group col-md-4\">\r\n            <label>Function Name</label>\r\n            <input\r\n              type=\"text\"\r\n              onChange={onInputChangeFunctionsName}\r\n              class=\"form-control\"\r\n            />\r\n          </div>\r\n          <div class=\"form-group col-md-2\">\r\n            <label>Action</label>\r\n            <select\r\n              class=\"form-control\"\r\n              onChange={onInputChangeFunctionsAction}\r\n            >\r\n              <option value=\"view\" selected>\r\n                View\r\n              </option>\r\n              <option value=\"call\">Call</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"form-group col-md-2\">\r\n            <label></label>\r\n            <button\r\n              onClick={onCreateMethod}\r\n              class=\"btn btn-success form-control \"\r\n            >\r\n              Create\r\n            </button>\r\n          </div>\r\n          <div class=\"form-group col-md-2\">\r\n            <label></label>\r\n            <button\r\n              onClick={getMethodFromSource}\r\n              class=\"btn btn-success form-control \"\r\n            >\r\n              Detect\r\n            </button>\r\n          </div>\r\n  ", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/kurodenjiro.near/widget/abi2form-builder", "fact_widget_deployments_id": "dbacb997d7c0b2f1665a7e243a1c2b72", "inserted_timestamp": "2023-09-30T05:28:11.850Z", "modified_timestamp": "2023-09-30T05:28:11.850Z", "__row_index": 4}