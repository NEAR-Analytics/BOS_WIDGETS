{"tx_hash": "DCc2mSvTzQtbCFbDdngytedLVMmuWQhpsqfPsE3xH5em", "action_id_social": "9MWq8VU2sHicePjdGAxwxxUVxaKHYhZEw4HhzoUQJ6MR-0-widget", "block_id": 102285155, "block_timestamp": "2023-09-30T08:08:11.383Z", "signer_id": "kurodenjiro.near", "widget_name": "abi2form-builder", "source_code": "State.init({\r\n  contractAddress: \"\",\r\n  rpcUrl: \"https://rpc.near.org/\", //https://rpc.testnet.near.org\r\n  archivalRpc: \"https://archival-rpc.mainnet.near.org\", //https://archival-rpc.testnet.near.org\r\n  nearBlockRpc: \"https://api.nearblocks.io/\", // https://api-testnet.nearblocks.io\r\n  contractAbi: {\r\n    schema_version: \"0.3.0\",\r\n    metadata: {\r\n      name: \"\",\r\n      version: \"1.0.0\",\r\n      authors: [],\r\n      build: {\r\n        compiler: \"\",\r\n        builder: \"\",\r\n      },\r\n    },\r\n    body: {\r\n      functions: [],\r\n    },\r\n  },\r\n  fName,\r\n  fAction: \"view\",\r\n  cMethod: [],\r\n  createMethodError,\r\n  response,\r\n  createArgError,\r\n  checkMethodExport: [],\r\n});\r\n\r\nconst onInputChangeFunctionsName = ({ target }) => {\r\n  State.update({ fName: target.value });\r\n};\r\nconst onInputChangeFunctionsAction = ({ target }) => {\r\n  State.update({ fAction: target.value });\r\n};\r\nconst onInputChangeContractAddress = ({ target }) => {\r\n  State.update({ contractAddress: target.value });\r\n};\r\nconst onCreateArgs = (fName, fIndex) => {\r\n  State.update({ createArgError: { [fName]: null } });\r\n  const arg = {\r\n    name: \"\",\r\n    type_schema: {\r\n      type: \"string\",\r\n    },\r\n    value: \"\",\r\n  };\r\n\r\n  const abiMethod = state.cMethod;\r\n  abiMethod[fIndex].params.args.push(arg);\r\n  State.update({ cMethod: abiMethod });\r\n};\r\nconst onInputChangeArgName = (e, fIndex, aIndex) => {\r\n  const abiMethod = state.cMethod;\r\n  abiMethod[fIndex].params.args[aIndex].name = e.target.value;\r\n  State.update({ cMethod: abiMethod });\r\n};\r\nconst onRemoveArg = (fIndex, aIndex) => {\r\n  const abiMethod = state.cMethod;\r\n  abiMethod[fIndex].params.args.splice(aIndex, 1);\r\n  State.update({ cMethod: abiMethod });\r\n};\r\n\r\nconst onInputChangeArgType = (e, fIndex, aIndex) => {\r\n  const abiMethod = state.cMethod;\r\n  abiMethod[fIndex].params.args[aIndex].type_schema.type = e.target.value;\r\n  State.update({ cMethod: abiMethod });\r\n};\r\nconst onInputChangeArgValue = (e, fIndex, aIndex) => {\r\n  const abiMethod = state.cMethod;\r\n  abiMethod[fIndex].params.args[aIndex].value = e.target.value;\r\n  State.update({ cMethod: abiMethod });\r\n};\r\nconst onCreateMethod = (e) => {\r\n  State.update({ createMethodError: null });\r\n  const method = {\r\n    name: state.fName,\r\n    kind: state.fAction,\r\n    export: true,\r\n    params: {\r\n      serialization_type: \"json\",\r\n      args: [],\r\n    },\r\n    deposit: 0,\r\n    gas: 30000000000000,\r\n  };\r\n  const abiMethod = state.cMethod;\r\n  const isExistFunction = false;\r\n  abiMethod.forEach((item) => {\r\n    if (item.name == state.fName) {\r\n      isExistFunction = true;\r\n    }\r\n  });\r\n  if (!isExistFunction) {\r\n    abiMethod.push(method);\r\n    State.update({ cMethod: abiMethod });\r\n  } else {\r\n    State.update({ createMethodError: \"Function Exist\" });\r\n  }\r\n};\r\nconst onInputChangeDeposit = (fIndex, e) => {\r\n  const abiMethod = state.cMethod;\r\n  abiMethod[fIndex].deposit = parseInt(e.target.value);\r\n  State.update({ cMethod: abiMethod });\r\n};\r\nconst onInputChangeGas = (fIndex, e) => {\r\n  const abiMethod = state.cMethod;\r\n  abiMethod[fIndex].gas = e.target.value;\r\n  State.update({ cMethod: abiMethod });\r\n};\r\nconst getMethodFromSource = () => {\r\n  asyncFetch(state.rpcUrl, {\r\n    body: JSON.stringify({\r\n      method: \"query\",\r\n      params: {\r\n        request_type: \"view_code\",\r\n        account_id: state.contractAddress,\r\n        finality: \"final\",\r\n      },\r\n      id: 154,\r\n      jsonrpc: \"2.0\",\r\n    }),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    method: \"POST\",\r\n  }).then((res) => {\r\n    if (res.body.result) {\r\n      const data = Buffer(res.body.result.code_base64, \"base64\").toString(\r\n        \"ascii\"\r\n      );\r\n      const fist = data.indexOf(\"memory\u0002\");\r\n      let second = data.indexOf(\"__data_end\");\r\n      if (second == -1) {\r\n        second = data.indexOf(\"\u0003P]\");\r\n      }\r\n      if (fist !== -1 && second !== -1) {\r\n        const functionsData = data\r\n          .substring(fist, second)\r\n          .replace(/[^\\w ]/g, \" \")\r\n          .split(\" \");\r\n        const filterFunction = [];\r\n        functionsData.forEach((item, index) => {\r\n          if (index > 0) {\r\n            if (item.length > 1) {\r\n              if (!/^[A-Z]+(?:_[A-Z]+)*$/m.test(item)) {\r\n                if (!/^[0-9]*$/.test(string)) {\r\n                  filterFunction.push(item);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n        const abiMethod = [];\r\n        State.update({ cMethod: [] });\r\n        filterFunction.forEach((item) => {\r\n          asyncFetch(state.rpcUrl, {\r\n            body: JSON.stringify({\r\n              method: \"query\",\r\n              params: {\r\n                request_type: \"call_function\",\r\n                account_id: state.contractAddress,\r\n                method_name: item,\r\n                args_base64: \"eyIiOiIifQ==\",\r\n                finality: \"optimistic\",\r\n              },\r\n              id: 128,\r\n              jsonrpc: \"2.0\",\r\n            }),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            method: \"POST\",\r\n          }).then((res) => {\r\n            const method = {\r\n              name: item,\r\n              kind: \"view\",\r\n              export: true,\r\n              params: {\r\n                serialization_type: \"json\",\r\n                args: [],\r\n              },\r\n              deposit: 0,\r\n              gas: 30000000000000,\r\n            };\r\n            if (res.body.result.error) {\r\n              const isCallFunction =\r\n                res.body.result.error.search(\"storage_write\");\r\n              if (isCallFunction !== -1) {\r\n                method.kind = \"call\";\r\n              }\r\n            }\r\n            abiMethod.push(method);\r\n            State.update({ cMethod: abiMethod });\r\n          });\r\n        });\r\n      }\r\n    }\r\n  });\r\n};\r\nconst getArgsFromMethod = (fName, fIndex) => {\r\n  asyncFetch(\r\n    `${state.nearBlockRpc}v1/account/${state.contractAddress}/txns?method=${fName}&order=desc&page=1&per_page=1`,\r\n    {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"GET\",\r\n    }\r\n  ).then((res) => {\r\n    if (res.body.txns.length > 0) {\r\n      if (res.body.txns[0].transaction_hash) {\r\n        asyncFetch(state.archivalRpc, {\r\n          body: JSON.stringify({\r\n            method: \"EXPERIMENTAL_tx_status\",\r\n            params: [res.body.txns[0].transaction_hash, state.contractAddress],\r\n            id: 128,\r\n            jsonrpc: \"2.0\",\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n        }).then((res) => {\r\n          if (res.body.result.transaction.actions[0].FunctionCall.args) {\r\n            const args = Buffer(\r\n              res.body.result.transaction.actions[0].FunctionCall.args,\r\n              \"base64\"\r\n            ).toString(\"ascii\");\r\n            if (Object.keys(JSON.parse(args)).length > 0) {\r\n              Object.keys(JSON.parse(args)).forEach((item) => {\r\n                const arg = {\r\n                  name: item,\r\n                  type_schema: {\r\n                    type: typeof JSON.parse(args)[item],\r\n                  },\r\n                  value: \"\",\r\n                };\r\n                const abiMethod = state.cMethod;\r\n                abiMethod[fIndex].params.args = [];\r\n                abiMethod[fIndex].params.args.push(arg);\r\n                console.log(abiMethod);\r\n                State.update({ cMethod: abiMethod });\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  });\r\n};\r\nconst onBtnClickCall = (fName, action, fIndex) => {\r\n  const abiMethod = state.cMethod;\r\n  const argMap = abiMethod[fIndex].params.args.map(({ name, value }) => ({\r\n    [name]: value,\r\n  }));\r\n  const args = {};\r\n  argMap.forEach((item) => {\r\n    Object.assign(args, item);\r\n  });\r\n  if (action === \"view\") {\r\n    asyncFetch(state.rpcUrl, {\r\n      body: JSON.stringify({\r\n        method: \"query\",\r\n        params: {\r\n          request_type: \"call_function\",\r\n          account_id: state.contractAddress,\r\n          method_name: abiMethod[fIndex].name,\r\n          args_base64: new Buffer.from(JSON.stringify(args)).toString(\"base64\"),\r\n          finality: \"final\",\r\n        },\r\n        id: 154,\r\n        jsonrpc: \"2.0\",\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    }).then((res) => {\r\n      if (res.body.result.result) {\r\n        const result = new Buffer.from(res.body.result.result).toString();\r\n        State.update({\r\n          response: {\r\n            [fName]: { value: result, error: false },\r\n          },\r\n        });\r\n      }\r\n      if (res.body.result.error) {\r\n        const error = res.body.result.error;\r\n        State.update({\r\n          response: {\r\n            [fName]: { value: error, error: true },\r\n          },\r\n        });\r\n      }\r\n    });\r\n  }\r\n  if (action === \"call\") {\r\n    Near.call(\r\n      state.contractAddress,\r\n      abiMethod[fIndex].name,\r\n      args,\r\n      abiMethod[fIndex].deposit,\r\n      abiMethod[fIndex].gas\r\n    );\r\n  }\r\n};\r\n\r\nconst onSwitchChangeArgExport = (fIndex) => {\r\n  const abiMethod = state.cMethod;\r\n  abiMethod[fIndex].export = !abiMethod[fIndex].export;\r\n  State.update({ cMethod: abiMethod });\r\n};\r\n\r\nconst onRemoveMethod = (fIndex) => {\r\n  const abiMethod = state.cMethod;\r\n  abiMethod.splice(fIndex, 1);\r\n  State.update({ cMethod: abiMethod });\r\n};\r\nconst exportForm = () => {\r\n  const abi = {\r\n    schema_version: \"0.3.0\",\r\n    add: state.contractAddress,\r\n    metadata: {\r\n      name: state.contractAddress,\r\n      version: \"0.1.0\",\r\n      authors: [\"\"],\r\n    },\r\n    body: {\r\n      functions: [],\r\n    },\r\n  };\r\n\r\n  const abiMethod = state.cMethod;\r\n  abiMethod.forEach((item) => {\r\n    abi.body.functions.push(item);\r\n  });\r\n\r\n  const data = {\r\n    widget: {\r\n      \"abi2form-widget-form\": {\r\n        \"\":\r\n          \"const user = context.accountId;\\r\\nconst props = \" +\r\n          JSON.stringify(abi).replaceAll(\"\\\\\", \"\") +\r\n          \" \\r\\n\\r\\nreturn (\\r\\n  <>\\r\\n    <Widget src={'kurodenjiro.near/widget/abi2form-widget'} props={props} />\\r\\n  </>\\r\\n);\\r\\n\",\r\n      },\r\n    },\r\n  };\r\n  Social.set(data, {\r\n    force: true,\r\n    onCommit: () => {},\r\n    onCancel: () => {},\r\n  });\r\n};\r\n\r\nreturn (\r\n  <>\r\n    <div class=\"container border border-info p-3\">\r\n      <h3 class=\"text-center\">Build Form</h3>\r\n      <div class=\"container\">\r\n        <div class=\"row mb-3\">\r\n          <div class=\"form-group col-md-12\">\r\n            <label class=\"mb-2\">Contract Address</label>\r\n            <input\r\n              class=\"form-control\"\r\n              value={state.contractAddress}\r\n              placeholder=\"Contract Address\"\r\n              onChange={onInputChangeContractAddress}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"form-group col-md-4\">\r\n            <label>Function Name</label>\r\n            <input\r\n              type=\"text\"\r\n              onChange={onInputChangeFunctionsName}\r\n              class=\"form-control\"\r\n            />\r\n          </div>\r\n          <div class=\"form-group col-md-2\">\r\n            <label>Action</label>\r\n            <select\r\n              class=\"form-control\"\r\n              onChange={onInputChangeFunctionsAction}\r\n            >\r\n              <option value=\"view\" selected>\r\n                View\r\n              </option>\r\n              <option value=\"call\">Call</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"form-group col-md-2\">\r\n            <label></label>\r\n            <button\r\n              onClick={onCreateMethod}\r\n              class=\"btn btn-success form-control \"\r\n            >\r\n              Create\r\n            </button>\r\n          </div>\r\n          <div class=\"form-group col-md-2\">\r\n            <label></label>\r\n            <button\r\n              onClick={getMethodFromSource}\r\n              class=\"btn btn-success form-control \"\r\n            >\r\n              Detect\r\n            </button>\r\n          </div>\r\n          <div class=\"form-group col-md-2\">\r\n            <label></label>\r\n            <button\r\n              data-bs-toggle=\"modal\"\r\n              data-bs-target=\"#export\"\r\n              class=\"btn btn-success form-control \"\r\n            >\r\n              Export\r\n            </button>\r\n            <div\r\n              class=\"modal fade\"\r\n              id=\"export\"\r\n              tabindex=\"-1\"\r\n              aria-labelledby=\"exportLabel\"\r\n              aria-hidden=\"true\"\r\n            >\r\n              <div class=\"modal-dialog\">\r\n                <div class=\"modal-content\">\r\n                  <div class=\"modal-header\">\r\n                    <h1 class=\"modal-title fs-5\" id=\"exportLabel\">\r\n                      Choose Method to Export\r\n                    </h1>\r\n                    <button\r\n                      type=\"button\"\r\n                      class=\"btn-close\"\r\n                      data-bs-dismiss=\"modal\"\r\n                      aria-label=\"Close\"\r\n                    ></button>\r\n                  </div>\r\n                  <div class=\"modal-body\">\r\n                    {state.cMethod &&\r\n                      state.cMethod.map((functions, fIndex) => (\r\n                        <div class=\"form-check form-switch\">\r\n                          <input\r\n                            class=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            role=\"switch\"\r\n                            checked={functions.export}\r\n                            onChange={() => onSwitchChangeArgExport(fIndex)}\r\n                            id={`flexSwitchCheckDefaultView${fIndex}`}\r\n                          />\r\n                          <label\r\n                            class=\"form-check-label\"\r\n                            for={`flexSwitchCheckDefault${fIndex}`}\r\n                          >\r\n                            {functions.name}\r\n                          </label>\r\n                        </div>\r\n                      ))}\r\n                  </div>\r\n                  <div class=\"modal-footer\">\r\n                    <button\r\n                      type=\"button\"\r\n                      class=\"btn btn-secondary\"\r\n                      data-bs-dismiss=\"modal\"\r\n                    >\r\n                      Close\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={exportForm}\r\n                      class=\"btn btn-primary\"\r\n                    >\r\n                      Export\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {state.createMethodError && state.createMethodError}\r\n    </div>\r\n    <br />\r\n    {state.cMethod &&\r\n      state.cMethod.map((functions, fIndex) => (\r\n        <div class=\"card mb-2\">\r\n          <div class=\"card-header\">\r\n            <div class=\"container\">\r\n              <div class=\"row\">\r\n                <div class=\"col pt-2\">\r\n                  <h5>{functions.name}</h5>\r\n                </div>\r\n                <div class=\"col text-end pt-2\">\r\n                  {\" \"}\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => onRemoveMethod(fIndex)}\r\n                    class=\"btn-close\"\r\n                  ></button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"container\">\r\n              <div class=\"row\">\r\n                <div class=\"form-group col-md-4\">\r\n                  <h5>Arguments</h5>\r\n                </div>\r\n                <div class=\"form-group col-md-4\">\r\n                  <button\r\n                    class=\"btn btn-primary\"\r\n                    onClick={(e) => onCreateArgs(functions.name, fIndex)}\r\n                  >\r\n                    Add\r\n                  </button>\r\n                </div>\r\n                <div class=\"form-group col-md-4\">\r\n                  <button\r\n                    class=\"btn btn-secondary\"\r\n                    onClick={(e) => getArgsFromMethod(functions.name, fIndex)}\r\n                  >\r\n                    Auto detect\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <br />\r\n            {functions.params.args &&\r\n              functions.params.args.map((args, argIndex) => {\r\n                return (\r\n                  <div class=\"container pb-2\">\r\n                    <div class=\"row\">\r\n                      <div class=\"form-group col-md-4\">\r\n                        <input\r\n                          placeholder=\"Argument name\"\r\n                          class=\"form-control\"\r\n                          defaultValue={args.name || \"\"}\r\n                          onChange={(e) =>\r\n                            onInputChangeArgName(e, fIndex, argIndex)\r\n                          }\r\n                        />\r\n                      </div>\r\n                      <div class=\"form-group col-md-2\">\r\n                        <select\r\n                          defaultValue={args.type_schema.type}\r\n                          class=\"form-control\"\r\n                          onChange={(e) =>\r\n                            onInputChangeArgType(e, fIndex, argIndex)\r\n                          }\r\n                        >\r\n                          <option value=\"string\">String</option>\r\n                          <option value=\"number\">Number</option>\r\n                          <option value=\"boolean\">Boolean</option>\r\n                          <option value=\"json\">Json</option>\r\n                          <option value=\"array\">Array</option>\r\n                        </select>\r\n                      </div>\r\n                      <div class=\"form-group col-md-4\">\r\n                        <input\r\n                          onChange={(e) =>\r\n                            onInputChangeArgValue(e, fIndex, argIndex)\r\n                          }\r\n                          class=\"form-control\"\r\n                          type=\"string\"\r\n                          placeholder=\"Argument value\"\r\n                        />\r\n                      </div>\r\n                      <div class=\"form-group col-md-2\">\r\n                        <button\r\n                          type=\"button\"\r\n                          onClick={() => onRemoveArg(fIndex, argIndex)}\r\n                          class=\"btn btn-danger \"\r\n                        >\r\n                          <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"16\"\r\n                            height=\"16\"\r\n                            fill=\"currentColor\"\r\n                            class=\"bi bi-trash3\"\r\n                            viewBox=\"0 0 16 16\"\r\n                          >\r\n                            <path d=\"M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5ZM11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0H11Zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5h9.916Zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5Z\"></path>\r\n                          </svg>\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            {functions.kind == \"call\" ? (\r\n              <>\r\n                <div class=\"container pb-1 pt-3\">\r\n                  <div class=\"row\">\r\n                    <div class=\"form-group col-md-12\">\r\n                      <h5>Options</h5>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"container\">\r\n                  <div class=\"row\">\r\n                    <div class=\"form-group col-md-6\">\r\n                      <label>Attached deposit</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        defaultValue=\"0\"\r\n                        onChange={(e) => onInputChangeDeposit(fIndex, e)}\r\n                        class=\"form-control\"\r\n                      />\r\n                    </div>\r\n                    <div class=\"form-group col-md-6\">\r\n                      <label>Gas</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        defaultValue=\"30000000000000\"\r\n                        onChange={(e) => onInputChangeGas(fIndex, e)}\r\n                        class=\"form-control\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {state.response[functions.name] &&\r\n            state.response[functions.name] ? (\r\n              <>\r\n                <div\r\n                  className={\r\n                    state.response[functions.name].error\r\n                      ? \"alert  alert-danger\"\r\n                      : \"alert  alert-primary\"\r\n                  }\r\n                  role=\"alert\"\r\n                >\r\n                  {state.response[functions.name].value}\r\n                </div>\r\n              </>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <div class=\"container pt-2\">\r\n              <div class=\"row\">\r\n                <div class=\"form-group col-md-2\">\r\n                  <button\r\n                    class=\"btn btn-success\"\r\n                    onClick={(e) =>\r\n                      onBtnClickCall(functions.name, functions.kind, fIndex)\r\n                    }\r\n                  >\r\n                    {functions.kind == \"view\" ? \"View\" : \"Call\"}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/kurodenjiro.near/widget/abi2form-builder", "fact_widget_deployments_id": "ae908085a4d8db6dd9ba32a607c6899e", "inserted_timestamp": "2023-09-30T09:48:44.826Z", "modified_timestamp": "2023-09-30T09:48:44.826Z", "__row_index": 11}