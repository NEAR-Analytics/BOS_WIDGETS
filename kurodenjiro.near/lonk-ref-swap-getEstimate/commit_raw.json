{"tx_hash": "DYv5qJQjHQ7r2SaaHSeHgQC5pF6YmU4mrfwxYs6wvUh6", "action_id_social": "Fe6BTstZguhJZ9ixruYwZjo9Zzjmw7LMV9RaxtqfZGcg-0-widget", "block_id": 116421491, "block_timestamp": "2024-04-08T21:59:28.866Z", "signer_id": "kurodenjiro.near", "widget_name": "lonk-ref-swap-getEstimate", "source_code": "const shrinkToken = (value, decimals) => {\r\n  return new Big(value || 0).div(new Big(10).pow(decimals || 24));\r\n};\r\n\r\nconst expandToken = (value, decimals) => {\r\n  return new Big(value).mul(new Big(10).pow(decimals));\r\n};\r\n\r\nconst {\r\n  tokenIn: tokenInFromProps,\r\n  tokenOut: tokenOutFromProps,\r\n  amountIn,\r\n  loadRes,\r\n  reloadPools,\r\n  setReloadPools,\r\n} = props;\r\n\r\nconst tokenIn =\r\n  tokenInFromProps.id === \"NEAR\"\r\n    ? { ...tokenInFromProps, id: \"wrap.near\" }\r\n    : tokenInFromProps;\r\n\r\nconst tokenOut =\r\n  tokenOutFromProps.id === \"NEAR\"\r\n    ? { ...tokenOutFromProps, id: \"wrap.near\" }\r\n    : tokenOutFromProps;\r\n\r\nconst FEE_DIVISOR = 10000;\r\n\r\nconst getSinglePoolEstimate = (tokenIn, tokenOut, pool, amountIn) => {\r\n  const allocation = amountIn;\r\n\r\n  const amount_with_fee =\r\n    Number(allocation) * (FEE_DIVISOR - pool.total_fee || pool.fee || 0);\r\n\r\n  const in_balance = shrinkToken(\r\n    pool.amounts[pool.token_account_ids[0] === tokenIn.id ? 0 : 1],\r\n    tokenIn.decimals\r\n  );\r\n\r\n  const out_balance = shrinkToken(\r\n    pool.amounts[pool.token_account_ids[0] === tokenIn.id ? 1 : 0],\r\n\r\n    tokenOut.decimals\r\n  );\r\n\r\n  const estimate = new Big(\r\n    (\r\n      (amount_with_fee * Number(out_balance)) /\r\n      (FEE_DIVISOR * Number(in_balance) + amount_with_fee)\r\n    ).toString()\r\n  ).toFixed();\r\n\r\n  return {\r\n    estimate,\r\n    pool,\r\n    tokenIn,\r\n    tokenOut,\r\n  };\r\n};\r\n\r\nconst returnNull = (sig) => {\r\n  loadRes({ sig });\r\n  return <div />;\r\n};\r\n\r\nconst wrapOperation =\r\n  [tokenIn, tokenOut].every((meta) => meta.id === \"wrap.near\") &&\r\n  !![tokenIn, tokenOut].find((meta) => meta.symbol === \"NEAR\");\r\n\r\nif (wrapOperation) {\r\n  loadRes({\r\n    estimate: amountIn,\r\n    tokenIn,\r\n    tokenOut,\r\n    pool: \"wrap\",\r\n  });\r\n\r\n  return <div />;\r\n}\r\n\r\nif (tokenIn.id === tokenOut.id) return returnNull();\r\n\r\nlet topPools = JSON.parse(\r\n  fetch(\"https://indexer.ref.finance/list-top-pools\").body\r\n);\r\n\r\nconst reloadTopPools = () => {\r\n  asyncFetch(\"https://indexer.ref.finance/list-top-pools\").then((res) => {\r\n    const data = res.body;\r\n    topPools = JSON.parse(data);\r\n    setReloadPools(false);\r\n  });\r\n};\r\n\r\nif (reloadPools) {\r\n  reloadTopPools();\r\n}\r\n\r\nif (!topPools) return returnNull();\r\n\r\nif (Number(amountIn) === 0) {\r\n  return returnNull();\r\n}\r\n\r\nconst poolsThisPair = topPools.filter(\r\n  (p) =>\r\n    p.token_account_ids.includes(tokenIn.id) &&\r\n    p.token_account_ids.includes(tokenOut.id)\r\n);\r\n\r\nconst poolThisPair = poolsThisPair.find((p) => p.token_account_ids.length > 2)\r\n  ? poolsThisPair.find((p) => p.token_account_ids.length > 2)\r\n  : poolsThisPair[0];\r\n\r\nif (!poolThisPair || poolThisPair.amounts.some((a) => Number(a) === 0)) {\r\n  return returnNull(\"no_pool\");\r\n}\r\n\r\nif (poolThisPair.pool_kind === \"SIMPLE_POOL\") {\r\n  const res = getSinglePoolEstimate(tokenIn, tokenOut, poolThisPair, amountIn);\r\n\r\n  loadRes(res);\r\n} else {\r\n  return (\r\n    <Widget\r\n      src=\"weige.near/widget/ref-stable-swap-algorithm\"\r\n      props={{\r\n        loadRes: loadRes,\r\n        tokenIn,\r\n        tokenOut,\r\n\r\n        amountIn: amountIn,\r\n        pool: poolThisPair,\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nreturn <div />;\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/kurodenjiro.near/widget/lonk-ref-swap-getEstimate", "fact_widget_deployments_id": "e28ebee64389331bf924eddc185133aa", "inserted_timestamp": "2024-04-08T23:29:56.156Z", "modified_timestamp": "2024-04-08T23:29:56.156Z", "__row_index": 0}