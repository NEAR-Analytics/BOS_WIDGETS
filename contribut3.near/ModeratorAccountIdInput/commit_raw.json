{"tx_hash": "9ziLwkhMvBLbSWgbxm1cMdoWLovjvizzpzHaBCDZoJvr", "action_id_social": "DfDU35c5RuX3fYYLUhPgFXk5d67DtBCeMbzmAERJPXod-0-widget", "block_id": 88784657, "block_timestamp": "2023-04-04T07:43:10.679Z", "signer_id": "contribut3.near", "widget_name": "ModeratorAccountIdInput", "source_code": "const ownerId = \"contribut3.near\";\nconst allAccountIds = props.allAccountIds;\nconst accountId = props.accountId;\nconst fixed = props.fixed;\nconst update = props.update;\n\ninitState({\n  valid: props.valid ?? true,\n  errorMessage: \"\",\n});\n\nconst validate = (accountId) => {\n  const accountIdRegex =\n    /^(([a-z\\d]+[\\-_])*[a-z\\d]+\\.)*([a-z\\d]+[\\-_])*[a-z\\d]+$/;\n\n  if (typeof accountId !== \"string\") {\n    State.update({\n      valid: false,\n      errorMessage: \"Account ID must be a text value!\",\n    });\n    update(accountId, false);\n    return;\n  }\n\n  if (accountId.length < 2) {\n    State.update({\n      valid: false,\n      errorMessage: \"Account ID must be at least 2 characters long!\",\n    });\n    update(accountId, false);\n    return;\n  }\n\n  if (accountId.length > 64) {\n    State.update({\n      valid: false,\n      errorMessage: \"Account ID must be at most 64 characters long!\",\n    });\n    update(accountId, false);\n    return;\n  }\n\n  if (!accountIdRegex.test(accountId)) {\n    State.update({\n      valid: false,\n      errorMessage: (\n        <>\n          Account ID must follow the rules specified{\" \"}\n          <a href=\"https://nomicon.io/DataStructures/Account#account-id-rules\">\n            here\n          </a>\n          !\n        </>\n      ),\n    });\n    update(accountId, false);\n    return;\n  }\n\n  State.update({ valid: true, errorMessage: \"\" });\n  update(accountId, true);\n};\n\nconst formatDate = (timestampString) => {\n  const date = new Date(Number(timestampString));\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getDate().toString().padStart(2, \"0\");\n\n  return `${year}-${month}-${day}`;\n};\n\nreturn (\n  <div className=\"col-lg-12 mb-2\">\n    <label htmlFor=\"account-id-input\">Account ID of entity:</label>\n    <small style={{ color: \"red\" }}>\n      {state.valid ? null : state.errorMessage}\n    </small>\n    <Typeahead\n      id=\"account-id-input\"\n      labelKey=\"name\"\n      onChange={(accountId) => {\n        const args = { account_id: accountId[0].name };\n        Near.asyncView(ownerId, \"get_entity\", args, \"final\").then(\n          (existing) => {\n            const updatedState = {\n              accountId,\n            };\n\n            if (existing) {\n              updatedState.existing = existing;\n              updatedState.name = existing.name;\n              updatedState.kind = [{ name: existing.kind }];\n              updatedState.entityStatus = [{ name: existing.status }];\n              updatedState.startDate = formatDate(existing.start_date);\n\n              if (existing.end_date) {\n                updatedState.endDate = formatDate(existing.endDate);\n              }\n            }\n\n            update(updatedState);\n          }\n        );\n      }}\n      onBlur={() => validate(accountId[0].name)}\n      options={allAccountIds}\n      placeholder=\"contribut3.near, social.near...\"\n      selected={state.accountId}\n      isInvalid={!state.valid}\n      positionFixed\n      allowNew\n      disabled={state.fixed}\n    />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/contribut3.near/widget/ModeratorAccountIdInput", "fact_widget_deployments_id": "857ec98768436137796544ebbc5075c0", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}