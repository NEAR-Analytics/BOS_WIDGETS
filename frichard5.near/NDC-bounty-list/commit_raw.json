{"tx_hash": "7cjMKvaMwqeroCNHANtYL8GeEsYRmBn7XRZMvP4z3Les", "action_id_social": "65ZoKcBopybmCvmrY9scU25bvNPuWvgPwyrk6oe3Xq2g-0-widget", "block_id": 95899406, "block_timestamp": "2023-07-07T07:42:55.666Z", "signer_id": "frichard5.near", "widget_name": "NDC-bounty-list", "source_code": "const {account, ftList, widgetProvider} = props;\nconst maxHeight = props.maxHeight || 400;\nconst boxShadow = props.boxShadow || \"3px 2px 24px rgba(68, 152, 224, 0.3)\";\nconst apiUrl = `https://api.pikespeak.ai/daos/bounties/${account}`;\nconst apiPolicyUrl = `https://api.pikespeak.ai/daos/policy`;\nconst userAccountId = context.accountId;\nconst apiBountyDoneUrl = `https://api.pikespeak.ai/daos/bounty-done-by-target/${account}?target=${userAccountId}`;\nconst apiBountyClaimsUrl = `https://api.pikespeak.ai/daos/bounty-claims/${account}`;\nconst publicApiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\n\nconst bountiesRes = fetch(apiUrl, {\n    mode: \"cors\",\n    headers: {\n        \"x-api-key\": publicApiKey,\n    },\n});\n\nconst bounties = bountiesRes.body && bountiesRes.body.length && bountiesRes.body.sort((a, b) => b.id - a.id);\n\n\nconst CardWrapper = styled.div`\n  position: relative;\n  box-shadow: ${boxShadow};\n  border-radius: 4px;\n  padding: 20px;\n  margin: 40px 0px;\n`;\n\nconst InfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 8px;\n`;\n\nconst Label = styled.span`\n  color: #8c8c8c;\n  font-size: 11px;\n`;\n\nconst Description = styled.div`\n  overflow: auto;\n  max-height: 150px;\n`;\n\nconst forgeUrl = (apiUrl, params) =>\n    apiUrl +\n    Object.keys(params).reduce(\n        (paramString, p) => paramString + `${p}=${params[p]}&`,\n        \"?\"\n    );\n\nconst parseDescription = (description) => {\n    const parsedDesc = description\n        .replaceAll(\"$$$$\", \" \")\n        .replaceAll(\"\\n\\n\", \" \");\n    const parts = parsedDesc.split(\" \");\n\n    const parsedParts = parts.map((p) => {\n        const url = p.match(/https:\\/\\/\\S*/g);\n        if (url) {\n            return (\n                <a href={p} target=\"_blank\">\n                    {p}\n                </a>\n            );\n        }\n        return p + \" \";\n    });\n\n    return parsedParts;\n};\n\nconst fetchPolicy = (params) => {\n    const policy = fetch(forgeUrl(apiPolicyUrl, params), {\n        mode: \"cors\",\n        headers: {\n            \"x-api-key\": publicApiKey,\n        },\n    })\n\n    policy.body && State.update({\n        policy: policy.body,\n    });\n};\n\n!state.policy && fetchPolicy({daos: [account]});\n\nconst fetchClaims = (params) => {\n    asyncFetch(forgeUrl(apiBountyClaimsUrl, params), {\n        mode: \"cors\",\n        headers: {\n            \"x-api-key\": publicApiKey,\n        },\n    }).then(({err, body, ok}) => {\n        if (ok) {\n            State.update({\n                userClaims: body,\n            });\n        }\n    });\n}\n\n!state.userClaims && fetchClaims({account: userAccountId});\n\nconst fetchClaimBountyDone = () => {\n    asyncFetch(apiBountyDoneUrl, {\n        mode: \"cors\",\n        headers: {\n            \"x-api-key\": publicApiKey,\n        },\n    }).then(({err, body, ok}) => {\n        if (ok) {\n            State.update({\n                claimedBountyDone: body,\n            });\n        }\n    });\n}\n\nuserAccountId && !state.claimedBountyDone && fetchClaimBountyDone();\n\nconst claimBounty = (bounty) => {\n    State.update({\n        isModalOpen: true,\n        modalType: 'claim',\n        bountyId: bounty.id,\n        formattedBountyDeadline: formatCountdown(Number(b.max_deadline) / Math.pow(10, 9))\n    })\n}\n\n\nconst formatCountdown = (seconds) => {\n    const d = Math.floor(seconds / (24 * 3600));\n    const h = Math.floor((seconds - d * 24 * 3600) / 3600);\n    const m = Math.floor((seconds - d * 24 * 3600 - h * 3600) / 60);\n    const s = Math.floor(seconds - d * 24 * 3600 - h * 3600 - m * 60);\n\n    let res = \"\";\n\n    if (d > 0) {\n        res += `${d}d `;\n    }\n\n    if (h > 0) {\n        res += `${h}h `;\n    }\n\n    if (m > 0) {\n        res += `${m}m `;\n    }\n\n    if (!res && s > 0 && s < 60) {\n        res = \"less than a minute\";\n    }\n\n    return res;\n};\n\nlet TimeLeft = styled.span`\n  color: rgba(68, 152, 224);\n`;\n\nlet Status = styled.span`\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  font-weight: bold;\n  color: ${(props) => {\n    switch (props.status) {\n      case \"Done\":\n        return \"#ff5e03\";\n      case \"Active\":\n        return \"#13a36e\";\n      case \"In progress\":\n        return \"#ff8743\";\n    }\n  }}\n`;\n\nlet ClaimButton = styled.button`\n  position: absolute;\n  top: 60px;\n  right: 20px;\n`;\n\nlet ClaimMsg = styled.p`\n  position: absolute;\n  top: 60px;\n  right: 20px;\n`;\n\nconst ClaimBountyCard = <Widget\n    src={`${widgetProvider}/widget/NDC-bounty-claim`}\n    props={{\n        account,\n        bountyBond: state.policy.state.policy.bounty_bond,\n        bounty: bounties && bounties.find((b) => b.id === state.bountyId),\n        formattedBountyDeadline: state.formattedBountyDeadline\n    }}\n/>\n\nconst BountyDone = <Widget\n    src={`${widgetProvider}/widget/NDC-bounty-done`}\n    props={{\n        account,\n        bountyBond: state.policy.state.policy.bounty_bond,\n        bounty: bounties && bounties.find((b) => b.id === state.bountyId),\n        target: userAccountId\n    }}\n/>\n\n\nconst UserClaim = styled.div`\n  position: absolute;\n  right: 20px;\n  bottom: 20px;\n  background: rgba(68, 152, 224, 0.1);\n  padding: 10px;\n  border-radius: 4px;\n`;\n\nconst openProposal = (bountyId) => {\n    State.update({\n        isModalOpen: true,\n        modalType: 'bountyDone',\n        bountyId\n    })\n}\nconst getUserClaimComp = (claim, proposal) => {\n    if(!claim) return \"\";\n    if(!proposal) {\n        return <UserClaim>\n            <p>You have claimed this bounty!</p>\n            <p>If your work is done you can\n                <button onClick={() => openProposal(claim.bounty_id)}>send a bountyDone proposal</button>\n            </p>\n        </UserClaim>;\n    } else {\n        return <UserClaim>\n            <p>You have made a bountyDone proposal for this bounty! Check it here: </p>\n            <a\n                href={`https://near.org/${widgetProvider}/widget/NDC-Page?tab=proposal&proposal_id=${proposal.proposal_id}`}\n                target=\"_blank\"\n            >\n                {proposal.proposal_id}\n            </a>\n        </UserClaim>\n    }\n}\n\nconst toggleModal = (isOpen) => {\n    State.update({isModalOpen: isOpen});\n};\nconst getStatus = (b) => {\n    switch (true) {\n        case (b.times === 0):\n            return \"Done\";\n        case (b.times === b.claimNumber):\n            return \"In progress\";\n        case (b.times != b.claimNumber):\n            return \"Active\"\n    }\n}\n\nconst getModalWidget = (type) => {\n    switch(type) {\n        case \"claim\":\n            return ClaimBountyCard;\n        case \"bountyDone\":\n            return BountyDone;\n    }\n}\n\nreturn (\n    <div style={{marginTop: \"40px\"}}>\n        {state.isModalOpen && state.policy && <Widget\n            src={`${widgetProvider}/widget/NDC-modal`}\n            props={{\n                isOpen: state.isModalOpen,\n                toggleModal,\n                component: getModalWidget(state.modalType),\n            }}\n        />}\n        <h2>Bounties</h2>\n        {bountiesRes && bountiesRes.body.length && state.policy && ftList ? bounties.map((b) =>\n            <CardWrapper>\n                <Status status={getStatus(b)}>\n                    {getStatus(b)}\n                </Status>\n                {b.times && b.times != b.claimNumber ? <ClaimButton onClick={() => claimBounty(b)}>\n                    Claim\n                </ClaimButton> : b.times === b.claimNumber && b.times != 0?\n                    <ClaimMsg>All claims has been currently taken for this bounty</ClaimMsg>: \"\"\n                }\n                {state.userClaims&&state.claimedBountyDone&&\n                    getUserClaimComp(\n                        state.userClaims.find((us) => us.bounty_id === b.id),\n                        state.claimedBountyDone.find((p) => Number(p.proposal.kind.bounty_id) === b.id)\n                    )\n                }\n                <InfoWrapper>\n                    <Label>Id</Label>\n                    <Description>\n                        {b.id}\n                    </Description>\n                </InfoWrapper>\n                <InfoWrapper>\n                    <Label>Description</Label>\n                    <Description>\n                        {parseDescription(b.description)}\n                    </Description>\n                </InfoWrapper>\n                <InfoWrapper>\n                    <Label>Reward</Label>\n                    <Widget\n                        src={`${widgetProvider}/widget/table_ft_formatter`}\n                        props={{\n                            ftList,\n                            ft: b.token,\n                            amount: b.amount,\n                        }}\n                    />\n                </InfoWrapper>\n                <InfoWrapper>\n                    <Label>Deadline</Label>\n                    <Description>\n                        <TimeLeft>\n                            {formatCountdown(Number(b.max_deadline) / Math.pow(10, 9))}\n                        </TimeLeft>\n                    </Description>\n                </InfoWrapper>\n                <InfoWrapper>\n                    <Label>Claimable</Label>\n                    <Description>\n                        {b.times} times\n                    </Description>\n                </InfoWrapper>\n                {b.times > 0 &&\n                    <InfoWrapper>\n                        <Label>Bounty bond</Label>\n                        <Widget\n                            src={`${widgetProvider}/widget/table_ft_formatter`}\n                            props={{\n                                ftList,\n                                ft: \"\",\n                                amount: state.policy.state.policy.bounty_bond,\n                            }}\n                        />\n                    </InfoWrapper>\n                }\n            </CardWrapper>\n        ) : \"\"}\n        {!bounties && state.policy && <div>There is no bounties for {account}</div>}\n    </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/frichard5.near/widget/NDC-bounty-list", "fact_widget_deployments_id": "bebeafaad718276d3b6827504c4a092a", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 0}