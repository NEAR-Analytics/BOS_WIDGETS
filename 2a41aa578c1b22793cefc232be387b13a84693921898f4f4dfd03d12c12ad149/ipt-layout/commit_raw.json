{"tx_hash": "3Zj2vWZFcSLmZn696SeQ7TFYqgmDVjJK2btAmj7onrT2", "action_id_social": "4u2TcuaV9KTwdmT41b6rekxXADmTjmLDUPNBDrJgpvSu-0-widget", "block_id": 99778989, "block_timestamp": "2023-08-27T13:03:36.978Z", "signer_id": "2a41aa578c1b22793cefc232be387b13a84693921898f4f4dfd03d12c12ad149", "widget_name": "ipt-layout", "source_code": null, "metadata": null, "branch": {"draft": {"": "const { contractAddress, walletAddress, gqlUrl, userStatus } = props;\n\nif (!contractAddress || !walletAddress || !gqlUrl) {\n  return \"Cannot connect to Impetus Network\";\n}\n\nconst nearAccount =\n  \"2a41aa578c1b22793cefc232be387b13a84693921898f4f4dfd03d12c12ad149\";\nconst createGAWidgetSrc = `${nearAccount}/widget/ipt-giveaway`;\nconst listGAWidgetSrc = `${nearAccount}/widget/ipt-giveaway-list`;\n\nState.init({\n  activeLink: \"dashboard\",\n  address: null,\n  isClaiming: false,\n  claimMessage: null,\n  claimAddress: null,\n  claimStatus: null,\n});\n\nconst updateState = (value, field) => {\n  State.update({\n    ...state,\n    [field]: value,\n  });\n};\n\n// CSS\nconst Header = styled.div`\n  padding: 18px 15px;\n  background: #151718;\n\n  display: flex;\n  justify-content: end;\n`;\n\nconst SideBar = styled.div`\n    display: flex!important;\n    flex-direction: column!important;\n    flex-shrink: 0!important;\n    padding: 1rem!important;\n--bs-text-opacity: 1;\n    color: rgba(var(--bs-white-rgb),var(--bs-text-opacity))!important;\n    --bs-bg-opacity: 1;\n    background-color: rgba(var(--bs-dark-rgb),var(--bs-bg-opacity))!important;\n`;\n\nconst Layout = styled.div`\n    display: flex;\n    flex-wrap: nowrap;\n    height: 100vh;\n    height: -webkit-fill-available;\n    max-height: 100vh;\n    overflow-x: auto;\n    overflow-y: hidden;\n\n    .web3-connect {\n    font-size: 13px;\n    font-weight: bold;\n\n    display: grid;\n    place-content: center;\n\n    background: #262626;\n    border-radius: 5px;\n    border: 0;\n\n    color: white;\n    transition: all 300ms ease-in-out;\n    &:hover {\n      background: #262626;\n      opacity: 0.5;\n    }\n    &:active {\n      background: #262626 !important;\n    }\n  }\n`;\n\n// position: fixed;\n// top: 0;\n// right: 0;\n// left: 0;\n// bottom: 0;\n\nconst ContentWrapper = styled.div`\n    flex-grow: 1;\n`;\n\nconst GapDivider = styled.div`\n    flex-shrink: 0;\n    width: 0;\n    height: 100vh;\n    background-color: rgba(0, 0, 0, .1);\n    box-shadow: inset 0 0.5em 1.5em rgba(0, 0, 0, .1), inset 0 0.125em 0.5em rg\n`;\n\n// Define\nconst menuList = [\n  {\n    id: \"dashboard\",\n    icon: \"bi-house-fill\",\n    label: \"Dashboard\",\n  },\n  {\n    id: \"create-giveaway\",\n    icon: \"bi-gift-fill\",\n    label: \"Create Giveaway\",\n  },\n  {\n    id: \"list-giveaways\",\n    icon: \"bi-list-ul\",\n    label: \"List Giveaway\",\n  },\n];\n\nif (Ethers.provider()) {\n  const signer = Ethers.provider().getSigner(walletAddress);\n  signer.getAddress().then((address) => {\n    State.update({\n      address,\n    });\n  });\n}\n\nconst fetchClaimToken = () => {\n  return asyncFetch(\"https://api.impetus.network/balance\", {\n    body: `{ \"address\": \"${state.claimAddress}\" }`,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    method: \"POST\",\n  });\n};\n\nconst isLoggedIn = () => {\n  return !!state.address;\n};\n\nconst onClaim = () => {\n  State.update({\n    ...state,\n    isClaiming: true,\n    claimMessage: null,\n    claimStatus: null,\n  });\n\n  fetchClaimToken()\n    .then((res) => {\n      console.log(\"res\", res);\n      if (res.ok) {\n        if (res.body === \"true\") {\n          State.update({\n            claimStatus: res.body,\n            claimMessage:\n              \"Token has been sent to your wallet, it should be deposited in awhile.\",\n            isClaiming: false,\n          });\n        } else if (res.body === \"false\") {\n          State.update({\n            claimStatus: res.body,\n            claimMessage: \"Too many attemps, please try again later.\",\n            isClaiming: false,\n          });\n        }\n      } else {\n        State.update({\n          claimStatus: \"error\",\n          claimMessage: \"Please re-check your wallet address\",\n          isClaiming: false,\n        });\n      }\n    })\n    .catch((e) => {\n      console.log(e);\n\n      State.update({\n        claimStatus: \"error\",\n        claimMessage: \"Something went wrong, please contact admin.\",\n        isClaiming: false,\n      });\n    });\n};\n\nconst renderClaimMessage = () => {\n  let status = \"\";\n\n  if (state.claimStatus === \"true\") {\n    status = \"success\";\n  } else if (\n    state.claimStatus === \"false\" ||\n    state.claimStatus === \"required\"\n  ) {\n    status = \"warning\";\n  } else if (state.claimStatus === \"error\") {\n    status = \"danger\";\n  }\n\n  return (\n    <div class={`alert alert-${status}`} role=\"alert\">\n      {state.claimMessage}\n    </div>\n  );\n};\n\nconst renderSidebar = () => {\n  return (\n    <SideBar>\n      <ul class=\"nav nav-pills flex-column mb-auto\">\n        {menuList.map((menu) => (\n          <li class=\"nav-item mb-2\" key={menu.id}>\n            <button\n              class={`nav-link text-start w-100 ${\n                state.activeLink === menu.id ? \"active\" : \"text-white\"\n              }`}\n              aria-current=\"page\"\n              onClick={() => updateState(menu.id, \"activeLink\")}\n            >\n              <i class={`bi ${menu.icon}`} /> {menu.label}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </SideBar>\n  );\n};\n\nconst renderDashboard = () => {\n  return (\n    <>\n      {!isLoggedIn() && (\n        <div>\n          <h5>Please connect to BOS to continue</h5>\n          <Web3Connect className=\"web3-connect\" connectLabel=\"Connect to BOS\" />\n        </div>\n      )}\n      {isLoggedIn() && (\n        <div class=\"px-4 py-5 my-5 text-center\">\n          <h1 class=\"display-5 fw-bold\">Impetus Network</h1>\n          <div class=\"col-lg-6 mx-auto\">\n            <p class=\"lead mb-4\">\n              Obtain <b>Impetus</b> testnet's token: <strong>IPT</strong> for\n              creating and testing giveaways, as well as participating in other\n              giveaways.\n            </p>\n            <p class=\"fs-6\">Enter you wallet address here</p>\n            {!!state.claimStatus && renderClaimMessage()}\n            <div class=\"justify-content-sm-center\">\n              <div class=\"input-group mb-3\">\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"Wallet address\"\n                  onChange={(e) =>\n                    State.update({ claimAddress: e.target.value })\n                  }\n                />\n                <button\n                  class=\"btn btn-primary\"\n                  type=\"button\"\n                  disabled={state.isClaiming}\n                  onClick={() => onClaim()}\n                >\n                  {state.isClaiming && (\n                    <span\n                      class=\"spinner-grow spinner-grow-sm\"\n                      role=\"status\"\n                      aria-hidden=\"true\"\n                    />\n                  )}\n                  Claim\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nconst renderContent = () => {\n  return (\n    <ContentWrapper>\n      <div class=\"container-fluid\">\n        <div class=\"row\">\n          <div class=\"col-12 pt-4\">\n            {state.activeLink === \"dashboard\" && renderDashboard()}\n\n            {state.activeLink === \"create-giveaway\" && (\n              <>\n                {isLoggedIn() ? (\n                  <Widget\n                    src={createGAWidgetSrc}\n                    props={{\n                      contractAddress,\n                      walletAddress,\n                    }}\n                  />\n                ) : (\n                  \"Please login with your wallet\"\n                )}\n              </>\n            )}\n\n            {state.activeLink === \"list-giveaways\" && (\n              <>\n                {isLoggedIn() ? (\n                  <Widget\n                    src={listGAWidgetSrc}\n                    props={{\n                      contractAddress,\n                      walletAddress,\n                      gqlUrl,\n                      userStatus,\n                    }}\n                  />\n                ) : (\n                  \"Please login with your wallet\"\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </ContentWrapper>\n  );\n};\n\nreturn (\n  <Layout>\n    {renderSidebar()}\n    <GapDivider />\n    {renderContent()}\n  </Layout>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/2a41aa578c1b22793cefc232be387b13a84693921898f4f4dfd03d12c12ad149/widget/ipt-layout", "fact_widget_deployments_id": "b5f86df2e66a2d513ccf75f6fe5e367b", "inserted_timestamp": "2023-08-27T14:45:19.776Z", "modified_timestamp": "2023-08-27T14:45:19.776Z", "__row_index": 24}