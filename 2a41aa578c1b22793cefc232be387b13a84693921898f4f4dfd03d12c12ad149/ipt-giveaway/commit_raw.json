{"tx_hash": "dqutyS8FnXhrMT8qrmCZ2dZc7djo4zepMGeqQ2wctFG", "action_id_social": "8884B5QHmvivUJeSUNKe4bDABpj7Nu1P9sNj6q53rdHb-0-widget", "block_id": 99769383, "block_timestamp": "2023-08-27T09:59:55.338Z", "signer_id": "2a41aa578c1b22793cefc232be387b13a84693921898f4f4dfd03d12c12ad149", "widget_name": "ipt-giveaway", "source_code": null, "metadata": null, "branch": {"draft": {"": "const { contractAddress, walletAddress } = props;\n\nif (!contractAddress || !walletAddress) {\n  return \"Please return to dashboard to connect to BOS\";\n}\n\nif (!Ethers.provider()) {\n  return \"Something went wrong!! Try refresh the page\";\n}\n\nconst giveAwayAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint32\",\n        name: \"index\",\n        type: \"uint32\",\n      },\n    ],\n    name: \"claimReward\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"startBlock\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"endBlock\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"kycStatus\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"randomType\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"assetType\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"assetId\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"maxJoin\",\n        type: \"uint32\",\n      },\n    ],\n    name: \"createGiveaway\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint32\",\n        name: \"index\",\n        type: \"uint32\",\n      },\n    ],\n    name: \"participate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst iface = new ethers.utils.Interface(giveAwayAbi);\n\nconst UserVerifyLevel = [0, 1];\n\nconst AssetType = [\"token\"];\n\nconst RewardToken = [\"IPT\"];\n\nconst RandomType = [\"chainlink\"];\n\nconst updateState = (value, field) => {\n  State.update({\n    ...state,\n    [field]: value,\n  });\n};\n\nconst setDatePlusMinutes = (date, minutes) => {\n  date.setMinutes(date.getMinutes() + minutes);\n\n  return date;\n};\n\nconst getSeconds = (date) => {\n  return date.getTime() / 1000;\n};\n\nState.init({\n  name: \"\",\n  startTime: setDatePlusMinutes(new Date(), 1),\n  endTime: setDatePlusMinutes(new Date(), 3),\n  userVerifyLevel: UserVerifyLevel[0],\n  assetType: AssetType[0],\n  rewardToken: RewardToken[0],\n  rewardTokenAmount: 1,\n  randomType: RandomType[0],\n  maxJoin: 1,\n  isFormSubmitted: false,\n  formError: {\n    name: null,\n    startTime: null,\n    endTime: null,\n    rewardTokenAmount: null,\n    maxJoin: null,\n  },\n  isSendingContract: false,\n  contractMessage: null,\n  contractStatus: null,\n});\n\nconst isFormInvalid = () =>\n  Object.values(state.formError).some((error) => error !== null);\n\nconst hasError = (fieldName) => state.formError[fieldName] !== null;\n\nconst formatToDatetimeInput = (date) => {\n  if (!date) {\n    return \"\";\n  }\n\n  date.setSeconds(null);\n\n  const utcString = date.toISOString().substring(0, 19),\n    year = date.getFullYear(),\n    month = date.getMonth() + 1,\n    day = date.getDate(),\n    hour = date.getHours(),\n    minute = date.getMinutes();\n\n  const localDatetime =\n    year +\n    \"-\" +\n    (month < 10 ? \"0\" + month.toString() : month) +\n    \"-\" +\n    (day < 10 ? \"0\" + day.toString() : day) +\n    \"T\" +\n    (hour < 10 ? \"0\" + hour.toString() : hour) +\n    \":\" +\n    (minute < 10 ? \"0\" + minute.toString() : minute) +\n    utcString.substring(16, 19);\n\n  return localDatetime;\n};\n\nconst onSelectDatetime = (value, timeProp) => {\n  updateState(!!value ? new Date(value) : \"\", timeProp);\n};\n\n// Form fields validation\n\nconst getNameError = () => {\n  if (!state.name) {\n    return \"Name is required\";\n  } else {\n    return null;\n  }\n};\n\nconst getStartTimeError = () => {\n  if (!state.startTime) {\n    return \"Start time is required\";\n  } else if (state.startTime.getTime() < new Date().getTime()) {\n    return \"Start time cannot be in the past\";\n  } else {\n    return null;\n  }\n};\n\nconst getEndTimeError = () => {\n  if (!state.endTime) {\n    return \"End time is required\";\n  } else if (\n    !state.startTime ||\n    state.endTime.getTime() < state.startTime.getTime()\n  ) {\n    return \"End time must be after Start time\";\n  } else {\n    return null;\n  }\n};\n\nconst getTokenAmountError = () => {\n  if (!state.rewardTokenAmount) {\n    return \"Token amount is required\";\n  } else if (isNaN(state.rewardTokenAmount)) {\n    return \"Must be a number\";\n  } else if (Math.sign(state.rewardTokenAmount) === -1) {\n    return \"Must be a positive number\";\n  } else {\n    return null;\n  }\n};\n\nconst getMaxJoinError = () => {\n  if (!state.maxJoin) {\n    return \"Max participants is required\";\n  } else if (isNaN(state.maxJoin)) {\n    return \"Must be a number\";\n  } else if (state.maxJoin < 1) {\n    return \"There must be at least 1 participant\";\n  } else {\n    return null;\n  }\n};\n\nconst validateForm = () => {\n  const nameError = getNameError();\n  const startTimeError = getStartTimeError();\n  const endTimeError = getEndTimeError();\n  const tokenAmountError = getTokenAmountError();\n  const maxJoinError = getMaxJoinError();\n\n  const formErr = {\n    ...state.formError,\n    name: nameError,\n    startTime: startTimeError,\n    endTime: endTimeError,\n    rewardTokenAmount: tokenAmountError,\n    maxJoin: maxJoinError,\n  };\n\n  updateState(formErr, \"formError\");\n};\n\nconst createContractParam = () => {\n  return {\n    name: state.name,\n\n    kycStatus: State.userVerifyLevel,\n    randomType,\n  };\n};\n\nconst handleSubmit = () => {\n  validateForm();\n  if (!isFormInvalid()) {\n    updateState(true, \"isSendingContract\");\n\n    Ethers.provider()\n      .getBlock(\"latest\")\n      .then((block) => {\n        const startBlock =\n          Math.floor((state.startTime.getTime() - Date.now()) / 6000) +\n          block.number;\n        const endBlock =\n          Math.floor((state.endTime.getTime() - Date.now()) / 6000) +\n          block.number;\n        console.log(1);\n\n        const giveaway = new ethers.Contract(\n          contractAddress,\n          giveAwayAbi,\n          Ethers.provider().getSigner(walletAddress)\n        );\n        console.log(2);\n\n        const amount = ethers.utils\n          .parseUnits(`${state.rewardTokenAmount}`, 18)\n          .toString();\n        console.log(amount);\n        console.log(state);\n        return giveaway\n          .createGiveaway(\n            state.name,\n            startBlock, // start block\n            endBlock, // end blokc\n            state.userVerifyLevel,\n            state.randomType === \"chainlink\" ? 0 : 1, // random type\n            state.assetType === \"token\" ? 0 : 1, // asset type\n            state.rewardToken === \"IPT\" ? 0 : 1, //assetId\n            amount, // amount\n            20\n          )\n          .then((transactionHash) => {\n            State.update({\n              isSendingContract: false,\n              contractStatus: \"success\",\n              contractMessage: \"Giveaway has been created.\",\n            });\n            console.log(\"transactionHash is \" + transactionHash);\n          })\n          .catch((e) => {\n            State.update({\n              isSendingContract: false,\n              contractStatus: \"error\",\n              contractMessage: e.message,\n            });\n          });\n      });\n  }\n};\n\nconst renderContractMessage = () => {\n  let status = \"\";\n\n  if (state.contractStatus === \"success\") {\n    status = \"success\";\n  } else if (state.contractStatus === \"error\") {\n    status = \"danger\";\n  }\n\n  return (\n    <div class={`alert alert-${status}`} role=\"alert\">\n      {state.contractMessage}\n    </div>\n  );\n};\n\nconst renderTokenReward = () => {\n  return (\n    <>\n      <div class=\"col-xs-12 col-sm\">\n        <input\n          class=\"form-control text-capitalize\"\n          type=\"text\"\n          id=\"rewardToken\"\n          value={state.rewardToken}\n          disabled\n          readonly\n        />\n      </div>\n      <div class=\"col-xs-12 col-sm\">\n        <div class=\"form-floating\">\n          <input\n            type=\"number\"\n            class={`form-control ${\n              hasError(\"rewardTokenAmount\")\n                ? \"is-invalid\"\n                : state.isFormSubmitted\n                ? \"is-valid\"\n                : \"\"\n            }`}\n            id=\"rewardTokenAmount\"\n            placeholder=\"Token amount\"\n            value={state.rewardTokenAmount}\n            onChange={(e) => updateState(e.target.value, \"rewardTokenAmount\")}\n          />\n          <label for=\"rewardTokenAmount\">Token amount *</label>\n          {hasError(\"rewardTokenAmount\") && (\n            <div class=\"invalid-feedback\">\n              {state.formError.rewardTokenAmount}\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nreturn (\n  <div class=\"container mt-3\">\n    {!!state.contractStatus && (\n      <div class=\"row mb-3\">\n        <div class=\"col-sm-10 offset-sm-2\">{renderContractMessage()}</div>\n      </div>\n    )}\n    <div class=\"row mb-3\">\n      <label for=\"name\" class=\"col-sm-2 col-form-label\">\n        Name *\n      </label>\n      <div class=\"col-sm-10\">\n        <input\n          class={`form-control ${\n            hasError(\"name\")\n              ? \"is-invalid\"\n              : state.isFormSubmitted\n              ? \"is-valid\"\n              : \"\"\n          }`}\n          id=\"name\"\n          value={state.name}\n          onChange={(e) => updateState(e.target.value, \"name\")}\n        />\n        {hasError(\"name\") && (\n          <div class=\"invalid-feedback\">{state.formError.name}</div>\n        )}\n      </div>\n    </div>\n    <div class=\"row mb-3\">\n      <label for=\"startTime\" class=\"col-sm-2 col-form-label\">\n        Start time *\n        <br />\n        <small>\n          <i>(mm/dd/yyyy)</i>\n        </small>\n      </label>\n      <div class=\"col-sm-10\">\n        <input\n          type=\"datetime-local\"\n          class={`form-control ${\n            hasError(\"startTime\")\n              ? \"is-invalid\"\n              : state.isFormSubmitted\n              ? \"is-valid\"\n              : \"\"\n          }`}\n          id=\"startTime\"\n          value={formatToDatetimeInput(state.startTime)}\n          onChange={(e) => onSelectDatetime(e.target.value, \"startTime\")}\n        />\n        {hasError(\"startTime\") && (\n          <div class=\"invalid-feedback\">{state.formError.startTime}</div>\n        )}\n      </div>\n    </div>\n    <div class=\"row mb-3\">\n      <label for=\"endTime\" class=\"col-sm-2 col-form-label\">\n        End time *\n        <br />\n        <small>\n          <i>(mm/dd/yyyy)</i>\n        </small>\n      </label>\n      <div class=\"col-sm-10\">\n        <input\n          type=\"datetime-local\"\n          class={`form-control ${\n            hasError(\"endTime\")\n              ? \"is-invalid\"\n              : state.isFormSubmitted\n              ? \"is-valid\"\n              : \"\"\n          }`}\n          id=\"endTime\"\n          value={formatToDatetimeInput(state.endTime)}\n          onChange={(e) => onSelectDatetime(e.target.value, \"endTime\")}\n        />\n        {hasError(\"endTime\") && (\n          <div class=\"invalid-feedback\">{state.formError.endTime}</div>\n        )}\n      </div>\n    </div>\n    <div class=\"row mb-3\">\n      <label for=\"userVerifyLevel\" class=\"col-sm-2 col-form-label\">\n        User verify level\n      </label>\n      <div class=\"col-sm-10\">\n        <select\n          class=\"form-select\"\n          id=\"userVerifyLevel\"\n          value={state.userVerifyLevel}\n          onChange={(e) => updateState(e.target.value, \"userVerifyLevel\")}\n        >\n          {UserVerifyLevel.map((level) => (\n            <option value={level}>Level {level}</option>\n          ))}\n        </select>\n        <span class=\"fs-6 fst-italic text-black-50\">\n          <small>\n            Level 0 means no KYC verification - Level 1 required basic KYC\n            verification\n          </small>\n        </span>\n      </div>\n    </div>\n    <div class=\"row mb-3\">\n      <label for=\"assetType\" class=\"col-sm-2 col-form-label\">\n        Reward Type\n      </label>\n      <div class=\"col-sm-10\">\n        <div class=\"row\">\n          <div class=\"col-xs-12 col-sm\">\n            <input\n              class=\"form-control text-capitalize\"\n              type=\"text\"\n              id=\"assetType\"\n              value={state.assetType}\n              disabled\n              readonly\n            />\n          </div>\n          {renderTokenReward()}\n        </div>\n      </div>\n    </div>\n    <div class=\"row mb-3\">\n      <label for=\"randomType\" class=\"col-sm-2 col-form-label\">\n        Random type\n      </label>\n      <div class=\"col-sm-10\">\n        <input\n          class=\"form-control text-capitalize\"\n          type=\"text\"\n          id=\"randomType\"\n          value={state.randomType}\n          disabled\n          readonly\n        />\n      </div>\n    </div>\n    <div class=\"row mb-3\">\n      <label for=\"maxJoin\" class=\"col-sm-2 col-form-label\">\n        Max participants *\n      </label>\n      <div class=\"col-sm-10\">\n        <input\n          type=\"number\"\n          class={`form-control ${\n            hasError(\"maxJoin\")\n              ? \"is-invalid\"\n              : state.isFormSubmitted\n              ? \"is-valid\"\n              : \"\"\n          }`}\n          id=\"maxJoin\"\n          value={state.maxJoin}\n          onChange={(e) => updateState(e.target.value, \"maxJoin\")}\n        />\n        {hasError(\"maxJoin\") && (\n          <div class=\"invalid-feedback\">{state.formError.maxJoin}</div>\n        )}\n      </div>\n    </div>\n    <div class=\"row mb-3\">\n      <div class=\"col-sm-10 offset-sm-2\">\n        <button\n          class=\"btn btn-primary\"\n          type=\"button\"\n          disabled={state.isSendingContract}\n          onClick={() => handleSubmit()}\n        >\n          {state.isSendingContract && (\n            <span\n              class=\"spinner-grow spinner-grow-sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n            />\n          )}\n          Submit\n        </button>\n      </div>\n    </div>\n  </div>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/2a41aa578c1b22793cefc232be387b13a84693921898f4f4dfd03d12c12ad149/widget/ipt-giveaway", "fact_widget_deployments_id": "2569663b24920efed3a367c6395126a3", "inserted_timestamp": "2023-08-27T11:38:34.590Z", "modified_timestamp": "2023-08-27T11:38:34.590Z", "__row_index": 4}