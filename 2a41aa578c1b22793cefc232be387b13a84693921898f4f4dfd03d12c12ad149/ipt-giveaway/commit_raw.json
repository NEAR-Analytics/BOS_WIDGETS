{"tx_hash": "G5azDb72mcR6FKMLXchSTvwgJ3PDB9iKxhaTTjpnh593", "action_id_social": "7qMfLDSTd5JWaKdxtyHAeycfNY1fBaKo9C5pPSTQCEP-0-widget", "block_id": 99753317, "block_timestamp": "2023-08-27T04:48:21.170Z", "signer_id": "2a41aa578c1b22793cefc232be387b13a84693921898f4f4dfd03d12c12ad149", "widget_name": "ipt-giveaway", "source_code": null, "metadata": null, "branch": {"draft": {"": "const { contractAddress, chainIdIPT, rpcUrl } = props;\n\nif (!contractAddress) {\n  return \"Please specify contract address\";\n}\n\nif (!Ethers.provider()) {\n  return \"Something went wrong!! Try refresh the page\";\n}\n\nconst giveAwayAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint32\",\n        name: \"index\",\n        type: \"uint32\",\n      },\n    ],\n    name: \"claimReward\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"startBlock\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"endBlock\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"kycStatus\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"randomType\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"assetType\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"assetId\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"maxJoin\",\n        type: \"uint32\",\n      },\n    ],\n    name: \"createGiveaway\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint32\",\n        name: \"index\",\n        type: \"uint32\",\n      },\n    ],\n    name: \"participate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst iface = new ethers.utils.Interface(giveAwayAbi);\n\nconst UserVerifyLevel = [0, 1];\n\nconst AssetType = [\"token\", \"nft\"];\n\nconst RewardToken = [\"IPT\"];\n\nconst RandomType = [\"chainlink\", \"local\"];\n\nconst updateState = (value, field) => {\n  State.update({\n    ...state,\n    [field]: value,\n  });\n};\n\nconst setDatePlusMinutes = (date, minutes) => {\n  date.setMinutes(date.getMinutes() + minutes);\n\n  return date;\n};\n\nconst getSeconds = (date) => {\n  return date.getTime() / 1000;\n};\n\nState.init({\n  chainId: undefined,\n  name: \"\",\n  startTime: setDatePlusMinutes(new Date(), 1),\n  endTime: setDatePlusMinutes(new Date(), 3),\n  userVerifyLevel: UserVerifyLevel[0],\n  assetType: AssetType[0],\n  rewardToken: RewardToken[0],\n  rewardTokenAmount: 1,\n  nftID: \"\",\n  randomType: RandomType[0],\n  userMustClaim: false,\n  isFormSubmitted: false,\n  formError: {\n    name: null,\n    startTime: null,\n    endTime: null,\n    rewardTokenAmount: null,\n    nftID: null,\n  },\n  block: 0,\n});\n\nEthers.provider().getBlock((x) => {\n  console.log(x);\n  State.update({\n    ...state,\n    block: x.number,\n  });\n});\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n\n  if (accounts.length) {\n    State.update({\n      ...state,\n      sender: accounts[0],\n    });\n    // console.log(\"set sender\", accounts[0]);\n  }\n}\n\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  // console.log(\"get network data\");\n\n  console.log(\"provider\", Ethers.provider());\n\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      console.log(\"chainIdData\", chainIdData);\n\n      if (chainIdData?.chainId) {\n        State.update({ ...state, chainId: chainIdData.chainId });\n      }\n    });\n}\n\nconst isFormInvalid = () =>\n  Object.values(state.formError).some((error) => error !== null);\n\nconst hasError = (fieldName) => state.formError[fieldName] !== null;\n\nconst formatToDatetimeInput = (date) => {\n  if (!date) {\n    return \"\";\n  }\n\n  date.setSeconds(null);\n\n  const utcString = date.toISOString().substring(0, 19),\n    year = date.getFullYear(),\n    month = date.getMonth() + 1,\n    day = date.getDate(),\n    hour = date.getHours(),\n    minute = date.getMinutes();\n\n  const localDatetime =\n    year +\n    \"-\" +\n    (month < 10 ? \"0\" + month.toString() : month) +\n    \"-\" +\n    (day < 10 ? \"0\" + day.toString() : day) +\n    \"T\" +\n    (hour < 10 ? \"0\" + hour.toString() : hour) +\n    \":\" +\n    (minute < 10 ? \"0\" + minute.toString() : minute) +\n    utcString.substring(16, 19);\n\n  return localDatetime;\n};\n\nconst onSelectDatetime = (value, timeProp) => {\n  updateState(!!value ? new Date(value) : \"\", timeProp);\n};\n\nconst onChangeAssetType = (assetType) => {\n  if (assetType === AssetType[0]) {\n    State.update({\n      ...state,\n      nftID: \"\",\n      assetType,\n      formError: {\n        ...state.formError,\n        nftID: null,\n      },\n    });\n  }\n\n  if (assetType === AssetType[1]) {\n    State.update({\n      ...state,\n      rewardToken: RewardToken[0],\n      rewardTokenAmount: 1,\n      assetType,\n      formError: {\n        ...state.formError,\n        rewardToken: null,\n        rewardTokenAmount: null,\n      },\n    });\n  }\n};\n\n// Form fields validation\n\nconst getNameError = () => {\n  if (!state.name) {\n    return \"Name is required\";\n  } else {\n    return null;\n  }\n};\n\nconst getStartTimeError = () => {\n  if (!state.startTime) {\n    return \"Start time is required\";\n  } else if (state.startTime.getTime() < new Date().getTime()) {\n    return \"Start time cannot be in the past\";\n  } else {\n    return null;\n  }\n};\n\nconst getEndTimeError = () => {\n  if (!state.endTime) {\n    return \"End time is required\";\n  } else if (\n    !state.startTime ||\n    state.endTime.getTime() < state.startTime.getTime()\n  ) {\n    return \"End time must be after Start time\";\n  } else {\n    return null;\n  }\n};\n\nconst getTokenAmountError = () => {\n  if (state.assetType === AssetType[1]) {\n    return null;\n  }\n\n  if (!state.rewardTokenAmount) {\n    return \"Token amount is required\";\n  } else if (isNaN(state.rewardTokenAmount)) {\n    return \"Must be a number\";\n  } else if (Math.sign(state.rewardTokenAmount) === -1) {\n    return \"Must be a positive number\";\n  } else {\n    return null;\n  }\n};\n\nconst getNFTIDError = () => {\n  if (state.assetType === AssetType[0]) {\n    return null;\n  }\n\n  if (!state.nftID) {\n    return \"NFT id is required\";\n  } else {\n    return null;\n  }\n};\n\nconst validateForm = () => {\n  const nameError = getNameError();\n  const startTimeError = getStartTimeError();\n  const endTimeError = getEndTimeError();\n  const tokenAmountError = getTokenAmountError();\n  const nftError = getNFTIDError();\n\n  const formErr = {\n    ...state.formError,\n    name: nameError,\n    startTime: startTimeError,\n    endTime: endTimeError,\n    rewardTokenAmount: tokenAmountError,\n    nftID: nftError,\n  };\n\n  updateState(formErr, \"formError\");\n};\n\nconst createContractParam = () => {\n  return {\n    name: state.name,\n\n    kycStatus: State.userVerifyLevel,\n    randomType,\n  };\n};\n\nconst handleSubmit = () => {\n  validateForm();\n\n  if (!isFormInvalid()) {\n    // const startBlock = getSeconds(state.startTime) - getSeconds(Date.now()) / 6 - curentBlock;\n    // const endBlock =\n    //   getSeconds(state.endTime) - getSeconds(Date.now()) / 6 - curentBlock;\n    const currentBlock = Ethers.provider().getBlock();\n    console.log(currentBlock);\n    const giveaway = new ethers.Contract(\n      contractAddress,\n      giveAwayAbi,\n      Ethers.provider().getSigner()\n    );\n    const amount = ethers.utils.parseUnits(\"1\", 18).toHexString();\n    giveaway\n      .createGiveaway(\n        \"Duan\",\n        3000, // start block\n        3500, // end blokc\n        0, //kyc\n        0, // random type\n        0, // asset type\n        0, //assetId\n        amount, // amount\n        20\n      )\n      .then((transactionHash) => {\n        console.log(\"transactionHash is \" + transactionHash);\n      });\n    // const encodedData = iface.encodeFunctionData(\"createGiveaway\", [\n    // \"Duan\",\n    // 3000, // start block\n    // 3500, // end blokc\n    // 0, //kyc\n    // 0, // random type\n    // 0, // asset type\n    // 0, //assetId\n    // 1000000, // amount\n    // 20, // max join\n    // ]);\n    // return Ethers.provider()\n    //   .call({\n    //     to: contractAddress,\n    //     data: encodedData,\n    //   })\n    //   .then((x) => {\n    //     console.log(x);\n    //   });\n  }\n};\n\nconst switchImpetus = () => {\n  console.log(\"switching network\");\n\n  Ethers.send(\"wallet_addEthereumChain\", [\n    {\n      chainId: \"0x142\",\n      rpcUrls: [rpcUrl],\n      chainName: \"Impetus testnet\",\n      nativeCurrency: {\n        name: \"Impetus\",\n        symbol: \"IPT\",\n        decimals: 18,\n      },\n      blockExplorerUrls: null,\n    },\n  ])\n    .then((data) => {\n      console.log(\"switch network data\", data);\n    })\n    .catch((e) => {\n      console.log(\"switch network error\", e);\n    });\n};\n\nconst renderTokenReward = () => {\n  return (\n    <>\n      <div class=\"col-xs-12 col-sm\">\n        <div class=\"form-floating\">\n          <select\n            class=\"form-select text-uppercase\"\n            id=\"rewardToken\"\n            value={state.rewardToken}\n            onChange={(e) => updateState(e.target.value, \"rewardToken\")}\n          >\n            {RewardToken.map((token) => (\n              <option value={token}>{token}</option>\n            ))}\n          </select>\n          <label for=\"rewardToken\">Select token</label>\n        </div>\n      </div>\n      <div class=\"col-xs-12 col-sm\">\n        <div class=\"form-floating\">\n          <input\n            type=\"number\"\n            class={`form-control ${\n              hasError(\"rewardTokenAmount\")\n                ? \"is-invalid\"\n                : state.isFormSubmitted\n                ? \"is-valid\"\n                : \"\"\n            }`}\n            id=\"rewardTokenAmount\"\n            placeholder=\"Token amount\"\n            value={state.rewardTokenAmount}\n            onChange={(e) => updateState(e.target.value, \"rewardTokenAmount\")}\n          />\n          <label for=\"rewardTokenAmount\">Token amount *</label>\n          {hasError(\"rewardTokenAmount\") && (\n            <div class=\"invalid-feedback\">\n              {state.formError.rewardTokenAmount}\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst renderNftID = () => {\n  return (\n    <div class=\"col-xs-12 col-sm\">\n      <div class=\"form-floating\">\n        <input\n          class={`form-control ${\n            hasError(\"nftID\")\n              ? \"is-invalid\"\n              : state.isFormSubmitted\n              ? \"is-valid\"\n              : \"\"\n          }`}\n          id=\"nftID\"\n          placeholder=\"NFT id\"\n          value={state.nftID}\n          onChange={(e) => updateState(e.target.value, \"nftID\")}\n        />\n        <label for=\"nftID\">NFT id *</label>\n        {hasError(\"nftID\") && (\n          <div class=\"invalid-feedback\">{state.formError.nftID}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nreturn (\n  <div class=\"container  mt-3\">\n    <div class=\"row mb-3\">\n      <div class=\"col-12 mb-3\">\n        <Web3Connect />\n      </div>\n      {!!state.sender && state.chainId !== Number(chainIdIPT) && (\n        <div class=\"col-12\">\n          <button\n            type=\"button\"\n            class=\"btn btn-outline-primary\"\n            onClick={() => switchImpetus()}\n          >\n            Switch Impetus\n          </button>\n        </div>\n      )}\n    </div>\n    <div class=\"row mb-3\">\n      <label for=\"name\" class=\"col-sm-2 col-form-label\">\n        Name *\n      </label>\n      <div class=\"col-sm-10\">\n        <input\n          class={`form-control ${\n            hasError(\"name\")\n              ? \"is-invalid\"\n              : state.isFormSubmitted\n              ? \"is-valid\"\n              : \"\"\n          }`}\n          id=\"name\"\n          value={state.name}\n          onChange={(e) => updateState(e.target.value, \"name\")}\n        />\n        {hasError(\"name\") && (\n          <div class=\"invalid-feedback\">{state.formError.name}</div>\n        )}\n      </div>\n    </div>\n    <div class=\"row mb-3\">\n      <label for=\"startTime\" class=\"col-sm-2 col-form-label\">\n        Start time *\n        <br />\n        <small>\n          <i>(mm/dd/yyyy)</i>\n        </small>\n      </label>\n      <div class=\"col-sm-10\">\n        <input\n          type=\"datetime-local\"\n          class={`form-control ${\n            hasError(\"startTime\")\n              ? \"is-invalid\"\n              : state.isFormSubmitted\n              ? \"is-valid\"\n              : \"\"\n          }`}\n          id=\"startTime\"\n          value={formatToDatetimeInput(state.startTime)}\n          onChange={(e) => onSelectDatetime(e.target.value, \"startTime\")}\n        />\n        {hasError(\"startTime\") && (\n          <div class=\"invalid-feedback\">{state.formError.startTime}</div>\n        )}\n      </div>\n    </div>\n    <div class=\"row mb-3\">\n      <label for=\"endTime\" class=\"col-sm-2 col-form-label\">\n        End time *\n        <br />\n        <small>\n          <i>(mm/dd/yyyy)</i>\n        </small>\n      </label>\n      <div class=\"col-sm-10\">\n        <input\n          type=\"datetime-local\"\n          class={`form-control ${\n            hasError(\"endTime\")\n              ? \"is-invalid\"\n              : state.isFormSubmitted\n              ? \"is-valid\"\n              : \"\"\n          }`}\n          id=\"endTime\"\n          value={formatToDatetimeInput(state.endTime)}\n          onChange={(e) => onSelectDatetime(e.target.value, \"endTime\")}\n        />\n        {hasError(\"endTime\") && (\n          <div class=\"invalid-feedback\">{state.formError.endTime}</div>\n        )}\n      </div>\n    </div>\n    <div class=\"row mb-3\">\n      <label for=\"userVerifyLevel\" class=\"col-sm-2 col-form-label\">\n        User verify level\n      </label>\n      <div class=\"col-sm-10\">\n        <select\n          class=\"form-select\"\n          id=\"userVerifyLevel\"\n          value={state.userVerifyLevel}\n          onChange={(e) => updateState(e.target.value, \"userVerifyLevel\")}\n        >\n          {UserVerifyLevel.map((level) => (\n            <option value={level}>Level {level}</option>\n          ))}\n        </select>\n      </div>\n    </div>\n    <div class=\"row mb-3\">\n      <label for=\"assetType\" class=\"col-sm-2 col-form-label\">\n        Reward Type\n      </label>\n      <div class=\"col-sm-10\">\n        <div class=\"row\">\n          <div\n            class={`col-xs-12 ${\n              state.assetType === AssetType[0] ? \"col-sm\" : \"col-sm-4\"\n            }`}\n          >\n            <select\n              class=\"form-select text-capitalize\"\n              id=\"assetType\"\n              value={state.assetType}\n              onChange={(e) => onChangeAssetType(e.target.value)}\n            >\n              {AssetType.map((type) => (\n                <option value={type}>{type}</option>\n              ))}\n            </select>\n          </div>\n          {state.assetType === AssetType[0] && renderTokenReward()}\n          {state.assetType === AssetType[1] && renderNftID()}\n        </div>\n      </div>\n    </div>\n    <div class=\"row mb-3\">\n      <label for=\"randomType\" class=\"col-sm-2 col-form-label\">\n        Random type\n      </label>\n      <div class=\"col-sm-10\">\n        <select\n          class=\"form-select text-capitalize\"\n          id=\"randomType\"\n          value={state.randomType}\n          onChange={(e) => updateState(e.target.value, \"randomType\")}\n        >\n          {RandomType.map((type) => (\n            <option value={type}>{type}</option>\n          ))}\n        </select>\n      </div>\n    </div>\n    <div class=\"row mb-3\">\n      <div class=\"col-sm-10 offset-sm-2\">\n        <Widget\n          src=\"nearui.near/widget/Input.Checkbox\"\n          props={{\n            checked: state.userMustClaim,\n            onChange: (checked) => updateState(checked, \"userMustClaim\"),\n            label: \"User must claim reward manually\",\n            id: \"userMustClaim\",\n          }}\n        />\n      </div>\n    </div>\n    <div class=\"row mb-3\">\n      <div class=\"col-sm-10 offset-sm-2\">\n        <button type=\"button\" class=\"btn btn-primary\" onClick={handleSubmit}>\n          Submit\n        </button>\n      </div>\n    </div>\n  </div>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/2a41aa578c1b22793cefc232be387b13a84693921898f4f4dfd03d12c12ad149/widget/ipt-giveaway", "fact_widget_deployments_id": "66eb6da9eeb4991ce665db2f40094d2b", "inserted_timestamp": "2023-08-27T06:27:24.613Z", "modified_timestamp": "2023-08-27T06:27:24.613Z", "__row_index": 1}