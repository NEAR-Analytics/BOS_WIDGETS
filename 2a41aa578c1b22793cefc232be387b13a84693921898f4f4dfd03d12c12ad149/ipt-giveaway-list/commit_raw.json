{"tx_hash": "FfBY7Yhk8kHYBKXfDFYMZr7aqYDmyzUeraXveQ7vq4Sm", "action_id_social": "7fPpDNGZAA8MPeJyu8CUk2GMz4yKD2heFpfmMZxzVjSb-0-widget", "block_id": 99755819, "block_timestamp": "2023-08-27T05:37:38.024Z", "signer_id": "2a41aa578c1b22793cefc232be387b13a84693921898f4f4dfd03d12c12ad149", "widget_name": "ipt-giveaway-list", "source_code": null, "metadata": null, "branch": {"draft": {"": "const { contractAddress, walletAddress, apiUrl } = props;\n\nif (!contractAddress || !walletAddress || !apiUrl) {\n  return \"Please return to dashboard to connect to BOS\";\n}\n\nif (!Ethers.provider()) {\n  return \"Something went wrong!! Try refresh the page\";\n}\n\nState.init({\n  listData: [],\n  fetchingData: true,\n  currentBlock: undefined,\n});\n\nconsole.log(\"Fetching data\", state.fetchingData);\n\nEthers.provider()\n  .getBlock()\n  .then((block) => {\n    console.log(\"got current block\", block.number);\n    State.update({\n      currentBlock: block.number,\n    });\n  });\n\nconst giveAwayAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint32\",\n        name: \"index\",\n        type: \"uint32\",\n      },\n    ],\n    name: \"claimReward\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"startBlock\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"endBlock\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"kycStatus\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"randomType\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"assetType\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"assetId\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"maxJoin\",\n        type: \"uint32\",\n      },\n    ],\n    name: \"createGiveaway\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint32\",\n        name: \"index\",\n        type: \"uint32\",\n      },\n    ],\n    name: \"participate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst fetchData = fetch(apiUrl, {\n  method: \"POST\",\n  headers: { \"Content-Type\": \"application/json\" },\n  body: JSON.stringify({\n    query: `{\n        giveAwayCreateds(orderBy: index_DESC) {\n          id\n          timestamp\n          name\n          assetType\n          token\n          index\n          start\n          end\n        }\n      }`,\n  }),\n});\n\nif (!!fetchData) {\n  console.log(\"response\", fetchData.body);\n  State.update({\n    listData: fetchData.body.data.giveAwayCreateds,\n  });\n}\n\nif (!!state.currentBlock && state.listData.length) {\n  console.log(\"Stop fetching\");\n  State.update({\n    fetchingData: false,\n  });\n}\n\nconst isAfter = (currentBlock, blockToCompare) => {\n  return currentBlock > blockToCompare;\n};\n\nconst isBefore = (currentBlock, blockToCompare) => {\n  return currentBlock < blockToCompare;\n};\n\nconst isEnded = (endBlock) => {\n  return isAfter(state.currentBlock, endBlock);\n};\n\nconst isHappening = (startBlock, endBlock) => {\n  return (\n    isAfter(state.currentBlock, startBlock) &&\n    isBefore(state.currentBlock, endBlock)\n  );\n};\n\nconst isNotRunning = (startBlock) => {\n  return isBefore(state.currentBlock, startBlock);\n};\n\nconst parseToken = (tokenStr) => {\n  const token = JSON.parse(tokenStr);\n\n  return ethers.utils.formatEther(token.amount);\n};\n\nconst participate = (gaIndex) => {\n  const giveaway = new ethers.Contract(\n    contractAddress,\n    giveAwayAbi,\n    Ethers.provider().getSigner(walletAddress)\n  );\n\n  console.log(\"GA Contract\", giveaway);\n\n  giveaway.participate(gaIndex).then((transactionHash) => {\n    console.log(\"transactionHash is \" + transactionHash);\n  });\n};\n\nconst renderBadge = (startBlock, endBlock) => {\n  let badgeLabel = \"\";\n  let badgeColor = \"\";\n\n  if (isHappening(startBlock, endBlock)) {\n    badgeLabel = \"GA is running\";\n    badgeColor = \"text-bg-success\";\n  } else if (isNotRunning(startBlock)) {\n    badgeLabel = \"GA not started\";\n    badgeColor = \"text-bg-primary\";\n  } else if (isEnded(endBlock)) {\n    badgeLabel = \"GA has ended\";\n    badgeColor = \"text-bg-secondary\";\n  }\n\n  return (\n    <span class={`badge rounded-pill mt-3 ${badgeColor}`}>{badgeLabel}</span>\n  );\n};\n\nconst renderListItem = ({\n  index,\n  name,\n  start,\n  end,\n  assetType,\n  token,\n  nftID,\n}) => {\n  return (\n    <div class=\"card h-100\">\n      <div class=\"card-header\">\n        <h5 class=\"card-title mt-2 mb-3\">{name}</h5>\n        <h6 class=\"card-subtitle\">\n          <small>Reward type: {assetType}</small>\n        </h6>\n        {renderBadge(start, end)}\n      </div>\n      <div class=\"card-body\">\n        <div class=\"d-flex flex-column flex-md-row w-100 justify-content-between align-items-center\">\n          <div class=\"fw-semibold\">\n            <small>\n              {assetType === \"FungibleToken\" ? \"Reward Amount\" : \"NFT id\"}\n            </small>\n          </div>\n          <div class=\"text-end\">\n            <small>\n              {assetType === \"FungibleToken\" ? parseToken(token) : nftID}\n            </small>\n          </div>\n        </div>\n        <hr class=\"my-2\" />\n        <div class=\"d-flex flex-column flex-md-row w-100 justify-content-between align-items-center card-text\">\n          <div class=\"fw-semibold\">\n            <small>Start time</small>\n          </div>\n          <div class=\"text-end\">\n            <small>\n              {new Date(startTime).toLocaleDateString()}\n              <br />\n              {new Date(startTime).toLocaleTimeString()}\n            </small>\n          </div>\n        </div>\n        <hr class=\"my-2\" />\n        <div class=\"d-flex flex-column flex-md-row w-100 justify-content-between align-items-center card-text\">\n          <div class=\"fw-semibold\">\n            <small>End time</small>\n          </div>\n          <div class=\"text-end\">\n            <small>\n              {new Date(endTime).toLocaleDateString()}\n              <br />\n              {new Date(endTime).toLocaleTimeString()}\n            </small>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-footer text-center\">\n        <button\n          class={`btn btn-${isEnded(end) ? \"secondary\" : \"success\"} w-100`}\n          disabled={state.fetchingData || isEnded(end)}\n          onClick={() => participate(index)}\n        >\n          {isEnded(end) ? \"Ended\" : \"Join Giveaway\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nreturn (\n  <div class=\"container\">\n    <div class=\"row\">\n      {state.fetchingData && (\n        <div class=\"col-12\">\n          <div class=\"d-flex justify-content-center align-items-center\">\n            <div class=\"spinner-border text-primary\" role=\"status\">\n              <span class=\"visually-hidden\">Loading...</span>\n            </div>\n          </div>\n        </div>\n      )}\n      {!state.fetchingData &&\n        state.listData.map((item) => (\n          <div key={item.id} class=\"col-xs-12 col-sm-6 col-md-4 mb-4\">\n            {renderListItem(item)}\n          </div>\n        ))}\n    </div>\n  </div>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/2a41aa578c1b22793cefc232be387b13a84693921898f4f4dfd03d12c12ad149/widget/ipt-giveaway-list", "fact_widget_deployments_id": "d62ffc3876c3071c0a2074c053e89aa1", "inserted_timestamp": "2023-08-27T07:22:19.753Z", "modified_timestamp": "2023-08-27T07:22:19.753Z", "__row_index": 20}