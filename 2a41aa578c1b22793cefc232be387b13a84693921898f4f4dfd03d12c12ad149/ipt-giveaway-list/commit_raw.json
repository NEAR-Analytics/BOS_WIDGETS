{"tx_hash": "8TdHdaR9P15rfcAYqDiPquGgmVEs7A74cLZJuthEkdXz", "action_id_social": "FfJsKq7sPEiDpe9r4i4SwukgiLiEUrxkWUcCvrgxaRUC-0-widget", "block_id": 99944207, "block_timestamp": "2023-08-29T17:59:35.865Z", "signer_id": "2a41aa578c1b22793cefc232be387b13a84693921898f4f4dfd03d12c12ad149", "widget_name": "ipt-giveaway-list", "source_code": "const { contractAddress, walletAddress, gqlUrl, userStatus } = props;\n\nif (!contractAddress || !walletAddress || !gqlUrl) {\n  return \"Please return to dashboard to connect to BOS\";\n}\n\nif (!userStatus || !Ethers.provider()) {\n  return \"Something went wrong!! Try refresh the page\";\n}\n\nconst fetchConfig = {\n  method: \"POST\",\n  headers: { \"Content-Type\": \"application/json\" },\n  body: JSON.stringify({\n    query: `{\n      giveAwayCreateds(orderBy: index_DESC) {\n        id\n        name\n        assetType\n        token\n        index\n        start\n        end\n        maxJoin\n        kyc\n        giveAwayWinner {\n          who\n          requestId\n          result\n        }\n        giveAwayParticipateds {\n          who\n        }\n      }\n    }`,\n  }),\n};\n\nState.init({\n  listData: [],\n  fetchingData: true,\n  currentBlock: undefined,\n  isReFetching: false,\n});\n\nconst fetchData = () => {\n  return asyncFetch(gqlUrl, fetchConfig);\n};\n\n// On init, start fetch list data\nif (!state.isReFetching) {\n  fetchData().then((res) => {\n    if (res.ok) {\n      State.update({\n        ...state,\n        listData: [...res.body.data.giveAwayCreateds],\n        isReFetching: true, // Start interval for auto update data\n      });\n    }\n  });\n}\n\nif (!!state.listData.length) {\n  Ethers.provider()\n    .getBlock(\"latest\")\n    .then((block) => {\n      State.update({\n        ...state,\n        currentBlock: block.number,\n      });\n    });\n}\n\n// Display list when we got all necessary data\nif (!!state.currentBlock && state.listData.length) {\n  State.update({\n    fetchingData: false,\n  });\n}\n\nconst syncFetch = () => {\n  const res = fetch(gqlUrl, fetchConfig);\n\n  return res;\n};\n\nlet interval = null;\n\nif (state.isReFetching) {\n  let isPause = false;\n\n  interval = setInterval(() => {\n    if (isPause) {\n      return;\n    }\n\n    isPause = true;\n\n    console.log(\"start auto re-fetch\");\n\n    const res = syncFetch();\n\n    if (res.ok) {\n      const fetchedList = res.body.data.giveAwayCreateds;\n\n      if (JSON.stringify(fetchedList) !== JSON.stringify(state.listData)) {\n        clearInterval(interval);\n\n        console.log(\"update new list\");\n        State.update({\n          ...state,\n          listData: [...fetchedList],\n        });\n      } else {\n        isPause = false;\n      }\n    }\n  }, 5000); // Auto re-fetch after 5 seconds\n}\n\nconst giveAwayAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint32\",\n        name: \"index\",\n        type: \"uint32\",\n      },\n    ],\n    name: \"claimReward\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"startBlock\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"endBlock\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"kycStatus\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"randomType\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"assetType\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"assetId\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"maxJoin\",\n        type: \"uint32\",\n      },\n    ],\n    name: \"createGiveaway\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint32\",\n        name: \"index\",\n        type: \"uint32\",\n      },\n    ],\n    name: \"participate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst isAllowedToJoinGA = (kycTier) => {\n  if (Number(userStatus) === 2) {\n    return true;\n  }\n\n  return kycTier === \"Tier0\";\n};\n\nconst isAfter = (currentBlock, blockToCompare) => {\n  return currentBlock > blockToCompare;\n};\n\nconst isBefore = (currentBlock, blockToCompare) => {\n  return currentBlock < blockToCompare;\n};\n\nconst isEnded = (endBlock) => {\n  return isAfter(state.currentBlock, endBlock);\n};\n\nconst isHappening = (startBlock, endBlock) => {\n  return (\n    isAfter(state.currentBlock, startBlock) &&\n    isBefore(state.currentBlock, endBlock)\n  );\n};\n\nconst isNotRunning = (startBlock) => {\n  return isBefore(state.currentBlock, startBlock);\n};\n\nconst parseToken = (tokenStr) => {\n  const token = JSON.parse(tokenStr);\n\n  return ethers.utils.formatEther(token.amount);\n};\n\nconst participate = (gaIndex) => {\n  const giveaway = new ethers.Contract(\n    contractAddress,\n    giveAwayAbi,\n    Ethers.provider().getSigner(walletAddress)\n  );\n\n  giveaway.participate(gaIndex).then((transactionHash) => {\n    console.log(\"transactionHash is \" + transactionHash);\n  });\n};\n\nconst renderBadge = (startBlock, endBlock) => {\n  let badgeLabel = \"\";\n  let badgeColor = \"\";\n\n  if (isHappening(startBlock, endBlock)) {\n    badgeLabel = \"GA is running\";\n    badgeColor = \"text-bg-success\";\n  } else if (isNotRunning(startBlock)) {\n    badgeLabel = \"GA not started\";\n    badgeColor = \"text-bg-primary\";\n  } else if (isEnded(endBlock)) {\n    badgeLabel = \"GA has ended\";\n    badgeColor = \"text-bg-secondary\";\n  }\n\n  return (\n    <span class={`badge rounded-pill mt-3 ${badgeColor}`}>{badgeLabel}</span>\n  );\n};\n\nconst renderTooltipText = () => {\n  if (Number(userStatus) === 1) {\n    return \"Pending account cannot join GA with KYC level 1\";\n  }\n\n  if (Number(userStatus) === 3) {\n    return \"Rejected account cannot join GA with KYC level 1\";\n  }\n\n  if (Number(userStatus) === 2) {\n    return \"Verified account can join any GA\";\n  }\n};\n\nconst renderIconWithTooltip = (children) => {\n  return (\n    <OverlayTrigger\n      placement=\"bottom\"\n      overlay={<Tooltip>{renderTooltipText()}</Tooltip>}\n    >\n      {Number(userStatus) === 2 ? (\n        <i class=\"bi bi-person-fill-check fs-3 text-success\" />\n      ) : (\n        <i class=\"bi bi-person-fill-slash fs-3 text-warning\" />\n      )}\n    </OverlayTrigger>\n  );\n};\n\nconst renderListItem = ({\n  index,\n  name,\n  start,\n  end,\n  assetType,\n  token,\n  nftID,\n  maxJoin,\n  giveAwayWinner,\n  giveAwayParticipateds,\n  kyc,\n}) => {\n  const { who, requestId, result } = giveAwayWinner || {};\n\n  const joinedNumber = giveAwayParticipateds.length;\n\n  return (\n    <div class=\"card h-100\">\n      <div class=\"card-header\">\n        <div class=\"d-flex justify-content-between\">\n          <h5 class=\"card-title mt-2 mb-3\">{name}</h5>\n        </div>\n        <h6 class=\"card-subtitle\">\n          <small>Reward type: {assetType}</small>\n        </h6>\n        {renderBadge(start, end)}\n      </div>\n      <div class=\"card-body\">\n        <div class=\"d-flex flex-column flex-md-row w-100 gap-3 justify-content-between align-items-center card-text\">\n          <div class=\"fw-semibold\">\n            <small>Index</small>\n          </div>\n          <div class=\"text-end\">{index}</div>\n        </div>\n\n        <hr class=\"my-2\" />\n        <div class=\"d-flex flex-column flex-md-row w-100 justify-content-between align-items-center\">\n          <div class=\"fw-semibold\">\n            <small>\n              {assetType === \"FungibleToken\" ? \"Reward Amount\" : \"NFT id\"}\n            </small>\n          </div>\n          <div class=\"text-end\">\n            <small>\n              {assetType === \"FungibleToken\"\n                ? `${parseToken(token)} IPT`\n                : nftID}\n            </small>\n          </div>\n        </div>\n\n        {!!who && (\n          <>\n            <hr class=\"my-2\" />\n            <div class=\"d-flex flex-column flex-md-row gap-3 w-100 justify-content-between align-items-center card-text\">\n              <div class=\"fw-semibold\">\n                <small>Winner</small>\n              </div>\n              <div class=\"text-end text-break\">\n                <small>{who}</small>\n              </div>\n            </div>\n          </>\n        )}\n\n        {!!requestId && (\n          <>\n            <hr class=\"my-2\" />\n            <div class=\"d-flex flex-column flex-md-row gap-3 w-100 justify-content-between align-items-center card-text\">\n              <div class=\"fw-semibold\">\n                <small>Request ID</small>\n              </div>\n              <div class=\"text-end text-break\">\n                <small>{requestId}</small>\n              </div>\n            </div>\n          </>\n        )}\n\n        {!!result && (\n          <>\n            <hr class=\"my-2\" />\n            <div class=\"d-flex flex-column flex-md-row gap-3 w-100 justify-content-between align-items-center card-text\">\n              <div class=\"fw-semibold\">\n                <small>Result</small>\n              </div>\n              <div class=\"text-end text-break\">\n                <small>{result}</small>\n              </div>\n            </div>\n          </>\n        )}\n\n        {!!maxJoin && (\n          <>\n            <hr class=\"my-2\" />\n            <div class=\"d-flex flex-column flex-md-row w-100 gap-3 justify-content-between align-items-center card-text\">\n              <div class=\"fw-semibold\">\n                <small>Max participants</small>\n              </div>\n              <div class=\"text-end\">{maxJoin}</div>\n            </div>\n          </>\n        )}\n\n        <hr class=\"my-2\" />\n        <div class=\"d-flex flex-column flex-md-row w-100 gap-3 justify-content-between align-items-center card-text\">\n          <div class=\"fw-semibold\">\n            <small>Total participated account</small>\n          </div>\n          <div class=\"text-end\">{joinedNumber}</div>\n        </div>\n\n        <hr class=\"my-2\" />\n        <div class=\"d-flex flex-column flex-md-row w-100 gap-3 justify-content-between align-items-center card-text\">\n          <div class=\"fw-semibold\">\n            <small>KYC level</small>\n          </div>\n          <div class=\"text-end\">{kyc.replace(\"Tier\", \"Level \")}</div>\n        </div>\n      </div>\n      <div class=\"card-footer text-center\">\n        <button\n          class={`btn btn-${isEnded(end) ? \"secondary\" : \"success\"} w-100`}\n          disabled={\n            !isAllowedToJoinGA(kyc)\n              ? true\n              : state.fetchingData || !isHappening(start, end)\n          }\n          onClick={() => participate(index)}\n        >\n          {isEnded(end)\n            ? \"Ended\"\n            : !isAllowedToJoinGA(kyc)\n            ? \"Not allowed\"\n            : \"Join Giveaway\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nreturn (\n  <div class=\"container\">\n    <div class=\"row\">\n      {state.fetchingData && (\n        <div class=\"col-12\">\n          <div class=\"d-flex justify-content-center align-items-center\">\n            <div class=\"spinner-border text-primary\" role=\"status\">\n              <span class=\"visually-hidden\">Loading...</span>\n            </div>\n          </div>\n        </div>\n      )}\n      {!state.fetchingData &&\n        state.listData.map((item) => (\n          <div key={item.id} class=\"col-xs-12 col-sm-6 col-md-4 mb-4\">\n            {renderListItem(item)}\n          </div>\n        ))}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/2a41aa578c1b22793cefc232be387b13a84693921898f4f4dfd03d12c12ad149/widget/ipt-giveaway-list", "fact_widget_deployments_id": "40bb0d2612630f5338e2cef748249e4c", "inserted_timestamp": "2023-08-29T19:35:25.931Z", "modified_timestamp": "2023-08-29T19:35:25.931Z", "__row_index": 0}