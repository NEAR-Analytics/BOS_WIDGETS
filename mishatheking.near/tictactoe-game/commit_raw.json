{"tx_hash": "21bq9RishC3GaTxUJRB7NX1EQUjzZ6Wr6ukwbnCA1VQu", "action_id_social": "J3odtJo1Xhi8WBPmTLBkSb9jnznRPfM1Cm5BNjfGhVq6-0-widget", "block_id": 107685547, "block_timestamp": "2023-12-11T14:41:44.438Z", "signer_id": "mishatheking.near", "widget_name": "tictactoe-game", "source_code": "const calculateWinner = (squares) => {\n  const lines = [];\n\n  for (let i = 0; i < 5; i++) {\n    lines.push([i, i + 5, i + 10, i + 15, i + 20]); // Vertical lines\n    lines.push([i * 5, i * 5 + 1, i * 5 + 2, i * 5 + 3, i * 5 + 4]); // Horizontal lines\n  }\n\n  for (let i = 0; i < 5; i++) {\n    lines.push([i * 6, i * 6 + 1, i * 6 + 2, i * 6 + 3, i * 6 + 4]); // Diagonal from top-left to bottom-right\n    lines.push([i, i + 7, i + 14, i + 21, i + 28]); // Diagonal from top-right to bottom-left\n  }\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c, d, e] = lines[i];\n    if (\n      squares[a] &&\n      squares[a] === squares[b] &&\n      squares[a] === squares[c] &&\n      squares[a] === squares[d] &&\n      squares[a] === squares[e]\n    ) {\n      return squares[a];\n    }\n  }\n\n  return null;\n};\n\nconst isBoardFull = (squares) => {\n  return squares.every((square) => square !== null);\n};\n\nconst getRandomMove = (squares) => {\n  const emptySquares = squares.reduce((acc, value, index) => {\n    if (!value) acc.push(index);\n    return acc;\n  }, []);\n\n  const randomIndex = Math.floor(Math.random() * emptySquares.length);\n  return emptySquares[randomIndex];\n};\n\nconst [squares, setSquares] = useState(Array(25).fill(null));\nconst [xIsNext, setXIsNext] = useState(true);\nconst [isGameOver, setGameOver] = useState(false);\nconst [playerScore, setPlayerScore] = useState(0);\nconst [computerScore, setComputerScore] = useState(0);\n\nconst handleClick = (index) => {\n  if (\n    squares[index] ||\n    calculateWinner(squares) ||\n    isBoardFull(squares) ||\n    isGameOver\n  ) {\n    return;\n  }\n\n  const newSquares = [...squares];\n  newSquares[index] = xIsNext ? \"X\" : \"O\";\n  setSquares(newSquares);\n  setXIsNext(!xIsNext);\n\n  if (!isBoardFull(newSquares) && !calculateWinner(newSquares)) {\n    // Computer's move\n    const computerMove = getRandomMove(newSquares);\n    newSquares[computerMove] = \"O\";\n    setSquares(newSquares);\n    setXIsNext(true);\n  }\n};\n\nuseEffect(() => {\n  const winner = calculateWinner(squares);\n  const full = isBoardFull(squares);\n\n  if (winner) {\n    if (winner === \"X\") {\n      setPlayerScore(playerScore + 1);\n    } else if (winner === \"O\") {\n      setComputerScore(computerScore + 1);\n    }\n  }\n\n  if (full || winner) {\n    setGameOver(true);\n  }\n}, [squares]);\n\nconst resetGame = () => {\n  setSquares(Array(25).fill(null));\n  setGameOver(false);\n  setXIsNext(true);\n};\n\nconst resetScores = () => {\n  setPlayerScore(0);\n  setComputerScore(0);\n};\n\nlet status;\nif (isGameOver) {\n  const winner = calculateWinner(squares);\n  if (winner) {\n    status = `Winner: ${winner === \"X\" ? \"Player\" : \"Computer\"}`;\n  } else {\n    status = \"It's a draw!\";\n  }\n} else {\n  status = `Next player: ${xIsNext ? \"Player\" : \"Computer\"}`;\n}\n\n// ... (your existing code)\n\nreturn (\n  <div\n    style={{\n      background: \"#333\",\n      minHeight: \"100vh\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    }}\n  >\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        marginTop: \"50px\",\n        fontFamily: \"Arial, sans-serif\",\n      }}\n    >\n      <div\n        style={{\n          backgroundColor: isGameOver ? \"#8eff8e\" : \"#444\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"8px\",\n          boxShadow: \"0px 0px 10px 0px rgba(0, 0, 0, 0.2)\",\n          padding: \"20px\",\n          display: \"grid\",\n          gridTemplateColumns: \"repeat(5, 1fr)\",\n          gap: \"10px\",\n          fontSize: \"24px\",\n          fontWeight: \"bold\",\n          textAlign: \"center\",\n          cursor: \"pointer\",\n          transition: \"background-color 0.3s ease-in-out\",\n        }}\n      >\n        <div\n          style={{\n            fontSize: \"24px\",\n            marginBottom: \"20px\",\n            gridColumn: \"span 5\",\n            color: \"#fff\",\n          }}\n        >\n          {status}\n        </div>\n\n        {squares.map((value, index) => (\n          <button\n            key={index}\n            className=\"square\"\n            onClick={() => handleClick(index)}\n            style={{\n              backgroundColor: isGameOver ? \"#8eff8e\" : \"#666\",\n              border: \"1px solid #ccc\",\n              fontSize: \"24px\",\n              fontWeight: \"bold\",\n              padding: \"20px\",\n              textAlign: \"center\",\n              width: \"60px\",\n              height: \"60px\",\n              cursor: \"pointer\",\n              transition: \"background-color 0.3s ease-in-out\",\n              color: \"#fff\",\n            }}\n          >\n            {value}\n          </button>\n        ))}\n      </div>\n    </div>\n    <div style={{ marginTop: \"20px\", textAlign: \"center\", color: \"#fff\" }}>\n      <div>\n        <strong>Player Points :</strong> {playerScore}\n      </div>\n      <div>\n        <strong>Computer Points :</strong> {computerScore}\n      </div>\n    </div>\n    <div style={{ marginTop: \"20px\", textAlign: \"center\" }}>\n      <button\n        onClick={resetGame}\n        style={{\n          background: \"#5cb85c\",\n          color: \"#fff\",\n          border: \"none\",\n          padding: \"10px 20px\",\n          fontSize: \"16px\",\n          borderRadius: \"5px\",\n          cursor: \"pointer\",\n        }}\n      >\n        Next\n      </button>\n      <button\n        onClick={resetScores}\n        style={{\n          background: \"#d9534f\",\n          color: \"#fff\",\n          border: \"none\",\n          padding: \"10px 20px\",\n          fontSize: \"16px\",\n          borderRadius: \"5px\",\n          marginLeft: \"10px\",\n          cursor: \"pointer\",\n        }}\n      >\n        Reset Points\n      </button>\n    </div>\n  </div>\n);\n", "metadata": {"fork_of": "mishatheking.near/widget/tictactoe-game@107684947"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mishatheking.near/widget/tictactoe-game", "fact_widget_deployments_id": "78863a400ea20ea04bf9776fd5b73f95", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}