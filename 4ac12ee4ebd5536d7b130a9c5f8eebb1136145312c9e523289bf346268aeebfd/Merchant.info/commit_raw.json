{"tx_hash": "FrcvCzC8qdFb572pZHaPzMHSxvQth4LHUq8HPLnXiAEw", "action_id_social": "9Gwvkq2CttsXExaeaCjvrqqaHMsqaSJkvCxGy8zF4czA-0-widget", "block_id": 97088858, "block_timestamp": "2023-07-22T19:01:01.189Z", "signer_id": "4ac12ee4ebd5536d7b130a9c5f8eebb1136145312c9e523289bf346268aeebfd", "widget_name": "Merchant.info", "source_code": "if (!props.collectionAddress || !props.abi) {\n  return (\n    <tr>\n      <td colspan=\"6\" class=\"text-white\">\n        Data unavailable\n      </td>\n    </tr>\n  );\n}\n\nconst contract = props.collectionAddress;\nconst abi = props.abi;\n\nconst iface = new ethers.utils.Interface(abi);\n\nconst collectionContract = new ethers.Contract(\n  contract,\n  abi,\n  Ethers.provider().getSigner()\n);\n\nState.init({\n  circulating_supply: 0,\n  max_supply: 0,\n  price: 0,\n  total_earnings: 0,\n  uri: \"\",\n});\n\nconst getTotalEarnings = () => {\n  const tierValue = 0;\n  const tierHex = \"0x\" + tierValue.toString(16).padStart(64, \"0\");\n  const filter = {\n    address: contractAddress,\n    topics: [\n      ethers.utils.id(\"SubscriptionUpdate(uint256,address,uint256)\"),\n      tierHex,\n    ],\n    fromBlock: 0,\n    toBlock: \"latest\",\n  };\n  Ethers.provider()\n    .getLogs(filter)\n    .then((logs) => {\n      const tot = state.price * logs.length;\n      //console.log(\"Total earning: \", tot);\n      State.update({ total_earnings: tot });\n    })\n    .catch((err) => console.log(err));\n};\n\nconst getCirculatingSupply = () => {\n  const encodedData = iface.encodeFunctionData(\"getTierSupply\", [0, false]);\n\n  return Ethers.provider()\n    .call({\n      to: contract,\n      data: encodedData,\n    })\n    .then((circulating) => {\n      const circulating_supply = iface\n        .decodeFunctionResult(\"getTierSupply\", circulating)\n        .toString();\n      //console.log(\"Circulating supply: \", circulating_supply);\n      State.update({ circulating_supply: circulating_supply });\n    });\n};\n\nconst getMaxSupply = () => {\n  const encodedData = iface.encodeFunctionData(\"getTierSupply\", [0, true]);\n\n  return Ethers.provider()\n    .call({\n      to: contract,\n      data: encodedData,\n    })\n    .then((total) => {\n      const max_supply = iface\n        .decodeFunctionResult(\"getTierSupply\", total)\n        .toString();\n      //console.log(\"Total supply: \", max_supply);\n      State.update({ max_supply: max_supply == -1 ? \"-\" : max_supply });\n    });\n};\n\nconst getCollectionName = () => {\n  const encodedData = iface.encodeFunctionData(\"collectionName\", []);\n\n  return Ethers.provider()\n    .call({\n      to: contract,\n      data: encodedData,\n    })\n    .then((n) => {\n      const name = iface.decodeFunctionResult(\"collectionName\", n)[0];\n      //console.log(\"Name: \", name);\n      State.update({ name: name });\n    });\n};\n\nconst getCollectionImage = () => {\n  try {\n    const encodedData = iface.encodeFunctionData(\"uri\", [0]);\n\n    return Ethers.provider()\n      .call({\n        to: contract,\n        data: encodedData,\n      })\n      .then((url) => {\n        const uri = iface.decodeFunctionResult(\"uri\", url);\n        const real_uri = uri[0].slice(0, uri[0].length - 1);\n        //console.log(\"url: \", real_uri);\n        const metas = fetch(real_uri);\n        if (metas.ok) {\n          const jsonmeta = JSON.parse(metas.body);\n          State.update({ uri: jsonmeta[\"image\"] });\n        } else {\n          console.log(metas);\n        }\n      });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst getPrice = () => {\n  const encodedData = iface.encodeFunctionData(\"getTierPrice\", [0]);\n\n  return Ethers.provider()\n    .call({\n      to: contract,\n      data: encodedData,\n    })\n    .then((p) => {\n      const price = iface.decodeFunctionResult(\"getTierPrice\", p);\n      const _price = Big(price.toString()).div(Big(10).pow(18)).toString();\n      //console.log(\"Price: \", _price);\n      State.update({ price: _price });\n    });\n};\n\nif (Ethers.provider()) {\n  getTotalEarnings();\n  getCirculatingSupply();\n  getMaxSupply();\n  getCollectionName();\n  getPrice();\n  getCollectionImage();\n} else return <Web3Connect connectLabel=\"Connect with Web3\" />;\n\nreturn (\n  <tr>\n    <th scope=\"row\" class=\"text-white\">\n      <img src={state.uri} class=\"img-fluid\" />\n    </th>\n    <th class=\"text-white\">{state.name}</th>\n    <td class=\"text-white\">{state.circulating_supply}</td>\n    <td class=\"text-white\">{state.max_supply > 0 ? state.max_supply : \"-\"}</td>\n    <td class=\"text-white\">{state.price} \u039e</td>\n    <td class=\"text-white\">{state.total_earnings} \u039e</td>\n    <td class=\"text-white\">{new Date().toLocaleDateString()}</td>\n  </tr>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/4ac12ee4ebd5536d7b130a9c5f8eebb1136145312c9e523289bf346268aeebfd/widget/Merchant.info", "fact_widget_deployments_id": "75b9537b1f1d11dc80b5f8a5aea11c0a", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 4}