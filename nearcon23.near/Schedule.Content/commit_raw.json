{"tx_hash": "CYTvL9Q4f9ASaLGgEVSQcsfYLjVDKAGNkztTmaBStHiX", "action_id_social": "Brtt2JzEo4DjRsJBNCvV6Qvid4FyfTdxviiMZByxeFiq-0-widget", "block_id": 105088252, "block_timestamp": "2023-11-06T17:44:18.902Z", "signer_id": "nearcon23.near", "widget_name": "Schedule.Content", "source_code": "const accountId = \"nearcon23.near\";\n\ninitState({ data: [] });\n\n// Airtable API Url: \"https://api.airtable.com/v0/appcR9zt96Wv7VXWl/tblSMeBodnZWPL1vj\"\n\nconst agendaUrl = `https://21mqgszhf3.execute-api.us-east-1.amazonaws.com/testnet/api/v1/airtable/agenda`;\n\nconst speakersUrl = `https://21mqgszhf3.execute-api.us-east-1.amazonaws.com/testnet/api/v1/airtable/speakers`;\nconst sessionsByDate = {};\n\nconst imageLink =\n  \"https://plus.unsplash.com/premium_photo-1664541336896-b3d5f7dec9a3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTN8fHBlcnNvbnxlbnwwfHwwfHx8MA%3D%3D&auto=format&fit=crop&w=500&q=60\";\n\nasyncFetch(agendaUrl).then(({ body }) => {\n  const records = body;\n  const dataToSet = [...records];\n  dataToSet.sort((a, b) => {\n    let dateA = new Date(a[\"\u2699\ufe0f Start Time\"]);\n    let dateB = new Date(b[\"\u2699\ufe0f Start Time\"]);\n    return dateA - dateB;\n  });\n\n  // Extract the relevant fields and store them in a new array of objects:\n  let allLocations = {};\n\n  asyncFetch(speakersUrl).then(({ body: speakerBody }) => {\n    const imageData = {};\n    speakerBody.map((item) => {\n      imageData[item.ref] = item.image;\n    });\n    const simplifiedData = dataToSet\n      .filter((_) => {\n        const wps = _[\"Web Publishing Status\"];\n\n        return (\n          _[\"Web Publishing Status\"]?.length > 0 &&\n          !wps.includes(\"reczlWVomn8QUBxXF\")\n        );\n      })\n      .map((data) => {\n        allLocations[data[\"Location\"]] = true;\n\n        const speakers = [\n          ...(data?.[\"Confirmed Speakers Full Name\"] ?? []),\n          ...(data?.[\"Confirmed Moderator Full Name\"] ?? []),\n        ];\n        const allImages = [];\n        speakers.map((item) => {\n          allImages.push(imageData[item]);\n        });\n\n        return {\n          startTime: data[\"\u2699\ufe0f Start Time\"],\n          endTime: data[\"\u2699\ufe0f End Time\"],\n          title: data[\"\u2699\ufe0f Session Name\"],\n          description: data[\"Description\"],\n          location: data[\"Location\"],\n          track: data?.[\"Track\"]\n            ? data?.[\"Track\"].map((item) => item.toLowerCase())\n            : null,\n          imageIds: allImages,\n          // Assuming that you want to retrieve some speaker name from a different field:\n          confirmedSpeakers: speakers, // Replace with an actual field name if applicable\n          startTimeFormatted: data[\"Start Time Formatted for Calendar\"],\n          endTimeFormatted: data[\"End Time Formatted for Calendar\"],\n        };\n      });\n\n    simplifiedData.forEach((session) => {\n      let date = new Date(session.startTime).toDateString(); // Converts time to a string that represents only the date, not the time\n      sessionsByDate[date] = sessionsByDate[date] || [];\n      sessionsByDate[date].push(session);\n    });\n\n    // Convert the grouped sessions object into an array of session arrays:\n    let groupedSessionsArray = Object.values(sessionsByDate);\n\n    State.update({\n      data: groupedSessionsArray,\n      locations: Object.keys(allLocations).filter(\n        (item) => item !== \"undefined\"\n      ),\n    });\n  });\n});\nconsole.log(\"===>> \", state.filters);\n\nreturn (\n  <>\n    <div\n      style={{\n        zIndex: -100,\n        position: \"none\",\n        minHeight: 600,\n        overflow: \"visible\",\n      }}\n    >\n      <Widget\n        src={`${accountId}/widget/Schedule.Filters`}\n        props={{\n          update: (d) => State.update({ filters: d }),\n          locations: state.locations,\n        }}\n      />\n\n      <div style={{ backgroundColor: \"#000\", padding: 10 }}>\n        <div\n          style={{\n            backgroundColor: \"#FFFFFF\",\n            padding: 0,\n            borderRadius: 8,\n            overflow: \"hidden\",\n          }}\n        >\n          {state.data.map((dateData, index) => {\n            return (\n              <div key={index}>\n                <Widget\n                  src={`${accountId}/widget/Schedule.ContentScheduleShow`}\n                  props={{\n                    dateData,\n                    index,\n                    filter: state.filters,\n                  }}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearcon23.near/widget/Schedule.Content", "fact_widget_deployments_id": "525f82a6d0993fc4f53b1445932b1caa", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}