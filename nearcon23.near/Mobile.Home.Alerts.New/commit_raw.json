{"tx_hash": "5ZzM1jYDpZfWwaSkW4SL7Tg3GNY7VKzdD1hZvmBfRShs", "action_id_social": "GUCjuzXwoYPEfhmomqTxVJ2dLbfhnFnUE6WaBFgryvii-0-widget", "block_id": 104705746, "block_timestamp": "2023-11-01T18:26:59.899Z", "signer_id": "nearcon23.near", "widget_name": "Mobile.Home.Alerts.New", "source_code": "const ownerId = \"nearcon23.near\";\nconst prefix = props.prefix || \"/mobile\";\n\nconst theme = props.theme;\nconst apiUrl =\n  \"https://gqqkd7l7mk.execute-api.us-east-1.amazonaws.com/mainnet/api/v1\";\nconst socketUrl =\n  \"wss://bva2os6ai2.execute-api.us-east-1.amazonaws.com/mainnet\";\n\nconst Container = styled.div`\n    width: 100%;\n    padding: 0 0px;\n`;\nconst HeaderStyle = styled.div`\n height: 64px;\n  display: flex;\n  align-items: flex-end;\n  padding:15px;\n  background: url(\"https://ipfs.near.social/ipfs/bafkreigmwev6i2ivgz5ampkihov2ub7yenn7hohs34erheclixz2dopwru\");\n  \n  // margin-top:-15px;\n\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position:center;\n  p {\n    margin-bottom: 0px;\n    font-size:22px;\n    font-weight: 700;\n    color: black;\n  }\n`;\nconst Content = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n    padding:10px 20px;\n`;\nconst NavLink = styled.div`\n  * {\n      color: #000000;\n  }\n  a:hover {\n    text-decoration:none;\n  }\n`;\n\nconst Header = styled.div`\n    width: 100%;\n    padding: 20px 0;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\nconst Button = styled.button`\n    width: 100%;\n    height: 48px;\n    padding: 10px;\n    margin: 0px 0 0 0;\n    border-radius: 100px;\n    border-width: 0px;\n    font-size: 16px;\n    font-weight: 600;\n    background-color: #000000;\n    display:flex;\n    justify-content: center;\n    align-items: center;\n    gap:16px;\n\n    color: #FFFFFF;\n    :hover {\n      background-color: #000000dd;\n    }\n    :active {\n      background-color: #000000aa;\n    }\n`;\nconst GridToggle = styled.div`\n    display:flex;\n    align-items: center;\n    justify-content: center;\n    gap:16px;\n    width: fit-content !important;\n    @media only screen and (max-width: 600px) {\n      font-size:12px;\n      p {\n        transform: translateY(9px);\n      }\n    }\n`;\n\nState.init({\n  message: \"\",\n  showButton: false,\n  buttonLabel: \"\",\n  url: \"\",\n  recipients: \"allTracks\",\n  accountId: context.accountId,\n  loading: false,\n});\n\nconst ShowHideView = styled.div`\n  // display: inline-block;\n  height: 0;\n  overflow: hidden;\n  transition: height 0.3s ease-in-out;\n\n  &.show {\n    height: 176px;\n  }\n`;\n\nconst [socket, setSocket] = useState(null);\n\nuseEffect(() => {\n  const newSocket = new WebSocket(socketUrl);\n\n  newSocket.onopen = () => {\n    console.log(\"WebSocket connection opened\");\n  };\n\n  newSocket.onmessage = (event) => {\n    console.log(\"Received a message:\", event.data);\n  };\n\n  newSocket.onclose = (event) => {\n    console.log(\"WebSocket connection closed\", event.code, event.reason);\n  };\n\n  setSocket(newSocket);\n\n  return () => {\n    newSocket.close();\n  };\n}, []);\n\nconst handleSubmit = async () => {\n  State.update({ loading: true });\n\n  const data = {\n    message: state.message,\n    showButton: state.showButton,\n    buttonLabel: state.buttonLabel,\n    url: state.url,\n    recipients: state.recipients,\n    createdAt: Date.now(),\n  };\n\n  console.log(\"data : \", data);\n\n  socket.send(JSON.stringify(data));\n\n  State.update({\n    message: \"\",\n    showButton: false,\n    buttonLabel: \"\",\n    url: \"\",\n    recipients: \"allTracks\",\n    accountId: context.accountId,\n    loading: false,\n  });\n  State.update({ redirect: true });\n};\n\nconst { secretkey } = props;\n\nconst storedSecretKey = Storage.get(\n  \"newPrivateKey\",\n  `${ownerId}/widget/Ticket.Page`\n)\n  ? Storage.get(\"newPrivateKey\", `${ownerId}/widget/Ticket.Page`)\n  : Storage.get(\"newPrivateKey\", `${ownerId}/widget/RegisterMobile.Index`);\n\nconst fetchData = () => {\n  const key = secretkey ? secretkey : storedSecretKey;\n  asyncFetch(`${apiUrl}/accounts/auth/${key}`).then(({ body }) => {\n    if (!!storedSecretKey === false) {\n      State.update({\n        redirectToHome: \"redirect\",\n      });\n    }\n    State.update({\n      userData: body,\n    });\n  });\n};\n\nuseEffect(() => {\n  fetchData();\n}, [secretkey, storedSecretKey]);\n\nif (state.redirect) {\n  return <Redirect to=\"/admin\" />;\n}\n\nreturn (\n  <Container>\n    <Widget\n      props={{\n        nearconId: state.userData.nearconId,\n        cid: state.userData.cid,\n      }}\n      src={`${ownerId}/widget/Navbar`}\n    />\n    <HeaderStyle>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          width: \"100%\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <p>New Alert</p>\n\n        <NavLink>\n          <Link to=\"/mobile\">\n            <Widget\n              src={`${ownerId}/widget/Inputs.Toggle2`}\n              props={{\n                rightLabel: \"Home\",\n                value: true,\n                onChange: () => {\n                  props?.closeScannedTicket?.();\n                },\n              }}\n            />\n          </Link>\n        </NavLink>\n      </div>\n    </HeaderStyle>\n    <Content>\n      <Widget\n        src={`${ownerId}/widget/Inputs.TextArea`}\n        props={{\n          label: \"Message\",\n          value: state.message,\n          error: state.messageError,\n          placeholder: \"\",\n          onChange: (message) => State.update({ message }),\n        }}\n      />\n\n      <GridToggle>\n        <Widget\n          src={`${ownerId}/widget/Inputs.Toggle`}\n          props={{\n            value: state.showButton,\n            onChange: (showButton) => State.update({ showButton }),\n          }}\n        />\n        <p style={{ color: theme.textColor, width: \"100%\", margin: 0 }}>\n          Include Call to Action\n        </p>\n      </GridToggle>\n\n      <ShowHideView className={state.showButton ? \"show\" : \"\"}>\n        <Widget\n          src={`${ownerId}/widget/Inputs.Text`}\n          props={{\n            label: \"Button Label\",\n            value: state.buttonLabel,\n            error: state.buttonLabelError,\n            placeholder: \"Enter Button Label\",\n            onChange: (buttonLabel) => State.update({ buttonLabel }),\n          }}\n        />\n\n        <Widget\n          src={`${ownerId}/widget/Inputs.Text`}\n          props={{\n            label: \"URL\",\n            value: state.url,\n            error: state.urlError,\n            placeholder: \"Enter URL Name\",\n            onChange: (url) => State.update({ url }),\n          }}\n        />\n      </ShowHideView>\n      {/*\n      <Widget\n        src={`${ownerId}/widget/Inputs.Select`}\n        props={{\n          label: \"Recipients\",\n          value: state.persona,\n          error: state.personaError,\n          placeholder: \"Choose...\",\n          options: [\n            { value: \"allTracks\", text: \"All Tracks\" },\n            { value: \"developers\", text: \"Developers\" },\n            { value: \"entrepreneurs\", text: \"Entrepreneurs\" },\n            { value: \"creators\", text: \"Creators\" },\n            { value: \"regulators\", text: \"Regulators\" },\n          ],\n          onChange: (persona) => State.update({ persona }),\n        }}\n      />\n      */}\n      <p style={{ fontSize: 12, fontWeight: 400, color: theme.textColor2 }}>\n        By default every NEARCON attendee will receive alerts. You can send\n        alerts to a subset based on track preference.\n      </p>\n      <Button\n        disabled={state.message === \"\"}\n        style={{ opacity: state.message === \"\" ? 0.6 : 1 }}\n        onClick={() => handleSubmit()}\n      >\n        {state.loading && (\n          <div\n            class=\"spinner-border\"\n            role=\"status\"\n            style={{ height: 24, width: 24 }}\n          >\n            <span class=\"visually-hidden\">Loading...</span>\n          </div>\n        )}\n        Send\n        <i class=\"bi bi-arrow-up-right\"></i>\n      </Button>\n    </Content>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearcon23.near/widget/Mobile.Home.Alerts.New", "fact_widget_deployments_id": "baaff1558938de0fe59ebf63d1e9a7cf", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}