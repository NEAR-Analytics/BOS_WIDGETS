{"tx_hash": "KtfiSskfBHkx1ZZaqZKz3Mp8gkLdvh4qn5zxU5yyNy3", "action_id_social": "CpH9wZZXAbiS3ijxwF4C4xEya8Crr5iEqSBAu6hf3877-0-widget", "block_id": 104705052, "block_timestamp": "2023-11-01T18:14:14.872Z", "signer_id": "nearcon23.near", "widget_name": "Mobile.Home.Send", "source_code": "const theme = props.theme;\nconst accountId = props.accountId || context.accountId;\nconst ownerId = \"nearcon23.near\";\nconst apiUrl =\n  \"https://gqqkd7l7mk.execute-api.us-east-1.amazonaws.com/mainnet/api/v1\";\nconst splitSubstring = \".nearcon23.near\";\n\nconst receiverId = props.receiverId || context.receiverId;\n\nconst [loading, setLoading] = useState(false);\nconst [value, setValue] = useState(null);\n\nconst Container = styled.div`\n   width: 100%;\n   padding-top:30px;\n`;\nconst Content = styled.div`\n   width: 100%;\n   display: flex;\n   flex-direction: column;\n   justify-content: center;\n   align-items: center;\n  gap:20px;\n  padding-left: 20px;\n  padding-right : 20px;\n`;\nconst Input = styled.input`\n    width: 100%;\n    font-size: 64px;\n    font-weight: 600;\n\n    margin: 0;\n    text-align: center;\n    border: none;\n    outline: none;\n\n    ::placeholder {\n        font-size: 64px !important;\n        font-weight: 600;\n    }\n\n    ::-webkit-outer-spin-button,\n    ::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    [type=number] {\n      -moz-appearance: textfield;\n    }\n\n`;\n\nconst Button = styled.button`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  padding: 10px 20px;\n  min-width: 10.625em;\n  gap: 0.5em;\n  border: 1px solid #00ec97;\n  border-radius: 50px;\n  background: #00ec97;\n  color: #11181c;\n  font-style: normal;\n  font-weight: 600;\n  font-size: 18px;\n  text-align: center;\n  white-space: nowrap;\n  transition: all 0.3s ease-in-out;\n  font-family: Mona Sans;\n\n  width:100%;\n  height:  48px;\n\n  &:hover,\n  &:focus,\n  &:active {\n    text-decoration: none;\n    background: #11181c;\n    border: 1px solid #11181c;\n    color: #fff;\n  }\n`;\n\nconst DisabledButton = styled.div`\n display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  padding: 10px 20px;\n  min-width: 10.625em;\n  gap: 0.5em;\n  opacity:0.5;\n  border: 1px solid #00ec97;\n  border-radius: 50px;\n  background: #00ec97;\n  color: #11181c;\n  font-family: Mona Sans;\n  font-style: normal;\n  font-weight: 600;\n  font-size: 18px;\n  text-align: center;\n  white-space: nowrap;\n  transition: all 0.3s ease-in-out;\n\n  width:100%;\n  height:  48px;\n`;\n\nconst Button2 = styled.button`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  padding: 10px 20px;\n  min-width: 10.625em;\n  gap: 0.5em;\n  border: 1px solid #00ec97;\n  border-radius: 50px;\n  background: #00ec97;\n  color: #11181c;\n  font-style: normal;\n  font-weight: 600;\n  font-family: Mona Sans;\n  font-size: 18px;\n  text-align: center;\n  white-space: nowrap;\n  transition: all 0.3s ease-in-out;\n\n  width:100%;\n\n  &:hover,\n  &:focus,\n  &:active {\n    text-decoration: none;\n    background: #11181c;\n    border: 1px solid #11181c;\n    color: #00000099;\n  }\n`;\n\nfunction isPositiveFloatOrEmpty(value) {\n  const regex = /^(?:\\d+\\.\\d*|\\.\\d+|\\d+)?$/;\n  return regex.test(value);\n}\n\nconst { secretkey } = props;\nconst storedSecretKey = Storage.get(\n  \"newPrivateKey\",\n  `${ownerId}/widget/Ticket.Page`\n)\n  ? Storage.get(\"newPrivateKey\", `${ownerId}/widget/Ticket.Page`)\n  : Storage.get(\"newPrivateKey\", `${ownerId}/widget/RegisterMobile.Index`);\nconst key = secretkey ? secretkey : storedSecretKey;\nconst fetchData = () => {\n  asyncFetch(`${apiUrl}/accounts/auth/${key}`).then(({ body }) => {\n    State.update({ userData: body });\n  });\n};\n\nuseEffect(() => {\n  fetchData();\n}, [secretkey, storedSecretKey]);\n\nif (state.redirectToSuccess) {\n  return (\n    <Redirect\n      to={`/${ownerId}/widget/Mobile.Home.SendSuccess?receiverId=${receiverId}&amount=${value}`}\n    />\n  );\n}\n\nconst isValid = () => {\n  const balance = state?.userData?.balance\n    ? parseFloat(state?.userData?.balance)\n    : 0;\n  if (balance >= parseFloat(value)) {\n    return true;\n  }\n  return false;\n};\n\nconst ComponentToRender = isValid() ? Button : DisabledButton;\n\nfunction splitStringAtSubstring(str, substring) {\n  const splitIndex = str?.indexOf?.(substring);\n  if (splitIndex === -1) {\n    // Substring not found, return the original string in an array\n    return [str];\n  }\n\n  // Split the string into the part before the substring and the substring with the rest\n  return [str?.substring?.(0, splitIndex), str?.substring?.(splitIndex)];\n}\n\n// Test the function\nconst originalString = receiverId;\nconst result = splitStringAtSubstring(originalString, splitSubstring);\n\nreturn (\n  <>\n    <Widget\n      props={{\n        nearconId: state.userData.nearconId,\n        cid: state.userData.cid,\n      }}\n      src={`${ownerId}/widget/Navbar`}\n    />\n    <Container>\n      <Content>\n        <h4\n          style={{\n            fontFamily: \"FK Grotesk\",\n            fontWeight: 500,\n            color: theme.textColor3,\n            textAlign: \"center\",\n          }}\n        >\n          To{\" \"}\n          <span style={{ color: theme.textColor }}>\n            {result[0]}\n            <span style={{ color: \"#868682\" }}>{result[1]}</span>\n          </span>\n        </h4>\n\n        <div\n          style={{\n            borderRadius: 8,\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n\n            aspectRatio: 3 / 1,\n          }}\n        >\n          <Input\n            inputmode=\"numeric\"\n            pattern=\"[0-9]*\"\n            type=\"number\"\n            placeholder=\"0\"\n            value={value}\n            onChange={(e) => {\n              let value = e.target.value;\n              let formattedValue = parseFloat(value);\n\n              if (isNaN(formattedValue) && formattedValue < 0) {\n                formattedValue = \"\";\n              } else {\n                formattedValue = formattedValue.toString();\n              }\n\n              setValue(formattedValue);\n            }}\n          />\n\n          <h3\n            style={{\n              fontSize: 24,\n              fontWeight: 500,\n              margin: 0,\n              color: \"#00EC97\",\n            }}\n          >\n            NCON\n          </h3>\n        </div>\n\n        <ComponentToRender\n          disabled={loading}\n          onClick={() => {\n            if (isValid()) {\n              setLoading(true);\n              console.log(state.userData);\n              asyncFetch(`${apiUrl}/accounts/transfer`, {\n                body: JSON.stringify({\n                  accountId: state.userData.nearconId,\n                  secretKey: key,\n                  sendTo: receiverId,\n                  amount: `${parseFloat(value)}`,\n                }),\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n                method: \"POST\",\n              }).then((res) => {\n                const { body } = res;\n                const { newPrivateKey, newPublicKey, accountId } = body;\n                Storage.set(\"newPrivateKey\", newPrivateKey);\n                Storage.set(\"newPublicKey\", newPublicKey);\n                Storage.set(\"accountId\", accountId);\n                State.update({\n                  redirectToSuccess: true,\n                });\n                setLoading(false);\n              });\n            }\n          }}\n        >\n          {loading ? (\n            <div class=\"spinner-border text-light\" role=\"status\">\n              <span class=\"visually-hidden\">Loading...</span>\n            </div>\n          ) : (\n            \"Send\"\n          )}\n        </ComponentToRender>\n\n        <Link to={`/mobile`}>\n          <Button2\n            style={{\n              backgroundColor: \"#FFFFFF\",\n              color: \"#000000 !important\",\n              border: \"none\",\n            }}\n          >\n            Cancel\n          </Button2>\n        </Link>\n\n        <p\n          style={{\n            color: \"#90908C\",\n            fontFamily: \"Mona Sans\",\n            fontSize: 12,\n            fontStyle: \"normal\",\n            fontWeight: 400,\n            lineHeight: 1.5,\n\n            textAlign: \"center\",\n          }}\n        >\n          All NCON expire at the end of the conference <br /> and are worth no\n          monetary value.\n        </p>\n      </Content>\n    </Container>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearcon23.near/widget/Mobile.Home.Send", "fact_widget_deployments_id": "09315849fb6faaccf162aeb21bf67357", "inserted_timestamp": "2023-11-01T20:19:39.597Z", "modified_timestamp": "2023-11-01T20:19:39.597Z", "__row_index": 4}