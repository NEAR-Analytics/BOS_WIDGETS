{"tx_hash": "2f2P6zvcSMo6Pn1FEJ6Q1igueqhamVs5EvMnbbHAuX2F", "action_id_social": "EqkaYG1XsDJdbgcGasxUgwVB9wCo6g4HXfN8wRaDCmpp-0-widget", "block_id": 116869840, "block_timestamp": "2024-04-15T03:02:22.451Z", "signer_id": "docs.bos-workspace.near", "widget_name": "PR.adapter.github", "source_code": "const USERNAME = \"nearbuilders\"; // this could come from bos-workspace aliases...\nconst REPOSITORY = \"bos-workspace-docs\";\nconst BRANCH = \"develop\";\nconst GITHUB_TOKEN = \"YOUR_GITHUB_TOKEN\";\nconst PATH_PREFIX = \"md\";\n// Function to construct a GitHub API URL given a file path in a repository\nconst githubUrl = (path) =>\n  `https://raw.githubusercontent.com/${USERNAME}/${REPOSITORY}/${BRANCH}/${PATH_PREFIX}/${path}`;\n// Function to retrieve data from GitHub given a file path\nfunction get(path) {\n  const res = fetch(githubUrl(path), {});\n  if (!res.ok) {\n    throw {\n      status: res.status,\n      message: `Failed to fetch ${path}: ${res.status} ${res.statusText}`,\n    };\n  } else {\n    return res.body;\n  }\n}\n// Function to create and upload data to GitHub, returning a promise with the URL of the uploaded content\nfunction create(path, data) {\n  // Added path to the parameters\n  return new Promise((resolve, reject) => {\n    if (data.length) {\n      const content = btoa(data); // Convert data to Base64 for GitHub API\n      asyncFetch(githubUrl(path), {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/vnd.github.v3+json\", // Set Accept header to expect JSON responses\n          Authorization: `token ${GITHUB_TOKEN}`, // Authorization header with your GitHub token\n          \"Content-Type\": \"application/json\", // Set the Content-Type header\n        },\n        body: JSON.stringify({\n          message: `Upload ${path}`, // Commit message\n          content: content, // Base64 encoded content\n        }),\n      })\n        .then((response) => response.json()) // Parse the JSON response\n        .then((data) => {\n          if (data.content && data.content.html_url) {\n            resolve({ url: data.content.html_url }); // Resolve the promise with the HTML URL of the new content\n          } else {\n            throw new Error(\"Invalid response from GitHub\");\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error in create function:\", error);\n          reject(error); // Reject the promise in case of an error\n        });\n    } else {\n      reject(\"No data provided\"); // Reject the promise if no data is provided\n    }\n  });\n}\n// Return the get and create functions for use elsewhere\nreturn { get, create };\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/docs.bos-workspace.near/widget/PR.adapter.github", "fact_widget_deployments_id": "c32eda54db071ec723232c68bc783c90", "inserted_timestamp": "2024-04-15T05:22:37.742Z", "modified_timestamp": "2024-04-15T05:22:37.742Z", "__row_index": 0}