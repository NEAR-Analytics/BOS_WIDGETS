{"tx_hash": "J9D2WLPbauybyqUz2hVxxw2TycupddQssJULazs1VgHZ", "action_id_social": "ePk6qD4qvYmEdBQkWJCdqJUYPuDYyjH2h2ZPTEdp59o-0-widget", "block_id": 107839907, "block_timestamp": "2023-12-13T12:06:47.361Z", "signer_id": "hooksdemo.near", "widget_name": "Test.TaskTracker", "source_code": "const Container = styled.div`\n  width: 500px;\n  margin: 50px auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 10px;\n  font-size: 16px;\n`;\n\nconst Button = styled.button`\n  padding: 8px 16px;\n  font-size: 14px;\n  margin-left: 5px;\n  cursor: pointer;\n  background-color: rgba(\n    135,\n    206,\n    250,\n    0.7\n  ); /* Sky Blue with alpha for glass effect */\n  color: black;\n  transition: 0.3s ease-in-out;\n  border: none;\n  border-radius: 4px;\n  backdrop-filter: blur(5px); /* Glassy effect */\n\n  &:hover {\n    background-color: rgba(135, 206, 250, 0.9); /* Darker shade on hover */\n  }\n`;\n\nconst TaskList = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nconst TaskItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 10px 0;\n`;\n\nconst TotalCount = styled.div`\n  margin-top: 20px;\n  font-size: 18px;\n`;\n\nconst [tasks, setTasks] = useState([]);\nconst [newTask, setNewTask] = useState(\"\");\nconst [editedTask, setEditedTask] = useState({ index: null, text: \"\" });\nconst [totalCount, setTotalCount] = useState(0);\n\n// useEffect to update total count when tasks change\nuseEffect(() => {\n  console.log(\"here\");\n  setTotalCount(tasks.length);\n}, [tasks]);\n\n// useCallback to memoize the add task function\nconst addTask = useCallback(() => {\n  if (newTask.trim() !== \"\") {\n    setTasks((prevTasks) => [...prevTasks, newTask]);\n    setNewTask(\"\");\n  }\n}, [newTask]);\n\n// useCallback to memoize the remove task function\nconst removeTask = useCallback((index) => {\n  setTasks((prevTasks) => prevTasks.filter((_, i) => i !== index));\n  setEditedTask({ index: null, text: \"\" }); // Reset edited task if removing\n}, []);\n\n// useCallback to memoize the edit task function\nconst editTask = useCallback(() => {\n  if (editedTask.index !== null && editedTask.text.trim() !== \"\") {\n    setTasks((prevTasks) =>\n      prevTasks.map((task, i) =>\n        i === editedTask.index ? editedTask.text : task\n      )\n    );\n    setEditedTask({ index: null, text: \"\" }); // Reset edited task after editing\n  }\n}, [editedTask]);\n\n// useMemo to memoize the total count text\nconst totalCountText = useMemo(\n  () => `Total Tasks: ${totalCount}`,\n  [totalCount]\n);\n\nreturn (\n  <Container>\n    <h2>Task Tracker</h2>\n    <Input\n      type=\"text\"\n      placeholder=\"Enter a new task\"\n      value={newTask}\n      onChange={(e) => setNewTask(e.target.value)}\n    />\n    <Button onClick={addTask}>Add Task</Button>\n    <TaskList>\n      {tasks.map((task, index) => (\n        <TaskItem key={index}>\n          {editedTask.index === index ? (\n            <Input\n              type=\"text\"\n              value={editedTask.text}\n              onChange={(e) => setEditedTask({ index, text: e.target.value })}\n            />\n          ) : (\n            <span>{task}</span>\n          )}\n          <div>\n            {editedTask.index !== index && (\n              <Button onClick={() => setEditedTask({ index, text: task })}>\n                Edit\n              </Button>\n            )}\n            <Button onClick={() => removeTask(index)}>Remove</Button>\n          </div>\n        </TaskItem>\n      ))}\n    </TaskList>\n    {editedTask.index !== null && (\n      <Button onClick={editTask}>Save Changes</Button>\n    )}\n    <TotalCount>{totalCountText}</TotalCount>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hooksdemo.near/widget/Test.TaskTracker", "fact_widget_deployments_id": "1b520e6b4de18f6338c85cc3a6dd38cd", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}