{"tx_hash": "2NaUVcJqBTYjQevANfTomJQbzABgEckcpchhokPwWFE6", "action_id_social": "iMqeijDW84MHhFToi9ab7qnNjvsAKjrSYWx6iijZd4m-0-widget", "block_id": 114968700, "block_timestamp": "2024-03-18T17:40:44.198Z", "signer_id": "megha19.near", "widget_name": "devhub.entity.post.List", "source_code": "// This component implementation was forked from [IndexFeed], but it does not fully implement lazy loading.\n// While this component uses InfiniteScroll, it still loads the whole list of Post IDs in one view call.\n// The contract will need to be extended with pagination support, yet, even in the current state the page loads much faster.\n// [IndexFeed]: https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/IndexFeed\n\nconst { href } = VM.require(\"megha19.near/widget/core.lib.url\");\n\nconst { draftState, onDraftStateChange } = VM.require(\n  \"megha19.near/widget/devhub.entity.post.draft\"\n);\n\nif (!href) {\n  return <p>Loading modules...</p>;\n}\n\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\n\nconst queryName =\n  props.queryName ?? `bo_near_devhub_v36_posts_with_latest_snapshot`;\nconst totalQueryName =\n  props.totalQueryName ??\n  \"bo_near_devhub_v36_posts_with_latest_snapshot_aggregate\";\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\n    ${queryName}(\n      limit: $limit\n      offset: $offset\n      order_by: {ts: desc}\n      where: $where\n    ) {\n      post_id\n    }\n  }\n`;\n\nconst totalQuery = `query DevhubTotalPostsQuery($where: ${queryName}_bool_exp = {}) {\n  ${totalQueryName}(\n      where: $where\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(QUERYAPI_ENDPOINT, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": `bo_near` },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n}\n\nfunction searchConditionChanged() {\n  return (\n    props.author != state.author ||\n    props.term != state.term ||\n    props.tag != state.tag ||\n    props.recency != state.recency\n  );\n}\n\nfunction updateSearchCondition() {\n  State.update({\n    author: props.author,\n    term: props.term,\n    tag: props.tag,\n    recency: props.recency,\n    loading: true,\n  });\n}\n\nconst initialRenderLimit = props.initialRenderLimit ?? 3;\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\n\nState.init({\n  period: \"week\",\n  totalItems: 0,\n  displayCount: initialRenderLimit,\n});\n\nfunction getPostIds(tag, offset) {\n  if (searchConditionChanged()) {\n    updateSearchCondition();\n  }\n  let where = {};\n  let authorId = props.author;\n  let label = tag || props.tag;\n  if (authorId) {\n    where = { author_id: { _eq: authorId }, ...where };\n  }\n  if (props.term) {\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\n  }\n  if (label) {\n    if (typeof label === \"string\") {\n      // Handle a single label\n      where = { labels: { _contains: label }, ...where };\n    } else if (Array.isArray(label)) {\n      // Handle an array of labels\n      where = {\n        labels: {\n          _containsAny: label,\n        },\n        ...where,\n      };\n    }\n  }\n  if (!props.recency) {\n    // show only top level posts\n    where = { parent_id: { _is_null: true }, ...where };\n  }\n\n  // Don't show blog and devhub-test posts\n  where = {\n    _and: [\n      {\n        _not: {\n          labels: { _contains: \"blog\" },\n          parent_id: { _is_null: true },\n          post_type: { _eq: \"Comment\" },\n        },\n      },\n      {\n        _not: {\n          labels: { _contains: \"devhub-test\" },\n        },\n      },\n    ],\n    ...where,\n  };\n\n  if (!offset) {\n    fetchGraphQL(totalQuery, \"DevhubTotalPostsQuery\", {\n      where,\n    }).then((result) => {\n      const data = result.body.data[totalQueryName];\n      State.update({\n        totalItems: data.aggregate.count,\n      });\n    });\n  }\n\n  fetchGraphQL(query, \"DevhubPostsQuery\", {\n    limit: 50,\n    offset: offset ?? 0,\n    where,\n  }).then((result) => {\n    if (result.status === 200) {\n      if (result.body.data) {\n        const data = result.body.data[queryName];\n        if (offset) {\n          State.update({\n            postIds: state.postIds.concat(data.map((p) => p.post_id)),\n            loading: false,\n          });\n        } else {\n          State.update({\n            postIds: data.map((p) => p.post_id),\n            loading: false,\n          });\n        }\n      }\n    } else {\n      State.update({ loading: false });\n    }\n  });\n}\n\nif (!state.items || searchConditionChanged()) {\n  getPostIds();\n}\n\nfunction defaultRenderItem(postId, additionalProps) {\n  if (!additionalProps) {\n    additionalProps = {};\n  }\n  // It is important to have a non-zero-height element as otherwise InfiniteScroll loads too many items on initial load\n  return (\n    <div className=\"py-2\" style={{ minHeight: \"150px\" }}>\n      <Widget\n        src={\"megha19.near/widget/devhub.entity.post.Post\"}\n        props={{\n          id: postId,\n          expandable: true,\n          defaultExpanded: false,\n          isInList: true,\n          draftState,\n          isPreview: false,\n          onDraftStateChange,\n          ...additionalProps,\n          referral: postId,\n          updateTagInParent: (tag) => {\n            if (typeof props.updateTagInput === \"function\") {\n              props.updateTagInput(tag);\n            }\n            getPostIds(tag);\n          },\n          transactionHashes: props.transactionHashes,\n        }}\n      />\n    </div>\n  );\n}\n\nconst renderItem = props.renderItem ?? defaultRenderItem;\n\nconst cachedRenderItem = (item, i) => {\n  if (props.term) {\n    return renderItem(item, {\n      searchKeywords: [props.term],\n    });\n  }\n\n  const key = JSON.stringify(item);\n\n  if (!(key in state.cachedItems)) {\n    state.cachedItems[key] = renderItem(item);\n    State.update();\n  }\n  return state.cachedItems[key];\n};\n\nconst ONE_DAY = 60 * 60 * 24 * 1000;\nconst ONE_WEEK = 60 * 60 * 24 * 1000 * 7;\nconst ONE_MONTH = 60 * 60 * 24 * 1000 * 30;\n\nfunction getHotnessScore(post) {\n  //post.id - shows the age of the post, should grow exponentially, since newer posts are more important\n  //post.likes.length - linear value\n  const age = Math.pow(post.id, 5);\n  const comments = post.comments;\n  const commentAge = comments.reduce((sum, age) => sum + Math.pow(age, 5), 0);\n  const totalAge = age + commentAge;\n  //use log functions to make likes score and exponentially big age score close to each other\n  return Math.log10(post.likes.length) + Math.log(Math.log10(totalAge));\n}\n\nconst getPeriodText = (period) => {\n  let text = \"Last 24 hours\";\n  if (period === \"week\") {\n    text = \"Last week\";\n  }\n  if (period === \"month\") {\n    text = \"Last month\";\n  }\n  return text;\n};\n\nlet postIds = state.postIds ?? null;\n\nconst loader = (\n  <div className=\"loader\" key={\"loader\"}>\n    <span\n      className=\"spinner-grow spinner-grow-sm me-1\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />\n    Loading ...\n  </div>\n);\n\nif (postIds === null) {\n  return loader;\n}\nconst initialItems = postIds;\n\nconst jInitialItems = JSON.stringify(initialItems);\nif (state.jInitialItems !== jInitialItems) {\n  // const jIndex = JSON.stringify(index);\n  // if (jIndex !== state.jIndex) {\n  State.update({\n    jIndex,\n    jInitialItems,\n    items: initialItems,\n    cachedItems: {},\n  });\n}\n\nconst makeMoreItems = () => {\n  State.update({\n    displayCount: state.displayCount + addDisplayCount,\n  });\n  if (\n    state.items.length - state.displayCount < addDisplayCount * 5 &&\n    !state.loading\n  ) {\n    State.update({ loading: true });\n    getPostIds(null, state.items.length);\n  }\n};\n\nconst items = state.items ? state.items.slice(0, state.displayCount) : [];\nconst renderedItems = items.map(cachedRenderItem);\n\nconst Head =\n  props.recency == \"hot\" ? (\n    <div class=\"row\">\n      <div class=\"fs-5 col-6 align-self-center\">\n        <i class=\"bi-fire\"></i>\n        <span>Hottest Posts</span>\n      </div>\n      <div class=\"col-6 dropdown d-flex justify-content-end\">\n        <a\n          class=\"btn btn-secondary dropdown-toggle\"\n          href=\"#\"\n          role=\"button\"\n          id=\"dropdownMenuLink\"\n          data-bs-toggle=\"dropdown\"\n          aria-expanded=\"false\"\n        >\n          {getPeriodText(state.period)}\n        </a>\n\n        <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\">\n          <li>\n            <button\n              class=\"dropdown-item\"\n              onClick={() => {\n                State.update({ period: \"day\" });\n              }}\n            >\n              {getPeriodText(\"day\")}\n            </button>\n          </li>\n          <li>\n            <button\n              class=\"dropdown-item\"\n              onClick={() => {\n                State.update({ period: \"week\" });\n              }}\n            >\n              {getPeriodText(\"week\")}\n            </button>\n          </li>\n          <li>\n            <button\n              class=\"dropdown-item\"\n              onClick={() => {\n                State.update({ period: \"month\" });\n              }}\n            >\n              {getPeriodText(\"month\")}\n            </button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  ) : (\n    <></>\n  );\n\nreturn (\n  <>\n    {Head}\n    {state.loading ? loader : null}\n    {is_edit_or_add_post_transaction ? (\n      <p class=\"text-secondary mt-4\">\n        Post {transaction_method_name == \"edit_post\" ? \"edited\" : \"added\"}{\" \"}\n        successfully. Back to{\" \"}\n        <Link\n          style={{\n            color: \"#3252A6\",\n          }}\n          className=\"fw-bold\"\n          to={href({\n            widgetSrc: \"megha19.near/widget/app\",\n            params: { page: \"feed\" },\n          })}\n        >\n          feed\n        </Link>\n      </p>\n    ) : state.items.length > 0 ? (\n      <div style={{ overflow: \"auto\", height: \"60vh\" }}>\n        <InfiniteScroll\n          pageStart={0}\n          loadMore={makeMoreItems}\n          hasMore={state.totalItems > state.items.length}\n          loader={loader}\n          useWindow={false}\n        >\n          {renderedItems}\n        </InfiniteScroll>\n      </div>\n    ) : (\n      <p class=\"text-secondary\">\n        No posts{\" \"}\n        {props.term || props.tag || props.author ? \"matches search\" : \"\"}\n        {props.recency === \"hot\"\n          ? \" in \" + getPeriodText(state.period).toLowerCase()\n          : \"\"}\n      </p>\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/megha19.near/widget/devhub.entity.post.List", "fact_widget_deployments_id": "fc2160a919537130e7a9efb723599d2a", "inserted_timestamp": "2024-03-18T19:26:38.597Z", "modified_timestamp": "2024-03-18T19:26:38.597Z", "__row_index": 11}