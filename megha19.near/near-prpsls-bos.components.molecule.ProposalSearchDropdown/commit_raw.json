{"tx_hash": "HkiRp7NJqrsdgUwnwGiVvnYAr2E9oKMR3DjNyoFjxuiR", "action_id_social": "HYFsWNAc9cSX1t6qU71JofyFpE8qqYmMhmZvwKuGzoMg-0-widget", "block_id": 118356671, "block_timestamp": "2024-05-06T09:23:13.153Z", "signer_id": "megha19.near", "widget_name": "near-prpsls-bos.components.molecule.ProposalSearchDropdown", "source_code": "/*\nLicense: MIT\nAuthor: devhub.near\nHomepage: https://github.com/NEAR-DevHub/near-prpsls-bos#readme\n*/\n/* INCLUDE: \"includes//common.jsx\" */\nconst REPL_DEVHUB = \"devhub.near\";\nconst REPL_INFRASTRUCTURE_COMMITTEE = \"megha19.near\";\nconst REPL_INFRASTRUCTURE_COMMITTEE_CONTRACT = \"truedove38.near\";\nconst REPL_RPC_URL = \"https://rpc.mainnet.near.org\";\nconst REPL_NEAR = \"near\";\nconst RFPImage =\n  \"https://ipfs.near.social/ipfs/bafkreicbygt4kajytlxij24jj6tkg2ppc2dw3dlqhkermkjjfgdfnlizzy\";\n\nconst TIMELINE_STATUS = {\n  ACCEPTING_SUBMISSIONS: \"ACCEPTING_SUBMISSIONS\",\n  EVALUATION: \"EVALUATION\",\n  PROPOSAL_SELECTED: \"PROPOSAL_SELECTED\",\n  CANCELLED: \"CANCELLED\",\n};\n/* END_INCLUDE: \"includes//common.jsx\" */\nconst { href } = VM.require(`${REPL_DEVHUB}/widget/core.lib.url`);\nhref || (href = () => {});\n\nconst linkedProposals = props.linkedProposals;\nconst whereClause = props.whereClause;\nconst onChange = props.onChange;\nconst [selectedProposals, setSelectedProposals] = useState(linkedProposals);\nconst [proposalsOptions, setProposalsOptions] = useState([]);\nconst [searchProposalId, setSearchProposalId] = useState(\"\");\n// TODO: UPDATE QUERY FOR RFP (AFTER INDEXER IS BUILT)\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql`;\nconst queryName =\n  \"thomasguntenaar_near_devhub_proposals_quebec_proposals_with_latest_snapshot\";\nconst query = `query GetLatestSnapshot($offset: Int = 0, $limit: Int = 10, $where: ${queryName}_bool_exp = {}) {\n${queryName}(\n  offset: $offset\n  limit: $limit\n  order_by: {proposal_id: desc}\n  where: $where\n) {\n  name\n  proposal_id\n}\n}`;\n\nuseEffect(() => {\n  if (JSON.stringify(linkedProposals) !== JSON.stringify(selectedProposals)) {\n    setSelectedProposals(linkedProposals);\n  }\n}, [linkedProposals]);\n\nuseEffect(() => {\n  if (JSON.stringify(linkedProposals) !== JSON.stringify(selectedProposals)) {\n    onChange(selectedProposals);\n  }\n}, [selectedProposals]);\n\nfunction separateNumberAndText(str) {\n  const numberRegex = /\\d+/;\n\n  if (numberRegex.test(str)) {\n    const number = str.match(numberRegex)[0];\n    const text = str.replace(numberRegex, \"\").trim();\n    return { number: parseInt(number), text };\n  } else {\n    return { number: null, text: str.trim() };\n  }\n}\n\nconst buildWhereClause = () => {\n  let where = whereClause;\n  const { number, text } = separateNumberAndText(searchProposalId);\n\n  if (number) {\n    where = { proposal_id: { _eq: number }, ...where };\n  }\n\n  if (text) {\n    where = { name: { _ilike: `%${text}%` }, ...where };\n  }\n\n  return where;\n};\n\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(QUERYAPI_ENDPOINT, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": `thomasguntenaar_near` },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n}\n\nconst fetchProposals = () => {\n  const FETCH_LIMIT = 30;\n  const variables = {\n    limit: FETCH_LIMIT,\n    offset: 0,\n    where: buildWhereClause(),\n  };\n  fetchGraphQL(query, \"GetLatestSnapshot\", variables).then(async (result) => {\n    if (result.status === 200) {\n      if (result.body.data) {\n        const proposalsData =\n          result.body.data\n            .thomasguntenaar_near_devhub_proposals_quebec_proposals_with_latest_snapshot;\n\n        const data = [];\n        for (const prop of proposalsData) {\n          data.push({\n            label: \"# \" + prop.proposal_id + \" : \" + prop.name,\n            value: prop.proposal_id,\n          });\n        }\n        setProposalsOptions(data);\n      }\n    }\n  });\n};\n\nuseEffect(() => {\n  fetchProposals();\n}, [searchProposalId]);\n\nreturn (\n  <>\n    <div\n      className={\n        \"d-flex flex-column gap-2 \" + (selectedProposals.length > 0 && \" mb-2\")\n      }\n    >\n      {selectedProposals.map((proposal) => {\n        return (\n          <div className=\"d-flex gap-2 align-items-center\">\n            <a\n              className=\"text-decoration-underline flex-1\"\n              href={href({\n                widgetSrc: `${REPL_DEVHUB}/widget/near-prpsls-bos.components.pages.app`,\n                params: {\n                  page: \"proposal\",\n                  id: proposal.value,\n                },\n              })}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {proposal.label}\n            </a>\n            <div\n              className=\"cursor-pointer\"\n              onClick={() => {\n                const updatedLinkedProposals = selectedProposals.filter(\n                  (item) => item.value !== proposal.value\n                );\n                setSelectedProposals(updatedLinkedProposals);\n              }}\n            >\n              <i class=\"bi bi-trash3-fill\"></i>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n\n    <Widget\n      src={`${REPL_DEVHUB}/widget/devhub.components.molecule.DropDownWithSearch`}\n      props={{\n        selectedValue: \"\",\n        onChange: (v) => {\n          if (!selectedProposals.some((item) => item.value === v.value)) {\n            setSelectedProposals([...selectedProposals, v]);\n          }\n        },\n        options: proposalsOptions,\n        showSearch: true,\n        searchInputPlaceholder: \"Search by Id\",\n        defaultLabel: \"Search proposals\",\n        searchByValue: true,\n        onSearch: (value) => {\n          setSearchProposalId(value);\n        },\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/megha19.near/widget/near-prpsls-bos.components.molecule.ProposalSearchDropdown", "fact_widget_deployments_id": "be0b50d3886901a0a03330ee36eb0bb6", "inserted_timestamp": "2024-05-06T10:40:50.150Z", "modified_timestamp": "2024-05-06T10:40:50.150Z", "__row_index": 0}