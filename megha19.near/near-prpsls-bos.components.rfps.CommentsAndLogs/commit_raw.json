{"tx_hash": "FEovgwLZynHuBj8zjmhHA5UJSVXPrZeC9SnPoCmjpQhb", "action_id_social": "3kbX8fBHzoDmeXxvBpq8V59UKxCTtFjmkhbxTN2aGoBZ-0-widget", "block_id": 118356587, "block_timestamp": "2024-05-06T09:21:36.133Z", "signer_id": "megha19.near", "widget_name": "near-prpsls-bos.components.rfps.CommentsAndLogs", "source_code": "/*\nLicense: MIT\nAuthor: devhub.near\nHomepage: https://github.com/NEAR-DevHub/near-prpsls-bos#readme\n*/\n/* INCLUDE: \"includes//common.jsx\" */\nconst REPL_DEVHUB = \"devhub.near\";\nconst REPL_INFRASTRUCTURE_COMMITTEE = \"infrastructure-committee.near\";\nconst REPL_INFRASTRUCTURE_COMMITTEE_CONTRACT = \"truedove38.near\";\nconst REPL_RPC_URL = \"https://rpc.mainnet.near.org\";\nconst REPL_NEAR = \"near\";\nconst RFPImage =\n  \"https://ipfs.near.social/ipfs/bafkreicbygt4kajytlxij24jj6tkg2ppc2dw3dlqhkermkjjfgdfnlizzy\";\n\nconst TIMELINE_STATUS = {\n  ACCEPTING_SUBMISSIONS: \"ACCEPTING_SUBMISSIONS\",\n  EVALUATION: \"EVALUATION\",\n  PROPOSAL_SELECTED: \"PROPOSAL_SELECTED\",\n  CANCELLED: \"CANCELLED\",\n};\n/* END_INCLUDE: \"includes//common.jsx\" */\n\nconst snapshotHistory = props.snapshotHistory;\n\nconst Wrapper = styled.div`\n  position: relative;\n  .log-line {\n    position: absolute;\n    left: 7%;\n    top: -30px;\n    bottom: 0;\n    z-index: 1;\n    width: 1px;\n    background-color: var(--bs-border-color);\n    z-index: 1;\n  }\n\n  .text-wrap {\n    overflow: hidden;\n    white-space: normal;\n  }\n\n  .fw-bold {\n    font-weight: 600 !important;\n  }\n\n  .inline-flex {\n    display: inline-flex !important;\n    align-items: center !important;\n    gap: 0.25rem !important;\n  }\n\n  @media screen and (max-width: 768px) {\n    .inline-flex {\n      display: -webkit-inline-box !important;\n    }\n  }\n`;\n\nconst CommentContainer = styled.div`\n  border: 1px solid lightgrey;\n  overflow: auto;\n`;\n\nconst Header = styled.div`\n  position: relative;\n  background-color: #f4f4f4;\n  height: 50px;\n\n  .menu {\n    position: absolute;\n    right: 10px;\n    top: 4px;\n    font-size: 30px;\n  }\n`;\n\n// check snapshot history all keys and values for differences\nfunction getDifferentKeysWithValues(obj1, obj2) {\n  return Object.keys(obj1)\n    .filter((key) => {\n      if (key !== \"editor_id\" && obj2.hasOwnProperty(key)) {\n        const value1 = obj1[key];\n        const value2 = obj2[key];\n\n        if (typeof value1 === \"object\" && typeof value2 === \"object\") {\n          return JSON.stringify(value1) !== JSON.stringify(value2);\n        } else if (Array.isArray(value1) && Array.isArray(value2)) {\n          return JSON.stringify(value1) !== JSON.stringify(value2);\n        } else {\n          return value1 !== value2;\n        }\n      }\n      return false;\n    })\n    .map((key) => ({\n      key,\n      originalValue: obj1[key],\n      modifiedValue: obj2[key],\n    }));\n}\n\nState.init({\n  data: null,\n  socialComments: null,\n  changedKeysListWithValues: null,\n});\n\nfunction sortTimelineAndComments() {\n  const comments = Social.index(\"comment\", props.item);\n\n  if (state.changedKeysListWithValues === null) {\n    const changedKeysListWithValues = snapshotHistory\n      .slice(1)\n      .map((item, index) => {\n        const startingPoint = snapshotHistory[index]; // Set comparison to the previous item\n        return {\n          editorId: item.editor_id,\n          ...getDifferentKeysWithValues(startingPoint, item),\n        };\n      });\n    State.update({ changedKeysListWithValues });\n  }\n\n  // sort comments and timeline logs by time\n  const snapShotTimeStamp = Array.isArray(snapshotHistory)\n    ? snapshotHistory.map((i) => {\n        return { blockHeight: null, timestamp: parseFloat(i.timestamp / 1e6) };\n      })\n    : [];\n\n  const commentsTimeStampPromise = Array.isArray(comments)\n    ? Promise.all(\n        comments.map((item) => {\n          return asyncFetch(\n            `https://api.near.social/time?blockHeight=${item.blockHeight}`\n          ).then((res) => {\n            const timeMs = parseFloat(res.body);\n            return {\n              blockHeight: item.blockHeight,\n              timestamp: timeMs,\n            };\n          });\n        })\n      ).then((res) => res)\n    : Promise.resolve([]);\n\n  commentsTimeStampPromise.then((commentsTimeStamp) => {\n    const combinedArray = [...snapShotTimeStamp, ...commentsTimeStamp];\n    combinedArray.sort((a, b) => a.timestamp - b.timestamp);\n    State.update({ data: combinedArray, socialComments: comments });\n  });\n}\n\nsortTimelineAndComments();\nconst Comment = ({ commentItem }) => {\n  const { accountId, blockHeight } = commentItem;\n  const item = {\n    type: \"social\",\n    path: `${accountId}/post/comment`,\n    blockHeight,\n  };\n  const content = JSON.parse(Social.get(item.path, blockHeight) ?? \"null\");\n  const link = `https://near.social/${REPL_INFRASTRUCTURE_COMMITTEE}/widget/near-prpsls-bos.components.pages.app?page=rfp&id=${props.id}&accountId=${accountId}&blockHeight=${blockHeight}`;\n  const hightlightComment =\n    parseInt(props.blockHeight ?? \"\") === blockHeight &&\n    props.accountId === accountId;\n\n  return (\n    <div style={{ zIndex: 99, background: \"white\" }}>\n      <div className=\"d-flex gap-2 flex-1\">\n        <div className=\"d-none d-sm-flex\">\n          <Widget\n            src={`${REPL_DEVHUB}/widget/devhub.entity.proposal.Profile`}\n            props={{\n              accountId: accountId,\n            }}\n          />\n        </div>\n        <CommentContainer\n          style={{ border: hightlightComment ? \"2px solid black\" : \"\" }}\n          className=\"rounded-2 flex-1\"\n        >\n          <Header className=\"d-flex gap-3 align-items-center p-2 px-3\">\n            <div className=\"text-muted\">\n              <Link href={`/near/widget/ProfilePage?accountId=${accountId}`}>\n                <span className=\"fw-bold text-black\">{accountId}</span>\n              </Link>\n              commented \uff65{\" \"}\n              <Widget\n                src={`${REPL_NEAR}/widget/TimeAgo`}\n                props={{\n                  blockHeight: blockHeight,\n                }}\n              />\n            </div>\n            {context.accountId && (\n              <div className=\"menu\">\n                <Widget\n                  src={`${REPL_NEAR}/widget/Posts.Menu`}\n                  props={{\n                    accountId: accountId,\n                    blockHeight: blockHeight,\n                    contentPath: `/post/comment`,\n                    contentType: \"comment\",\n                  }}\n                />\n              </div>\n            )}\n          </Header>\n          <div className=\"p-2 px-3\">\n            <Widget\n              src={`${REPL_DEVHUB}/widget/devhub.components.molecule.MarkdownViewer`}\n              props={{\n                text: content.text,\n              }}\n            />\n\n            <div className=\"d-flex gap-2 align-items-center mt-4\">\n              <Widget\n                src={`${REPL_DEVHUB}/widget/devhub.entity.proposal.LikeButton`}\n                props={{\n                  item: item,\n                  notifyAccountId: accountId,\n                }}\n              />\n              <Widget\n                src={`${REPL_NEAR}/widget/CopyUrlButton`}\n                props={{\n                  url: link,\n                }}\n              />\n            </div>\n          </div>\n        </CommentContainer>\n      </div>\n    </div>\n  );\n};\n\nfunction capitalizeFirstLetter(string) {\n  const updated = string.replace(\"_\", \" \");\n  return updated.charAt(0).toUpperCase() + updated.slice(1).toLowerCase();\n}\n\nfunction parseTimelineKeyAndValue(timeline, originalValue, modifiedValue) {\n  const oldValue = originalValue[timeline];\n  const newValue = modifiedValue[timeline];\n  switch (timeline) {\n    case \"status\":\n      return (\n        oldValue !== newValue && (\n          <span className=\"inline-flex\">\n            moved RFP from{\" \"}\n            <Widget\n              src={`${REPL_INFRASTRUCTURE_COMMITTEE}/widget/near-prpsls-bos.components.rfps.StatusTag`}\n              props={{\n                timelineStatus: oldValue,\n              }}\n            />\n            to{\" \"}\n            <Widget\n              src={`${REPL_INFRASTRUCTURE_COMMITTEE}/widget/near-prpsls-bos.components.rfps.StatusTag`}\n              props={{\n                timelineStatus: newValue,\n              }}\n            />\n            stage\n          </span>\n        )\n      );\n\n    default:\n      return null;\n  }\n}\n\nconst AccountProfile = ({ accountId }) => {\n  return (\n    <span className=\"inline-flex fw-bold text-black\">\n      <Widget\n        src={`${REPL_DEVHUB}/widget/devhub.entity.proposal.Profile`}\n        props={{\n          accountId: accountId,\n          size: \"sm\",\n          showAccountId: true,\n        }}\n      />\n    </span>\n  );\n};\n\nconst parseProposalKeyAndValue = (key, modifiedValue, originalValue) => {\n  switch (key) {\n    case \"name\":\n      return <span>changed title</span>;\n    case \"summary\":\n    case \"description\":\n      return <span>changed {key}</span>;\n    case \"labels\":\n      return <span>changed labels to {(modifiedValue ?? []).join(\", \")}</span>;\n    // TODO\n    case \"linked_proposals\":\n      return <span>updated linked proposals</span>;\n    case \"timeline\": {\n      const modifiedKeys = Object.keys(modifiedValue);\n      const originalKeys = Object.keys(originalValue);\n      return modifiedKeys.map((i, index) => {\n        const text = parseTimelineKeyAndValue(i, originalValue, modifiedValue);\n        return (\n          text && (\n            <span key={index} className=\"inline-flex\">\n              {text}\n              {text &&\n                originalKeys.length > 1 &&\n                index < modifiedKeys.length - 1 &&\n                \"\uff65\"}\n            </span>\n          )\n        );\n      });\n    }\n    default:\n      return null;\n  }\n};\n\nconst LogIconContainer = styled.div`\n  margin-left: 50px;\n  z-index: 99;\n\n  @media screen and (max-width: 768px) {\n    margin-left: 10px;\n  }\n`;\n\nconst Log = ({ timestamp }) => {\n  const updatedData = useMemo(\n    () =>\n      state.changedKeysListWithValues.find((obj) =>\n        Object.values(obj).some(\n          (value) =>\n            value && parseFloat(value.modifiedValue / 1e6) === timestamp\n        )\n      ),\n    [state.changedKeysListWithValues, timestamp]\n  );\n\n  const editorId = updatedData.editorId;\n  const valuesArray = Object.values(updatedData ?? {});\n  // if valuesArray length is 2 that means it only has timestamp and editorId\n  if (!updatedData || valuesArray.length === 2) {\n    return <></>;\n  }\n\n  return valuesArray.map((i, index) => {\n    if (i.key && i.key !== \"timestamp\") {\n      return (\n        <LogIconContainer\n          className=\"d-flex gap-3 align-items-center\"\n          key={index}\n        >\n          <img\n            src=\"https://ipfs.near.social/ipfs/bafkreiffqrxdi4xqu7erf46gdlwuodt6dm6rji2jtixs3iionjvga6rhdi\"\n            height={30}\n          />\n          <div\n            className={\n              \"flex-1 gap-1 w-100 text-wrap text-muted align-items-center \" +\n              (i.key === \"timeline\" &&\n              Object.keys(i.originalValue ?? {}).length > 1\n                ? \"\"\n                : \"inline-flex\")\n            }\n          >\n            <span className=\"inline-flex fw-bold text-black\">\n              <AccountProfile accountId={editorId} showAccountId={true} />\n            </span>\n            {parseProposalKeyAndValue(i.key, i.modifiedValue, i.originalValue)}\n            \uff65\n            <Widget\n              src={`${REPL_NEAR}/widget/TimeAgo`}\n              props={{\n                blockTimestamp: timestamp * 1000000,\n              }}\n            />\n          </div>\n        </LogIconContainer>\n      );\n    }\n  });\n};\n\nif (Array.isArray(state.data)) {\n  return (\n    <Wrapper>\n      <div\n        className=\"log-line\"\n        style={{ height: state.data.length > 2 ? \"110%\" : \"150%\" }}\n      ></div>\n      <div className=\"d-flex flex-column gap-4\">\n        {state.data.map((i, index) => {\n          if (i.blockHeight) {\n            const item = state.socialComments.find(\n              (t) => t.blockHeight === i.blockHeight\n            );\n            return <Comment commentItem={item} />;\n          } else {\n            return <Log timestamp={i.timestamp} key={index} />;\n          }\n        })}\n      </div>\n    </Wrapper>\n  );\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/megha19.near/widget/near-prpsls-bos.components.rfps.CommentsAndLogs", "fact_widget_deployments_id": "8ba5c2bd34ef92025050846cdbcd8761", "inserted_timestamp": "2024-05-06T10:40:50.150Z", "modified_timestamp": "2024-05-06T10:40:50.150Z", "__row_index": 1}