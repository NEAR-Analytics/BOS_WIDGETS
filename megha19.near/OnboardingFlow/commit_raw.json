{"tx_hash": "FdaM4ARb34dcpEj71nBfQJ9r6oww2c3xHwzuok9WwjLL", "action_id_social": "HCTB19pD5Q3ESaYpUSgrAzTipmWua6R6iNev9M2yHwFo-0-widget", "block_id": 112328345, "block_timestamp": "2024-02-07T19:25:07.843Z", "signer_id": "megha19.near", "widget_name": "OnboardingFlow", "source_code": "const { Modal, Button, ProgressState } = VM.require(\n  \"buildhub.near/widget/components\"\n) || {\n  Modal: () => <></>,\n  Button: () => <></>,\n  ProgressState: () => <></>,\n};\n\nconst DaoSDK = VM.require(\"sdks.near/widget/SDKs.Sputnik.DaoSDK\");\n\nconst stepsArray = [1, 2, 3];\n\nif (!DaoSDK) {\n  return <></>;\n}\nconst daoID = \"build.sputnik-dao.near\";\nconst sdk = DaoSDK(daoID);\n\nconst groupMembers = sdk.getMembersByGroupId({ groupId: \"community\" }) ?? [];\n\nconst StorageKey = {\n  userCompletedOnboarding: \"userCompletedOnboarding\",\n};\n\nfunction onFollow(accountId) {\n  const data = {\n    graph: { follow: { [accountId]: \"\" } },\n    index: {\n      graph: JSON.stringify({\n        key: \"follow\",\n        value: {\n          type,\n          accountId: accountId,\n        },\n      }),\n      notify: JSON.stringify({\n        key: accountId,\n        value: {\n          type,\n        },\n      }),\n    },\n  };\n\n  Social.set(data, {\n    force: true,\n  });\n}\n\nconst PostTemplate = `\ud83d\udc4b Hey BuildDAO community! Thrilled to join this innovative space. Looking forward to connecting with like-minded individuals. What's your favorite aspect of BuildDAO?`;\n\nfunction OnboardingFlow() {\n  const userCompletedOnboarding = Storage.privateGet(\n    StorageKey.userCompletedOnboarding\n  );\n  const [showModal, setShowModal] = useState(false);\n  const [step, setStep] = useState(1);\n\n  const daofollowEdge = Social.keys(\n    `${context.accountId}/graph/follow/${daoID}`,\n    undefined,\n    {\n      values_only: true,\n    }\n  );\n  const userAlreadyFollowDao =\n    daofollowEdge && Object.keys(daofollowEdge).length > 0;\n  console.log(\"Caleddd\", context.accountId, userCompletedOnboarding);\n  useEffect(() => {\n    if (context.accountId && !userCompletedOnboarding) {\n      setShowModal(true);\n    } else {\n      setShowModal(false);\n    }\n  }, [userCompletedOnboarding]);\n\n  useEffect(() => {\n    if (step > 3) {\n      setShowModal(false);\n      Storage.privateSet(StorageKey.userCompletedOnboarding, true);\n    }\n  }, [step]);\n\n  const Wrapper = styled.div`\n    color: white;\n    font-size: 14px;\n    .text-muted {\n      color: #cdd0d5 !important;\n    }\n    .horizontal-line {\n      background-color: rgba(255, 255, 255, 0.2);\n      height: 1px;\n      width: 40px;\n    }\n  `;\n\n  const Container = styled.div`\n    border-radius: 16px;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n\n    .fw-bold {\n      color: #fff !important;\n    }\n  `;\n\n  const FollowBtn = ({ isFollowing, accountId }) => {\n    return (\n      <Button\n        disabled={isFollowing}\n        variant=\"outline\"\n        onClick={() => onFollow(accountId)}\n      >\n        {isFollowing ? \"Following\" : \"Follow\"}\n      </Button>\n    );\n  };\n\n  const accountsNotFollowed =\n    Array.isArray(groupMembers) &&\n    groupMembers.filter((account) => {\n      const accountfollowEdge = Social.keys(\n        `${context.accountId}/graph/follow/${account}`,\n        undefined,\n        {\n          values_only: true,\n        }\n      );\n      if (accountfollowEdge && Object.keys(accountfollowEdge).length > 0) {\n        return false;\n      }\n      return true;\n    });\n\n  function getRandomAccounts() {\n    const shuffled = [...accountsNotFollowed].sort(() => 0.5 - Math.random());\n    return shuffled;\n  }\n\n  const StepsComponent = () => {\n    switch (step) {\n      case 1:\n        return (\n          <div className=\"d-flex flex-column gap-3\">\n            <h3>Welcome!</h3>\n            <div>\n              <p className=\"text-muted\">First off, follow our DAO</p>\n              <Container className=\"d-flex justify-content-between align-items-center py-3 px-4\">\n                <Widget\n                  src=\"mob.near/widget/Profile.ShortInlineBlock\"\n                  props={{ accountId: daoID }}\n                />\n                <FollowBtn\n                  accountId={daoID}\n                  isFollowing={userAlreadyFollowDao}\n                />\n              </Container>\n            </div>\n          </div>\n        );\n      case 2:\n        return (\n          <div className=\"d-flex flex-column gap-3\">\n            <h3>Connect with others!</h3>\n            <div className=\"text-muted\">\n              <p>\n                Follow interesting profiles and stay updated with the latest\n                discussions. <br />\n                So far, we have {groupMembers?.length} members in the Build DAO\n                community.\n              </p>\n              <p>People you might want to follow</p>\n\n              {getRandomAccounts()\n                .slice(0, 4)\n                ?.map((account) => (\n                  <Container className=\"d-flex justify-content-between align-items-center my-3 py-3 px-4\">\n                    <div style={{ maxWidth: \"70%\" }}>\n                      <Widget\n                        src=\"mob.near/widget/Profile.ShortInlineBlock\"\n                        props={{ accountId: account }}\n                      />\n                    </div>\n                    <FollowBtn accountId={account} isFollowing={false} />\n                  </Container>\n                ))}\n            </div>\n          </div>\n        );\n      case 3:\n        return (\n          <div className=\"d-flex flex-column gap-3\">\n            <h3>Make Your Mark in BuildDAO</h3>\n            <div>\n              <p className=\"text-muted\">\n                Exciting times! <br />\n                Your application is under review.\n                <br /> Show your presence in the community with your first post.\n                <br />\n                Need inspiration?\n              </p>\n              <h6>Suggested First Post</h6>\n              <Widget\n                loading={\n                  <div\n                    className=\"placeholder-glow h-100 w-100\"\n                    style={{ height: 300 }}\n                  ></div>\n                }\n                src=\"buildhub.near/widget/Compose\"\n                props={{\n                  template: PostTemplate,\n                  requiredHashtags: requiredHashtags,\n                  postBtnText: \"Create Your First Post\",\n                }}\n              />\n            </div>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <Wrapper>\n      <Modal\n        open={showModal}\n        title={\"\"}\n        onOpenChange={() => {}}\n        hideCloseBtn={true}\n      >\n        <div className=\"d-flex flex-column gap-4 justify-content-center\">\n          <div className=\"d-flex align-items-center justify-content-center\">\n            {stepsArray.map((item, index) => (\n              <div className=\"d-flex align-items-center\">\n                <ProgressState status={item === step ? \"focused\" : \"default\"}>\n                  {item}\n                </ProgressState>\n                {index !== stepsArray.length - 1 && (\n                  <div className=\"horizontal-line\"></div>\n                )}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"text-center mb-4\">\n            <img\n              src=\"https://ipfs.near.social/ipfs/bafkreihbwho3qfvnu4yss3eh5jrx6uxhrlzdgtdjyzyjrpa6odro6wdxya\"\n              width={180}\n            />\n          </div>\n          <div style={{ width: \"500px\" }}>\n            <StepsComponent />\n          </div>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              setStep(step + 1);\n            }}\n          >\n            {step === 3 ? \"Finish\" : \"Next\"}\n          </Button>\n          {step > 1 && (\n            <Button variant=\"outline\" onClick={() => setStep(step - 1)}>\n              Previous\n            </Button>\n          )}\n        </div>\n      </Modal>\n    </Wrapper>\n  );\n}\n\nreturn OnboardingFlow(props);\n", "metadata": {"fork_of": "megha19.near/widget/OnboardingFlow@112327986"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/megha19.near/widget/OnboardingFlow", "fact_widget_deployments_id": "26636dc1188e8807f45962fd892aaf51", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}