{"tx_hash": "D8LGPmZTRVHqHd4gcacQmqCsba2nyX2h6nCFBUHede9g", "action_id_social": "47faKTpURp6RohK2RbE6fQeaJH1e8L2RBmJPMZzEihDg-0-widget", "block_id": 108089545, "block_timestamp": "2023-12-16T13:05:26.978Z", "signer_id": "megha19.near", "widget_name": "devhub.entity.addon.github.Configurator", "source_code": "const { widget } = VM.require(\"megha19.near/widget/core.lib.url\");\nconst Struct = VM.require(\"megha19.near/widget/core.lib.struct\");\n\nif (!Struct) {\n  return <p>Loading modules...</p>;\n}\nconst { updateCommunityGithub, useQuery } = VM.require(\n  \"megha19.near/widget/core.adapter.devhub-contract\"\n);\nconst { uuid, withUUIDIndex } = VM.require(\n  \"megha19.near/widget/core.lib.uuid\"\n);\n\nuuid || (uuid = () => {});\nwithUUIDIndex || (withUUIDIndex = () => {});\nuseQuery || (useQuery = () => {});\nupdateCommunityGithub || (updateCommunityGithub = () => {});\n\nconst useForm = ({ initialValues, stateKey, uninitialized }) => {\n  const initialFormState = {\n    hasUnsubmittedChanges: false,\n    values: initialValues ?? {},\n  };\n\n  const formState = state[stateKey] ?? null,\n    isSynced = Struct.isEqual(formState?.values ?? {}, initialFormState.values);\n\n  const formReset = () =>\n    State.update((lastKnownComponentState) => ({\n      ...lastKnownComponentState,\n      [stateKey]: initialFormState,\n      hasUnsubmittedChanges: false,\n    }));\n\n  const formUpdate =\n    ({ path, via: customFieldUpdate, ...params }) =>\n    (fieldInput) => {\n      const transformFn = (node) => {\n        if (typeof customFieldUpdate === \"function\") {\n          return customFieldUpdate({\n            input: fieldInput?.target?.value ?? fieldInput,\n            lastKnownValue: node,\n            params,\n          });\n        } else {\n          return Struct.defaultFieldUpdate({\n            input: fieldInput?.target?.value ?? fieldInput,\n            lastKnownValue: node,\n            params,\n          });\n        }\n      };\n      const updatedValues = Struct.deepFieldUpdate(\n        formState?.values ?? {},\n        path, // Pass the path directly\n        (node) => transformFn(node)\n      );\n\n      State.update((lastKnownComponentState) => ({\n        ...lastKnownComponentState,\n        [stateKey]: {\n          hasUnsubmittedChanges: !Struct.isEqual(\n            updatedValues,\n            initialFormState.values\n          ),\n          values: updatedValues,\n        },\n      }));\n    };\n\n  if (\n    !uninitialized &&\n    (formState === null || (!formState.hasUnsubmittedChanges && !isSynced))\n  ) {\n    formReset();\n  }\n\n  return {\n    ...(formState ?? initialFormState),\n    isSynced,\n    reset: formReset,\n    stateKey,\n    update: formUpdate,\n  };\n};\n\nconst AttractableDiv = styled.div`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst settings = {\n  maxColumnsNumber: 20,\n};\n\nconst GithubKanbanBoardTicketFeaturesSchema = {\n  id: { label: \"GitHub ID\" },\n  author: { label: \"Author\" },\n  labels: { label: \"Labels\" },\n  type: { label: \"Type\" },\n};\n\nconst GithubKanbanBoardTicketTypesSchema = {\n  Issue: { label: \"Issue\" },\n  PullRequest: { label: \"Pull Request\" },\n};\n\nconst GithubKanbanBoardDefaults = {\n  columns: {},\n  dataTypesIncluded: { Issue: false, PullRequest: true },\n  description: \"\",\n  repoURL: \"\",\n  ticketState: \"all\",\n  title: \"\",\n\n  metadata: {\n    id: uuid(),\n    type: \"github.kanban_board\",\n\n    ticket: {\n      type: \"github.kanban_ticket\",\n      features: { id: true, author: true, labels: true, type: true },\n    },\n  },\n};\n\nconst toMigrated = ({ metadata, id, ...restParams }) => ({\n  metadata: {\n    ...GithubKanbanBoardDefaults.metadata,\n    ...metadata,\n    id: id ?? metadata.id,\n  },\n\n  ...restParams,\n});\n\nconst GithubViewConfigurator = ({ communityHandle, link, permissions }) => {\n  State.init({\n    editingMode: \"form\",\n    isActive: false,\n  });\n\n  const community = useQuery(\"community\", { handle: communityHandle });\n\n  const data = Object.values(\n    ((community?.data?.github ?? null) === null\n      ? {}\n      : JSON.parse(community.data.github)\n    )?.kanbanBoards ?? {}\n  )[0];\n\n  const form = useForm({\n    initialValues: Struct.typeMatch(data) ? toMigrated(data) : {},\n    stateKey: \"github-form\",\n    uninitialized: !Struct.typeMatch(data),\n  });\n\n  const isViewInitialized = (form.values.metadata.id ?? null) !== null;\n\n  const formToggle = (forcedState) =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      isActive: forcedState ?? !lastKnownState.isActive,\n    }));\n\n  const onEditingModeChange = ({ target: { value } }) =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      editingMode: value,\n    }));\n\n  const newViewInit = () =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      board: {\n        hasUnsubmittedChanges: false,\n        values: GithubKanbanBoardDefaults,\n      },\n      isActive: true,\n    }));\n\n  const columnsCreateNew = ({ lastKnownValue }) =>\n    Object.keys(lastKnownValue).length < settings.maxColumnsNumber\n      ? {\n          ...(lastKnownValue ?? {}),\n\n          ...withUUIDIndex({\n            description: \"\",\n            labelSearchTerms: [],\n            title: \"New column\",\n          }),\n        }\n      : lastKnownValue;\n\n  const columnsDeleteById =\n    (id) =>\n    ({ lastKnownValue }) =>\n      Object.fromEntries(\n        Object.entries(lastKnownValue).filter(([columnId]) => columnId !== id)\n      );\n\n  const onCancel = () => {\n    form.reset();\n    formToggle(false);\n  };\n\n  const onSave = () =>\n    updateCommunityGithub({\n      handle: communityHandle,\n\n      github: JSON.stringify({\n        kanbanBoards: { [form.values.metadata.id]: form.values },\n      }),\n    });\n\n  const formElement = isViewInitialized ? (\n    <>\n      <div className=\"d-flex flex-column\">\n        <div className=\"d-flex gap-1 flex-column flex-xl-row\">\n          {widget(\"components.molecule.Input\", {\n            className: \"w-100\",\n            key: `${form.values.metadata.id}-repoURL`,\n            label: \"Repository URL\",\n            onChange: form.update({ path: [\"repoURL\"] }),\n            placeholder: \"https://github.com/example-org/example-repo\",\n            value: form.values.repoURL,\n          })}\n\n          {widget(\"components.molecule.Input\", {\n            className: \"w-100\",\n            key: `${form.values.metadata.id}-title`,\n            label: \"Title\",\n            onChange: form.update({ path: [\"title\"] }),\n            placeholder: \"NEAR Protocol NEPs\",\n            value: form.values.title,\n          })}\n        </div>\n\n        {widget(\"components.molecule.Input\", {\n          className: \"w-100\",\n          key: `${form.values.metadata.id}-description`,\n          label: \"Description\",\n          onChange: form.update({ path: [\"description\"] }),\n          placeholder: \"Latest NEAR Enhancement Proposals by status.\",\n          value: form.values.description,\n        })}\n      </div>\n\n      <div className=\"d-flex gap-4 flex-row flex-wrap justify-content-between\">\n        {widget(\"components.organism.Configurator\", {\n          heading: \"Ticket types\",\n          classNames: { root: \"col-12 col-md-4 h-auto\" },\n          externalState: form.values.dataTypesIncluded,\n          isActive: true,\n          isEmbedded: true,\n          isUnlocked: permissions.can_configure,\n          onChange: form.update({ path: [\"dataTypesIncluded\"] }),\n          schema: GithubKanbanBoardTicketTypesSchema,\n        })}\n\n        <div\n          className={[\n            \"col-12 col-md-3\",\n            \"d-flex gap-3 flex-column justify-content-center p-4\",\n          ].join(\" \")}\n        >\n          <span\n            className=\"d-inline-flex gap-2\"\n            id={`${form.values.metadata.id}-ticketState`}\n          >\n            <i class=\"bi bi-cone-striped\" />\n            <span>Ticket state</span>\n          </span>\n\n          {widget(\"components.molecule.Switch\", {\n            currentValue: form.values.ticketState,\n            key: \"ticketState\",\n            onChange: form.update({ path: [\"ticketState\"] }),\n\n            options: [\n              { label: \"All\", value: \"all\" },\n              { label: \"Open\", value: \"open\" },\n              { label: \"Closed\", value: \"closed\" },\n            ],\n          })}\n        </div>\n\n        {widget(\"components.organism.Configurator\", {\n          heading: \"Card fields\",\n          classNames: { root: \"col-12 col-md-4 h-auto\" },\n          externalState: form.values.metadata.ticket.features,\n          isActive: true,\n          isEmbedded: true,\n          isUnlocked: permissions.can_configure,\n          onChange: form.update({ path: [\"metadata\", \"ticket\", \"features\"] }),\n          schema: GithubKanbanBoardTicketFeaturesSchema,\n        })}\n      </div>\n\n      <div className=\"d-flex align-items-center justify-content-between\">\n        <span className=\"d-inline-flex gap-2 m-0\">\n          <i className=\"bi bi-list-task\" />\n          <span>{`Columns ( max. ${settings.maxColumnsNumber} )`}</span>\n        </span>\n      </div>\n\n      <div className=\"d-flex flex-column align-items-center gap-3 w-100\">\n        {Object.values(form.values.columns ?? {}).map(\n          ({ id, description, labelSearchTerms, title }) => (\n            <AttractableDiv\n              className=\"d-flex gap-3 rounded-4 border p-3 w-100\"\n              key={`column-${id}-configurator`}\n            >\n              <div className=\"d-flex flex-column gap-1 w-100\">\n                {widget(\"components.molecule.Input\", {\n                  className: \"flex-grow-1\",\n                  key: `${form.values.metadata.id}-column-${id}-title`,\n                  label: \"Title\",\n                  onChange: form.update({ path: [\"columns\", id, \"title\"] }),\n                  placeholder: \"\ud83d\udc40 Review\",\n                  value: title,\n                })}\n\n                {widget(\"components.molecule.Input\", {\n                  format: \"comma-separated\",\n                  key: `${form.values.metadata.id}-column-${title}-labelSearchTerms`,\n\n                  label: `Search terms for all the labels\n\t\t\t\t\t\t\t\t\t\t\tMUST be presented in included tickets`,\n\n                  onChange: form.update({\n                    path: [\"columns\", id, \"labelSearchTerms\"],\n                  }),\n\n                  placeholder: \"WG-, draft, review, proposal, ...\",\n                  value: labelSearchTerms.join(\", \"),\n                })}\n\n                {widget(\"components.molecule.Input\", {\n                  className: \"flex-grow-1\",\n                  key: `${form.values.metadata.id}-column-${id}-description`,\n                  label: \"Description\",\n\n                  onChange: form.update({\n                    path: [\"columns\", id, \"description\"],\n                  }),\n\n                  placeholder:\n                    \"NEPs that need a review by Subject Matter Experts.\",\n\n                  value: description,\n                })}\n              </div>\n\n              <div\n                className=\"d-flex flex-column gap-3 border-start p-3 pe-0\"\n                style={{ marginTop: -16, marginBottom: -16 }}\n              >\n                <button\n                  className=\"btn btn-outline-danger\"\n                  onClick={form.update({\n                    path: [\"columns\"],\n                    via: columnsDeleteById(id),\n                  })}\n                  title=\"Delete column\"\n                >\n                  <i className=\"bi bi-trash-fill\" />\n                </button>\n              </div>\n            </AttractableDiv>\n          )\n        )}\n\n        <div className=\"d-flex gap-3 justify-content-end w-100\">\n          {widget(\"components.molecule.Button\", {\n            classNames: {\n              root: \"d-flex btn btn-outline-danger shadow-none border-0\",\n            },\n\n            isHidden: typeof onCancel !== \"function\" || !state.isActive,\n            label: \"Cancel\",\n            onClick: onCancel,\n          })}\n\n          {widget(\"components.molecule.Button\", {\n            classNames: { root: \"btn btn-success\" },\n            disabled: form.isSynced,\n\n            icon: {\n              type: \"svg_icon\",\n              variant: \"floppy_drive\",\n              width: 14,\n              height: 14,\n            },\n\n            isHidden: typeof onSave !== \"function\" || !state.isActive,\n            label: \"Save\",\n            onClick: onSave,\n          })}\n        </div>\n      </div>\n    </>\n  ) : null;\n\n  return community.data === null ? (\n    <div class=\"alert alert-danger\" role=\"alert\">\n      {community.isLoading\n        ? \"Loading...\"\n        : `Community with handle ${communityHandle} not found.`}\n    </div>\n  ) : (\n    <div\n      className=\"d-flex flex-column gap-4 w-100\"\n      style={{ maxWidth: \"100%\" }}\n    >\n      {isViewInitialized ? (\n        <div\n          className={[\n            \"d-flex flex-column gap-4 w-100\",\n            state.isActive ? \"\" : \"d-none\",\n          ].join(\" \")}\n        >\n          <div className=\"d-flex align-items-center justify-content-between gap-3 w-100\">\n            <h5 className=\"h5 d-inline-flex gap-2 m-0\">\n              <i className=\"bi bi-gear-wide-connected\" />\n              <span>GitHub board configuration</span>\n            </h5>\n\n            {widget(\"components.molecule.Switch\", {\n              currentValue: state.editingMode,\n              isHidden: true,\n              key: \"editingMode\",\n              onChange: onEditingModeChange,\n\n              options: [\n                { label: \"Form\", value: \"form\" },\n                { label: \"JSON\", value: \"JSON\" },\n              ],\n\n              title: \"Editing mode selection\",\n            })}\n          </div>\n\n          {state.editingMode === \"form\" ? (\n            formElement\n          ) : (\n            <div className=\"d-flex flex-column flex-grow-1 border-0 bg-transparent w-100\">\n              <textarea\n                className=\"form-control\"\n                disabled\n                rows=\"12\"\n                type=\"text\"\n                value={JSON.stringify(form.values ?? {}, null, \"\\t\")}\n              />\n            </div>\n          )}\n        </div>\n      ) : null}\n\n      {Object.keys(form.values).length > 0 ? (\n        widget(`entity.addon.${form.values.metadata.type}`, {\n          ...form.values,\n          configurationControls: [\n            {\n              label: \"New column\",\n              disabled:\n                Object.keys(form.values.columns).length >=\n                settings.maxColumnsNumber,\n              icon: { type: \"bootstrap_icon\", variant: \"bi-plus-lg\" },\n              onClick: form.update({\n                path: [\"columns\"],\n                via: columnsCreateNew,\n              }),\n            },\n          ],\n          isConfiguratorActive: state.isActive,\n          isSynced: form.isSynced,\n          link,\n          onConfigure: () => formToggle(true),\n          permissions,\n        })\n      ) : (\n        <div\n          className=\"d-flex flex-column align-items-center justify-content-center gap-4\"\n          style={{ height: 384 }}\n        >\n          <h5 className=\"h5 d-inline-flex gap-2 m-0\">\n            This community doesn't have a GitHub board\n          </h5>\n\n          {widget(\"components.molecule.Button\", {\n            icon: { type: \"bootstrap_icon\", variant: \"bi-github\" },\n            isHidden: !permissions.can_configure,\n            label: \"Create GitHub board\",\n            onClick: newViewInit,\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nreturn GithubViewConfigurator(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/megha19.near/widget/devhub.entity.addon.github.Configurator", "fact_widget_deployments_id": "b467ef4c925cc1d18ba0ca94c57bac90", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 45}