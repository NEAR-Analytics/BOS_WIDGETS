{"tx_hash": "7nfJyjHSgArXZhk1PMy65zRevDWxvoN7QM7vhyPs4ahs", "action_id_social": "95s4z9zxMjpfpfDrPnu9nSBUiiG1vybwE9Na9SB7uDGp-0-widget", "block_id": 111516387, "block_timestamp": "2024-01-28T10:17:27.490Z", "signer_id": "megha19.near", "widget_name": "ConnectBuildDao", "source_code": "const { Bullet } = VM.require(\"buildhub.near/widget/components.Bullet\");\nconst DaoSDK = VM.require(\"sdks.near/widget/SDKs.Sputnik.DaoSDK\");\nconst { children, showActivity, className } = props;\n\nif (!DaoSDK) {\n  return <></>;\n}\nconst daoId = \"build.sputnik-dao.near\";\nconst sdk = DaoSDK(daoId);\nconst userAccountId = context.accountId;\n\nconst data = sdk?.checkIsMemberOrPending({\n  accountId: userAccountId,\n  rolesToCheck: [\"community\", \"council\"],\n});\n\nconst connectEdge = Social.keys(\n  `${userAccountId}/graph/connect/${daoId}`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\n\n// get DAO policy, deposit, and group\nconst policy = sdk?.getPolicy();\n\nif (policy === null || data === null) {\n  return \"\";\n}\n\nconst deposit = policy?.proposal_bond;\nconst roleId = \"community\";\n\nconst handleJoin = () => {\n  const connectData = {\n    graph: {\n      connect: {\n        [daoId]: \"\",\n      },\n    },\n    index: {\n      graph: JSON.stringify({\n        key: \"connect\",\n        value: {\n          type: \"connect\",\n          accountId: daoId,\n        },\n      }),\n    },\n    notify: JSON.stringify({\n      key: daoId,\n      value: {\n        type: \"connect\",\n      },\n    }),\n  };\n\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: `add ${accountId} to the ${roleId} group`,\n          kind: {\n            AddMemberToRole: {\n              member_id: accountId,\n              role: roleId,\n            },\n          },\n        },\n      },\n      gas: 219000000000000,\n      deposit: deposit,\n    },\n    {\n      contractName: \"social.near\",\n      methodName: \"set\",\n      deposit: Big(JSON.stringify(connectData).length * 16).mul(\n        Big(10).pow(20)\n      ),\n      args: { data: connectData },\n    },\n  ]);\n};\n\nconst isConnected = Object.keys(connectEdge || {}).length > 0;\n\nconst Container = styled.div`\n  .custom-button {\n    display: flex;\n    padding: 10px 20px;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n\n    border-radius: 8px;\n    background: #ffaf51;\n\n    color: #000;\n    margin: 0;\n\n    /* Other/Button_text */\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n\n    text-decoration: none;\n    transition: all 300ms;\n\n    &:hover {\n      background: #c98a40;\n    }\n  }\n\n  a {\n    @apply custom-button;\n  }\n`;\n\nconst Component = () => {\n  if (data.isDaoMember || isConnected) {\n    if (showActivity) {\n      return (\n        <div className=\"d-flex flex-column align-items-center gap-3\">\n          <Bullet variant=\"light\">\n            {data.isDaoMember ? \"Joined\" : \"Pending application\"}\n          </Bullet>\n          <a href={\"/feed\"}>\n            View Activity{\" \"}\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"16\"\n              height=\"17\"\n              viewBox=\"0 0 16 17\"\n              fill=\"none\"\n            >\n              <path\n                d=\"M10.7809 7.83327L7.2049 4.25726L8.1477 3.31445L13.3332 8.49993L8.1477 13.6853L7.2049 12.7425L10.7809 9.1666H2.6665V7.83327H10.7809Z\"\n                fill=\"black\"\n              />\n            </svg>\n          </a>\n        </div>\n      );\n    }\n    return <></>;\n  } else {\n    return (\n      <button className={className} onClick={handleJoin}>\n        {children}\n      </button>\n    );\n  }\n};\n\nreturn (\n  <Container>\n    <Component />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/megha19.near/widget/ConnectBuildDao", "fact_widget_deployments_id": "bf6df80860140b351fa0e8e6785e02c5", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}