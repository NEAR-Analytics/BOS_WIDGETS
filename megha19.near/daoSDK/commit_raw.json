{"tx_hash": "FATcn6jQxx7angYZoZFZNLTcLkYV4Ya3oLHg2GiUQRtg", "action_id_social": "HXnoHnPrQeyww9EoXCyR5196dnZWDZehFkDnqzYfnUw6-0-widget", "block_id": 111048044, "block_timestamp": "2024-01-22T16:23:32.193Z", "signer_id": "megha19.near", "widget_name": "daoSDK", "source_code": "return (daoId, proposalId, factoryId) => {\n  const DaoSDK = {\n    getDaoVersion: () => {\n      return Near.view(daoId, \"version\");\n    },\n    getPolicy: () => {\n      return Near.view(daoId, \"get_policy\");\n    },\n    getConfig: () => {\n      return Near.view(daoId, \"get_config\");\n    },\n\n    // PROPOSALS\n    getProposalById: ({ proposalId }) => {\n      return Near.view(daoId, \"get_proposal\", {\n        id: parseInt(proposalId),\n      });\n    },\n    getLastProposalId: () => {\n      return Near.view(daoId, \"get_last_proposal_id\");\n    },\n    getProposals: ({ offset, limit }) => {\n      return Near.view(daoId, \"get_proposals\", {\n        from_index: offset,\n        limit: limit,\n      });\n    },\n\n    // ROLES + PERMISSIONS\n    getMembersByGroupId: ({ groupId }) => {\n      const policy = DaoSDK.getPolicy(daoId);\n      return Array.isArray(policy.roles)\n        ? policy?.roles\n            .filter((role) => role.name === groupId)\n            .map((role) => {\n              const group = role.kind.Group;\n              return group;\n            })\n        : [];\n    },\n    getGroupsAndMembers: ({ groupId }) => {\n      const policy = DaoSDK.getPolicy(daoId);\n      const data = [];\n      if (Array.isArray(policy.roles)) {\n        policy.roles.map((role) => {\n          data.push({\n            name: role.name,\n            permissions: role.permissions,\n            members: role.kind.Group,\n          });\n        });\n      }\n      return data; // [{members:{},permissions:{},name:\"\"}]\n    },\n    hasPermission: ({ accountId, permissionType }) => {\n      const isAllowed = false;\n      const policy = DaoSDK.getPolicy(daoId);\n      if (Array.isArray(policy.roles)) {\n        const permissions = policy.roles.map((role) => {\n          if (\n            Array.isArray(role.kind.Group) &&\n            role.kind.Group.includes(accountId)\n          ) {\n            return (\n              role.permissions.includes(`*:${permissionType}`) ||\n              role.permissions.includes(\"*:*\")\n            );\n          }\n        });\n        isAllowed = permissions.some((element) => element === true);\n      }\n      return isAllowed;\n    },\n\n    // BOUNTIES\n    getBountyById: ({ bountyId }) => {\n      return Near.view(daoId, \"get_bounty\", {\n        id: bountyId,\n      });\n    },\n    getBountyNoOfClaims: ({ bountyId }) => {\n      return Near.view(daoId, \"get_bounty_number_of_claims\", {\n        id: bountyId,\n      });\n    },\n    getBountyClaimsByAccountId: ({ accountId }) => {\n      return Near.view(daoId, \"get_bounty_claims\", {\n        account_id: accountId,\n      });\n    },\n\n    // UTILS\n    call: ({ methodName, args, deposit, gas }) => {\n      const policy = DaoSDK.getPolicy();\n      const minDeposit = Big(policy?.proposal_bond);\n      // make sure that the deposit is more/equal than bond amount\n      const finalDeposit = Big(deposit).gt(minDeposit) ? deposit : minDeposit;\n      return Near.call([\n        {\n          contractName: daoId,\n          methodName,\n          args,\n          deposit: deposit,\n          gas: gas,\n        },\n      ]);\n    },\n    voteActions: {\n      VoteApprove: \"VoteApprove\",\n      VoteReject: \"VoteReject\",\n      VoteRemove: \"VoteRemove\",\n    },\n    proposalKinds: {\n      ChangeConfig: \"config\",\n      ChangePolicy: \"policy\",\n      AddMemberToRole: \"add_member_to_role\",\n      RemoveMemberFromRole: \"remove_member_from_role\",\n      FunctionCall: isCongressDaoID ? \"FunctionCall\" : \"call\",\n      UpgradeSelf: \"upgrade_self\",\n      UpgradeRemote: \"upgrade_remote\",\n      Transfer: \"transfer\",\n      SetStakingContract: \"set_vote_token\",\n      AddBounty: \"add_bounty\",\n      BountyDone: \"bounty_done\",\n      Vote: \"vote\",\n      FactoryInfoUpdate: \"factory_info_update\",\n      ChangePolicyAddOrUpdateRole: \"policy_add_or_update_role\",\n      ChangePolicyRemoveRole: \"policy_remove_role\",\n      ChangePolicyUpdateDefaultVotePolicy: \"policy_update_default_vote_policy\",\n      ChangePolicyUpdateParameters: \"policy_update_parameters\",\n      Text: \"Text\",\n      FundingRequest: \"FundingRequest\",\n      RecurrentFundingRequest: \"RecurrentFundingRequest\",\n      DismissAndBan: \"DismissAndBan\",\n    },\n    decodeArgs: ({ args }) => {\n      try {\n        const args64 = args;\n        const jsonArgs = JSON.parse(\n          Buffer.from(args64, \"base64\").toString(\"utf-8\")\n        );\n        return JSON.stringify(jsonArgs, undefined, 2);\n      } catch {\n        return \"failed to deserialize\";\n      }\n    },\n\n    // PROPOSALS\n    addProposal: ({ proposal, deposit, gas }) => {\n      return DaoSDK.call({\n        methodName: \"add_proposal\",\n        args: {\n          proposal,\n        },\n        deposit,\n        gas,\n      });\n    },\n    createDao: ({ daoName, dao_args, deposit, gas }) => {\n      return Near.call([\n        {\n          contractName: \"sputnik-dao.near\",\n          methodName: \"create\",\n          args: {\n            name: daoName,\n            args: dao_args,\n          },\n          deposit,\n          gas,\n        },\n      ]);\n    },\n\n    // SPECIFIC PROPOSALS\n    createAddMemberProposal: ({\n      description,\n      memberId,\n      roleId,\n      gas,\n      deposit,\n    }) => {\n      return DaoSDK.call({\n        methodName: \"add_proposal\",\n        args: {\n          proposal: {\n            description: description,\n            kind: {\n              AddMemberToRole: {\n                member_id: memberId,\n                role: roleId,\n              },\n            },\n          },\n        },\n        deposit,\n        gas,\n      });\n    },\n    createRemoveMemberProposal: ({\n      description,\n      memberId,\n      roleId,\n      gas,\n      deposit,\n    }) => {\n      return DaoSDK.call({\n        methodName: \"add_proposal\",\n        args: {\n          proposal: {\n            description: description,\n            kind: {\n              RemoveMemberFromRole: {\n                member_id: memberId,\n                role: roleId,\n              },\n            },\n          },\n        },\n        deposit,\n        gas,\n      });\n    },\n    createPollProposal: ({ description, gas, deposit }) => {\n      return DaoSDK.call({\n        methodName: \"add_proposal\",\n        args: {\n          proposal: {\n            description: description,\n            kind: \"Vote\",\n          },\n        },\n        deposit,\n        gas,\n      });\n    },\n    createTransferProposal: ({\n      description,\n      token_id,\n      receiver_id,\n      amount,\n      gas,\n      deposit,\n    }) => {\n      return DaoSDK.call({\n        methodName: \"add_proposal\",\n        args: {\n          proposal: {\n            description: description,\n            kind: {\n              Transfer: {\n                token_id,\n                receiver_id,\n                amount,\n              },\n            },\n          },\n        },\n        deposit,\n        gas,\n      });\n    },\n    createBountyProposal: ({ description, bounty, gas, deposit }) => {\n      return DaoSDK.call({\n        methodName: \"add_proposal\",\n        args: {\n          proposal: {\n            description: description,\n            kind: {\n              AddBounty: {\n                bounty,\n              },\n            },\n          },\n        },\n        deposit,\n        gas,\n      });\n    },\n    createSubmitBountyProposal: ({\n      description,\n      bounty,\n      receiver_id,\n      gas,\n      deposit,\n    }) => {\n      return DaoSDK.call({\n        methodName: \"add_proposal\",\n        args: {\n          proposal: {\n            description: description,\n            kind: {\n              BountyDone: {\n                receiver_id: receiver_id,\n                bounty_id: JSON.parse(bounty.id),\n              },\n            },\n          },\n        },\n        deposit,\n        gas,\n      });\n    },\n    createFunctionCallProposal: ({\n      description,\n      method_name,\n      receiver_id,\n      args,\n      proposalGas,\n      proposalDeposit,\n      gas,\n      deposit,\n    }) => {\n      const proposal_args = Buffer.from(JSON.stringify(args), \"utf-8\").toString(\n        \"base64\"\n      );\n      return DaoSDK.call({\n        methodName: \"add_proposal\",\n        args: {\n          proposal: {\n            description: description,\n            kind: {\n              FunctionCall: {\n                receiver_id,\n                actions: [\n                  {\n                    method_name,\n                    args: proposal_args,\n                    deposit: proposalDeposit,\n                    gas: proposalGas,\n                  },\n                ],\n              },\n            },\n          },\n        },\n        deposit,\n        gas,\n      });\n    },\n\n    // VOTE\n    actProposal: ({ proposalId, action, deposit, gas }) => {\n      return DaoSDK.call({\n        methodName: \"act_proposal\",\n        args: {\n          id: proposalId,\n          action,\n        },\n        deposit,\n        gas,\n      });\n    },\n\n    // SPECIFIC VOTE TXN\n    approveProposal: ({ proposalId, deposit, gas }) => {\n      return DaoSDK.call({\n        methodName: \"act_proposal\",\n        args: {\n          id: proposalId,\n          action: DaoSDK.voteActions.VoteApprove,\n        },\n        deposit,\n        gas,\n      });\n    },\n    rejectProposal: ({ proposalId, deposit, gas }) => {\n      return DaoSDK.call({\n        methodName: \"act_proposal\",\n        args: {\n          id: proposalId,\n          action: DaoSDK.voteActions.VoteReject,\n        },\n        deposit,\n        gas,\n      });\n    },\n    removeProposal: ({ proposalId, deposit, gas }) => {\n      return DaoSDK.call({\n        methodName: \"act_proposal\",\n        args: {\n          id: proposalId,\n          action: DaoSDK.voteActions.VoteRemove,\n        },\n        deposit,\n        gas,\n      });\n    },\n\n    // BOUNTIES\n    claimBounty: ({ description, bounty, gas, deposit }) => {\n      return DaoSDK.call({\n        methodName: \"bounty_claim\",\n        args: {\n          id: JSON.parse(bounty.id),\n          deadline: bounty.max_deadline,\n        },\n        deposit,\n        gas,\n      });\n    },\n    unclaimBounty: ({ description, bounty, gas, deposit }) => {\n      return DaoSDK.call({\n        methodName: \"bounty_giveup\",\n        args: {\n          id: JSON.parse(bounty.id),\n        },\n        deposit,\n        gas,\n      });\n    },\n  };\n  return DaoSDK;\n};\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/megha19.near/widget/daoSDK", "fact_widget_deployments_id": "f68a765a4088a180ce46a79904db0b4f", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 22}