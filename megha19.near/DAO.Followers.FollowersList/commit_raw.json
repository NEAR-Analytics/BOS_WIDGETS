{"tx_hash": "4QWMmx64XRQt9wyWf1wax6Si7oYvd3EX8nHTEjGfpqak", "action_id_social": "FuCcHUF8qsfYtwZCGpbwZExaLVeyN5gfyH5uPN56pjJG-0-widget", "block_id": 111351654, "block_timestamp": "2024-01-26T10:04:45.933Z", "signer_id": "megha19.near", "widget_name": "DAO.Followers.FollowersList", "source_code": "const data = props.data;\nconst currentPage = props.page ?? 1;\nconst resPerPage = props.resPerPage ?? 20;\nconst accountId = props.accountId ?? context.accountId;\n\nconst viewTypes = {\n    CARD: \"Card\",\n    LIST: \"List\"\n};\n\nconst viewList = [\n    {\n        label: \"List View\",\n        value: viewTypes.LIST\n    },\n    {\n        label: \"Card View\",\n        value: viewTypes.CARD\n    }\n];\n\nconst filterItems = {\n    EARLIEST: \"Earliest\",\n    LATEST: \"Latest\",\n    ASCENDING: \"Ascending\",\n    DESCENDING: \"Descending\"\n};\n\nconst filterlist = Object.values(filterItems);\n\nState.init({\n    filtersOpen: false,\n    selectedView: viewTypes.CARD,\n    viewModalOpen: false,\n    filters: [],\n    expandedTables: {},\n    isLoading: false,\n    search: \"\",\n    filteredData: [],\n    currentPage: currentPage\n});\n\nconst Wrapper = styled.div`\n    width: 98%;\n\n    a {\n        color: #4498e0;\n        font-size: 0.8rem;\n        font-weight: 600;\n        text-decoration: none;\n\n        &:hover {\n            color: #4498e0cc;\n        }\n    }\n\n    table {\n        font-size: 14px;\n        width: 100%;\n        box-sizing: border-box;\n    }\n\n    th,\n    td {\n        padding: 15px;\n        text-align: left;\n    }\n\n    tr {\n        border-bottom: 1px solid lightgray;\n    }\n\n    thead {\n        border-bottom: 2px solid #4498e0;\n    }\n\n    .icons-color i {\n        color: #4498e0;\n    }\n\n    .danger i {\n        color: rgb(229, 72, 77);\n    }\n\n    .card-view-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n        gap: 1rem;\n    }\n\n    .justify-end {\n        justify-content: end;\n    }\n\n    .text-gray {\n        color: gray;\n    }\n\n    .word-wrap {\n        word-break: break-word;\n    }\n\n    .gap-y-3 {\n        row-gap: 1rem !important;\n    }\n`;\n\nfunction followUser(user, isFollowing) {\n    const dataToSend = {\n        graph: { follow: { [user]: isFollowing ? null : \"\" } },\n        index: {\n            graph: JSON.stringify({\n                key: \"follow\",\n                value: {\n                    type,\n                    accountId: user\n                }\n            }),\n            notify: JSON.stringify({\n                key: user,\n                value: {\n                    type\n                }\n            })\n        }\n    };\n    Social.set(dataToSend, {\n        force: true\n    });\n}\n\nconst FollowBtn = ({ itemDetails }) => {\n    return (\n        <Widget\n            src=\"nearui.near/widget/Input.Button\"\n            props={{\n                children: itemDetails.isUserFollowed ? (\n                    <span>\n                        {state.selectedView !== viewTypes.CARD && \"Unfollow\"}{\" \"}\n                        <i class=\"bi bi-person-dash\"></i>\n                    </span>\n                ) : (\n                    <span>\n                        {state.selectedView !== viewTypes.CARD && \"Follow\"}\n                        <i class=\"bi bi-person-plus\"></i>\n                    </span>\n                ),\n                variant:\n                    (itemDetails.isUserFollowed ? \"danger \" : \"info \") +\n                    (state.selectedView === viewTypes.CARD && \"icon \") +\n                    \" outline\",\n                onClick: () =>\n                    followUser(itemDetails.account, itemDetails.isUserFollowed)\n            }}\n        />\n    );\n};\n\nconst Table = ({ tableData }) => {\n    if (!tableData?.length > 0) {\n        return null;\n    }\n\n    return (\n        <div className=\"ndc-card icons-color my-4 p-4\">\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tableData?.map((item) => {\n                        return (\n                            <tr className=\"word-wrap\">\n                                <td>\n                                    <Widget\n                                        src=\"mob.near/widget/Profile.ShortInlineBlock\"\n                                        props={{\n                                            accountId: item.account,\n                                            tooltip: true\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"d-flex justify-end\">\n                                    <FollowBtn itemDetails={item} />\n                                </td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst UIData =\n    state.filters?.length > 0 || state.search ? state.filteredData : data;\n\nconst currentPageState =\n    state.filters?.length > 0 || state.search ? 1 : state.currentPage;\nlet paginatedFollowers = [];\n\npaginatedFollowers = UIData.slice(\n    (currentPageState - 1) * resPerPage,\n    currentPageState * resPerPage\n);\n\nreturn (\n    <Wrapper>\n        {data?.length === 0 ? (\n            <p className=\"text-gray\">\n                This account doesn't have any followers yet.\n            </p>\n        ) : (\n            <div className=\"d-flex flex-column gap-4\">\n                <div>\n                    <h2 className=\"mb-1\">Followers</h2>\n                    <p className=\"text-gray\">{data.length} followers</p>\n                </div>\n                <div className=\"d-flex gap-2 gap-y-3 flex-wrap\">\n                    <Widget\n                        src=\"nearui.near/widget/Input.ExperimentalText\"\n                        props={{\n                            value: state.search,\n                            placeholder: \"Search by name\",\n                            onChange: (value) => {\n                                const filteredData = [...data];\n                                if (value) {\n                                    filteredData = filteredData?.filter(\n                                        (item) => {\n                                            const searchTerm =\n                                                value.toLowerCase();\n                                            return item.account.includes(\n                                                searchTerm\n                                            );\n                                        }\n                                    );\n                                }\n                                State.update({\n                                    ...state,\n                                    filteredData: filteredData,\n                                    search: value\n                                });\n                            },\n                            icon: (\n                                <i\n                                    className=\"bi bi-search\"\n                                    style={{\n                                        color: \"#4498e0 !important\"\n                                    }}\n                                />\n                            ),\n                            inputProps: {\n                                title: \"Disabled because no API for searching yet\"\n                            }\n                        }}\n                    />\n                    <div className=\"d-flex gap-2 flex-wrap\">\n                        <Widget\n                            src=\"nearui.near/widget/Layout.Popover\"\n                            props={{\n                                triggerComponent: (\n                                    <Widget\n                                        src=\"nearui.near/widget/Input.Button\"\n                                        props={{\n                                            style: {\n                                                color: \"#4498e0\"\n                                            },\n                                            children: (\n                                                <>\n                                                    {state.selectedView} View\n                                                    <i class=\"bi bi-caret-down\"></i>\n                                                </>\n                                            ),\n                                            variant: \"info outline \",\n                                            size: \"md\",\n                                            className: \"\"\n                                        }}\n                                    />\n                                ),\n                                content: (\n                                    <Widget\n                                        src=\"megha19.near/widget/Common.Modals.ViewDropDown\"\n                                        props={{\n                                            viewList: viewList,\n                                            cancel: () => {\n                                                State.update({\n                                                    ...state,\n                                                    selectedView: \"\"\n                                                });\n                                            },\n                                            applyView: (selectedView) => {\n                                                State.update({\n                                                    ...state,\n                                                    selectedView\n                                                });\n                                            },\n                                            selectedView: state.selectedView\n                                        }}\n                                    />\n                                )\n                            }}\n                        />\n\n                        <Widget\n                            src=\"megha19.near/widget/Layout.Modal\"\n                            props={{\n                                open: state.filtersOpen,\n                                onOpenChange: (open) => {\n                                    State.update({\n                                        ...state,\n                                        filtersOpen: open\n                                    });\n                                },\n                                toggle: (\n                                    <Widget\n                                        src=\"nearui.near/widget/Input.Button\"\n                                        props={{\n                                            children: (\n                                                <>\n                                                    Filter\n                                                    <i className=\"bi bi-funnel\"></i>\n                                                </>\n                                            ),\n                                            variant: \"info\",\n                                            size: \"md\"\n                                        }}\n                                    />\n                                ),\n                                content: (\n                                    <Widget\n                                        src=\"megha19.near/widget/Common.Modals.FiltersModal\"\n                                        props={{\n                                            selectedFilters: state.filters,\n                                            groupTypes: filterItems,\n                                            cancel: () => {\n                                                State.update({\n                                                    ...state,\n                                                    filters: [],\n                                                    filtersOpen: false\n                                                });\n                                            },\n                                            applyFilters: (filters) => {\n                                                const filteredData = [...data];\n                                                if (\n                                                    filters?.includes(\n                                                        filterItems.LATEST\n                                                    )\n                                                ) {\n                                                    filteredData.sort(\n                                                        (a, b) =>\n                                                            b.blockHeight -\n                                                            a.blockHeight\n                                                    );\n                                                }\n                                                if (\n                                                    filters?.includes(\n                                                        filterItems.EARLIEST\n                                                    )\n                                                ) {\n                                                    filteredData.sort(\n                                                        (a, b) =>\n                                                            a.blockHeight -\n                                                            b.blockHeight\n                                                    );\n                                                }\n                                                if (\n                                                    filters?.includes(\n                                                        filterItems.ASCENDING\n                                                    )\n                                                ) {\n                                                    filteredData.sort((a, b) =>\n                                                        a.account.localeCompare(\n                                                            b.account\n                                                        )\n                                                    );\n                                                }\n\n                                                if (\n                                                    filters?.includes(\n                                                        filterItems.DESCENDING\n                                                    )\n                                                ) {\n                                                    filteredData.sort((a, b) =>\n                                                        b.account.localeCompare(\n                                                            a.account\n                                                        )\n                                                    );\n                                                }\n\n                                                State.update({\n                                                    ...state,\n                                                    filters: filters,\n                                                    filteredData: filteredData\n                                                });\n                                            },\n                                            filterlist: filterlist\n                                        }}\n                                    />\n                                )\n                            }}\n                        />\n                    </div>\n                </div>\n                {state.isLoading ? (\n                    <div>\n                        <Widget src=\"nearui.near/widget/Feedback.Spinner\" />\n                    </div>\n                ) : (\n                    <div>\n                        {state.selectedView === viewTypes.LIST && (\n                            <Table tableData={paginatedFollowers} />\n                        )}\n                        {state.selectedView === viewTypes.CARD && (\n                            <div className=\"card-view-grid\">\n                                {paginatedFollowers?.map((item) => {\n                                    return (\n                                        <div className=\"ndc-card p-4 d-flex flex-column gap-2\">\n                                            <div className=\"d-flex justify-content-between align-items-center gap-2\">\n                                                <div className=\"text-truncate w-75\">\n                                                    <Widget\n                                                        src=\"mob.near/widget/Profile.ShortInlineBlock\"\n                                                        props={{\n                                                            accountId:\n                                                                item.account,\n                                                            tooltip: true\n                                                        }}\n                                                    />\n                                                </div>\n                                                {accountId !== item.account && (\n                                                    <FollowBtn\n                                                        itemDetails={item}\n                                                    />\n                                                )}\n                                            </div>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        )}\n                    </div>\n                )}\n            </div>\n        )}\n        <div className=\"d-flex justify-content-center align-items-center gap-2 mt-2\">\n            <Widget\n                src=\"nearui.near/widget/Navigation.Paginate\"\n                props={{\n                    pageSize: resPerPage,\n                    currentPage: state.currentPage,\n                    totalPageCount: Math.ceil(UIData.length / resPerPage),\n                    onPageChange: (page) => {\n                        State.update({\n                            currentPage: page\n                        });\n                    },\n                    revaluateOnRender: true\n                }}\n            />\n        </div>\n    </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/megha19.near/widget/DAO.Followers.FollowersList", "fact_widget_deployments_id": "6031268124cb9fe317892d3ab1fe26ae", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}