{"tx_hash": "4QWMmx64XRQt9wyWf1wax6Si7oYvd3EX8nHTEjGfpqak", "action_id_social": "FuCcHUF8qsfYtwZCGpbwZExaLVeyN5gfyH5uPN56pjJG-0-widget", "block_id": 111351654, "block_timestamp": "2024-01-26T10:04:45.933Z", "signer_id": "megha19.near", "widget_name": "DAOs.index", "source_code": "const getFollowedDAOs = (accountId) => {\n  let following = Social.keys(`${accountId}/graph/follow/*`, \"final\", {\n    return_type: \"BlockHeight\",\n  });\n\n  if (following === null) return null;\n\n  following = Object.keys(following[accountId].graph.follow || {}).filter(\n    (account) => account.endsWith(\".sputnik-dao.near\"),\n  );\n  return following;\n};\n\n\nconst { router } = props;\nconst filter = props.filter;\nconst accountId = props.accountId ?? context.accountId ?? \"\";\n\nlet followedDAOs = null;\nif (filter === \"followedDAOs\") {\n  followedDAOs = getFollowedDAOs(accountId);\n  if (followedDAOs === null) return \"\";\n}\n\nconst publicApiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\nconst resPerPage = 10;\n\nconst forgeUrl = (apiUrl, params) =>\n  apiUrl +\n  Object.keys(params)\n    .sort()\n    .reduce((paramString, p) => paramString + `${p}=${params[p]}&`, \"?\");\n\nlet daos = null;\nif (filter === \"followedDAOs\") {\n  daos = followedDAOs.map((dao) => ({\n    contract_id: dao,\n  }));\n} else if (filter === \"myDAOs\") {\n  daos = useCache(\n    () =>\n      // TODO: need better API for this, fetching all members daos is not efficient\n      asyncFetch(forgeUrl(`https://api.pikespeak.ai/daos/members`, {}), {\n        mode: \"cors\",\n        headers: {\n          \"x-api-key\": publicApiKey,\n        },\n      }).then((res) => {\n        return res.body[accountId][\"daos\"].map((dao) => ({\n          contract_id: dao,\n        }));\n      }),\n    \"my-daos-\" + accountId,\n    { subscribe: false },\n  );\n} else if (filter === \"ndcDAOs\") {\n  daos = [\n    \"ndctrust.sputnik-dao.near\",\n    \"gwg.sputnik-dao.near\",\n    \"gwg-stables.sputnik-dao.near\",\n  ].map((dao) => ({\n    contract_id: dao,\n  }));\n} else {\n  daos = fetch(forgeUrl(`https://api.pikespeak.ai/daos/all`, {}), {\n    mode: \"cors\",\n    headers: {\n      \"x-api-key\": publicApiKey,\n      \"cache-control\": \"max-age=86400\", // 1 day\n    },\n  });\n  if (daos === null) return \"\";\n  daos = daos?.body;\n}\n\nconst createDAOLink = \"#/megha19.near/widget/home?page=create-dao\";\n\nconst renderHeader = () => (\n  <div className=\"d-flex justify-content-between gap-2 align-items-center\">\n    <h2 className=\"h2\">DAOs</h2>\n    <Widget\n      src=\"nearui.near/widget/Input.Button\"\n      props={{\n        variant: \"info\",\n        size: \"lg\",\n        buttonProps: {\n          style: {\n            fontWeight: 500,\n          },\n        },\n        children: (\n          <>\n            Create a new DAO\n            <i className=\"bi bi-plus-lg\"></i>\n          </>\n        ),\n        href: createDAOLink,\n      }}\n    />\n  </div>\n);\n\nconst renderDAOs = () => {\n  return (\n    <Widget\n      src=\"megha19.near/widget/DAOs.list\"\n      props={{\n        daos,\n        router,\n      }}\n    />\n  );\n};\n\nreturn (\n  <div>\n    {renderHeader()}\n    {renderDAOs()}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/megha19.near/widget/DAOs.index", "fact_widget_deployments_id": "28551900b1179baef552ca72b537a1b9", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}