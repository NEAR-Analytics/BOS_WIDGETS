{"tx_hash": "BH38idsf6LZ6m6gtcCTSnFiHM18f2pbu1RuU8eBCkh4V", "action_id_social": "AHYpZK8NE2w93Q34J5hieMkhTXYV1VaYL7hQHbjskhbw-0-widget", "block_id": 114278951, "block_timestamp": "2024-03-07T17:34:27.995Z", "signer_id": "megha19.near", "widget_name": "devhub.entity.proposal.CommentsAndLogs", "source_code": "const snapshotHistory = props.snapshotHistory;\n\nconst Wrapper = styled.div`\n  position: relative;\n  .log-line {\n    position: absolute;\n    left: 7%;\n    top: -30px;\n    bottom: 0;\n    z-index: 1;\n    width: 1px;\n    height: 100%;\n    background-color: var(--bs-border-color);\n    z-index: 1;\n  }\n`;\n\nconst CommentContainer = styled.div`\n  border: 1px solid lightgrey;\n`;\n\nconst Header = styled.div`\n  position: relative;\n  background-color: #f4f4f4;\n  height: 50px;\n\n  .menu {\n    position: absolute;\n    right: 10px;\n    top: 4px;\n    font-size: 30px;\n  }\n`;\n\n// check snapshot history all keys and values for differences\nfunction getChangedKeysWithValues(original, modified) {\n  function compareObjects(originalObj, modifiedObj) {\n    const changedKeys = Object.keys(originalObj).reduce((keys, key) => {\n      if (originalObj.hasOwnProperty(key)) {\n        if (\n          typeof originalObj[key] === \"object\" &&\n          !Array.isArray(originalObj[key])\n        ) {\n          return keys.concat(\n            compareObjects(originalObj[key], modifiedObj[key])\n          );\n        } else if (Array.isArray(originalObj[key])) {\n          if (\n            JSON.stringify(originalObj[key]) !==\n            JSON.stringify(modifiedObj[key])\n          ) {\n            keys.push({\n              key,\n              originalValue: originalObj[key],\n              modifiedValue: modifiedObj[key],\n            });\n          }\n        } else {\n          if (originalObj[key] !== modifiedObj[key]) {\n            keys.push({\n              key,\n              originalValue: originalObj[key],\n              modifiedValue: modifiedObj[key],\n            });\n          }\n        }\n      }\n      return keys;\n    }, []);\n    return changedKeys;\n  }\n\n  return compareObjects(original, modified);\n}\n\nState.init({\n  data: null,\n  socialComments: null,\n  changedKeysListWithValues: null,\n});\n\nfunction sortTimelineAndComments() {\n  const comments = Social.index(\"comment\", props.item);\n\n  if (state.changedKeysListWithValues === null) {\n    const changedKeysListWithValues = snapshotHistory\n      .slice(1)\n      .map((item, index) => {\n        const startingPoint = snapshotHistory[index]; // Set comparison to the previous item\n        return {\n          editorId: item.editor_id,\n          ...getChangedKeysWithValues(startingPoint, item),\n        };\n      });\n    State.update({ changedKeysListWithValues });\n  }\n\n  // sort comments and timeline logs by time\n  const snapShotTimeStamp = Array.isArray(snapshotHistory)\n    ? snapshotHistory.map((i) => {\n        return { blockHeight: null, timestamp: parseFloat(i.timestamp / 1e6) };\n      })\n    : [];\n\n  const commentsTimeStampPromise = Array.isArray(comments)\n    ? Promise.all(\n        comments.map((item) => {\n          return asyncFetch(\n            `https://api.near.social/time?blockHeight=${item.blockHeight}`\n          ).then((res) => {\n            const timeMs = parseFloat(res.body);\n            return {\n              blockHeight: item.blockHeight,\n              timestamp: timeMs,\n            };\n          });\n        })\n      ).then((res) => res)\n    : Promise.resolve([]);\n\n  commentsTimeStampPromise.then((commentsTimeStamp) => {\n    const combinedArray = [...snapShotTimeStamp, ...commentsTimeStamp];\n    combinedArray.sort((a, b) => a.timestamp - b.timestamp);\n    State.update({ data: combinedArray, socialComments: comments });\n  });\n}\n\nsortTimelineAndComments();\nconst Comment = ({ commentItem }) => {\n  const { accountId, blockHeight } = commentItem;\n  const item = {\n    type: \"social\",\n    path: `${accountId}/post/comment`,\n    blockHeight,\n  };\n  const content = JSON.parse(Social.get(item.path, blockHeight) ?? \"null\");\n\n  const link = `https://near.org/mob.near/widget/MainPage.N.Comment.Page?accountId=${accountId}&blockHeight=${blockHeight}`;\n  return (\n    <div style={{ zIndex: 99, background: \"white\" }}>\n      <div className=\"d-flex gap-2 flex-1\">\n        <Widget\n          src={\"megha19.near/widget/devhub.entity.proposal.Profile\"}\n          props={{\n            accountId: accountId,\n          }}\n        />\n        <CommentContainer className=\"rounded-2 flex-1\">\n          <Header className=\"d-flex gap-3 align-items-center p-2 px-3\">\n            <div>\n              {accountId} commented\n              <Widget\n                src=\"near/widget/TimeAgo\"\n                props={{\n                  blockHeight: blockHeight,\n                }}\n              />\n            </div>\n            {context.accountId && (\n              <div className=\"menu\">\n                <Widget\n                  src=\"near/widget/Posts.Menu\"\n                  props={{\n                    accountId: accountId,\n                    blockHeight: blockHeight,\n                    contentPath: `/post/comment`,\n                    contentType: \"comment\",\n                  }}\n                />\n              </div>\n            )}\n          </Header>\n          <div className=\"p-2 px-3\">\n            <Widget\n              src={\n                \"megha19.near/widget/devhub.components.molecule.MarkdownViewer\"\n              }\n              props={{\n                text: content.text,\n              }}\n            />\n\n            <div className=\"d-flex gap-2 align-items-center mt-4\">\n              <Widget\n                src=\"near/widget/v1.LikeButton\"\n                props={{\n                  item: item,\n                }}\n              />\n              <Widget\n                src=\"near/widget/CopyUrlButton\"\n                props={{\n                  url: link,\n                }}\n              />\n              <Widget\n                src=\"near/widget/ShareButton\"\n                props={{\n                  postType: \"post\",\n                  url: link,\n                }}\n              />\n            </div>\n          </div>\n        </CommentContainer>\n      </div>\n    </div>\n  );\n};\n\nconst Log = ({ timestamp }) => {\n  const updatedData = state.changedKeysListWithValues.find((obj) => {\n    return Object.values(obj).some((value) => {\n      return value && parseFloat(value.modifiedValue / 1e6) === timestamp;\n    });\n  });\n  if (updatedData) {\n    return (\n      <div\n        style={{ zIndex: 99, background: \"white\", marginLeft: 50 }}\n        className=\"d-flex gap-3 align-items-center\"\n      >\n        <img\n          src=\"https://ipfs.near.social/ipfs/bafkreiffqrxdi4xqu7erf46gdlwuodt6dm6rji2jtixs3iionjvga6rhdi\"\n          height={30}\n        />\n        <div className=\"d-flex gap-2 flex-1\">\n          {updatedData.editorId} changed{\" \"}\n        </div>\n      </div>\n    );\n  }\n};\n\nif (Array.isArray(state.data)) {\n  return (\n    <Wrapper>\n      <div className=\"log-line\"> </div>\n      <div className=\"d-flex flex-column gap-4\">\n        {state.data.map((i) => {\n          if (i.blockHeight) {\n            const item = state.socialComments.find(\n              (t) => t.blockHeight === i.blockHeight\n            );\n            return <Comment commentItem={item} />;\n          } else {\n            // return <Log timestamp={i.timestamp} />;\n          }\n        })}\n      </div>\n    </Wrapper>\n  );\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/megha19.near/widget/devhub.entity.proposal.CommentsAndLogs", "fact_widget_deployments_id": "dc8fb2961f0b134e8c24c64286012857", "inserted_timestamp": "2024-03-07T18:28:08.360Z", "modified_timestamp": "2024-03-07T19:25:51.303Z", "__row_index": 16}