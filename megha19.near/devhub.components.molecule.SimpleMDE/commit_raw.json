{"tx_hash": "DGZS7n1EkYW6uB1BpCDHGZA8TX3Dd77dgxG8qNKVQ1xn", "action_id_social": "6hZvC886YE4ogqHJK7WJTWDsNFjp4YcyrfDm8cvgcVJA-0-widget", "block_id": 117526161, "block_timestamp": "2024-04-24T14:17:09.761Z", "signer_id": "megha19.near", "widget_name": "devhub.components.molecule.SimpleMDE", "source_code": "/**\n * iframe embedding a SimpleMDE component\n * https://github.com/sparksuite/simplemde-markdown-editor\n */\n\nconst data = props.data;\nconst onChange = props.onChange ?? (() => {});\nconst height = props.height ?? \"390\";\nconst className = props.className ?? \"w-100\";\nconst embeddCSS = props.embeddCSS;\n\nState.init({\n  iframeHeight: height,\n  message: props.data,\n});\n\nconst profilesData = Social.get(\"*/profile/name\", \"final\");\nconst followingData = Social.get(\n  `${context.accountId}/graph/follow/**`,\n  \"final\"\n);\n\n// SIMPLEMDE CONFIG //\nconst fontFamily = props.fontFamily ?? \"sans-serif\";\nconst alignToolItems = props.alignToolItems ?? \"right\";\nconst placeholder = props.placeholder ?? \"\";\nconst showAutoComplete = props.showAutoComplete ?? false;\n\nconst code = `\n<!doctype html>\n<html>\n  <head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n  <style>\n  body {  \n      margin: auto;\n      font-family: ${fontFamily};\n      overflow: visible;\n      font-size:14px !important;\n  }\n\n  @media screen and (max-width: 768px) {\n    body {\n      font-size: 12px;\n    }\n  }\n  \n  .cursor-pointer {\n    cursor: pointer;\n  }\n\n  .text-wrap {\n    overflow: hidden;\n    white-space: normal;\n  }\n\n  .dropdown-item:hover{\n    background-color:rgb(0, 236, 151) !important;\n    color:white !important;\n  }\n\n  .editor-toolbar {\n      text-align: ${alignToolItems};\n  }\n\n  ${embeddCSS}\n\n  </style>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css\">\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/highlight.js/latest/styles/github.min.css\">\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65\" crossorigin=\"anonymous\">\n</head>\n<body>\n<div class=\"dropdown\">\n  <button style=\"display: none\" type=\"button\" data-bs-toggle=\"dropdown\">\n    Dropdown button\n  </button>\n\n  <ul class=\"dropdown-menu\" id=\"mentiondropdown\" style=\"position: absolute;\">\n</div>\n</ul>\n\n<textarea></textarea>\n\n<script src=\"https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js\" integrity=\"sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js\" integrity=\"sha384-cuYeSxntonz0PPNlHhBs68uyIAVpIIOZZ5JqeqvYYIcEL727kskC66kF92t6Xl2V\" crossorigin=\"anonymous\"></script>\n<script>\nlet codeMirrorInstance;\nlet isEditorInitialized = false;\nlet followingData = {};\nlet profilesData = {};\nlet showAutocomplete = ${showAutoComplete}\n\nfunction getSuggestedAccounts(term) {\n  let results = [];\n\n  term = (term || \"\").replace(/\\W/g, \"\").toLowerCase();\n  const limit = 5;\n\n  const profiles = Object.entries(profilesData);\n\n  for (let i = 0; i < profiles.length; i++) {\n    let score = 0;\n    const accountId = profiles[i][0];\n    const accountIdSearch = profiles[i][0].replace(/\\W/g, \"\").toLowerCase();\n    const nameSearch = (profiles[i][1]?.profile?.name || \"\")\n      .replace(/\\W/g, \"\")\n      .toLowerCase();\n    const accountIdSearchIndex = accountIdSearch.indexOf(term);\n    const nameSearchIndex = nameSearch.indexOf(term);\n\n    if (accountIdSearchIndex > -1 || nameSearchIndex > -1) {\n      score += 10;\n\n      if (accountIdSearchIndex === 0) {\n        score += 10;\n      }\n      if (nameSearchIndex === 0) {\n        score += 10;\n      }\n      if (followingData[accountId] === \"\") {\n        score += 30;\n      }\n\n      results.push({\n        accountId,\n        score,\n      });\n    }\n  }\n\n  results.sort((a, b) => b.score - a.score);\n  results = results.slice(0, limit);\n\n  return results;\n}\n\n// Initializes SimpleMDE element and attaches to text-area\nconst simplemde = new SimpleMDE({\n  forceSync: true,\n  toolbar: [\n    \"heading\",\n    \"bold\",\n    \"italic\",\n    \"|\", // adding | creates a divider in the toolbar\n    \"quote\",\n    \"code\",\n    \"link\",\n  ],\n  placeholder: \\`${placeholder}\\`,\n  initialValue: \"\",\n  insertTexts: {\n    link: [\"[\", \"]()\"],\n  },\n  spellChecker: false,\n  renderingConfig: {\n\t\tsingleLineBreaks: false,\n\t\tcodeSyntaxHighlighting: true,\n\t},\n});\n\ncodeMirrorInstance = simplemde.codemirror;\n\n/**\n * Sends message to Widget to update content\n */\nconst updateContent = () => {\n  const content = simplemde.value();\n  window.parent.postMessage({ handler: \"update\", content }, \"*\");\n};\n\n/**\n * Sends message to Widget to update iframe height\n */\nconst updateIframeHeight = () => {\n  const iframeHeight = document.body.scrollHeight;\n  window.parent.postMessage({ handler: \"resize\", height: iframeHeight }, \"*\");\n};\n\n// On Change\nsimplemde.codemirror.on('blur', () => {\n  updateContent();\n  updateIframeHeight();\n});\n\nif (showAutocomplete) {\n  let mentionToken;\n  let mentionCursorStart;\n  const dropdown = document.getElementById(\"mentiondropdown\");\n\n  simplemde.codemirror.on(\"keydown\", () => {\n    if (mentionToken && event.key === 'ArrowDown') {\n      dropdown.querySelector('button').focus();\n      event.preventDefault();\n      return false;\n    }\n  });\n\n  simplemde.codemirror.on(\"keyup\", (cm, event) => {\n    const cursor = cm.getCursor();\n    const token = cm.getTokenAt(cursor);\n\n    const createMentionDrowDownOptions = () => {\n      const mentionInput = cm.getRange(mentionCursorStart, cursor);\n      dropdown.innerHTML = getSuggestedAccounts(mentionInput)\n      .map(\n        (item) =>\n          '<li><button class=\"dropdown-item cursor-pointer w-100 text-wrap\">' + item?.accountId + '</button></li>'\n      )\n      .join(\"\");\n\n      dropdown.querySelectorAll(\"li\").forEach((li) => {\n        li.addEventListener(\"click\", () => {\n          const selectedText = li.textContent.trim();\n          simplemde.codemirror.replaceRange(selectedText, mentionCursorStart, cursor);\n          mentionToken = null;\n          dropdown.classList.remove(\"show\");\n          cm.focus();\n        });\n      });\n    }\n    // show dropwdown only when @ is at first place or when there is a space before @\n      if (!mentionToken && (token.string === \"@\" && cursor.ch === 1 || token.string === \"@\" && cm.getTokenAt({line:cursor.line, ch: cursor.ch - 1}).string == ' ')) {\n        mentionToken = token;\n        mentionCursorStart = cursor;\n        // Calculate cursor position relative to the iframe's viewport\n        const rect = cm.charCoords(cursor);\n        const x = rect.left;\n        const y = rect.bottom;\n\n        // Create dropdown with options\n        dropdown.style.top = y + \"px\";\n        dropdown.style.left = x + \"px\";\n\n        createMentionDrowDownOptions();\n\n        dropdown.classList.add(\"show\");\n\n        // Close dropdown on outside click\n        document.addEventListener(\"click\", function(event) {\n            if (!dropdown.contains(event.target)) {\n                mentionToken = null;\n                dropdown.classList.remove(\"show\");\n            }\n        });\n    } else if (mentionToken && token.string.match(/[^@a-z0-9.]/)) {\n        mentionToken = null;\n        dropdown.classList.remove(\"show\");\n    } else if (mentionToken) {\n        createMentionDrowDownOptions();\n    }\n});\n\n}\n\n\nwindow.addEventListener(\"message\", (event) => {\n  if (!isEditorInitialized && event.data !== \"\") {\n    simplemde.value(event.data.content);\n    isEditorInitialized = true;\n  } else {\n    if (event.data.handler === 'autocompleteSelected') {\n      codeMirrorInstance.getDoc().setValue(event.data.content);\n    }\n  }\n  if (event.data.followingData) {\n    followingData = event.data.followingData;\n  }\n  if (event.data.profilesData) {\n    profilesData = JSON.parse(event.data.profilesData);\n  }\n});\n</script>\n</body>\n</html>\n`;\n\nreturn (\n  <iframe\n    className={className}\n    style={{\n      height: `${state.iframeHeight}px`,\n    }}\n    srcDoc={code}\n    message={{\n      content: props.data?.content ?? \"\",\n      followingData,\n      profilesData: JSON.stringify(profilesData),\n    }}\n    onMessage={(e) => {\n      switch (e.handler) {\n        case \"update\":\n          {\n            onChange(e.content);\n          }\n          break;\n        case \"resize\":\n          {\n            const offset = 10;\n            State.update({ iframeHeight: e.height + offset });\n          }\n          break;\n      }\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/megha19.near/widget/devhub.components.molecule.SimpleMDE", "fact_widget_deployments_id": "3cf403e7b0ed62a57c3a6c95673a5db9", "inserted_timestamp": "2024-04-24T16:42:26.172Z", "modified_timestamp": "2024-04-24T16:42:26.172Z", "__row_index": 26}