{"tx_hash": "Fz4TxshDR89fSi4PkUhdzdxaJppNKns6yjqadLRduUUD", "action_id_social": "2u4HBX2V84qGABRFAPjV18JwEEq375P7jJ3a2WM9hwcN-0-widget", "block_id": 120361048, "block_timestamp": "2024-06-03T17:11:30.951Z", "signer_id": "megha19.near", "widget_name": "near-prpsls-bos.components.molecule.LinkedProposalsDropdown", "source_code": "/*\nLicense: MIT\nAuthor: devhub.near\nHomepage: https://github.com/NEAR-DevHub/near-prpsls-bos#readme\n*/\n/* INCLUDE: \"includes/common.jsx\" */\nconst REPL_DEVHUB = \"devhub.near\";\nconst REPL_INFRASTRUCTURE_COMMITTEE = \"infrastructure-committee.near\";\nconst REPL_INFRASTRUCTURE_COMMITTEE_CONTRACT = \"truedove38.near\";\nconst REPL_RPC_URL = \"https://rpc.mainnet.near.org\";\nconst REPL_NEAR = \"near\";\nconst RFP_IMAGE =\n  \"https://ipfs.near.social/ipfs/bafkreicbygt4kajytlxij24jj6tkg2ppc2dw3dlqhkermkjjfgdfnlizzy\";\n\nconst RFP_FEED_INDEXER_QUERY_NAME =\n  \"polyprogrammist_near_devhub_objects_s_rfps_with_latest_snapshot\";\n\nconst RFP_INDEXER_QUERY_NAME =\n  \"polyprogrammist_near_devhub_objects_s_rfp_snapshots\";\n\nconst PROPOSAL_FEED_INDEXER_QUERY_NAME =\n  \"polyprogrammist_near_devhub_objects_s_proposals_with_latest_snapshot\";\n\nconst PROPOSAL_QUERY_NAME =\n  \"polyprogrammist_near_devhub_objects_s_proposal_snapshots\";\nconst RFP_TIMELINE_STATUS = {\n  ACCEPTING_SUBMISSIONS: \"ACCEPTING_SUBMISSIONS\",\n  EVALUATION: \"EVALUATION\",\n  PROPOSAL_SELECTED: \"PROPOSAL_SELECTED\",\n  CANCELLED: \"CANCELLED\",\n};\n\nconst PROPOSAL_TIMELINE_STATUS = {\n  DRAFT: \"DRAFT\",\n  REVIEW: \"REVIEW\",\n  APPROVED: \"APPROVED\",\n  REJECTED: \"REJECTED\",\n  CANCELED: \"CANCELLED\",\n  APPROVED_CONDITIONALLY: \"APPROVED_CONDITIONALLY\",\n  PAYMENT_PROCESSING: \"PAYMENT_PROCESSING\",\n  FUNDED: \"FUNDED\",\n};\n\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql`;\n\nasync function fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(QUERYAPI_ENDPOINT, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": `polyprogrammist_near` },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n}\n\nconst CANCEL_RFP_OPTIONS = {\n  CANCEL_PROPOSALS: \"CANCEL_PROPOSALS\",\n  UNLINK_PROPOSALS: \"UNLINK_PROPOSALSS\",\n  NONE: \"NONE\",\n};\n\nfunction parseJSON(json) {\n  if (typeof json === \"string\") {\n    try {\n      return JSON.parse(json);\n    } catch (error) {\n      return json;\n    }\n  } else {\n    return json;\n  }\n}\n\nfunction isNumber(value) {\n  return typeof value === \"number\";\n}\n\nconst PROPOSALS_APPROVED_STATUS_ARRAY = [\n  PROPOSAL_TIMELINE_STATUS.APPROVED,\n  PROPOSAL_TIMELINE_STATUS.APPROVED_CONDITIONALLY,\n  PROPOSAL_TIMELINE_STATUS.PAYMENT_PROCESSING,\n  PROPOSAL_TIMELINE_STATUS.FUNDED,\n];\n/* END_INCLUDE: \"includes/common.jsx\" */\n\nconst { href } = VM.require(`${REPL_DEVHUB}/widget/core.lib.url`);\nhref || (href = () => {});\n\nconst linkedProposals = props.linkedProposals;\nconst onChange = props.onChange;\nconst [selectedProposals, setSelectedProposals] = useState(linkedProposals);\nconst [proposalsOptions, setProposalsOptions] = useState([]);\nconst [searchProposalId, setSearchProposalId] = useState(\"\");\n\nconst queryName = PROPOSAL_FEED_INDEXER_QUERY_NAME;\nconst query = `query GetLatestSnapshot($offset: Int = 0, $limit: Int = 10, $where: ${queryName}_bool_exp = {}) {\n${queryName}(\n  offset: $offset\n  limit: $limit\n  order_by: {proposal_id: desc}\n  where: $where\n) {\n  name\n  proposal_id\n}\n}`;\n\nuseEffect(() => {\n  if (JSON.stringify(linkedProposals) !== JSON.stringify(selectedProposals)) {\n    setSelectedProposals(linkedProposals);\n  }\n}, [linkedProposals]);\n\nuseEffect(() => {\n  if (JSON.stringify(linkedProposals) !== JSON.stringify(selectedProposals)) {\n    onChange(selectedProposals);\n  }\n}, [selectedProposals]);\n\nfunction separateNumberAndText(str) {\n  const numberRegex = /\\d+/;\n\n  if (numberRegex.test(str)) {\n    const number = str.match(numberRegex)[0];\n    const text = str.replace(numberRegex, \"\").trim();\n    return { number: parseInt(number), text };\n  } else {\n    return { number: null, text: str.trim() };\n  }\n}\n\nconst buildWhereClause = () => {\n  let where = {};\n  const { number, text } = separateNumberAndText(searchProposalId);\n\n  if (number) {\n    where = { proposal_id: { _eq: number }, ...where };\n  }\n\n  if (text) {\n    where = { name: { _ilike: `%${text}%` }, ...where };\n  }\n\n  return where;\n};\n\nconst fetchProposals = () => {\n  const FETCH_LIMIT = 30;\n  const variables = {\n    limit: FETCH_LIMIT,\n    offset: 0,\n    where: buildWhereClause(),\n  };\n  fetchGraphQL(query, \"GetLatestSnapshot\", variables).then(async (result) => {\n    if (result.status === 200) {\n      if (result.body.data) {\n        const proposalsData = result.body.data?.[queryName];\n        const data = [];\n        for (const prop of proposalsData) {\n          data.push({\n            label: \"# \" + prop.proposal_id + \" : \" + prop.name,\n            value: prop.proposal_id,\n          });\n        }\n        setProposalsOptions(data);\n      }\n    }\n  });\n};\n\nuseEffect(() => {\n  fetchProposals();\n}, [searchProposalId]);\n\nreturn (\n  <>\n    {selectedProposals.map((proposal) => {\n      return (\n        <div className=\"d-flex gap-2 align-items-center\">\n          <a\n            className=\"text-decoration-underline flex-1\"\n            href={href({\n              widgetSrc: `${REPL_INFRASTRUCTURE_COMMITTEE}/widget/near-prpsls-bos.components.pages.app`,\n              params: {\n                page: \"proposal\",\n                id: proposal.value,\n              },\n            })}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {proposal.label}\n          </a>\n          <div\n            className=\"cursor-pointer\"\n            onClick={() => {\n              const updatedLinkedProposals = selectedProposals.filter(\n                (item) => item.value !== proposal.value\n              );\n              setSelectedProposals(updatedLinkedProposals);\n            }}\n          >\n            <i className=\"bi bi-trash3-fill\"></i>\n          </div>\n        </div>\n      );\n    })}\n\n    <Widget\n      src={`${REPL_INFRASTRUCTURE_COMMITTEE}/widget/near-prpsls-bos.components.molecule.DropDownWithSearch`}\n      props={{\n        selectedValue: \"\",\n        onChange: (v) => {\n          if (!selectedProposals.some((item) => item.value === v.value)) {\n            setSelectedProposals([...selectedProposals, v]);\n          }\n        },\n        options: proposalsOptions,\n        showSearch: true,\n        searchInputPlaceholder: \"Search by Id\",\n        defaultLabel: \"Search proposals\",\n        searchByValue: true,\n        onSearch: (value) => {\n          setSearchProposalId(value);\n        },\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/megha19.near/widget/near-prpsls-bos.components.molecule.LinkedProposalsDropdown", "fact_widget_deployments_id": "4f4707f7177475c1b2cbf043782a4fea", "inserted_timestamp": "2024-06-03T18:43:18.789Z", "modified_timestamp": "2024-06-03T18:43:18.789Z", "__row_index": 1}