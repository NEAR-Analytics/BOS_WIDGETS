{"tx_hash": "D8LGPmZTRVHqHd4gcacQmqCsba2nyX2h6nCFBUHede9g", "action_id_social": "47faKTpURp6RohK2RbE6fQeaJH1e8L2RBmJPMZzEihDg-0-widget", "block_id": 108089545, "block_timestamp": "2023-12-16T13:05:26.978Z", "signer_id": "megha19.near", "widget_name": "devhub.entity.addon.kanban.Configurator", "source_code": "const { widget } = VM.require(\"megha19.near/widget/core.lib.url\");\nconst Struct = VM.require(\"megha19.near/widget/core.lib.struct\");\n\nif (!Struct) {\n  return <p>Loading modules...</p>;\n}\nconst { updateCommunityBoard, useQuery } = VM.require(\n  \"megha19.near/widget/core.adapter.devhub-contract\"\n);\nconst { uuid, withUUIDIndex } = VM.require(\n  \"megha19.near/widget/core.lib.uuid\"\n);\n\nuuid || (uuid = () => {});\nwithUUIDIndex || (withUUIDIndex = () => {});\nuseQuery || (useQuery = () => {});\nupdateCommunityBoard || (updateCommunityBoard = () => {});\n\nconst useForm = ({ initialValues, stateKey, uninitialized }) => {\n  const initialFormState = {\n    hasUnsubmittedChanges: false,\n    values: initialValues ?? {},\n  };\n\n  const formState = state[stateKey] ?? null,\n    isSynced = Struct.isEqual(formState?.values ?? {}, initialFormState.values);\n\n  const formReset = () =>\n    State.update((lastKnownComponentState) => ({\n      ...lastKnownComponentState,\n      [stateKey]: initialFormState,\n      hasUnsubmittedChanges: false,\n    }));\n\n  const formUpdate =\n    ({ path, via: customFieldUpdate, ...params }) =>\n    (fieldInput) => {\n      const transformFn = (node) => {\n        if (typeof customFieldUpdate === \"function\") {\n          return customFieldUpdate({\n            input: fieldInput?.target?.value ?? fieldInput,\n            lastKnownValue: node,\n            params,\n          });\n        } else {\n          return Struct.defaultFieldUpdate({\n            input: fieldInput?.target?.value ?? fieldInput,\n            lastKnownValue: node,\n            params,\n          });\n        }\n      };\n      const updatedValues = Struct.deepFieldUpdate(\n        formState?.values ?? {},\n        path,\n        (node) => transformFn(node)\n      );\n\n      State.update((lastKnownComponentState) => ({\n        ...lastKnownComponentState,\n        [stateKey]: {\n          hasUnsubmittedChanges: !Struct.isEqual(\n            updatedValues,\n            initialFormState.values\n          ),\n          values: updatedValues,\n        },\n      }));\n    };\n\n  if (\n    !uninitialized &&\n    (formState === null || (!formState.hasUnsubmittedChanges && !isSynced))\n  ) {\n    formReset();\n  }\n\n  return {\n    ...(formState ?? initialFormState),\n    isSynced,\n    reset: formReset,\n    stateKey,\n    update: formUpdate,\n  };\n};\n\nconst AttractableDiv = styled.div`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst settings = {\n  maxColumnsNumber: 10,\n};\n\nconst KanbanPostBoardBasicInfoSchema = {\n  title: { label: \"Title\", order: 1, placeholder: \"Enter board title.\" },\n\n  description: {\n    label: \"Description\",\n    order: 2,\n    placeholder: \"Enter board description.\",\n  },\n};\n\nconst KanbanPostBoardTagsSchema = {\n  required: {\n    label:\n      \"Enter tags you want to include. Posts with these tags will display.\",\n\n    order: 1,\n    placeholder: \"tag1, tag2\",\n  },\n\n  excluded: {\n    label:\n      \"Enter tags you want to exclude. Posts with these tags will not show.\",\n\n    order: 2,\n    placeholder: \"tag3, tag4\",\n  },\n};\n\nconst KanbanPostBoardTicketFeaturesSchema = {\n  author: { label: \"Author\" },\n  like_count: { label: \"Likes\" },\n  reply_count: { label: \"Replies\", noop: true },\n  sponsorship_request_indicator: { label: \"Sponsorship request indicator\" },\n  requested_sponsorship_value: { label: \"Amount of requested funds\" },\n  requested_sponsor: { label: \"Requested sponsor\" },\n  approved_sponsorship_value: { label: \"Approved amount\" },\n  sponsorship_supervisor: { label: \"Supervisor\" },\n  tags: { label: \"Tags\" },\n  type: { label: \"Post type\" },\n};\n\nconst KanbanPostBoardDefaults = {\n  metadata: {\n    id: uuid(),\n    type: \"kanban.post_board\",\n    title: \"\",\n    description: \"\",\n\n    ticket: {\n      type: \"kanban.post_ticket\",\n\n      features: {\n        author: true,\n        like_count: true,\n        reply_count: false,\n        sponsorship_request_indicator: false,\n        requested_sponsorship_value: false,\n        requested_sponsor: false,\n        approved_sponsorship_value: true,\n        sponsorship_supervisor: true,\n        tags: true,\n        type: true,\n      },\n    },\n  },\n\n  payload: {\n    columns: {},\n    tags: { excluded: [], required: [] },\n  },\n};\n\nconst toMigrated = ({ config, metadata, payload }) => ({\n  metadata: {\n    ...KanbanPostBoardDefaults.metadata,\n    ...metadata,\n\n    ticket: {\n      ...KanbanPostBoardDefaults.metadata.ticket,\n      ...metadata.ticket,\n\n      features: {\n        ...KanbanPostBoardDefaults.metadata.ticket.features,\n        ...metadata.ticket.features,\n      },\n    },\n  },\n\n  payload: {\n    ...KanbanPostBoardDefaults.payload,\n    ...payload,\n    ...config,\n  },\n});\n\nconst KanbanViewConfigurator = ({ communityHandle, link, permissions }) => {\n  State.init({\n    editingMode: \"form\",\n    isActive: false,\n  });\n\n  const community = useQuery(\"community\", { handle: communityHandle });\n\n  const data =\n    (community.data?.board ?? null) === null\n      ? {}\n      : JSON.parse(community.data.board);\n\n  const form = useForm({\n    initialValues: Struct.pick(\n      data.metadata === undefined ? {} : toMigrated(data),\n      [\"metadata\", \"payload\"]\n    ),\n\n    stateKey: \"kanban-view\",\n    uninitialized: (data.metadata ?? null) === null,\n  });\n\n  const isViewInitialized = Object.keys(form.values.metadata ?? {}).length > 0;\n\n  const formToggle = (forcedState) =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      isActive: forcedState ?? !lastKnownState.isActive,\n    }));\n\n  const editingModeSwitch = ({ target: { value } }) =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      editingMode: value,\n    }));\n\n  const newViewInit = () =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n\n      [form.stateKey]: {\n        hasUnsubmittedChanges: false,\n        values: KanbanPostBoardDefaults,\n      },\n\n      isActive: true,\n    }));\n\n  const columnsCreateNew = ({ lastKnownValue }) =>\n    Object.keys(lastKnownValue).length < settings.maxColumnsNumber\n      ? {\n          ...(lastKnownValue ?? {}),\n          ...withUUIDIndex({ tag: \"\", title: \"New column\", description: \"\" }),\n        }\n      : lastKnownValue;\n\n  const columnsDeleteById =\n    (id) =>\n    ({ lastKnownValue }) =>\n      Object.fromEntries(\n        Object.entries(lastKnownValue).filter(([columnId]) => columnId !== id)\n      );\n\n  const onCancel = () => {\n    form.reset();\n    formToggle(false);\n  };\n\n  const onSave = () =>\n    updateCommunityBoard({\n      handle: communityHandle,\n      board: JSON.stringify(form.values),\n    });\n\n  const viewDelete = () =>\n    updateCommunityBoard({ handle: communityHandle, board: null });\n\n  const formElement = isViewInitialized ? (\n    <>\n      <div className=\"d-flex flex-column flex-lg-row align-items-stretch gap-4 w-100\">\n        <div className=\"d-flex flex-column gap-4 w-100\">\n          {widget(\"components.organism.Configurator\", {\n            heading: \"Basic information\",\n            externalState: form.values.metadata,\n            isActive: true,\n            isEmbedded: true,\n            isUnlocked: permissions.can_configure,\n            onChange: form.update({ path: [\"metadata\"] }),\n            schema: KanbanPostBoardBasicInfoSchema,\n          })}\n\n          {widget(\"components.organism.Configurator\", {\n            heading: \"Tags\",\n            externalState: form.values.payload.tags,\n            isActive: true,\n            isEmbedded: true,\n            isUnlocked: permissions.can_configure,\n            onChange: form.update({ path: [\"payload\", \"tags\"] }),\n            schema: KanbanPostBoardTagsSchema,\n          })}\n        </div>\n\n        {widget(\"components.organism.Configurator\", {\n          heading: \"Card fields\",\n          classNames: { root: \"w-auto h-auto\" },\n          externalState: form.values.metadata.ticket.features,\n          isActive: true,\n          isEmbedded: true,\n          isUnlocked: permissions.can_configure,\n          onChange: form.update({ path: [\"metadata\", \"ticket\", \"features\"] }),\n          schema: KanbanPostBoardTicketFeaturesSchema,\n          style: { minWidth: \"36%\" },\n        })}\n      </div>\n\n      <div className=\"d-flex align-items-center justify-content-between w-100\">\n        <span className=\"d-inline-flex gap-2 m-0\">\n          <i className=\"bi bi-list-task\" />\n          <span>{`Columns ( max. ${settings.maxColumnsNumber} )`}</span>\n        </span>\n      </div>\n\n      <div className=\"d-flex flex-column align-items-center gap-3 w-100\">\n        {Object.values(form.values.payload.columns ?? {}).map(\n          ({ id, description, tag, title }) => (\n            <AttractableDiv\n              className=\"d-flex gap-3 rounded-4 border p-3 w-100\"\n              key={`column-${id}-configurator`}\n            >\n              <div className=\"d-flex flex-column gap-1 w-100\">\n                {widget(\"components.molecule.Input\", {\n                  className: \"flex-grow-1\",\n                  key: `column-${id}-title`,\n                  label: \"Column title\",\n\n                  onChange: form.update({\n                    path: [\"payload\", \"columns\", id, \"title\"],\n                  }),\n\n                  placeholder: \"Enter column title.\",\n                  value: title,\n                })}\n\n                {widget(\"components.molecule.Input\", {\n                  className: \"flex-grow-1\",\n                  key: `column-${id}-description`,\n                  label: \"Description\",\n\n                  onChange: form.update({\n                    path: [\"payload\", \"columns\", id, \"description\"],\n                  }),\n\n                  placeholder: \"Enter a brief description of the column.\",\n                  value: description,\n                })}\n\n                {widget(\"components.molecule.Input\", {\n                  key: `kanban-view-column-${id}-tag`,\n                  label: \"Enter a single tag to show posts in this column\",\n\n                  onChange: form.update({\n                    path: [\"payload\", \"columns\", id, \"tag\"],\n                  }),\n\n                  placeholder: \"Tag-Name\",\n                  value: tag,\n                })}\n              </div>\n\n              <div\n                className=\"d-flex flex-column gap-3 border-start p-3 pe-0\"\n                style={{ marginTop: -16, marginBottom: -16 }}\n              >\n                <button\n                  className=\"btn btn-outline-danger\"\n                  onClick={form.update({\n                    path: [\"payload\", \"columns\"],\n                    via: columnsDeleteById(id),\n                  })}\n                  title=\"Delete column\"\n                >\n                  <i className=\"bi bi-trash-fill\" />\n                </button>\n              </div>\n            </AttractableDiv>\n          )\n        )}\n\n        <div className=\"d-flex gap-3 justify-content-end w-100\">\n          {widget(\"components.molecule.Button\", {\n            classNames: {\n              root: \"d-flex btn btn-outline-danger shadow-none border-0\",\n            },\n\n            isHidden: typeof onCancel !== \"function\" || !state.isActive,\n            label: \"Cancel\",\n            onClick: onCancel,\n          })}\n\n          {widget(\"components.molecule.Button\", {\n            classNames: { root: \"btn btn-success\" },\n            disabled: form.isSynced,\n\n            icon: {\n              type: \"svg_icon\",\n              variant: \"floppy_drive\",\n              width: 14,\n              height: 14,\n            },\n\n            isHidden: typeof onSave !== \"function\" || !state.isActive,\n            label: \"Save\",\n            onClick: onSave,\n          })}\n        </div>\n      </div>\n    </>\n  ) : null;\n\n  return !isViewInitialized && community.data === null ? (\n    <div class=\"alert alert-danger\" role=\"alert\">\n      {community.isLoading\n        ? \"Loading...\"\n        : `Community with handle ${communityHandle} not found.`}\n    </div>\n  ) : (\n    <div\n      className=\"d-flex flex-column gap-4 w-100\"\n      style={{ maxWidth: \"100%\" }}\n    >\n      {isViewInitialized ? (\n        <div\n          className={[\n            \"d-flex flex-column gap-4 w-100\",\n            state.isActive ? \"\" : \"d-none\",\n          ].join(\" \")}\n        >\n          <div className=\"d-flex align-items-center justify-content-between gap-3 w-100\">\n            <h5 className=\"h5 d-inline-flex gap-2 m-0\">\n              <i className=\"bi bi-gear-wide-connected\" />\n              <span>Kanban board configuration</span>\n            </h5>\n\n            {widget(\"components.molecule.Switch\", {\n              currentValue: state.editingMode,\n              isHidden: true,\n              key: \"editingMode\",\n              onChange: editingModeSwitch,\n\n              options: [\n                { label: \"Form\", value: \"form\" },\n                { label: \"JSON\", value: \"JSON\" },\n              ],\n\n              title: \"Editing mode selection\",\n            })}\n          </div>\n\n          {state.editingMode === \"form\" ? (\n            formElement\n          ) : (\n            <div className=\"d-flex flex-column flex-grow-1 border-0 bg-transparent w-100\">\n              <textarea\n                className=\"form-control\"\n                disabled\n                rows=\"12\"\n                type=\"text\"\n                value={JSON.stringify(form.values ?? {}, null, \"\\t\")}\n              />\n            </div>\n          )}\n        </div>\n      ) : null}\n\n      {isViewInitialized ? (\n        widget(`entity.addon.${form.values.metadata.type}`, {\n          ...form.values,\n\n          configurationControls: [\n            {\n              label: \"New column\",\n\n              disabled:\n                Object.keys(form.values.payload.columns).length >=\n                settings.maxColumnsNumber,\n\n              icon: { type: \"bootstrap_icon\", variant: \"bi-plus-lg\" },\n\n              onClick: form.update({\n                path: [\"payload\", \"columns\"],\n                via: columnsCreateNew,\n              }),\n            },\n          ],\n\n          isConfiguratorActive: state.isActive,\n          isSynced: form.isSynced,\n          link,\n          onConfigure: () => formToggle(true),\n          onDelete: isViewInitialized ? viewDelete : null,\n          permissions,\n        })\n      ) : (\n        <div\n          className=\"d-flex flex-column align-items-center justify-content-center gap-4\"\n          style={{ height: 384 }}\n        >\n          <h5 className=\"h5 d-inline-flex gap-2 m-0\">\n            This community doesn't have a kanban board\n          </h5>\n\n          {widget(\"components.molecule.Button\", {\n            icon: { type: \"bootstrap_icon\", variant: \"bi-kanban-fill\" },\n            isHidden: !permissions.can_configure,\n            label: \"Create kanban board\",\n            onClick: newViewInit,\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nreturn KanbanViewConfigurator(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/megha19.near/widget/devhub.entity.addon.kanban.Configurator", "fact_widget_deployments_id": "8abb9ed220bdbb2502f90c157a77ebf5", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 23}