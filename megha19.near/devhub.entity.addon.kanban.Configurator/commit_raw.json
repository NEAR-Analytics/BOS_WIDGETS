{"tx_hash": "4eK9rpWmLfLSuDxBxM5EP35sTd9YTRh7ge16pd2oBr7J", "action_id_social": "HhHTYPB43QPEb64SsJZc3DYur5Gnx2nj7C2HUZME6qKj-0-widget", "block_id": 109169401, "block_timestamp": "2023-12-30T17:00:33.137Z", "signer_id": "megha19.near", "widget_name": "devhub.entity.addon.kanban.Configurator", "source_code": "const Struct = VM.require(\"megha19.near/widget/core.lib.struct\");\n\nif (!Struct) {\n  return <p>Loading modules...</p>;\n}\nconst { useQuery } = VM.require(\n  \"megha19.near/widget/core.adapter.devhub-contract\"\n);\nconst { uuid, withUUIDIndex } = VM.require(\n  \"megha19.near/widget/core.lib.uuid\"\n);\n\nuuid || (uuid = () => {});\nwithUUIDIndex || (withUUIDIndex = () => {});\nuseQuery || (useQuery = () => {});\n\nconst AttractableDiv = styled.div`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst settings = {\n  maxColumnsNumber: 10,\n};\n\nconst KanbanPostBoardBasicInfoSchema = {\n  title: { label: \"Title\", order: 1, placeholder: \"Enter board title.\" },\n\n  description: {\n    label: \"Description\",\n    order: 2,\n    placeholder: \"Enter board description.\",\n  },\n};\n\nconst KanbanPostBoardTagsSchema = {\n  required: {\n    label:\n      \"Enter tags you want to include. Posts with these tags will display.\",\n\n    order: 1,\n    placeholder: \"tag1, tag2\",\n  },\n\n  excluded: {\n    label:\n      \"Enter tags you want to exclude. Posts with these tags will not show.\",\n\n    order: 2,\n    placeholder: \"tag3, tag4\",\n  },\n};\n\nconst KanbanPostBoardTicketFeaturesSchema = {\n  author: { label: \"Author\" },\n  like_count: { label: \"Likes\" },\n  reply_count: { label: \"Replies\", noop: true },\n  sponsorship_request_indicator: { label: \"Sponsorship request indicator\" },\n  requested_sponsorship_value: { label: \"Amount of requested funds\" },\n  requested_sponsor: { label: \"Requested sponsor\" },\n  approved_sponsorship_value: { label: \"Approved amount\" },\n  sponsorship_supervisor: { label: \"Supervisor\" },\n  tags: { label: \"Tags\" },\n  type: { label: \"Post type\" },\n};\n\nconst KanbanPostBoardDefaults = {\n  metadata: {\n    id: uuid(),\n    type: \"kanban.post_board\",\n    title: \"\",\n    description: \"\",\n    ticket: {\n      type: \"kanban.post_ticket\",\n      features: {\n        author: true,\n        like_count: true,\n        reply_count: false,\n        sponsorship_request_indicator: false,\n        requested_sponsorship_value: false,\n        requested_sponsor: false,\n        approved_sponsorship_value: true,\n        sponsorship_supervisor: true,\n        tags: true,\n        type: true,\n      },\n    },\n  },\n  payload: {\n    columns: {},\n    tags: { excluded: [], required: [] },\n  },\n};\n\nconst toMigrated = ({ config, metadata, payload }) => ({\n  metadata: {\n    ...KanbanPostBoardDefaults.metadata,\n    ...metadata,\n    ticket: {\n      ...KanbanPostBoardDefaults.metadata.ticket,\n      ...metadata.ticket,\n      features: {\n        ...KanbanPostBoardDefaults.metadata.ticket.features,\n        ...metadata.ticket.features,\n      },\n    },\n  },\n  payload: {\n    ...KanbanPostBoardDefaults.payload,\n    ...payload,\n    ...config,\n  },\n});\n\nconst KanbanViewConfigurator = ({ data, permissions, onSubmit }) => {\n  if (!data) {\n    return (\n      <div class=\"alert alert-danger\" role=\"alert\">\n        Loading...\n      </div>\n    );\n  }\n  const initialFormState = Struct.pick(\n    data.metadata === undefined ? {} : toMigrated(data),\n    [\"metadata\", \"payload\"]\n  );\n\n  const [formState, setForm] = useState(initialFormState);\n  const [editingMode, setEditingMode] = useState(\"form\");\n  const [showPreview, setPreview] = useState(false);\n\n  const formUpdate =\n    ({ path, via: customFieldUpdate, ...params }) =>\n    (fieldInput) => {\n      const transformFn = (node) => {\n        if (typeof customFieldUpdate === \"function\") {\n          return customFieldUpdate({\n            input: fieldInput?.target?.value ?? fieldInput,\n            lastKnownValue: node,\n            params,\n          });\n        } else {\n          return Struct.defaultFieldUpdate({\n            input: fieldInput?.target?.value ?? fieldInput,\n            lastKnownValue: node,\n            params,\n          });\n        }\n      };\n      const updatedValues = Struct.deepFieldUpdate(\n        formState ?? {},\n        path,\n        (node) => transformFn(node)\n      );\n      setForm((prevFormState) => ({\n        ...prevFormState,\n        ...updatedValues,\n      }));\n    };\n\n  const formReset = () => {\n    setForm(initialFormState);\n  };\n\n  const editingModeSwitch = ({ target: { value } }) => setEditingMode(value);\n\n  const newViewInit = () => {\n    setForm(KanbanPostBoardDefaults);\n  };\n\n  const columnsCreateNew = ({ lastKnownValue }) =>\n    Object.keys(lastKnownValue).length < settings.maxColumnsNumber\n      ? {\n          ...(lastKnownValue ?? {}),\n          ...withUUIDIndex({ tag: \"\", title: \"New column\", description: \"\" }),\n        }\n      : lastKnownValue;\n\n  const columnsDeleteById =\n    (id) =>\n    ({ lastKnownValue }) =>\n      Object.fromEntries(\n        Object.entries(lastKnownValue).filter(([columnId]) => columnId !== id)\n      );\n\n  const onCancel = () => {\n    formReset();\n  };\n\n  const onSave = () => onSubmit(formState);\n\n  const formElement = (\n    <>\n      <div className=\"d-flex flex-column flex-lg-row align-items-stretch gap-4 w-100\">\n        <div className=\"d-flex flex-column gap-4 w-100\">\n          <Widget\n            src={`megha19.near/widget/devhub.components.organism.Configurator`}\n            props={{\n              heading: \"Basic information\",\n              externalState: formState.metadata,\n              isActive: true,\n              isEmbedded: true,\n              isUnlocked: permissions.can_configure,\n              onChange: formUpdate({ path: [\"metadata\"] }),\n              schema: KanbanPostBoardBasicInfoSchema,\n              hideSubmitBtn: true,\n            }}\n          />\n          <Widget\n            src={`megha19.near/widget/devhub.components.organism.Configurator`}\n            props={{\n              heading: \"Tags\",\n              externalState: formState.payload.tags,\n              isActive: true,\n              isEmbedded: true,\n              isUnlocked: permissions.can_configure,\n              onChange: formUpdate({ path: [\"payload\", \"tags\"] }),\n              schema: KanbanPostBoardTagsSchema,\n              hideSubmitBtn: true,\n            }}\n          />\n        </div>\n        <Widget\n          src={`megha19.near/widget/devhub.components.organism.Configurator`}\n          props={{\n            heading: \"Card fields\",\n            classNames: { root: \"w-auto h-auto\" },\n            externalState: formState.metadata.ticket.features,\n            isActive: true,\n            isEmbedded: true,\n            isUnlocked: permissions.can_configure,\n            onChange: formUpdate({ path: [\"metadata\", \"ticket\", \"features\"] }),\n            schema: KanbanPostBoardTicketFeaturesSchema,\n            style: { minWidth: \"36%\" },\n            hideSubmitBtn: true,\n          }}\n        />\n      </div>\n\n      <div className=\"d-flex align-items-center justify-content-between w-100\">\n        <span className=\"d-inline-flex gap-2 m-0\">\n          <i className=\"bi bi-list-task\" />\n          <span>{`Columns ( max. ${settings.maxColumnsNumber} )`}</span>\n        </span>\n      </div>\n\n      <div className=\"d-flex flex-column align-items-center gap-3 w-100\">\n        {Object.values(formState.payload.columns ?? {}).map(\n          ({ id, description, tag, title }) => (\n            <AttractableDiv\n              className=\"d-flex gap-3 rounded-4 border p-3 w-100\"\n              key={`column-${id}-configurator`}\n            >\n              <div className=\"d-flex flex-column gap-1 w-100\">\n                <Widget\n                  src={`megha19.near/widget/devhub.components.molecule.Input`}\n                  props={{\n                    className: \"flex-grow-1\",\n                    key: `column-${id}-title`,\n                    label: \"Column title\",\n                    onChange: formUpdate({\n                      path: [\"payload\", \"columns\", id, \"title\"],\n                    }),\n                    placeholder: \"Enter column title.\",\n                    value: title,\n                  }}\n                />\n                <Widget\n                  src={`megha19.near/widget/devhub.components.molecule.Input`}\n                  props={{\n                    className: \"flex-grow-1\",\n                    key: `column-${id}-description`,\n                    label: \"Description\",\n                    onChange: formUpdate({\n                      path: [\"payload\", \"columns\", id, \"description\"],\n                    }),\n                    placeholder: \"Enter a brief description of the column.\",\n                    value: description,\n                  }}\n                />\n                <Widget\n                  src={`megha19.near/widget/devhub.components.molecule.Input`}\n                  props={{\n                    key: `kanban-view-column-${id}-tag`,\n                    label: \"Enter a single tag to show posts in this column\",\n                    onChange: formUpdate({\n                      path: [\"payload\", \"columns\", id, \"tag\"],\n                    }),\n                    placeholder: \"Tag-Name\",\n                    value: tag,\n                  }}\n                />\n              </div>\n\n              <div\n                className=\"d-flex flex-column gap-3 border-start p-3 pe-0\"\n                style={{ marginTop: -16, marginBottom: -16 }}\n              >\n                <button\n                  className=\"btn btn-outline-danger\"\n                  onClick={formUpdate({\n                    path: [\"payload\", \"columns\"],\n                    via: columnsDeleteById(id),\n                  })}\n                  title=\"Delete column\"\n                >\n                  <i className=\"bi bi-trash-fill\" />\n                </button>\n              </div>\n            </AttractableDiv>\n          )\n        )}\n\n        <div className=\"d-flex gap-3 justify-content-end w-100\">\n          <Widget\n            src={`megha19.near/widget/devhub.components.molecule.Button`}\n            props={{\n              classNames: {\n                root: \"d-flex btn btn-outline-danger shadow-none border-0\",\n              },\n              isHidden: typeof onCancel !== \"function\",\n              label: \"Cancel\",\n              onClick: onCancel,\n            }}\n          />\n          <Widget\n            src={`megha19.near/widget/devhub.components.molecule.Button`}\n            props={{\n              classNames: { root: \"btn btn-success\" },\n              disabled: form.isSynced,\n              icon: {\n                type: \"svg_icon\",\n                variant: \"floppy_drive\",\n                width: 14,\n                height: 14,\n              },\n              isHidden: typeof onSave !== \"function\",\n              label: \"Save\",\n              onClick: onSave,\n            }}\n          />\n        </div>\n      </div>\n    </>\n  );\n\n  return (\n    <div\n      className=\"d-flex flex-column gap-4 w-100\"\n      style={{ maxWidth: \"100%\" }}\n    >\n      <ul className=\"nav nav-tabs\" id=\"editPreviewTabs\" role=\"tablist\">\n        <li className=\"nav-item\" role=\"presentation\">\n          <button\n            className={`nav-link ${!showPreview ? \"active\" : \"\"}`}\n            id=\"edit-tab\"\n            data-bs-toggle=\"tab\"\n            data-bs-target=\"#edit\"\n            type=\"button\"\n            role=\"tab\"\n            aria-controls=\"edit\"\n            aria-selected=\"true\"\n            onClick={() => setPreview(false)}\n          >\n            Edit\n          </button>\n        </li>\n        <li className=\"nav-item\" role=\"presentation\">\n          <button\n            className={`nav-link ${showPreview ? \"active\" : \"\"}`}\n            id=\"preview-tab\"\n            data-bs-toggle=\"tab\"\n            data-bs-target=\"#preview\"\n            type=\"button\"\n            role=\"tab\"\n            aria-controls=\"preview\"\n            aria-selected=\"false\"\n            onClick={() => setPreview(true)}\n          >\n            Preview\n          </button>\n        </li>\n      </ul>\n      {showPreview ? (\n        <div>\n          <Widget\n            src={`megha19.near/widget/devhub.entity.addon.kanban.Viewer`}\n            props={{\n              data: formState,\n            }}\n          />\n        </div>\n      ) : (\n        <div className={[\"d-flex flex-column gap-4 w-100\"].join(\" \")}>\n          <div className=\"d-flex align-items-center justify-content-between gap-3 w-100\">\n            <h5 className=\"h5 d-inline-flex gap-2 m-0\">\n              <i className=\"bi bi-gear-wide-connected\" />\n              <span>Kanban board configuration</span>\n            </h5>\n            <Widget\n              src={`megha19.near/widget/devhub.components.molecule.Switch`}\n              props={{\n                currentValue: editingMode,\n                key: \"editingMode\",\n                onChange: editingModeSwitch,\n                options: [\n                  { label: \"Form\", value: \"form\" },\n                  { label: \"JSON\", value: \"JSON\" },\n                ],\n                title: \"Editing mode selection\",\n              }}\n            />\n          </div>\n          {Object.keys(formState.metadata ?? {}).length > 0 && (\n            <>\n              {editingMode === \"form\" ? (\n                <div>\n                  {formElement}\n                  <Widget\n                    src={`megha19.near/widget/devhub.components.molecule.Button`}\n                    props={{\n                      classNames: {\n                        root: \"btn-sm btn-outline-secondary\",\n                      },\n                      label: \"New column\",\n                      disabled:\n                        Object.keys(formState.payload.columns).length >=\n                        settings.maxColumnsNumber,\n                      icon: { type: \"bootstrap_icon\", variant: \"bi-plus-lg\" },\n                      onClick: formUpdate({\n                        path: [\"payload\", \"columns\"],\n                        via: columnsCreateNew,\n                      }),\n                    }}\n                  />\n                </div>\n              ) : (\n                <div className=\"d-flex flex-column flex-grow-1 border-0 bg-transparent w-100\">\n                  <textarea\n                    className=\"form-control\"\n                    disabled\n                    rows=\"12\"\n                    type=\"text\"\n                    value={JSON.stringify(formState ?? {}, null, \"\\t\")}\n                  />\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      )}\n      {!Object.keys(formState.metadata ?? {}).length && (\n        <div\n          className=\"d-flex flex-column align-items-center justify-content-center gap-4\"\n          style={{ height: 384 }}\n        >\n          <h5 className=\"h5 d-inline-flex gap-2 m-0\">\n            This community doesn't have a kanban board\n          </h5>\n          <Widget\n            src={`megha19.near/widget/devhub.components.molecule.Button`}\n            props={{\n              icon: { type: \"bootstrap_icon\", variant: \"bi-kanban-fill\" },\n              isHidden: !permissions.can_configure,\n              label: \"Create kanban board\",\n              onClick: newViewInit,\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nreturn KanbanViewConfigurator(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/megha19.near/widget/devhub.entity.addon.kanban.Configurator", "fact_widget_deployments_id": "45f0a46ea89d8110364df68671844b19", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 16}