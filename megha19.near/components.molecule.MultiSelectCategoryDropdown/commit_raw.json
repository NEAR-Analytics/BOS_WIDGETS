{"tx_hash": "9Eug8dGUgshoaAxy5zs4EUBPRDLhWijWdwzc1SpmxWMj", "action_id_social": "BNCWToe5qZ6PKUBqDKEegPoSRrNccoGe4249Q9BEAQcY-0-widget", "block_id": 119335326, "block_timestamp": "2024-05-20T09:35:35.455Z", "signer_id": "megha19.near", "widget_name": "components.molecule.MultiSelectCategoryDropdown", "source_code": "import { REPL_DEVHUB } from \"@/includes/common\";\n\nconst { href } = VM.require(`${REPL_DEVHUB}/widget/core.lib.url`);\nhref || (href = () => {});\n\nconst { selected, onChange, disabled, availableOptions, hideDropdown } = props;\n\nconst [selectedOptions, setSelectedOptions] = useState([]);\nconst [isOpen, setIsOpen] = useState(false);\nconst [initialStateApplied, setInitialState] = useState(false);\n\nconst toggleDropdown = () => {\n  setIsOpen(!isOpen);\n};\n\nuseEffect(() => {\n  if (JSON.stringify(selectedOptions) !== JSON.stringify(selected)) {\n    if (availableOptions.length > 0) {\n      if ((selected ?? []).some((i) => !i.value)) {\n        setSelectedOptions(\n          selected.map((i) => availableOptions.find((t) => t.value === i))\n        );\n      } else {\n        setSelectedOptions(selected);\n      }\n      setInitialState(true);\n    }\n  } else {\n    setInitialState(true);\n  }\n}, [selected, availableOptions]);\n\nuseEffect(() => {\n  if (\n    JSON.stringify(selectedOptions) !== JSON.stringify(selected) &&\n    initialStateApplied\n  ) {\n    onChange(selectedOptions);\n  }\n}, [selectedOptions, initialStateApplied]);\n\nconst Container = styled.div`\n  .drop-btn {\n    width: 100%;\n    text-align: left;\n    padding-inline: 10px;\n  }\n\n  .dropdown-toggle:after {\n    position: absolute;\n    top: 46%;\n    right: 2%;\n  }\n\n  .dropdown-menu {\n    width: 100%;\n  }\n\n  .dropdown-item.active,\n  .dropdown-item:active {\n    background-color: #f0f0f0 !important;\n    color: black;\n  }\n\n  .disabled {\n    background-color: #f8f8f8 !important;\n    cursor: not-allowed !important;\n    border-radius: 5px;\n    opacity: inherit !important;\n  }\n\n  .disabled.dropdown-toggle::after {\n    display: none !important;\n  }\n\n  .custom-select {\n    position: relative;\n  }\n\n  .selected {\n    background-color: #f0f0f0;\n  }\n\n  .cursor-pointer {\n    cursor: pointer;\n  }\n\n  .text-wrap {\n    overflow: hidden;\n    white-space: normal;\n  }\n`;\n\nconst handleOptionClick = (option) => {\n  if (!selectedOptions.some((item) => item.value === option.value)) {\n    setSelectedOptions([...selectedOptions, option]);\n  }\n  setIsOpen(false);\n};\n\nconst Item = ({ option }) => {\n  return <div> {option.title}</div>;\n};\n\nreturn (\n  <>\n    <div className=\"d-flex gap-2 align-items-center\">\n      {(selectedOptions ?? []).map((option) => {\n        return (\n          <div\n            style={{\n              color: \"white\",\n              backgroundColor: `rgb(${option.color})`,\n              width: \"max-content\",\n            }}\n            className=\"d-flex gap-2 align-items-center badge rounded-lg p-2 h6 mb-0\"\n          >\n            {option.title}\n            {!disabled && (\n              <div\n                className=\"cursor-pointer\"\n                onClick={() => {\n                  const updatedOptions = selectedOptions.filter(\n                    (item) => item.value !== option.value\n                  );\n                  setSelectedOptions(updatedOptions);\n                }}\n              >\n                <i className=\"bi bi-trash3-fill\"></i>\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n    {!hideDropdown && (\n      <Container>\n        <div\n          className=\"custom-select w-100\"\n          tabIndex=\"0\"\n          onBlur={() => setIsOpen(false)}\n        >\n          <div\n            className={\n              \"dropdown-toggle bg-white border rounded-2 btn drop-btn w-100 \" +\n              (disabled ? \"disabled\" : \"\")\n            }\n            onClick={!disabled && toggleDropdown}\n          >\n            <div className={`selected-option`}>Select Category</div>\n          </div>\n\n          {isOpen && (\n            <div className=\"dropdown-menu rounded-2 dropdown-menu-end dropdown-menu-lg-start px-2 shadow show w-100\">\n              <div>\n                {(availableOptions ?? []).map((option) => (\n                  <div\n                    key={option.value}\n                    className={`dropdown-item cursor-pointer w-100 my-1 ${\n                      (selectedOptions ?? []).find(\n                        (item) => item.value === option.value\n                      )\n                        ? \"selected\"\n                        : \"\"\n                    }`}\n                    onClick={() => handleOptionClick(option)}\n                  >\n                    <Item option={option} />\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </Container>\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/megha19.near/widget/components.molecule.MultiSelectCategoryDropdown", "fact_widget_deployments_id": "80ae07106204dfe4ff4e1b972a523663", "inserted_timestamp": "2024-05-20T10:52:48.743Z", "modified_timestamp": "2024-05-20T11:50:20.468Z", "__row_index": 0}