{"tx_hash": "6WHtKxMSTiYvnhQ7MoWBui8nwtVnvvZmH6ySB9YVAory", "action_id_social": "BDXgXMLpoc7G5AvdwQuEGjEAjb1fbPz97KEs2XtTQC4e-0-widget", "block_id": 111946908, "block_timestamp": "2024-02-02T17:18:24.561Z", "signer_id": "bos.yearofchef.near", "widget_name": "explore", "source_code": "const accountId = props.accountId || context.accountId;\nconst contract = \"mint.yearofchef.near\";\nconst marketId = \"simple.market.mintbase1.near\";\n\nconst AFFILIATE_ACCOUNT = props.affiliateAccount || \"mintbase.near\";\nconst [page, setPage] = useState(0);\n\nconst data = fetch(\"https://graph.mintbase.xyz\", {\n  method: \"POST\",\n  headers: {\n    \"mb-api-key\": \"anon\",\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify({\n    query: `query MyQuery {\n      mb_views_nft_tokens(\n        where: {nft_contract_id: {_eq: \"mint.yearofchef.near\"}}\n        order_by: {token_id: asc}\n      ) {\n        token_id\n        title\n        owner\n        media\n        metadata_id\n        listings {\n          price\n        }\n      }\n      mb_views_nft_owned_tokens_aggregate(\n        distinct_on: owner\n        where: {nft_contract_id: {_eq: \"mint.yearofchef.near\"}}\n      ) {\n        aggregate {\n          count(distinct: true)\n        }\n      }\n    }\n    \n  `,\n  }),\n});\nconst nfts = data?.body?.data?.mb_views_nft_tokens;\nconst owners =\n  data?.body?.data?.mb_views_nft_owned_tokens_aggregate?.aggregate.count;\nconst YoctoToNear = (amountYocto) => {\n  return new Big(amountYocto || 0).div(new Big(10).pow(24)).toString();\n};\n\nlet buy = (price, token_id) => {\n  const gas = 200000000000000;\n  const deposit = new Big(price).toFixed(0);\n  Near.call(\n    marketId,\n    \"buy\",\n    {\n      nft_contract_id: contract,\n      token_id: token_id,\n    },\n    gas,\n    deposit\n  );\n};\n\nif (!data.ok) {\n  return \"Loading\";\n}\n\nconst size = \"20em\";\nconst NFTcard = styled.a`\n  display: flex;\n  width: 250px;\n  flex-direction: column;\n  border: 2px solid #ec2109;\n  border-radius: 10px;\n  box-shadow: 0px 0px 5px #ec20096b;\n  transition: all 300ms ease-in-out;\n  cursor: pointer;\n  overflow: hidden;\n  text-decoration: none;\n  height: 100%;\n  :hover {\n    box-shadow: 0px 0px 20px #ec20096b;\n    text-decoration: none;\n  }\n  img {\n    height: 250px;\n    object-fit: cover;\n    position: relative;\n    :before {\n      content: \" \";\n      display: block;\n      position: absolute;\n      height: 250px;\n      width: 250px;\n      background-image: url(\"https://image-cache-service-z3w7d7dnea-ew.a.run.app/small?url=https://ipfs.io/ipfs/QmYF3z6rGwRVRGHfWzRpd9QQQKTcA3zfNkBkkgw3kwmCbW\");\n    }\n  }\n  .desc {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 1rem;\n  }\n  .tile {\n    color: black;\n  }\n  .listed {\n    font-size: 10px;\n    color: #6c757d;\n    margin-left: auto;\n  }\n  .price {\n    font-size: 12px;\n    color: #ec2109;\n    margin-left: auto;\n    font-weight: bold;\n  }\n`;\n\nconst Pagination = styled.div`\n  display: flex;\n  gap: 1rem;\n  justify-content: center;\n  div {\n    border: 1px solid transparent;\n    background: #ec2109;\n    border-radius: 2px;\n    padding: 10px;\n    font-size: 12px;\n    color: white;\n    cursor: pointer;\n    :hover {\n      background: #ec200975;\n    }\n    &.active {\n      background: white;\n      color: #ec2109;\n      border-color: #ec2109;\n    }\n  }\n`;\nconst Stats = styled.div`\n  display: flex;\n  gap: 1rem;\n  padding: 1rem;\n  .vertical-line {\n    width: 2px;\n    height: 100%;\n    background: rgb(236, 33, 9);\n  }\n`;\nconst Total = styled.div`\n  font-size: 20px;\n  flex-direction: column;\n  text-align: center;\n  div:last-child {\n    color: #ec2109;\n    font-weight: 600;\n  }\n`;\n\n// Paginaton\nconst perPage = 50;\n// list of pages\nconst paginations = [...Array(parseInt(nfts?.length / perPage) + 1).keys()];\n\nlet lastElement = paginations[paginations.length - 1];\nconst handlePainate = (to) => {\n  if (to !== \"...\") {\n    setPage(parseInt(to));\n  }\n};\nconst Page = ({ children }) => {\n  return (\n    <div\n      onClick={() => handlePainate(children[0])}\n      className={`${children[0] + \"\" == page + \"\" ? \"active\" : \"\"}`}\n    >\n      {children[0]}\n    </div>\n  );\n};\nconst Number = () => {\n  if (page === 0) {\n    return (\n      <Pagination>\n        <Page>0</Page>\n        <Page>{page + 1}</Page>\n        <Page>...</Page>\n        <Page>{lastElement}</Page>\n      </Pagination>\n    );\n  } else if (page === lastElement) {\n    return (\n      <Pagination>\n        <Page>0</Page>\n        <Page>...</Page>\n        <Page>{page - 1}</Page>\n        <Page>{page}</Page>\n      </Pagination>\n    );\n  } else if (page + 1 === lastElement) {\n    return (\n      <Pagination>\n        <Page>0</Page>\n        <Page>...</Page>\n        <Page>{page - 1}</Page>\n        <Page>{page}</Page>\n        <Page>{lastElement}</Page>\n      </Pagination>\n    );\n  } else if (page + 1 < lastElement && page > 3) {\n    return (\n      <Pagination>\n        <Page>0</Page>\n        <Page>...</Page>\n        <Page>{page - 1}</Page>\n        <Page>{page}</Page>\n        <Page>{page + 1}</Page>\n        <Page>...</Page>\n        <Page>{lastElement}</Page>\n      </Pagination>\n    );\n  } else if (page < lastElement) {\n    return (\n      <Pagination>\n        <Page>0</Page>\n        <Page>{page}</Page>\n        <Page>{page + 1}</Page>\n        <Page>...</Page>\n        <Page>{lastElement}</Page>\n      </Pagination>\n    );\n  }\n};\n\nreturn nfts.length > 0 ? (\n  <>\n    <Stats>\n      <Total>\n        <div> Total</div> <div>{nfts.length}</div>\n      </Total>\n      <div className=\"vertical-line\" />\n      <Total>\n        <div> Owners</div> <div>{owners}</div>\n      </Total>\n    </Stats>\n    <div className=\"d-flex gap-4 flex-wrap\">\n      {nfts.slice(page * perPage, (page + 1) * perPage).map((nft) => {\n        let priceYocto = nft.listings[0].price;\n        if (priceYocto) {\n          priceYocto = priceYocto\n            .toLocaleString()\n            .replace(/,/g, \"\")\n            .replace(/\\s/g, \"\");\n        }\n        const priceNear = YoctoToNear(priceYocto);\n        return (\n          <div className=\"d-flex flex-column wrap gap-1 w-15 p-3\">\n            <NFTcard\n              href={`https://mintbase.xyz/meta/${nft.metadata_id.replace(\n                \":\",\n                \"%3A\"\n              )}`}\n              target=\"_blank\"\n            >\n              <img\n                src={\n                  \"https://image-cache-service-z3w7d7dnea-ew.a.run.app/media?url=\" +\n                  nft.media\n                }\n                alt={nft.title}\n              />\n              <div className=\"desc\">\n                <div className=\"tile\">{nft.title}</div>\n                {!priceYocto && <div className=\"listed\">not listed</div>}\n                {priceYocto && (\n                  <button\n                    disabled={!accountId}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      if (!accountId) return;\n                      buy(priceYocto, nft.token_id);\n                    }}\n                    className=\"btn-main\"\n                    style={{\n                      width: \"100%\",\n                      textAlign: \"cetner\",\n                    }}\n                  >\n                    Buy {priceNear} N\n                  </button>\n                )}\n              </div>\n            </NFTcard>\n          </div>\n        );\n      })}\n    </div>\n    {<Number />}\n  </>\n) : (\n  <p>loading...</p>\n);\n", "metadata": {"fork_of": "bos.yearofchef.near/widget/explore@111938792"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.yearofchef.near/widget/explore", "fact_widget_deployments_id": "0d75bcad074d3d48a1bb86624cae5382", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}