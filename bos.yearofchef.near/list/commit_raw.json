{"tx_hash": "F7Hm4FqR3JamyK6n17KF6REYsK1TEFYj1bfCw1AgnmTF", "action_id_social": "3m4nyZ64TMefzv5TfEsBo1e3HNiAypDQhAg4ZG1uvWVZ-0-widget", "block_id": 111938755, "block_timestamp": "2024-02-02T14:42:47.905Z", "signer_id": "bos.yearofchef.near", "widget_name": "list", "source_code": "const accountId = context.accountId;\nconst counter = 2030;\n\nif (!accountId) {\n  return \"Please sign in with NEAR wallet\";\n}\n// const nfts = Near.view(contractId, \"nft_tokens\");\n// Market Contract\nconst tradeportmarket = \"market.tradeport.near\";\nconst genadropmarket = \"market.genadrop.near\";\nconst defaultCustomMarket = \"apollo42.near\";\nconst mintbasemarket = \"simple.market.mintbase1.near\";\nconst parasmarket = \"marketplace.paras.near\";\n\n// market icons\nconst marketIcons = {\n  Paras: \"bafkreigei3gwjybqb52xfdcbkc5a2eizfeil2u2rkkvzmedwmxz7ncu5fa\",\n  Mintbase: \"bafkreichfuhgaiz74mrrestwowz2dfnzd6yhn3ecu4bal2abe2qxobo5va\",\n  Genadrop: \"bafkreia5tclx5pt2h6jk2mcf2jsmi7zarzgwoivyozpohexekzldax7v6m\",\n  Tradeport: \"bafkreigz4cytm5z5iqqkmx3bl4j7r2ti7yetxb4hi6a7xajyyijforluna\",\n};\n\nconst [state, setState] = useState({\n  price: \"\",\n  selectedNft: null,\n  mintbaseMarketId: \"\",\n  title: \"name\",\n  imageUrl: \"\",\n  owner: \"owner\",\n  description: \"description\",\n});\n\nconst { marketToList, price, selectedNft, mintbaseMarketId } = state;\nconst contractId = selectedNft?.contractId || \"\";\nconst tokenId = selectedNft?.tokenId || \"\";\n\nconst updateState = (update) => {\n  setState({ ...state, ...update });\n};\n\n// market links\nfunction fetchMintbaseURL() {\n  asyncFetch(\"https://graph.mintbase.xyz/mainnet\", {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"omni-site\",\n      \"Content-Type\": \"application/json\",\n      \"x-hasura-role\": \"anonymous\",\n    },\n    body: JSON.stringify({\n      query: `\n        query MyQuery {\n        nft_listings(where: {token_id: {_eq: \"${tokenId}\"}}) {\n      \tmetadata_id\n      }\n    }\n      `,\n    }),\n  }).then((data) => {\n    if (data.body.data.nft_listings?.length) {\n      updateState({\n        mintbaseMarketId: data.body.data.nft_listings[0].metadata_id,\n      });\n    }\n  });\n}\nfetchMintbaseURL();\nconst mintBaseLink = `https://www.mintbase.xyz/meta/${mintbaseMarketId}`;\nconst parasLink = `https://paras.id/token/${contractId}::${tokenId}`;\nconst tradeportLink = `https://www.tradeport.xyz/near/collection/${\n  contractId?.includes(\"genadrop\")\n    ? \"genadrop-contract.nftgen.near\"\n    : contractId\n}?tab=items&tokenId=${tokenId}`;\n\nconsole.log(mintBaseLink);\n\n// Price in YoctoNear\nconst _price = (price) =>\n  Number(Number(new Big(price).mul(new Big(10).pow(24)).toString()))\n    .toLocaleString()\n    .replace(/,/g, \"\");\n// msg arg\nconst trpMsg = () =>\n  JSON.stringify({\n    price: _price(price),\n    market_type: \"sale\",\n    ft_token_id: \"near\",\n  });\n\nconst msg = () =>\n  JSON.stringify({\n    price: _price(price),\n  });\n\nconst ipfsUrl = (cid) => `https://ipfs.near.social/ipfs/${cid}`;\n\nconst data = fetch(\"https://graph.mintbase.xyz\", {\n  method: \"POST\",\n  headers: {\n    \"mb-api-key\": \"omni-site\",\n    \"Content-Type\": \"application/json\",\n    \"x-hasura-role\": \"anonymous\",\n  },\n  body: JSON.stringify({\n    query: `\n      query v2_omnisite_GetOwnedTokens{\n        tokens: mb_views_nft_owned_tokens(\n          where: {\n            owner: { _eq: \"${accountId}\" }\n          }\n        ) {\n          tokenId: token_id\n          contractId: nft_contract_id\n          media\n        }}\n    `,\n  }),\n});\nconst nfts = data.body?.data?.tokens;\n\nconst handleList = () => {\n  if (!selectedNft) return console.log(\"select nft to list\");\n  if (!parseFloat(price)) return console.log(\"enter a price\");\n  // need to buffer serialize arguments, add helper functions with state arguments\n  const gas = 1e14; // 100 tGas\n  //   const deposit = 1; // exactly 1 yocto\n  const deposit = 1e22; // 0.01 near\n  const tokenId = selectedNft.tokenId;\n  const contractId = selectedNft.contractId;\n  Near.call([\n    // tradeport\n    // {\n    //   contractName: tradeportmarket,\n    //   methodName: \"storage_deposit\",\n    //   args: {\n    //     receiver_id: accountId,\n    //   },\n    //   gas,\n    //   deposit: deposit,\n    // },\n    // {\n    //   contractName: contractId,\n    //   // need to wrap first with near_deposit\n    //   methodName: \"nft_approve\",\n    //   args: {\n    //     token_id: tokenId,\n    //     account_id: tradeportmarket,\n    //     msg: trpMsg(),\n    //   },\n    //   gas: gas,\n    //   deposit: deposit,\n    // },\n    // mintbasemarket\n    {\n      contractName: mintbasemarket,\n      methodName: \"deposit_storage\",\n      args: {\n        receiver_id: accountId,\n      },\n      gas,\n      deposit: deposit,\n    },\n    {\n      contractName: contractId,\n      // need to wrap first with near_deposit\n      methodName: \"nft_approve\",\n      args: {\n        token_id: tokenId,\n        account_id: mintbasemarket,\n        msg: msg(),\n      },\n      gas: gas,\n      deposit: 8e20, // may take this out\n    },\n    //genadropmarket\n    {\n      contractName: genadropmarket,\n      methodName: \"deposit_storage\",\n      args: {\n        receiver_id: accountId,\n      },\n      gas,\n      deposit: deposit,\n    },\n    {\n      contractName: contractId,\n      // need to wrap first with near_deposit\n      methodName: \"nft_approve\",\n      args: {\n        token_id: tokenId,\n        account_id: genadropmarket,\n        msg: msg(),\n      },\n      gas: gas,\n      deposit: deposit, // may take this out\n    },\n    // parasmarket\n    // {\n    //   contractName: parasmarket,\n    //   methodName: \"storage_deposit\",\n    //   args: {\n    //     receiver_id: accountId,\n    //   },\n    //   gas,\n    //   deposit: 859e19,\n    // },\n    // {\n    //   contractName: contractId,\n    //   // need to wrap first with near_deposit\n    //   methodName: \"nft_approve\",\n    //   args: {\n    //     token_id: tokenId,\n    //     account_id: parasmarket,\n    //     msg: trpMsg(), // need to add the variables and buffer seerailize\n    //   },\n    //   gas: gas,\n    //   deposit: 4e20, // may take this out\n    // },\n  ]);\n};\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n  gap: 80px;\n  margin-top: 2rem;\n  .nft-preview {\n    width: 100%;\n    height: 30rem;\n    object-fit: cover;\n    border-radius: 1rem;\n  }\n`;\n\nconst NFTs = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  margin-top: 2rem;\n  div {\n    width: 10rem;\n    height: 10rem;\n    object-fit: cover;\n    border: 2px solid transparent;\n    border-radius: 10px;\n    cursor: pointer;\n    transition: all 300ms cubic-bezier(0.39, 0.575, 0.565, 1);\n    :hover {\n      border-color: #ec2109;\n    }\n    &.selected {\n      border-color: #ec2109;\n    }\n  }\n`;\n\nconst Form = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  .label {\n    font-weight: bold;\n    margin: 1rem 0 4px;\n  }\n  .price {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    input {\n      width: 5rem;\n      :focus {\n        border-color: #ec2109;\n        box-shadow: 0px 0px 5px #ec20096b;\n      }\n    }\n  }\n  .bg-icon1 {\n    rotate: 15deg;\n    align-self: flex-end;\n    width: 10rem;\n  }\n  .bg-icon2 {\n    position: absolute;\n    rotate: -20deg;\n    top: 0;\n    right: 0;\n    width: 10rem;\n  }\n`;\nconst MarketIcons = styled.div`\n  display: flex;\n  gap: 10px;\n  div {\n    display: flex;\n    gap: 4px;\n    align-items: center;\n    font-family: Arial, sans-serif;\n  }\n  img {\n    width: 1rem;\n    height: 1rem;\n    object-fit: cover;\n  }\n`;\n\nconst size = \"100%\";\nconsole.log(title);\nreturn (\n  <>\n    {selectedNft && (\n      <Grid>\n        <div className=\"nft-preview\">\n          <div>{selectedNft.name}</div>\n          <Widget\n            src=\"mob.near/widget/NftImage\"\n            key={selectedNft}\n            props={{\n              nft: {\n                tokenId: selectedNft.tokenId,\n                contractId: selectedNft.contractId,\n              },\n              style: {\n                width: size,\n                height: size,\n                objectFit: \"cover\",\n                minWidth: size,\n                minHeight: size,\n                maxWidth: size,\n                maxHeight: size,\n                overflowWrap: \"break-word\",\n                borderRadius: \"inherit\",\n              },\n              className: \"\",\n              fallbackUrl:\n                \"https://ipfs.near.social/ipfs/bafkreihdiy3ec4epkkx7wc4wevssruen6b7f3oep5ylicnpnyyqzayvcry\",\n              alt: `NFT ${selectedNft.contractId} ${selectedNft.tokenId}`,\n            }}\n          />\n        </div>\n        <Form>\n          <div className=\"label\">List to</div>\n          <MarketIcons>\n            {Object.keys(marketIcons).map((market) => (\n              <div key={market}>\n                <img src={ipfsUrl(marketIcons[market])} alt={market} /> {market}\n              </div>\n            ))}\n          </MarketIcons>\n          <div className=\"label\">Price</div>\n          <div className=\"price\">\n            <input\n              type=\"number\"\n              value={price}\n              min=\"0\"\n              onChange={(e) => updateState({ price: e.target.value })}\n            />\n            NEAR\n          </div>\n          <div onClick={handleList} className=\"btn-main\">\n            List\n          </div>\n          <img className=\"bg-icon2\" src={ipfsUrl(bgIocns[1])} alt=\"\" />\n        </Form>\n      </Grid>\n    )}\n    <NFTs>\n      {nfts?.map((nft) => (\n        <div\n          key={nft.tokenId}\n          className={`${\n            selectedNft?.tokenId === nft.tokenId ? \"selected\" : \"\"\n          }`}\n          onClick={() => updateState({ selectedNft: nft })}\n        >\n          <Widget\n            src=\"mob.near/widget/NftImage\"\n            props={{\n              nft: { tokenId: nft.tokenId, contractId: nft.contractId },\n              style: {\n                width: size,\n                height: size,\n                objectFit: \"cover\",\n                minWidth: size,\n                minHeight: size,\n                maxWidth: size,\n                maxHeight: size,\n                overflowWrap: \"break-word\",\n                borderRadius: \"inherit\",\n              },\n              className: \"\",\n              fallbackUrl:\n                \"https://ipfs.near.social/ipfs/bafkreihdiy3ec4epkkx7wc4wevssruen6b7f3oep5ylicnpnyyqzayvcry\",\n              alt: `NFT ${nft.contractId} ${nft.tokenId}`,\n            }}\n          />\n        </div>\n      ))}\n    </NFTs>\n    {nfts?.length === 0 && <div className=\"no-nft\">You own no NFT yet.</div>}\n  </>\n);\n", "metadata": {"description": "The free mint of 2024 hand-drawn dragon-chef NFTs for public goods supporters on \ud83e\uded5 Potlock where royalties are auto-redistributed to approved public goods on the registry.", "image": {"ipfs_cid": "bafkreialeeaskhubttjssps3tpzieecddaryonbkf7ie7mmd7mxh7deegy"}, "linktree": {"website": "www.yearofchef.org/"}, "name": "list", "tags": {"nft-listing": ""}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.yearofchef.near/widget/list", "fact_widget_deployments_id": "ee67ac2b430010e238edaadfb86f381f", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}