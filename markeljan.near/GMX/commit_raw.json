{"tx_hash": "9WDRE9NpKMnG8aAVkmx8eCE5aw9zYtg7RQmyy6kcJWWC", "action_id_social": "GgCZmmcxe5MYuCYZ1ctT5ACsa4vto9LWYfHUZxJAx4Ss-0-widget", "block_id": 103462975, "block_timestamp": "2023-10-15T21:55:19.057Z", "signer_id": "markeljan.near", "widget_name": "GMX", "source_code": "/// Layout\nconst DaisyUIWrapper = ({ children }) => {\n  return (\n    <Widget\n      src=\"igris.near/widget/DaisyUIWrapper\"\n      props={{\n        children,\n        daisyUiTheme: \"synthwave\",\n      }}\n    />\n  );\n};\n\n/// Assets\nconst IconETH = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"24.002\"\n      viewBox=\"0 0 24 24.002\"\n      width=\"24\"\n    >\n      <path d=\"m0 .003h24v24h-24z\" fill=\"none\" />\n      <path\n        d=\"m23.64 14.905a12 12 0 1 1 -8.74-14.545 12 12 0 0 1 8.74 14.545z\"\n        fill=\"#fff\"\n        transform=\"translate(0 -.001)\"\n      />\n      <g transform=\"translate(6.858 3.628)\">\n        <path\n          d=\"m383.612 0-.112.382v11.075l.112.112 5.141-3.039z\"\n          fill=\"#343434\"\n          transform=\"translate(-378.471)\"\n        />\n        <path d=\"m5.141 0-5.141 8.53 5.141 3.039z\" fill=\"#8c8c8c\" />\n        <path\n          d=\"m387.3 727.927-.063.077v3.945l.063.185 5.144-7.245z\"\n          fill=\"#3c3c3b\"\n          transform=\"translate(-382.162 -715.385)\"\n        />\n        <path\n          d=\"m5.141 732.135v-4.207l-5.141-3.038z\"\n          fill=\"#8c8c8c\"\n          transform=\"translate(0 -715.385)\"\n        />\n        <path\n          d=\"m392.07 477.706 5.141-3.039-5.141-2.337z\"\n          fill=\"#141414\"\n          transform=\"translate(-386.929 -466.137)\"\n        />\n        <path\n          d=\"m0 474.667 5.141 3.039v-5.376z\"\n          fill=\"#393939\"\n          transform=\"translate(0 -466.137)\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nconst IconLong = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"9.856\"\n      viewBox=\"0 0 15.704 9.856\"\n      width=\"15.704\"\n    >\n      <path\n        d=\"m529-488.59v5.67l-2.113-2.109-5.326 5.319-2.924-2.921-3.9 3.9-1.444-1.448 5.341-5.341 2.924 2.924 3.882-3.882-2.113-2.109z\"\n        fill=\"#fff\"\n        transform=\"translate(-513.3 488.59)\"\n      />\n    </svg>\n  );\n};\n\nconst IconShort = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"9.856\"\n      viewBox=\"0 0 15.704 9.856\"\n      width=\"15.704\"\n    >\n      <path\n        d=\"m0 0v5.67l2.113-2.11 5.326 5.32 2.924-2.921 3.9 3.9 1.437-1.451-5.337-5.341-2.924 2.924-3.882-3.882 2.113-2.109z\"\n        fill=\"#fff\"\n        transform=\"matrix(-1 0 0 -1 15.704 9.856)\"\n      />\n    </svg>\n  );\n};\n\nconst LogoGMX = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"21.462\"\n      viewBox=\"0 0 82.878 21.462\"\n      width=\"82.878\"\n    >\n      <linearGradient\n        id=\"a\"\n        gradientUnits=\"objectBoundingBox\"\n        x1=\".536\"\n        x2=\".011\"\n        y1=\".026\"\n        y2=\"1\"\n      >\n        <stop offset=\"0\" stopColor=\"#03d1cf\" stopOpacity=\".988\" />\n        <stop offset=\"1\" stopColor=\"#4e09f8\" />\n      </linearGradient>\n      <path\n        d=\"m555.182 717.462-14.735-21.462-14.78 21.462h20.592l-5.812-8.191-2.883 4.256h-3.064l5.949-8.557 8.6 12.493z\"\n        fill=\"url(#a)\"\n        transform=\"translate(-525.667 -696)\"\n      />\n      <path\n        d=\"m9.216-8.544c-.168 0-.24.072-.24.24v1.44c0 .168.072.24.24.24h4.776v2.524a5.361 5.361 0 0 1 -4.848 2.42c-3.576 0-5.784-2.3-5.784-6.72 0-4.392 2.592-6.72 5.544-6.72 2.3 0 4.176.912 4.776 3.12a.281.281 0 0 0 .288.24h1.532c.168 0 .264-.072.264-.24-.648-3.36-3.528-5.04-6.864-5.04-3.744 0-7.656 2.88-7.656 8.64 0 5.688 3.7 8.64 7.992 8.64a7.468 7.468 0 0 0 6.528-3.456 1.567 1.567 0 0 0 .24-.912v-4.172c0-.168-.072-.24-.24-.24zm24.912-8.016c0-.168-.072-.24-.24-.24h-2.28a.37.37 0 0 0 -.384.24l-4.656 10.68-4.656-10.68a.37.37 0 0 0 -.384-.24h-2.28c-.168 0-.24.072-.24.24v16.32c0 .168.072.24.24.24h1.536c.168 0 .24-.072.24-.24v-13.416l4.7 10.632a.331.331 0 0 0 .312.216h1.064a.331.331 0 0 0 .312-.216l4.7-10.632v13.416c0 .168.072.24.24.24h1.536c.168 0 .24-.072.24-.24zm5.232 0c-.168-.216-.168-.24-.336-.24h-1.848c-.168 0-.24.12-.168.24l5.088 7.7-5.712 8.62c-.072.12 0 .24.168.24h1.8c.168 0 .216-.024.384-.24l4.564-6.86 4.556 6.86c.168.216.216.24.384.24h1.8c.168 0 .24-.12.168-.24l-5.708-8.616 5.088-7.7c.072-.12 0-.24-.168-.24h-1.852c-.168 0-.168.024-.336.24l-3.932 5.924z\"\n        fill=\"#fff\"\n        transform=\"translate(32.642 19.131)\"\n      />\n    </svg>\n  );\n};\n\n/// CONSTANTS\n\nconst ARBITRUM_CHAIN_ID = 42161;\nconst ARBITRUM_CHAIN_ID_HEX = \"0xa4b1\";\nconst ARBITRUM_GOERLI_CHAIN_ID = 421613;\nconst ARBITRUM_GOERLI_CHAIN_ID_HEX = \"0x66eed\";\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\nconst USD_DECIMALS = 30;\nconst LEVERAGE_SHORTCUTS = [2, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50];\n\nconst CONFIG = {\n  mainnet: {\n    CHAIN_ID: ARBITRUM_CHAIN_ID,\n    GMX_PRICE_ORACLE_URL: \"https://arbitrum-api.gmxinfra.io\",\n    GMX_ROUTER_ADDRESS: \"0x7C68C7866A64FA2160F78EEaE12217FFbf871fa8\",\n    ETH_ORDERVAULT_ADDRESS: \"0x31eF83a530Fde1B38EE9A18093A333D8Bbbc40D5\",\n    WETH_TOKEN_ADDRESS: \"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1\",\n    GMX_MARKET_TOKEN_ADDRESS: \"0x70d95587d40A2caf56bd97485aB3Eec10Bee6336\",\n    SWAP_PATH: [\"0x70d95587d40A2caf56bd97485aB3Eec10Bee6336\"],\n    NETWORK_INFO: {\n      blockExplorerUrls: [\"https://arbiscan.io/\"],\n      iconUrls: [\n        \"https://arbiscan.io/token/images/arbitrumone2_32_new.png?v=23.09.4.1\",\n      ],\n      rpcUrls: [\"https://arb1.arbitrum.io/rpc\"],\n      chainId: \"0xa4b1\",\n      chainName: \"Arbitrum One\",\n      nativeCurrency: {\n        name: \"ETH\",\n        symbol: \"ETH\",\n        decimals: 18,\n      },\n    },\n  },\n  testnet: {\n    CHAIN_ID: ARBITRUM_GOERLI_CHAIN_ID,\n    GMX_PRICE_ORACLE_URL:\n      \"https://gmx-synthetics-api-arb-goerli-4vgxk.ondigitalocean.app\",\n    GMX_ROUTER_ADDRESS: \"0xFE98518C9c8F1c5a216E999816c2dE3199f295D2\",\n    ETH_ORDERVAULT_ADDRESS: \"0x82aFd2590814a7Ce3d7ea6b63F80481F8b227bA9\",\n    WETH_TOKEN_ADDRESS: \"0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3\",\n    GMX_MARKET_TOKEN_ADDRESS: \"0x1529876A9348D61C6c4a3EEe1fe6CbF1117Ca315\",\n    SWAP_PATH: [\n      \"0x72349b00768601D9598084220224948CE5b6Ebdd\",\n      \"0xbdf85AaF3c63CcE42ee2f18d75f9fd8Aca4D5923\",\n      \"0x1012DAa9ee5C90136FD3e105b63094Aa81a0A64C\",\n    ],\n    NETWORK_INFO: {\n      blockExplorerUrls: [\"https://goerli.arbiscan.io/\"],\n      iconUrls: [\n        \"https://arbiscan.io/token/images/arbitrumone2_32_new.png?v=23.09.4.1\",\n      ],\n      rpcUrls: [\"https://goerli-rollup.arbitrum.io/rpc\"],\n      chainId: \"0x66eed\",\n      chainName: \"Arbitrum Goerli\",\n      nativeCurrency: {\n        name: \"Arbitrum Goerli Ether\",\n        symbol: \"AGOR\",\n        decimals: 18,\n      },\n    },\n  },\n};\n\n/// UTILS\nfunction formatUsd(num) {\n  return num / Math.pow(10, 12);\n}\n\n// calculate price with slippage of 0.5%\nfunction calculatePriceWithSlippage() {\n  if (isLong) {\n    return ethers.BigNumber.from(maxPrice).mul(1005).div(1000);\n  } else {\n    return ethers.BigNumber.from(minPrice).mul(995).div(1000);\n  }\n}\n\n/// State\nState.init({\n  payAmount: \"\",\n  payTokenData: undefined,\n  leverage: 1.1,\n  isLong: true,\n  sender: undefined,\n  balance: undefined,\n  network: undefined,\n  showSettings: false,\n});\nconst {\n  payAmount,\n  payTokenData,\n  leverage,\n  isLong,\n  sender,\n  balance,\n  network,\n  showSettings,\n} = state;\n\nconst { maxPrice, minPrice, tokenSymbol } = payTokenData;\n\nconst currentConfig = CONFIG[network] || CONFIG[\"testnet\"];\n\nconst entryPrice = payTokenData && formatUsd(isLong ? maxPrice : minPrice);\nconst entryPriceDisplay =\n  entryPrice &&\n  \"$\" +\n    entryPrice.toLocaleString(\"en-US\", {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    });\n\nconst payValue = payAmount && payAmount * entryPrice;\nconst payValueDisplay =\n  payValue > 0 &&\n  \": $\" +\n    payValue.toLocaleString(\"en-US\", {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    });\nconst acceptablePriceBigNumber = maxPrice && calculatePriceWithSlippage();\nconst acceptablePriceDisplay =\n  acceptablePriceBigNumber &&\n  \"$\" +\n    formatUsd(acceptablePriceBigNumber).toLocaleString(\"en-US\", {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    });\nconst leverageAmount = payAmount && payAmount * leverage * 0.99;\n\nconst leveragedValue = payValue && leverageAmount * entryPrice;\nconst leveragedValueDisplay =\n  leveragedValue > 0 &&\n  \": ~$\" +\n    leveragedValue.toLocaleString(\"en-US\", {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    });\n\nconst feeValue = leveragedValue && leveragedValue * 0.0014;\nconst feeValueDisplay =\n  \"-$\" +\n  Math.max(feeValue, 1.5).toLocaleString(\"en-US\", {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n\n// FETCH ABI\nconst abiResponse = fetch(\n  \"https://gist.githubusercontent.com/Markeljan/8943727d183aaa886e1a28511c497392/raw/6a5e7761b8f69b49e9c8560e9d95f7446b40a5d4/GMXExchangeRouterABI.json\"\n);\n\nif (!abiResponse.ok) {\n  return \"Loading ABI...\";\n}\n\nconst GMX_ROUTER_ABI = abiResponse.body;\n\nconst iface = new ethers.utils.Interface(GMX_ROUTER_ABI);\n\n// FETCH DATA\nconst gmxPriceOracleResponse = fetch(\n  currentConfig.GMX_PRICE_ORACLE_URL + \"/prices/tickers\"\n);\nif (!gmxPriceOracleResponse.ok) {\n  throw new Error(\"Error fetching ETH price.\");\n}\nconst gmxPriceData = gmxPriceOracleResponse.body;\nconst ethTokenData = gmxPriceData.find((item) => item.tokenSymbol === \"ETH\");\nState.update({\n  payTokenData: ethTokenData,\n});\n\nconst primaryButtonText =\n  network === \"unsupported\"\n    ? \"Switch network\"\n    : payAmount <= 0\n    ? \"Enter an amount\"\n    : Number(payAmount) > Number(balance)\n    ? \"Insufficient ETH balance\"\n    : isLong\n    ? \"Long ETH\"\n    : \"Short ETH\";\nconst primaryButtonDisabled =\n  network === \"unsupported\"\n    ? false\n    : Number(payAmount) > Number(balance) || payAmount <= 0;\n\n// RECONNECT TO WALLET\nif (sender === undefined) {\n  State.update({ sender: Ethers.send(\"eth_requestAccounts\", [])[0] });\n}\n\n// FETCH WALLET BALANCE\nif (sender && balance === undefined) {\n  Ethers.provider()\n    .getBalance(sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(12) });\n    });\n\n  Ethers.provider()\n    .getNetwork()\n    .then((network) => {\n      if (network.chainId === CONFIG.mainnet.CHAIN_ID) {\n        State.update({ network: \"mainnet\" });\n      } else if (network.chainId === CONFIG.testnet.CHAIN_ID) {\n        State.update({ network: \"testnet\" });\n      } else {\n        State.update({ network: \"unsupported\" });\n      }\n    });\n}\n\n/// FUNCTIONS\nfunction multicall(calls, value) {\n  const gmxRouterContract = new ethers.Contract(\n    currentConfig.GMX_ROUTER_ADDRESS,\n    GMX_ROUTER_ABI,\n    Ethers.provider().getSigner()\n  );\n  const encodedCalls = calls.map((call) =>\n    gmxRouterContract.interface.encodeFunctionData(call.method, call.params)\n  );\n  return gmxRouterContract[\"multicall\"](encodedCalls, { value: value });\n}\n\n/// HANDLERS\n\nfunction handleClickSubmitOrder() {\n  const sizeDeltaUsd =\n    leveragedValue &&\n    ethers.utils.parseUnits(leveragedValue.toString(), USD_DECIMALS);\n\n  const calls = [\n    {\n      method: \"sendWnt\",\n      params: [\n        currentConfig.ETH_ORDERVAULT_ADDRESS,\n        ethers.utils.parseUnits(payAmount, 18),\n      ],\n    },\n    {\n      method: \"createOrder\",\n      params: [\n        {\n          addresses: {\n            receiver: sender,\n            initialCollateralToken: currentConfig.WETH_TOKEN_ADDRESS,\n            callbackContract: ZERO_ADDRESS,\n            market: currentConfig.GMX_MARKET_TOKEN_ADDRESS,\n            swapPath: currentConfig.SWAP_PATH,\n            uiFeeReceiver: ZERO_ADDRESS,\n          },\n          numbers: {\n            sizeDeltaUsd: sizeDeltaUsd,\n            initialCollateralDeltaAmount: {\n              type: \"BigNumber\",\n              hex: \"0x00\",\n            },\n            triggerPrice: {\n              type: \"BigNumber\",\n              hex: \"0x00\",\n            },\n            acceptablePrice: acceptablePriceBigNumber,\n            executionFee: {\n              type: \"BigNumber\",\n              hex: \"0x02ee5547f09000\",\n            },\n            callbackGasLimit: {\n              type: \"BigNumber\",\n              hex: \"0x00\",\n            },\n            minOutputAmount: {\n              type: \"BigNumber\",\n              hex: \"0x00\",\n            },\n          },\n          orderType: 2,\n          decreasePositionSwapType: 0,\n          isLong: isLong,\n          shouldUnwrapNativeToken: true,\n          referralCode:\n            \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        },\n      ],\n    },\n  ];\n\n  multicall(calls, ethers.utils.parseUnits(payAmount, 18));\n}\n\nfunction handleClickMax() {\n  State.update({\n    payAmount: (balance * 0.95).toFixed(4) || \"0.0\",\n  });\n}\n\nfunction handleClickSwitchNetwork(network) {\n  const chainId =\n    network === \"mainnet\"\n      ? ARBITRUM_CHAIN_ID_HEX\n      : ARBITRUM_GOERLI_CHAIN_ID_HEX;\n  try {\n    Ethers.send(\"wallet_switchEthereumChain\", [{ chainId: chainId }]);\n  } catch (e) {\n    console.log(\"error switching network\", e);\n  }\n  try {\n    Ethers.send(\"wallet_addEthereumChain\", [CONFIG[network].NETWORK_INFO]);\n  } catch (e) {\n    console.log(\"error adding new network\", e);\n  }\n}\n\nfunction handleChangePayAmount(e) {\n  if (e.target.value === \".\" && !payAmount) {\n    State.update({\n      payAmount: \"0.\",\n    });\n  }\n  if (isNaN(e.target.value)) {\n    return;\n  }\n\n  State.update({\n    payAmount: e.target.value,\n  });\n}\n\nfunction handleChangeLeverage(e) {\n  State.update({\n    leverage: Number(e.target.value),\n  });\n}\n\nfunction handleChangePosition(isLong) {\n  State.update({\n    isLong: isLong,\n  });\n}\n\nreturn (\n  <DaisyUIWrapper>\n    <div class=\"card bg-neutral-focus text-white\">\n      <div class=\"px-4 pt-4\">\n        <div class=\"relative flex justify-center\">\n          <LogoGMX />\n          {network && (\n            <button\n              class=\"btn btn-xs btn-outline absolute right-0 top-0\"\n              onClick={() => {\n                State.update({ showSettings: !state.showSettings });\n              }}\n            >\n              {network === \"unsupported\" ? \"Unsupported network\" : network}\n            </button>\n          )}\n\n          {/* settings menu */}\n          {state.showSettings && (\n            <div class=\"absolute right-0 top-8 bg-gray-900 rounded p-3\">\n              <div class=\"flex flex-col gap-2\">\n                <button\n                  class={`btn btn-xs btn-outline${\n                    network === \"mainnet\"\n                      ? \" bg-blue-700 pointer-events-none\"\n                      : \"\"\n                  }`}\n                  onClick={() => {\n                    network === \"mainnet\"\n                      ? State.update({ showSettings: false })\n                      : handleClickSwitchNetwork(\"mainnet\");\n                  }}\n                >\n                  Mainnet\n                </button>\n                <button\n                  class={`btn btn-xs btn-outline${\n                    network === \"testnet\"\n                      ? \" bg-blue-700 pointer-events-none\"\n                      : \"\"\n                  }`}\n                  onClick={() => {\n                    network === \"testnet\"\n                      ? State.update({ showSettings: false })\n                      : handleClickSwitchNetwork(\"testnet\");\n                  }}\n                >\n                  Testnet\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n        <div class=\"flex join pt-4\">\n          <button\n            class={`btn join-item w-1/2 rounded-r-none ${\n              isLong\n                ? \"bg-blue-700 hover:bg-blue-700 focus:bg-blue-700\"\n                : \"bg-indigo-900 hover:bg-indigo-900 focus:bg-indigo-900\"\n            }`}\n            onClick={() => handleChangePosition(true)}\n          >\n            <div class=\"flex items-center gap-2 normal-case\">\n              <IconLong />\n              Long\n            </div>\n          </button>\n          <button\n            class={`btn join-item w-1/2 rounded-l-none ${\n              !isLong\n                ? \"bg-blue-700 hover:bg-blue-700 focus:bg-blue-700\"\n                : \"bg-indigo-900 hover:bg-indigo-900 focus:bg-indigo-900\"\n            }`}\n            onClick={() => handleChangePosition(false)}\n          >\n            <div class=\"flex items-center gap-2 normal-case\">\n              <IconShort />\n              Short\n            </div>\n          </button>\n        </div>\n\n        <label class=\"label\">\n          <span class=\"label-text text-lg\">Market</span>\n        </label>\n\n        <div class=\"bg-indigo-900 rounded p-2 mb-2\">\n          <label class=\"label pl-4\">\n            <span class=\"label-text text-gray-500\">Pay{payValueDisplay}</span>\n            <span class=\"label-text text-gray-500\">\n              Balance:\n              <span class=\"text-white\">{Number(balance || 0).toFixed(4)}</span>\n            </span>\n          </label>\n          <div class=\"flex\">\n            <input\n              class=\"input w-full bg-indigo-900 text-2xl focus:outline-none\"\n              onChange={(e) => handleChangePayAmount(e)}\n              value={payAmount}\n              placeholder=\"0.0\"\n            />\n            <div class=\"flex items-center space-x-1\">\n              {balance > 0 && (\n                <button\n                  class=\"btn btn-sm border-none font-normal rounded-1 px-2 mx-1 bg-blue-700 hover:bg-blue-700 focus:bg-blue-700\"\n                  onClick={handleClickMax}\n                >\n                  MAX\n                </button>\n              )}\n              <IconETH />\n              <select disabled class=\"select-ghost bg-indigo-900 text-2xl\">\n                <option disabled selected>\n                  ETH\n                </option>\n              </select>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bg-indigo-900 rounded p-2\">\n          <label class=\"label pl-4 pr-2\">\n            <span class=\"label-text text-gray-500\">\n              {isLong ? \"Long\" : \"Short\"}\n              {leveragedValueDisplay}\n            </span>\n            <span class=\"label-text\">\n              <span class=\"text-gray-500\">Leverage: </span>\n              {leverage.toFixed(2)}x\n            </span>\n          </label>\n          <div class=\"flex\">\n            <input\n              class=\"input w-full bg-indigo-900 text-2xl focus:outline-none\"\n              value={leverageAmount && `~${leverageAmount}`}\n              placeholder=\"0.0\"\n            />\n            <div class=\"flex items-center space-x-1\">\n              <IconETH />\n              <select disabled class=\"select-ghost bg-indigo-900 text-2xl\">\n                <option disabled selected>\n                  ETH\n                </option>\n              </select>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"py-2\">\n          <label class=\"label\">\n            <span class=\"label-text text-gray-500\">Leverage slider</span>\n          </label>\n\n          <input\n            class=\"range range-xs\"\n            onChange={(e) => handleChangeLeverage(e)}\n            type=\"range\"\n            min={1.1}\n            max={50}\n            value={leverage}\n            step={0.1}\n          />\n\n          <div class=\"flex justify-between flex-wrap pl-3\">\n            {LEVERAGE_SHORTCUTS.map((value) => {\n              return (\n                <button\n                  class=\"btn-xs p-0 text-gray-500 hover:text-white\"\n                  onClick={() => {\n                    State.update({ leverage: value });\n                  }}\n                >\n                  {value + \"x\"}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n\n        <label class=\"label py-0\">\n          <span class=\"label-text text-gray-500\">Pool</span>\n          <span class=\"label-text\">WETH-USDC</span>\n        </label>\n        <label class=\"label py-0\">\n          <span class=\"label-text text-gray-500\">Collateral In</span>\n          <span class=\"label-text\">USDC</span>\n        </label>\n      </div>\n\n      <div class=\"divider my-1\" />\n\n      <div class=\"px-4\">\n        <label class=\"label py-0\">\n          <span class=\"label-text text-gray-500\">Leverage</span>\n          <span class=\"label-text\">{`${leverage.toFixed(2)}x`}</span>\n        </label>\n        <label class=\"label py-0\">\n          <span class=\"label-text text-gray-500\">Entry Price</span>\n          <span class=\"label-text\">{entryPriceDisplay}</span>\n        </label>\n        <label class=\"label py-0\">\n          <span class=\"label-text text-gray-500\">Acceptable Price</span>\n          <span class=\"label-text\">{acceptablePriceDisplay}</span>\n        </label>\n      </div>\n\n      <div class=\"divider my-1\" />\n\n      <div class=\"px-4 pb-4\">\n        <label class=\"label pt-0 pb-1\">\n          <span class=\"label-text text-gray-500\">Estimated Fees</span>\n          <span class=\"label-text\">{feeValueDisplay}</span>\n        </label>\n\n        {sender ? (\n          <button\n            class={`btn w-full bg-blue-700 hover:bg-indigo-500 focus:bg-indigo-500 mt-2 ${\n              primaryButtonDisabled && \"cursor-not-allowed\"\n            }`}\n            onClick={\n              network === \"unsupported\"\n                ? () => handleClickSwitchNetwork(\"testnet\")\n                : !primaryButtonDisabled && handleClickSubmitOrder\n            }\n          >\n            {primaryButtonText}\n          </button>\n        ) : (\n          <button\n            disabled={sender && payAmount <= 0}\n            class=\"relative btn w-full bg-blue-700 hover:bg-indigo-500 focus:bg-indigo-500 mt-2\"\n          >\n            Connect Wallet\n            <Web3Connect\n              className=\"opacity-0 absolute w-full h-full\"\n              connectLabel=\"Connect with Web3\"\n            />\n          </button>\n        )}\n      </div>\n    </div>\n  </DaisyUIWrapper>\n);\n", "metadata": {"description": "# GMX SwapBox\n\nGo Long or Short ETH using GMX Decentralized Perpetual Exchange\n\n## Features\n\n- Submit ETH Long / Short positions directly to the GMX Router Contract\n- ETH payment, WETH-USDC GMX V2 pool, USDC collateral\n- Arbitrum One Mainnet and Arbitrum Goerli Testnet support\n", "image": {"ipfs_cid": "bafkreif4adbdryxdfzu55yzw33ash6vqimigx5hlliylaxgqxpyaui74ge"}, "name": "GMX", "tags": {"arbitrum": "", "defi": "", "ethereum": "", "gmx": "", "web3": "", "web3connect": ""}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/markeljan.near/widget/GMX", "fact_widget_deployments_id": "5015181c24fc377e39758c3aed24e1c0", "inserted_timestamp": "2023-10-15T23:44:46.996Z", "modified_timestamp": "2023-10-15T23:44:46.996Z", "__row_index": 2}