{"tx_hash": "5LhpufnipqcdNfEGvH4tQeU7q2cSgx3hUJfviukWRJtf", "action_id_social": "7wdsHfZexWpzpeentdpJoqqVJKg8ZGedWuyf2UJMjFEw-0-widget", "block_id": 115161193, "block_timestamp": "2024-03-21T11:59:58.313Z", "signer_id": "vlmoon.near", "widget_name": "MentorHub", "source_code": "State.init({\r\n  mentorPhoto: \"\",\r\n  mentorName: \"Mentor Name\",\r\n  mentorPoints: 0,\r\n  studentsCounter: 0,\r\n  students: [],\r\n  studentRequests: [],\r\n  currentAppThemeMode: \"lightMode\",\r\n  currentRoute: \"myinfoPage\",\r\n  myInfo: {\r\n    titleAndExperience: \"\",\r\n    skills: \"\",\r\n    description: \"\",\r\n  },\r\n  mentor: [],\r\n  myStudents: [],\r\n  idFindStudent: \"\",\r\n  verifyOurStudent: \"\",\r\n  addStudentToMyList: \"\",\r\n  ifAddStudentToMyList: true,\r\n  studentArray: [],\r\n});\r\n\r\nfunction findStudentByID(idaccount) {\r\n  const isOurStudent = Social.get(`maierr.near/myStudentsForFind/${idaccount}`);\r\n  if (isOurStudent == \"true\") {\r\n    State.update({\r\n      verifyOurStudent: idaccount,\r\n    });\r\n  } else {\r\n    State.update({\r\n      verifyOurStudent: \"\",\r\n    });\r\n  }\r\n}\r\n\r\nconst onInputChange = (newValue) => {\r\n  State.update({\r\n    addNewStudent: newValue,\r\n  });\r\n  findStudentByID(newValue);\r\n};\r\n\r\nfunction saveMyInfo(titleAndExperience, skills, description) {\r\n  const currentState = State.get();\r\n  if (\r\n    titleAndExperience !== currentState.myInfo.titleAndExperience ||\r\n    skills !== currentState.myInfo.skills ||\r\n    description !== currentState.myInfo.description\r\n  ) {\r\n    const updatedInfo = {\r\n      titleAndExperience,\r\n      skills,\r\n      description,\r\n    };\r\n    State.update({ myInfo: updatedInfo });\r\n  }\r\n}\r\n\r\nfunction addStudentToMyList(newStudentID, pageNumber, pageSize) {\r\n  const startIndex = (pageNumber - 1) * pageSize;\r\n  const endIndex = startIndex + pageSize;\r\n  let studentArray = [];\r\n  let arreyWhitIndexForAddStudent = [];\r\n  let deleteStudent = {};\r\n\r\n  for (let i = startIndex; i < endIndex; i++) {\r\n    const student = Social.get(`maierr.near/mystudents/${i}`);\r\n    if (student) {\r\n      studentArray.push(student);\r\n      deleteStudent[student] = i;\r\n    } else {\r\n      arreyWhitIndexForAddStudent.push(i);\r\n    }\r\n  }\r\n\r\n  State.update({\r\n    studentArray: studentArray,\r\n    arreyWhitIndexForAddStudent: arreyWhitIndexForAddStudent,\r\n    heashForDeletnumb: deleteStudent,\r\n  });\r\n\r\n  updatedStudents(newStudentID);\r\n}\r\n\r\nfunction updatedStudents(student) {\r\n  Near.call([\r\n    {\r\n      contractName: \"social.near\",\r\n      methodName: \"set\",\r\n      args: {\r\n        data: {\r\n          [student]: {\r\n            profile: {},\r\n          },\r\n        },\r\n      },\r\n      deposit: 1,\r\n      gas: Big(10).pow(12).mul(50),\r\n    },\r\n  ]);\r\n}\r\n\r\nfunction deleteStudent(studentID) {\r\n  const currentState = State.get();\r\n  const updatedStudents = currentState.myStudents.filter(\r\n    (s) => s.id !== studentID\r\n  );\r\n  State.update({ myStudents: updatedStudents });\r\n}\r\n\r\nconst StudentIcon = ({ student }) => {\r\n  return (\r\n    <div className=\"StudentIcon\">\r\n      <Widget\r\n        src=\"near/widget/AccountProfile\"\r\n        props={{ accountId: State.get().vrifyOurStudent }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MentorInfoCard = () => {\r\n  const myInfo = State.get().myInfo;\r\n\r\n  return (\r\n    <div>\r\n      <h3>{myInfo.titleAndExperience}</h3>\r\n      <p>Skills: {myInfo.skills}</p>\r\n      <p>Description: {myInfo.description}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n//UI Kit Theme\r\nconst appTheme = {\r\n  colors: () => {\r\n    const currentThemeMode = State.get().currentAppThemeMode;\r\n    const colors =\r\n      currentThemeMode === \"lightMode\"\r\n        ? {\r\n            standartText: \"#000000\",\r\n            backgroundColor:\r\n              \"linear-gradient(-45deg, #5F8AFA, #FFFFFF, #FFFFFF, #FFFFFF, #A463B0)\",\r\n            primary: \"#000000\",\r\n            secondary: \"#FFFFFF\",\r\n            textBlack: \"#000000\",\r\n            textWhite: \"#FFFFFF\",\r\n          }\r\n        : {\r\n            standartText: \"#FFFFFF\",\r\n            backgroundColor: \"#333333\",\r\n            primary: \"#000000\",\r\n            secondary: \"#FFFFFF\",\r\n            textBlack: \"#000000\",\r\n            textWhite: \"#FFFFFF\",\r\n          };\r\n\r\n    return colors;\r\n  },\r\n  fontSizes: {\r\n    h1: \"1.5em\",\r\n    h2: \"2em\",\r\n    h3: \"1.75em\",\r\n    h4: \"1.5em\",\r\n    h5: \"1.25em\",\r\n    h6: \"1em\",\r\n    body: \"1em\",\r\n    b1: \"1em\",\r\n    b2: \"0.9em\",\r\n    b3: \"0.8em\",\r\n  },\r\n  margins: {\r\n    small: \"0.25em\",\r\n    medium: \"0.5em\",\r\n    large: \"1em\",\r\n    xlarge: \"2em\",\r\n  },\r\n  paddings: {\r\n    small: \"0.25em\",\r\n    medium: \"0.5em\",\r\n    large: \"1em\",\r\n    xlarge: \"2em\",\r\n  },\r\n  borderRadius: {\r\n    small: \"4px\",\r\n    medium: \"8px\",\r\n    large: \"16px\",\r\n    circle: \"50%\",\r\n  },\r\n};\r\nconst appThemeService = {\r\n  switchToLightTheme: () =>\r\n    State.update({\r\n      currentAppThemeMode: \"lightMode\",\r\n    }),\r\n  switchToDarkTheme: () =>\r\n    State.update({\r\n      currentAppThemeMode: \"darkMode\",\r\n    }),\r\n  getTheme: () => appTheme,\r\n};\r\n\r\nconst Button = styled.button`\r\n  background: ${appTheme.colors().secondary};\r\n  color: ${appTheme.colors().primary};\r\n  text-transform: uppercase;\r\n  font-size: ${appTheme.fontSizes.h5};\r\n  margin: ${appTheme.margins.small};\r\n  padding: ${appTheme.paddings.medium};\r\n  width: 100px;\r\n  border: none;\r\n  border-radius: ${appTheme.borderRadius.medium};\r\n  align-self: center;\r\n`;\r\n\r\nconst GlobalContainer = styled.div`\r\n  font-family: 'Manrope', sans-serif;\r\n  height: 100vh; \r\n  background: linear-gradient(-45deg, #5F8AFA, #FFFFFF, #FFFFFF, #FFFFFF, #A463B0); /* \u041b\u0456\u043d\u0456\u0439\u043d\u0438\u0439 \u0433\u0440\u0430\u0434\u0456\u0454\u043d\u0442 */\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center; \r\n  align-items: center;\r\n  padding: ${appTheme.margins.xlarge};\r\n`;\r\n\r\nconst Body = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 800px;\r\n  background-color: ${appTheme.colors().backgroundColor};\r\n  align-items: center; \r\n`;\r\nconst NavigationBar = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center; \r\n  padding : ${appTheme.paddings.large};\r\n  background-color: transparent; \r\n`;\r\n\r\nconst NavButton = styled(Button)`\r\n  margin: 0 10px; \r\n  position: relative; \r\n`;\r\n\r\nconst GapCircle = styled.div`\r\n  width: 6px;\r\n  height: 6px;\r\n  border-radius: 50%;\r\n  background-color: ${appTheme.colors().primary};\r\n  margin: 0 5px; \r\n`;\r\n\r\nconst ProfileTab = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${appTheme.colors().backgroundColor};\r\n  justify-content: center;\r\n  align-items: center; \r\n`;\r\nconst FormContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst FormButton = styled(Button)`\r\n  width: 150px;\r\n`;\r\n\r\nconst IconContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n`;\r\n\r\nconst TaskIcon = styled.div`\r\n  width: 250px;\r\n  height: 180px;\r\n  border-radius: 20px;\r\n  background-color: ${appTheme.colors().primary};\r\n  margin: 20px;\r\n`;\r\n\r\nconst uiKitComponents = {\r\n  button: Button,\r\n  body: Body,\r\n  navigationBar: NavigationBar,\r\n  profileTab: ProfileTab,\r\n};\r\n\r\nconst routes = {\r\n  moduleA: \"vlmoon.near/widget/BOSModuleA\",\r\n  moduleB: \"vlmoon.near/widget/BOSModuleB\",\r\n  moduleC: \"vlmoon.near/widget/BOSModuleC\",\r\n  moduleD: \"vlmoon.near/widget/BOSModuleD\",\r\n};\r\n\r\nfunction navigateToModule(moduleRoute) {\r\n  State.update({\r\n    currentRoute: moduleRoute,\r\n  });\r\n}\r\n\r\nconst routesNavigator = {\r\n  MentorPage: () => navigateToModule(\"mentorPage\"),\r\n  StudentPage: () => navigateToModule(\"studentPage\"),\r\n  TaskPage: () => navigateToModule(\"taskPage\"),\r\n  MyinfoPage: () => navigateToModule(\"myinfoPage\"),\r\n};\r\n\r\nfunction getModuleDependencies(moduleRoute) {\r\n  if (moduleRoute === \"MentorPage\") {\r\n    return [\"mentorPage\"];\r\n  } else if (moduleRoute === \"studentPage\") {\r\n    return [\"studentPage\"];\r\n  } else if (moduleRoute === \"taskPage\") {\r\n    return [\"taskPage\"];\r\n  } else if (moduleRoute === \"myinfoPage\") {\r\n    return [\"myinfoPage\"];\r\n  }\r\n}\r\n\r\nconst dependencies = getModuleDependencies(State.get().currentRoute);\r\n\r\nconst accountId = context.accountId;\r\nif (!accountId) {\r\n  return \"No account ID\";\r\n}\r\n\r\nconst profile = Social.getr(`${accountId}/profile`);\r\nconst name = profile.name || \"No-name profile\";\r\n\r\n//Pages\r\nconst pages = {\r\n  mentorPage: (\r\n    <ProfileTab>\r\n      <h1>Mentor</h1>\r\n      <div\r\n        style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}\r\n      >\r\n        {State.get().mentor.map((mentor, index) => (\r\n          <MentorIcon key={index} mentor={mentor} />\r\n        ))}\r\n      </div>\r\n    </ProfileTab>\r\n  ),\r\n  studentPage: (\r\n    <ProfileTab>\r\n      <h1>Students</h1>\r\n      <div\r\n        style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}\r\n      >\r\n        {}\r\n        {State.get().myStudents.map((student, index) => (\r\n          <StudentIcon key={index} student={student} />\r\n        ))}\r\n      </div>\r\n    </ProfileTab>\r\n  ),\r\n  taskPage: (\r\n    <ProfileTab>\r\n      <h1>Task</h1>\r\n      <div\r\n        style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}\r\n      >\r\n        {[...Array(4)].map((_, index) => (\r\n          <TaskIcon key={index} />\r\n        ))}\r\n      </div>\r\n    </ProfileTab>\r\n  ),\r\n  myinfoPage: (\r\n    <ProfileTab>\r\n      <h1>My information</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Title and Experience\"\r\n        value={State.get().myInfo.titleAndExperience}\r\n        onChange={(e) =>\r\n          saveMyInfo(\r\n            e.target.value,\r\n            State.get().myInfo.skills,\r\n            State.get().myInfo.description\r\n          )\r\n        }\r\n      />\r\n      <br />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Skills\"\r\n        value={State.get().myInfo.skills}\r\n        onChange={(e) =>\r\n          saveMyInfo(\r\n            State.get().myInfo.titleAndExperience,\r\n            e.target.value,\r\n            State.get().myInfo.description\r\n          )\r\n        }\r\n      />\r\n      <br />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Short Description of Yourself\"\r\n        value={State.get().myInfo.description}\r\n        onChange={(e) =>\r\n          saveMyInfo(\r\n            State.get().myInfo.titleAndExperience,\r\n            State.get().myInfo.skills,\r\n            e.target.value\r\n          )\r\n        }\r\n      />\r\n      <br />\r\n      <FormButton>Confirm</FormButton>\r\n      <br />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Add Student\"\r\n        value={State.get().addNewStudent}\r\n        onChange={(e) => {\r\n          onInputChange(e.target.value);\r\n        }}\r\n      />\r\n      <div style={{ display: \"flex\", gap: \"10px\" }}>\r\n        <Button\r\n          onClick={() => {\r\n            deleteStudent(State.get().addNewStudent);\r\n          }}\r\n        >\r\n          Delete\r\n        </Button>\r\n\r\n        <Button\r\n          onClick={() => {\r\n            const newStudentID = State.get().addNewStudent;\r\n            addStudentToMyList(newStudentID);\r\n          }}\r\n        >\r\n          Add\r\n        </Button>\r\n      </div>\r\n      {State.get().verifyOurStudent && (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            margin: \"15px\",\r\n            justifyContent: \"space-around\",\r\n          }}\r\n        >\r\n          <div>\r\n            <Widget\r\n              src=\"near/widget/AccountProfile\"\r\n              props={{ accountId: State.get().verifyOurStudent }}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </ProfileTab>\r\n  ),\r\n};\r\n//\r\n\r\nreturn (\r\n  <GlobalContainer>\r\n    <uiKitComponents.profileTab>\r\n      <h3>Mentor HUB</h3>\r\n      <h4>Make the world around you the better place</h4>\r\n      <Widget\r\n        src=\"mob.near/widget/ProfileImage\"\r\n        props={{\r\n          profile,\r\n          fast,\r\n          accountId,\r\n          style: { width: \"7rem\", height: \"7rem\" },\r\n          className: \"mb-2\",\r\n          imageClassName: \"rounded-circle w-100 h-100 img-thumbnail d-block\",\r\n          thumbnail: false,\r\n        }}\r\n      />\r\n      <h4 className=\"mt-0 mb-0 text-truncate\">{name}</h4>\r\n    </uiKitComponents.profileTab>\r\n\r\n    <uiKitComponents.body>\r\n      <NavigationBar>\r\n        <NavButton onClick={routesNavigator.MyinfoPage}>My info</NavButton>\r\n        <GapCircle /> {}\r\n        <NavButton onClick={routesNavigator.MentorPage}>Mentor</NavButton>\r\n        <GapCircle /> {}\r\n        <NavButton onClick={routesNavigator.StudentPage}>Student</NavButton>\r\n        <GapCircle /> {}\r\n        <NavButton onClick={routesNavigator.TaskPage}>Task</NavButton>\r\n      </NavigationBar>\r\n      {pages[state.currentRoute]}\r\n    </uiKitComponents.body>\r\n  </GlobalContainer>\r\n);\r\n", "metadata": {"fork_of": "vlmoon.near/widget/MentorHub@112609125"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/vlmoon.near/widget/MentorHub", "fact_widget_deployments_id": "1622d249d4d81dc3ed1963fe1fc530ce", "inserted_timestamp": "2024-03-21T13:26:58.548Z", "modified_timestamp": "2024-03-21T13:26:58.548Z", "__row_index": 8}