{"tx_hash": "2CykLLccTYcUDVTW49NSLMv4xcsjJ1FhLRQyHxk43gnQ", "action_id_social": "ESYaA36st83dxRtzPedyRPnCYgf2N88UZzvzYYZ3BPnX-0-widget", "block_id": 112698817, "block_timestamp": "2024-02-12T19:51:32.683Z", "signer_id": "box_factory.near", "widget_name": "MysteryBox.Manage", "source_code": "const rpc_endpoint = 'https://rpc.mainnet.near.org';\n\nconst fetchTransactionByHash = (hash, sender_id) => {\n  return fetch(rpc_endpoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      id: 'dontcare',\n      method: 'tx',\n      params: [hash, sender_id],\n    }),\n  });\n};\n\nconst parseResultFromClaimTransactionResponse = (response) => {\n  if (!response?.body) throw `Response is missing body`;\n\n  if (response.body.error) throw response.body.error.data || 'Unknown error';\n\n  const result = response.body.result;\n\n  if (!result) throw `Body is missing result field`;\n\n  const responseValue = result?.status?.SuccessValue;\n\n  if (!responseValue) return null;\n\n  console.log('result', result);\n\n  return JSON.parse(Buffer.from(responseValue, 'base64').toString());\n};\n\nconst widget_owner_id = 'box_factory.near';\nconst top_contract_id = 'box_factory.near';\n\nconst account_id = context.accountId;\n\nlet contract_id = props.contract_id;\n\nconst KnownPages = [\n  'Home',\n  'AddNearReward',\n  'AddNftReward',\n  'MintBox',\n  'ListRewards',\n  'ListUserBoxes',\n  'DeployContract',\n];\n\nconst determinePageFromProps = () => {\n  if (!account_id) return 'SignIn';\n\n  if (!KnownPages.includes(props.page)) return 'Home';\n\n  if (props.page === 'DeployContract' && props.transactionHashes) {\n    const response = fetchTransactionByHash(\n      props.transactionHashes,\n      account_id\n    );\n\n    console.log('response', response);\n\n    const result = parseResultFromClaimTransactionResponse(response);\n\n    console.log('result', result);\n\n    if (result) {\n      contract_id = result;\n      return 'Home';\n    }\n  }\n\n  return props.page;\n};\n\nconst page = determinePageFromProps();\n\n// Import our modules\nconst { Layout } = VM.require('box_factory.near/widget/Templates.Layout');\n\nif (!Layout) {\n  return <p>Loading modules...</p>;\n}\n\nconst { href: linkHref } = VM.require('box_factory.near/widget/core.lib.url');\n\nlinkHref || (linkHref = () => {});\n\nfunction Page({ page, account_id, contract_id }) {\n  if (page === 'SignIn') {\n    return (\n      <Widget\n        src={`${widget_owner_id}/widget/MysteryBox.Manage.Components.PrimaryText`}\n        props={{\n          text: 'Please sign in with your near wallet to proceed',\n        }}\n      />\n    );\n  }\n\n  if (page === 'DeployContract') {\n    return (\n      <Widget\n        src={`${widget_owner_id}/widget/MysteryBox.Manage.Screens.DeployContract`}\n        props={{\n          top_contract_id,\n        }}\n      />\n    );\n  }\n\n  const contracts =\n    Near.view(top_contract_id, 'contracts_for_owner', {\n      account_id,\n    }) || [];\n\n  const currentContract =\n    contract_id &&\n    contracts.find((contract) => contract.contract_id === contract_id);\n\n  switch (page) {\n    case 'Home': {\n      if (contracts.length === 0) {\n        return (\n          <>\n            <Widget\n              src={`${widget_owner_id}/widget/MysteryBox.Manage.Components.PrimaryText`}\n              props={{\n                text: `\n                Ready for an adventure?\n                Click below to create a new contract and join the Mystery Box community!\n                `,\n              }}\n            />\n            <Widget\n              src={`${widget_owner_id}/widget/MysteryBox.Manage.Components.PrimaryLinkButton`}\n              props={{\n                text: 'Create new contract',\n                href: linkHref({\n                  widgetSrc: 'box_factory.near/widget/MysteryBox.Manage',\n                  params: {\n                    contract_id: contract_id,\n                    page: 'DeployContract',\n                  },\n                }),\n              }}\n            />\n          </>\n        );\n      }\n\n      return (\n        <Widget\n          src={`${widget_owner_id}/widget/MysteryBox.Manage.Screens.Home`}\n          props={{\n            defaultContractId: contract_id,\n            contracts,\n          }}\n        />\n      );\n    }\n    case 'AddNftReward': {\n      const contracts = Near.view(contract_id, 'trusted_nft_contracts');\n\n      console.log('contracts', contracts);\n\n      const tokens = (contracts || [])\n        .map((contract) => {\n          const metadata = Near.view(contract, 'nft_metadata');\n\n          const tokens = Near.view(contract, 'nft_tokens_for_owner', {\n            account_id,\n          });\n\n          return (tokens || []).map((token) => ({\n            contract,\n            metadata,\n            token,\n          }));\n        })\n        .flat();\n\n      if (tokens.length === 0)\n        return (\n          <Widget\n            src={`${widget_owner_id}/widget/MysteryBox.Manage.Components.PrimaryText`}\n            props={{\n              text: `\n              NFT rewards are supported only from trusted collections!\nPlease reach out to Near Ukraine Team in order to have your collection verified\n`,\n            }}\n          />\n        );\n\n      return (\n        <Widget\n          src={`${widget_owner_id}/widget/MysteryBox.Manage.Screens.AddNftReward`}\n          props={{\n            contract: currentContract,\n            tokens,\n          }}\n        />\n      );\n    }\n    case 'ListRewards': {\n      /** @todo fetch rarity from backend */\n\n      const fetchRewards = (rarity) => {\n        const rewards = Near.view(contract_id, 'rewards', {\n          rarity,\n        });\n\n        return (rewards || []).map((reward) => ({\n          ...reward,\n          rarity,\n        }));\n      };\n\n      const rewards = [\n        fetchRewards('rare'),\n        fetchRewards('epic'),\n        fetchRewards('legendary'),\n      ].flat();\n\n      if (rewards.length === 0)\n        return (\n          <>\n            <Widget\n              src={`${widget_owner_id}/widget/MysteryBox.Manage.Components.PrimaryText`}\n              props={{\n                text: 'No rewards have been added so far',\n              }}\n            />\n            <Widget\n              src={`${widget_owner_id}/widget/MysteryBox.Manage.Components.PrimaryLinkButton`}\n              props={{\n                text: 'Add first NEAR reward',\n                href: linkHref({\n                  widgetSrc: 'box_factory.near/widget/MysteryBox.Manage',\n                  params: {\n                    contract_id,\n                    page: 'AddNearReward',\n                  },\n                }),\n              }}\n            />\n          </>\n        );\n\n      return (\n        <Widget\n          src={`${widget_owner_id}/widget/MysteryBox.Manage.Screens.ListRewards`}\n          props={{\n            contract: currentContract,\n            rewards,\n          }}\n        />\n      );\n    }\n    case 'ListUserBoxes': {\n      /** @todo fetch addresses from backend */\n      const addresses = Near.view(contract_id, 'users', {\n        pagination: {\n          page: 1,\n          size: 50,\n        },\n      });\n\n      const accounts = (addresses || []).map((address) => {\n        return {\n          account_id: address,\n          boxes:\n            Near.view(contract_id, 'boxes_for_owner', {\n              account_id: address,\n              pagination: {\n                page: 1,\n                size: 40,\n              },\n            }) || [],\n        };\n      });\n\n      if (accounts.length === 0)\n        return (\n          <>\n            <Widget\n              src={`${widget_owner_id}/widget/MysteryBox.Manage.Components.PrimaryText`}\n              props={{\n                text: 'No boxes have been minted so far',\n              }}\n            />\n            <Widget\n              src={`${widget_owner_id}/widget/MysteryBox.Manage.Components.PrimaryLinkButton`}\n              props={{\n                text: 'Mint first Mystery Box',\n                href: linkHref({\n                  widgetSrc: 'box_factory.near/widget/MysteryBox.Manage',\n                  params: {\n                    contract_id,\n                    page: 'MintBox',\n                  },\n                }),\n              }}\n            />\n          </>\n        );\n\n      return (\n        <Widget\n          src={`${widget_owner_id}/widget/MysteryBox.Manage.Screens.ListUserBoxes`}\n          props={{\n            contract: currentContract,\n            accounts,\n          }}\n        />\n      );\n    }\n    default: {\n      return (\n        <Widget\n          src={`${widget_owner_id}/widget/MysteryBox.Manage.Screens.${page}`}\n          props={{\n            contract: currentContract,\n          }}\n        />\n      );\n    }\n  }\n}\n\nconsole.log('page', page);\n\nreturn (\n  <>\n    <Layout\n      contract_id={contract_id}\n      active_home_button={!['Home', 'SignIn'].includes(page)}\n    >\n      <Page page={page} account_id={account_id} contract_id={contract_id} />\n    </Layout>\n    <Widget\n      src={`${widget_owner_id}/widget/Templates.Notification`}\n      props={{\n        tx_hash: props.transactionHashes,\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/box_factory.near/widget/MysteryBox.Manage", "fact_widget_deployments_id": "113803c67212b23912fd4771f92f5eb7", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}