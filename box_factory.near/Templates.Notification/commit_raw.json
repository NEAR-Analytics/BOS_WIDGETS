{"tx_hash": "2CykLLccTYcUDVTW49NSLMv4xcsjJ1FhLRQyHxk43gnQ", "action_id_social": "ESYaA36st83dxRtzPedyRPnCYgf2N88UZzvzYYZ3BPnX-0-widget", "block_id": 112698817, "block_timestamp": "2024-02-12T19:51:32.683Z", "signer_id": "box_factory.near", "widget_name": "Templates.Notification", "source_code": "const rpc_endpoint = 'https://rpc.mainnet.near.org';\n\nState.init({\n  title: null,\n  subtitle: null,\n  variant: null,\n});\n\nconst NotificationWrapper = styled.div`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n\n  height: 54px;\n  width: 360px;\n  max-width: 90%;\n\n  z-index: 999;\n`;\n\nconst getTitleFromMethod = (method) => {\n  switch (method) {\n    case 'mint':\n    case 'mint_many':\n      return 'Minting was successful';\n    case 'add_near_reward':\n      return 'Adding NEAR reward was successful';\n    case 'nft_transfer_call':\n      return 'Adding NFT reward was successful';\n    case 'deploy_mystery_box_contract':\n      return 'Contract was deployed';\n    default:\n      return '';\n  }\n};\n\nconst fetchTransactionByHash = (hash, sender_id) => {\n  return fetch(rpc_endpoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      id: 'dontcare',\n      method: 'tx',\n      params: [hash, sender_id],\n    }),\n  });\n};\n\nconst parseResultFromTransactionResponse = (response) => {\n  if (!response?.body) throw `Response is missing body`;\n\n  if (response.body.error) throw response.body.error.data || 'Unknown error';\n\n  const result = response.body.result;\n\n  if (!result) throw `Body is missing result field`;\n\n  return result;\n};\n\nconst fetchTransactionResult = (hash, account_id) => {\n  try {\n    const response = fetchTransactionByHash(hash, account_id);\n\n    const result = parseResultFromTransactionResponse(response);\n\n    console.log('tx result', result);\n\n    if (!result) return;\n\n    const method = (result.transaction?.actions || [])?.[0]?.['FunctionCall']\n      .method_name;\n\n    const value = typeof result?.status?.SuccessValue === 'string';\n\n    Storage.set(hash, 1);\n\n    if (!method || !value) return;\n\n    const title = getTitleFromMethod(method);\n    const variant = 'success';\n\n    State.update({\n      title,\n      variant,\n    });\n\n    setTimeout(() => {\n      State.update({\n        title: null,\n        subtitle: null,\n        variant: null,\n      });\n    }, 6_000);\n  } catch (error) {\n    console.warn(`Caught error during fetch tx result`, error);\n\n    State.update({\n      title: null,\n      subtitle: null,\n      variant: null,\n    });\n  }\n};\n\nconst value = Storage.get(props.tx_hash);\n\nconsole.log('value', value);\nconst hashExistInStorage = value !== null && value !== undefined;\n\nconsole.log('hashExistInStorage', hashExistInStorage);\n\ntry {\n  if (props.tx_hash && !hashExistInStorage) {\n    fetchTransactionResult(props.tx_hash, context.accountId);\n  }\n} catch (err) {\n  console.warn('caught error on fetch claim transaction result:', err);\n}\n\nconst showNotification = !!state.title && !!state.variant;\n\nif (!showNotification) return <></>;\n\nreturn (\n  <NotificationWrapper>\n    <Widget\n      src=\"box_factory.near/widget/MysteryBox.Manage.Components.Notification\"\n      props={{\n        title: state.title,\n        subtitle: state.subtitle,\n        variant: state.variant,\n        onClose: () => {\n          State.update({\n            title: null,\n            subtitle: null,\n            variant: null,\n          });\n        },\n      }}\n    />\n  </NotificationWrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/box_factory.near/widget/Templates.Notification", "fact_widget_deployments_id": "f6a1b2d143b49ebaaf2f9b3e5f97fbee", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}