{"tx_hash": "DUzYaFP8dUSemYf7v2uzPawaAM73dpQiTVzh2KE3cNsk", "action_id_social": "CHMtwGH3uBffhzs1dXedk6wqLjuvGbggtQZByMUFNRsq-0-widget", "block_id": 101994524, "block_timestamp": "2023-09-26T11:45:56.114Z", "signer_id": "contractwizard.near", "widget_name": "ContractWizardUI", "source_code": "const AUTH_OPTION = {\n  NO_AUTH: \"noAuth\",\n  OWNERSHIP: \"ownership\",\n  ROLE_BASED: \"roleBased\",\n};\n\nState.init({\n  fungibleToken: true,\n  tokenName: \"MyToken\",\n  tokenSymbol: \"MTK\",\n  ftDecimals: 24,\n  ftPremint: null,\n  ftPremintReceiver: \"\",\n  nftBaseURI: \"\",\n  authOption: AUTH_OPTION.NO_AUTH,\n  owner: \"\",\n  mintable: false,\n  burnable: false,\n  pausable: false,\n  showToast: false,\n  contractOutput: \"\",\n});\n\nconst Background = styled.div`\n    width: 100%;\n`;\n\nconst StyledWrapper = styled.div`\n    max-width: 1400px;\n    margin: 0 auto;\n    padding: 70px;\n    background-image: radial-gradient(rgb(218, 217, 232) 5%, #f9f9f9 0px);\n    background-size: 30px 30px;\n    border-radius: 6px;\n\n  > button {\n    margin: 20px 10px 20px 0;\n  }\n\n  a {\n    color: var(--violet8);\n    :hover {\n        color: var(--violet10);\n    }\n  }\n\n  .token-type-desc {\n    margin: 20px 0 30px 0;\n\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    button {\n      margin-left: auto;\n    }\n  }\n  .main-content-wrapper {\n    display: flex;\n\n    > div {\n      padding: 20px;\n    }\n\n    .left-side {\n      width: 30%;\n      padding: 0 20px 0 0;\n    }\n\n    > pre {\n      width: 70%;\n      div {\n        border-radius: 6px;\n        min-height: 700px;\n      }\n    }\n\n    @media(max-width: 800px) {\n        flex-direction: column;\n        padding: 20px;\n        \n        .left-side {\n            width: 100%;\n        }\n        > pre {\n            margin-top: 30px;\n            width: 100%;\n        }\n    }\n  }\n\n  h5 {\n    margin: 15px 0;\n  }\n\n  h6 {\n    margin: 15px 0;\n  }\n\n  label {\n    margin-top: 10px;\n  }\n\n  .badge {\n    margin: 0 0 30px 0;\n  }\n\n  button[role=\"checkbox\"][data-state=\"unchecked\"] {\n    background-color: white;\n  }\n\n  div[data-radix-content-popper-wrapper] {\n    z-index: 100000;\n  }\n`;\n\nconst AuthLayer = () => (\n  <>\n    <h6>Access Control</h6>\n    <Widget\n      src=\"near/widget/DIG.InputSelect\"\n      props={{\n        groups: [\n          {\n            label: \"Select option\",\n            items: [\n              {\n                label: \"No Access Control\",\n                value: AUTH_OPTION.NO_AUTH,\n              },\n              {\n                label: \"Ownership\",\n                value: AUTH_OPTION.OWNERSHIP,\n              },\n              {\n                label: \"Role-based access control\",\n                value: AUTH_OPTION.ROLE_BASED,\n              },\n            ],\n          },\n        ],\n        placeholder: \"Select an option\",\n        rootProps: {\n          value: state.authOption,\n          onValueChange: (value) => {\n            State.update({ authOption: value });\n          },\n        },\n      }}\n    />\n    {state.authOption !== AUTH_OPTION.NO_AUTH && (\n      <Widget\n        src=\"near/widget/DIG.Input\"\n        props={{\n          label:\n            state.authOption === AUTH_OPTION.OWNERSHIP\n              ? \"Owner\"\n              : \"Highest role\",\n          placeholder: \"satoshi.near\",\n          onInput: (e) => State.update({ owner: e.target.value }),\n          value: state.owner,\n          assistiveText:\n            state.authOption === AUTH_OPTION.OWNERSHIP\n              ? \"If left blank, the deploying account becomes the default owner.\"\n              : \"If left blank, the deploying account receives the highest role.\",\n        }}\n      />\n    )}\n  </>\n);\n\nconst BinaryOptions = () => (\n  <>\n    <h6>Features</h6>\n    <Widget\n      src=\"near/widget/DIG.Checkbox\"\n      props={{\n        id: \"checkbox-item-burnable\",\n        label: \"Burnable\",\n        checked: state.burnable,\n        onCheckedChange: (e) => State.update({ burnable: e }),\n      }}\n    />\n    {/*<Widget\n      src=\"near/widget/DIG.Checkbox\"\n      props={{\n        id: \"checkbox-item-storageOptions\",\n        label: \"Storage Mgmt Options\",\n      }}\n    />*/}\n    {state.authOption !== AUTH_OPTION.NO_AUTH && (\n      <>\n        <Widget\n          src=\"near/widget/DIG.Checkbox\"\n          props={{\n            id: \"checkbox-item-pausable\",\n            label: \"Pausable\",\n            checked: state.pausable,\n            onCheckedChange: (e) => State.update({ pausable: e }),\n          }}\n        />\n        {/*<Widget\n          src=\"near/widget/DIG.Checkbox\"\n          props={{\n            id: \"checkbox-item-upgradeable\",\n            label: \"Upgradeable\",\n          }}\n        />*/}\n        <Widget\n          src=\"near/widget/DIG.Checkbox\"\n          props={{\n            id: \"checkbox-item-mintable\",\n            label: \"Mintable\",\n            checked: state.mintable,\n            onCheckedChange: (e) => State.update({ mintable: e }),\n          }}\n        />\n      </>\n    )}\n  </>\n);\n\nconst tokenStandardsDescriptions = (props) => {\n  const baseUrl = (nep) =>\n    `https://github.com/near/NEPs/blob/master/neps/nep-${nep}.md`;\n\n  const anchor = (nep) => (\n    <a target=\"blank_\" href={baseUrl(`0${nep}`)}>\n      NEP {nep}\n    </a>\n  );\n\n  if (props.fungibleToken) {\n    return (\n      <div>\n        Implements {anchor(\"141\")}\n        and\n        {anchor(\"148\")} token standards\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        Implements {anchor(\"171\")}, {anchor(\"177\")}, {anchor(\"178\")} and{\" \"}\n        {anchor(\"181\")} token standards\n      </div>\n    );\n  }\n};\n\nconst sourceCode = `\n\\`\\`\\`rust\n${state.contractOutput}\n\\`\\`\\`\n`;\n\nreturn (\n  <>\n    <Widget\n      src=\"contractwizard.near/widget/CodeGenerator\"\n      props={{\n        message: {\n          token: {\n            which: state.fungibleToken ? \"ft\" : \"nft\",\n            config: {\n              name: state.tokenName,\n              symbol: state.tokenSymbol,\n              baseUri: !state.fungibleToken ? state.nftBaseURI : null,\n              decimals: state.fungibleToken ? state.ftDecimals : null,\n              preMint: state.fungibleToken ? state.ftPremint : null,\n              preMintReceiver: state.fungibleToken\n                ? state.ftPremintReceiver\n                : null,\n              mintable:\n                state.authOption !== AUTH_OPTION.NO_AUTH && state.mintable,\n              burnable: state.burnable,\n            },\n          },\n          plugins: {\n            ...(state.authOption === AUTH_OPTION.OWNERSHIP\n              ? { owner: { accountId: state.owner } }\n              : {}),\n            ...(state.pausable && state.authOption !== AUTH_OPTION.NO_AUTH\n              ? { pause: {} }\n              : {}),\n            ...(state.authOption === AUTH_OPTION.ROLE_BASED\n              ? { rbac: { accountId: state.owner } }\n              : {}),\n          },\n        },\n        onMessage: (e) => {\n          State.update({ contractOutput: e });\n        },\n      }}\n    />\n    <Background>\n      <StyledWrapper>\n        <h1>\n          Token Wizard <i class=\"ph-bold ph-magic-wand\"></i>\n        </h1>\n        <h5>\n          Generate complete Rust code snippets for your fungible and\n          non-fungible NEAR token contracts.\n        </h5>\n        <Widget\n          src=\"near/widget/DIG.Button\"\n          props={{\n            label: \"Fungible token (FT)\",\n            iconLeft: \"ph ph-coins\",\n            onClick: (e) => State.update({ fungibleToken: true }),\n            size: \"large\",\n            variant: !state.fungibleToken ? \"secondary\" : \"affirmative\",\n          }}\n        />\n        <Widget\n          src=\"near/widget/DIG.Button\"\n          props={{\n            label: \"Non-Fungible Token (NFT)\",\n            iconLeft: \"ph ph-cards\",\n            onClick: (e) => State.update({ fungibleToken: false }),\n            size: \"large\",\n            variant: state.fungibleToken ? \"secondary\" : \"affirmative\",\n          }}\n        />\n        <div>\n          <div className=\"token-type-desc\">\n            <tokenStandardsDescriptions fungibleToken={state.fungibleToken} />\n            <Widget\n              src=\"near/widget/DIG.Toast\"\n              props={{\n                description: \"Code copied to clipboard!\",\n                type: \"success\",\n                open: state.showToast,\n                onOpenChange: (value) => State.update({ showToast: value }),\n                trigger: (\n                  <Widget\n                    src=\"near/widget/DIG.Button\"\n                    props={{\n                      label: \"Copy\",\n                      iconLeft: \"ph ph-clipboard\",\n                      variant: \"primary\",\n                      onClick: () => {\n                        clipboard.writeText(state.contractOutput);\n                        State.update({ showToast: true });\n                      },\n                    }}\n                  />\n                ),\n                providerProps: { duration: 1500 },\n              }}\n            />\n          </div>\n          <div className=\"main-content-wrapper\">\n            <div className=\"left-side\">\n              <h6>Settings</h6>\n              <div className=\"token-name-wrapper\">\n                <Widget\n                  src=\"near/widget/DIG.Input\"\n                  props={{\n                    label: \"Name\",\n                    placeholder: \"MyToken\",\n                    onInput: (e) => State.update({ tokenName: e.target.value }),\n                    value: state.tokenName,\n                  }}\n                />\n                <Widget\n                  src=\"near/widget/DIG.Input\"\n                  props={{\n                    label: \"Symbol\",\n                    placeholder: \"MTK\",\n                    onInput: (e) =>\n                      State.update({ tokenSymbol: e.target.value }),\n                    value: state.tokenSymbol,\n                  }}\n                />\n                {state.fungibleToken && (\n                  <>\n                    <Widget\n                      src=\"near/widget/DIG.Input\"\n                      type=\"number\"\n                      props={{\n                        label: \"Premint\",\n                        placeholder: 0,\n                        onInput: (e) =>\n                          State.update({ ftPremint: e.target.value }),\n                        value: state.ftPremint,\n                      }}\n                    />\n                    {state.ftPremint && (\n                      <Widget\n                        src=\"near/widget/DIG.Input\"\n                        props={{\n                          label: \"Premint receiver\",\n                          placeholder: \"satoshi.near\",\n                          assistiveText:\n                            \"If left blank, the deploying account becomes the default receiver of the premint amount.\",\n                          onInput: (e) =>\n                            State.update({ ftPremintReceiver: e.target.value }),\n                          value: state.ftPremintReceiver,\n                        }}\n                      />\n                    )}\n                    <Widget\n                      src=\"near/widget/DIG.Input\"\n                      type=\"number\"\n                      props={{\n                        label: \"Decimals\",\n                        placeholder: 24,\n                        onInput: (e) =>\n                          State.update({ ftDecimals: e.target.value }),\n                        value: state.ftDecimals,\n                      }}\n                    />\n                  </>\n                )}\n                {!state.fungibleToken && (\n                  <Widget\n                    src=\"near/widget/DIG.Input\"\n                    props={{\n                      label: \"Base URI\",\n                      placeholder: \"https://\",\n                      onInput: (e) =>\n                        State.update({ nftBaseURI: e.target.value }),\n                      value: state.nftBaseURI,\n                    }}\n                  />\n                )}\n                <AuthLayer />\n                <BinaryOptions />\n              </div>\n            </div>\n            <Markdown text={sourceCode} />\n          </div>\n        </div>\n      </StyledWrapper>\n    </Background>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/contractwizard.near/widget/ContractWizardUI", "fact_widget_deployments_id": "c848cb576acf4620b6fc9d4b1f9af61b", "inserted_timestamp": "2023-09-26T13:42:29.038Z", "modified_timestamp": "2023-09-26T13:42:29.038Z", "__row_index": 25}