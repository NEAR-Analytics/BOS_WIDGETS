{"tx_hash": "AQPKjreGbLzfRGNKmEdWTDSUucxEsujzu6yNtw7cqWbm", "action_id_social": "2XeDsVY8bUmX2mfKFHLmK28qadn8zXAQebWJRw5zHhVo-0-widget", "block_id": 101481539, "block_timestamp": "2023-09-19T14:44:01.947Z", "signer_id": "contractwizard.near", "widget_name": "ContractWizardUI", "source_code": "const AUTH_OPTION = {\n  NO_AUTH: \"noAuth\",\n  OWNERSHIP: \"ownership\",\n  ROLE_BASED: \"roleBased\",\n};\n\nState.init({\n  fungibleToken: true,\n  tokenName: \"MyToken\",\n  tokenSymbol: \"MTK\",\n  ftDecimals: 24,\n  ftPremint: null,\n  nftBaseURI: \"\",\n  authOption: AUTH_OPTION.NO_AUTH,\n  owner: \"\",\n  mintable: false,\n  burnable: false,\n  contractOutput: \"\",\n});\n\nconst Background = styled.div`\n    background-image: radial-gradient(#dad9e8 5%,transparent 0);\n    background-size: 50px 50px;\n    min-height: 100vh;\n    width: 100%;\n`;\n\nconst StyledWrapper = styled.div`\n    max-width: 1400px;\n    margin: 0 auto;\n    padding: 50px;\n    padding-bottom: 200px;\n\n  > button {\n    margin: 20px 10px 20px 0;\n  }\n\n  .token-type-desc {\n    margin: 20px 0 30px 0;\n  }\n  .main-content-wrapper {\n    display: flex;\n\n    > div {\n      padding: 20px;\n    }\n\n    .left-side {\n      width: 30%;\n      padding: 0 20px 0 0;\n    }\n\n    .right-side {\n      width: 70%;\n      min-height: 694px;\n      background-color: var(--blackA12);\n      color: white;\n      border-radius: 6px\n    }\n\n    @media(max-width: 800px) {\n        flex-direction: column;\n        \n        .left-side, .right-side {\n            width: 100%;\n        }\n        .right-side {\n            margin-top: 30px;\n        }\n    }\n  }\n\n  h5 {\n    margin: 15px 0;\n  }\n\n  h6 {\n    margin: 15px 0;\n  }\n\n  label {\n    margin-top: 10px;\n  }\n`;\n\nconst AuthLayer = () => (\n  <>\n    <h6>Access Control</h6>\n    <Widget\n      src=\"near/widget/DIG.InputSelect\"\n      props={{\n        groups: [\n          {\n            label: \"Select option\",\n            items: [\n              {\n                label: \"No Access Control\",\n                value: AUTH_OPTION.NO_AUTH,\n              },\n              {\n                label: \"Ownership\",\n                value: AUTH_OPTION.OWNERSHIP,\n              },\n              {\n                label: \"Role-based access control\",\n                value: AUTH_OPTION.ROLE_BASED,\n              },\n            ],\n          },\n        ],\n        placeholder: \"Select an option\",\n        rootProps: {\n          value: state.authOption,\n          onValueChange: (value) => {\n            State.update({ authOption: value });\n          },\n        },\n      }}\n    />\n    {state.authOption !== AUTH_OPTION.NO_AUTH && (\n      <Widget\n        src=\"near/widget/DIG.Input\"\n        props={{\n          label: \"Owner\",\n          placeholder: \"satoshi.near\",\n          onInput: (e) => State.update({ owner: e.target.value }),\n          value: state.owner,\n          assistiveText:\n            \"If left blank, the deploying account becomes the default owner.\",\n        }}\n      />\n    )}\n  </>\n);\n\nconst BinaryOptions = () => (\n  <>\n    <h6>Features</h6>\n    <Widget\n      src=\"near/widget/DIG.Checkbox\"\n      props={{\n        id: \"checkbox-item-burnable\",\n        label: \"Burnable\",\n        checked: state.burnable,\n        onCheckedChange: (e) => State.update({ burnable: e }),\n      }}\n    />\n    <Widget\n      src=\"near/widget/DIG.Checkbox\"\n      props={{\n        id: \"checkbox-item-storageOptions\",\n        label: \"Storage Mgmt Options\",\n      }}\n    />\n    {state.authOption !== AUTH_OPTION.NO_AUTH && (\n      <>\n        <Widget\n          src=\"near/widget/DIG.Checkbox\"\n          props={{\n            id: \"checkbox-item-pausable\",\n            label: \"Pausable\",\n          }}\n        />\n        <Widget\n          src=\"near/widget/DIG.Checkbox\"\n          props={{\n            id: \"checkbox-item-upgradeable\",\n            label: \"Upgradeable\",\n          }}\n        />\n        <Widget\n          src=\"near/widget/DIG.Checkbox\"\n          props={{\n            id: \"checkbox-item-mintable\",\n            label: \"Mintable\",\n          }}\n        />\n      </>\n    )}\n  </>\n);\n\nconst tokenStandardsDescriptions = (props) => {\n  const baseUrl = (nep) =>\n    `https://github.com/near/NEPs/blob/master/neps/nep-${nep}.md`;\n\n  if (props.fungibleToken) {\n    return (\n      <>\n        Implements{\" \"}\n        <a target=\"blank_\" href={baseUrl(\"0141\")}>\n          NEP 141\n        </a>{\" \"}\n        and\n        <a target=\"blank_\" href={baseUrl(\"0148\")}>\n          NEP 148\n        </a>{\" \"}\n        token standards\n      </>\n    );\n  } else {\n    return (\n      <>\n        Implements{\" \"}\n        <a target=\"blank_\" href={baseUrl(\"0171\")}>\n          NEP 171\n        </a>\n        ,{\" \"}\n        <a target=\"blank_\" href={baseUrl(\"0177\")}>\n          NEP 177\n        </a>\n        ,{\" \"}\n        <a target=\"blank_\" href={baseUrl(\"0178\")}>\n          NEP 178\n        </a>{\" \"}\n        and{\" \"}\n        <a target=\"blank_\" href={baseUrl(\"0181\")}>\n          NEP 181\n        </a>{\" \"}\n        token standards\n      </>\n    );\n  }\n};\n\nconst sourceCode = `\n\\`\\`\\`rust\n${state.contractOutput}\n\\`\\`\\`\n`;\n\nreturn (\n  <>\n    <Widget\n      src=\"contractwizard.near/widget/CodeGenerator\"\n      props={{\n        message: {\n          token: {\n            which: state.fungibleToken ? \"ft\" : \"nft\",\n            config: {\n              name: state.tokenName,\n              symbol: state.tokenSymbol,\n              decimals: state.ftDecimals,\n              preMint: state.ftPremint,\n              mintable: state.mintable,\n              burnable: state.burnable,\n            },\n          },\n          plugins: {\n            owner: { accountId: state.owner },\n            pause: {},\n            rbac: { accountId: state.owner },\n          },\n        },\n        onMessage: (e) => {\n          State.update({ contractOutput: e });\n        },\n      }}\n    />\n    <Background>\n      <StyledWrapper>\n        <h1>\n          Token Wizard <i class=\"ph-bold ph-magic-wand\"></i>\n        </h1>\n        <h5>\n          Easily generate complete code snippets for your fungible and\n          non-fungible NEAR token contracts.\n        </h5>\n        <Widget\n          src=\"near/widget/DIG.Button\"\n          props={{\n            label: \"Fungible token (FT)\",\n            iconLeft: \"ph ph-coins\",\n            onClick: (e) => State.update({ fungibleToken: true }),\n            size: \"large\",\n            variant: !state.fungibleToken ? \"secondary\" : \"primary\",\n          }}\n        />\n        <Widget\n          src=\"near/widget/DIG.Button\"\n          props={{\n            label: \"Non-Fungible Token (NFT)\",\n            iconLeft: \"ph ph-cards\",\n            onClick: (e) => State.update({ fungibleToken: false }),\n            size: \"large\",\n            variant: state.fungibleToken ? \"secondary\" : \"primary\",\n          }}\n        />\n        <div>\n          <div className=\"token-type-desc\">\n            <tokenStandardsDescriptions fungibleToken={state.fungibleToken} />\n          </div>\n          <div className=\"main-content-wrapper\">\n            <div className=\"left-side\">\n              <h6>Settings</h6>\n              <div className=\"token-name-wrapper\">\n                <Widget\n                  src=\"near/widget/DIG.Input\"\n                  props={{\n                    label: \"Name\",\n                    placeholder: \"MyToken\",\n                    onInput: (e) => State.update({ tokenName: e.target.value }),\n                    value: state.tokenName,\n                  }}\n                />\n                <Widget\n                  src=\"near/widget/DIG.Input\"\n                  props={{\n                    label: \"Symbol\",\n                    placeholder: \"MTK\",\n                    onInput: (e) =>\n                      State.update({ tokenSymbol: e.target.value }),\n                    value: state.tokenSymbol,\n                  }}\n                />\n                {state.fungibleToken && (\n                  <>\n                    <Widget\n                      src=\"near/widget/DIG.Input\"\n                      type=\"number\"\n                      props={{\n                        label: \"Premint\",\n                        placeholder: 0,\n                        onInput: (e) =>\n                          State.update({ ftPremint: e.target.value }),\n                        value: state.ftPremint,\n                      }}\n                    />\n                    <Widget\n                      src=\"near/widget/DIG.Input\"\n                      type=\"number\"\n                      props={{\n                        label: \"Decimals\",\n                        placeholder: 24,\n                        onInput: (e) =>\n                          State.update({ ftDecimals: e.target.value }),\n                        value: state.ftDecimals,\n                      }}\n                    />\n                  </>\n                )}\n                {!state.fungibleToken && (\n                  <Widget\n                    src=\"near/widget/DIG.Input\"\n                    props={{\n                      label: \"Base URI\",\n                      placeholder: \"https://\",\n                      onInput: (e) =>\n                        State.update({ nftBaseURI: e.target.value }),\n                      value: state.nftBaseURI,\n                    }}\n                  />\n                )}\n                <AuthLayer />\n                <BinaryOptions />\n              </div>\n            </div>\n            <div className=\"right-side\">\n              <Markdown text={sourceCode} />\n            </div>\n          </div>\n        </div>\n      </StyledWrapper>\n    </Background>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/contractwizard.near/widget/ContractWizardUI", "fact_widget_deployments_id": "1b0b93618b4329efb2ee42a730fd661d", "inserted_timestamp": "2023-09-19T16:37:46.159Z", "modified_timestamp": "2023-09-19T16:37:46.159Z", "__row_index": 19}