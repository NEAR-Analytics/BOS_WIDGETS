{"tx_hash": "EXEPjLX91UWNweobM7xLgfcAKNTsdcuSoF5q24gFMtyJ", "action_id_social": "Ch1GU1ZbNEL5a4TmmhxKed6rZHDpZSKkhL9fQLceY1JX-0-widget", "block_id": 108020512, "block_timestamp": "2023-12-15T16:52:42.579Z", "signer_id": "keypom-marketplace.near", "widget_name": "Project.CreateEventForm", "source_code": "const ownerId = \"keypom-marketplace.near\";\nconst registryId = \"registry.potlock.near\";\nconst horizonId = \"nearhorizon.near\";\n\nconst IPFS_BASE_URL = \"https://nftstorage.link/ipfs/\";\n// const DEFAULT_BANNER_IMAGE_URL =\n//   IPFS_BASE_URL + \"bafkreih4i6kftb34wpdzcuvgafozxz6tk6u4f5kcr2gwvtvxikvwriteci\";\nconst DEFAULT_PROFILE_IMAGE_URL =\n  IPFS_BASE_URL + \"bafkreifel4bfm6hxmklcsqjilk3bhvi3acf2rxqepcgglluhginbttkyqm\";\nconst ADD_TEAM_MEMBERS_ICON_URL =\n  IPFS_BASE_URL + \"bafkreig6c7m2z2lupreu2br4pm3xx575mv6uvmuy2qkij4kzzfpt7tipcq\";\nconst CLOSE_ICON_URL =\n  IPFS_BASE_URL + \"bafkreifyg2vvmdjpbhkylnhye5es3vgpsivhigkjvtv2o4pzsae2z4vi5i\";\n\nconst NEAR_ACCOUNT_ID_REGEX = /^(?=.{2,64}$)(?!.*\\.\\.)(?!.*-$)(?!.*_$)[a-z\\d._-]+$/i;\n\nconst MAX_TEAM_MEMBERS_DISPLAY_COUNT = 5;\n\nif (!context.accountId) {\n  return (\n    <Widget\n      src={`${ownerId}/widget/InfoSegment`}\n      props={{\n        title: \"Not logged in!\",\n        description: \"You must log in to create a new project!\",\n      }}\n    />\n  );\n}\n\nconst existingHorizonProject = Near.view(horizonId, \"get_project\", {\n  account_id: context.accountId,\n});\n\nasync function handleSubmit() {\n  for (let i = 0; i < state.numTickets; i++) {\n\n    const mintVariables = {\n      eventCategory: state.eventCategory,\n      ticketPrice: state.ticketPrices[i], \n      eventName: state.name,\n      ownerId,\n    };\n\n\n\n    try {\n      const mintResult = await Near.write(eventRegistryId, \"mintToken\", mintVariables);\n      console.log(`Ticket ${i + 1} minted successfully`, mintResult);\n    } catch (error) {\n      console.error(`Error minting ticket ${i + 1}: `, error);\n      break; \n    }\n  }\n\n}\n\n\nconst eventRegistryId = 'dev-1699521073288-13420165222235';\nlet events = Near.view(eventRegistryId, \"get_events\", { projectId }) // will be a vector array\n\nconst imageHeightPx = 120;\nconst profileImageTranslateYPx = 220;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 0px 64px 72px 64px;\n`;\n\nconst LowerBannerContainer = styled.div`\n  position: absolute;\n  bottom: -210px;\n  left: 0px;\n  display: flex;\n  align-items: stretch; /* Ensuring child elements stretch to full height */\n  justify-content: space-between;\n  width: 100%;\n`;\n\nconst LowerBannerContainerLeft = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n  margin-left: 190px;\n`;\n\nconst LowerBannerContainerRight = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  justify-content: flex-end; /* Pushes TeamContainer to the bottom */\n  flex: 1;\n  // background: yellow;\n`;\n\nconst TeamContainer = styled.div`\n  width: 200px;\n  height: 30px;\n  // background: green;\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: row;\n  // gap: -40px;\n`;\n\nconst AddTeamMembers = styled.a`\n  margin: 0px 0px 16px 36px;\n  cursor: pointer;\n  color: #dd3345;\n  font-size: 14px;\n  font-weight: 600;\n\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nconst FormBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 0 148px 0 148px;\n  width: 100%;\n`;\n\nconst FormDivider = styled.div`\n  height: 2px;\n  width: 100%;\n  background-color: #ebebeb;\n`;\n\nconst FormSectionContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 160px;\n  margin: 48px 0 48px 0;\n`;\n\nconst FormSectionLeftDiv = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  // background-color: yellow;\n  gap: 16px;\n`;\n\nconst FormSectionRightDiv = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  // background-color: lightblue;\n`;\n\nconst FormSectionTitle = styled.div`\n  color: #2e2e2e;\n  font-size: 16;\n  font-weight: 600;\n  word-wrap: break-word;\n`;\n\nconst FormSectionDescription = styled.div`\n  color: #2e2e2e;\n  font-size: 16;\n  font-weight: 400;\n  word-wrap: break-word;\n`;\n\nconst FormSectionIsRequired = styled.div`\n  font-size: 16px;\n  font-weight: 400;\n  word-wrap: break-word;\n  position: relative;\n`;\n\nconst SvgContainer = styled.div`\n  position: absolute;\n  top: -6;\n  left: -26;\n`;\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  gap: 32px;\n  margin-top: 32px;\n`;\n\nconst Space = styled.div`\n  height: ${(props) => props.height}px;\n`;\n\nconst ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ModalContent = styled.div`\n  border-radius: 14px;\n  // width: 60%;\n  padding: 32px;\n  background: white;\n  border-radius: 10px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n  // z-index: 1000;\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  margin-bottom: 24px;\n`;\n\nconst ModalHeaderLeft = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\nconst IconContainer = styled.div`\n  width: 40px;\n  height: 40px;\n  background: #f0f0f0;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 16px;\n`;\n\nconst Icon = styled.img`\n  width: 24px;\n  height: 24px;\n  cursor: ${(props) => (props.cursor ? props.cursor : \"default\")};\n`;\n\nconst ModalTitle = styled.div`\n  font-color: #2e2e2e;\n  font-size: 16px;\n  font-weight: 600;\n`;\n\nconst ModalDescription = styled.p`\n  font-color: #2e2e2e;\n  font-size: 16px;\n  font-weight: 400;\n=`;\n\nconst MembersCount = styled.span`\n  color: #2e2e2e;\n  font-weight: 600;\n`;\n\nconst MembersText = styled.div`\n  color: #7b7b7b;\n  font-size: 12px;\n  font-weight: 400;\n`;\n\nconst MembersListItem = styled.div`\n  padding: 16px 0px;\n  border-top: 1px #f0f0f0 solid;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst RemoveMember = styled.a`\n  color: #2e2e2e;\n  font-size: 14px;\n  font-weight: 600;\n  visibility: hidden;\n  cursor: pointer;\n  opacity: 0;\n  transition: opacity 0.2s ease-in-out;\n\n  &:hover {\n    text-decoration: none;\n  }\n\n  ${MembersListItem}:hover & {\n    visibility: visible;\n    opacity: 1;\n  }\n`;\n\nconst MembersListItemLeft = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 16px;\n`;\n\nconst MembersListItemText = styled.div`\n  font-size: 16px;\n  font-weight: 400;\n  color: #2e2e2e;\n`;\n\nconst MoreTeamMembersContainer = styled.div`\n  width: 28px;\n  height: 28px;\n  border: 2px solid white;\n  border-radius: 50%;\n  background: #dd3345;\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: ${(props) => props.zIndex};\n  margin-right: -8px;\n`;\n\nconst MoreTeamMembersText = styled.div`\n  color: white;\n  font-size: 12px;\n  font-weight: 600;\n  text-align: center;\n`;\n\nState.init({\n  name: \"\",\n  nameError: \"\",\n  category: \"\",\n  categoryError: \"\",\n  description: \"\",\n  descriptionError: \"\",\n  website: \"\",\n  websiteError: \"\",\n  twitter: \"\",\n  twitterError: \"\",\n  telegram: \"\",\n  telegramError: \"\",\n  github: \"\",\n  githubError: \"\",\n  socialDataFetched: false,\n  socialDataIsFetching: false,\n  registeredProjects: null,\n  getRegisteredProjectsError: \"\",\n  isModalOpen: false,\n  teamMember: \"\",\n  teamMembers: [],\n  nearAccountIdError: \"\",\n  amount: 0,\n  ticketPrice: 0,\n});\n\nconst getImageUrlFromSocialImage = (image) => {\n  if (image.url) {\n    return image.url;\n  } else if (image.ipfs_cid) {\n    return IPFS_BASE_URL + image.ipfs_cid;\n  }\n};\n\nconst Modal = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n\n  return (\n    <ModalOverlay onClick={onClose}>\n      <ModalContent onClick={(e) => e.stopPropagation()}>{children}</ModalContent>\n    </ModalOverlay>\n  );\n};\n\nif (context.accountId) {\n  console.log('account id', context.accountId);\n  Near.asyncView(\"v1.social08.testnet\", \"get\", { keys: [`${context.accountId}/profile/**`] })\n    .then((socialData) => {\n      if (!socialData) return;\n      const profileData = socialData[context.accountId].profile;\n      if (!profileData) return;\n      // description\n      const description = profileData.description || \"\";\n      const category = typeof profileData.category == \"string\" ? profileData.category : \"\";\n      // linktree\n      const linktree = profileData.linktree || {};\n      const twitter = linktree.twitter || \"\";\n      const telegram = linktree.telegram || \"\";\n      const github = linktree.github || \"\";\n      const website = linktree.website || \"\";\n      // team\n      const team = profileData.team || {};\n      // update state\n      State.update({\n        name: profileData?.name || \"\",\n        description,\n        category,\n        twitter,\n        telegram,\n        github,\n        website,\n        socialDataFetched: true,\n      });\n    })\n    .catch((e) => {\n      console.log(\"error getting social data: \", e);\n      State.update({ socialDataFetched: true });\n    });\n}\n\n\n\nconst handleCreateProject = (e) => {\n  if (isCreateProjectDisabled) return;\n  const socialArgs = {\n    data: {\n      [context.accountId]: {\n        profile: {\n          name: state.name,\n          category: state.category,\n          description: state.description,\n          linktree: {\n            website: state.website,\n            twitter: state.twitter,\n            telegram: state.telegram,\n            github: state.github,\n          },\n        },\n      },\n    },\n  };\n  const potlockRegistryArgs = {};\n  const horizonArgs = { account_id: context.accountId };\n  const transactions = [\n    // set data on social.near\n    {\n      contractName: \"social.near\",\n      methodName: \"set\",\n      deposit: Big(JSON.stringify(socialArgs).length * 0.00003).mul(Big(10).pow(24)),\n      args: socialArgs,\n    },\n  ];\n  if (!props.edit) {\n    transactions.push(\n      // register project on potlock\n      {\n        contractName: registryId,\n        methodName: \"register\",\n        deposit: Big(0.05).mul(Big(10).pow(24)),\n        args: potlockRegistryArgs,\n      }\n    );\n\n  }\n  Near.call(transactions);\n};\n\n\nconst CATEGORY_MAPPINGS = {\n  music: \"Music Concerts\",\n  theater: \"Theater Plays\",\n  sports: \"Sports Events\",\n  conferences: \"Conferences\",\n  exhibitions: \"Exhibitions\",\n  festivals: \"Festivals\",\n  workshops: \"Workshops\",\n  comedy: \"Comedy Shows\",\n  networking: \"Networking Events\",\n  charity: \"Charity Events\",\n};\n\n\nconst FormSectionLeft = (title, description, isRequired) => {\n  return (\n    <FormSectionLeftDiv>\n      <FormSectionTitle>{title}</FormSectionTitle>\n      <FormSectionDescription>{description}</FormSectionDescription>\n      <FormSectionIsRequired\n        style={{\n          color: isRequired ? \"#DD5633\" : \"#7B7B7B\",\n        }}\n      >\n        {isRequired ? \"Required\" : \"Optional\"}\n        {isRequired && (\n          <SvgContainer style={{ top: -6, left: -26 }}>\n            <svg\n              width=\"117\"\n              height=\"31\"\n              viewBox=\"0 0 117 31\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M81.8 3.40116C82.247 3.1908 83.0709 3.13488 82.6 2.60116C81.0461 0.840105 83.0819 0.798833 78.6667 1.22338C65.6302 2.47689 52.5192 4.47997 39.6667 6.95672C31.3106 8.56697 19.0395 10.1936 12.7333 17.09C3.95785 26.6869 29.2286 29.1656 32.9333 29.3567C53.953 30.4413 75.9765 28.9386 96.5111 24.1789C99.8286 23.41 122.546 18.5335 112.733 11.5345C107.621 7.88815 100.796 6.47335 94.7333 5.75672C77.7504 3.74928 60.1141 5.22649 43.2222 7.35671C28.8721 9.16641 14.4138 11.8506 1 17.4012\"\n                stroke=\"#2E2E2E\"\n                stroke-width=\"1.8\"\n                stroke-linecap=\"round\"\n              />\n            </svg>\n          </SvgContainer>\n        )}\n      </FormSectionIsRequired>\n    </FormSectionLeftDiv>\n  );\n};\n\n\n\nreturn (\n  <Container>\n    {!state.socialDataFetched || !events ? (\n      <div class=\"spinner-border text-secondary\" role=\"status\" />\n    ) : !props.edit && registeredProject ? (\n      <Container>\n        <h1 style={{ textAlign: \"center\" }}>You've successfully registered!</h1>\n        <ButtonsContainer>\n          <Widget\n            src={`${ownerId}/widget/Buttons.NavigationButton`}\n            props={{\n              type: \"primary\",\n              text: \"View your project\",\n              disabled: false,\n              href: `?tab=project&projectId=${registeredProject.id}`,\n            }}\n          />\n          <Widget\n            src={`${ownerId}/widget/Buttons.NavigationButton`}\n            props={{\n              type: \"secondary\",\n              text: \"View all projects\",\n              disabled: false,\n              href: `?tab=projects`,\n            }}\n          />\n        </ButtonsContainer>\n      </Container>\n    ) : (\n      <>\n\n        <FormBody >\n          <FormDivider />\n          <FormSectionContainer>\n            {FormSectionLeft(\n              \"Event details\",\n              \"Give an overview of your event including pricing, details and your fanbase.\",\n              true\n            )}\n            <FormSectionRightDiv>\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"Owner ID *\",\n                  value: context.accountId,\n                  disabled: true,\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"Event name *\",\n                  placeholder: \"Enter event name\",\n                  value: state.name,\n                  onChange: (name) => State.update({ name }),\n                  validate: () => {\n                    if (state.name.length < 3) {\n                      State.update({ nameError: \"Name must be at least 3 characters\" });\n                      return;\n                    }\n\n                    if (state.name.length > 100) {\n                      State.update({\n                        nameError: \"Name must be less than 100 characters\",\n                      });\n                      return;\n                    }\n\n                    State.update({ nameError: \"\" });\n                  },\n                  error: state.nameError,\n                }}\n              />\n              <Space height={24} />\n\n              <Widget\n                src={`${ownerId}/widget/Inputs.TextArea`}\n                props={{\n                  label: \"Overview *\",\n                  placeholder: \"Give a short description of your event\",\n                  value: state.eventOverview, // Renamed state variable\n                  onChange: (eventOverview) => State.update({ eventOverview }), // Use the new name\n                  validate: () => {\n                    if (state.eventOverview && state.eventOverview.length > 500) { // Updated to new name\n                      State.update({\n                        eventOverviewError: \"Description must be less than 500 characters\", // New error state variable\n                      });\n                      return;\n                    }\n                    State.update({ eventOverviewError: \"\" }); // Clear the error using the new state variable\n                  },\n                  error: state.eventOverviewError, // Updated to new name\n                }}\n              />\n\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Inputs.Number`}\n                props={{\n                  label: \"# of Ticket Tiers\",\n                  prefixText: \"$\", // Assuming you want a dollar prefix for the number input\n                  value: state.amount === undefined ? 0 : state.amount,\n                  onChange: (amount) => State.update({ amount: Number(amount) }),\n                  validate: () => {\n                    // You can add any validation you want here\n                    if (state.amount < 0) {\n                      State.update({\n                        amountError: \"Value cannot be negative\",\n                      });\n                      return;\n                    }\n                    console.log('amount', state.amount)\n                    State.update({ amountError: \"\" });\n                  },\n                  error: state.amountError,\n                }}\n              />\n              <Space height={24} />\n\n              <Widget\n                src={`${ownerId}/widget/Inputs.Number`}\n                props={{\n                  label: \"Ticket Price\",\n                  prefixText: \"$\", // Assuming you want a dollar prefix for the price input\n                  value: state.ticketPrice === undefined ? '' : state.ticketPrice,\n                  onChange: (ticketPrice) => State.update({ ticketPrice: Number(ticketPrice) }),\n                  validate: () => {\n                    // Add validation for ticket price\n                    if (state.ticketPrice < 0) {\n                      State.update({\n                        ticketPriceError: \"Price cannot be negative\",\n                      });\n                      return;\n                    }\n                    State.update({ ticketPriceError: \"\" });\n                  },\n                  error: state.ticketPriceError,\n                }}\n              />\n              <Space height={24} />\n\n\n              <Widget\n                src={`${ownerId}/widget/Inputs.Select`}\n                props={{\n                  label: \"Select category *\",\n                  noLabel: false,\n                  placeholder: \"Choose category\",\n                  options: Object.entries(CATEGORY_MAPPINGS).map(([value, text]) => ({\n                    value,\n                    text,\n                  })),\n                  value: { text: EVENT_CATEGORY_MAPPINGS[state.eventCategory] || \"\", value: state.eventCategory },\n                  onChange: (selectedOption) => {\n                    State.update({\n                      eventCategory: selectedOption.value, // Changed to eventCategory\n                    });\n                  },\n                  validate: () => {\n                    if (!state.eventCategory) { // Changed to eventCategory\n                      State.update({\n                        eventCategoryError: \"Please select a category\", // Changed to eventCategoryError\n                      });\n                    }\n                  },\n                  error: state.eventCategoryError, // Changed to eventCategoryError\n                }}\n              />\n\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Buttons.ActionButton`}\n                props={{\n                  type: \"primary\",\n                  prefix: \"https://\",\n                  text: \"Create an event\",\n                  disabled: isCreateProjectDisabled,\n                  onClick: handleSubmit,\n                }}\n              />\n\n            </FormSectionRightDiv>\n          </FormSectionContainer>\n          <FormDivider />\n\n        </FormBody>\n        <Modal isOpen={state.isModalOpen} onClose={() => State.update({ isModalOpen: false })}>\n          <ModalHeader>\n            <ModalHeaderLeft>\n              <IconContainer>\n                <Icon src={ADD_TEAM_MEMBERS_ICON_URL} />\n              </IconContainer>\n              <ModalTitle>Add team members</ModalTitle>\n            </ModalHeaderLeft>\n            <Icon\n              cursor={\"pointer\"}\n              src={CLOSE_ICON_URL}\n              onClick={() => State.update({ isModalOpen: false })}\n            />\n          </ModalHeader>\n          <ModalDescription>Add NEAR account IDs for your team members.</ModalDescription>\n\n          <Widget\n            src={`${ownerId}/widget/Inputs.Text`}\n            props={{\n              // label: \"Project name *\",\n              placeholder: \"NEAR account ID\",\n              value: state.teamMember,\n              onChange: (teamMember) => {\n                State.update({ teamMember, nearAccountIdError: \"\" });\n              },\n              buttonText: \"Add\",\n              submit: true,\n              onClick: console.log('add clicked'),\n              handleKeyPress: (e) => {\n                if (e.key === \"Enter\") {\n\n                }\n              },\n              error: state.nearAccountIdError,\n            }}\n          />\n          <Space height={24} />\n\n\n        </Modal>\n      </>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/keypom-marketplace.near/widget/Project.CreateEventForm", "fact_widget_deployments_id": "de60910deded5a9352f15d9be055a994", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}