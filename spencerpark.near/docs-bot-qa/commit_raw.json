{"tx_hash": "DruC266YRRnWCbuAvz4EnNnmFA5qczFjyPp3WWbH3aHV", "action_id_social": "3vuHQjvDaxfSxuydSsgxTVmswKAik7DD1tT3v3155WZM-0-widget", "block_id": 119450377, "block_timestamp": "2024-05-21T23:40:48.377Z", "signer_id": "spencerpark.near", "widget_name": "docs-bot-qa", "source_code": null, "metadata": null, "branch": {"draft": {"": "const { href } = VM.require(\"devhub.near/widget/core.lib.url\");\nconst { loadItem, convertObjectKeysSnakeToPascal } = VM.require(\n  \"near/widget/Entities.QueryApi.Client\"\n);\n\nconst storedModel = Storage.get(\"agent-model\");\nconst storedLocalModel = Storage.get(\"agent-local-model\");\nconst storedCredentialType = Storage.get(\"agent-credential-type\");\nconst storedCredential = Storage.get(\"agent-credential\");\nconst storedJsonOutputSetting = Storage.get(\"agent-json-output-setting\");\nif (\n  !href ||\n  storedCredential === null ||\n  storedModel === null ||\n  storedLocalModel === null ||\n  storedCredentialType === null ||\n  loadItem === null\n) {\n  return \"Loading config...\";\n}\n\nconst { src, embedded } = props;\nconst [accountId, agentType, agentName] = src.split(\"/\") ?? [null, null, null];\n\nconst namespace = \"near\";\nconst entityType = \"agent\";\nconst entityIndexer = \"entities\";\nconst entityTable = \"entities\";\nconst user = \"dataplatform_near\";\nconst collection = `${user}_${entityIndexer}_${entityTable}`;\n\nconst query = `\nquery SingleEntity {\n    ${collection}(\n          where: { account_id: {_eq: \"${accountId}\"}, name: {_eq: \"${agentName}\"}, \n                   entity_type: {_eq: \"${entityType}\"}, namespace: {_eq: \"${namespace}\"}}\n        ) {\n        entity_type\n        namespace\n        id\n        account_id\n        name\n        display_name\n        logo_url\n        attributes\n        stars\n        tags\n        created_at\n        updated_at\n        }\n    }\n`;\n\nconst [agent, setAgent] = useState(null);\nconst [error, setError] = useState(null);\nconst onLoad = (itemInArray) => {\n  if (itemInArray.length === 0 || !itemInArray[0]) {\n    setError(`${entityType} with name ${agentName} not found`);\n    return;\n  }\n  const fetchedItem = itemInArray[0];\n  const fullEntity = convertObjectKeysSnakeToPascal({\n    ...fetchedItem,\n    ...fetchedItem.attributes,\n  });\n  delete fullEntity.attributes;\n  setAgent({ accountId, name: agentName, ...fullEntity });\n};\nloadItem(query, \"SingleEntity\", collection, onLoad);\n\nif (!agent) return \"Loading agent...\";\n\nconst listLink = href({\n  widgetSrc: `near/widget/AI.Nexus`,\n});\n\nconst [settingsOpen, setSettingsOpen] = useState(false);\nconst [question, setQuestion] = useState(\"\");\nconst [loading, setLoading] = useState(false);\nconst [messages, setMessages] = useState([]);\n\nconst [model, setModel] = useState(storedModel ?? \"near-docs\");\nconst [localModel, setLocalModel] = useState(\n  storedLocalModel ?? \"http://localhost:1234/v1/chat/completions\"\n);\nconst [credentialType, setCredentialType] = useState(\n  storedCredentialType ?? \"bearer\"\n);\nconst [credential, setCredential] = useState(storedCredential ?? \"\");\nconst [jsonOutputSetting, setJsonOutputSetting] = useState(\n  storedJsonOutputSetting ?? false\n);\n\nuseEffect(() => {\n  Storage.set(\"agent-model\", model);\n}, [model]);\nuseEffect(() => {\n  Storage.set(\"agent-local-model\", localModel);\n}, [localModel]);\nuseEffect(() => {\n  Storage.set(\"agent-credential-type\", credentialType);\n}, [credentialType]);\nuseEffect(() => {\n  Storage.set(\"agent-credential\", credential);\n}, [credential]);\nuseEffect(() => {\n  Storage.set(\"agent-json-output-setting\", jsonOutputSetting);\n}, [jsonOutputSetting]);\n\nconst toggleSettings = () => {\n  setSettingsOpen(!settingsOpen);\n};\n\nconst routeApi = async (question) => {\n  switch (model) {\n    case \"near-docs\":\n      return nearDocs(question);\n    default:\n      return openAICompatible(question);\n  }\n};\nconst urlForModel = (model) => {\n  switch (model) {\n    case \"near-docs\":\n      return `https://f9c0-34-125-214-61.ngrok-free.app/query`;\n  }\n};\nconst nearDocs = async (question) => {\n  return asyncFetch(`https://f9c0-34-125-214-61.ngrok-free.app/query`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    responseType: \"json\",\n    body: `openai_key=${encodeURIComponent(\n      credential\n    )}&question=${encodeURIComponent(question.content)}`,\n  })\n    .then((response) => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(`Request failed with status ${response.status}`);\n      }\n    })\n    .then((data) => {\n      const answer = data.response;\n      setMessages(answer);\n      return answer;\n    })\n    .catch((error) => {\n      console.error(\"Error fetching data:\", error);\n    })\n    .finally(() => {\n      setLoading(false);\n      setQuestion(\"\");\n    });\n};\nconst openAICompatible = async (question) => {\n  let finalQuestion = question.content;\n  let options = {\n    model,\n  };\n  if (jsonOutputSetting) {\n    options.response_format = { type: \"json_object\" };\n    if (!finalQuestion.includes(\"json\")) {\n      finalQuestion = `${finalQuestion} respond in json`;\n    }\n  }\n\n  return asyncFetch(urlForModel(model), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${credential}`,\n    },\n    responseType: \"json\",\n    body: JSON.stringify({\n      ...options,\n      messages: [{ role: \"system\", content: agent.prompt }, ...messages],\n    }),\n  }).then((response) => {\n    const answer = response.body.choices[0].message.content;\n    return answer;\n  });\n};\n\nuseEffect(() => {\n  if (messages.length === 0 || messages[messages.length - 1].role !== \"user\") {\n    return;\n  }\n  setLoading(true);\n  routeApi(...messages.slice(-1))\n    .then((answer) => {\n      setMessages([...messages, { role: \"assistant\", content: answer }]);\n    })\n    .finally(() => {\n      setLoading(false);\n    });\n}, [messages]);\n\nconst submitQuestion = () => {\n  setMessages([...messages, { role: \"user\", content: question }]);\n  setQuestion(\"\");\n};\nconst requiresCredentials = (model) => {\n  return (\n    model === \"gpt-4\" ||\n    model === \"gpt-3.5-turbo\" ||\n    model === \"mixtral-8x7b-32768\" ||\n    model === \"llama2-70b-4096\"\n  );\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 48px;\n  padding: 48px;\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-bottom: 1em;\n`;\n\nconst Header = styled.h1`\n  font-size: 24px;\n  line-height: 39px;\n  color: #11181c;\n  margin-bottom: 20px;\n  font-weight: 600;\n`;\nconst Text = styled.p`\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${(p) => (p.bold ? \"#11181C\" : \"#687076\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n\n  i {\n    margin-right: 4px;\n  }\n`;\nconst Prompt = styled.p`\n  font-family: monospace;\n  font-size: 14px;\n  overflow-y: auto;\n  height: 100px;\n`;\nconst Label = styled.span`\n  font-weight: 600;\n`;\nconst Settings = styled.div`\n  margin-bottom: 1em;\n  z-index: 1000;\n`;\nconst Controls = styled.div`\n  margin-bottom: 1em;\n`;\nconst CardControl = styled.div`\n  cursor: pointer;\n  color: var(--violet8);\n  margin-bottom: 1em;\n`;\nconst AllSettings = styled.div``;\nconst InputWrapper = styled.div`\n  padding-bottom: 1em;\n`;\nconst Question = styled.input`\n  border-top-left-radius: 2rem;\n  border-bottom-left-radius: 2rem;\n`;\nconst UserMessage = styled.div``;\nconst AgentMessage = styled.div`\n  background-color: #f9f9f9;\n`;\n\nconst renderSettings = () => {\n  return (\n    <Settings>\n      <CardControl bold onClick={toggleSettings}>\n        <i className={settingsOpen ? \"ph ph-caret-up\" : \"ph ph-caret-down\"} />{\" \"}\n        Settings\n      </CardControl>\n      {settingsOpen && (\n        <AllSettings>\n          <InputWrapper>\n            <Widget\n              src=\"near/widget/DIG.InputSelect\"\n              props={{\n                groups: [\n                  {\n                    label: \"NEAR\",\n                    items: [\n                      {\n                        label: \"NEAR Docs\",\n                        value: \"near-docs\",\n                      },\n                      // Hi hackathon teams, implementing calls to gpt4.near? Add it here. - the black dragon\n                    ],\n                  },\n                ],\n                label: \"Choose Model\",\n                placeholder: \"NEAR Docs\",\n                rootProps: {\n                  value: model,\n                  onValueChange: setModel,\n                },\n              }}\n            />\n          </InputWrapper>\n          {model === \"local\" && (\n            <InputWrapper>\n              <Widget\n                src=\"near/widget/DIG.Input\"\n                props={{\n                  label: \"Local Model URL\",\n                  assistiveText:\n                    \"Any url that accepts messages in OpenAI format\",\n                  iconLeft: \"ph-bold ph-horse\",\n                  onInput: (e) => setLocalModel(e.target.value),\n                  value: localModel,\n                }}\n              />\n            </InputWrapper>\n          )}\n          <InputWrapper>\n            <div className=\"row\">\n              <div className=\"col-3\">\n                <Widget\n                  src=\"near/widget/DIG.InputSelect\"\n                  props={{\n                    groups: [\n                      {\n                        label: \"OpenAI API Key\",\n                        items: [\n                          {\n                            label: \"Bearer Token\",\n                            value: \"bearer\",\n                          },\n                        ],\n                      },\n                    ],\n                    label: \"Credential Type\",\n                    rootProps: {\n                      value: credentialType,\n                      onValueChange: setCredentialType,\n                    },\n                  }}\n                />\n              </div>\n              <div className=\"col\">\n                <Widget\n                  src=\"near/widget/DIG.Input\"\n                  props={{\n                    label: \"Credentials\",\n                    assistiveText:\n                      \"Your OpenAI API Key or other credentials, will be stored in your browser.\",\n                    iconLeft: \"ph-bold ph-identification-card\",\n                    onInput: (e) => setCredential(e.target.value),\n                    value: credential,\n                    type: \"password\",\n                  }}\n                />\n              </div>\n            </div>\n          </InputWrapper>\n          <InputWrapper>\n            <Widget\n              src=\"near/widget/DIG.Checkbox\"\n              props={{\n                id: \"json-output\",\n                label: \"JSON Output mode\",\n                checked: jsonOutputSetting,\n                onCheckedChange: setJsonOutputSetting,\n              }}\n            />{\" \"}\n            not supported by all providers.\n          </InputWrapper>\n        </AllSettings>\n      )}\n    </Settings>\n  );\n};\n\nreturn (\n  <Wrapper>\n    <div>\n      {!embedded && (\n        <div>\n          <Link to={listLink}>\n            <Header>\n              <i className=\"ph ph-arrow-left\" />\n              Agent List\n            </Header>\n          </Link>\n          <Overview>\n            <div className=\"row\">\n              <div className=\"col-5\">\n                <Widget\n                  src=\"near/widget/AI.Agent.AgentSummary\"\n                  props={{\n                    size: \"small\",\n                    showTags: true,\n                    entity: agent,\n                  }}\n                />\n              </div>\n              <div className=\"col-7\">\n                <Prompt>\n                  <Label>Prompt:</Label> {agent.prompt}\n                </Prompt>\n              </div>\n            </div>\n          </Overview>\n        </div>\n      )}\n      <Controls>\n        {renderSettings()}\n        {requiresCredentials(model) && credential === \"\" && (\n          <div className=\"alert alert-danger mx-3\" role=\"alert\">\n            <i className=\"ph ph-alert-circle\" /> To use an OpenAI or Groq model\n            enter your API Key in Settings or change to another provider.\n          </div>\n        )}\n        <div className=\"input-group\">\n          <Question\n            type=\"text\"\n            className=\"form-control\"\n            value={question}\n            onChange={(e) => setQuestion(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.key === \"Enter\") {\n                submitQuestion();\n              }\n            }}\n            placeholder=\"What's your question?\"\n            autoFocus\n          />\n          <Widget\n            src=\"near/widget/DIG.Button\"\n            props={{\n              onClick: submitQuestion,\n              iconLeft: editIcon,\n              variant: \"affirmative\",\n              fill: \"solid\",\n              size: \"large\",\n              label: \"Submit\",\n              disabled:\n                (requiresCredentials(model) && credential === \"\") ||\n                question === \"\",\n              style: {\n                borderTopLeftRadius: \"0rem\",\n                borderBottomLeftRadius: \"0rem\",\n              },\n            }}\n          />\n        </div>\n      </Controls>\n      <div className=\"d-flex flex-column-reverse\">\n        {messages.map(({ role, content }, i) => {\n          return (\n            <div key={i} className={`message ${role}`}>\n              {role === \"user\" && (\n                <UserMessage>\n                  <Widget\n                    src=\"mob.near/widget/N.ProfileLine\"\n                    props={{ accountId: context.accountId }}\n                  />\n                  <Markdown text={content} />\n                </UserMessage>\n              )}\n              {role !== \"user\" && (\n                <AgentMessage>\n                  <Markdown text={content} />\n                </AgentMessage>\n              )}\n            </div>\n          );\n        })}\n        {loading && (\n          <div key=\"loading\" className={`message system`}>\n            <div>\n              <span\n                className=\"spinner-grow spinner-grow-sm me-1\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  </Wrapper>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/spencerpark.near/widget/docs-bot-qa", "fact_widget_deployments_id": "34dcc35bb8278decb48e2aaf6782e4b2", "inserted_timestamp": "2024-05-22T02:08:55.544Z", "modified_timestamp": "2024-05-22T02:08:55.544Z", "__row_index": 0}