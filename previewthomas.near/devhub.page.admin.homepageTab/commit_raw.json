{"tx_hash": "8V1dt27ywBEKpNMbiPbue1KpLWBydq47HyZk63nGCMkE", "action_id_social": "J3EatwkaM9fk1qzKWEUz9LQA7Qfc66fDRqsE6cnYkzjP-0-widget", "block_id": 108257014, "block_timestamp": "2023-12-18T14:32:24.115Z", "signer_id": "previewthomas.near", "widget_name": "devhub.page.admin.homepageTab", "source_code": "const {\n  getFeaturedCommunities,\n  setFeaturedCommunities,\n  getAllCommunitiesMetadata,\n} = VM.require(\"previewthomas.near/widget/core.adapter.devhub-contract\");\n\nconst { Tile } =\n  VM.require(\"previewthomas.near/widget/devhub.components.molecule.Tile\") ||\n  (() => <></>);\n\nif (\n  !getFeaturedCommunities ||\n  !setFeaturedCommunities ||\n  !getAllCommunitiesMetadata\n) {\n  return <p>Loading modules...</p>;\n}\n\nconst fc = getFeaturedCommunities();\n// The state will stay empty even after the data right data has been retrieved\nif (!fc) {\n  return <p>Loading featured communities...</p>;\n}\nconst featuredCommunityList = fc || [];\n\nconst allCommunities = getAllCommunitiesMetadata();\n\nconst [communityMessage, setCommunityMessage] = useState(\"\");\nconst [previewConnect, setPreviewConnect] = useState(false);\n\nconst [communityHandles, setCommunityHandles] = useState(\n  featuredCommunityList.map(({ handle }) => handle)\n);\nconst handleResetItems = () => {\n  setCommunityHandles(featuredCommunityList.map(({ handle }) => handle));\n};\n\nfunction handleSubmit() {\n  if (communityHandles.length < 4) {\n    return setCommunityMessage(\"Can't set fewer than 4 communities\");\n  }\n  setFeaturedCommunities({ handles: communityHandles });\n}\n\nreturn (\n  <>\n    <Widget\n      src=\"previewthomas.near/widget/devhub.components.atom.Alert\"\n      props={{\n        onClose: () => setCommunityMessage(\"\"),\n        message: communityMessage,\n      }}\n    />\n    <Tile className=\"p-3 mb-3\">\n      <h3> Manage featured communities</h3>\n      <Widget\n        src=\"previewthomas.near/widget/devhub.components.molecule.ListEditor\"\n        props={{\n          data: {\n            maxLength: 5,\n            placeholder: \"Community handle\",\n            prefix: \"Community handle\",\n            list: communityHandles,\n          },\n          setList: setCommunityHandles,\n          validate: (newItem) => {\n            return allCommunities.map(({ handle }) => handle).includes(newItem);\n          },\n          invalidate: () =>\n            setCommunityMessage(\n              \"This community handle does not exist, make sure you use an existing handle.\"\n            ),\n        }}\n      />\n\n      <div\n        className={\"d-flex align-items-center justify-content-end gap-3 mt-4\"}\n      >\n        <Widget\n          src={\"previewthomas.near/widget/devhub.components.molecule.Button\"}\n          props={{\n            classNames: {\n              root: \"btn-outline-danger shadow-none border-0\",\n            },\n            label: \"Cancel\",\n            onClick: handleResetItems,\n          }}\n        />\n        <Widget\n          src={\"previewthomas.near/widget/devhub.components.molecule.Button\"}\n          props={{\n            classNames: { root: \"btn\" },\n            icon: {\n              type: \"bootstrap_icon\",\n              variant: \"bi-check-circle-fill\",\n            },\n            label: \"Submit\",\n            onClick: handleSubmit,\n          }}\n        />\n      </div>\n    </Tile>\n    <Widget\n      src={\"previewthomas.near/widget/devhub.components.molecule.PostControls\"}\n      props={{\n        onClick: () => setPreviewConnect(!previewConnect),\n        icon: previewConnect ? \"bi bi-toggle-on\" : \"bi bi-toggle-off\",\n        title: \"Preview homepage\",\n        testId: \"preview-homepage\",\n      }}\n    />\n    <div class=\"mt-3\">\n      {previewConnect && (\n        <Widget\n          src=\"previewthomas.near/widget/devhub.components.island.connect\"\n          props={{ ...props }}\n        />\n      )}\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/previewthomas.near/widget/devhub.page.admin.homepageTab", "fact_widget_deployments_id": "6c43462e30f91ba8a23d206baea1d788", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 39}