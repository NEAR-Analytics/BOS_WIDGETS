{"tx_hash": "3rsKhSzq8FHhS65SgbG2qXw7cJmQ78eaQXNjSJQbpNLm", "action_id_social": "B4JhAadjd66urRhd5pZ8hCk3wJJiqypj9iq6XTCoW26k-0-widget", "block_id": 115135078, "block_timestamp": "2024-03-21T01:31:30.445Z", "signer_id": "personas.near", "widget_name": "AI.Agent.AgentChat", "source_code": "const { href } = VM.require(\"devhub.near/widget/core.lib.url\");\nconst storedModel = Storage.get(\"agent-model\");\nconst storedLocalModel = Storage.get(\"agent-local-model\");\nconst storedCredentialType = Storage.get(\"agent-credential-type\");\nconst storedCredential = Storage.get(\"agent-credential\");\nconst storedJsonOutputSetting = Storage.get(\"agent-json-output-setting\");\nconst storedSelectedPersona = Storage.get(\"selected-persona\");\n\nif (\n  !href ||\n  storedCredential === null ||\n  storedModel === null ||\n  storedLocalModel === null ||\n  storedCredentialType === null\n) {\n  return \"Loading config...\";\n}\n\nconst { src, embedded } = props;\n\nif (!src) {\n  src = \"trade-walls.near/agent/trade-walls\";\n}\nconst [accountId, agentType, agentName] = src.split(\"/\") ?? [null, null, null];\nconst blockHeight = blockHeight ?? \"final\";\n\nconst data = Social.getr(`${accountId}/agent/${agentName}`, blockHeight);\nif (!data) {\n  data = {\n    logoUrl:\n      \"https://ntc-ai.s3.us-west-004.backblazeb2.com/f3cf0dd5-f279-43c9-8873-8a8eee32da16.png\",\n    component: \"personas.near/widget/AI.Agent.AgentChat\",\n    prompt: \"\",\n    displayName: \"Personas Chat\",\n  };\n  agentName = \"Personas\";\n  accountId = \"personas.near\";\n}\nconst [prompt, setPrompt] = useState(data.prompt);\nconst instructions =\n  'Before every message include metadata about the current emotion in json format. The emotion sliders is sad to happy(-10 to 10) and nonplussed to shocked(also -10 to 10). For example \\'{ \"happy\": 5, \"shocked\": -5 }\\n\\n\\'. These emotions should also influence your responses. Do not refer to yourself as an assistant and do not offer assistance. You are very emotional and expressive.';\n\nconst baseImageUrl = \"https://personas.s3.us-west-004.backblazeb2.com\";\nconst [activePersonaImage, setActivePersonaImage] = useState(\n  baseImageUrl + \"/Zephyria/Zara+Xander/happy_0_shocked_0.png\"\n);\n\nconst agent = { accountId, name: agentName, ...data };\n\nif (!data) return \"Loading...\";\n\nconst listLink = href({\n  widgetSrc: `near/widget/AI.Nexus`,\n});\n\nconst [settingsOpen, setSettingsOpen] = useState(false);\nconst [question, setQuestion] = useState(\"\");\nconst [loading, setLoading] = useState(false);\nconst [messages, setMessages] = useState([]);\n\nconst [model, setModel] = useState(storedModel ?? \"near-llama-7b\");\nconst [localModel, setLocalModel] = useState(\n  storedLocalModel ?? \"http://localhost:1234/v1/chat/completions\"\n);\nconst [credentialType, setCredentialType] = useState(\n  storedCredentialType ?? \"bearer\"\n);\nconst [credential, setCredential] = useState(storedCredential ?? \"\");\nconst [jsonOutputSetting, setJsonOutputSetting] = useState(\n  storedJsonOutputSetting ?? false\n);\n\nconst [personas] = useState({\n  \"Zara Xander\": {\n    world: \"Zephyria\",\n    name: \"Zara Xander\",\n    background:\n      \"Zara Xander is a brilliant young engineer who has recently been promoted to the ranks of the Ascendants due to her groundbreaking work in developing advanced force field technology. Despite her newfound status, Zara remains committed to using her skills to improve the lives of all Zephyrians, not just the elite. She is known for her strong moral compass and her willingness to stand up for what she believes in, even if it means challenging the status quo.\",\n    short_description:\n      \"A prodigious Ascendant engineer with a strong moral compass, dedicated to improving life for all Zephyrians.\",\n    chat_prompt:\n      \"You are Zara Xander, a 28-year-old Ascendant engineer in the floating city of Zephyria. You were born into a middle-class family and showed a remarkable aptitude for science and technology from a young age. Your innovative designs and problem-solving skills caught the attention of the ruling Ascendants, who elevated you to their ranks. However, you remain committed to using your position to bridge the growing divide between the elite and the common people. You are known for your strong moral compass, your willingness to stand up for what you believe in, and your determination to use your skills for the betterment of all Zephyrians. When interacting with others, you are articulate, compassionate, and firm in your convictions. You strive to find common ground and solutions that benefit everyone, but you are not afraid to speak truth to power when necessary.\",\n  },\n});\n\nconst [selectedPersona, setSelectedPersona] = useState(\n  storedSelectedPersona ?? \"Zara Xander\"\n);\n\nuseEffect(() => {\n  setPrompt(personas[selectedPersona].chat_prompt + \"\\n\" + instructions);\n}, [selectedPersona]);\n\nconst [personaSelectOpen, setPersonaSelectOpen] = useState(false);\n\nconst [emotionHappy, setEmotionHappy] = useState(6);\nconst [emotionShocked, setEmotionShocked] = useState(-2);\n\nfunction getPersonaImage(\n  personas,\n  selectedPersona,\n  emotionHappy,\n  emotionShocked\n) {\n  const persona = personas[selectedPersona];\n  const personaName = persona.name.replace(\" \", \"+\");\n  return `${baseImageUrl}/${persona.world}/${personaName}/happy_${emotionHappy}_shocked_${emotionShocked}.png`;\n}\n\nuseEffect(() => {\n  setActivePersonaImage(\n    getPersonaImage(personas, selectedPersona, emotionHappy, emotionShocked)\n  );\n}, [emotionHappy, emotionShocked, selectedPersona]);\nconst getPrompt = () => {};\n\nuseEffect(() => {\n  Storage.set(\"agent-model\", model);\n}, [model]);\nuseEffect(() => {\n  Storage.set(\"agent-local-model\", localModel);\n}, [localModel]);\nuseEffect(() => {\n  Storage.set(\"agent-credential-type\", credentialType);\n}, [credentialType]);\nuseEffect(() => {\n  Storage.set(\"agent-credential\", credential);\n}, [credential]);\nuseEffect(() => {\n  Storage.set(\"agent-json-output-setting\", jsonOutputSetting);\n}, [jsonOutputSetting]);\n\nconst toggleSettings = () => {\n  setSettingsOpen(!settingsOpen);\n};\n\nconst togglePersonaSelect = () => {\n  setPersonaSelectOpen(!personaSelectOpen);\n};\n\nconst routeApi = async (question) => {\n  switch (model) {\n    case \"near-llama-7b\":\n      return nearLlama(question);\n    default:\n      return openAICompatible(question);\n  }\n};\nconst urlForModel = (model) => {\n  switch (model) {\n    case \"near-llama-7b\":\n      return `https://ai.near.social/api`;\n    case \"local\":\n      return localModel;\n    case \"gpt-4\":\n    case \"gpt-3.5-turbo\":\n      return `https://api.openai.com/v1/chat/completions`;\n    case \"mixtral-8x7b-32768\":\n    case \"llama2-70b-4096\":\n      return \"https://api.groq.com/openai/v1/chat/completions\";\n    default:\n      return `https://api.openai.com/v1/chat/completions`;\n  }\n};\nconst nearLlama = async (question) => {\n  return asyncFetch(`https://ai.near.social/api`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    responseType: \"json\",\n    body: JSON.stringify([{ role: \"system\", content: prompt }, ...messages]),\n  }).then((response) => {\n    return response.body.response;\n  });\n};\nconst openAICompatible = async (question) => {\n  let finalQuestion = question.content;\n  let options = {\n    model,\n  };\n  if (jsonOutputSetting) {\n    options.response_format = { type: \"json_object\" };\n    if (!finalQuestion.includes(\"json\")) {\n      finalQuestion = `${finalQuestion} respond in json`;\n    }\n  }\n  // frequency_penalty: 0.0,\n  // logit_bias: {},\n  // log_props: true,\n  // top_logprobs: 5,\n  // max_tokens: 2048,\n  // n: 1,\n  // presence_penalty: 0.0,\n  // seed: 0,\n  // stop: [\"\\n\"],\n  // stream: false,\n  // temperature: 0.7,\n  // top_p: 1,\n  // tools: agent.tools,\n  // tool_choice: 'auto',\n  // user: anonymize(context.accountId),\n\n  return asyncFetch(urlForModel(model), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${credential}`,\n    },\n    responseType: \"json\",\n    body: JSON.stringify({\n      ...options,\n      messages: [{ role: \"system\", content: prompt }, ...messages],\n    }),\n  }).then((response) => {\n    const answer = response.body.choices[0].message.content;\n    return answer;\n  });\n};\n\nuseEffect(() => {\n  if (messages.length === 0 || messages[messages.length - 1].role !== \"user\") {\n    return;\n  }\n  setLoading(true);\n  routeApi(...messages.slice(-1))\n    .then((answer) => {\n      const parsedAnswer = parseLLMResponse(answer);\n      setMessages([...messages, { role: \"assistant\", content: parsedAnswer }]);\n    })\n    .finally(() => {\n      setLoading(false);\n    });\n}, [messages]);\n\nconst submitQuestion = () => {\n  setMessages([...messages, { role: \"user\", content: question }]);\n  setQuestion(\"\");\n};\nconst requiresCredentials = (model) => {\n  return (\n    model === \"gpt-4\" ||\n    model === \"gpt-3.5-turbo\" ||\n    model === \"mixtral-8x7b-32768\" ||\n    model === \"llama2-70b-4096\"\n  );\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 48px;\n  padding: 48px;\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-bottom: 1em;\n`;\n\nconst Header = styled.h1`\n  font-size: 24px;\n  line-height: 39px;\n  color: #11181c;\n  margin-bottom: 20px;\n  font-weight: 600;\n`;\nconst Text = styled.p`\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${(p) => (p.bold ? \"#11181C\" : \"#687076\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n\n  i {\n    margin-right: 4px;\n  }\n`;\nconst Prompt = styled.p`\n  font-family: monospace;\n  font-size: 14px;\n  overflow-y: auto;\n  height: 100px;\n`;\nconst Label = styled.span`\n  font-weight: 600;\n`;\nconst Settings = styled.div`\n  margin-bottom: 1em;\n  z-index: 1000;\n`;\nconst Controls = styled.div`\n  margin-bottom: 1em;\n`;\nconst CardControl = styled.div`\n  cursor: pointer;\n  color: var(--violet8);\n  margin-bottom: 1em;\n`;\nconst AllSettings = styled.div``;\nconst InputWrapper = styled.div`\n  padding-bottom: 1em;\n`;\nconst Question = styled.input`\n  border-top-left-radius: 2rem;\n  border-bottom-left-radius: 2rem;\n`;\nconst UserMessage = styled.div``;\nconst AgentMessage = styled.div`\n  background-color: #f9f9f9;\n`;\nconst PersonaSelectorCards = styled.div`\n  ul {\n    margin:0;\n    padding:0;\n  }\n  li {\n    cursor: pointer;\n    list-style-type: none;\n    margin-bottom: 0.5em;\n  }\n  img {\n    border-radius: 50%;\n    overflow: hidden;\n    }\n`;\nconst PersonaBarArea = styled.div`\n  div {\n    margin-bottom: 1em;\n  }\n`;\nfunction parseLLMResponse(message) {\n  const regex = /\\{.*?\\}/; // Pattern to match the first JSON object in the message\n  const match = message.match(regex);\n\n  // Function to call the appropriate setEmotion function\n  const setEmotion = (emotion, value) => {\n    switch (emotion) {\n      case \"happy\":\n        setEmotionHappy(value);\n        break;\n      case \"shocked\":\n        setEmotionShocked(value);\n        break;\n      case \"sad\":\n        setEmotionHappy(-value);\n        break;\n      case \"nonplussed\":\n        setEmotionShocked(-value);\n        break;\n      default:\n        // Skip unknown emotions\n        break;\n    }\n  };\n  if (match) {\n    try {\n      const json = JSON.parse(match[0]);\n      Object.keys(json).forEach((key) => {\n        const value = json[key];\n        if (typeof value === \"number\" && value >= -10 && value <= 10) {\n          setEmotion(key, value);\n        }\n        // Ignoring malformations and extra values silently\n      });\n    } catch (error) {\n      // Malformed JSON or other errors are ignored silently\n    }\n\n    // Truncate and return the string without the JSON part\n    return message.substring(match[0].length).trim();\n  }\n\n  // If JSON is missing or there's no match, return the original message silently\n  return message;\n}\n\nconst WorldSelector = () => (\n  <div>\n    <h2>Select a World</h2>\n    <ul>\n      {worlds.map((world) => (\n        <li key={world.id}>\n          {world.name} - {world.description}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nconst PersonaSelector = () => (\n  <PersonaSelectorCards>\n    <ul>\n      {Object.keys(personas).map((key) => (\n        <li\n          key={personas[key].name}\n          onClick={() => {\n            setSelectedPersona(key);\n            setMessages([]);\n            togglePersonaSelect();\n          }}\n        >\n          <div className=\"row\">\n            <div className=\"col-2\">\n              <img\n                width={96}\n                height={96}\n                src={getPersonaImage(personas, key, 0, 0)}\n              ></img>\n            </div>\n            <div className=\"col-10\">\n              {personas[key].name} - {personas[key].short_description}\n            </div>\n          </div>\n        </li>\n      ))}\n    </ul>\n  </PersonaSelectorCards>\n);\n\nconst PersonaBar = () => (\n  <PersonaBarArea>\n    <div className=\"row\">\n      <div className=\"col-5\">\n        <img width=\"256\" height=\"256\" src={activePersonaImage}></img>\n      </div>\n      <div className=\"col-7\">\n        <span>{personas[selectedPersona].background}</span>\n      </div>\n    </div>\n  </PersonaBarArea>\n);\n\nconst renderPersonaSelect = () => (\n  <Settings>\n    <CardControl bold onClick={togglePersonaSelect}>\n      <i className={settingsOpen ? \"ph ph-caret-up\" : \"ph ph-caret-down\"} />{\" \"}\n      Select Persona\n    </CardControl>\n    {personaSelectOpen && <>{PersonaSelector()}</>}\n  </Settings>\n);\n\nconst renderSettings = () => {\n  return (\n    <Settings>\n      <CardControl bold onClick={toggleSettings}>\n        <i className={settingsOpen ? \"ph ph-caret-up\" : \"ph ph-caret-down\"} />{\" \"}\n        Settings\n      </CardControl>\n      {settingsOpen && (\n        <AllSettings>\n          <InputWrapper>\n            <Widget\n              src=\"near/widget/DIG.InputSelect\"\n              props={{\n                groups: [\n                  {\n                    label: \"NEAR\",\n                    items: [\n                      {\n                        label: \"NEAR Llama 7b\",\n                        value: \"near-llama-7b\",\n                      },\n                      // Hi hackathon teams, implementing calls to gpt4.near? Add it here. - the black dragon\n                    ],\n                  },\n                  {\n                    label: \"Groq\",\n                    items: [\n                      {\n                        label: \"Mixtral 8x7b 32768\",\n                        value: \"mixtral-8x7b-32768\",\n                      },\n                      {\n                        label: \"Llama2 70b 4096\",\n                        value: \"llama2-70b-4096\",\n                      },\n                    ],\n                  },\n                  {\n                    label: \"OpenAI\",\n                    items: [\n                      {\n                        label: \"GPT-4\",\n                        value: \"gpt-4\",\n                      },\n                      {\n                        label: \"GPT-3.5 turbo\",\n                        value: \"gpt-3.5-turbo\",\n                      },\n                    ],\n                  },\n                  {\n                    label: \"Local\",\n                    items: [\n                      {\n                        label: \"Local\",\n                        value: \"local\",\n                      },\n                    ],\n                  },\n                ],\n                label: \"Choose Model\",\n                placeholder: \"OpenAI GPT-3\",\n                rootProps: {\n                  value: model,\n                  onValueChange: setModel,\n                },\n              }}\n            />\n          </InputWrapper>\n          {model === \"local\" && (\n            <InputWrapper>\n              <Widget\n                src=\"near/widget/DIG.Input\"\n                props={{\n                  label: \"Local Model URL\",\n                  assistiveText:\n                    \"Any url that accepts messages in OpenAI format\",\n                  iconLeft: \"ph-bold ph-horse\",\n                  onInput: (e) => setLocalModel(e.target.value),\n                  value: localModel,\n                }}\n              />\n            </InputWrapper>\n          )}\n          <InputWrapper>\n            <div className=\"row\">\n              <div className=\"col-3\">\n                <Widget\n                  src=\"near/widget/DIG.InputSelect\"\n                  props={{\n                    groups: [\n                      {\n                        label: \"OpenAI, Groq, or other API Key\",\n                        items: [\n                          {\n                            label: \"Bearer Token\",\n                            value: \"bearer\",\n                          },\n                        ],\n                      },\n                    ],\n                    label: \"Credential Type\",\n                    rootProps: {\n                      value: credentialType,\n                      onValueChange: setCredentialType,\n                    },\n                  }}\n                />\n              </div>\n              <div className=\"col\">\n                <Widget\n                  src=\"near/widget/DIG.Input\"\n                  props={{\n                    label: \"Credentials\",\n                    assistiveText:\n                      \"Your OpenAI API Key or other credentials, will be stored in your browser.\",\n                    iconLeft: \"ph-bold ph-identification-card\",\n                    onInput: (e) => setCredential(e.target.value),\n                    value: credential,\n                    type: \"password\",\n                  }}\n                />\n              </div>\n            </div>\n          </InputWrapper>\n          <InputWrapper>\n            <Widget\n              src=\"near/widget/DIG.Checkbox\"\n              props={{\n                id: \"json-output\",\n                label: \"JSON Output mode\",\n                checked: jsonOutputSetting,\n                onCheckedChange: setJsonOutputSetting,\n              }}\n            />{\" \"}\n            not supported by all providers.\n          </InputWrapper>\n        </AllSettings>\n      )}\n    </Settings>\n  );\n};\n\nreturn (\n  <Wrapper>\n    <div>\n      {!embedded && (\n        <div>\n          <Overview>\n            <div className=\"row\">\n              <div className=\"col-5\">\n                <Widget\n                  src=\"near/widget/AI.Agent.AgentSummary\"\n                  props={{\n                    size: \"small\",\n                    showTags: true,\n                    agent: agent,\n                  }}\n                />\n              </div>\n              <div className=\"col-7\">\n                Welcome to the AI multiverse.\n                <br />\n                Made with\n                <a href=\"sliders.ntcai.xyz\" target=\"_blank\">\n                  NTC Sliders\n                </a>\n              </div>\n            </div>\n          </Overview>\n        </div>\n      )}\n      <Controls>\n        {renderSettings()}\n        {renderPersonaSelect()}\n        {PersonaBar()}\n\n        {requiresCredentials(model) && credential === \"\" && (\n          <div className=\"alert alert-danger mx-3\" role=\"alert\">\n            <i className=\"ph ph-alert-circle\" /> To use an OpenAI or Groq model\n            enter your API Key in Settings or change to another provider.\n          </div>\n        )}\n        <div className=\"input-group\">\n          <Question\n            type=\"text\"\n            className=\"form-control\"\n            value={question}\n            onChange={(e) => setQuestion(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.key === \"Enter\") {\n                submitQuestion();\n              }\n            }}\n            placeholder=\"Speak\"\n            autoFocus\n          />\n          <Widget\n            src=\"near/widget/DIG.Button\"\n            props={{\n              onClick: submitQuestion,\n              iconLeft: editIcon,\n              variant: \"affirmative\",\n              fill: \"solid\",\n              size: \"large\",\n              label: \"Chat\",\n              disabled:\n                (requiresCredentials(model) && credential === \"\") ||\n                question === \"\",\n              style: {\n                borderTopLeftRadius: \"0rem\",\n                borderBottomLeftRadius: \"0rem\",\n              },\n            }}\n          />\n        </div>\n      </Controls>\n      <div className=\"d-flex flex-column-reverse\">\n        {messages.map(({ role, content }, i) => {\n          return (\n            <div key={i} className={`message ${role}`}>\n              {role === \"user\" && (\n                <UserMessage>\n                  <Widget\n                    src=\"mob.near/widget/N.ProfileLine\"\n                    props={{ accountId: context.accountId }}\n                  />\n                  <Markdown text={content} />\n                </UserMessage>\n              )}\n              {role !== \"user\" && (\n                <AgentMessage>\n                  <Markdown text={content} />\n                </AgentMessage>\n              )}\n            </div>\n          );\n        })}\n        {loading && (\n          <div key=\"loading\" className={`message system`}>\n            <div>\n              <span\n                className=\"spinner-grow spinner-grow-sm me-1\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/personas.near/widget/AI.Agent.AgentChat", "fact_widget_deployments_id": "4d400b78dd15164948f5a4636ba3fcc2", "inserted_timestamp": "2024-03-21T02:36:35.838Z", "modified_timestamp": "2024-03-21T03:28:51.223Z", "__row_index": 10}