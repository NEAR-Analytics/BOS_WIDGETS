{"tx_hash": "4bLtPNYgEFux3pgLr5NnYN4oUMkPzGXfw4JkpM6WVqp3", "action_id_social": "DkihHRZ2n85c2WmHPyG6mkFXFwL9h6ksfxahfBpSSEWB-0-widget", "block_id": 109671233, "block_timestamp": "2024-01-05T17:54:09.867Z", "signer_id": "memelol.near", "widget_name": "lol.Components.MyStats", "source_code": "const { format, Token } = VM.require(`memelol.near/widget/lol.Utils`);\nconst { Modal } = VM.require(`memelol.near/widget/lol.Components.Modal`);\nconst { Button } = VM.require(`memelol.near/widget/lol.Components.Button`);\nconst { contractName, transactionHashes } = props;\n\nconst Container = styled.div`\n  font-size: 18px;\n  padding: 1rem;\n\n  .general-stats {\n    flex-direction: row;\n    @media screen and (max-width: 786px) {\n      flex-direction: column;\n    }\n  }\n\n  .hr {\n    height: 1px;\n    background: #000;\n    width: 100%;\n  }\n\n  .results {\n    max-height: 150px;\n    overflow-y: scroll;\n\n    .item {\n      padding: 5px 0;\n    }\n    .token {\n      width: 70px;\n    }\n    .token-near {\n      width: 50px;\n    }\n\n    .txn small {\n      @media screen and (max-width: 786px) {\n        display: none;\n      }\n    }\n  }\n  @media screen and (max-width: 786px) {\n    padding: 0.5rem;\n  }\n`;\n\nconst [myStats, setMyStats] = useState({\n  receivedBoxes: 0,\n  receivedNear: 0,\n  receivedLoL: 0,\n});\n\nconst [showMintModal, setShowMintModal] = useState(false);\nconst [mintResults, setMintResults] = useState([]);\n\nconst fetchMyStats = () => {\n  const stats = Near.view(contractName, \"get_user_rewards\", {\n    owner_id: context.accountId,\n  });\n  setMyStats({\n    receivedLoL: format(new Big(stats[0] || 0).toNumber(), 24),\n    receivedNear: format(new Big(stats[1] || 0).toNumber(), 24),\n    receivedBoxes: stats[2],\n  });\n};\n\nconst checkTxnMethod = (res, name) => {\n  const txn = res.body.result.transaction;\n\n  return (\n    res.body.result.status.SuccessValue &&\n    txn.signer_id === context.accountId &&\n    txn.actions[0].FunctionCall.method_name === name\n  );\n};\n\nconst fetchMintResult = async () => {\n  if (!transactionHashes) return;\n  const mintResults = [];\n\n  transactionHashes.split(\",\").map((tx) => {\n    asyncFetch(\"https://rpc.near.org\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: \"dontcare\",\n        method: \"tx\",\n        params: [tx, context.accountId],\n      }),\n    }).then((res) => {\n      if (checkTxnMethod(res, \"open_box\")) {\n        const results = res.body.result.receipts_outcome\n          ?.map((o) => o.outcome.logs.find((l) => l.includes(\"Reward\")))\n          ?.filter((el) => el);\n        const parsedRes = results?.map((res) => res.split(\":\")[1].split(\", \"));\n\n        mintResults.push(\n          parsedRes.map((el) => [\n            el[0],\n            el[1],\n            Big(el[2]).toNumber(),\n            Big(el[3]).toNumber(),\n            tx,\n          ])[0],\n        );\n\n        setMintResults(mintResults);\n        setShowMintModal(true);\n      }\n    });\n  });\n};\nif (mintResults.length === 0) {\n  fetchMintResult();\n}\n\nfetchMyStats();\n\nconst totalReward = (index) =>\n  mintResults.map((res) => res[index]).reduce((a, b) => a + b, 0);\n\nconst shareLink = (lol, near) =>\n  `https://twitter.com/intent/tweet?text=%F0%9F%9A%80%20I've%20won%20${lol}%20$LOL%20${\n    near ? `and%20${near}%20$NEAR` : \"\"\n  }%0A%F0%9F%8E%81%20Check%20out%20https%3A//near.org/memelol.near/widget/lol.App%0A%0A%E2%86%97%EF%B8%8F%20%40LOLMemecoin%0A%40near_protocol%20%23near%20%23memecoin%20%23lolmemecoin%20%23lolresults`;\n\nreturn (\n  <>\n    {context.accountId && (\n      <>\n        {showMintModal && (\n          <Modal isOpen onClose={() => setShowMintModal(false)}>\n            <Container className=\"d-flex flex-column gap-4 justify-content-center\">\n              <div className=\"d-flex flex-column gap-3 justify-content-center\">\n                <h4>You've got:</h4>\n                <div className=\"general-stats d-flex gap-4 justify-content-center\">\n                  <Token size={40}>\n                    <h1>{format(totalReward(2), 24)}</h1>\n                  </Token>\n\n                  {totalReward(3) > 0 && (\n                    <Token near size={40}>\n                      <h1>{format(totalReward(3), 24)}</h1>\n                    </Token>\n                  )}\n                </div>\n              </div>\n              <div className=\"d-flex justify-content-center\">\n                <Button\n                  style={{ width: \"200px\", padding: \"15px 25px 15px 45px\" }}\n                >\n                  <a\n                    className=\"w-100 d-flex justify-content-between align-items-center\"\n                    href={shareLink(\n                      format(totalReward(2), 24),\n                      totalReward(3) > 0 ? format(totalReward(3), 24) : null,\n                    )}\n                  >\n                    <span>Share</span>\n                    <i className=\"bi bi-share\" />\n                  </a>\n                </Button>\n              </div>\n              <div className=\"d-flex gap-3 justify-content-between align-items-center\">\n                <div className=\"hr\" />\n                <div>Transactions</div>\n                <div className=\"hr\" />\n              </div>\n              {mintResults && (\n                <div className=\"results\">\n                  {mintResults.map((res) => (\n                    <div className=\"item d-flex gap-3 justify-content-between\">\n                      <small>Received</small>\n                      <div className=\"token\">\n                        <Token\n                          size={22}\n                          className=\"font justify-content-end d-flex gap-2 align-items-center\"\n                        >\n                          <small>{format(res[2], 24)}</small>\n                        </Token>\n                      </div>\n                      <small>and</small>\n                      <div className=\"token-near\">\n                        <Token\n                          near\n                          size={22}\n                          className=\"font justify-content-end d-flex gap-2 align-items-center\"\n                        >\n                          <small>{format(res[3], 24)}</small>\n                        </Token>\n                      </div>\n                      <div className=\"txn\">\n                        <a href={`https://nearblocks.io/txns/${res[4]}`}>\n                          <i className=\"bi bi-box-arrow-up-right\" />{\" \"}\n                          <small>View in explorer</small>\n                        </a>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </Container>\n          </Modal>\n        )}\n\n        <div className=\"mint-section my-stats\">\n          <h1 className=\"font\">My Stats</h1>\n          <div className=\"d-flex flex-column gap-2 justify-content-center\">\n            <div>\n              <small>Box Opened</small>\n              <h1 className=\"font\">{myStats.receivedBoxes}</h1>\n            </div>\n            <div>\n              <small>NEAR Received</small>\n              <h1 className=\"font\">{myStats.receivedNear}</h1>\n            </div>\n            <div>\n              <small>LOL Received</small>\n              <h1 className=\"font\">{myStats.receivedLoL}</h1>\n            </div>\n          </div>\n        </div>\n      </>\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/memelol.near/widget/lol.Components.MyStats", "fact_widget_deployments_id": "2c473ecffdb8696b59f93086c215474d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}