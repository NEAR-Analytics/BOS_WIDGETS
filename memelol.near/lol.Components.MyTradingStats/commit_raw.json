{"tx_hash": "3bXwKWYTTXVsWoRmpyQKahKRkLKKe9bE1QRz3eWX1sJE", "action_id_social": "B33p6HnqmvqGrrRrVkBKkiX5dLqWrCbJJdDCcKJ5Ljvk-0-widget", "block_id": 110486768, "block_timestamp": "2024-01-15T18:24:19.765Z", "signer_id": "memelol.near", "widget_name": "lol.Components.MyTradingStats", "source_code": "const { format, Token } = VM.require(`memelol.near/widget/lol.Utils`);\nconst { Button } = VM.require(`memelol.near/widget/lol.Components.Button`);\nconst { contractName } = props;\n\nconst Stats = styled.div`\n  background: ${(props) => props.color} !important;\n\n  .stat-block {\n    width: 400px;\n    justify-content: space-between;\n    align-items: center;\n    flex-direction: row;\n    display: flex;\n\n    @media screen and (max-width: 786px) {\n      width: 100%;\n      flex-direction: column;\n\n      h2 {\n        font-size: 2rem;\n      }\n    }\n  }\n`;\n\nconst [myStats, setMyStats] = useState({\n  buy: 0,\n  sell: 0,\n  ftBalance: 0,\n  completePuzzles: 0,\n});\n\nconst checkRefSwaps = async () => {\n  const baseUrl = `https://api.pikespeak.ai/event-historic/${context.accountId}?limit=100000&timestampStart=2024-01-08%2000%3A00%3A00&contractFilter=v2.ref-finance.near&filters=SWAP`;\n\n  asyncFetch(baseUrl, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\",\n    },\n  }).then((resp) => {\n    const filterTxn = (inContract, outContract, method) =>\n      resp.body\n        .map((swap) => {\n          const tx = swap.transaction_view;\n\n          return tx.token_in === inContract && tx.token_out === outContract\n            ? parseFloat(tx[method])\n            : 0;\n        })\n        .reduce((a, b) => a + b, 0);\n\n    const stats = myStats;\n    stats.buy = filterTxn(\"wrap.near\", \"memelol.near\", \"amount_in\").toFixed(2);\n    stats.sell = filterTxn(\"memelol.near\", \"wrap.near\", \"amount_out\").toFixed(\n      2,\n    );\n\n    setMyStats(stats);\n  });\n};\n\nconst checkFTBalance = () => {\n  const ftBalance = Near.view(contractName, \"ft_balance_of\", {\n    account_id: context.accountId,\n  });\n  const stats = myStats;\n  stats.ftBalance = Big(ftBalance).div(Big(10).pow(24)).toNumber().toFixed();\n\n  setMyStats(stats);\n};\n\ncheckRefSwaps();\ncheckFTBalance();\n\nconst PREMIUM_HOLD_AMOUNT = 50;\n\nconst StatBlock = ({ text, value, color, near, children }) => (\n  <div className=\"d-flex gap-4 flex-column\">\n    <div className=\"stat-block\">\n      <small>{text}</small>\n      {near !== undefined ? (\n        <Token near={near} size=\"30\">\n          <h2 className={`font ${color}`}>{format(parseFloat(value))}</h2>\n        </Token>\n      ) : (\n        <h2 className={`font ${color}`}>{value}</h2>\n      )}\n    </div>\n    {children}\n  </div>\n);\n\nreturn (\n  <>\n    {context.accountId && (\n      <>\n        <div className=\"mint-section my-stats\">\n          <h1 className=\"font\">My Profile</h1>\n\n          <Stats\n            className=\"mint-section\"\n            color={\n              myStats.buy - myStats.sell > PREMIUM_HOLD_AMOUNT\n                ? \"rgb(255 177 255 / 70%)\"\n                : \"#efefef\"\n            }\n          >\n            <StatBlock\n              text=\"Account Level\"\n              value={\n                myStats.buy - myStats.sell > PREMIUM_HOLD_AMOUNT\n                  ? \"Premium\"\n                  : \"Base\"\n              }\n            >\n              <div style={{ fontSize: \"14px\", textAlign: \"left\" }}>\n                <i className=\"bi bi-info-circle\" />\n                Increase your trading activity to have at least\n                <b>{PREMIUM_HOLD_AMOUNT} NEAR</b> in a diff and unlock{\" \"}\n                <b>Premium</b> features\n              </div>\n            </StatBlock>\n          </Stats>\n          <Stats className=\"mint-section\" color=\"rgb(255 242 158 / 30%)\">\n            <h2 className=\"font\">Trading Stats</h2>\n            <div className=\"d-flex gap-2 flex-column\">\n              <StatBlock\n                text=\"Bought $LOL on\"\n                value={myStats.buy}\n                color=\"text-success\"\n                near={true}\n              />\n              <StatBlock\n                text=\"Sold $LOL on\"\n                value={myStats.sell}\n                color=\"text-danger\"\n                near={true}\n              />\n              <hr />\n              <StatBlock\n                text=\"Trading Diff\"\n                value={(myStats.buy - myStats.sell).toFixed(2)}\n                color={`text-${\n                  myStats.buy - myStats.sell > 0 ? \"success\" : \"danger\"\n                }`}\n                near={true}\n              />\n            </div>\n          </Stats>\n          <Stats className=\"mint-section\" color=\"rgb(148 182 255 / 30%)\">\n            <div className=\"d-flex gap-2 flex-column\">\n              <StatBlock\n                text=\"Hodling\"\n                value={myStats.ftBalance}\n                near={false}\n              />\n            </div>\n          </Stats>\n        </div>\n      </>\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/memelol.near/widget/lol.Components.MyTradingStats", "fact_widget_deployments_id": "32b734e18e471931fac7aa7cad08532e", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}