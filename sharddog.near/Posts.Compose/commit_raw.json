{"tx_hash": "AAsGJhrNoPyqQvCLjKVmjVW34LncjLycYr3eSBmPPxAq", "action_id_social": "2Q2fLczC9BfsBqyyUXbs5exitn5XWiu67AxZ5KEHRpCn-0-widget", "block_id": 95940338, "block_timestamp": "2023-07-07T20:27:02.579Z", "signer_id": "sharddog.near", "widget_name": "Posts.Compose", "source_code": "if (!context.accountId) {\n  return <></>;\n}\n\nState.init({\n  image: {},\n  text: \"\",\n  showPreview: false,\n  isVisible: isVisible,\n});\n\nconst profile = Social.getr(`${context.accountId}/profile`);\nconst autocompleteEnabled = true;\n\nconst content = {\n  type: \"md\",\n  image: state.image.cid ? { ipfs_cid: state.image.cid } : undefined,\n  text: state.text,\n};\n\nfunction extractMentions(text) {\n  const mentionRegex =\n    /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\n  mentionRegex.lastIndex = 0;\n  const accountIds = new Set();\n  for (const match of text.matchAll(mentionRegex)) {\n    if (\n      !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n      !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length)) &&\n      match[1].length >= 2 &&\n      match[1].length <= 64\n    ) {\n      accountIds.add(match[1].toLowerCase());\n    }\n  }\n  return [...accountIds];\n}\n\nfunction extractTagNotifications(text, item) {\n  return extractMentions(text || \"\")\n    .filter((accountId) => accountId !== context.accountId)\n    .map((accountId) => ({\n      key: accountId,\n      value: {\n        type: \"mention\",\n        item,\n      },\n    }));\n}\n\nfunction composeData() {\n  const data = {\n    post: {\n      main: JSON.stringify(content),\n    },\n    index: {\n      post: JSON.stringify({\n        key: \"main\",\n        value: {\n          type: \"md\",\n        },\n      }),\n    },\n  };\n\n  const notifications = extractTagNotifications(state.text, {\n    type: \"social\",\n    path: `${context.accountId}/post/main`,\n  });\n\n  if (notifications.length) {\n    data.index.notify = JSON.stringify(\n      notifications.length > 1 ? notifications : notifications[0]\n    );\n  }\n\n  return data;\n}\n\nfunction onCommit() {\n  State.update({\n    image: {},\n    text: \"\",\n  });\n}\n\nfunction textareaInputHandler(value) {\n  const showAccountAutocomplete = /@[\\w][^\\s]*$/.test(value);\n  State.update({ text: value, showAccountAutocomplete });\n}\n\nfunction autoCompleteAccountId(id) {\n  let text = state.text.replace(/[\\s]{0,1}@[^\\s]*$/, \"\");\n  text = `${text} @${id}`.trim() + \" \";\n  State.update({ text, showAccountAutocomplete: false });\n}\n\nconst Modal = styled.div`\n  position:fixed;\n  top:0;\n  left:0;\n  z-index: 102;\n  width: 100%;\n  height: 80vh;\n   background: #fff;\n`;\n\nconst Wrapper = styled.div`\n  --padding: 24px;\n  position:fixed;\n  top:0;\nwidth: 100%;\n  height: 100%;\n  @media (max-width: 1200px) {\n    --padding: 12px;\n  }\n  background: #fff;\n`;\n\nconst FloatingButton = styled.button`\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  background-color: #64a19d;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #fff;\n  font-size: 24px;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n  z-index:100;\n`;\n\nconst PlusIcon = styled.span`\n  position: relative;\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    width: 26px;\n    height: 4px;\n    background-color: #fff;\n    top: calc(50% - 2px);\n    left: calc(50% - 13px);\n  }\n  &::before {\n    transform: rotate(0deg);\n  }\n  &::after {\n    transform: rotate(90deg);\n  }\n`;\n\nconst Avatar = styled.div`\n  width: 40px;\n  height: 40px;\n  pointer-events: none;\n  position: absolute;\n  top: var(--padding);\n  left: var(--padding);\n\n  img {\n    object-fit: cover;\n    border-radius: 40px;\n    width: 100%;\n    height: 100%;\n  }\n\n  @media (max-width: 992px) {\n    display: none;\n  }\n`;\n\nconst Textarea = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  top:0;\n  align-items: stretch;\n  height:100%; \n  background: white;\n\n  &::after,\n  textarea {\n    width: 100%;\n    min-width: 1em;\n    height: 100%; \n    font: inherit;\n    padding: var(--padding) var(--padding) calc(40px + (var(--padding) * 2))\n      calc(40px + (var(--padding) * 2));\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: none;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n\n    @media (max-width: 1200px) {\n      min-height: 124px;\n    }\n\n    @media (max-width: 992px) {\n      padding-left: var(--padding);\n    }\n  }\n\n  &::after {\n    content: attr(data-value) \" \";\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n\n  textarea {\n    transition: all 200ms;\n\n    &::placeholder {\n      opacity: 1;\n      color: #687076;\n    }\n\n    &:empty + p {\n      display: block;\n    }\n\n    &:focus {\n      box-shadow: inset 0 0 30px rgba(0, 0, 0, 0.05);\n    }\n  }\n`;\n\nconst TextareaDescription = styled.p`\n  position: absolute;\n  top: calc(var(--padding) + 24px);\n  left: calc(42px + (var(--padding) * 2));\n  right: var(--padding);\n  font-size: 10px;\n  line-height: 18px;\n  font-weight: 400;\n  color: #687076;\n \n  display: none;\n\n  a {\n    color: #000;\n    outline: none;\n    font-weight: 600;\n    pointer-events: auto;\n\n    &:hover,\n    &:focus {\n      color: #000;\n      text-decoration: underline;\n    }\n  }\n\n  @media (max-width: 992px) {\n    left: var(--padding);\n  }\n`;\n\nconst Actions = styled.div`\n  display: inline-flex;\n  gap: 12px;\n  position: absolute;\n  bottom: var(--padding);\n  right: var(--padding);\n\n  .commit-post-button,\n  .preview-post-button {\n    background: #59e692;\n    color: #09342e;\n    border-radius: 40px;\n    height: 40px;\n    padding: 0 35px;\n    font-weight: 600;\n    font-size: 14px;\n    border: none;\n    cursor: pointer;\n    transition: background 200ms, opacity 200ms;\n\n    &:hover,\n    &:focus {\n      background: rgb(112 242 164);\n      outline: none;\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n  }\n\n  .preview-post-button {\n    color: #11181c;\n    background: #f1f3f5;\n    padding: 0;\n    width: 40px;\n\n    &:hover,\n    &:focus {\n      background: #d7dbde;\n      outline: none;\n    }\n  }\n\n  .upload-image-button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: #f1f3f5;\n    color: #11181c;\n    border-radius: 40px;\n    height: 40px;\n    min-width: 40px;\n    font-size: 0;\n    border: none;\n    cursor: pointer;\n    transition: background 200ms, opacity 200ms;\n\n    &::before {\n      font-size: 16px;\n    }\n\n    &:hover,\n    &:focus {\n      background: #d7dbde;\n      outline: none;\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n\n    span {\n      margin-left: 12px;\n    }\n  }\n\n  .d-inline-block {\n    display: flex !important;\n    gap: 12px;\n    margin: 0 !important;\n\n    .overflow-hidden {\n      width: 40px !important;\n      height: 40px !important;\n    }\n  }\n`;\n\nconst PreviewWrapper = styled.div`\n  position: relative;\n  padding: var(--padding);\n  padding-bottom: calc(40px + (var(--padding) * 2));\n`;\n\nconst AutoComplete = styled.div`\n  position: absolute;\n  z-index: 5;\n  bottom: 0;\n  left: 0;\n  right: 0;\n\n  > div > div {\n    padding: calc(var(--padding) / 2);\n  }\n`;\n\nfunction toggleModal() {\n  State.update({ isVisible: !state.isVisible });\n}\n\n// Initialize the state\nState.init({\n  searchTerm: \"\",\n  gifs: [],\n  showGifs: false,\n});\n\nconst fetchGiphyData = (queryURI) => {\n  return asyncFetch(\n    `https://api.giphy.com/v1/gifs/search?q=${queryURI}&api_key=Wjhf2pRJKiqRzIPvYiyEMhFovaDeyt3v&limit=20`,\n    {\n      method: \"GET\",\n    }\n  );\n};\n\n// Handle change\nconst handleChange = (event) => {\n  const searchTerm = event.target.value;\n  State.update({ searchTerm: searchTerm });\n\n  fetchGiphyData(searchTerm).then((res) => {\n    const data = res.body.data;\n    const gifs = data.map((gif) => ({\n      imageUrl: gif.images.fixed_height_small.url,\n      value: `https://media.giphy.com/media/${gif.id}/giphy.gif`,\n    }));\n    console.log(gifs);\n    State.update({ gifs: gifs, showGifs: true });\n  });\n};\n\nconst copyToClipboard = (url) => {\n  console.log(\"Copying to clipboard:\", url);\n  navigator.clipboard\n    .writeText(url)\n    .then(() => {\n      alert(\"Gif URL copied to clipboard!\");\n    })\n    .catch((err) => {\n      // handle error if any\n      console.error(\"Error copying to clipboard\", err);\n    });\n};\n\nreturn (\n  <div>\n    <FloatingButton className=\"floating-button\" onClick={toggleModal}>\n      <PlusIcon />\n    </FloatingButton>\n    {state.isVisible && (\n      <Modal>\n        <Wrapper>\n          <button\n            style={{\n              position: \"absolute\",\n              left: \"2%\",\n              bottom: \"2%\",\n              zIndex: 102,\n              backgroundColor: \"#64a19d\",\n              width: \"12\",\n              height: \"12\",\n            }}\n            onClick={toggleModal}\n            focusable=\"false\"\n          >\n            X\n          </button>\n          <>\n            <Avatar>\n              <Widget\n                src=\"mob.near/widget/Image\"\n                props={{\n                  image: profile.image,\n                  alt: profile.name,\n                  fallbackUrl:\n                    \"https://ipfs.near.social/ipfs/bafkreibiyqabm3kl24gcb2oegb7pmwdi6wwrpui62iwb44l7uomnn3lhbi\",\n                }}\n              />\n            </Avatar>\n            <Textarea data-value={state.text}>\n              <div>\n                <div>\n                  <div>\n                    Search & Post Gifs\n                    <small>\n                      <i>(experimental)</i>\n                    </small>\n                    <br />\n                    <small>\n                      <i>\n                        Click on the image and it will copy a link to it, paste\n                        that within your post\n                      </i>\n                    </small>\n                    <input\n                      type=\"text\"\n                      placeholder=\"Find That Gif!\"\n                      value={state.searchTerm}\n                      onChange={handleChange}\n                    />\n                    {state.showGifs && (\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"row\",\n                          flexWrap: \"wrap\",\n                          justifyContent: \"space-around\",\n                        }}\n                      >\n                        {state.gifs.map((gif, index) => (\n                          <div\n                            key={index}\n                            onClick={(event) => copyToClipboard(gif.imageUrl)}\n                          >\n                            <img src={gif.imageUrl} alt=\"Gif\" />\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <textarea\n                placeholder=\"What the dog doin'?\"\n                onInput={(event) => textareaInputHandler(event.target.value)}\n                onKeyUp={(event) => {\n                  if (event.key === \"Escape\") {\n                    State.update({ showAccountAutocomplete: false });\n                  }\n                }}\n                value={state.text}\n              />\n              <TextareaDescription>\n                <br />\n                <a\n                  href=\"https://www.markdownguide.org/basic-syntax/\"\n                  target=\"_blank\"\n                >\n                  Markdown\n                </a>\n                is supported\n                <br />\n                Examples: **bold text** *emphasis* `code`\n                <br />\n                Lists can be with numbers 1. or *\n                <br />\n                You can paste links here directly and some will auto-expand\n                and/or hyperlink\n                <br />\n                Youtube and Spotify links will auto-embed\n              </TextareaDescription>\n              <PreviewWrapper>\n                <Widget\n                  src=\"near/widget/Posts.Post\"\n                  props={{\n                    accountId: context.accountId,\n                    blockHeight: \"now\",\n                    content,\n                  }}\n                />\n              </PreviewWrapper>\n            </Textarea>\n          </>\n          {autocompleteEnabled && state.showAccountAutocomplete && (\n            <AutoComplete>\n              <Widget\n                src=\"near/widget/AccountAutocomplete\"\n                props={{\n                  term: state.text.split(\"@\").pop(),\n                  onSelect: autoCompleteAccountId,\n                  onClose: () =>\n                    State.update({ showAccountAutocomplete: false }),\n                }}\n              />\n            </AutoComplete>\n          )}\n\n          <Actions>\n            {!state.showPreview && (\n              <IpfsImageUpload\n                image={state.image}\n                className=\"upload-image-button bi bi-image\"\n              />\n            )}\n\n            <CommitButton\n              disabled={!state.text}\n              force\n              data={composeData}\n              onCommit={onCommit}\n              className=\"commit-post-button\"\n            >\n              Post\n            </CommitButton>\n          </Actions>\n        </Wrapper>\n      </Modal>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sharddog.near/widget/Posts.Compose", "fact_widget_deployments_id": "9927ea7e91425825df1ae29e2cfb5070", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 23}