{"tx_hash": "6yrkzcqsNp64zhupmjxZQ7JPWpnaA2LFD28diZdTvG58", "action_id_social": "Dp6uHch8GhNzXzwX3X3bm6VR4hcGobgtTwT1RasziFJK-0-widget", "block_id": 98797249, "block_timestamp": "2023-08-14T16:42:50.814Z", "signer_id": "sharddog.near", "widget_name": "UserRep", "source_code": "State.init({\n  wallet: \"\",\n  data: null,\n  loading: false,\n});\n\nconst getBackgroundColor = (value, goodCondition, warningCondition) => {\n  if (goodCondition(value)) return \"lightgreen\";\n  if (warningCondition(value)) return \"yellow\";\n  return \"pink\";\n};\n\nconst widgets = {\n  filter: \"sharddog.near/widget/UserRep.Filter\",\n};\n\nconst {\n  creationTimestamp,\n  last30,\n  stakeDeposit,\n  functionCall,\n  sbt,\n  nftTokens,\n  historicCount,\n  nominationInteractions,\n  og,\n  currentBalance,\n  storageUsed,\n} = state.data || {};\n\nconst tableStyle = {\n  borderCollapse: \"collapse\",\n  boxShadow: \"0px 0px 10px 2px rgba(0,0,0,0.1)\",\n  width: \"100%\",\n  textAlign: \"left\",\n};\n\nconst cellStyle = {\n  border: \"1px solid black\",\n  padding: \"10px\",\n};\n\nconst cardStyle = {\n  padding: \"10px\",\n  width: \"680px\",\n  maxWidth: \"100%\",\n  background: \"rgba(251, 249, 245, 0.85)\",\n  filter: \"drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.15))\",\n  borderRadius: \"12px\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  marginTop: \"20px\",\n  margin: \"20px Auto\",\n};\n\nconst centered = {\n  position: \"absolute\",\n  top: \"5%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  zIndex: \"1000\",\n  fontWeight: \"900\",\n  fontSize: \"1.2rem\",\n  color: \"#f0f0f0\",\n  textShadow: \"1px 4px 4px #555\",\n};\n\nconst bottomLeft = {\n  position: \"absolute\",\n  bottom: \"8px\",\n  left: \"16px\",\n  zIndex: \"1000\",\n  fontWeight: \"900\",\n  fontSize: \"50px\",\n  backgroundColor: \"#ffffff\",\n  backgroundClip: \"text\",\n  color: \"transparent\",\n  textShadow: \"rgba(245,245,245,0.5) 1px 2px 1px\",\n};\nconst bottomRightTop = {\n  position: \"absolute\",\n  bottom: \"50px\",\n  right: \"16px\",\n  zIndex: \"1000\",\n  fontWeight: \"500\",\n  fontSize: \"14px\",\n  backgroundColor: \"#ffffff\",\n  backgroundClip: \"text\",\n  color: \"white\",\n};\n\nconst bottomRight = {\n  position: \"absolute\",\n  bottom: \"8px\",\n  right: \"16px\",\n  zIndex: \"1000\",\n  fontWeight: \"900\",\n  fontSize: \"30px\",\n  backgroundColor: \"#ffffff\",\n  backgroundClip: \"text\",\n  color: \"transparent\",\n  textShadow: \"rgba(245,245,245,0.5) 1px 2px 1px\",\n};\n\nconst container = {\n  position: \"relative\",\n};\n\nconst animateCharacter = {\n  textTransform: \"uppercase\",\n  backgroundImage:\n    \"linear-gradient(-225deg, #231557 0%, #44107a 29%, #ff1361 67%, #fff800 100%)\",\n  backgroundSize: \"200% auto\",\n  backgroundClip: \"text\",\n  color: \"#fff\",\n  textFillColor: \"transparent\",\n  WebkitBackgroundClip: \"text\",\n  WebkitTextFillColor: \"transparent\",\n  animation: \"textclip 2s linear infinite\",\n  display: \"inline-block\",\n  fontSize: \"30px\",\n};\n\nconst handleWalletChange = (event) => {\n  if (event.target.value.trim() === \"\") {\n    // Input is empty, handle this case as needed\n    // You might want to reset the state, for example\n    State.update({ wallet: \"\", data: null });\n  } else {\n    // Input is not empty, continue with normal handling\n    State.update({ wallet: event.target.value });\n    //fetchData();\n  }\n};\n\nfunction fetchData() {\n  State.update({ loading: true });\n  asyncFetch(\"https://auth.shard.dog/wallet/\" + state.wallet, {\n    method: \"GET\",\n  }).then((res) => {\n    if (res.ok) {\n      State.update({ loading: false });\n      State.update({ data: res.body });\n    } else {\n      // console.log(res);\n    }\n  });\n}\n\nfunction clearData() {\n  State.update({ wallet: \"\", data: null });\n}\n\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n\nif (state.loading) {\n  return <h2 style={animateCharacter}>Loading...</h2>;\n}\n\nif ((!state.data && state.wallet.trim() === \"\") || state.data === null) {\n  return (\n    <div>\n      <h3>NEAR \"Just to get a rep\"</h3>\n      <small>\n        <i>\n          This is a beta of how you could look at scoring users rep based on\n          activity\n        </i>\n      </small>\n      <Widget\n        src={widgets.filter}\n        props={{\n          handleWalletChange,\n          wallet: state.wallet,\n          placeholder: \"Search by wallet\",\n        }}\n      />\n      <button onClick={fetchData}>Get Rep</button>{\" \"}\n      <button onClick={clearData}>Clear</button>\n    </div>\n  );\n}\n\nfunction getCreateDate(creationTimestamp) {\n  console.log(creationTimestamp);\n  let created = creationTimestamp / 1000000;\n  console.log(created);\n  let date = new Date(created);\n\n  return date.toString(\"MMM dd yy\");\n}\n\nfunction parsedBalance(currentBalance) {\n  let walletBalance = 0;\n  if (currentBalance > 0) {\n    walletBalance = Big(currentBalance).div(Big(10).pow(24)).toFixed(5);\n    return walletBalance;\n  } else {\n    return walletBalance;\n  }\n}\n\nconst profile = props.profile ?? Social.getr(`${state.wallet}/profile`);\nconst image = profile.image;\n\nconst following = Social.keys(`${state.wallet}/graph/follow/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\n\nconst followers = Social.keys(`*/graph/follow/${state.wallet}`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\n\nconst numFollowing = following\n  ? Object.keys(following[state.wallet].graph.follow || {}).length\n  : 0;\nconst numFollowers = followers ? Object.keys(followers || {}).length : 0;\n\nfunction getKudos(wallet) {\n  let data = Social.getr(\"kudos.ndctools.near/kudos/\" + wallet);\n  //console.log(data);\n  let countK = 0;\n  let countD = 0;\n  if (data != undefined) {\n    Object.values(data).forEach((item) => {\n      if (item.kind === \"k\") {\n        countK++;\n      } else if (item.kind === \"d\") {\n        countD++;\n      }\n    });\n  }\n  //console.log(countK);\n  return { countK, countD };\n}\n\nfunction getSBT(wallet) {\n  const getFirstSBTToken = () => {\n    const view = Near.view(\"registry.i-am-human.near\", \"sbt_tokens_by_owner\", {\n      account: wallet,\n      issuer: \"fractal.i-am-human.near\",\n    });\n    return view?.[0]?.[1]?.[0];\n  };\n\n  if (getFirstSBTToken(state.wallet) !== undefined) {\n    return \"Yes\";\n  }\n  return \"No\";\n}\n\nreturn (\n  <div\n    style={{\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    }}\n  >\n    <h3>NEAR \"Just to get a rep\"</h3>\n    <small>\n      <i>\n        This is a beta of how you could look at scoring users rep based on\n        activity\n      </i>\n    </small>\n    <Widget\n      src={widgets.filter}\n      props={{\n        handleWalletChange,\n        wallet: state.wallet,\n        placeholder: \"Search by wallet\",\n      }}\n    />\n    <button onClick={fetchData}>Get Rep</button>{\" \"}\n    <button onClick={clearData}>Clear</button>\n    <br />\n    <div style={cardStyle}>\n      <div className=\"center-box\">\n        <div style={container}>\n          <div style={centered}>{state.wallet}</div>\n          <Widget\n            src=\"mob.near/widget/Image\"\n            props={{\n              image,\n              alt: title,\n              className: \"img-fluid rounded-3\",\n              style: { maxWidth: \"680px\" },\n              thumbnail,\n              fallbackUrl:\n                \"https://ipfs.near.social/ipfs/bafkreigx4syocpq3spthgozerqnqjf4k7ri5jrsslgali7tslvfmjrefte\",\n            }}\n          />\n          {og == true && <div style={bottomLeft}>OG</div>}\n          <div style={bottomRightTop}>following/followers</div>\n          <div style={bottomRight}>\n            {numFollowing}/{numFollowers}\n          </div>\n        </div>\n        <p style={{ justifyContent: \"center\", alignItems: \"center\" }}>\n          Account Created: {getCreateDate(creationTimestamp)} <br />\n          Current Balance: {parsedBalance(currentBalance)}N<br />\n          Fractal Verified: {getSBT(state.wallet)}\n        </p>\n        <table style={tableStyle}>\n          <thead>\n            <tr style={cellStyle}>\n              <th>Criteria</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr\n              style={{\n                backgroundColor:\n                  last30 === historicCount ||\n                  Math.abs(last30 - historicCount) <= 10\n                    ? \"yellow\"\n                    : \"white\",\n              }}\n            >\n              <td>Tx - Last 30 days vs Historic</td>\n              <td>\n                {last30} vs {historicCount}\n              </td>\n            </tr>\n            <tr\n              style={{\n                backgroundColor: getBackgroundColor(\n                  sbt,\n                  (v) => v > 0,\n                  (v) => v === 0\n                ),\n              }}\n            >\n              <td>SBT</td>\n              <td>{sbt}</td>\n            </tr>\n            <tr\n              style={{\n                backgroundColor: getBackgroundColor(\n                  nftTokens,\n                  (v) => v > 5,\n                  (v) => v >= 1 && v <= 4\n                ),\n              }}\n            >\n              <td>NFT Tokens (max 100)</td>\n              <td>{nftTokens}</td>\n            </tr>\n            <tr\n              style={{\n                backgroundColor: getBackgroundColor(\n                  stakeDeposit,\n                  (v) => v > 1,\n                  (v) => v === 1\n                ),\n              }}\n            >\n              <td>Stake Actions (max 50)</td>\n              <td>{stakeDeposit}</td>\n            </tr>\n            <tr\n              style={{\n                backgroundColor: getBackgroundColor(\n                  functionCall,\n                  (v) => v > 20,\n                  (v) => v >= 6 && v <= 20\n                ),\n              }}\n            >\n              <td>Contract Interactions (max 50)</td>\n              <td>{functionCall}</td>\n            </tr>\n            <tr\n              style={{\n                backgroundColor: getBackgroundColor(\n                  nominationInteractions,\n                  (v) => v > 20,\n                  (v) => v >= 3 && v <= 20\n                ),\n              }}\n            >\n              <td>Nomination Interactions (max 50)</td>\n              <td>{nominationInteractions}</td>\n            </tr>\n            <tr\n              style={{\n                backgroundColor: getBackgroundColor(\n                  storageUsed,\n                  (v) => v > 20000,\n                  (v) => v >= 5000 && v <= 20000\n                ),\n              }}\n            >\n              <td>Storage Used (Onchain)</td>\n              <td>{storageUsed} Bytes</td>\n            </tr>\n            <tr>\n              <td>Kudos/Dings</td>\n              <td>\n                {getKudos(state.wallet).countK}/{getKudos(state.wallet).countD}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <p>\n          <small>\n            <i>Data may take a few seconds to fully populate</i>\n          </small>\n        </p>\n      </div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sharddog.near/widget/UserRep", "fact_widget_deployments_id": "3086a3abea7b66a2d2cfd1ef84311852", "inserted_timestamp": "2023-08-14T17:47:29.187Z", "modified_timestamp": "2023-08-14T17:47:29.187Z", "__row_index": 7}