{"tx_hash": "7c6PomGJKcvaCHZnUarQ8VmJFReYQq1e35yDRmr9Fd5F", "action_id_social": "71wEnR4o5NaLZaonVAaxFNauXaxGoZjJdhAUHbEMr6RA-0-widget", "block_id": 103137864, "block_timestamp": "2023-10-11T15:55:32.770Z", "signer_id": "sayalot.near", "widget_name": "SayALot.lib.upVotes", "source_code": "const { isTest, stateUpdate, libCalls } = props;\r\n\r\nconst prodAction = \"sayALotUpVote-v0.0.2\";\r\nconst testAction = `test_${prodAction}`;\r\nconst action = isTest ? testAction : prodAction;\r\n\r\n// const authorForWidget =\r\n//   \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\r\nconst authorForWidget = \"sayalot.near\";\r\n// const authorForWidget = \"kenrou-it.near\";\r\nconst libSrcArray = [`${authorForWidget}/widget/SayALot.lib.SBT`];\r\n\r\nState.init({ libCalls: [] });\r\n\r\nfunction libStateUpdate(obj) {\r\n  State.update(obj);\r\n}\r\n\r\nfunction setAreValidUsers(accountIds, sbtsNames) {\r\n  const newLibCalls = [...state.libCalls];\r\n  accountIds.forEach((accountId) => {\r\n    const isCallPushed =\r\n      newLibCalls.find((libCall) => {\r\n        return (\r\n          libCall.functionName === \"isValidUser\" &&\r\n          libCall.props.accountId === accountId\r\n        );\r\n      }) !== undefined;\r\n    const isCallReturned = state[`isValidUser-${accountId}`] !== undefined;\r\n\r\n    if (isCallPushed || isCallReturned) {\r\n      return;\r\n    }\r\n\r\n    newLibCalls.push({\r\n      functionName: \"isValidUser\",\r\n      key: `isValidUser-${accountId}`,\r\n      props: {\r\n        accountId,\r\n        sbtsNames,\r\n      },\r\n    });\r\n  });\r\n  State.update({ libCalls: newLibCalls });\r\n}\r\n\r\nfunction callLibs(srcArray, stateUpdate, libCalls) {\r\n  return (\r\n    <>\r\n      {srcArray.map((src) => {\r\n        return (\r\n          <Widget\r\n            src={src}\r\n            props={{\r\n              isTest,\r\n              stateUpdate,\r\n              libCalls,\r\n            }}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction canUserUpVote(props) {\r\n  const { env, accountId, sbtsNames } = props;\r\n\r\n  setAreValidUsers([accountId], sbtsNames);\r\n\r\n  const result = state[`isValidUser-${accountId}`];\r\n\r\n  resultLibCalls = resultLibCalls.filter((call) => {\r\n    const discardCondition =\r\n      call.functionName === \"canUserUpVote\" && result !== undefined;\r\n    return !discardCondition;\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n// ========= GET UPVOTES STATISTICS =========\r\nfunction countUpVotes(arrayLastInteractionForEachUser) {\r\n  let upVotes =\r\n    arrayLastInteractionForEachUser &&\r\n    arrayLastInteractionForEachUser.filter(\r\n      (interaction) => !interaction.value.deleteReaction\r\n    );\r\n  return upVotes.length;\r\n}\r\n\r\nfunction getUpVotes(props) {\r\n  const { id, articleSbts } = props;\r\n  // const { id, createdInteraction } = props;\r\n  const allVotes = Social.index(action, id, {\r\n    order: \"desc\",\r\n    subscribe: true,\r\n  });\r\n\r\n  let validUpVotes = allVotes;\r\n\r\n  if (articleSbts.length > 0) {\r\n    const validUpVotesAuthors = validUpVotes.map((upVote) => {\r\n      return upVote.accountId;\r\n    });\r\n\r\n    setAreValidUsers(validUpVotesAuthors, articleSbts);\r\n\r\n    const validAuthors = validUpVotesAuthors.filter((author) => {\r\n      return state[`isValidUser-${author}`] === true;\r\n    });\r\n\r\n    resultLibCalls = resultLibCalls.filter((call) => {\r\n      const discardCondition =\r\n        call.functionName === \"getUpVotes\" &&\r\n        state[`isValidUser-${call.props.accountId}`] !== undefined;\r\n      return !discardCondition;\r\n    });\r\n\r\n    validUpVotes = validUpVotesAuthors.filter((author) => {\r\n      return validAuthors.includes(author.accountId);\r\n    });\r\n  }\r\n\r\n  // const uniqueAccounts = [];\r\n  let upVotes =\r\n    validUpVotes &&\r\n    validUpVotes\r\n      .filter((obj) => {\r\n        const userLatestInteraction = validUpVotes.find(\r\n          (vote) => vote.accountId === obj.accountId\r\n        );\r\n        return JSON.stringify(userLatestInteraction) === JSON.stringify(obj);\r\n        // if (!uniqueAccounts.includes(obj.accountId)) {\r\n        //   // uniqueAccounts.push(obj.accountId);\r\n        //   return true;\r\n        // }\r\n        // return false;\r\n      })\r\n      .filter((vote) => !vote.value.isDelete);\r\n\r\n  return upVotes ?? [];\r\n\r\n  // const userInteraction =\r\n  //   upVotes &&\r\n  //   upVotes.find((obj) => {\r\n  //     return obj.accountId === context.accountId;\r\n  //   });\r\n\r\n  // if (userInteraction && createdInteraction) {\r\n  //   const newArrayOfLastInteractions = upVotes\r\n  //     .filter((obj) => {\r\n  //       return obj.accountId !== context.accountId;\r\n  //     })\r\n  //     .push({\r\n  //       accountId: context.accountId,\r\n  //       value: {\r\n  //         type: \"md\",\r\n  //         deleteReaction: createdInteraction.value.deleteReaction,\r\n  //       },\r\n  //     });\r\n\r\n  //   upVotes = newArrayOfLastInteractions;\r\n  // }\r\n\r\n  // return {\r\n  //   reactionsStatistics: countUpVotes(upVotes),\r\n  //   userInteraction,\r\n  // };\r\n}\r\n\r\nfunction addVote(props) {\r\n  const { id } = props;\r\n  saveUpVote(id);\r\n\r\n  resultLibCalls = resultLibCalls.filter((call) => {\r\n    return call.functionName !== \"addVote\";\r\n  });\r\n\r\n  return upVote;\r\n}\r\n\r\nfunction deleteVote(props) {\r\n  const { id, upVoteId } = props;\r\n\r\n  saveDeleteVote(id, upVoteId);\r\n\r\n  resultLibCalls = resultLibCalls.filter((call) => {\r\n    return call.functionName !== \"deleteVote\";\r\n  });\r\n}\r\n\r\nfunction saveDeleteVote(id, upVoteId) {\r\n  const newData = composeDeleteUpVoteData(id, upVoteId);\r\n\r\n  Social.set(newData, {\r\n    force: true,\r\n  });\r\n}\r\n\r\nfunction composeDeleteUpVoteData(id, upVoteId) {\r\n  const data = {\r\n    index: {\r\n      [action]: JSON.stringify({\r\n        key: id,\r\n        value: {\r\n          isDelete: true,\r\n          upVoteId,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n\r\n  return data;\r\n}\r\n\r\nfunction composeUpVoteData(id) {\r\n  const data = {\r\n    index: {\r\n      [action]: JSON.stringify({\r\n        key: id,\r\n        value: {\r\n          upVoteId: `uv-${context.accountId}-${Date.now()}`,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n\r\n  return data;\r\n}\r\n\r\nfunction saveUpVote(id) {\r\n  const newData = composeUpVoteData(id);\r\n\r\n  Social.set(newData, {\r\n    force: true,\r\n  });\r\n}\r\n\r\nfunction libCall(call) {\r\n  if (call.functionName === \"getUpVotes\") {\r\n    return getUpVotes(call.props);\r\n  } else if (call.functionName === \"addVote\") {\r\n    return addVote(call.props);\r\n  } else if (call.functionName === \"deleteVote\") {\r\n    return deleteVote(call.props);\r\n  } else if (call.functionName === \"canUserUpVote\") {\r\n    return canUserUpVote(call.props);\r\n  }\r\n}\r\n\r\nlet resultLibCalls = [];\r\nif (libCalls && libCalls.length > 0) {\r\n  // console.log(\r\n  //   \"Calling functions\",\r\n  //   libCalls.map((lc) => lc.functionName)\r\n  // );\r\n  const updateObj = {};\r\n  resultLibCalls = [...libCalls];\r\n  libCalls.forEach((call) => {\r\n    updateObj[call.key] = libCall(call);\r\n  });\r\n\r\n  updateObj.libCalls = resultLibCalls;\r\n  stateUpdate(updateObj);\r\n}\r\n\r\nreturn <></>;\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sayalot.near/widget/SayALot.lib.upVotes", "fact_widget_deployments_id": "8baa69aa88c9e9fff3b933bcc0a2cbaa", "inserted_timestamp": "2023-10-11T17:45:24.696Z", "modified_timestamp": "2023-10-11T17:45:24.696Z", "__row_index": 31}