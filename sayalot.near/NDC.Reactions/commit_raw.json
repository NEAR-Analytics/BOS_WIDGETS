{"tx_hash": "FGD99cMxf7HbFdDqwtLvKVAFgymiEQ1ctGC9MZqDRt1Q", "action_id_social": "8cm5CFDngZbAv5rfNzoitRKUUiNsoMRcTwwnSmCYYCSa-0-widget", "block_id": 98979559, "block_timestamp": "2023-08-17T01:52:13.794Z", "signer_id": "sayalot.near", "widget_name": "NDC.Reactions", "source_code": "const { isTest, authorForWidget, elementReactedId } = props;\n// Don't forget to put space between emoji and text -> \"\u2764\ufe0f Positive\"\nconst initialEmoji = \"\ud83e\udd0d Like\";\n// It is important that 'Heart' Positive emoji is first\nconst emojiArray = [\n  \"\u2764\ufe0f Positive\",\n  \"\ud83d\ude4f Thank you\",\n  \"\ud83d\udcaf Definitely\",\n  \"\ud83d\udc40 Thinking\",\n  \"\ud83d\udd25 Awesome\",\n  \"\ud83d\udc4d Like\",\n  \"\ud83d\ude4c Celebrate\",\n  \"\ud83d\udc4f Applause\",\n  \"\u26a1 Lightning\",\n  \"\u22c8 Bowtie\",\n];\n\nconst accountThatIsLoggedIn = context.accountId;\n\nconst libSrcArray = [`${authorForWidget}/widget/SayALot.lib.emojis`];\n\nfunction callLibs(srcArray, stateUpdate, libCalls) {\n  return (\n    <>\n      {srcArray.map((src) => {\n        return (\n          <Widget\n            src={src}\n            props={{\n              isTest,\n              stateUpdate,\n              libCalls,\n            }}\n          />\n        );\n      })}\n    </>\n  );\n}\n\nconst prodAction = \"sayALotArticle\";\nconst testAction = `test_${prodAction}`;\nconst action = isTest ? testAction : prodAction;\n\nconst libCalls = [\n  {\n    functionName: \"getReactionsData\",\n    key: \"reactionsData\",\n    props: {\n      elementReactedId,\n      createdReaction: state.createReaction,\n    },\n  },\n];\n\nState.init({\n  emoji: undefined,\n  reactionsData: { reactionsStatistics: [], userReaction: undefined },\n  show: false,\n  loading: false,\n  libCalls,\n});\n\n// ========= UNFILTERED REACTIONS and SOCIAL.INDEX =========\n// const path = isTest ? \"test_reaction\" : \"reaction\";\n// const unfilteredReactions = Social.index(path, item, {\n//   order: \"desc\",\n// });\n\n// if (!unfilteredReactions) {\n//   return \"Loading...\";\n// }\n\n// ========= ARRAY LAST REACTION FOR EACH USER =========\n// arrayLastReactionForEachUser - array of objects {accountId, blockHeight, value: {type: \"\ud83d\ude01 LOL\"}}\n// const uniqueAccounts = [];\n// const arrayLastReactionForEachUser =\n//   unfilteredReactions &&\n//   unfilteredReactions.filter((obj) => {\n//     if (!uniqueAccounts.includes(obj.accountId)) {\n//       uniqueAccounts.push(obj.accountId);\n//       return true;\n//     }\n//     return false;\n//   });\n\n// ========= GET USER EMOJI =========\n// const userReaction = arrayLastReactionForEachUser.find((obj) => {\n//   return obj.accountId === accountThatIsLoggedIn;\n// });\n\n// // ========= GET REACTIONS STATISTICS =========\n// const getReactionStats = (acc, reactionObj) => {\n//   if (reactionObj.value.type === initialEmoji) {\n//     return acc;\n//   }\n//   if (!acc.hasOwnProperty(reactionObj.value.type)) {\n//     acc[reactionObj.value.type] = {\n//       quantity: 0,\n//       emoji: reactionObj.value.type.slice(0, 2),\n//       text: reactionObj.value.type.slice(2),\n//       accounts: [],\n//     };\n//     // acc[reactionObj.value.type].quantity = 0;\n//     // acc[reactionObj.value.type].emoji = reactionObj.value.type.slice(0, 2);\n//     // acc[reactionObj.value.type].accounts = [];\n//   }\n//   acc[reactionObj.value.type].quantity += 1;\n//   acc[reactionObj.value.type].accounts = [\n//     reactionObj.accountId,\n//     ...acc[reactionObj.value.type].accounts,\n//   ];\n\n//   return acc;\n// };\n// const countReactionsStats = (arr) =>\n//   Object.values(arr.reduce(getReactionStats, {}));\n// let reactionsStatistics =\n//   arrayLastReactionForEachUser &&\n//   countReactionsStats(arrayLastReactionForEachUser);\n// if (\n//   state.reactionsStatistics.length === 0 ||\n//   state.reactionsStatistics === null\n// ) {\n//   State.update({\n//     reactionsStatistics,\n//   });\n// }\n// //reactionsStatistics - array of objects {emoji: '\ud83d\ude01', quantity: 2, accounts: []}\n\n// // ========= CHECK DOES USER VOTED =========\n// const doesUserVoted = () => {\n//   const resObject = arrayLastReactionForEachUser.find(\n//     (item) => item.accountId === accountThatIsLoggedIn\n//   );\n//   return resObject;\n// };\n\n// ========= UPDATE EMOJI STATE IF USER VOTED SOMETIME BEFORE =========\n// function updateEmojiIfUserVoted() {\n//   const resObject = arrayLastReactionForEachUser.find(\n//     (item) => item.accountId === accountThatIsLoggedIn\n//   );\n//   if (resObject) {\n//     State.update({ emoji: resObject.value.type });\n//   }\n// }\n// state.emoji === undefined &&\n//   arrayLastReactionForEachUser &&\n//   updateEmojiIfUserVoted();\n\n// ========= UPDATE REACTION STATISTICS IF USER VOTED RIGHT NOW=========\nfunction updateReactionsStatisticsIfUserVoted(newEmoji) {\n  const resObject = arrayLastReactionForEachUser.find(\n    (item) => item.accountId === accountThatIsLoggedIn\n  );\n  if (!resObject) {\n    arrayLastReactionForEachUser = [\n      ...arrayLastReactionForEachUser,\n      {\n        accountId: accountThatIsLoggedIn,\n        blockHeight: item.blockHeight,\n        value: { type: newEmoji },\n      },\n    ];\n  } else {\n    arrayLastReactionForEachUser =\n      arrayLastReactionForEachUser &&\n      arrayLastReactionForEachUser.map((item) => {\n        if (item.accountId === accountThatIsLoggedIn) {\n          return { ...item, value: { type: newEmoji } };\n        }\n        return item;\n      });\n  }\n  reactionsStatistics =\n    arrayLastReactionForEachUser &&\n    countReactionsStats(arrayLastReactionForEachUser);\n  State.update({\n    reactionsStatistics,\n  });\n}\n\n// ================= Mouse Handlers ===============\n\nfunction handleOnMouseEnter() {\n  State.update({ show: true });\n}\n\nfunction handleOnMouseLeave() {\n  State.update({ show: false });\n}\n\nfunction onCommit(emojiToWrite) {\n  onPushEnd();\n  () => {\n    updateReactionsStatisticsIfUserVoted(emojiToWrite);\n  };\n}\n\nfunction onPushEnd() {\n  State.update({ loading: false, show: false });\n}\n\nfunction reactListener(emojiMessage) {\n  if (state.loading) {\n    return;\n  }\n  State.update({\n    loading: true,\n  });\n\n  // decide to put unique emoji or white heart (unreaction emoji)\n  const emojiToWrite =\n    emojiMessage === initialEmoji &&\n    state.reactionsData.userReaction.value.reaction === initialEmoji\n      ? emojiArray[0]\n      : emojiMessage;\n\n  const newLibCalls = [...state.libCalls];\n  newLibCalls.push({\n    functionName: \"createReaction\",\n    key: \"createReaction\",\n    props: {\n      elementReactedId,\n      reaction: emojiToWrite,\n      onCommit: onCommit(emojiToWrite),\n      onCancel: onPushEnd,\n    },\n  });\n  State.update({ libCalls: newLibCalls });\n\n  // let data;\n\n  // if (isTest) {\n  //   data = {\n  //     index: {\n  //       test_reaction: JSON.stringify({\n  //         key: item,\n  //         value: {\n  //           type: emojiToWrite,\n  //         },\n  //       }),\n  //     },\n  //   };\n  // } else {\n  //   data = {\n  //     index: {\n  //       reaction: JSON.stringify({\n  //         key: item,\n  //         value: {\n  //           type: emojiToWrite,\n  //         },\n  //       }),\n  //     },\n  //   };\n  // // }\n\n  // Social.set(data, {\n  //   onCommit: () => {\n  //     updateReactionsStatisticsIfUserVoted(emojiToWrite);\n  //     State.update({ emoji: emojiToWrite, loading: false, show: false });\n  //   },\n  //   onCancel: () => State.update({ loading: false, show: false }),\n  // });\n}\n\nfunction reactionsStateUpdate(obj) {\n  State.update(obj);\n}\n\nfunction showWhenCalled(objText) {\n  return state.showReactionsListModal == objText\n    ? { display: \"block\", backdropFilter: \"blur(3px)\", cursor: \"auto\" }\n    : {};\n}\n\n// =============== CSS Styles ===============\nconst Button = styled.button`\n  min-width: fit-content;\n  background: transparent;\n  display: inline-flex;\n  align-items: center;\n  justify-content: start;\n  height: 2.5em;\n  padding: 6px 12px;\n  margin: 2px 0;\n  border: 0;\n  border-radius: .375rem;\n  :hover {\n    background: #EBEBEB; \n    outline: 1px solid #C6C7C8;\n  }\n`;\n\nconst SmallReactButton = styled.button`\n  background: transparent;\n  display: inline-flex;\n  align-items: center;\n  justify-content: start;\n  width: fit-content;\n  height: 2.5em;\n  padding: 6px 12px;\n  margin: 2px 0;\n  border: 0;\n  border-radius: .375rem;\n  :hover {\n    background: #EBEBEB; \n    outline: 1px solid #C6C7C8;\n  }\n`;\n\nconst SmallButton = styled.button`\nposition: relative;\n  border: 0;\n  background: transparent;\n  width: 35px;\n  height: 35px;\n  color: ${({ isHeart }) => (isHeart ? \"red\" : \"\")};\n`;\n\nconst SmallButtonSpan = styled.span`\n  font-size: 19px;\n  :hover{\n      position: absolute;\n      font-size: 35px;\n      bottom: -5px;\n      width: 35px;\n      height: 40px;\n      transform: translateX(-50%) translateY(-50%);\n  }\n  \n  @media (max-width: 599px) {\n      ::before { \n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(255, 255, 255, .4);\n          content: \"\";}\n      :hover{\n      ::before { \n          position: absolute;\n          width: 100%;\n          height: 120%;\n          background-color: rgba(255, 255, 255, .4);\n          content: \"\";}\n  }\n      \n  }\n`;\n\n// =============== NEW CSS Styles ===============!!!!!!!!\nconst EmojiWrapper = styled.div`\n  display: inline-block;\n  position: relative;\n  overflow: visible !important;\n  padding-left: 8px;\n`;\n\nconst EmojiListWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 0.5rem;\n  \n  background: white;\n  border-radius: 1rem;\n  box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15) !important;\n  position: absolute;\n  right: 0;\n  width: 370px;\n  max-width: 35vw;\n  flex-wrap: wrap;\n  display: ${({ show }) => (show ? \"flex\" : \"none\")};\n  transform: translateY(-10%);\n  zIndex: 2;\n`;\n\nconst SpinnerContainer = styled.div`\n  height: 1rem;\n  width: 1rem;\n  marginTop: 2px;\n`;\n\nconst CallLibrary = styled.div`\n  display: none;\n`;\n\n// =============== NEW JSX ===============!!!!!!!!\nconst Overlay = () => {\n  return (\n    <EmojiListWrapper\n      onMouseEnter={handleOnMouseEnter}\n      onMouseLeave={handleOnMouseLeave}\n      show={state.show}\n    >\n      {emojiArray &&\n        emojiArray.map((item) => {\n          return (\n            <SmallButton\n              onClick={() => reactListener(item)}\n              isHeart={index === 0}\n            >\n              <OverlayTrigger\n                placement=\"top\"\n                overlay={\n                  <Tooltip>\n                    <div className=\"text-truncate text-start\">\n                      {item.slice(2)}\n                    </div>\n                  </Tooltip>\n                }\n              >\n                <SmallButtonSpan>{item.slice(0, 2)}</SmallButtonSpan>\n              </OverlayTrigger>\n            </SmallButton>\n          );\n        })}\n    </EmojiListWrapper>\n  );\n};\n\nconst Spinner = () => {\n  return (\n    <SpinnerContainer className=\"spinner-border text-secondary\" role=\"status\">\n      <span className=\"sr-only\" title=\"Loading...\"></span>\n    </SpinnerContainer>\n  );\n};\n\nconst renderReaction = (item, isInButton) => {\n  return (\n    ((item.accounts.includes(context.accountId) && isInButton) ||\n      (!item.accounts.includes(context.accountId) && !isInButton)) && (\n      <span>\n        <Widget\n          className={isInButton ? \"ps-3\" : \"\"}\n          src={`testwiki.near/widget/WikiOnSocialDB_TooltipProfiles`}\n          props={{ accounts: item.accounts, emoji: item.emoji }}\n        />\n      </span>\n    )\n  );\n};\n\nreturn (\n  <>\n    <EmojiWrapper>\n      {!state.reactionsData.userReaction ? (\n        <Button\n          onMouseEnter={handleOnMouseEnter}\n          onMouseLeave={handleOnMouseLeave}\n        >\n          {state.loading && <Spinner />}\n          {initialEmoji}\n        </Button>\n      ) : (\n        <SmallReactButton\n          onMouseEnter={handleOnMouseEnter}\n          onMouseLeave={handleOnMouseLeave}\n        >\n          {state.loading && <Spinner />}\n          {state.reactionsData.reactionsStatistics &&\n            state.reactionsData.reactionsStatistics.map((item) =>\n              renderReaction(item, true)\n            )}\n        </SmallReactButton>\n      )}\n      <Overlay />\n      {state.reactionsData.reactionsStatistics &&\n        state.reactionsData.reactionsStatistics.map((item) =>\n          renderReaction(item, false)\n        )}\n    </EmojiWrapper>\n\n    <CallLibrary>\n      {callLibs(\n        libSrcArray,\n        reactionsStateUpdate,\n        state.libCalls,\n        initialEmoji\n      )}\n    </CallLibrary>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sayalot.near/widget/NDC.Reactions", "fact_widget_deployments_id": "2b39413ae811c04ee0b387510ca59170", "inserted_timestamp": "2023-08-17T03:33:03.172Z", "modified_timestamp": "2023-08-17T03:33:03.172Z", "__row_index": 97}