{"tx_hash": "HKZS5zKW57ESoVQEFEefdUHTh2aCMwJVzpY5zAMi3M9o", "action_id_social": "Ds8A6HqLQU81EeAPZdtonKCVyPBbjgNajZQz62PAmdRs-0-widget", "block_id": 99921998, "block_timestamp": "2023-08-29T10:43:59.729Z", "signer_id": "sayalot.near", "widget_name": "NDC.Reactions", "source_code": "const { isTest, authorForWidget, elementReactedId } = props;\n// Don't forget to put space between emoji and text -> \"\u2764\ufe0f Positive\"\nconst initialEmoji = \"\ud83e\udd0d Like\";\n// It is important that 'Heart' Positive emoji is first\nconst emojiArray = [\n  \"\u2764\ufe0f Positive\",\n  \"\ud83d\ude4f Thank you\",\n  \"\ud83d\udcaf Definitely\",\n  \"\ud83d\udc40 Thinking\",\n  \"\ud83d\udd25 Awesome\",\n  \"\ud83d\udc4d Like\",\n  \"\ud83d\ude4c Celebrate\",\n  \"\ud83d\udc4f Applause\",\n  \"\u26a1 Lightning\",\n  \"\u22c8 Bowtie\",\n];\n\nconst accountThatIsLoggedIn = context.accountId;\n\nconst libSrcArray = [`${authorForWidget}/widget/SayALot.lib.emojis`];\n\nfunction callLibs(srcArray, stateUpdate, libCalls, initialEmoji) {\n  return (\n    <>\n      {srcArray.map((src) => {\n        return (\n          <Widget\n            src={src}\n            props={{\n              isTest,\n              stateUpdate,\n              libCalls,\n              initialEmoji,\n            }}\n          />\n        );\n      })}\n    </>\n  );\n}\n\nconst prodAction = \"sayALotArticle\";\nconst testAction = `test_${prodAction}`;\nconst action = isTest ? testAction : prodAction;\n\n// const libCalls = !state.updatedReactions\n//   ?\nconst libCalls = [\n  {\n    functionName: \"getReactionsData\",\n    key: \"reactionsData\",\n    props: {\n      elementReactedId,\n    },\n  },\n];\n\n// props: {\n//   elementReactedId,\n//   // createdReaction: state.createReaction,\n// },\n// : [];\n\nState.init({\n  emoji: undefined,\n  reactionsData: { reactionsStatistics: [], userReaction: undefined },\n  show: false,\n  loading: false,\n  libCalls,\n});\n\nif (\n  elementReactedId ==\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb-1691530843649\"\n) {\n  console.log(\"reactionsData: \", state.reactionsData);\n}\n\n// ========= UPDATE REACTION STATISTICS IF USER VOTED RIGHT NOW=========\n// function updateReactionsStatisticsIfUserVoted(newEmoji) {\n//   let currentReactionsStatistics = state.reactionsData.reactionsStatistics;\n\n//   const oldReactionStat = currentReactionsStatistics.find((item) =>\n//     item.accounts.includes(accountThatIsLoggedIn)\n//   ); //Get the previous reaction of the user.\n\n//   let reactedStat = currentReactionsStatistics.find((item) => {\n//     newEmoji.includes(item.text);\n//   }); //Get the previous value of the emoji the user just uploaded\n\n//   let everyOtherReactionStat = currentReactionsStatistics.filter((item) => {\n//     return (\n//       !item.accounts.includes(accountThatIsLoggedIn) &&\n//       !newEmoji.includes(item.text)\n//     );\n//   }); //Get every other reaction\n\n//   let newReactionsStatistics;\n\n//   function getNewStatForEmojiReacted() {\n//     //Change the stats of the emoji that was used considering the selection of the user\n//     //If that type of reaction was not found previously just add it.\n//     return {\n//       accounts: reactedStat\n//         ? [...reactedStat.accounts, accountThatIsLoggedIn]\n//         : [accountThatIsLoggedIn],\n//       emoji: reactedStat ? reactedStat.emoji : newEmoji.slice(0, 2),\n//       quantity: reactedStat ? reactedStat.quantity++ : 1,\n//       text: reactedStat ? reactedStat.text : newEmoji.slice(2),\n//     };\n//   }\n\n//   //If the user has reacted before and is changing it\n//   if (oldReactionStat) {\n//     //Take out the user's previous reaction from the list of users that have reacted like that\n//     let newAccountsForOldReactionStat = oldReactionStat.accounts.filter(\n//       (acc) => {\n//         acc != accountThatIsLoggedIn;\n//       }\n//     );\n\n//     //Change the stats\n//     let newValueForOldReactionStat = {\n//       accounts: newAccountsForOldReactionStat,\n//       emoji: oldReactionStat.emoji,\n//       quantity: oldReactionStat.quantity - 1,\n//       text: oldReactionStat.text,\n//     };\n\n//     //Set the new statistics value. If it's the first reaction to the post just add it. If not consider the previous reaction stats.\n//     newReactionsStatistics = everyOtherReactionStat\n//       ? [\n//           ...everyOtherReactionStat,\n//           getNewStatForEmojiReacted(),\n//           newValueForOldReactionStat,\n//         ]\n//       : [getNewStatForEmojiReacted(), newValueForOldReactionStat];\n\n//     //If it's the first reaction of this user\n//   } else {\n//     //If is the fisrt reaction to the post just add it, if not consider the previous values\n//     newReactionsStatistics = everyOtherReactionStat\n//       ? [...everyOtherReactionStat, getNewStatForEmojiReacted()]\n//       : [getNewStatForEmojiReacted()];\n//   }\n\n//   //Only keep reactions with at least 1 person using it\n//   newReactionsStatistics = newReactionsStatistics.filter((statistic) => {\n//     return statistic.quantity > 0;\n//   });\n\n//   //When update the data considering the existing data format\n//   State.update({\n//     reactionsData: {\n//       reactionsStatistics: newReactionsStatistics,\n//       userReaction: {\n//         accountId: accountThatIsLoggedIn,\n//         blockHeight: 0,\n//         value: { reaction: newEmoji, type: \"md\" },\n//       },\n//     },\n//     loading: false,\n//     show: false,\n//     updatedReactions: true,\n//   });\n// }\n\n// ================= Mouse Handlers ===============\n\nfunction handleOnMouseEnter() {\n  State.update({ show: true });\n}\n\nfunction handleOnMouseLeave() {\n  State.update({ show: false });\n}\n\nfunction onPushEnd() {\n  State.update({ loading: false, show: false });\n}\n\nfunction reactListener(emojiMessage) {\n  if (state.loading) {\n    return;\n  }\n\n  // decide to put unique emoji or white heart (unreaction emoji)\n  const emojiToWrite =\n    emojiMessage === initialEmoji &&\n    state.reactionsData.userReaction.value.reaction === initialEmoji\n      ? emojiArray[0]\n      : emojiMessage;\n\n  // function onCommit() {\n  //   updateReactionsStatisticsIfUserVoted(emojiToWrite);\n  // }\n\n  const newLibCalls = [...state.libCalls];\n  newLibCalls.push({\n    functionName: \"createReaction\",\n    key: \"createReaction\",\n    props: {\n      elementReactedId,\n      reaction: emojiToWrite,\n      onCommit: onPushEnd,\n      onCancel: onPushEnd,\n    },\n  });\n  State.update({ libCalls: newLibCalls, loading: true });\n}\n\nfunction reactionsStateUpdate(obj) {\n  State.update(obj);\n}\n\n// =============== CSS Styles ===============\nconst Button = styled.button`\n  min-width: fit-content;\n  background: transparent;\n  display: inline-flex;\n  align-items: center;\n  justify-content: start;\n  height: 2.5em;\n  padding: 6px 12px;\n  margin: 2px 0;\n  border: 0;\n  border-radius: .375rem;\n  :hover {\n    background: #EBEBEB; \n    outline: 1px solid #C6C7C8;\n  }\n`;\n\nconst SmallReactButton = styled.button`\n  background: transparent;\n  display: inline-flex;\n  align-items: center;\n  justify-content: start;\n  width: fit-content;\n  height: 2.5em;\n  padding: 6px 12px;\n  margin: 2px 0;\n  border: 0;\n  border-radius: .375rem;\n  :hover {\n    background: #EBEBEB; \n    outline: 1px solid #C6C7C8;\n  }\n`;\n\nconst SmallButton = styled.button`\nposition: relative;\n  border: 0;\n  background: transparent;\n  width: 35px;\n  height: 35px;\n  color: ${({ isHeart }) => (isHeart ? \"red\" : \"\")};\n`;\n\nconst SmallButtonSpan = styled.span`\n  font-size: 19px;\n  :hover{\n      position: absolute;\n      font-size: 35px;\n      bottom: -5px;\n      width: 35px;\n      height: 40px;\n      transform: translateX(-50%) translateY(-50%);\n  }\n  \n  @media (max-width: 599px) {\n      ::before { \n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(255, 255, 255, .4);\n          content: \"\";}\n      :hover{\n      ::before { \n          position: absolute;\n          width: 100%;\n          height: 120%;\n          background-color: rgba(255, 255, 255, .4);\n          content: \"\";}\n  }\n      \n  }\n`;\n\n// =============== NEW CSS Styles ===============!!!!!!!!\nconst EmojiWrapper = styled.div`\n  display: inline-block;\n  position: relative;\n  overflow: visible !important;\n  padding-left: 8px;\n`;\n\nconst EmojiListWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 0.5rem;\n  \n  background: white;\n  border-radius: 1rem;\n  box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15) !important;\n  position: absolute;\n  right: 0;\n  width: 370px;\n  max-width: 35vw;\n  flex-wrap: wrap;\n  display: ${({ show }) => (show ? \"flex\" : \"none\")};\n  transform: translateY(-10%);\n  zIndex: 2;\n`;\n\nconst SpinnerContainer = styled.div`\n  height: 1rem;\n  width: 1rem;\n  marginTop: 2px;\n`;\n\nconst CallLibrary = styled.div`\n  display: none;\n`;\n\n// =============== NEW JSX ===============!!!!!!!!\nconst Overlay = () => {\n  return (\n    <EmojiListWrapper\n      onMouseEnter={handleOnMouseEnter}\n      onMouseLeave={handleOnMouseLeave}\n      show={state.show}\n    >\n      {emojiArray &&\n        emojiArray.map((item) => {\n          return (\n            <SmallButton\n              onClick={() => reactListener(item)}\n              isHeart={index === 0}\n            >\n              <OverlayTrigger\n                placement=\"top\"\n                overlay={\n                  <Tooltip>\n                    <div className=\"text-truncate text-start\">\n                      {item.slice(2)}\n                    </div>\n                  </Tooltip>\n                }\n              >\n                <SmallButtonSpan>{item.slice(0, 2)}</SmallButtonSpan>\n              </OverlayTrigger>\n            </SmallButton>\n          );\n        })}\n    </EmojiListWrapper>\n  );\n};\n\nconst Spinner = () => {\n  return (\n    <SpinnerContainer className=\"spinner-border text-secondary\" role=\"status\">\n      <span className=\"sr-only\" title=\"Loading...\"></span>\n    </SpinnerContainer>\n  );\n};\n\nconst renderReaction = (item, isInButton) => {\n  return (\n    ((item.accounts.includes(context.accountId) && isInButton) ||\n      (!item.accounts.includes(context.accountId) && !isInButton)) && (\n      <span>\n        <Widget\n          className={isInButton ? \"ps-3\" : \"\"}\n          src={`testwiki.near/widget/WikiOnSocialDB_TooltipProfiles`}\n          props={{ accounts: item.accounts, emoji: item.emoji }}\n        />\n      </span>\n    )\n  );\n};\n\nreturn (\n  <>\n    <EmojiWrapper>\n      {!state.reactionsData.userReaction ? (\n        <Button\n          onMouseEnter={handleOnMouseEnter}\n          onMouseLeave={handleOnMouseLeave}\n        >\n          {state.loading && <Spinner />}\n          {initialEmoji}\n        </Button>\n      ) : (\n        <SmallReactButton\n          onMouseEnter={handleOnMouseEnter}\n          onMouseLeave={handleOnMouseLeave}\n        >\n          {state.loading && <Spinner />}\n          {state.reactionsData.reactionsStatistics &&\n            state.reactionsData.reactionsStatistics.map((item) =>\n              renderReaction(item, true)\n            )}\n        </SmallReactButton>\n      )}\n      <Overlay />\n      {state.reactionsData.reactionsStatistics &&\n        state.reactionsData.reactionsStatistics.map((item) =>\n          renderReaction(item, false)\n        )}\n    </EmojiWrapper>\n\n    <CallLibrary>\n      {callLibs(\n        libSrcArray,\n        reactionsStateUpdate,\n        state.libCalls,\n        initialEmoji\n      )}\n    </CallLibrary>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sayalot.near/widget/NDC.Reactions", "fact_widget_deployments_id": "08ec845b167b2344c70279b9a89d3939", "inserted_timestamp": "2023-08-29T12:20:58.198Z", "modified_timestamp": "2023-08-29T12:20:58.198Z", "__row_index": 48}