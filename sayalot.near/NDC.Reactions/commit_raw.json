{"tx_hash": "8JpFAYenLQygoRo1stjJsnBALZo3y9XhdofChNTL6dJS", "action_id_social": "GRCMeBxvZmseBXKkyahsqvDLp9edYb1pGeR42JgSs85q-0-widget", "block_id": 105155874, "block_timestamp": "2023-11-07T15:30:14.495Z", "signer_id": "sayalot.near", "widget_name": "NDC.Reactions", "source_code": "// NDC.Reactions\n\nconst {\n  isTest,\n  authorForWidget,\n  elementReactedId,\n  widgets,\n  disabled,\n  sbtsNames,\n  callLibs,\n  baseActions,\n} = props;\n// Don't forget to put space between emoji and text -> \"\u2764\ufe0f Positive\"\nconst initialEmoji = \"\ud83e\udd0d Like\";\n// It is important that 'Heart' Positive emoji is first\nconst emojiArray = [\n  \"\u2764\ufe0f Positive\",\n  \"\ud83d\ude4f Thank you\",\n  \"\ud83d\udcaf Definitely\",\n  \"\ud83d\udc40 Thinking\",\n  \"\ud83d\udd25 Awesome\",\n  \"\ud83d\udc4d Like\",\n  \"\ud83d\ude4c Celebrate\",\n  \"\ud83d\udc4f Applause\",\n  \"\u26a1 Lightning\",\n  \"\u22c8 Bowtie\",\n];\n\nconst accountThatIsLoggedIn = context.accountId;\n\nconst libSrcArray = [widgets.libEmojis];\n\nconst initLibsCalls = {\n  emojis: [\n    {\n      functionName: \"getEmojis\",\n      key: \"reactionsData\",\n      props: {\n        elementReactedId,\n        sbtsNames,\n      },\n    },\n  ],\n};\n\nState.init({\n  emoji: undefined,\n  reactionsData: { reactionsStatistics: [], userReaction: undefined },\n  // reactionsData: {},\n  show: false,\n  loading: false,\n  functionsToCallByLibrary: initLibsCalls,\n});\n\n// ================= Mouse Handlers ===============\n\nfunction handleOnMouseEnter() {\n  if (!disabled) {\n    State.update({ show: true });\n  }\n}\n\nfunction handleOnMouseLeave() {\n  State.update({ show: false });\n}\n\nfunction onPushEnd() {\n  State.update({ loading: false, show: false });\n}\n\nfunction reactListener(emojiToWrite) {\n  if (state.loading || disabled) {\n    return;\n  }\n\n  // decide to put unique emoji or white heart (unreaction emoji)\n  // const emojiToWrite =\n  //   emojiMessage === initialEmoji ? emojiArray[0] : emojiMessage;\n\n  const newLibsCalls = Object.assign({}, state.functionsToCallByLibrary);\n\n  newLibsCalls.emojis.push({\n    functionName: \"createEmoji\",\n    key: \"createReaction\",\n    props: {\n      elementReactedId,\n      reaction: emojiToWrite,\n      articleSbts: sbtsNames,\n      onCommit: onPushEnd,\n      onCancel: onPushEnd,\n    },\n  });\n  State.update({ functionsToCallByLibrary: newLibsCalls, loading: true });\n}\n\nfunction reactionsStateUpdate(obj) {\n  State.update(obj);\n}\n\n// =============== CSS Styles ===============\nconst Button = styled.button`\n  min-width: fit-content;\n  background: transparent;\n  display: inline-flex;\n  align-items: center;\n  justify-content: start;\n  height: 2.5em;\n  padding: 6px 12px;\n  margin: 2px 0;\n  border: 0;\n  border-radius: .375rem;\n  ${\n    !disabled &&\n    `:hover {\n    background: #EBEBEB; \n    outline: 1px solid #C6C7C8;\n    }`\n  }\n  \n`;\n\nconst SmallReactButton = styled.button`\n  background: transparent;\n  display: inline-flex;\n  align-items: center;\n  justify-content: start;\n  width: fit-content;\n  height: 2.5em;\n  padding: 6px 12px;\n  margin: 2px 0;\n  border: 0;\n  border-radius: .375rem;\n  ${\n    !disabled &&\n    `:hover {\n    background: #EBEBEB; \n    outline: 1px solid #C6C7C8;\n    }`\n  }\n`;\n\nconst SmallButton = styled.button`\nposition: relative;\n  border: 0;\n  background: transparent;\n  width: 35px;\n  height: 35px;\n  color: ${({ isHeart }) => (isHeart ? \"red\" : \"\")};\n`;\n\nconst SmallButtonSpan = styled.span`\n  font-size: 19px;\n  :hover{\n      position: absolute;\n      font-size: 35px;\n      bottom: -5px;\n      width: 35px;\n      height: 40px;\n      transform: translateX(-50%) translateY(-50%);\n  }\n  \n  @media (max-width: 599px) {\n      ::before { \n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(255, 255, 255, .4);\n          content: \"\";}\n      :hover{\n      ::before { \n          position: absolute;\n          width: 100%;\n          height: 120%;\n          background-color: rgba(255, 255, 255, .4);\n          content: \"\";}\n  }\n      \n  }\n`;\n\n// =============== NEW CSS Styles ===============!!!!!!!!\nconst EmojiWrapper = styled.div`\n  display: inline-block;\n  position: relative;\n  overflow: visible !important;\n  padding-left: 8px;\n`;\n\nconst EmojiListWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 0.5rem;\n  \n  background: white;\n  border-radius: 1rem;\n  box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15) !important;\n  position: absolute;\n  right: 0;\n  width: 370px;\n  max-width: 35vw;\n  flex-wrap: wrap;\n  display: ${({ show }) => (show ? \"flex\" : \"none\")};\n  transform: translateY(-10%);\n  zIndex: 2;\n`;\n\nconst SpinnerContainer = styled.div`\n  height: 1rem;\n  width: 1rem;\n  marginTop: 2px;\n`;\n\nconst CallLibrary = styled.div`\n  display: none;\n`;\n\n// =============== NEW JSX ===============!!!!!!!!\nconst Overlay = () => {\n  return (\n    <EmojiListWrapper\n      onMouseEnter={handleOnMouseEnter}\n      onMouseLeave={handleOnMouseLeave}\n      show={state.show}\n    >\n      {emojiArray &&\n        emojiArray.map((item) => {\n          return (\n            <SmallButton\n              onClick={() => reactListener(item)}\n              isHeart={index === 0}\n            >\n              <OverlayTrigger\n                placement=\"top\"\n                overlay={\n                  <Tooltip>\n                    <div className=\"text-truncate text-start\">\n                      {item.slice(2)}\n                    </div>\n                  </Tooltip>\n                }\n              >\n                <SmallButtonSpan>{item.slice(0, 2)}</SmallButtonSpan>\n              </OverlayTrigger>\n            </SmallButton>\n          );\n        })}\n    </EmojiListWrapper>\n  );\n};\n\nconst Spinner = () => {\n  return (\n    <SpinnerContainer className=\"spinner-border text-secondary\" role=\"status\">\n      <span className=\"sr-only\" title=\"Loading...\"></span>\n    </SpinnerContainer>\n  );\n};\n\nconst renderReaction = (item, isInButton) => {\n  return (\n    ((item.accounts.includes(context.accountId) && isInButton) ||\n      (!item.accounts.includes(context.accountId) && !isInButton)) && (\n      <span>\n        <Widget\n          src={widgets.wikiOnSocialDB_TooltipProfiles}\n          className={isInButton ? \"ps-3\" : \"\"}\n          props={{ accounts: item.accounts, emoji: item.emoji }}\n        />\n      </span>\n    )\n  );\n};\n\nreturn (\n  <>\n    <EmojiWrapper>\n      {!disabled && (\n        <>\n          {state.reactionsData.userReaction ? (\n            <SmallReactButton\n              onMouseEnter={handleOnMouseEnter}\n              onMouseLeave={handleOnMouseLeave}\n            >\n              {state.loading && <Spinner />}\n              {state.reactionsData.reactionsStatistics &&\n                state.reactionsData.reactionsStatistics.map((item) =>\n                  renderReaction(item, true)\n                )}\n            </SmallReactButton>\n          ) : (\n            <Button\n              onMouseEnter={handleOnMouseEnter}\n              onMouseLeave={handleOnMouseLeave}\n            >\n              {state.loading && <Spinner />}\n              {initialEmoji}\n            </Button>\n          )}\n        </>\n      )}\n      <Overlay />\n      {state.reactionsData.reactionsStatistics &&\n        state.reactionsData.reactionsStatistics.map((item) =>\n          renderReaction(item, false)\n        )}\n    </EmojiWrapper>\n\n    <CallLibrary>\n      {libSrcArray.map((src) => {\n        return callLibs(\n          src,\n          reactionsStateUpdate,\n          state.functionsToCallByLibrary,\n          { baseAction: baseActions.reactionBaseAction },\n          \"Reactions\"\n        );\n      })}\n    </CallLibrary>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sayalot.near/widget/NDC.Reactions", "fact_widget_deployments_id": "0f65db2cc699dc078e5d64fa58c6a0f8", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}