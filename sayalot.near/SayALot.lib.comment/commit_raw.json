{"tx_hash": "6hrZgF6hHpg8ki5F48QAZo5MRbHh35iYmPn61ryoVaJW", "action_id_social": "AYG4AQFSoh1AUTZVd3EftkteaJJETCc9c8iC8FpmwaCU-0-widget", "block_id": 102930052, "block_timestamp": "2023-10-08T21:16:43.661Z", "signer_id": "sayalot.near", "widget_name": "SayALot.lib.comment", "source_code": "const { isTest, stateUpdate, libCalls } = props;\n\nconst prodAction = \"sayALotComment_v0.0.1\";\nconst testAction = `test_${prodAction}`;\nconst action = isTest ? testAction : prodAction;\n\n// const authorForWidget =\n//   \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\nconst authorForWidget = \"sayalot.near\";\n// const authorForWidget = \"kenrou-it.near\";\nconst libSrcArray = [`${authorForWidget}/widget/SayALot.lib.SBT`];\n\nState.init({ libCalls: [] });\n\nfunction libStateUpdate(obj) {\n  State.update(obj);\n}\n\nfunction setAreValidUsers(accountIds, sbtName) {\n  const newLibCalls = [...state.libCalls];\n  accountIds.forEach((accountId) => {\n    const isCallPushed =\n      newLibCalls.find((libCall) => {\n        return (\n          libCall.functionName === \"isValidUser\" &&\n          libCall.props.accountId === accountId\n        );\n      }) !== undefined;\n    const isCallReturned = state[`isValidUser-${accountId}`] !== undefined;\n\n    if (isCallPushed || isCallReturned) {\n      return;\n    }\n\n    newLibCalls.push({\n      functionName: \"isValidUser\",\n      key: `isValidUser-${accountId}`,\n      props: {\n        accountId,\n        sbtName: sbtName[0],\n      },\n    });\n  });\n  State.update({ libCalls: newLibCalls });\n}\n\nfunction callLibs(srcArray, stateUpdate, libCalls) {\n  return (\n    <>\n      {srcArray.map((src) => {\n        return (\n          <Widget\n            src={src}\n            props={{\n              isTest,\n              stateUpdate,\n              libCalls,\n            }}\n          />\n        );\n      })}\n    </>\n  );\n}\n\nfunction canUserCreateComment(props) {\n  const { env, accountId, sbtsNames } = props;\n\n  setAreValidUsers([accountId], sbtsNames);\n\n  const result = state[`isValidUser-${accountId}`];\n\n  resultLibCalls = resultLibCalls.filter((call) => {\n    const discardCondition =\n      call.functionName === \"canUserCreateComment\" && result !== undefined;\n    return !discardCondition;\n  });\n\n  return result;\n}\n\nfunction createComment(props) {\n  const { comment, onClick, onCommit, onCancel } = props;\n\n  onClick();\n\n  saveComment(comment, onCommit, onCancel);\n\n  resultLibCalls = resultLibCalls.filter((call) => {\n    return call.functionName !== \"createComment\";\n  });\n\n  return comment;\n}\n\nfunction composeCommentData(comment) {\n  const data = {\n    index: {\n      [action]: JSON.stringify({\n        key: comment.realArticleId,\n        value: {\n          type: \"md\",\n          comment,\n        },\n      }),\n    },\n  };\n\n  return data;\n}\n\nfunction saveComment(comment, onCommit, onCancel) {\n  if (comment.text) {\n    const newData = composeCommentData(comment);\n    Social.set(newData, {\n      force: true,\n      onCommit,\n      onCancel,\n    });\n  }\n}\n\nfunction getComments(realArticleId) {\n  return Social.index(action, realArticleId, {\n    order: \"desc\",\n    subscribe: true,\n  });\n}\n\nfunction getCommentBlackListByBlockHeight() {\n  return [98588599];\n}\n\nfunction filterInvalidArticlesIndexes(commentIndexes) {\n  return commentIndexes.filter(\n    (commentIndexes) =>\n      !getCommentBlackListByBlockHeight().includes(commentIndexes.blockHeight) // Comment is not in blacklist\n  );\n}\n\nfunction getValidComments(props) {\n  const { realArticleId, articleSbts } = props;\n  const commentIndexes = getComments(realArticleId);\n  const blacklistFilteredComments =\n    filterInvalidArticlesIndexes(commentIndexes);\n\n  let finalComments = blacklistFilteredComments;\n  if (articleSbts.length > 0) {\n    const blacklistFilteredCommentsAuthors = blacklistFilteredComments.map(\n      (comment) => {\n        return comment.accountId;\n      }\n    );\n\n    setAreValidUsers(blacklistFilteredCommentsAuthors, articleSbts);\n\n    const validAuthors = blacklistFilteredCommentsAuthors.filter((author) => {\n      return state[`isValidUser-${author}`] === true;\n    });\n\n    resultLibCalls = resultLibCalls.filter((call) => {\n      const discardCondition =\n        call.functionName === \"getValidComments\" &&\n        state[`isValidUser-${call.props.accountId}`] !== undefined;\n      return !discardCondition;\n    });\n\n    finalComments = blacklistFilteredCommentsAuthors.filter((comment) => {\n      return validAuthors.includes(comment.accountId);\n    });\n  }\n\n  return finalComments;\n}\n\nfunction libCall(call) {\n  if (call.functionName === \"createComment\") {\n    return createComment(call.props);\n  } else if (call.functionName === \"getValidComments\") {\n    return getValidComments(call.props);\n  } else if (call.functionName === \"canUserCreateComment\") {\n    return canUserCreateComment(call.props);\n  }\n}\n\nlet resultLibCalls = [];\nif (libCalls && libCalls.length > 0) {\n  console.log(\n    \"Calling functions\",\n    libCalls.map((lc) => lc.functionName)\n  );\n  const updateObj = {};\n  resultLibCalls = [...libCalls];\n  libCalls.forEach((call) => {\n    updateObj[call.key] = libCall(call);\n  });\n\n  updateObj.libCalls = resultLibCalls;\n  stateUpdate(updateObj);\n}\n\nreturn <>{callLibs(libSrcArray, libStateUpdate, state.libCalls)}</>;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sayalot.near/widget/SayALot.lib.comment", "fact_widget_deployments_id": "d23ee09d2eb49c9a5568f7fac4aa45e8", "inserted_timestamp": "2023-10-08T23:21:26.875Z", "modified_timestamp": "2023-10-08T23:21:26.875Z", "__row_index": 14}