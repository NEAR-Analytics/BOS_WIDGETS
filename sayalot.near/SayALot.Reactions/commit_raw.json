{"tx_hash": "DP51eFeqNxiMNLCG2fgHdREqRXmUGMwvH9EYcMZ4mM1F", "action_id_social": "HE7tRdd15KgtNEQswigXKYQKgySm9FTvqyQbmoGdyagx-0-widget", "block_id": 104278278, "block_timestamp": "2023-10-26T23:48:37.294Z", "signer_id": "sayalot.near", "widget_name": "SayALot.Reactions", "source_code": "const {\r\n  isTest,\r\n  authorForWidget,\r\n  elementReactedId,\r\n  widgets,\r\n  disabled,\r\n  sbtsNames,\r\n  callLibs,\r\n} = props;\r\n// Don't forget to put space between emoji and text -> \"\u2764\ufe0f Positive\"\r\nconst initialEmoji = \"\ud83e\udd0d Like\";\r\n// It is important that 'Heart' Positive emoji is first\r\nconst emojiArray = [\r\n  \"\u2764\ufe0f Positive\",\r\n  \"\ud83d\ude4f Thank you\",\r\n  \"\ud83d\udcaf Definitely\",\r\n  \"\ud83d\udc40 Thinking\",\r\n  \"\ud83d\udd25 Awesome\",\r\n  \"\ud83d\udc4d Like\",\r\n  \"\ud83d\ude4c Celebrate\",\r\n  \"\ud83d\udc4f Applause\",\r\n  \"\u26a1 Lightning\",\r\n  \"\u22c8 Bowtie\",\r\n];\r\n\r\nconst accountThatIsLoggedIn = context.accountId;\r\n\r\nconst libSrcArray = [widgets.libEmojis];\r\n\r\nconst initLibsCalls = {\r\n  emojis: [\r\n    {\r\n      functionName: \"getEmojis\",\r\n      key: \"reactionsData\",\r\n      props: {\r\n        elementReactedId,\r\n        sbtsNames,\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nState.init({\r\n  emoji: undefined,\r\n  reactionsData: { reactionsStatistics: [], userReaction: undefined },\r\n  // reactionsData: {},\r\n  show: false,\r\n  loading: false,\r\n  functionsToCallByLibrary: initLibsCalls,\r\n});\r\n\r\n// ================= Mouse Handlers ===============\r\n\r\nfunction handleOnMouseEnter() {\r\n  if (!disabled) {\r\n    State.update({ show: true });\r\n  }\r\n}\r\n\r\nfunction handleOnMouseLeave() {\r\n  State.update({ show: false });\r\n}\r\n\r\nfunction onPushEnd() {\r\n  State.update({ loading: false, show: false });\r\n}\r\n\r\nfunction reactListener(emojiToWrite) {\r\n  if (state.loading || disabled) {\r\n    return;\r\n  }\r\n\r\n  // decide to put unique emoji or white heart (unreaction emoji)\r\n  // const emojiToWrite =\r\n  //   emojiMessage === initialEmoji ? emojiArray[0] : emojiMessage;\r\n\r\n  const newLibsCalls = Object.assign({}, state.functionsToCallByLibrary);\r\n\r\n  newLibsCalls.emojis.push({\r\n    functionName: \"createEmoji\",\r\n    key: \"createReaction\",\r\n    props: {\r\n      elementReactedId,\r\n      reaction: emojiToWrite,\r\n      articleSbts: sbtsNames,\r\n      onCommit: onPushEnd,\r\n      onCancel: onPushEnd,\r\n    },\r\n  });\r\n  State.update({ functionsToCallByLibrary: newLibsCalls, loading: true });\r\n}\r\n\r\nfunction reactionsStateUpdate(obj) {\r\n  State.update(obj);\r\n}\r\n\r\n// =============== CSS Styles ===============\r\nconst Button = styled.button`\r\n  min-width: fit-content;\r\n  background: transparent;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: start;\r\n  height: 2.5em;\r\n  padding: 6px 12px;\r\n  margin: 2px 0;\r\n  border: 0;\r\n  border-radius: .375rem;\r\n  ${\r\n    !disabled &&\r\n    `:hover {\r\n    background: #EBEBEB; \r\n    outline: 1px solid #C6C7C8;\r\n    }`\r\n  }\r\n  \r\n`;\r\n\r\nconst SmallReactButton = styled.button`\r\n  background: transparent;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: start;\r\n  width: fit-content;\r\n  height: 2.5em;\r\n  padding: 6px 12px;\r\n  margin: 2px 0;\r\n  border: 0;\r\n  border-radius: .375rem;\r\n  ${\r\n    !disabled &&\r\n    `:hover {\r\n    background: #EBEBEB; \r\n    outline: 1px solid #C6C7C8;\r\n    }`\r\n  }\r\n`;\r\n\r\nconst SmallButton = styled.button`\r\nposition: relative;\r\n  border: 0;\r\n  background: transparent;\r\n  width: 35px;\r\n  height: 35px;\r\n  color: ${({ isHeart }) => (isHeart ? \"red\" : \"\")};\r\n`;\r\n\r\nconst SmallButtonSpan = styled.span`\r\n  font-size: 19px;\r\n  :hover{\r\n      position: absolute;\r\n      font-size: 35px;\r\n      bottom: -5px;\r\n      width: 35px;\r\n      height: 40px;\r\n      transform: translateX(-50%) translateY(-50%);\r\n  }\r\n  \r\n  @media (max-width: 599px) {\r\n      ::before { \r\n          position: absolute;\r\n          width: 100%;\r\n          height: 100%;\r\n          background-color: rgba(255, 255, 255, .4);\r\n          content: \"\";}\r\n      :hover{\r\n      ::before { \r\n          position: absolute;\r\n          width: 100%;\r\n          height: 120%;\r\n          background-color: rgba(255, 255, 255, .4);\r\n          content: \"\";}\r\n  }\r\n      \r\n  }\r\n`;\r\n\r\n// =============== NEW CSS Styles ===============!!!!!!!!\r\nconst EmojiWrapper = styled.div`\r\n  display: inline-block;\r\n  position: relative;\r\n  overflow: visible !important;\r\n  padding-left: 8px;\r\n`;\r\n\r\nconst EmojiListWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  padding: 0.5rem;\r\n  \r\n  background: white;\r\n  border-radius: 1rem;\r\n  box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15) !important;\r\n  position: absolute;\r\n  right: 0;\r\n  width: 370px;\r\n  max-width: 35vw;\r\n  flex-wrap: wrap;\r\n  display: ${({ show }) => (show ? \"flex\" : \"none\")};\r\n  transform: translateY(-10%);\r\n  zIndex: 2;\r\n`;\r\n\r\nconst SpinnerContainer = styled.div`\r\n  height: 1rem;\r\n  width: 1rem;\r\n  marginTop: 2px;\r\n`;\r\n\r\nconst CallLibrary = styled.div`\r\n  display: none;\r\n`;\r\n\r\n// =============== NEW JSX ===============!!!!!!!!\r\nconst Overlay = () => {\r\n  return (\r\n    <EmojiListWrapper\r\n      onMouseEnter={handleOnMouseEnter}\r\n      onMouseLeave={handleOnMouseLeave}\r\n      show={state.show}\r\n    >\r\n      {emojiArray &&\r\n        emojiArray.map((item) => {\r\n          return (\r\n            <SmallButton\r\n              onClick={() => reactListener(item)}\r\n              isHeart={index === 0}\r\n            >\r\n              <OverlayTrigger\r\n                placement=\"top\"\r\n                overlay={\r\n                  <Tooltip>\r\n                    <div className=\"text-truncate text-start\">\r\n                      {item.slice(2)}\r\n                    </div>\r\n                  </Tooltip>\r\n                }\r\n              >\r\n                <SmallButtonSpan>{item.slice(0, 2)}</SmallButtonSpan>\r\n              </OverlayTrigger>\r\n            </SmallButton>\r\n          );\r\n        })}\r\n    </EmojiListWrapper>\r\n  );\r\n};\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <SpinnerContainer className=\"spinner-border text-secondary\" role=\"status\">\r\n      <span className=\"sr-only\" title=\"Loading...\"></span>\r\n    </SpinnerContainer>\r\n  );\r\n};\r\n\r\nconst renderReaction = (item, isInButton) => {\r\n  return (\r\n    ((item.accounts.includes(context.accountId) && isInButton) ||\r\n      (!item.accounts.includes(context.accountId) && !isInButton)) && (\r\n      <span>\r\n        <Widget\r\n          className={isInButton ? \"ps-3\" : \"\"}\r\n          src={`testwiki.near/widget/WikiOnSocialDB_TooltipProfiles`}\r\n          props={{ accounts: item.accounts, emoji: item.emoji }}\r\n        />\r\n      </span>\r\n    )\r\n  );\r\n};\r\n\r\nreturn (\r\n  <>\r\n    <EmojiWrapper>\r\n      {!disabled && (\r\n        <>\r\n          {state.reactionsData.userReaction ? (\r\n            <SmallReactButton\r\n              onMouseEnter={handleOnMouseEnter}\r\n              onMouseLeave={handleOnMouseLeave}\r\n            >\r\n              {state.loading && <Spinner />}\r\n              {state.reactionsData.reactionsStatistics &&\r\n                state.reactionsData.reactionsStatistics.map((item) =>\r\n                  renderReaction(item, true)\r\n                )}\r\n            </SmallReactButton>\r\n          ) : (\r\n            <Button\r\n              onMouseEnter={handleOnMouseEnter}\r\n              onMouseLeave={handleOnMouseLeave}\r\n            >\r\n              {state.loading && <Spinner />}\r\n              {initialEmoji}\r\n            </Button>\r\n          )}\r\n        </>\r\n      )}\r\n      <Overlay />\r\n      {state.reactionsData.reactionsStatistics &&\r\n        state.reactionsData.reactionsStatistics.map((item) =>\r\n          renderReaction(item, false)\r\n        )}\r\n    </EmojiWrapper>\r\n\r\n    <CallLibrary>\r\n      {libSrcArray.map((src) => {\r\n        return callLibs(\r\n          src,\r\n          reactionsStateUpdate,\r\n          state.functionsToCallByLibrary,\r\n          { baseAction: \"sayALotReaction\" },\r\n          \"Reactions\"\r\n          // initialEmoji,\r\n        );\r\n      })}\r\n    </CallLibrary>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sayalot.near/widget/SayALot.Reactions", "fact_widget_deployments_id": "e17ea016cc6bbb16cdb7675c812a9d98", "inserted_timestamp": "2023-10-27T01:41:17.863Z", "modified_timestamp": "2023-10-27T01:41:17.863Z", "__row_index": 2}