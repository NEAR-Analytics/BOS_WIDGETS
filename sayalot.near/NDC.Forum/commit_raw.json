{"tx_hash": "6ZhXUXGJgdkb32nxH8c58K1V8yADcCjon9t8hRXLGvCn", "action_id_social": "CHBBNp7LBpm5hqFyQa5CVhR97WHwT25Jzk1rrDKDqwMv-0-widget", "block_id": 110153514, "block_timestamp": "2024-01-11T15:12:54.778Z", "signer_id": "sayalot.near", "widget_name": "NDC.Forum", "source_code": "// NDC.Forum\n\n//===============================================INITIALIZATION=====================================================\nlet {\n  sharedBlockHeight,\n  tagShared,\n  isTest,\n  accountId,\n  sbtWhiteList,\n  authorForWidget,\n  widgets,\n  brand,\n  baseActions,\n  createSbtOptions,\n  kanbanColumns,\n  kanbanRequiredTags,\n  kanbanExcludedTags,\n  sharedArticleId,\n  sharedCommentId,\n  topicShared,\n} = props;\n\nconst splitedTopic = topicShared ? topicShared.split(\"-class\") : undefined;\n\nconst topicSharedFirstPart = splitedTopic && splitedTopic[0];\nconst topicSharedSecondPart = splitedTopic && splitedTopic[1];\n\nif (topicSharedFirstPart !== \"public\" && topicSharedFirstPart !== undefined) {\n  topicShared = `${topicSharedFirstPart} - class ${topicSharedSecondPart}`;\n}\n\nsharedBlockHeight = Number(sharedBlockHeight);\n\nconst initSbtsNames = topicShared ? [topicShared] : [sbtWhiteList[0]];\n\nconst sbtsNames = state.sbt;\n\nconst initLibsCalls = {\n  article: [\n    {\n      functionName: \"getArticles\",\n      key: \"articles\",\n      props: {\n        env: isTest ? \"test\" : \"prod\",\n        sbtsNames: sbtWhiteList,\n      },\n    },\n    {\n      functionName: \"canUserCreateArticle\",\n      key: \"canLoggedUserCreateArticle\",\n      props: {\n        accountId: context.accountId,\n        sbtsNames: sbtWhiteList,\n      },\n    },\n  ],\n};\n\naccountId = context.accountId;\n\nconst tabs = {\n  SHOW_ARTICLES_LIST: { id: 0 },\n  SHOW_ARTICLE: { id: 1 },\n  ARTICLE_WORKSHOP: { id: 2 },\n  SHOW_ARTICLES_LIST_BY_AUTHORS: { id: 3 },\n  SHOW_KANBAN_VIEW: { id: 4 },\n};\n\nfunction getInitialFilter() {\n  if (sharedBlockHeight) {\n    return {\n      parameterName: \"getPost\",\n      parameterValue: sharedBlockHeight,\n    };\n  } else if (tagShared) {\n    return {\n      parameterName: \"tag\",\n      parameterValue: tagShared,\n    };\n  } else if (authorShared) {\n    return {\n      parameterName: \"author\",\n      parameterValue: authorShared,\n    };\n  } else if (sharedArticleId) {\n    return {\n      parameterName: \"articleId\",\n      parameterValue: sharedArticleId,\n    };\n  } else {\n    return {\n      parameterName: \"\",\n    };\n  }\n}\n\nfunction getInitialTabId() {\n  if (sharedBlockHeight || sharedArticleId) {\n    return tabs.SHOW_ARTICLE.id;\n  } else {\n    return tabs.SHOW_ARTICLES_LIST.id;\n  }\n}\n\n// userSBTs object type\n// {\n//   user: string,\n//   credentials: {}\n// }\n\nState.init({\n  displayedTabId: getInitialTabId(),\n  articleToRenderData: {},\n  filterBy: getInitialFilter(),\n  authorsProfiles: [],\n  functionsToCallByLibrary: initLibsCalls,\n  sbtsNames: initSbtsNames,\n  sbts: topicShared ? [topicShared] : initSbtsNames,\n  firstRender: !isNaN(sharedBlockHeight) || typeof sharedArticleId === \"string\",\n  usersSBTs: [],\n});\n\nconst usersSBTs = state.usersSBTs;\n\nlet newLibsCalls = state.functionsToCallByLibrary;\n\nState.update({ libsCalls: newLibsCalls });\n\n//=============================================END INITIALIZATION===================================================\n\n//==================================================CONSTS==========================================================\n\nconst libSrcArray = [widgets.libArticle];\n\nconst profile = props.profile ?? Social.getr(`${accountId}/profile`);\n\nif (profile === null) {\n  return \"Loading\";\n}\n\nlet authorProfile = {};\nif (state.filterBy.parameterName == \"author\") {\n  authorProfile = Social.getr(`${state.filterBy.parameterValue}/profile`);\n}\n\nconst navigationPills = [\n  { id: tabs.SHOW_ARTICLES_LIST.id, title: \"Articles\" },\n  { id: tabs.SHOW_ARTICLES_LIST_BY_AUTHORS.id, title: \"Authors\" },\n  { id: tabs.SHOW_KANBAN_VIEW.id, title: \"Kanban view\" },\n];\n\nconst navigationButtons = [\n  // { id: tabs.ARTICLE_WORKSHOP.id, title: \"+Create article\" },\n];\n\nconst sbts = state.sbts;\n\nconst initialBodyAtCreation = state.editArticleData.body;\nconst canLoggedUserCreateArticle = state.canLoggedUserCreateArticle[sbts[0]];\n\n//=================================================END CONSTS=======================================================\n\n//=================================================GET DATA=========================================================\nconst finalArticles = state.articles;\n\nfunction getArticlesToRender() {\n  if (\n    (sharedBlockHeight || sharedArticleId) &&\n    finalArticles &&\n    state.firstRender\n  ) {\n    let finalArticlesSbts = Object.keys(finalArticles);\n    let allArticles = [];\n\n    finalArticlesSbts.forEach((sbt) => {\n      allArticles = [...allArticles, ...finalArticles[sbt]];\n    });\n\n    return allArticles;\n  } else {\n    return finalArticles[sbts[0]];\n  }\n}\n\nconst articlesToRender = getArticlesToRender() ?? [];\n\nfunction filterArticlesByTag(tag, articles) {\n  return articles.filter((article) => {\n    return article.tags.includes(tag);\n  });\n}\n\nfunction filterArticlesByAuthor(author, articles) {\n  return articles.filter((article) => {\n    return article.author === author;\n  });\n}\n\nfunction filterOnePostByBlockHeight(blockHeight, articles) {\n  if (articles) {\n    return articles.filter((article) => article.blockHeight === blockHeight);\n  } else {\n    return [];\n  }\n}\n\nfunction filterOnePostByArticleId(articleId, articles) {\n  if (articles) {\n    return articles.filter((article) => article.id === articleId);\n  } else {\n    return [];\n  }\n}\n\nif (state.filterBy.parameterName === \"tag\") {\n  articlesToRender = filterArticlesByTag(\n    state.filterBy.parameterValue,\n    articlesToRender\n  );\n} else if (state.filterBy.parameterName === \"author\") {\n  articlesToRender = filterArticlesByAuthor(\n    state.filterBy.parameterValue,\n    articlesToRender\n  );\n} else if (state.filterBy.parameterName === \"getPost\") {\n  articlesToRender = filterOnePostByBlockHeight(\n    state.filterBy.parameterValue,\n    articlesToRender\n  );\n\n  if (articlesToRender.length > 0) {\n    State.update({ articleToRenderData: articlesToRender[0] });\n  }\n} else if (state.filterBy.parameterName === \"articleId\") {\n  articlesToRender = filterOnePostByArticleId(\n    state.filterBy.parameterValue,\n    articlesToRender\n  );\n\n  if (articlesToRender.length > 0) {\n    State.update({ articleToRenderData: articlesToRender[0] });\n  }\n}\n//===============================================END GET DATA=======================================================\n\n//=============================================STYLED COMPONENTS====================================================\nconst CallLibrary = styled.div`\n  display: block;\n`;\n\nconst ShareInteractionGeneralContainer = styled.div`\n    position: fixed;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    top: 0;\n    left: 0;\n    height: 100vh;\n    width: 100vw;\n    backdrop-filter: blur(10px);\n    z-index: 1;\n`;\n\nconst ShareInteractionMainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background: white;\n  padding: 1rem;\n  border-radious: 12px;\n`;\n\nconst ClosePopUpContainer = styled.div`\n  display: flex;  \n  flex-direction: row-reverse;\n`;\n\nconst CloseIcon = styled.div`\n  cursor: pointer;\n`;\n\nconst PopUpDescription = styled.p`\n  color: #474D55;\n`;\n\nconst ShowLinkShared = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #F2F6FA;\n  padding: 1rem 2rem;\n  border-radius: 17px;\n`;\n\nconst LinkShared = styled.span`\n  color: #0065FF;\n  word-wrap: anywhere;\n`;\n\nconst ClipboardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-left: 0.5rem;\n  min-width: 2.5rem;\n`;\n\nconst ClipboardIcon = styled.i`\n  color: ${state.linkCopied ? \"#0065FF\" : \"black\"};\n  transition: color 0.3s linear;\n  cursor: pointer;\n`;\n\nconst CopiedFeedback = styled.span`\n  font-size: 0.7rem;\n  color: #6c757d;\n`;\n\nconst SmallButton = styled.button`\nposition: relative;\n  border: 0;\n  background: transparent;\n  width: 35px;\n  height: 35px;\n`;\n//===========================================END STYLED COMPONENTS==================================================\n\n//================================================COMPONENTS========================================================\nconst renderShareInteraction = () => {\n  return (\n    <ShareInteractionGeneralContainer>\n      <ShareInteractionMainContainer>\n        <ClosePopUpContainer>\n          <CloseIcon\n            className=\"bi bi-x\"\n            onClick={() =>\n              State.update({\n                showShareSearchModal: false,\n                showShareModal: false,\n                linkCopied: false,\n                sharedElement: undefined,\n                sharingSearch: false,\n              })\n            }\n          ></CloseIcon>\n        </ClosePopUpContainer>\n        <h3>Share</h3>\n        <PopUpDescription>\n          {state.sharedElement.value\n            ? \"Use this link to share the article\"\n            : state.sharingSearch\n            ? \"Use this link to share the search\"\n            : \"Can't share yet. Reload the app and try again.\"}\n        </PopUpDescription>\n        <ShowLinkShared>\n          {(state.sharedElement.value || state.sharingSearch) && (\n            <LinkShared>{getLink()}</LinkShared>\n          )}\n          <ClipboardContainer>\n            {(state.sharedElement.value || state.sharingSearch) && (\n              <ClipboardIcon\n                className=\"bi-clipboard\"\n                onClick={() => {\n                  clipboard.writeText(getLink());\n                  State.update({ linkCopied: true });\n                }}\n              />\n            )}\n            {state.linkCopied && <CopiedFeedback>Copied!</CopiedFeedback>}\n          </ClipboardContainer>\n        </ShowLinkShared>\n      </ShareInteractionMainContainer>\n    </ShareInteractionGeneralContainer>\n  );\n};\n\nconst renderSelectorLabel = () => {\n  return (\n    <>\n      <span>Post & Filter Topics by SBT</span>\n\n      <SmallButton>\n        <OverlayTrigger\n          placement=\"top\"\n          overlay={\n            <Tooltip>\n              <p className=\"m-0\">Topics for Community SBT Holders.</p>\n              <p className=\"m-0\">Anyone can post to Public.</p>\n            </Tooltip>\n          }\n        >\n          <i className=\"bi bi-info-circle\"></i>\n        </OverlayTrigger>\n      </SmallButton>\n    </>\n  );\n};\n//==============================================END COMPONENTS======================================================\n\n//=================================================FUNCTIONS========================================================\n\nfunction getValidEditArticleDataTags() {\n  let tags = state.editArticleData.tags ?? [];\n  let newFormatTags = {};\n\n  tags &&\n    tags.map((tag) => {\n      newFormatTags[tag] = \"\";\n    });\n  return newFormatTags;\n}\n\nconst initialCreateState = {\n  title: state.editArticleData.title ?? \"\",\n  articleBody: state.editArticleData.body ?? initialBodyAtCreation,\n  tags: state.editArticleData.tags ? getValidEditArticleDataTags() : {},\n  libsCalls: { comment: {}, article: {}, emojis: {}, upVotes: {} },\n  sbts: [sbtWhiteList[0]],\n};\n\nfunction mainStateUpdate(obj) {\n  State.update(obj);\n}\n\nfunction handleOpenArticle(articleToRenderData) {\n  State.update({\n    displayedTabId: tabs.SHOW_ARTICLE.id,\n    articleToRenderData,\n    editArticleData: undefined,\n  });\n}\n\nfunction handleEditArticle(articleData) {\n  State.update({\n    displayedTabId: tabs.ARTICLE_WORKSHOP.id,\n    editArticleData: articleData,\n  });\n}\n\nfunction handleFilterArticles(filter) {\n  State.update({\n    filterBy: {\n      parameterName: filter.filterBy,\n      parameterValue: filter.value,\n    },\n    displayedTabId: tabs.SHOW_ARTICLES_LIST.id,\n    editArticleData: undefined,\n  });\n}\n\nfunction handleBackButton() {\n  props.editArticleData\n    ? State.update({\n        displayedTabId: tabs.SHOW_ARTICLE.id,\n        editArticleData: undefined,\n        firstRender: false,\n        filterBy: {\n          parameterName: \"\",\n          parameterValue: undefined,\n          handleBackClicked: true,\n        },\n      })\n    : State.update({\n        displayedTabId: tabs.SHOW_ARTICLES_LIST.id,\n        articleToRenderData: {},\n        editArticleData: undefined,\n        firstRender: false,\n        filterBy: {\n          parameterName: \"\",\n          parameterValue: undefined,\n          handleBackClicked: true,\n        },\n      });\n}\n\nfunction handleGoHomeButton() {\n  State.update({\n    displayedTabId: tabs.SHOW_ARTICLES_LIST.id,\n    articleToRenderData: {},\n    filterBy: { parameterName: \"\", parameterValue: {} },\n    editArticleData: undefined,\n  });\n}\n\nfunction handlePillNavigation(navegateTo) {\n  State.update({ displayedTabId: navegateTo, editArticleData: undefined });\n}\n\nfunction callLibs(\n  src,\n  stateUpdate,\n  functionsToCallByLibrary,\n  extraProps,\n  callerWidget\n) {\n  return (\n    <Widget\n      src={src}\n      props={{\n        mainStateUpdate,\n        isTest,\n        stateUpdate,\n        functionsToCallByLibrary,\n        callLibs,\n        widgets,\n        callerWidget,\n        ...extraProps,\n        usersSBTs,\n      }}\n    />\n  );\n}\n\nfunction handleSbtSelection(selectedSbt) {\n  State.update({\n    sbts: [selectedSbt],\n  });\n}\n\nfunction handleShareButton(showShareModal, sharedElement) {\n  //showShareModal is a boolean\n  //sharedElement is and object like the example: {\n  //   type: string,\n  //   value: number||string,\n  // }\n  State.update({ showShareModal, sharedElement });\n}\n\nfunction handleShareSearch(showShareSearchModal) {\n  //showShareSearchModal is a boolean\n  State.update({ showShareSearchModal, sharingSearch: true });\n}\n\nfunction getLink() {\n  if (state.sharingSearch) {\n    return `https://near.social/${widgets.thisForum}?${isTest && \"isTest=t&\"}${\n      state.filterBy.parameterName === \"tag\"\n        ? `tagShared=${state.filterBy.parameterValue}&`\n        : \"\"\n    }topicShared=${sbts[0].replace(/\\s+/g, \"\")}`;\n  } else {\n    return `https://near.social/${widgets.thisForum}?${isTest && \"isTest=t&\"}${\n      state.sharedElement.type\n    }=${state.sharedElement.value}`;\n  }\n}\n\nfunction handleOnCommitArticle(articleToRenderData) {\n  State.update({\n    articleToRenderData,\n    displayedTabId: tabs.SHOW_ARTICLE.id,\n  });\n}\n\n//===============================================END FUNCTIONS======================================================\nreturn (\n  <>\n    {(state.showShareModal || state.showShareSearchModal) &&\n      renderShareInteraction()}\n    <Widget\n      src={widgets.header}\n      props={{\n        isTest,\n        mainStateUpdate,\n        handleGoHomeButton,\n        handlePillNavigation,\n        brand,\n        pills: navigationPills,\n        navigationButtons,\n        displayedTabId: state.displayedTabId,\n        handleFilterArticles,\n        filterParameter: state.filterBy.parameterName,\n        handleBackButton,\n        tabs,\n        sbtsNames,\n        widgets,\n      }}\n    />\n    {(state.displayedTabId == tabs.SHOW_ARTICLES_LIST.id ||\n      state.displayedTabId == tabs.SHOW_KANBAN_VIEW.id) && (\n      <div className=\"my-3 col-lg-8 col-md-8 col-sm-12\">\n        <Widget\n          src={widgets.newStyledComponents.Input.Select}\n          props={{\n            label: renderSelectorLabel(),\n            value: sbts[0],\n            onChange: handleSbtSelection,\n            options: createSbtOptions(),\n          }}\n        />\n      </div>\n    )}\n    {articlesToRender && state.displayedTabId == tabs.SHOW_ARTICLES_LIST.id && (\n      <Widget\n        src={widgets.showArticlesList}\n        props={{\n          isTest,\n          articlesToRender,\n          tabs,\n          widgets,\n          addressForArticles,\n          handleOpenArticle,\n          handleFilterArticles,\n          authorForWidget,\n          initialCreateState,\n          editArticleData: state.editArticleData,\n          handleEditArticle,\n          showCreateArticle: canLoggedUserCreateArticle,\n          sbtWhiteList,\n          sbts,\n          handleShareButton,\n          handleShareSearch,\n          canLoggedUserCreateArticles,\n          filterBy: state.filterBy,\n          callLibs,\n          baseActions,\n          handleOnCommitArticle,\n        }}\n      />\n    )}\n    {state.articleToRenderData.title &&\n      state.displayedTabId == tabs.SHOW_ARTICLE.id && (\n        <Widget\n          src={widgets.articleView}\n          props={{\n            isTest,\n            widgets,\n            handleFilterArticles,\n            articleToRenderData: state.articleToRenderData,\n            authorForWidget,\n            handleEditArticle,\n            handleShareButton,\n            callLibs,\n            baseActions,\n            kanbanColumns,\n            sharedCommentId,\n          }}\n        />\n      )}\n\n    {state.displayedTabId == tabs.SHOW_ARTICLES_LIST_BY_AUTHORS.id && (\n      <Widget\n        src={widgets.showArticlesListSortedByAuthors}\n        props={{\n          isTest,\n          finalArticles,\n          tabs,\n          widgets,\n          handleOpenArticle,\n          handleFilterArticles,\n          authorForWidget,\n        }}\n      />\n    )}\n\n    {state.displayedTabId == tabs.ARTICLE_WORKSHOP.id && (\n      <Widget\n        src={widgets.create}\n        props={{\n          isTest,\n          addressForArticles,\n          authorForWidget,\n          mainStateUpdate,\n          widgets,\n          initialBody: initialBodyAtCreation,\n          initialCreateState,\n          editArticleData: state.editArticleData,\n          handleFilterArticles,\n          handleEditArticle,\n          sbtWhiteList,\n          sbts,\n          canLoggedUserCreateArticles,\n          callLibs,\n          baseActions,\n          handleOnCommitArticle,\n        }}\n      />\n    )}\n\n    {state.displayedTabId === tabs.SHOW_KANBAN_VIEW.id && (\n      <Widget\n        src={widgets.kanbanBoard}\n        props={{\n          isTest,\n          widgets,\n          kanbanColumns,\n          handleOpenArticle,\n          handleFilterArticles,\n          handleShareButton,\n          authorForWidget,\n          finalArticles,\n          sbts,\n          kanbanRequiredTags,\n          kanbanExcludedTags,\n          baseActions,\n          callLibs,\n        }}\n      />\n    )}\n\n    <CallLibrary>\n      {libSrcArray.map((src) => {\n        return callLibs(\n          src,\n          mainStateUpdate,\n          state.functionsToCallByLibrary,\n          { baseAction: baseActions.articlesBaseAction, kanbanColumns },\n          \"NDC.Forum\"\n        );\n      })}\n    </CallLibrary>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sayalot.near/widget/NDC.Forum", "fact_widget_deployments_id": "67f20e21bf370eb2986b6992faf11936", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}