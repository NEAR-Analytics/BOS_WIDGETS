{"tx_hash": "HjPrRAsyHdCai8Jkkec5hHC7QnXnSvhij62FFkfbaMzk", "action_id_social": "CA4VaoVDSyyBvUWXgqbWvpS4QvwbFJv29XPtpZwdgna4-0-widget", "block_id": 97852066, "block_timestamp": "2023-08-01T16:34:48.661Z", "signer_id": "sayalot.near", "widget_name": "SayALot_OneArticle", "source_code": "const isDebug = props.isDebug;\n\nconst addressForArticles = isDebug ? \"test_sayALotArticle\" : \"sayALotArticle\";\nconst authorForWidget = \"sayalot.near\";\n// const authorForWidget =\n//   \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\nconst accountId = context.accountId;\n\nconst lastEditor = props.lastEditor;\nconst blockHeight =\n  props.blockHeight === \"now\" ? \"now\" : parseInt(props.blockHeight);\nconst subscribe = !!props.subscribe;\nconst raw = !!props.raw;\n\nconst notifyAccountId = accountId;\n\nState.init({ showReply: false, isMain: true, article: {} });\nconst articleBeforeParse =\n  state.saveComplete || blockHeight === \"now\"\n    ? Social.get(`${lastEditor}/${addressForArticles}/main`)\n    : Social.get(`${lastEditor}/${addressForArticles}/main`, blockHeight);\n\nif (!articleBeforeParse) {\n  return \"Loading...\";\n}\n\nconst article = JSON.parse(articleBeforeParse);\n\nif (JSON.stringify(state.article) != JSON.stringify(article)) {\n  // If some widget posts data different than an array it will be ignored\n  if (!Array.isArray(article.tags)) article.tags = [];\n  State.update({ article, note: article.body });\n}\n\nif (!state.article) {\n  return \"Loading...\";\n}\n\n// ======= CHECK WHO CAN EDIT ARTICLE\nconst writersWhiteList = props.writersWhiteList ?? [\n  \"neardigitalcollective.near\",\n  \"blaze.near\",\n  \"jlw.near\",\n  \"zarmade.near\",\n  \"kazanderdad.near\",\n  \"joep.near\",\n  \"sarahkornfeld.near\",\n  \"yuensid.near\",\n  \"shubham007.near\",\n  \"fiftycent.near\",\n  \"ozymandius.near\",\n];\n\nconst sayALotWorkers = [\n  \"silkking.near\",\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\",\n  \"blaze.near\",\n  \"ayelen.near\",\n  \"kenrou-it.near\",\n  \"sayalot.near\",\n];\n\nif (isDebug) {\n  writersWhiteList = sayALotWorkers;\n}\n\nconst canUserEditArticle = () => {\n  const canOnlyAuthorEdit = true;\n  const isAccountIdInWhiteList = writersWhiteList.some(\n    (val) => val === accountId\n  );\n  const isAccountIdEqualsAuthor = accountId === state.article.author;\n\n  if (canOnlyAuthorEdit) {\n    return isAccountIdEqualsAuthor;\n  } else {\n    return isAccountIdInWhiteList;\n  }\n};\n\n// ======= GET DATA TO ATACH COMMENTS TO THE ARTICLE =======\n// we attach all comments to the first initial article (which version = 0)\nconst articlesIndex = Social.index(addressForArticles, \"main\", {\n  order: \"desc\",\n  accountId: state.article.author,\n});\n\nif (!articlesIndex) {\n  return \"Loading...\";\n}\n\nconst resultArticles =\n  articlesIndex &&\n  articlesIndex.reduce((acc, { accountId, blockHeight }) => {\n    const postData = Social.get(\n      `${accountId}/${addressForArticles}/main`,\n      blockHeight\n    );\n    if (!postData) {\n      return acc;\n    }\n    const postDataWithBlockHeight = { ...JSON.parse(postData), blockHeight };\n    return [...acc, postDataWithBlockHeight];\n  }, []);\n\nconst firstArticle =\n  resultArticles &&\n  resultArticles.find(\n    (article) => article.articleId === state.article.articleId\n  );\n\nconst firstArticleBlockHeight = firstArticle.blockHeight;\nconst indexFirstArticle = articlesIndex.find(\n  (articleIndex) => articleIndex.blockHeight === firstArticleBlockHeight\n);\n\nconst realArticleId = indexFirstArticle.value.id; // May be undefined if user hasn't resaved yet\n// ======= Item for comment =======\nconst commentItem = {\n  type: \"social\",\n  path: `${state.article.author}/${addressForArticles}/main`,\n  // blockHeight: firstArticleBlockHeight,\n  realArticleId,\n};\nconst commentIndex = {\n  action: addressForComments,\n  key: commentItem,\n};\n\nconst tagsArray = state.tags ? Object.keys(state.tags) : state.article.tags;\n\nconst getArticleData = () => {\n  const args = {\n    articleId: state.article.articleId,\n    author: accountId,\n    lastEditor: accountId,\n    timeLastEdit: Date.now(),\n    timeCreate: Date.now(),\n    body: state.note,\n    version: Number(state.article.version) + 1,\n    navigation_id: null,\n    tags: tagsArray,\n  };\n  return args;\n};\n\nfunction getNewArticleId() {\n  let newArticle =\n    blockHeight == \"now\"\n      ? articlesIndex[0]\n      : articlesIndex.find((article) => article.blockHeight == blockHeight);\n\n  if (newArticle.value.id) {\n    return newArticle.value.id;\n  } else {\n    return `${context.accountId}-${Date.now()}`;\n  }\n}\n\nconst composeData = () => {\n  const key = isDebug ? \"test_sayALotArticle\" : \"sayALotArticle\";\n\n  let data = {\n    [key]: {\n      main: JSON.stringify(getArticleData()),\n    },\n    index: {\n      [key]: JSON.stringify({\n        key: \"main\",\n        value: {\n          type: \"md\",\n          id: `${getNewArticleId()}`,\n        },\n      }),\n    },\n  };\n\n  if (tagsArray.length) {\n    data.index.tag = JSON.stringify(\n      tagsArray.map((tag) => ({\n        key: tag,\n        value: commentItem,\n      }))\n    );\n  }\n\n  return data;\n};\n\nconst saveHandler = (e) => {\n  State.update({\n    errorId: \"\",\n    errorBody: \"\",\n  });\n  if (state.article.articleId && state.note) {\n    // TODO check it automaticle\n    const isArticleIdDublicated = false;\n\n    if (!isArticleIdDublicated) {\n      const newData = composeData();\n\n      State.update({ saving: true });\n\n      Social.set(newData, {\n        force: true,\n        onCommit: () => {\n          State.update({\n            saveComplete: true,\n            saving: false,\n            editArticle: false,\n          });\n        },\n        onCancel: () => {\n          State.update({ saving: false });\n        },\n      });\n    } else {\n      State.update({\n        errorId: errTextDublicatedId,\n      });\n    }\n  } else {\n    if (!state.article.articleId) {\n      State.update({\n        errorId: errTextNoId,\n      });\n    }\n    if (!state.note) {\n      State.update({ errorBody: errTextNoBody });\n    }\n  }\n};\n\n// ========== article parts ========== //\n\nconst isHeading = (str, headingLevel) => {\n  const headingType = \"\".padStart(headingLevel, \"#\");\n  return (\n    str.substring(0, 1 + headingLevel) === `${headingType} ` ||\n    str.substring(0, 2 + headingLevel) === ` ${headingType} ` ||\n    str.substring(0, 3 + headingLevel) === `  ${headingType} ` ||\n    str.substring(0, 4 + headingLevel) === `   ${headingType} `\n  );\n};\n\nconst articleParts = (lineArray) => {\n  const resultText = [];\n  const resultHeading = [];\n  lineArray.forEach((line) => {\n    if (isHeading(line, 1)) {\n      resultText.push([[]]);\n      resultHeading.push([[line.trim().substring(2)]]);\n    } else if (resultText.length - 1 < 0) {\n      resultText.push([[]]);\n      resultHeading.push([[\"Introduction\"]]);\n    } else if (isHeading(line, 2)) {\n      resultText[resultText.length - 1].push([]);\n      resultHeading[resultHeading.length - 1].push([line.trim().substring(3)]);\n    }\n    const maxIndexDimension1 = resultText.length - 1;\n    const maxIndexDimension2 = resultText[maxIndexDimension1].length - 1;\n    resultText[maxIndexDimension1][maxIndexDimension2].push(line);\n  });\n  return { resultText, resultHeading };\n};\n\nconst { resultText, resultHeading } = articleParts(\n  state.article.body.split(\"\\n\")\n);\n\nconst handleHeaderClick = (index1, index2) => {\n  if ((!state.viewHistory && !state.editArticle) || index2 === 0) {\n    let resp;\n    if (index2 === 0) {\n      resp = resultText[index1].map((item) => item.join(\"\\n\")).join(\"\\n\");\n    } else resp = resultText[index1][index2].join(\"\\n\");\n    State.update({\n      isMain: index2 === 0,\n      note: resp,\n    });\n  }\n};\n\nconst Button = styled.button`\n  width: 100%;\n  display: inline-block;\n  text-align: center;\n  vertical-align: middle;\n  cursor: pointer;\n  user-select: none;\n  transition: color 0.15s ease-in-out,background-color 0.15s ease-in-out,border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out;\n  \n  border: 2px solid transparent;\n  font-weight: 500;\n  padding: 0.3rem 0.5rem;\n  background-color: #010A2D;\n  border-radius: 12px;\n  color: white;\n  text-decoration: none;\n\n  &:hover {\n    color: #010A2D;\n    background-color: white;\n  }\n`;\n\n//======= Create initialTagsObject for TagsEditor widget =======\n// const initialTestArray = [\"learner\", \"crypto\", \"social\"];\nconst getTagObjectfromArray = (tagArray) => {\n  if (!tagArray) return {};\n  return tagArray.reduce((acc, value) => ({ ...acc, [value]: \"\" }), {});\n};\n\nconst areTheTextAndTagsTheSame = () => {\n  const isThereNoTextInBody = !state.note;\n  const doesTextUnchanged = article.body === state.note;\n  let doesTagsUnchanged = true;\n  if (state.tags) {\n    if (state.article.tags) {\n      doesTagsUnchanged =\n        state.tags.join().toLowerCase() ===\n        state.article.tags.join().toLowerCase();\n    } else {\n      doesTagsUnchanged = false;\n    }\n  }\n  return isThereNoTextInBody || (doesTextUnchanged && doesTagsUnchanged);\n};\n\nconst filterTagsFromNull = (tagsObj) => {\n  const entries = Object.entries(tagsObj);\n\n  const result = entries.reduce((acc, value) => {\n    if (value[1] !== null) {\n      return [...acc, value[0]];\n    } else {\n      return acc;\n    }\n  }, []);\n  return result;\n};\n\nreturn (\n  <div\n    className=\"container-fluid\"\n    style={{ backgroundColor: \"rgb(230, 230, 230)\", padding: \"0 0 1rem 0\" }}\n  >\n    {!realArticleId && (\n      <h1>\n        FYI: comments and reactions are disabled until you resave once again due\n        structure change\n      </h1>\n    )}\n    <Widget\n      src={`${authorForWidget}/widget/SayALot_MainNavigation`}\n      props={{ currentNavPill: \"articles\", isDebug }}\n    />\n    <div\n      className=\"row h-100\"\n      style={{\n        width: \"90%\",\n        minWidth: \"360px\",\n        margin: \"0 auto\",\n        backgroundColor: \"white\",\n        padding: \"2rem\",\n        borderRadius: \"20px\",\n      }}\n    >\n      <div className=\"col-12 col-md-3 border-end\">\n        <h4\n          className=\"text-center\"\n          style={{\n            cursor: \"pointer\",\n            fontSize: \"1rem\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n          }}\n          title={state.article.articleId}\n          onClick={() => {\n            State.update({\n              note: state.article.body,\n            });\n          }}\n        >\n          {state.article.articleId}\n        </h4>\n        <hr />\n        <Button\n          onClick={() => {\n            State.update({\n              editArticle: false,\n              viewHistory: !state.viewHistory,\n            });\n          }}\n        >\n          View History\n        </Button>\n        {canUserEditArticle() && !state.editArticle && (\n          <button\n            className=\"btn btn-outline-dark w-100\"\n            onClick={() => {\n              State.update({\n                viewHistory: false,\n                editArticle: true,\n                note: state.article.body,\n              });\n            }}\n          >\n            Edit Article\n          </button>\n        )}\n        <hr />\n        <div className=\"accordion accordion-flush\" id=\"accordionFlushExample\">\n          {resultHeading.map((arrItem, index1) => {\n            return (\n              <div className=\"accordion-item shadow-none \">\n                {arrItem.map((item, index2) => {\n                  if (index2 === 0) {\n                    return (\n                      <h5\n                        className=\"accordion-header shadow-none py-1\"\n                        id=\"flush-headingOne\"\n                      >\n                        <button\n                          className=\"accordion collapsed border-0 bg-white text-dark shadow-none\"\n                          type=\"button\"\n                          data-bs-toggle=\"collapse\"\n                          data-bs-target={\"#flush-collapseOne\" + index1}\n                          aria-expanded=\"true\"\n                          aria-controls={\"flush-collapseOne\" + index1}\n                          onClick={() => handleHeaderClick(index1, index2)}\n                        >\n                          {item}\n                        </button>\n                      </h5>\n                    );\n                  }\n                  return (\n                    <div\n                      id={\"flush-collapseOne\" + index1}\n                      className=\"accordion-collapse collapse\"\n                      aria-labelledby={\"flush-collapseOne\" + index1}\n                      data-bs-parent=\"#accordionFlushExample\"\n                    >\n                      <div\n                        style={{ cursor: \"pointer\" }}\n                        className=\"accordion-body py-1\"\n                        onClick={() => handleHeaderClick(index1, index2)}\n                      >\n                        {item}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"mb-3\" />\n        {/* === FOOTER === */}\n        <Widget\n          src={`neardigitalcollective.near/widget/WikiOnSocialDB_OneArticle.Footer`}\n          props={{\n            author: state.article.author,\n            lastEditor: state.article.lastEditor,\n            timeLastEdit: state.article.timeLastEdit,\n            version: state.article.version,\n          }}\n        />\n      </div>\n      <div className=\"d-md-none mb-3\" />\n      <hr className=\"d-md-none\" />\n      <div className=\"col-12 col-md-9\">\n        <div>\n          {state.editArticle && (\n            <>\n              {/* === EDIT ARTICLE === */}\n              <Widget\n                src={`${authorForWidget}/widget/SayALot_FasterArticleEditInputs`}\n                props={{\n                  firstTextareaText: state.note,\n                  stateUpdate: (obj) => State.update(obj),\n                  articleTags: state.article.tags,\n                  isDebug,\n                  isOverSaveButton: state.overSaveButton,\n                  saveHandler,\n                  isSaving: state.saving,\n                }}\n              />\n            </>\n          )}\n          {/* MARKDOWN and TAGS list when user doesn't edit article  */}\n          {!state.editArticle && (\n            <>\n              {!state.viewHistory && (\n                <div className=\"pt-2\">\n                  <Widget\n                    src={`${authorForWidget}/widget/SayALot_TagList`}\n                    props={{ tags: state.article.tags, isDebug }}\n                  />\n                </div>\n              )}\n              {!state.viewHistory && (\n                <Widget\n                  src=\"mob.near/widget/SocialMarkdown\"\n                  props={{\n                    text: article.body,\n                    onHashtag: (hashtag) => (\n                      <span\n                        key={hashtag}\n                        className=\"d-inline-flex\"\n                        style={{ fontWeight: 500 }}\n                      >\n                        <a\n                          href={\n                            isDebug\n                              ? `https://near.social/#/sayalot.near/widget/SayALot_ArticlesByTag?tag=${hashtag}&isDebug=true`\n                              : `https://near.social/#/sayalot.near/widget/SayALot_ArticlesByTag?tag=${hashtag}`\n                          }\n                        >\n                          #{hashtag}\n                        </a>\n                      </span>\n                    ),\n                  }}\n                />\n              )}\n            </>\n          )}\n          {/* === VIEW HISTORY === */}\n          {state.viewHistory && (\n            <div className=\"mt-3 ps-5\">\n              <div className=\"d-flex justify-content-between\">\n                <i\n                  className=\"bi bi-arrow-left\"\n                  style={{ cursor: \"pointer\", fontSize: \"1.5rem\" }}\n                  onClick={() => {\n                    State.update({\n                      viewHistory: false,\n                    });\n                  }}\n                ></i>\n                <button\n                  className=\"btn btn-outline-danger\"\n                  onClick={() => {\n                    State.update({\n                      viewHistory: false,\n                    });\n                  }}\n                >\n                  Close\n                </button>\n              </div>\n              <Widget\n                src={`${authorForWidget}/widget/SayALot_History.History`}\n                props={{\n                  articleId: state.article.articleId,\n                  resultArticles,\n                  isDebug,\n                }}\n              />\n            </div>\n          )}\n          {/* === CREATE COMMENT BUTTON === */}\n          {realArticleId && ( // Remove !realArticleId once all articles have it\n            <>\n              <span className=\"d-inline-flex align-items-center\">\n                {blockHeight !== \"now\" && (\n                  <div className=\"mt-1 d-flex justify-content-between\">\n                    <Widget\n                      src=\"mob.near/widget/CommentButton\"\n                      props={{\n                        onClick: () =>\n                          State.update({ showReply: !state.showReply }),\n                      }}\n                    />\n                  </div>\n                )}\n                {/* === LIKE === */}\n                <Widget\n                  src={`${authorForWidget}/widget/SayALot_Reactions`}\n                  props={{\n                    // notifyAccountId,\n                    item: commentItem,\n                    realArticleId,\n                    isDebug,\n                  }}\n                />\n              </span>\n              {/* === COMPOSE COMMENT === */}\n              <div className=\"mt-3 ps-5\">\n                {state.showReply && (\n                  <div className=\"mb-2\">\n                    <Widget\n                      src={`${authorForWidget}/widget/SayALot_Comment.Compose`}\n                      props={{\n                        notifyAccountId,\n                        item: commentItem,\n                        onComment: () => State.update({ showReply: false }),\n                        realArticleId,\n                        isDebug,\n                      }}\n                    />\n                  </div>\n                )}\n                {/* === SHOW COMMENT === */}\n                <Widget\n                  src={`${authorForWidget}/widget/SayALot_Comment.Feed`}\n                  props={{\n                    item: commentItem,\n                    highlightComment: props.highlightComment,\n                    limit: props.commentsLimit,\n                    subscribe,\n                    raw,\n                    realArticleId,\n                    index: commentIndex,\n                    isDebug,\n                  }}\n                />\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sayalot.near/widget/SayALot_OneArticle", "fact_widget_deployments_id": "a0c61e245ef4c7b6a1e2b2d47b0dafc0", "inserted_timestamp": "2023-08-01T18:33:30.484Z", "modified_timestamp": "2023-08-01T18:33:30.484Z", "__row_index": 8}