{"tx_hash": "EzJTvUPEPXHQDHpRoAnnfHdV55DFfn2eTGuoWA4i346z", "action_id_social": "FksvxwXBKNfr4W44nHJ2WfGnDLmS4PATs1J5f4dQrxTQ-0-widget", "block_id": 97618540, "block_timestamp": "2023-07-29T15:59:40.677Z", "signer_id": "sayalot.near", "widget_name": "SayALot_OneArticle", "source_code": "const isDebug = props.isDebug;\r\n\r\nconst addressForArticles = isDebug ? \"test_sayALotArticle\" : \"sayALotArticle\";\r\nconst authorForWidget = \"sayalot.near\";\r\n// const authorForWidget =\r\n//   \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\r\nconst accountId = context.accountId;\r\n\r\nconst lastEditor = props.lastEditor;\r\nconst blockHeight =\r\n  props.blockHeight === \"now\" ? \"now\" : parseInt(props.blockHeight);\r\nconst subscribe = !!props.subscribe;\r\nconst raw = !!props.raw;\r\n\r\nconst notifyAccountId = accountId;\r\n\r\nState.init({ showReply: false, isMain: true, article: {} });\r\nconst articleBeforeParse =\r\n  state.saveComplete || blockHeight === \"now\"\r\n    ? Social.get(`${lastEditor}/${addressForArticles}/main`)\r\n    : Social.get(`${lastEditor}/${addressForArticles}/main`, blockHeight);\r\n\r\nif (!articleBeforeParse) {\r\n  return \"Loading...\";\r\n}\r\n\r\nconst article = JSON.parse(articleBeforeParse);\r\n\r\nif (JSON.stringify(state.article) != JSON.stringify(article)) {\r\n  // If some widget posts data different than an array it will be ignored\r\n  if (!Array.isArray(article.tags)) article.tags = [];\r\n  State.update({ article, note: article.body });\r\n}\r\n\r\nif (!state.article) {\r\n  return \"Loading...\";\r\n}\r\n\r\n// ======= CHECK WHO CAN EDIT ARTICLE\r\nconst writersWhiteList = props.writersWhiteList ?? [\r\n  \"neardigitalcollective.near\",\r\n  \"blaze.near\",\r\n  \"jlw.near\",\r\n  \"zarmade.near\",\r\n  \"kazanderdad.near\",\r\n  \"joep.near\",\r\n  \"sarahkornfeld.near\",\r\n  \"yuensid.near\",\r\n  \"shubham007.near\",\r\n  \"fiftycent.near\",\r\n  \"ozymandius.near\",\r\n];\r\n\r\nconst sayALotWorkers = [\r\n  \"silkking.near\",\r\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\",\r\n  \"blaze.near\",\r\n  \"ayelen.near\",\r\n  \"kenrou-it.near\",\r\n  \"sayalot.near\",\r\n];\r\n\r\nif (isDebug) {\r\n  writersWhiteList = sayALotWorkers;\r\n}\r\n\r\nconst canUserEditArticle = () => {\r\n  const canOnlyAuthorEdit = true;\r\n  const isAccountIdInWhiteList = writersWhiteList.some(\r\n    (val) => val === accountId\r\n  );\r\n  const isAccountIdEqualsAuthor = accountId === state.article.author;\r\n\r\n  if (canOnlyAuthorEdit) {\r\n    return isAccountIdEqualsAuthor;\r\n  } else {\r\n    return isAccountIdInWhiteList;\r\n  }\r\n};\r\n\r\n// ======= GET DATA TO ATACH COMMENTS TO THE ARTICLE =======\r\n// we attach all comments to the first initial article (which version = 0)\r\nconst articlesIndex = Social.index(addressForArticles, \"main\", {\r\n  order: \"desc\",\r\n  accountId: state.article.author,\r\n});\r\n\r\nif (!articlesIndex) {\r\n  return \"Loading...\";\r\n}\r\n\r\nconst resultArticles =\r\n  articlesIndex &&\r\n  articlesIndex.reduce((acc, { accountId, blockHeight }) => {\r\n    const postData = Social.get(\r\n      `${accountId}/${addressForArticles}/main`,\r\n      blockHeight\r\n    );\r\n    if (!postData) {\r\n      return acc;\r\n    }\r\n    const postDataWithBlockHeight = { ...JSON.parse(postData), blockHeight };\r\n    return [...acc, postDataWithBlockHeight];\r\n  }, []);\r\n\r\nconst firstArticle =\r\n  resultArticles &&\r\n  resultArticles.find(\r\n    (article) => article.articleId === state.article.articleId\r\n  );\r\n\r\nconst firstArticleBlockHeight = firstArticle.blockHeight;\r\nconst indexFirstArticle = articlesIndex.find(\r\n  (articleIndex) => articleIndex.blockHeight === firstArticleBlockHeight\r\n);\r\n\r\nconst realArticleId = indexFirstArticle.value.id; // May be undefined if user hasn't resaved yet\r\n// ======= Item for comment =======\r\nconst item = {\r\n  type: \"social\",\r\n  path: `${state.article.author}/${addressForArticles}/main`,\r\n  blockHeight: firstArticleBlockHeight,\r\n};\r\n\r\nconst tagsArray = state.tags ? Object.keys(state.tags) : state.article.tags;\r\n\r\nconst getArticleData = () => {\r\n  const args = {\r\n    articleId: state.article.articleId,\r\n    author: accountId,\r\n    lastEditor: accountId,\r\n    timeLastEdit: Date.now(),\r\n    timeCreate: Date.now(),\r\n    body: state.note,\r\n    version: Number(state.article.version) + 1,\r\n    navigation_id: null,\r\n    tags: tagsArray,\r\n  };\r\n  return args;\r\n};\r\n\r\nfunction getNewArticleId() {\r\n  let newArticle =\r\n    blockHeight == \"now\"\r\n      ? articlesIndex[0]\r\n      : articlesIndex.find((article) => article.blockHeight == blockHeight);\r\n\r\n  if (newArticle.value.id) {\r\n    return newArticle.value.id;\r\n  } else {\r\n    return `${context.accountId}-${Date.now()}`;\r\n  }\r\n}\r\n\r\nconst composeData = () => {\r\n  const key = isDebug ? \"test_sayALotArticle\" : \"sayALotArticle\";\r\n\r\n  let data = {\r\n    [key]: {\r\n      main: JSON.stringify(getArticleData()),\r\n    },\r\n    index: {\r\n      [key]: JSON.stringify({\r\n        key: \"main\",\r\n        value: {\r\n          type: \"md\",\r\n          id: `${getNewArticleId()}`,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n\r\n  if (tagsArray.length) {\r\n    data.index.tag = JSON.stringify(\r\n      tagsArray.map((tag) => ({\r\n        key: tag,\r\n        value: item,\r\n      }))\r\n    );\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nconst saveHandler = (e) => {\r\n  State.update({\r\n    errorId: \"\",\r\n    errorBody: \"\",\r\n  });\r\n  if (state.article.articleId && state.note) {\r\n    // TODO check it automaticle\r\n    const isArticleIdDublicated = false;\r\n\r\n    if (!isArticleIdDublicated) {\r\n      const newData = composeData();\r\n\r\n      State.update({ saving: true });\r\n\r\n      Social.set(newData, {\r\n        force: true,\r\n        onCommit: () => {\r\n          State.update({\r\n            saveComplete: true,\r\n            saving: false,\r\n            editArticle: false,\r\n          });\r\n        },\r\n        onCancel: () => {\r\n          State.update({ saving: false });\r\n        },\r\n      });\r\n    } else {\r\n      State.update({\r\n        errorId: errTextDublicatedId,\r\n      });\r\n    }\r\n  } else {\r\n    if (!state.article.articleId) {\r\n      State.update({\r\n        errorId: errTextNoId,\r\n      });\r\n    }\r\n    if (!state.note) {\r\n      State.update({ errorBody: errTextNoBody });\r\n    }\r\n  }\r\n};\r\n\r\n// ========== article parts ========== //\r\n\r\nconst isHeading = (str, headingLevel) => {\r\n  const headingType = \"\".padStart(headingLevel, \"#\");\r\n  return (\r\n    str.substring(0, 1 + headingLevel) === `${headingType} ` ||\r\n    str.substring(0, 2 + headingLevel) === ` ${headingType} ` ||\r\n    str.substring(0, 3 + headingLevel) === `  ${headingType} ` ||\r\n    str.substring(0, 4 + headingLevel) === `   ${headingType} `\r\n  );\r\n};\r\n\r\nconst articleParts = (lineArray) => {\r\n  const resultText = [];\r\n  const resultHeading = [];\r\n  lineArray.forEach((line) => {\r\n    if (isHeading(line, 1)) {\r\n      resultText.push([[]]);\r\n      resultHeading.push([[line.trim().substring(2)]]);\r\n    } else if (resultText.length - 1 < 0) {\r\n      resultText.push([[]]);\r\n      resultHeading.push([[\"Introduction\"]]);\r\n    } else if (isHeading(line, 2)) {\r\n      resultText[resultText.length - 1].push([]);\r\n      resultHeading[resultHeading.length - 1].push([line.trim().substring(3)]);\r\n    }\r\n    const maxIndexDimension1 = resultText.length - 1;\r\n    const maxIndexDimension2 = resultText[maxIndexDimension1].length - 1;\r\n    resultText[maxIndexDimension1][maxIndexDimension2].push(line);\r\n  });\r\n  return { resultText, resultHeading };\r\n};\r\n\r\nconst { resultText, resultHeading } = articleParts(\r\n  state.article.body.split(\"\\n\")\r\n);\r\n\r\nconst handleHeaderClick = (index1, index2) => {\r\n  if ((!state.viewHistory && !state.editArticle) || index2 === 0) {\r\n    let resp;\r\n    if (index2 === 0) {\r\n      resp = resultText[index1].map((item) => item.join(\"\\n\")).join(\"\\n\");\r\n    } else resp = resultText[index1][index2].join(\"\\n\");\r\n    State.update({\r\n      isMain: index2 === 0,\r\n      note: resp,\r\n    });\r\n  }\r\n};\r\n\r\nconst Button = styled.button`\r\n  width: 100%;\r\n  display: inline-block;\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  cursor: pointer;\r\n  user-select: none;\r\n  transition: color 0.15s ease-in-out,background-color 0.15s ease-in-out,border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out;\r\n  \r\n  border: 2px solid transparent;\r\n  font-weight: 500;\r\n  padding: 0.3rem 0.5rem;\r\n  background-color: #010A2D;\r\n  border-radius: 12px;\r\n  color: white;\r\n  text-decoration: none;\r\n\r\n  &:hover {\r\n    color: #010A2D;\r\n    background-color: white;\r\n  }\r\n`;\r\n\r\n//======= Create initialTagsObject for TagsEditor widget =======\r\n// const initialTestArray = [\"learner\", \"crypto\", \"social\"];\r\nconst getTagObjectfromArray = (tagArray) => {\r\n  if (!tagArray) return {};\r\n  return tagArray.reduce((acc, value) => ({ ...acc, [value]: \"\" }), {});\r\n};\r\n\r\nconst areTheTextAndTagsTheSame = () => {\r\n  const isThereNoTextInBody = !state.note;\r\n  const doesTextUnchanged = article.body === state.note;\r\n  let doesTagsUnchanged = true;\r\n  if (state.tags) {\r\n    if (state.article.tags) {\r\n      doesTagsUnchanged =\r\n        state.tags.join().toLowerCase() ===\r\n        state.article.tags.join().toLowerCase();\r\n    } else {\r\n      doesTagsUnchanged = false;\r\n    }\r\n  }\r\n  return isThereNoTextInBody || (doesTextUnchanged && doesTagsUnchanged);\r\n};\r\n\r\nconst filterTagsFromNull = (tagsObj) => {\r\n  const entries = Object.entries(tagsObj);\r\n\r\n  const result = entries.reduce((acc, value) => {\r\n    if (value[1] !== null) {\r\n      return [...acc, value[0]];\r\n    } else {\r\n      return acc;\r\n    }\r\n  }, []);\r\n  return result;\r\n};\r\n\r\nreturn (\r\n  <div\r\n    className=\"container-fluid\"\r\n    style={{ backgroundColor: \"rgb(230, 230, 230)\", padding: \"0 0 1rem 0\" }}\r\n  >\r\n    {!realArticleId && (\r\n      <h1>\r\n        FYI: comments and reactions are disabled until you resave once again due\r\n        structure change\r\n      </h1>\r\n    )}\r\n    <Widget\r\n      src={`${authorForWidget}/widget/SayALot_MainNavigation`}\r\n      props={{ currentNavPill: \"articles\", isDebug }}\r\n    />\r\n    <div\r\n      className=\"row h-100\"\r\n      style={{\r\n        width: \"90%\",\r\n        minWidth: \"360px\",\r\n        margin: \"0 auto\",\r\n        backgroundColor: \"white\",\r\n        padding: \"2rem\",\r\n        borderRadius: \"20px\",\r\n      }}\r\n    >\r\n      <div className=\"col-12 col-md-3 border-end\">\r\n        <h4\r\n          className=\"text-center\"\r\n          style={{\r\n            cursor: \"pointer\",\r\n            fontSize: \"1rem\",\r\n            overflow: \"hidden\",\r\n            textOverflow: \"ellipsis\",\r\n          }}\r\n          title={state.article.articleId}\r\n          onClick={() => {\r\n            State.update({\r\n              note: state.article.body,\r\n            });\r\n          }}\r\n        >\r\n          {state.article.articleId}\r\n        </h4>\r\n        <hr />\r\n        <Button\r\n          onClick={() => {\r\n            State.update({\r\n              editArticle: false,\r\n              viewHistory: !state.viewHistory,\r\n            });\r\n          }}\r\n        >\r\n          View History\r\n        </Button>\r\n        {canUserEditArticle() && !state.editArticle && (\r\n          <button\r\n            className=\"btn btn-outline-dark w-100\"\r\n            onClick={() => {\r\n              State.update({\r\n                viewHistory: false,\r\n                editArticle: true,\r\n                note: state.article.body,\r\n              });\r\n            }}\r\n          >\r\n            Edit Article\r\n          </button>\r\n        )}\r\n        <hr />\r\n        <div className=\"accordion accordion-flush\" id=\"accordionFlushExample\">\r\n          {resultHeading.map((arrItem, index1) => {\r\n            return (\r\n              <div className=\"accordion-item shadow-none \">\r\n                {arrItem.map((item, index2) => {\r\n                  if (index2 === 0) {\r\n                    return (\r\n                      <h5\r\n                        className=\"accordion-header shadow-none py-1\"\r\n                        id=\"flush-headingOne\"\r\n                      >\r\n                        <button\r\n                          className=\"accordion collapsed border-0 bg-white text-dark shadow-none\"\r\n                          type=\"button\"\r\n                          data-bs-toggle=\"collapse\"\r\n                          data-bs-target={\"#flush-collapseOne\" + index1}\r\n                          aria-expanded=\"true\"\r\n                          aria-controls={\"flush-collapseOne\" + index1}\r\n                          onClick={() => handleHeaderClick(index1, index2)}\r\n                        >\r\n                          {item}\r\n                        </button>\r\n                      </h5>\r\n                    );\r\n                  }\r\n                  return (\r\n                    <div\r\n                      id={\"flush-collapseOne\" + index1}\r\n                      className=\"accordion-collapse collapse\"\r\n                      aria-labelledby={\"flush-collapseOne\" + index1}\r\n                      data-bs-parent=\"#accordionFlushExample\"\r\n                    >\r\n                      <div\r\n                        style={{ cursor: \"pointer\" }}\r\n                        className=\"accordion-body py-1\"\r\n                        onClick={() => handleHeaderClick(index1, index2)}\r\n                      >\r\n                        {item}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"mb-3\" />\r\n        {/* === FOOTER === */}\r\n        <Widget\r\n          src={`neardigitalcollective.near/widget/WikiOnSocialDB_OneArticle.Footer`}\r\n          props={{\r\n            author: state.article.author,\r\n            lastEditor: state.article.lastEditor,\r\n            timeLastEdit: state.article.timeLastEdit,\r\n            version: state.article.version,\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"d-md-none mb-3\" />\r\n      <hr className=\"d-md-none\" />\r\n      <div className=\"col-12 col-md-9\">\r\n        <div>\r\n          {state.editArticle && (\r\n            <>\r\n              {/* === EDIT ARTICLE === */}\r\n              <Widget\r\n                src={`${authorForWidget}/widget/SayALot_FasterArticleEditInputs`}\r\n                props={{\r\n                  firstTextareaText: state.note,\r\n                  stateUpdate: (obj) => State.update(obj),\r\n                  articleTags: state.article.tags,\r\n                  isDebug,\r\n                  isOverSaveButton: state.overSaveButton,\r\n                  saveHandler,\r\n                  isSaving: state.saving,\r\n                }}\r\n              />\r\n            </>\r\n          )}\r\n          {/* MARKDOWN and TAGS list when user doesn't edit article  */}\r\n          {!state.editArticle && (\r\n            <>\r\n              {!state.viewHistory && (\r\n                <div className=\"pt-2\">\r\n                  <Widget\r\n                    src={`${authorForWidget}/widget/SayALot_TagList`}\r\n                    props={{ tags: state.article.tags, isDebug }}\r\n                  />\r\n                </div>\r\n              )}\r\n              {!state.viewHistory && (\r\n                <Widget\r\n                  src=\"mob.near/widget/SocialMarkdown\"\r\n                  props={{\r\n                    text: article.body,\r\n                    onHashtag: (hashtag) => (\r\n                      <span\r\n                        key={hashtag}\r\n                        className=\"d-inline-flex\"\r\n                        style={{ fontWeight: 500 }}\r\n                      >\r\n                        <a\r\n                          href={\r\n                            isDebug\r\n                              ? `https://near.social/#/sayalot.near/widget/SayALot_ArticlesByTag?tag=${hashtag}&isDebug=true`\r\n                              : `https://near.social/#/sayalot.near/widget/SayALot_ArticlesByTag?tag=${hashtag}`\r\n                          }\r\n                        >\r\n                          #{hashtag}\r\n                        </a>\r\n                      </span>\r\n                    ),\r\n                  }}\r\n                />\r\n              )}\r\n            </>\r\n          )}\r\n          {/* === VIEW HISTORY === */}\r\n          {state.viewHistory && (\r\n            <div className=\"mt-3 ps-5\">\r\n              <div className=\"d-flex justify-content-between\">\r\n                <i\r\n                  className=\"bi bi-arrow-left\"\r\n                  style={{ cursor: \"pointer\", fontSize: \"1.5rem\" }}\r\n                  onClick={() => {\r\n                    State.update({\r\n                      viewHistory: false,\r\n                    });\r\n                  }}\r\n                ></i>\r\n                <button\r\n                  className=\"btn btn-outline-danger\"\r\n                  onClick={() => {\r\n                    State.update({\r\n                      viewHistory: false,\r\n                    });\r\n                  }}\r\n                >\r\n                  Close\r\n                </button>\r\n              </div>\r\n              <Widget\r\n                src={`${authorForWidget}/widget/SayALot_History.History`}\r\n                props={{\r\n                  articleId: state.article.articleId,\r\n                  resultArticles,\r\n                  isDebug,\r\n                }}\r\n              />\r\n            </div>\r\n          )}\r\n          {/* === CREATE COMMENT BUTTON === */}\r\n          {realArticleId && ( // Remove !realArticleId once all articles have it\r\n            <>\r\n              <span className=\"d-inline-flex align-items-center\">\r\n                {blockHeight !== \"now\" && (\r\n                  <div className=\"mt-1 d-flex justify-content-between\">\r\n                    <Widget\r\n                      src=\"mob.near/widget/CommentButton\"\r\n                      props={{\r\n                        onClick: () =>\r\n                          State.update({ showReply: !state.showReply }),\r\n                      }}\r\n                    />\r\n                  </div>\r\n                )}\r\n                {/* === LIKE === */}\r\n                <Widget\r\n                  src={`${authorForWidget}/widget/SayALot_Reactions`}\r\n                  props={{\r\n                    // notifyAccountId,\r\n                    item,\r\n                    realArticleId,\r\n                    isDebug,\r\n                  }}\r\n                />\r\n              </span>\r\n              {/* === COMPOSE COMMENT === */}\r\n              <div className=\"mt-3 ps-5\">\r\n                {state.showReply && (\r\n                  <div className=\"mb-2\">\r\n                    <Widget\r\n                      src={`${authorForWidget}/widget/SayALot_Comment.Compose`}\r\n                      props={{\r\n                        notifyAccountId,\r\n                        item,\r\n                        onComment: () => State.update({ showReply: false }),\r\n                        realArticleId,\r\n                        isDebug,\r\n                      }}\r\n                    />\r\n                  </div>\r\n                )}\r\n                {/* === SHOW COMMENT === */}\r\n                <Widget\r\n                  src={`${authorForWidget}/widget/SayALot_Comment.Feed`}\r\n                  props={{\r\n                    item,\r\n                    highlightComment: props.highlightComment,\r\n                    limit: props.commentsLimit,\r\n                    subscribe,\r\n                    raw,\r\n                    realArticleId,\r\n                    isDebug,\r\n                  }}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sayalot.near/widget/SayALot_OneArticle", "fact_widget_deployments_id": "da537b3b6271dff34e43b2496258abc4", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 6}