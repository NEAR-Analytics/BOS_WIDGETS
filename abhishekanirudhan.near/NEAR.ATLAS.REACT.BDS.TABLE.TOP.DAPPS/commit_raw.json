{"tx_hash": "345Kv3AdtuGErQ3fgKRXtcGgvacwV5oHUDCvScH9r16Z", "action_id_social": "AtZndGbAz7Wb6KrFqa9oWimozTBzae7jbP8fupBcQq53-0-widget", "block_id": 100498733, "block_timestamp": "2023-09-06T05:56:44.838Z", "signer_id": "abhishekanirudhan.near", "widget_name": "NEAR.ATLAS.REACT.BDS.TABLE.TOP.DAPPS", "source_code": "// Monthly Active Accounts Example\nlet rawData = fetch(\n  \"https://api.flipsidecrypto.com/api/v2/queries/fc7361ab-5b57-445d-b4b9-e5bccd8a5699/data/latest\",\n  {\n    subscribe: true,\n    method: \"GET\",\n    headers: {\n      Accept: \"*/*\",\n    },\n  }\n);\n\nState.init({\n  setSortConfig: { key: \"\", direction: \"asc\" },\n  currentPage: 1,\n});\n\nfunction getNodesForCurrentPage(allNodes) {\n  const startIndex = (state.currentPage - 1) * 20;\n  const endIndex = startIndex + 20;\n  return allNodes.slice(startIndex, endIndex);\n}\n\nfunction nextPage() {\n  if (state.currentPage < Math.ceil(sortedNodes.length / 10)) {\n    State.update({ currentPage: state.currentPage + 1 });\n  }\n}\n\nfunction previousPage() {\n  if (state.currentPage > 1) {\n    State.update({ currentPage: state.currentPage - 1 });\n  }\n}\n\nlet Style = styled.div`\n  .table-header {\n    background-color: #000000; /* Set this to the desired dark color for the header */\n    color: #ffffff;\n    text-align: center;\n    font-weight: 600;\n  }\n`;\n\nlet nodes = rawData.body || [];\n\n//const sub_widget_map = {\n//  \"Play Ember\": \"https://nearatlas.com/#/y3k.near/widget/WAU_PlayEmber\",\n//};\n\nfunction formatPercentNew(text) {\n  let number = parseFloat(text);\n  return <span className=\"text-white\">{number}%</span>;\n}\n\nfunction formatNumber(num) {\n  return (\n    <span className=\"text-white\">\n      {num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}\n    </span>\n  );\n}\n\nfunction formatNumberDecimal(text) {\n  let number = parseInt(text);\n  return (\n    <span className=\"text-white\">\n      {number.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}\n    </span>\n  );\n}\n\nfunction formatCell(text) {\n  return (\n    <a\n      href={\n        \"https://nearatlas.com/#/abhishekanirudhan.near/widget/NEART.ATLAS.BDS_DETAILED_PROJECT_DASHBOARD?project_name=\" +\n        text\n      }\n      className=\"text-warning text-wrap \"\n    >\n      {text}\n    </a>\n  );\n}\n\nfunction formatText(text) {\n  let number = parseFloat(text);\n  if (number < 0) {\n    return <span className=\"text-danger\">{number}%</span>;\n  } else if (number > 0) {\n    return <span className=\"text-success\">{number}%</span>;\n  } else {\n    return <span className=\"text-warning\">{number}%</span>;\n  }\n}\n\nconst data = {\n  nodes: nodes,\n};\n\nconst COLUMNS = [\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap\">\n        Project\n      </p>\n    ),\n    renderCell: (item) => formatCell(item[\"Contract Address\"]),\n    sort: { sortKey: \"ContractAddress\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        Past 30 Days\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"Past 30 Days\"]),\n    sort: { sortKey: \"Past 30 Days\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        Last Month\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"30-60 Days Ago\"]),\n    sort: { sortKey: \"30-60 Days Ago\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        M/M\n      </p>\n    ),\n    renderCell: (item) => formatText(item[\"M/M\"]),\n    sort: { sortKey: \"M/M\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        New MAAs\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"New MAAs\"]),\n    sort: { sortKey: \"New MAAs\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        M2 Retention\n      </p>\n    ),\n    renderCell: (item) => formatPercentNew(item[\"M2 Retention\"]),\n    sort: { sortKey: \"M2 Retention\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        Average DAU\n      </p>\n    ),\n    renderCell: (item) => formatNumberDecimal(item[\"Daily Average\"]),\n    sort: { sortKey: \"Daily Average\" },\n  },\n\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        Stickiness\n      </p>\n    ),\n    renderCell: (item) => formatPercentNew(item[\"DAU / MAU\"]),\n    sort: { sortKey: \"DAU / MAU\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        Transactions (30d)\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"Txns 30 Days\"]),\n    sort: { sortKey: \"Txns 30 Days\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        Avg Tx per MAU\n      </p>\n    ),\n    renderCell: (item) => formatNumberDecimal(item[\"Avg Tx per MAU\"]),\n    sort: { sortKey: \"Avg Tx per MAU\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        Total Transactions\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"Total Txns\"]),\n    sort: { sortKey: \"Total Txns\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        Total Fee Generated\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"Total Fee Generated\"]),\n    sort: { sortKey: \"Total Fee Generated\" },\n  },\n];\n\nfunction sort_update(sortKey, direction) {\n  // Update the sort state\n  State.update({\n    setSortConfig: { key: sortKey, direction },\n  });\n}\nfunction getSortedNodes() {\n  // Get the current sort configuration from the state\n  const sortConfig = state.setSortConfig;\n\n  // Check if there's a sort key and direction\n  if (sortConfig && sortConfig.key && sortConfig.direction) {\n    const sortedNodes = [...(nodes || [])];\n\n    sortedNodes.sort((a, b) => {\n      // Check if the data type is string\n      if (typeof a[sortConfig.key] === \"string\") {\n        return sortConfig.direction === \"asc\"\n          ? a[sortConfig.key].localeCompare(b[sortConfig.key])\n          : b[sortConfig.key].localeCompare(a[sortConfig.key]);\n      } else {\n        // For other data types (numbers, dates, etc.)\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === \"asc\" ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === \"asc\" ? 1 : -1;\n        }\n      }\n      return 0; // If values are equal\n    });\n\n    return sortedNodes;\n  }\n\n  // If no sort configuration, return original nodes\n  return nodes;\n}\n\n// Function to get the top 100 sorted nodes based on TRANSFERS_3D\nfunction getTop100SortedNodes() {\n  // First, ensure nodes is defined and is an array\n  if (!nodes || !Array.isArray(nodes)) {\n    return [];\n  }\n\n  // Sort based on TRANSFERS_3D in descending order\n  const sortedNodes = [...nodes].sort((a, b) => {\n    return b[\"TRANSFERS_3D\"] - a[\"TRANSFERS_3D\"];\n  });\n\n  // Return top 100 items after sorting\n  return sortedNodes.slice(0, 100);\n}\nconst sortedNodes = getSortedNodes();\nconst nodesForRendering = getNodesForCurrentPage(sortedNodes);\n\nreturn (\n  <div className=\"bg-dark rounded-lg mb-12 overflow-hidden w-full\">\n    {data !== null ? (\n      <div\n        style={{ \"min-width\": \"780px\" }}\n        className=\"bg-dark w-full overflow-x-auto overflow-y-auto\"\n      >\n        <table className=\"table-auto w-full overflow-scroll\">\n          <thead className=\"bg-gray-700\">\n            <tr>\n              {COLUMNS.map((column) => (\n                <th\n                  className=\"text-white text-center font-semibold p-2 border-b border-gray-300 cursor-pointer\"\n                  onClick={() => {\n                    const direction =\n                      state.setSortConfig.direction === \"asc\" ? \"desc\" : \"asc\";\n                    sort_update(column.sort.sortKey, direction);\n                  }}\n                >\n                  {column.label}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {nodesForRendering.map((row, rowIndex) => (\n              <tr\n                className={rowIndex % 2 === 0 ? \"bg-gray-800\" : \"bg-gray-900\"}\n              >\n                {COLUMNS.map((column) => (\n                  <td\n                    className={`text-white text-center p-2 ${\n                      column.sort.sortKey === \"Project Name\" ? \"max-w-xs\" : \"\"\n                    }`}\n                  >\n                    {column.renderCell(row)}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <div className=\"px-5 py-5 bg-gray-800 border-t flex flex-col xs:flex-row items-center xs:justify-between\">\n          <span className=\"text-xs xs:text-sm text-white\">\n            Showing {(state.currentPage - 1) * 10 + 1} to\n            {Math.min(state.currentPage * 10, sortedNodes.length)} of{\" \"}\n            {sortedNodes.length} Entries\n          </span>\n          <div className=\"inline-flex mt-2 xs:mt-0\">\n            <button\n              onClick={previousPage}\n              className=\"text-sm bg-gray-700 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-l\"\n            >\n              Prev\n            </button>\n            <button\n              onClick={nextPage}\n              className=\"text-sm bg-gray-700 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-r\"\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      </div>\n    ) : (\n      <div className=\"text-white text-center p-4\">Loading ...</div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/abhishekanirudhan.near/widget/NEAR.ATLAS.REACT.BDS.TABLE.TOP.DAPPS", "fact_widget_deployments_id": "39b8be1eb84ace1a43b0cc6c988164c0", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}