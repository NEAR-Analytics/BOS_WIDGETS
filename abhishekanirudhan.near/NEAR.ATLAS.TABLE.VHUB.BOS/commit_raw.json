{"tx_hash": "2BgUmCNJMGwfakDSwZ1brz67ARt3mRrRHgiRtggRNyKm", "action_id_social": "7KdS3VLYzSQYTQxPJccR7kKW1dHwkz5pxuf1CgxyRZSa-0-widget", "block_id": 98428516, "block_timestamp": "2023-08-09T14:54:49.315Z", "signer_id": "abhishekanirudhan.near", "widget_name": "NEAR.ATLAS.TABLE.VHUB.BOS", "source_code": "// Monthly Active Accounts Example\nlet rawData = fetch(\n  \"https://api.flipsidecrypto.com/api/v2/queries/81c96beb-74ec-4886-a15a-050836ca21b8/data/latest\",\n  {\n    subscribe: true,\n    method: \"GET\",\n    headers: {\n      Accept: \"*/*\",\n    },\n  }\n);\n\nlet Style = styled.div`\n\n          `;\n\nlet nodes = rawData.body || [];\n\nfunction formatPercentNew(text) {\n  let number = parseFloat(text);\n  return <span className=\"text-white\">{number}%</span>;\n}\n\nfunction formatNumber(num) {\n  return (\n    <span className=\"text-white\">\n      {num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}\n    </span>\n  );\n}\n\nfunction formatNumberDecimal(text) {\n  let number = parseInt(text);\n  return (\n    <span className=\"text-white\">\n      {number.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}\n    </span>\n  );\n}\n\nfunction formatCell(text) {\n  return (\n    <a\n      href={\n        \"https://nearatlas.com/#/abhishekanirudhan.near/widget/NEART.ATLAS.BDS_DETAILED_PROJECT_DASHBOARD?project_name=\" +\n        text\n      }\n      className=\"text-warning text-wrap \"\n    >\n      {text}\n    </a>\n  );\n}\n\nfunction formatText(text) {\n  let number = parseFloat(text);\n  if (number < 0) {\n    return <span className=\"text-danger\">{number}%</span>;\n  } else if (number > 0) {\n    return <span className=\"text-success\">{number}%</span>;\n  } else {\n    return <span className=\"text-warning\">{number}%</span>;\n  }\n}\n\nconst data = {\n  nodes: nodes,\n};\n\nconst COLUMNS = [\n  {\n    label: <p className=\"text-center text-white text-wrap\">Developer</p>,\n    renderCell: (item) => formatCell(item[\"Developer Account\"]),\n    sort: { sortKey: \"Developer Account\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-wrap \">Widgets Deployed</p>\n    ),\n    renderCell: (item) => formatNumber(item[\"Widgets\"]),\n    sort: { sortKey: \"Widgets\" },\n  },\n  {\n    label: <p className=\"text-center text-white text-wrap \">Total Commits</p>,\n    renderCell: (item) => formatNumber(item[\"Commits\"]),\n    sort: { sortKey: \"Commits\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-wrap \">\n        Widgets - Past 30 Days\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"Widgets - Past 30d\"]),\n    sort: { sortKey: \"Widgets - Past 30d\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-wrap \">\n        Commits - Past 30 Days\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"Commits - Past 30d\"]),\n    sort: { sortKey: \"Commits - Past 30d\" },\n  },\n];\nconst sortFns = {\n  ContractAddress: (array) =>\n    array.sort((a, b) =>\n      a[\"Developer Account\"].localeCompare(b[\"Developer Account\"])\n    ),\n  Widgets: (array) => array.sort((a, b) => a[\"Widgets\"] - b[\"Widgets\"]),\n  Commits: (array) => array.sort((a, b) => a[\"Commits\"] - b[\"Commits\"]),\n  \"Widgets - Past 30d\": (array) =>\n    array.sort((a, b) => a[\"Widgets - Past 30d\"] - b[\"Widgets - Past 30d\"]),\n  \"Commits - Past 30d\": (array) =>\n    array.sort((a, b) => a[\"Commits - Past 30d\"] - b[\"Commits - Past 30d\"]),\n};\n\nreturn (\n  <div className=\"text-bg-dark rounded-4 mb-12\">\n    {data !== null ? (\n      <div Style={{ \"min-width\": \"780px\" }} className=\"bg-dark\">\n        <BasicTable columns={COLUMNS} data={data} sortFns={sortFns} />\n      </div>\n    ) : (\n      <div>Loading ...</div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/abhishekanirudhan.near/widget/NEAR.ATLAS.TABLE.VHUB.BOS", "fact_widget_deployments_id": "f6f3081490fa069dbb3c9208afcac9cc", "inserted_timestamp": "2023-08-09T16:38:49.735Z", "modified_timestamp": "2023-08-09T16:38:49.735Z", "__row_index": 0}