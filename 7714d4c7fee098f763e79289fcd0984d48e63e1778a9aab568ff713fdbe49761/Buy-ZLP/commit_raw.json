{"tx_hash": "5DDXt4vvZd3ykQTfbCneB3wBTA1F1h2hsV41fydHQWGu", "action_id_social": "6Zq7V2xLXcQCywx5kLkZGZabvGMcPD3BoLHaxdTFH8Dv-0-widget", "block_id": 107126989, "block_timestamp": "2023-12-04T09:01:10.806Z", "signer_id": "7714d4c7fee098f763e79289fcd0984d48e63e1778a9aab568ff713fdbe49761", "widget_name": "Buy-ZLP", "source_code": "// BUY ZLP\n\nfunction handleClickSubmitBuyZlp() {\n  State.update({ loading: true });\n\n  if (fromToken.address !== ADDRESS_ZERO) {\n    const tokenContract = new ethers.Contract(\n      fromToken.address,\n      erc20Abi,\n      Ethers.provider().getSigner()\n    );\n\n    tokenContract.allowance(sender, zlpManagerAddress).then((allowance) => {\n      if (!allowance || payAmount.gt(allowance)) {\n        tokenContract\n          .approve(\n            zlpManagerAddress,\n            \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n          )\n          .then((response) => {\n            response.wait().then((res) => {\n              callContract();\n            });\n          })\n          .catch((e) => {\n            State.update({\n              titleToast: \"Error\",\n              descriptionToast: \"Failed to approve token!\",\n              typeToast: \"error\",\n              openToast: true,\n              loading: false,\n            });\n          });\n      } else {\n        callContract();\n      }\n    });\n  } else {\n    callContract();\n  }\n}\n\n// HANDLES\n\nfunction handleChangeFromToken(address) {\n  State.update({\n    fromToken: infoTokens[address],\n  });\n}\n\nfunction handleClickMax() {\n  State.update({\n    payValue: formatAmountFree(fromToken.balance, fromToken.decimals, 18),\n  });\n\n  handleChangePayValue(\n    formatAmountFree(fromToken.balance, fromToken.decimals, 18)\n  );\n}\n\nfunction handleClickSwitchNetwork(network) {\n  try {\n    Ethers.send(\"wallet_switchEthereumChain\", [\n      { chainId: ethers.utils.hexValue(network) },\n    ]);\n  } catch (e) {\n    console.log(\"error switching network\", e);\n  }\n  try {\n    Ethers.send(\"wallet_addEthereumChain\", [CHAINS[network].NETWORK_INFO]);\n  } catch (e) {\n    console.log(\"error adding new network\", e);\n  }\n}\n\nfunction handleChangePayValue(value) {\n  if (value === \".\" && !payValue) {\n    State.update({\n      payValue: \"0.\",\n    });\n  }\n  if (isNaN(value)) {\n    return;\n  }\n\n  State.update({\n    payValue: value,\n  });\n\n  const amount = parseValue(value, fromToken.decimals);\n\n  const { amount: nextAmount, feeBasisPoints: feeBps } = getBuyZlpToAmount(\n    amount,\n    fromToken,\n    zlpPrice,\n    usdgSupply,\n    totalTokenWeights\n  );\n  const nextValue = formatAmountFree(nextAmount, ZLP_DECIMALS, 18);\n\n  State.update({\n    receiveValue: nextValue,\n    feeBasisPoints: feeBps,\n  });\n}\n\nfunction handleChangeReceiveValue(value) {\n  if (value === \".\" && !receiveValue) {\n    State.update({\n      receiveValue: \"0.\",\n    });\n  }\n  if (isNaN(value)) {\n    return;\n  }\n\n  State.update({\n    receiveValue: value,\n  });\n\n  const amount = parseValue(value, ZLP_DECIMALS);\n\n  const { amount: nextAmount, feeBasisPoints: feeBps } = getBuyZlpFromAmount(\n    amount,\n    fromToken,\n    zlpPrice,\n    usdgSupply,\n    totalTokenWeights\n  );\n  const nextValue = formatAmountFree(nextAmount, fromToken.decimals, 18);\n\n  State.update({\n    payValue: nextValue,\n    feeBasisPoints: feeBps,\n  });\n}\n\n// WATCH\n\nuseEffect(() => {\n  handleChangePayValue(payValue);\n}, [fromToken]);\n\nreturn (\n  <>\n    <DaisyUIWrapper>\n      <div class=\"card max-w-2xl mx-auto bg-gray-900 text-white\">\n        <div class=\"px-4 pt-4\">\n          <div class=\"relative flex justify-center\">\n            <LogoZkEra />\n            {chainId && (\n              <button\n                class=\"btn btn-xs btn-outline absolute right-0 top-0 text-white hover:bg-gray-900\"\n                style={{ \"border-color\": \"#43f574\" }}\n                onClick={() => {\n                  State.update({ showSettings: !state.showSettings });\n                }}\n              >\n                {chainId === \"unsupported\"\n                  ? \"Unsupported network\"\n                  : CHAINS[chainId].NETWORK_INFO.chainName}\n              </button>\n            )}\n\n            {/* settings menu */}\n            {state.showSettings && (\n              <div class=\"absolute right-0 top-8 bg-gray-900 rounded p-3\">\n                <div class=\"flex flex-col gap-2\">\n                  <button\n                    class={`btn btn-xs btn-outline${\n                      chainId === ZKSYNC_MAINNET ? \" pointer-events-none\" : \"\"\n                    }`}\n                    onClick={() => {\n                      chainId === ZKSYNC_MAINNET\n                        ? State.update({ showSettings: false })\n                        : handleClickSwitchNetwork(ZKSYNC_MAINNET);\n                    }}\n                  >\n                    {CHAINS[ZKSYNC_MAINNET].NETWORK_INFO.chainName}\n                  </button>\n                  <button\n                    class={`btn btn-xs btn-outline${\n                      chainId === ZKSYNC_TESTNET ? \" pointer-events-none\" : \"\"\n                    }`}\n                    onClick={() => {\n                      chainId === ZKSYNC_TESTNET\n                        ? State.update({ showSettings: false })\n                        : handleClickSwitchNetwork(ZKSYNC_TESTNET);\n                    }}\n                  >\n                    {CHAINS[ZKSYNC_TESTNET].NETWORK_INFO.chainName}\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <label class=\"label\">\n            <span class=\"label-text text-lg text-white\">Buy ZLP</span>\n          </label>\n\n          <div class=\"bg-gray-800 rounded p-2 mb-2\">\n            <label class=\"label pl-4\">\n              <span class=\"label-text text-gray-400\">\n                {payValueDisplay\n                  ? `Pay: $${formatAmount(\n                      payValueDisplay,\n                      USD_DECIMALS,\n                      2,\n                      true\n                    )} `\n                  : \"Pay\"}\n              </span>\n              <span class=\"label-text text-gray-400\">\n                Balance:\n                <span class=\"text-white\">\n                  {formatAmount(\n                    fromToken && fromToken.balance,\n                    fromToken && fromToken.decimals,\n                    4,\n                    true\n                  )}\n                </span>\n              </span>\n            </label>\n            <div class=\"flex\">\n              <input\n                class=\"input w-full bg-gray-800 text-2xl focus:outline-none\"\n                onChange={(e) => handleChangePayValue(e.target.value)}\n                value={payValue}\n                placeholder=\"0.0\"\n              />\n              <div class=\"flex items-center space-x-1\">\n                <button\n                  style={{ background: \"#43f574\" }}\n                  class=\"btn btn-sm border-none font-normal rounded-4 px-2 mx-1 hover:bg-green-600 focus:bg-green-600 text-black\"\n                  onClick={handleClickMax}\n                >\n                  MAX\n                </button>\n                {getIconForToken()}\n                <select\n                  onChange={(e) => {\n                    handleChangeFromToken(e.target.value);\n                  }}\n                  class=\"select-ghost bg-gray-800  text-2xl\"\n                >\n                  {tokensInfo.map((token) => (\n                    <option value={token.address}>{token.symbol}</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"bg-gray-800 rounded p-2\">\n            <label class=\"label pl-4 pr-2\">\n              <span class=\"label-text text-gray-400\">\n                {receiveValueDisplay\n                  ? `Receive: $${formatAmount(\n                      receiveValueDisplay,\n                      USD_DECIMALS,\n                      2,\n                      true\n                    )} `\n                  : \"Receive\"}\n              </span>\n              <span class=\"label-text\">\n                <span class=\"label-text text-gray-400\">\n                  Balance:\n                  <span class=\"text-white\">\n                    {formatAmount(zlpBalance, ZLP_DECIMALS, 4, true)}\n                  </span>\n                </span>\n              </span>\n            </label>\n            <div class=\"flex\">\n              <input\n                onChange={(e) => handleChangeReceiveValue(e.target.value)}\n                class=\"input w-full bg-gray-800 text-2xl focus:outline-none\"\n                value={receiveValue}\n                placeholder=\"0.0\"\n              />\n              <div class=\"flex items-center space-x-1 \">\n                <IconZLP />\n                <span class=\"text-2xl pl-1 pr-2\">ZLP</span>\n              </div>\n            </div>\n          </div>\n\n          <label class=\"label pt-3\">\n            <span class=\"label-text text-gray-400\">Fees</span>\n            <span class=\"label-text\">\n              {feeBasisPoints\n                ? `${formatAmount(feeBasisPoints, 2, 2, true)}%`\n                : \"-\"}\n            </span>\n          </label>\n        </div>\n\n        <div class=\"px-4 pb-4\">\n          {sender ? (\n            <button\n              disabled={loading}\n              style={{ background: \"#43f574\" }}\n              class={`btn w-full hover:bg-green-600 focus:bg-green-600 mt-2 text-black ${\n                primaryButtonDisabled && \"cursor-not-allowed\"\n              }`}\n              onClick={\n                chainId === \"unsupported\"\n                  ? () => handleClickSwitchNetwork(ZKSYNC_MAINNET)\n                  : !primaryButtonDisabled && handleClickSubmitBuyZlp\n              }\n            >\n              {primaryButtonText}\n            </button>\n          ) : (\n            <button\n              disabled={sender && payValue <= 0}\n              style={{ background: \"#43f574\" }}\n              class=\"relative btn w-full hover:bg-green-600 focus:bg-green-600 mt-2 text-black\"\n            >\n              Connect Wallet\n              <Web3Connect\n                className=\"opacity-0 absolute w-full h-full\"\n                connectLabel=\"Connect with Web3\"\n              />\n            </button>\n          )}\n        </div>\n      </div>\n    </DaisyUIWrapper>\n\n    <Toast />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/7714d4c7fee098f763e79289fcd0984d48e63e1778a9aab568ff713fdbe49761/widget/Buy-ZLP", "fact_widget_deployments_id": "f7eba579ba5041cfeb29034887d44804", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}