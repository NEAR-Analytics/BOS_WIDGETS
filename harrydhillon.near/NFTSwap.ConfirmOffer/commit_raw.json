{"tx_hash": "8V9XySqzDLJDdfF6jPmav36hoYxJF1wc5eVvD71689AN", "action_id_social": "pahRffvqsKpABFsjdVcFxDHxKTr9zJuzLxwEg9Fm7BQ-0-widget", "block_id": 101512831, "block_timestamp": "2023-09-20T00:33:43.066Z", "signer_id": "harrydhillon.near", "widget_name": "NFTSwap.ConfirmOffer", "source_code": "const ShadowBOX = styled.div`\n-webkit-box-shadow: -1px 0px 9px 8px rgba(0,0,0,0.03);\n-moz-box-shadow: -1px 0px 9px 8px rgba(0,0,0,0.03);\nbox-shadow: -1px 0px 9px 8px rgba(0,0,0,0.03);\n  border-radius:10px;\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-top:10px;\n  padding-bottom:10px;\n`;\n\nconst ScrollContainer = styled.div`\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  ::-webkit-scrollbar { \n      display: none;\n  }\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 5px;\n  overflow-x: hidden;\n  overflow-y: scroll;\n  height: 200px;\n  border-radius:5px;\n  padding: 5px;\n  border: 1px solid lightgray;\n`;\n\nfunction multiplyBy10ToThe24(num) {\n  // Convert the number to a string\n  let strNum = num.toString();\n\n  // Number of zeros to append\n  let zeros = \"000000000000000000000000\";\n\n  // Check if the number has a decimal point\n  let indexOfDecimal = strNum.indexOf(\".\");\n\n  if (indexOfDecimal === -1) {\n    // If there's no decimal, simply append 24 zeros\n    return strNum + zeros;\n  } else {\n    // If there's a decimal, shift the numbers after the decimal\n    let beforeDecimal = strNum.substring(0, indexOfDecimal);\n    let afterDecimal = strNum.substring(indexOfDecimal + 1);\n\n    // Append necessary zeros and adjust the decimal point\n    let newNum = beforeDecimal + afterDecimal;\n\n    // Account for the cases where there's less than 24 digits after the decimal\n    let zerosToAdd = 24 - afterDecimal.length;\n    for (let i = 0; i < zerosToAdd; i++) {\n      newNum += \"0\";\n    }\n    return newNum;\n  }\n}\n\nconst ConfirmOffer = () => {\n  const generateOfferAndCallContract = () => {\n    const allTransactions = [];\n    if (props.offerAmount && props.offerNFTS.length === 0) {\n      allTransactions.push({\n        contractName: \"v1.havenswap.near\",\n        methodName: \"mass_transfer\",\n        args: {\n          receiver_id: props.receiverId,\n        },\n        gas: 100000000000000,\n        deposit: 1000000000000000000000000 * parseFloat(props.offerAmount),\n      });\n    }\n    if (props.offerNFTS) {\n      props?.offerNFTS?.map((item) => {\n        const contractArgs = {\n          sender_id: context.accountId,\n          sender_near: multiplyBy10ToThe24(parseFloat(props.offerAmount)),\n          sender_nfts: props.sendNFTS.map((item) => ({\n            tokenId: item.tokenId,\n            contractId: item.contractId,\n          })),\n          receiver_id: props.receiverId,\n          receiver_nfts: props.offerNFTS.map((item) => ({\n            tokenId: item.tokenId,\n            contractId: item.contractId,\n          })),\n          is_holder: false,\n        };\n        allTransactions.push({\n          contractName: \"v1.havenswap.near\",\n          methodName: \"send_offer\",\n          args: {\n            hash: Buffer.from(JSON.stringify(metadata), \"utf-8\").toString(\n              \"base64\"\n            ),\n            ...contractArgs,\n          },\n          gas: 100000000000000,\n          deposit: 1000000000000000000000000 * parseFloat(props.offerAmount),\n        });\n      });\n    }\n    if (props.sendNFTS) {\n      props?.sendNFTS?.map((item) => {\n        allTransactions.push({\n          contractName: item.contractId,\n          methodName: \"nft_transfer\",\n          args: {\n            receiver_id: props.receiverId,\n            token_id: item.tokenId,\n          },\n          gas: 100000000000000,\n          deposit: 1,\n        });\n      });\n    }\n    Near.call(allTransactions);\n    props.update({ isOfferModalOpen: false });\n  };\n\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <h4>Confirm NFT Offer</h4>\n        <button\n          onClick={() => {\n            props.update({ isOfferModalOpen: false });\n          }}\n        >\n          X\n        </button>\n      </div>\n      <p style={{ marginBottom: 5, wordBreak: \"break-all\" }}>\n        Offering: {accountId}\n        <br />\n        near: \u24c3 {props.offerAmount}\n      </p>\n      <ScrollContainer>\n        {(props?.sendNFTS ?? [])?.map((item) => (\n          <ShadowBOX\n            style={{\n              width: \"100%\",\n              marginBottom: 10,\n              display: \"flex\",\n              textAlign: \"center\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <div>\n              <img\n                style={{ width: 60, height: 60, borderRadius: 10 }}\n                src={item.media}\n              />\n              <p style={{ marginBottom: 0 }}>Token ID : {item.tokenId}</p>\n              <p style={{ marginBottom: 0, fontSize: 10 }}>\n                NFT Contract : {item.contractId}\n              </p>\n            </div>\n          </ShadowBOX>\n        ))}\n      </ScrollContainer>\n      <p style={{ marginBottom: 5, marginTop: 10, wordBreak: \"break-all\" }}>\n        Receving: {props.receiverId}\n      </p>\n      <ScrollContainer>\n        {(props?.offerNFTS ?? [])?.map((item) => (\n          <ShadowBOX\n            style={{\n              width: \"100%\",\n              marginBottom: 10,\n              display: \"flex\",\n              textAlign: \"center\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <div>\n              <img\n                style={{ width: 60, height: 60, borderRadius: 10 }}\n                src={item.media}\n              />\n              <p style={{ marginBottom: 0, fontSize: 12 }}>\n                Token ID : {item.tokenId}\n              </p>\n              <p style={{ marginBottom: 0, fontSize: 10 }}>\n                NFT Contract : {item.contractId}\n              </p>\n            </div>\n          </ShadowBOX>\n        ))}\n      </ScrollContainer>\n      <button\n        onClick={() => generateOfferAndCallContract()}\n        style={{ marginTop: 10 }}\n      >\n        Offer\n      </button>\n    </div>\n  );\n};\n\nreturn props.isOfferModalOpen ? (\n  <Widget\n    src=\"harrydhillon.near/widget/Keypom.Components.Modal\"\n    props={{\n      children: ConfirmOffer(),\n      isOpen: state?.isOfferModalOpen,\n      contentStyles: {\n        style: {\n          width: 600,\n        },\n      },\n    }}\n  />\n) : (\n  <></>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/harrydhillon.near/widget/NFTSwap.ConfirmOffer", "fact_widget_deployments_id": "2aab3b42f2f2dd02ecc041aa18d0197e", "inserted_timestamp": "2023-09-20T02:35:56.325Z", "modified_timestamp": "2023-09-20T02:35:56.325Z", "__row_index": 4}