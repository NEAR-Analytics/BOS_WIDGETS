{"tx_hash": "9rwkThDBvvpQG9RnKKLvhkb9MCBh65wVBo6uzP3MZ6yL", "action_id_social": "2snoFPJnVLZ9Sh4dEo2RQndVJzmfNbfhADXCbp4FKUyW-0-widget", "block_id": 100681764, "block_timestamp": "2023-09-08T19:07:01.667Z", "signer_id": "harrydhillon.near", "widget_name": "Keypom.Tickets.index", "source_code": "const CreateTicketContainer = styled.div`\ndisplay:flex;\njustify-content:space-between;\nalign-items:center;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  border-radius: 8px;\n  overflow:hidden;\n  border:0.1px solid #30C9F3;\n  margin: 20px 0;\n  border-collapse: separate;\n  border-spacing: 0;\n`;\n\nconst TableHead = styled.thead`\n  background-color: #F8FAFC;\n`;\n\nconst TableRow = styled.tr`\n\n`;\n\nconst TableHeader = styled.th`\n  padding: 8px;\n  font-weight:500;\n  text-align: left;\n`;\n\nconst TableCell = styled.td`\n  padding: 8px;\n`;\n\nconst UnstyledButton = styled.button`\n  background-color:transparent;\n  border-width:0px;\n  color:#00A7E4;\n`;\n\nconst ActionButton = styled.button`\n  color: black;\n  padding: 5px 10px;\n  padding-bottom:8px;\n  background-color:transparent;\n  border:1px solid lightgray;\n  border-radius: 5px;\n  cursor: pointer;\n`;\n\nState.init({\n  isCreateTicketModalOpen: false,\n  tickets: [],\n  ticketPreview: null,\n});\n\nfunction extractDateComponents(dateStr) {\n  const dateObj = new Date(dateStr);\n\n  const month = dateObj.toLocaleString(\"default\", { month: \"long\" }); // e.g., \"August\"\n  const date = dateObj.getDate(); // e.g., 3\n  const year = dateObj.getFullYear(); // e.g., 2023\n\n  return `${month} ${date}, ${year}`;\n}\n\nfunction ellipsisIfExceeds(str) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, 35 - 3) + \"...\";\n}\n\nif (!state.isReadDataFromLocal) {\n  const getValue = Storage.get(\"tickets\");\n  if (getValue) {\n    State.update({ tickets: JSON.parse(getValue), isReadDataFromLocal: true });\n  } else {\n    State.update({ isReadDataFromLocal: true });\n  }\n} else {\n  Storage.set(\"tickets\", JSON.stringify(state.tickets));\n}\n\nconst createTickets = () => {\n  return (\n    <>\n      <CreateTicketContainer>\n        <div>\n          <p style={{ marginBottom: 0, fontSize: 20, fontWeight: \"600\" }}>\n            Create Tickets*\n          </p>\n          <p style={{ marginBottom: 0 }}>\n            Create custom tickets for [event name].\n          </p>\n        </div>\n        <button\n          onClick={() => {\n            State.update({\n              isCreateTicketModalOpen: true,\n            });\n          }}\n          style={{ backgroundColor: \"black\", borderWidth: 0 }}\n        >\n          Create ticket\n        </button>\n      </CreateTicketContainer>\n      {state.tickets.length !== 0 && (\n        <div style={{ marginTop: 10 }}>\n          <p style={{ marginBottom: 0, fontSize: 20, fontWeight: \"600\" }}>\n            Your Tickets\n          </p>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableHeader>Ticket</TableHeader>\n                <TableHeader />\n                <TableHeader># of tickets</TableHeader>\n                <TableHeader>Price (NEAR)</TableHeader>\n                <TableHeader />\n              </TableRow>\n            </TableHead>\n            <tbody style={{ borderRadius: 10 }}>\n              {state.tickets.map((item, index) => (\n                <TableRow key={index}>\n                  <TableCell style={{ width: \"30%\" }}>\n                    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                      <div style={{ padding: 4 }}>\n                        <img\n                          src={`https://ipfs.near.social/ipfs/${item.image.cid}`}\n                          style={{\n                            width: 35,\n                            objectFit: \"cover\",\n                            height: 35,\n                            borderRadius: 3,\n                          }}\n                        />\n                      </div>\n                      <div>\n                        <div style={{ fontSize: 16, fontWeight: \"500\" }}>\n                          {item.ticketName}\n                        </div>\n                        <p\n                          style={{\n                            textOverflow: \"ellipsis\",\n                            width: 200,\n                            fontSize: 12,\n                            whiteSpace: \"nowrap\",\n                            marginBottom: 0,\n                          }}\n                        >\n                          {ellipsisIfExceeds(item.description)}\n                        </p>\n                        <div style={{ fontSize: 12, color: \"#94A3B8\" }}>\n                          {extractDateComponents(item.from)} -{\" \"}\n                          {extractDateComponents(item.to)}\n                        </div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <UnstyledButton\n                      onClick={() => {\n                        State.update({ ticketPreview: item });\n                      }}\n                    >\n                      Preview Ticket\n                    </UnstyledButton>\n                  </TableCell>\n                  <TableCell>\n                    {item.numberOfTickets ? item.numberOfTickets : \"\u221e\"}\n                  </TableCell>\n                  <TableCell>{item.ticketPricing}</TableCell>\n                  <TableCell>\n                    <OverlayTrigger overlay={<Tooltip>Delete</Tooltip>}>\n                      <ActionButton\n                        onClick={() => {\n                          State.update({\n                            tickets: state.tickets.filter(\n                              (item, idx) => idx !== index\n                            ),\n                          });\n                        }}\n                      >\n                        <Widget src=\"harrydhillon.near/widget/Keypom.Tickets.DeleteSVG\" />\n                      </ActionButton>\n                    </OverlayTrigger>\n                    <OverlayTrigger overlay={<Tooltip>Clone</Tooltip>}>\n                      <ActionButton\n                        onClick={() => {\n                          const currentTicket = state.tickets[index];\n                          State.update({\n                            tickets: [...state.tickets, currentTicket],\n                          });\n                        }}\n                      >\n                        <Widget src=\"harrydhillon.near/widget/Keypom.Tickets.CloneSVG\" />\n                      </ActionButton>\n                    </OverlayTrigger>\n                    <OverlayTrigger overlay={<Tooltip>Edit</Tooltip>}>\n                      <ActionButton\n                        onClick={() => {\n                          State.update({\n                            isCreateTicketModalOpen: true,\n                            editMode: true,\n                            ticketToEdit: index,\n                            editVal: item,\n                          });\n                        }}\n                      >\n                        <Widget src=\"harrydhillon.near/widget/Keypom.Tickets.EditSVG\" />\n                      </ActionButton>\n                    </OverlayTrigger>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n      )}\n      {!!state.ticketPreview && (\n        <Widget\n          src=\"harrydhillon.near/widget/Keypom.Tickets.TicketPreview\"\n          props={{\n            isOpen: !!state.ticketPreview,\n            ...state.ticketPreview,\n            onClose: () => {\n              State.update({\n                ticketPreview: null,\n              });\n            },\n          }}\n        />\n      )}\n      {state.isCreateTicketModalOpen && (\n        <Widget\n          src=\"harrydhillon.near/widget/Keypom.Tickets.AddTicketModal\"\n          props={{\n            isOpen: state.isCreateTicketModalOpen,\n            onSave: (ticketData) => {\n              if (state.editMode) {\n                const allTickets = [...state.tickets];\n                allTickets[state.ticketToEdit] = ticketData;\n                State.update({\n                  tickets: allTickets,\n                  isCreateTicketModalOpen: false,\n                  editMode: false,\n                  editVal: null,\n                });\n              } else {\n                State.update({\n                  tickets: [...state.tickets, ticketData],\n                  isCreateTicketModalOpen: false,\n                });\n              }\n            },\n            editMode: state.editMode,\n            editVal: state.editVal,\n            onClose: () => {\n              State.update({\n                isCreateTicketModalOpen: false,\n                isCreateTicketModalOpen: false,\n                editMode: false,\n                editVal: null,\n              });\n            },\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nreturn <div style={{ padding: 10 }}>{createTickets()}</div>;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/harrydhillon.near/widget/Keypom.Tickets.index", "fact_widget_deployments_id": "f50f25888c8a2564a45c1f6c81c24c37", "inserted_timestamp": "2023-09-08T20:52:55.629Z", "modified_timestamp": "2023-09-08T20:52:55.629Z", "__row_index": 14}