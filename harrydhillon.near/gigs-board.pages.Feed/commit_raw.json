{"tx_hash": "EDhUm2kfxrVkgeHwMwFsGgHhgqEv1VBJuoJUet258MZ3", "action_id_social": "Esvq4w5fw6A7avY9JfFgxAukN6its2TYekUqoud9i2j7-0-widget", "block_id": 91020645, "block_timestamp": "2023-05-03T18:09:23.590Z", "signer_id": "harrydhillon.near", "widget_name": "gigs-board.pages.Feed", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n  return (\n    <Widget\n      src={`${\n        widgetName === \"components.layout.Page\"\n          ? \"harrydhillon.near\"\n          : nearDevGovGigsWidgetsAccountId\n      }/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n  const linkPropsQuery = Object.entries(linkProps)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n  return `#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n\nState.init({\n  propsLabel: props.label,\n  label: props.label,\n  author: props.author,\n});\n\n// When rerendered with different props, State will be preserved, so we need to update the state when we detect that the props have changed.\nif (props.label !== state.propsLabel) {\n  State.update({\n    propsLabel: props.label,\n    label: props.label,\n  });\n}\n\nconst onSearchLabel = (label) => {\n  State.update({ label });\n};\n\nconst onSearchAuthor = (author) => {\n  State.update({ author });\n};\n\nreturn widget(\"components.layout.Page\", {\n  header: widget(\"components.community.FeedHeader\"),\n  navbarChildren: [\n    widget(\"components.layout.SearchByLabel\", {\n      searchQuery: { label: state.label },\n      onSearchLabel,\n    }),\n    widget(\"components.layout.SearchByAuthor\", {\n      searchQuery: { author: state.author },\n      onSearchAuthor,\n    }),\n  ],\n  children: widget(\"components.posts.Search\", {\n    recency: props.recency,\n    label: state.label,\n    author: state.author,\n  }),\n});\n", "metadata": null, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/harrydhillon.near/widget/gigs-board.pages.Feed", "fact_widget_deployments_id": "507cae87d11933557de878761d8fc2c6", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 7}