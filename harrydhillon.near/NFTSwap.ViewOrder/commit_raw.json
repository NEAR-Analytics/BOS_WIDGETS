{"tx_hash": "BtRLWU5znJZvLZ1vahrS15XkAkLDwcrAAXWGvcFSGb5D", "action_id_social": "BAqyRrHuPALfZa1eDuFWuoEoMHfPmecrv8sNW3bYceLo-0-widget", "block_id": 101577705, "block_timestamp": "2023-09-20T21:30:38.307Z", "signer_id": "harrydhillon.near", "widget_name": "NFTSwap.ViewOrder", "source_code": "const accountId = context.accountId;\n\ninitState({ allTransactions: [] });\n\nuseEffect(() => {\n  const allUserTransactionHashes = Near.view(\n    \"swap.genadrop.near\",\n    \"get_hashes_for_owner\",\n    {\n      owner_id: accountId,\n    }\n  );\n\n  const allTransactionData = [];\n\n  allUserTransactionHashes.map((item) => {\n    allTransactionData.push(\n      Near.view(\"swap.genadrop.near\", \"get_transaction_data\", {\n        hash: item,\n      })\n    );\n  });\n\n  async function processNFTs(nfts) {\n    let arrayToReturn = [];\n    nfts.mao(async (nft) => {\n      const nftContract = nft.contract_id;\n      const tokenId = nft.token_id;\n\n      const metadata = Near.view(nftContract, \"nft_metadata\", {\n        oken_id: tokenId,\n      });\n      const baseUri = metadata.base_uri || \"\";\n\n      const nftMetadata = Near.view(nftContract, \"nft_token\", {\n        oken_id: tokenId,\n      });\n      const media = nftMetadata.metadata.media;\n\n      const image =\n        media.startsWith(\"https\") || media.startsWith(\"http\")\n          ? media\n          : `${baseUri}/${media}`;\n\n      let collection = \"\";\n\n      if (nftContract === \"x.paras.near\") {\n        const response = await getFetcher(\n          `https://api-v2-mainnet.paras.id/token?token_id=${tokenId}`\n        );\n        collection = response.data.results[0].metadata.collection_id;\n      }\n\n      arrayToReturn.push({\n        title: nftMetadata.metadata.title,\n        image: image,\n        token_id: tokenId,\n        contract_id: nftContract,\n        collection: collection ? collection : metadata.name,\n      });\n    });\n\n    return arrayToReturn;\n  }\n\n  const senderNFTs = processNFTs(allTransactionData.sender_nfts);\n  const receiverNFTs = processNFTs(allTransactionData.receiver_nfts);\n\n  console.log(senderNFTs, receiverNFTs);\n\n  State.update({ allTransactions: allTransactionData });\n}, []);\n\nconsole.log(state);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/harrydhillon.near/widget/NFTSwap.ViewOrder", "fact_widget_deployments_id": "fd408539857644fe63aad7aa3cdb6886", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}