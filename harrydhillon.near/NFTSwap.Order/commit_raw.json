{"tx_hash": "CXxpVwaTFynqKpxrX1gVpKecyNVnj22MZbMaQH9xfvmY", "action_id_social": "92JRXgXZSbwJLfTqwW8QzQtmtigJ2sZhkipUnG6navAz-0-widget", "block_id": 101640097, "block_timestamp": "2023-09-21T17:25:35.024Z", "signer_id": "harrydhillon.near", "widget_name": "NFTSwap.Order", "source_code": "const accountId = context.accountId;\n\ninitState({ allTransactions: [] });\n\nconst contract_id = \"swap.genadrop.near\";\n\nconst allUserTransactionHashes = Near.view(\n  \"swap.genadrop.near\",\n  \"get_hashes_for_owner\",\n  {\n    owner_id: accountId,\n  }\n);\n\nconst allTransactionData = [];\n\nallUserTransactionHashes.map((item) => {\n  allTransactionData.push({\n    ...Near.view(\"swap.genadrop.near\", \"get_transaction_data\", {\n      hash: item,\n    }),\n    hash: item,\n  });\n});\n\nfunction processNFTs(nfts, hash) {\n  let arrayToReturn = [];\n  nfts.map(async (nft) => {\n    const nftContract = nft.contract_id;\n    const tokenId = nft.token_id;\n    const metadata = Near.view(nftContract, \"nft_metadata\", {\n      token_id: tokenId,\n    });\n    const baseUri = metadata.base_uri || \"\";\n\n    const nftMetadata = Near.view(nftContract, \"nft_token\", {\n      token_id: tokenId,\n    });\n    const media = nftMetadata.metadata.media;\n    const image =\n      media.startsWith(\"https\") || media.startsWith(\"http\")\n        ? media\n        : `${baseUri}${media[0] === \"/\" ? \"\" : \"/\"}${media}`;\n    let collection = \"\";\n\n    if (nftContract === \"x.paras.near\") {\n      const response = fetch(\n        `https://api-v2-mainnet.paras.id/token?token_id=${tokenId}`\n      );\n      collection = response.data.results[0].metadata.collection_id;\n    }\n\n    arrayToReturn.push({\n      title: nftMetadata.metadata.title,\n      image: image,\n      token_id: tokenId,\n      contract_id: nftContract,\n      collection: collection ? collection : metadata.name,\n    });\n  });\n  return arrayToReturn;\n}\n\nState.update({ allTransactions: allTransactionData });\n\nconst nftData = [];\nallTransactionData.map((item) => {\n  const senderNFTs = processNFTs(item.sender_nfts, item.hash);\n  const receiverNFTs = processNFTs(item.receiver_nfts, item.hash);\n  senderNFTs.map((item) => {\n    nftData.push(item);\n  });\n  receiverNFTs.map((item) => {\n    nftData.push(item);\n  });\n});\nState.update({ nftData });\n\nfunction divideByPowerOfTen(numStr) {\n  if (numStr.length <= 24) {\n    return (Number(numStr) / 1e24).toFixed(3);\n  }\n\n  let wholePart = numStr.slice(0, -24);\n  let fractionalPart = numStr.slice(-24);\n\n  // Remove trailing zeros from the fractional part\n  while (fractionalPart.endsWith(\"0\")) {\n    fractionalPart = fractionalPart.slice(0, -1);\n  }\n\n  // Create the result number\n  let result = parseFloat(\n    wholePart + (fractionalPart ? \".\" + fractionalPart : \"\")\n  );\n\n  // Generalized rounding\n  let rounded = Math.round(result * 1e3) / 1e3;\n\n  // Format the result to 3 decimal places\n  return rounded.toFixed(3);\n}\n\nconst render = (transaction) => (\n  <div\n    style={{\n      border: \"0px solid lightgray\",\n      borderBottomWidth: 1,\n      paddingBottom: 5,\n      border: \"1px solid lightgray\",\n      width: \"100%\",\n      borderRadius: 5,\n      marginBottom: 5,\n      padding: 10,\n    }}\n  >\n    <div\n      style={{\n        border: \"1px solid lightgray\",\n        width: \"100%\",\n        borderRadius: 5,\n        padding: 10,\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(4, 1fr)\",\n        gap: \"10px\",\n        textAlign: \"center\",\n        marginBottom: 10,\n      }}\n    >\n      {console.log(transaction.receiver_nfts)}\n      {transaction.receiver_nfts.map((item) => {\n        const transaction_data = state.nftData.filter(\n          (_) =>\n            _.token_id === item.token_id && item.contract_id === _.contract_id\n        )[0];\n        return (\n          <div>\n            <img\n              style={{\n                width: \"100%\",\n                height: \"220px\",\n                borderRadius: \"5px\",\n                objectFit: \"cover\",\n                marginBottom: 5,\n              }}\n              src={transaction_data.image}\n            />\n            <p style={{ marginBottom: 0, fontSize: 12 }}>\n              Collection : {transaction_data.collection}\n            </p>\n            <p style={{ marginBottom: 0, fontSize: 12 }}>{item.contract_id}</p>\n            <p style={{ marginBottom: 0, fontSize: 12 }}>{item.token_id}</p>\n          </div>\n        );\n      })}\n    </div>\n    <div\n      style={{\n        display: \"grid\",\n        width: \"100%\",\n        gridTemplateColumns: \" repeat(2, 1fr)\",\n        alignItems: \"center\",\n      }}\n    >\n      <div style={{ marginBottom: 5 }}>\n        Sender\n        <Widget\n          src=\"harrydhillon.near/widget/AccountProfile\"\n          props={{ accountId: transaction.sender_id }}\n        />\n      </div>\n      <div style={{ marginBottom: 0 }}>\n        Near : {divideByPowerOfTen(`${transaction.sender_near}`)} \u24c3\n      </div>\n      <div style={{ marginBottom: 6 }}>\n        Receiver\n        <Widget\n          src=\"harrydhillon.near/widget/AccountProfile\"\n          props={{ accountId: transaction.receiver_id }}\n        />\n      </div>\n    </div>\n    {accountId !== transaction.sender_id && (\n      <button\n        style={{\n          backgroundColor: \"blue\",\n          borderWidth: 0,\n          marginRight: 10,\n        }}\n        onClick={() => {\n          const txns = transaction.receiver_nfts.map((item) => ({\n            contractName: item.contract_id,\n            methodName: \"nft_transfer\",\n            args: {\n              receiver_id: contract_id,\n              token_id: item.token_id,\n              msg: transaction.hash,\n              approval_id: 0,\n            },\n            gas: 300000000000000,\n            deposit: 1,\n          }));\n          Near.call(txns);\n        }}\n      >\n        Accept\n      </button>\n    )}\n    <button\n      onClick={() => {\n        Near.call(\n          contract_id,\n          \"cancel_offer\",\n          {\n            hash: transaction.hash,\n          },\n          300000000000000,\n          1\n        );\n      }}\n      style={{ backgroundColor: \"red\", borderWidth: 0 }}\n    >\n      {accountId !== transaction.sender_id ? \"Reject\" : \"Cancel\"}\n    </button>\n  </div>\n);\n\nreturn (\n  <div\n    style={{\n      display: \"grid\",\n      gridTemplateColumns: \"repeat(2,1fr)\",\n      gap: \"10px\",\n    }}\n  >\n    <div>\n      <h4>Your Offers</h4>\n      {[\n        ...state.allTransactions.filter((item) => item.sender_id === accountId),\n      ].map((transaction) => render(transaction))}\n    </div>\n    <div>\n      <h4>Offered To you</h4>\n      {[\n        ...state.allTransactions.filter((item) => item.sender_id !== accountId),\n      ].map((transaction) => render(transaction))}\n    </div>\n  </div>\n);\n\n// receiverId: nft.contract_id,\n// \t\t\t\t\tactions: [functionCall('nft_transfer_call', {\n// \t\t\t\t\t\treceiver_id: SWAP_CONTRACT,\n// \t\t\t\t\t\ttoken_id: nft.token_id,\n// \t\t\t\t\t\tapproval_id: 0,\n// \t\t\t\t\t\tmsg: hash,\n// \t\t\t\t\t}, 300000000000000, 1)]\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/harrydhillon.near/widget/NFTSwap.Order", "fact_widget_deployments_id": "faa1c1d22b2ffe2be96ad6f7b5072f22", "inserted_timestamp": "2023-09-21T19:27:34.672Z", "modified_timestamp": "2023-09-21T19:27:34.672Z", "__row_index": 25}