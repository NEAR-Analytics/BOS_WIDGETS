{"tx_hash": "8fnrwW3nFN2CdwsagxquTmWpKE9LXpV4ovvFC4iX75vE", "action_id_social": "2viUCex9ueu8QVejTu5kw5wTCpAx7NNS3gJftXWXsskP-0-widget", "block_id": 101585466, "block_timestamp": "2023-09-20T23:54:16.261Z", "signer_id": "harrydhillon.near", "widget_name": "NFTSwap.Order", "source_code": "const accountId = context.accountId;\n\ninitState({ allTransactions: [] });\n\nconst contract_id = \"swap.genadrop.near\";\n\nuseEffect(() => {\n  const allUserTransactionHashes = Near.view(\n    \"swap.genadrop.near\",\n    \"get_hashes_for_owner\",\n    {\n      owner_id: accountId,\n    }\n  );\n\n  const allTransactionData = [];\n\n  allUserTransactionHashes.map((item) => {\n    allTransactionData.push({\n      ...Near.view(\"swap.genadrop.near\", \"get_transaction_data\", {\n        hash: item,\n      }),\n      hash: item,\n    });\n  });\n\n  function processNFTs(nfts, hash) {\n    let arrayToReturn = [];\n    nfts.map(async (nft) => {\n      const nftContract = nft.contract_id;\n      const tokenId = nft.token_id;\n      const metadata = Near.view(nftContract, \"nft_metadata\", {\n        token_id: tokenId,\n      });\n      const baseUri = metadata.base_uri || \"\";\n\n      const nftMetadata = Near.view(nftContract, \"nft_token\", {\n        token_id: tokenId,\n      });\n      const media = nftMetadata.metadata.media;\n      const image =\n        media.startsWith(\"https\") || media.startsWith(\"http\")\n          ? media\n          : `${baseUri}/${media}`;\n      let collection = \"\";\n\n      if (nftContract === \"x.paras.near\") {\n        const response = fetch(\n          `https://api-v2-mainnet.paras.id/token?token_id=${tokenId}`\n        );\n        collection = response.data.results[0].metadata.collection_id;\n      }\n\n      arrayToReturn.push({\n        title: nftMetadata.metadata.title,\n        image: image,\n        token_id: tokenId,\n        contract_id: nftContract,\n        collection: collection ? collection : metadata.name,\n      });\n    });\n    return arrayToReturn;\n  }\n\n  State.update({ allTransactions: allTransactionData });\n\n  const nftData = [];\n  allTransactionData.map((item) => {\n    const senderNFTs = processNFTs(item.sender_nfts, item.hash);\n    const receiverNFTs = processNFTs(item.receiver_nfts, item.hash);\n    senderNFTs.map((item) => {\n      nftData.push(item);\n    });\n    receiverNFTs.map((item) => {\n      nftData.push(item);\n    });\n  });\n  State.update({ nftData });\n}, []);\n\nfunction divideByPowerOfTen(numStr) {\n  if (numStr.length <= 24) {\n    return (Number(numStr) / 1e24).toFixed(3);\n  }\n\n  let wholePart = numStr.slice(0, -24);\n  let fractionalPart = numStr.slice(-24);\n\n  // Remove trailing zeros from the fractional part\n  while (fractionalPart.endsWith(\"0\")) {\n    fractionalPart = fractionalPart.slice(0, -1);\n  }\n\n  // Create the result number\n  let result = parseFloat(\n    wholePart + (fractionalPart ? \".\" + fractionalPart : \"\")\n  );\n\n  // Generalized rounding\n  let rounded = Math.round(result * 1e3) / 1e3;\n\n  // Format the result to 3 decimal places\n  return rounded.toFixed(3);\n}\n\nreturn (\n  <>\n    {state.allTransactions.map((transaction) => (\n      <div\n        style={{\n          border: \"0px solid lightgray\",\n          borderBottomWidth: 1,\n          paddingBottom: 5,\n          border: \"1px solid lightgray\",\n          width: \"100%\",\n          borderRadius: 5,\n          padding: 10,\n        }}\n      >\n        <p style={{ marginBottom: 0 }}>Sender : {transaction.sender_id}</p>\n        <p style={{ marginBottom: 0 }}>\n          Near : {divideByPowerOfTen(`${transaction.sender_near}`)} \u24c3\n        </p>\n        <p style={{ marginBottom: 0 }}>Receiver : {transaction.receiver_id}</p>\n        <div\n          style={{\n            border: \"1px solid lightgray\",\n            width: \"100%\",\n            borderRadius: 5,\n            padding: 10,\n            display: \"grid\",\n            gridTemplateColumns: \"repeat(4, 1fr)\",\n            gap: \"10px\",\n            textAlign: \"center\",\n            marginBottom: 10,\n          }}\n        >\n          {transaction.receiver_nfts.map((item) => {\n            const transaction_data = state.nftData.filter(\n              (item) => item.token_id === item.token_id\n            )[0];\n            return (\n              <div>\n                <img\n                  style={{\n                    width: \"100%\",\n                    height: \"220px\",\n                    borderRadius: \"5px\",\n                    objectFit: \"cover\",\n                    marginBottom: 5,\n                  }}\n                  src={transaction_data.image}\n                />\n                <p style={{ marginBottom: 0, fontSize: 12 }}>\n                  Collection : {transaction_data.collection}\n                </p>\n                <p style={{ marginBottom: 0, fontSize: 12 }}>\n                  {transaction_data.contract_id}\n                </p>\n                <p style={{ marginBottom: 0, fontSize: 12 }}>\n                  {transaction_data.token_id}\n                </p>\n              </div>\n            );\n          })}\n        </div>\n\n        <button\n          onClick={() => {\n            Near.call(\n              contract_id,\n              \"cancel_offer\",\n              {\n                hash: transaction.hash,\n              },\n              300000000000000,\n              1\n            );\n          }}\n          style={{ backgroundColor: \"red\", borderWidth: 0 }}\n        >\n          Cancel\n        </button>\n        {accountId !== transaction.sender_id && (\n          <button\n            style={{\n              backgroundColor: \"blue\",\n              borderWidth: 0,\n            }}\n            onClick={() => {\n              const txns = transaction.receiver_nfts.map((item) => ({\n                contractName: item.contractId,\n                methodName: \"nft_transfer\",\n                args: {\n                  receiver_id: contract_id,\n                  token_id: item.tokenId,\n                  msg: transaction.hash,\n                  approval_id: 0,\n                },\n                gas: 300000000000000,\n                deposit: 1,\n              }));\n              Near.call(txns);\n            }}\n          >\n            Accept\n          </button>\n        )}\n      </div>\n    ))}\n  </>\n);\n\n// receiverId: nft.contract_id,\n// \t\t\t\t\tactions: [functionCall('nft_transfer_call', {\n// \t\t\t\t\t\treceiver_id: SWAP_CONTRACT,\n// \t\t\t\t\t\ttoken_id: nft.token_id,\n// \t\t\t\t\t\tapproval_id: 0,\n// \t\t\t\t\t\tmsg: hash,\n// \t\t\t\t\t}, 300000000000000, 1)]\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/harrydhillon.near/widget/NFTSwap.Order", "fact_widget_deployments_id": "1229c6bdad18d62cdef3e4cd0608f68a", "inserted_timestamp": "2023-09-21T01:47:39.574Z", "modified_timestamp": "2023-09-21T01:47:39.574Z", "__row_index": 18}