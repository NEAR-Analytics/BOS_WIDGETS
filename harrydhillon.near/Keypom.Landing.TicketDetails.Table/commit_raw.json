{"tx_hash": "581qAUTA6am8EcFKYsyLHchjQENCP1iCHNn4NDLuBcr", "action_id_social": "AVHE2a6UaPdaqdL1sjAnuEuosKyLnyUQfEXEeGaQxvxC-0-widget", "block_id": 99850091, "block_timestamp": "2023-08-28T11:53:06.343Z", "signer_id": "harrydhillon.near", "widget_name": "Keypom.Landing.TicketDetails.Table", "source_code": "const Table = styled.table`\n  width: 100%;\n  border-radius: 8px;\n  overflow:hidden;\n  border:0.1px solid #30C9F3;\n  margin: 20px 0;\n  border-collapse: separate;\n  border-spacing: 0;\n  background-color:white;\n`;\n\nconst TableHead = styled.thead`\n  background-color: #F8FAFC;\n`;\n\nconst TableRow = styled.tr`\n    padding:5px;\n`;\n\nconst TableHeader = styled.th`\n  padding: 14px;\n  font-weight:500;\n  text-align: left;\n`;\n\nconst TableCell = styled.td`\n  padding: 15px;\n`;\n\nconst ActionButton = styled.button`\n  padding: 5px 10px;\n  color:#00A7E4;\n  background-color:transparent;\n  border-width: 0px;\n  cursor: pointer;\n  &:focus {\n        outline: none;\n      }\n`;\n\nconst drops = [];\n\n// Helper function to generate a random date\nfunction randomDate(start, end) {\n  return new Date(\n    start.getTime() + Math.random() * (end.getTime() - start.getTime())\n  );\n}\n\nif (drops.length === 0) {\n  for (let i = 0; i < 20; i++) {\n    const drop = {\n      name: `Elaine Benes`, // Just giving a sequential name for simplicity\n      email: `elaine.benes@keypom.xyz`, // Randomly select between 'Event', 'NFT', and 'Token'\n      link: \"keypom.xyz/#rf5hhfaxm\", // Generate a random date between 2020-01-01 and 2023-08-22\n      status: [\"Purchased\", \"Claimed\", \"Scanned\"][\n        Math.floor(Math.random() * 3)\n      ],\n    };\n\n    drops.push(drop);\n  }\n}\n\nfunction Chip({ label, color, backgroundColor }) {\n  const style = {\n    padding: \"8px 16px\",\n    borderRadius: \"100px\",\n    display: \"inline-block\",\n    marginRight: \"10px\",\n    backgroundColor: backgroundColor,\n    color: color,\n    fontWeight: \"500\",\n  };\n\n  return <span style={style}>{label}</span>;\n}\n\nfunction ChipDisplay(name) {\n  const items = {\n    Purchased: {\n      fontColor: \"#475569\",\n      backgroundColor: \"#F8FAFC\",\n    },\n    Claimed: {\n      fontColor: \"#16A34A\",\n      backgroundColor: \"#F0FDF4\",\n    },\n    Scanned: {\n      backgroundColor: \"#F9F6E9\",\n      fontColor: \"#9E811B\",\n    },\n  };\n\n  return (\n    <div>\n      <Chip\n        label={name}\n        color={items[name].fontColor}\n        backgroundColor={items[name].backgroundColor}\n      />\n    </div>\n  );\n}\n\nfunction extractDateComponents(dateStr) {\n  const dateObj = new Date(dateStr);\n\n  const month = dateObj.toLocaleString(\"default\", { month: \"long\" }); // e.g., \"August\"\n  const date = dateObj.getDate(); // e.g., 3\n  const year = dateObj.getFullYear(); // e.g., 2023\n\n  return `${month} ${date}, ${year}`;\n}\n\nconst CompletelyClaimed = styled.div`\n    background-color:#F8FAFC;\n    color:#475569;\n    padding-top:3px;\n    padding-bottom:3px;\n    padding-left:10px;\n    padding-right:10px;\n    width:fit-content;\n`;\n\nconst Uncalimed = styled.div`\n    background-color:#F0FDF4;\n    color:#16A34A;\n    padding-top:3px;\n    padding-bottom:3px;\n    padding-left:10px;\n    padding-right:10px;\n        width:fit-content;\n`;\n\nconst claimedFunc = (claimed) =>\n  claimed ? (\n    <CompletelyClaimed>Claimed</CompletelyClaimed>\n  ) : (\n    <Uncalimed>1 of 6 Claimed</Uncalimed>\n  );\n\nreturn (\n  <div style={{}}>\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableHeader>Name</TableHeader>\n          <TableHeader>Email</TableHeader>\n          <TableHeader>Link</TableHeader>\n          <TableHeader>Status</TableHeader>\n          <TableHeader />\n        </TableRow>\n      </TableHead>\n      <tbody>\n        {drops.map((item) => (\n          <TableRow key={item.ticketName}>\n            <TableCell>{item.name}</TableCell>\n            <TableCell>{item.email}</TableCell>\n            <TableCell>{item.link}</TableCell>\n            <TableCell>{ChipDisplay(item.status)}</TableCell>\n            <TableCell>\n              <ActionButton\n                onClick={() => {\n                  State.update({ ticketPreview: item });\n                }}\n              >\n                View details\n              </ActionButton>\n            </TableCell>\n          </TableRow>\n        ))}\n      </tbody>\n    </Table>\n    {!!state.ticketPreview && (\n      <Widget\n        src=\"harrydhillon.near/widget/Keypom.Landing.TicketDetails.Preview\"\n        props={{\n          isOpen: !!state.ticketPreview,\n          ...state.ticketPreview,\n          onClose: () => {\n            State.update({\n              ticketPreview: null,\n            });\n          },\n        }}\n      />\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/harrydhillon.near/widget/Keypom.Landing.TicketDetails.Table", "fact_widget_deployments_id": "ea8dd6019418c39f0ffafc033c52304f", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}