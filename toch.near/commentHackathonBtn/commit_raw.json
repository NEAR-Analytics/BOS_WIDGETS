{"tx_hash": "JEEW8fRnTQjamffTbYZers4kEkSFVpLoikBoM995a59K", "action_id_social": "BpEz8ECLLLG5iLk82Y6BtNUMutRcksdy2ERJf37dSLnw-0-widget", "block_id": 104160496, "block_timestamp": "2023-10-25T07:32:01.559Z", "signer_id": "toch.near", "widget_name": "commentHackathonBtn", "source_code": "// if (!context.accountId) {\n//   return \"\";\n// }\n// const blockHeight = parseInt(\"now\");\n// props.blockHeight === \"now\" ? \"now\" : parseInt(props.blockHeight);\n\n// const item = props.item;\nconst item = {\n  type: \"social\",\n  path: `blaze.near/post/main`,\n  blockHeight: 104037685,\n};\n\n// const notifyAccountId = \"blaze.near\";\n\n// if (!context.accountId) {\n//   return \"\";\n// }\n\nconst content = {\n  type: \"md\",\n  text: \"Yesss!!!\",\n};\n\nconst composeData = () => {\n  const data = {\n    post: {\n      comment: JSON.stringify(Object.assign({ item }, content)),\n    },\n    index: {\n      comment: JSON.stringify({\n        key: item,\n        value: {\n          type: \"md\",\n        },\n      }),\n    },\n  };\n\n  // const thisItem = {\n  //   type: \"social\",\n  //   path: `${context.accountId}/post/comment`,\n  // };\n\n  // const extractMentions = (text) => {\n  //   const mentionRegex =\n  //     /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\n  //   mentionRegex.lastIndex = 0;\n  //   const accountIds = new Set();\n  //   for (const match of text.matchAll(mentionRegex)) {\n  //     if (\n  //       !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n  //       !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length)) &&\n  //       match[1].length >= 2 &&\n  //       match[1].length <= 64\n  //     ) {\n  //       accountIds.add(match[1].toLowerCase());\n  //     }\n  //   }\n  //   return [...accountIds];\n  // };\n\n  // const extractHashtags = (text) => {\n  //   const hashtagRegex = /#(\\w+)/gi;\n  //   hashtagRegex.lastIndex = 0;\n  //   const hashtags = new Set();\n  //   for (const match of text.matchAll(hashtagRegex)) {\n  //     if (\n  //       !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n  //       !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length))\n  //     ) {\n  //       hashtags.add(match[1].toLowerCase());\n  //     }\n  //   }\n  //   return [...hashtags];\n  // };\n\n  // const extractMentionNotifications = (text, item) =>\n  //   extractMentions(text || \"\")\n  //     .filter((accountId) => accountId !== context.accountId)\n  //     .map((accountId) => ({\n  //       key: accountId,\n  //       value: {\n  //         type: \"mention\",\n  //         item,\n  //       },\n  //     }));\n\n  // const notifications = extractMentionNotifications(content.text, thisItem);\n\n  // if (notifyAccountId && notifyAccountId !== context.accountId) {\n  //   notifications.push({\n  //     key: notifyAccountId,\n  //     value: {\n  //       type: \"comment\",\n  //       item,\n  //     },\n  //   });\n  // }\n\n  // if (notifications.length) {\n  //   data.index.notify = JSON.stringify(\n  //     notifications.length > 1 ? notifications : notifications[0]\n  //   );\n  // }\n\n  // const hashtags = extractHashtags(content.text);\n\n  // if (hashtags.length) {\n  //   data.index.hashtag = JSON.stringify(\n  //     hashtags.map((hashtag) => ({\n  //       key: hashtag,\n  //       value: thisItem,\n  //     }))\n  //   );\n  // }\n\n  return data;\n};\n\nState.init({\n  onChange: ({ content }) => {\n    State.update({ content });\n  },\n});\n\nreturn (\n  <>\n    <CommitButton\n      disabled={!content}\n      force\n      className=\"btn btn-primary rounded-5\"\n      data={composeData}\n      // onCommit={() => {\n      //   onCompose();\n      //   props.onComment && props.onComment(state.content);\n      // }}\n    >\n      Comment\n    </CommitButton>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/toch.near/widget/commentHackathonBtn", "fact_widget_deployments_id": "96afba99ffe301220661f36767ace47d", "inserted_timestamp": "2023-10-25T09:31:04.191Z", "modified_timestamp": "2023-10-25T09:31:04.191Z", "__row_index": 0}