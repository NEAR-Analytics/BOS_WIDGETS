{"tx_hash": "2fg4kPWFPbe2pNpfgVFASDMkdSWdp3ibZwxzRT4NV1tN", "action_id_social": "EFQxggGeegWGky4271niHQ2bgnAN1fDUigrAe4CYujkB-0-widget", "block_id": 92452000, "block_timestamp": "2023-05-22T13:27:30.222Z", "signer_id": "somepublicaddress.near", "widget_name": "Weather", "source_code": "const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 48px;\n  padding-bottom: 48px;\n  max-width: 600px;\n  margin: 0 auto;\n`;\n\nconst Search = styled.div``;\n\nconst WeatherInfo = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 16px;\n  font-size: 16px;\n`;\n\nconst WeatherItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 8px;\n`;\n\nconst WeatherLabel = styled.span`\n  font-weight: bold;\n`;\n\nconst WeatherData = styled.span``;\n\n// -------------------\n// --- STYLES ABOVE --\n// -------------------\n\nconst API_URL = \"https://api.api-ninjas.com/v1/weather?city=\";\nconst API_KEY = \"XnddRn6A0TXUDpq76POxuQ==9aJ5FrpbwPMD8fCH\";\n\nconst writeStateTerm = (term) => {\n  console.log(`Entering writeStateTerm, term: ${term}`); // eslint-disable-line no-console\n  State.update({\n    term: term,\n  });\n\n  if (term === \"\") {\n    State.update({\n      term: undefined,\n      weather: undefined,\n    });\n  }\n};\n\nconst fetchCityWeather = (cityNameString) => {\n  console.log(`Entering fetchCityWeather, cityNameString: ${cityNameString}`); // eslint-disable-line no-console\n  const thisURL = API_URL + cityNameString;\n  const params = {\n    method: \"GET\",\n    headers: {\n      \"X-Api-Key\": API_KEY,\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  return asyncFetch(thisURL, params);\n};\n\nconst formatCityWeatherResponse = (res) => {\n  console.log(\n    `Entering formatCityWeatherResponse, res: ${JSON.stringify(res)}`\n  ); // eslint-disable-line no-console\n  return res;\n};\n\nconst debounce = (callable, timeout) => {\n  return (args) => {\n    clearTimeout(state.timer);\n    State.update({\n      timer: setTimeout(() => callable(args), timeout ?? 750),\n    });\n  };\n};\n\nconst updateCity = debounce((term) => {\n  console.log(`Entering updateCity, term: ${term}`); // eslint-disable-line no-console\n  writeStateTerm(term);\n  const currentStateTerm = state.term;\n  console.log(`updateCity, currentStateTerm: ${currentStateTerm}`); // eslint-disable-line no-console\n  const currentStateWeather = JSON.stringify(state.weather);\n  console.log(`updateCity, currentStateWeather: ${currentStateWeather}`); // eslint-disable-line no-console\n  fetchCityWeather(term).then((response) => {\n    console.log(\n      `Passed fetchCityWeather, response: ${JSON.stringify(response)}`\n    ); // eslint-disable-line no-console\n    const res = formatCityWeatherResponse(response);\n    console.log(\n      `Passed formatCityWeatherResponse, res: ${JSON.stringify(res)}`\n    ); // eslint-disable-line no-console\n    State.update({ weather: res });\n  });\n});\n\nconst onSearchChange = ({ term }) => {\n  updateCity(term);\n};\n\nconst showSearchBar = props.showSearchBar ?? true;\n\nreturn (\n  <Wrapper>\n    {showSearchBar && (\n      <Search>\n        <Widget\n          src=\"chaotictempest.near/widget/SearchPill\"\n          props={{\n            onChange: onSearchChange,\n            placeholder: \"Type in a city name\",\n          }}\n        />\n      </Search>\n    )}\n    {state.weather && (\n      <WeatherInfo>\n        <WeatherItem>\n          <WeatherLabel>Cloud Percentage:</WeatherLabel>\n          <WeatherData>{state.weather.body.cloud_pct}%</WeatherData>\n        </WeatherItem>\n        <WeatherItem>\n          <WeatherLabel>Temperature:</WeatherLabel>\n          <WeatherData>{state.weather.body.temp}\u00b0C</WeatherData>\n        </WeatherItem>\n        <WeatherItem>\n          <WeatherLabel>Feels Like:</WeatherLabel>\n          <WeatherData>{state.weather.body.feels_like}\u00b0C</WeatherData>\n        </WeatherItem>\n        <WeatherItem>\n          <WeatherLabel>Humidity:</WeatherLabel>\n          <WeatherData>{state.weather.body.humidity}%</WeatherData>\n        </WeatherItem>\n        <WeatherItem>\n          <WeatherLabel>Min Temperature:</WeatherLabel>\n          <WeatherData>{state.weather.body.min_temp}\u00b0C</WeatherData>\n        </WeatherItem>\n        <WeatherItem>\n          <WeatherLabel>Max Temperature:</WeatherLabel>\n          <WeatherData>{state.weather.body.max_temp}\u00b0C</WeatherData>\n        </WeatherItem>\n        <WeatherItem>\n          <WeatherLabel>Wind Speed:</WeatherLabel>\n          <WeatherData>{state.weather.body.wind_speed}m/s</WeatherData>\n        </WeatherItem>\n        <WeatherItem>\n          <WeatherLabel>Wind Direction:</WeatherLabel>\n          <WeatherData>{state.weather.body.wind_degrees}\u00b0</WeatherData>\n        </WeatherItem>\n        <WeatherItem>\n          <WeatherLabel>Sunrise:</WeatherLabel>\n          <WeatherData>{state.weather.body.sunrise}</WeatherData>\n        </WeatherItem>\n        <WeatherItem>\n          <WeatherLabel>Sunset:</WeatherLabel>\n          <WeatherData>{state.weather.body.sunset}</WeatherData>\n        </WeatherItem>\n      </WeatherInfo>\n    )}\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/somepublicaddress.near/widget/Weather", "fact_widget_deployments_id": "4a1ed890127d90e4d529fd797ad20f54", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 0}