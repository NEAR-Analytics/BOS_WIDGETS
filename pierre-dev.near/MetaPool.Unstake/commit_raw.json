{"tx_hash": "7FBkHCg2hXAoRSNULRaV3vLJMcxrnBagBoUjjngKQYbT", "action_id_social": "GwYNMzyNDefqarLiuLpShYLWjZRbW7dqDqGDFadSAnYZ-0-widget", "block_id": 96916488, "block_timestamp": "2023-07-20T13:15:28.978Z", "signer_id": "pierre-dev.near", "widget_name": "MetaPool.Unstake", "source_code": "/** state init start */\nState.init({\n  inputValue: \"\",\n  inputError: \"\",\n});\n/** state init end */\n\n// load config\nconst { config, updateAccountInfo } = props;\nif (!config) {\n  return \"Component cannot be loaded. Missing `config` props\";\n}\n\n/** common lib start */\nconst accountId = props.accountId || context.accountId;\nconst isSignedIn = !!accountId;\nconst NEAR_DECIMALS = 24;\nconst stNEAR_DECIMALS = 24;\nconst BIG_ROUND_DOWN = 0;\n\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nfunction formatAmount(a) {\n  return isValid(a)\n    ? Number(a).toLocaleString(undefined, {\n      minimumFractionDigits: 5,\n      maximumFractionDigits: 5,\n    })\n    : a;\n}\n\n/** common lib end */\nconst stnearBalance = props.stnearBalance || \"-\";\n\n/** events start */\nconst onChange = (e) => {\n  // Has user signed in?\n  if (!isSignedIn) {\n    State.update({\n      inputError: \"Sign in please\",\n    });\n    return;\n  }\n\n  const targetValue = e.target.value;\n  if (targetValue !== \"\" && !targetValue.match(/^\\d*(\\.\\d*)?$/)) {\n    return;\n  }\n  let stakeAmount = targetValue.replace(/^0+/, \"0\"); // remove prefix 0\n  // limit 24 decimals\n  const most24DecimalsPattern = /^-?\\d+(\\.\\d{0,24})?/;\n  let values = stakeAmount.match(most24DecimalsPattern);\n  if (values) {\n    stakeAmount = values[0];\n  }\n  if (\n    stnearBalance &&\n    (isNaN(Number(stakeAmount)) ||\n      stakeAmount === \"\" ||\n      Big(stakeAmount).lt(1) ||\n      Big(stakeAmount).gt(Big(stnearBalance)))\n  ) {\n    if (\n      isNaN(Number(stakeAmount)) ||\n      stakeAmount === \"\" ||\n      Big(stakeAmount).lt(1)\n    ) {\n      State.update({\n        inputValue: stakeAmount,\n        inputError: \"Stake at least 1 NEAR\",\n      });\n    } else {\n      State.update({\n        inputValue: stakeAmount,\n        inputError: `Max is ${stnearBalance} NEAR`,\n      });\n    }\n    return;\n  }\n  State.update({\n    inputValue: stakeAmount,\n    inputError: \"\",\n  });\n};\n\nconst onClickMax = () => {\n  if (\n    isNaN(Number(stnearBalance)) ||\n    stnearBalance === \"\" ||\n    Big(stnearBalance).lt(1)\n  ) {\n    State.update({\n      inputValue: stnearBalance,\n      inputError: \"Unstake at least 1 stNEAR\",\n    });\n    return;\n  } else {\n    State.update({\n      inputValue: stnearBalance,\n      inputError: \"\",\n    });\n  }\n};\n\nconst onClickStake = () => {\n  const stakeAmount = state.inputValue;\n  if (\n    stnearBalance &&\n    (isNaN(Number(stakeAmount)) ||\n      stakeAmount === \"\" ||\n      Big(stakeAmount).lt(1) ||\n      Big(stakeAmount).gt(Big(stnearBalance)))\n  ) {\n    if (\n      isNaN(Number(stakeAmount)) ||\n      stakeAmount === \"\" ||\n      Big(stakeAmount).lt(1)\n    ) {\n      State.update({ inputError: \"Unstake at least 1 stNEAR\" });\n    } else if (Big(stakeAmount).gt(Big(stnearBalance))) {\n      State.update({\n        inputError: `Max is ${stnearBalance} stNEAR`,\n      });\n    } else setInputError(\"\");\n    return;\n  }\n\n  const unstake = {\n    contractName: config.contractId,\n    methodName: \"unstake\",\n    deposit: 0,\n    args: { amount: Big(state.inputValue).mul(Big(10).pow(stNEAR_DECIMALS)).toFixed(0) },\n  };\n  const registerFt = {\n    contractName: config.contractId,\n    methodName: \"ft_balance_of\",\n    args: {\n      account_id: accountId,\n    },\n  };\n  const txs = [unstake];\n  // If account has no StNEAR, we assume she/he needs to register StNEAR token.\n  // By adding a `ft_balance_of` function call, the NEAR indexer will automatically\n  // add StNEAR token into caller's NEAR wallet token list.\n  if (Number(stnearBalance) === 0) {\n    txs.push(registerFt);\n  }\n\n  Near.call(txs);\n\n  // update account balances\n  if (updateAccountInfo) {\n    updateAccountInfo();\n  }\n};\n/** events end */\n\nconst disabledStakeButton =\n  !isValid(state.inputValue) || Big(state.inputValue).eq(0) || state.inputError;\n\nconst stnearPrice = Big(\n  Near.view(config.contractId, \"get_st_near_price\", `{}`) ?? \"0\"\n).div(Big(10).pow(24));\n\nconst receivedStnear = (\n  stnearPrice.lte(0)\n    ? Big(0)\n    : Big(isValid(state.inputValue) ? state.inputValue : 0).mul(stnearPrice)\n).toFixed(5, BIG_ROUND_DOWN);\nconst formattedReceivedStnear = formatAmount(receivedStnear);\n\nconst StakeFormWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  width: 100%;\n  border-radius: 16px;\n  width: 100%;\n  align-items: center;\n  div {\n    gap: 20px;\n  }\n`;\n\nconst Spacer = styled.div`\n  height: 20px;\n`;\n\nconst AlertContent = styled.div`\n  display: inline-flex;\n  align-items: center;\n`;\n\nconst alertContent = (\n  <AlertContent>\n    <div style={{}}>Delayed unstake takes up to 6 days to complete.</div>\n    <Widget\n      style={{\n        width: \"30%\"\n      }}\n      src={`${config.ownerId}/widget/MetaPool.Element.Button`}\n      props={{\n        onClick: () => {\n          props.updateAction(\"liquid-unstake\");\n        },\n        text: \"Try fast\",\n        full: \"sm\",\n        type: \"outline\"\n      }}\n    />\n  </AlertContent>\n);\n\nreturn (\n  <StakeFormWrapper>\n\n    <div>\n      <Widget\n        src={`${config.ownerId}/widget/MetaPool.Element.Alert`}\n        props={{\n          children: alertContent,\n        }}\n      />\n      <Spacer />\n      <Widget\n        src={`${config.ownerId}/widget/MetaPool.Element.Input`}\n        props={{\n          placeholder: \"Enter stNEAR amount\",\n          value: state.inputValue,\n          onChange,\n          onClickMax,\n          inputError: state.inputError,\n          balance: stnearBalance,\n          iconName: \"NEAR\",\n          iconUrl:\n            \"https://ipfs.near.social/ipfs/bafkreid5xjykpqdvinmj432ldrkbjisrp3m4n25n4xefd32eml674ypqly\",\n        }}\n      />\n      <Spacer />\n      <Widget\n        src={`${config.ownerId}/widget/MetaPool.Element.YouWillGet`}\n        props={{\n          value: formattedReceivedStnear,\n          price: stnearPrice\n            .toPrecision(5)\n            .replace(/\\.?0+$/, \"\") + \" NEAR\",\n          iconName: \"NEAR\",\n          iconUrl:\n            \"https://ipfs.near.social/ipfs/bafkreid5xjykpqdvinmj432ldrkbjisrp3m4n25n4xefd32eml674ypqly\",\n        }}\n      />\n    </div>\n    <Widget\n      src={`${config.ownerId}/widget/MetaPool.Element.Button`}\n      props={{\n        onClick: onClickStake,\n        disabled: disabledStakeButton,\n        text: \"Unstake now\",\n      }}\n    />\n    {/* <Widget\n      src={`${config.ownerId}/widget/MetaPool.Message.YouWillReceive`}\n      props={{ text: `${formattedReceivedStnear} StNEAR` }}\n    /> */}\n  </StakeFormWrapper >\n);\n", "metadata": {"description": "StNEAR Unstake Component", "image": {"ipfs_cid": "bafkreihszlp5bu7xe3pwn4x3xmhazcxjxo4d5gsnhr2a4kthnzn6fzhn5i"}, "name": "Unstake Component | StNEAR", "tags": {"component": "", "stnear": "", "unstake": "", "widget": ""}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/pierre-dev.near/widget/MetaPool.Unstake", "fact_widget_deployments_id": "1678a438ee2854a910385afa7b84e096", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}