{"tx_hash": "6Q7CVxAVuTFiFngVZ9AR9biXLz7WBaEfwwugJMU7GTSE", "action_id_social": "14DC7qo18USUWTQh5AdfGvjz16LGuSD9m3Dqg9coo66T-0-widget", "block_id": 105290500, "block_timestamp": "2023-11-09T11:25:06.502Z", "signer_id": "0xfafa.near", "widget_name": "Avalanche.Swap.SwapV2", "source_code": "const { title } = props;\nconst WETH_ADDRESS = \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\";\nconst DexConfig = {\n  TraderJoe: {\n    factoryAddress: \"0x8e42f2F4101563bF679975178e880FD87d3eFd4e\",\n    routerAddress: \"0xb4315e873dBcf96Ffd0acd8EA43f689D8c20fB30\",\n    quoterAddress: \"0xd76019A16606FDa4651f636D9751f500Ed776250\",\n    uniType: \"v3\",\n    defaultCurrencies: {\n      input: {\n        chainId: 43114,\n        address: \"native\",\n        decimals: 18,\n        symbol: \"AVAX\",\n        name: \"Avalanche\",\n        icon: \"https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/avalanchec/assets/0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7/logo.png\",\n      },\n      output: {\n        chainId: 43114,\n        address: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n        decimals: 18,\n        symbol: \"WAVAX\",\n        name: \"Wrapped AVAX\",\n        icon: \"https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/avalanchec/assets/0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7/logo.png\",\n      },\n    },\n  },\n};\nlet initialLoading = false;\nif (Storage.privateGet(\"prevTitle\") !== title || !state.config) {\n  State.update({\n    config: DexConfig[title],\n    inputCurrency: DexConfig[title].defaultCurrencies.input,\n    outputCurrency: DexConfig[title].defaultCurrencies.output,\n    uniType: DexConfig[title].type,\n    inputCurrencyAmount: \"1\",\n    outputCurrencyAmount: \"\",\n    maxInputBalance: \"0\",\n    maxOutputBalance: \"0\",\n    tradeType: \"in\",\n    targetUnitAmount: 0,\n    noPair: false,\n    updateInputTokenBalance: true,\n    updateOutputTokenBalance: true,\n    loading: true,\n    displayCurrencySelect: false,\n    selectedTokenAddress: \"\",\n    currencySelectType: 0,\n  });\n  initialLoading = true;\n  Storage.privateSet(\"prevTitle\", title);\n}\n// styled area\nconst AVAXSwap = styled.div``;\nconst Title = styled.div`\n  color: #3d76ff;\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 22px;\n  padding-left: 30px;\n  padding-bottom: 10px;\n  @media (max-width: 900px) {\n    display: none;\n  }\n`;\nconst Panel = styled.div`\n  width: 100%;\n  border-radius: 16px;\n  border: 1px solid #ececfe;\n  padding: 30px;\n  background-color: #FFF;\n`;\nconst ExchangeIcon = styled.div`\n  width: 60px;\n  margin: 20px auto;\n  svg {\n    color: #82a7ff;\n  }\n`;\nconst PanelLabel = styled.div`\n  color: #82a7ff;\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 22px;\n`;\nconst Price = styled.div`\n  font-size: 14px;\n  color: #4f5375;\n  text-align: right;\n  margin-bottom: 30px;\n  margin-top: 20px;\n  @media (max-width: 768px) {\n    margin-top: 10px;\n  }\n`;\nconst SwapButton = styled.button`\n  width: 100%;\n  height: 60px;\n  border-radius: 10px;\n  background-color: #004bfc;\n  color: #fff;\n  font-size: 18px;\n  line-height: 22px;\n  border: none;\n  transition: 0.5s;\n  cursor: pointer;\n  :hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\n// styled area end\n\nconst getPairContract = (_pairAddress) =>\n  new ethers.Contract(\n    _pairAddress,\n    [\n      {\n        constant: true,\n        inputs: [],\n        name: \"getReserves\",\n        outputs: [\n          { internalType: \"uint112\", name: \"_reserve0\", type: \"uint112\" },\n          { internalType: \"uint112\", name: \"_reserve1\", type: \"uint112\" },\n          {\n            internalType: \"uint32\",\n            name: \"_blockTimestampLast\",\n            type: \"uint32\",\n          },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n      {\n        constant: true,\n        inputs: [],\n        name: \"token0\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n\nconst getBestTrade = () => {\n  const curDexUniType = DexConfig[title].uniType;\n  if (\n    !state.inputCurrency.address ||\n    !state.outputCurrency.address ||\n    curDexUniType === \"v3\"\n  ) {\n    State.update({\n      loading: false,\n    });\n    return;\n  }\n  const wrapType =\n    state.inputCurrency.address === \"native\" &&\n    state.outputCurrency.symbol === \"WETH\"\n      ? 1\n      : state.inputCurrency.symbol === \"WETH\" &&\n        state.outputCurrency.address === \"native\"\n      ? 2\n      : 0;\n  if (wrapType) {\n    State.update(\n      state.tradeType === \"in\"\n        ? {\n            outputCurrencyAmount: state.inputCurrencyAmount,\n            loading: false,\n            noPair: false,\n          }\n        : {\n            inputCurrencyAmount: state.outputCurrencyAmount,\n            loading: false,\n            noPair: false,\n          }\n    );\n    return;\n  }\n  const currentCurrency =\n    state.tradeType === \"in\" ? state.inputCurrency : state.outputCurrency;\n  const currentAmount = Big(\n    state.tradeType === \"in\"\n      ? state.inputCurrencyAmount\n      : state.outputCurrencyAmount\n  )\n    .mul(0.995)\n    .toFixed(5);\n  const outCurrency =\n    state.tradeType === \"in\" ? state.outputCurrency : state.inputCurrency;\n  const RouterContract = new ethers.Contract(\n    state.config.routerAddress,\n    [\n      {\n        inputs: [\n          { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n          { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n        ],\n        name: \"getAmountsOut\",\n        outputs: [\n          { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  const path = [\n    currentCurrency.address === \"native\"\n      ? WETH_ADDRESS\n      : currentCurrency.address,\n    outCurrency.address === \"native\" ? WETH_ADDRESS : outCurrency.address,\n  ];\n  RouterContract.getAmountsOut(\n    ethers.utils.parseUnits(currentAmount, currentCurrency.decimals),\n    path\n  )\n    .then((res) => {\n      State.update({\n        outputCurrencyAmount: Big(\n          ethers.utils.formatUnits(res[1], outCurrency.decimals)\n        ).toFixed(4),\n        loading: false,\n        noPair: false,\n      });\n    })\n    .catch(() => {\n      State.update({\n        loading: false,\n        noPair: true,\n      });\n    });\n};\n\nif (initialLoading) {\n  getBestTrade();\n}\n\nfunction debounce(fn, wait) {\n  let timer;\n  return () => {\n    clearTimeout(timer);\n    timer = setTimeout(fn, wait);\n  };\n}\nconst debouncedGetBestTrade = debounce(getBestTrade, 500);\n\nconst getUnitAmount = () => {\n  const bigInputAmount = Big(state.inputCurrencyAmount || 0);\n  const bigOutputAmount = Big(state.outputCurrencyAmount || 0);\n  if (bigInputAmount.eq(0) || bigOutputAmount.eq(0)) return \"-\";\n  const unitAmount = bigOutputAmount.div(bigInputAmount);\n  if (unitAmount.lt(0.001)) return unitAmount.toPrecision(1);\n  return unitAmount.toFixed(3);\n};\n\nreturn (\n  <AVAXSwap>\n    <Title>{title}</Title>\n    <Panel>\n      <PanelLabel>Swap From</PanelLabel>\n      <Widget\n        src=\"0xfafa.near/widget/Avalanche.Swap.CurrencyInput\"\n        props={{\n          currency: state.inputCurrency,\n          amount: state.inputCurrencyAmount,\n          updateTokenBalance: state.updateInputTokenBalance,\n          onCurrencySelectOpen: () => {\n            State.update({\n              displayCurrencySelect: true,\n              currencySelectType: 0,\n              selectedTokenAddress: state.inputCurrency.address,\n            });\n          },\n          onUpdateCurrencyBalance: (balance) => {\n            State.update({\n              maxInputBalance: ethers.utils.formatUnits(\n                balance,\n                state.inputCurrency.decimals\n              ),\n              updateInputTokenBalance: false,\n            });\n          },\n          onAmountChange: (val) => {\n            State.update({\n              inputCurrencyAmount: val,\n              tradeType: \"in\",\n              loading:\n                val &&\n                Number(val) &&\n                state.inputCurrency.address &&\n                state.outputCurrency.address,\n            });\n            if (val && Number(val)) debouncedGetBestTrade();\n          },\n        }}\n      />\n      <ExchangeIcon\n        onClick={() => {\n          const [inputCurrency, outputCurrency] = [\n            state.outputCurrency,\n            state.inputCurrency,\n          ];\n          State.update({\n            inputCurrency,\n            outputCurrency,\n            outputCurrencyAmount: \"\",\n            tradeType: \"in\",\n            updateInputTokenBalance: true,\n            updateOutputTokenBalance: true,\n            loading: true,\n          });\n          if (Big(state.inputCurrencyAmount || 0).gt(0)) getBestTrade();\n        }}\n      >\n        <Widget src=\"bluebiu.near/widget/Base.BaseExchangeIcon\" />\n      </ExchangeIcon>\n      <PanelLabel>To</PanelLabel>\n      <Widget\n        src=\"0xfafa.near/widget/Avalanche.Swap.CurrencyInput\"\n        props={{\n          currency: state.outputCurrency,\n          amount: state.outputCurrencyAmount,\n          updateTokenBalance: state.updateOutputTokenBalance,\n          disabled: true,\n          onCurrencySelectOpen: () => {\n            State.update({\n              displayCurrencySelect: true,\n              currencySelectType: 1,\n              selectedTokenAddress: state.outputCurrency.address,\n            });\n          },\n          onUpdateCurrencyBalance: () => {\n            State.update({\n              updateOutputTokenBalance: false,\n            });\n          },\n        }}\n      />\n      <Price>\n        1 {state.inputCurrency.symbol}\u2248 {getUnitAmount()}{\" \"}\n        {state.outputCurrency.symbol}\n      </Price>\n      <Widget\n        src=\"0xfafa.near/widget/Avalanche.Swap.SwapButton\"\n        props={{\n          routerAddress: state.config.routerAddress,\n          wethAddress: WETH_ADDRESS,\n          title,\n          inputCurrency: state.inputCurrency,\n          outputCurrency: state.outputCurrency,\n          inputCurrencyAmount: state.inputCurrencyAmount,\n          outputCurrencyAmount: state.outputCurrencyAmount,\n          maxInputBalance: state.maxInputBalance,\n          onSuccess: () => {\n            State.update({\n              updateInputTokenBalance: true,\n              updateOutputTokenBalance: true,\n            });\n          },\n          noPair: state.noPair,\n          loading: state.loading,\n          fee: state.v3Fee,\n          uniType: DexConfig[title].uniType,\n        }}\n      />\n    </Panel>\n    {state.displayCurrencySelect && (\n      <Widget\n        src=\"0xfafa.near/widget/Avalanche.Swap.CurrencySelect\"\n        props={{\n          display: state.displayCurrencySelect,\n          selectedTokenAddress: state.selectedTokenAddress,\n          title: props.title,\n          onClose: () => {\n            State.update({\n              displayCurrencySelect: false,\n            });\n          },\n          onSelect: (currency) => {\n            const updatedParams = {\n              outputCurrencyAmount: \"\",\n              noPair: false,\n              updateInputTokenBalance: true,\n            };\n            if (state.currencySelectType === 0) {\n              updatedParams.inputCurrency = currency;\n              if (currency.address === state.outputCurrency.address)\n                updatedParams.outputCurrency = null;\n            }\n            if (state.currencySelectType === 1) {\n              updatedParams.outputCurrency = currency;\n              if (currency.address === state.inputCurrency.address) {\n                updatedParams.inputCurrency = null;\n                updatedParams.inputCurrencyAmount = \"\";\n              }\n            }\n            if (\n              state.inputCurrencyAmount &&\n              Number(state.inputCurrencyAmount) &&\n              state.inputCurrency?.address\n            ) {\n              updatedParams.loading = true;\n            }\n            State.update(updatedParams);\n            if (updatedParams.loading) getBestTrade();\n          },\n        }}\n      />\n    )}\n\n    {DexConfig[title].uniType === \"v3\" && (\n      <Widget\n        src=\"0xfafa.near/widget/Avalanche.Swap.QuoterV3\"\n        props={{\n          amountIn: state.inputCurrencyAmount,\n          tokenIn: state.inputCurrency,\n          tokenOut: state.outputCurrency,\n          quoterContractId: DexConfig[title].quoterAddress,\n          loadAmountOut: (data) => {\n            State.update({\n              outputCurrencyAmount: data.amountOut,\n              v3Fee: data.fee,\n              loading: false,\n            });\n          },\n        }}\n      />\n    )}\n  </AVAXSwap>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/0xfafa.near/widget/Avalanche.Swap.SwapV2", "fact_widget_deployments_id": "a0752f0e26b7061ca563c5cf3c3cfd40", "inserted_timestamp": "2023-11-09T13:30:31.513Z", "modified_timestamp": "2023-11-09T13:30:31.513Z", "__row_index": 0}