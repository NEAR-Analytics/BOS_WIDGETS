{"tx_hash": "BVNp6cxbbMHRavzrDzdZ65i6W87YDoBvQFsj5G6Pnmvy", "action_id_social": "4qwn4FmMykgD25UxmfRHMy5be3Kppj3H6mjR36m7P77D-0-widget", "block_id": 118912466, "block_timestamp": "2024-05-14T16:35:40.021Z", "signer_id": "abnakore.near", "widget_name": "ManageParties", "source_code": "// Get the user's accountId\nconst accountId = context.accountId;\n\n// Declaring variables\n// !!!\n// const voteId = props.vote && parseFloat(props.vote);\nconst voteId = 113225718; // 113239184\n\n// All the votes\n// const [allVotes, setAllVotes] = useState([]);\n// const [voteToRender, setVoteToRender] = useState([]);\nconst allVotes = Social.index(\"voteChainTest\", \"vote\")\n  ? Social.index(\"voteChainTest\", \"vote\")\n  : [];\nconst [otherParties, setOtherParties] = useState(\n  Social.index(\"voteChainTest\", \"party\")\n    ? Social.index(\"voteChainTest\", \"party\")\n    : []\n);\n\n// Set the value of voteto render by adding other parties to it\nfunction getValue() {\n  var temp = allVotes.find((vote) => vote.blockHeight === voteId);\n  return {\n    ...temp,\n    value: {\n      ...temp.value,\n      parties: temp.value.parties.concat(\n        otherParties\n          .filter(\n            (party) =>\n              party.value.voteId === voteId &&\n              party.value.name &&\n              party.value.acronym\n          )\n          .map((party) => ({\n            name: party.value.name,\n            acronym: party.value.acronym,\n          }))\n      ),\n    },\n  };\n}\nconst [voteToRender, setVoteToRender] = useState(getValue());\n\n// Get all the votes\nuseEffect(() => {\n  // Set the vote to be rendered\n  setVoteToRender(getValue());\n  console.log(voteToRender, allVotes, \"votesData\");\n}, [allVotes]);\n\nfunction refresh() {\n  setOtherParties(\n    Social.index(\"voteChainTest\", \"party\")\n      ? Social.index(\"voteChainTest\", \"party\")\n      : []\n  );\n  setVoteToRender(getValue());\n  setNewParty({ name: \"\", acronym: \"\" });\n\n  // Remove the error\n  setState({\n    ...state,\n    error: \"\",\n    showError: false,\n  });\n\n  console.log(\"done\", otherParties);\n}\n\n// Storing some data in state\nconst [state, setState] = useState({\n  error: \"\",\n  showError: false,\n});\n\n// Pages that will be displayed in the aside\nconst [pages, setPages] = useState([]);\n\n// Add admin pages if the user is the creator of the vote\nuseEffect(() => {\n  if (voteToRender.value.creator === accountId) {\n    setPages([\n      {\n        name: \"Voting Page\",\n        link: `https://near.social/abnakore.near/widget/App.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Result\",\n        link: `https://near.social/abnakore.near/widget/Result.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Admin Home\",\n        link: `https://near.social/abnakore.near/widget/AdminHome?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Manage Candidates\",\n        link: `https://near.social/abnakore.near/widget/ManageCandidates?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Mange Parties\",\n        link: `https://near.social/abnakore.near/widget/ManageParties?vote=${voteToRender.blockHeight}`,\n      },\n    ]);\n  } else {\n    setPages([\n      {\n        name: \"Voting Page\",\n        link: `https://near.social/abnakore.near/widget/App.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Result\",\n        link: `https://near.social/abnakore.near/widget/Result.jsx?vote=${voteToRender.blockHeight}`,\n      },\n    ]);\n  }\n}, [voteToRender.value.creator === accountId]);\n\n// name and acro\nconst [newParty, setNewParty] = useState({\n  name: \"\",\n  acronym: \"\",\n});\n\n// Save the data and add a new candidate\nfunction save() {\n  if (newParty.name !== \"\" && newParty.acronym !== \"\") {\n    // Get All the parties again and validate\n    setOtherParties(\n      Social.index(\"voteChainTest\", \"party\")\n        ? Social.index(\"voteChainTest\", \"party\")\n        : []\n    );\n    setVoteToRender(getValue());\n\n    // check for no similar name or acronym\n    if (JSON.stringify(voteToRender.value.parties) !== JSON.stringify([])) {\n      const filtered = voteToRender.value.parties.filter((party) => {\n        return (\n          party.name.toLowerCase() === newParty.name.toLowerCase() ||\n          party.acronym.toLowerCase() === newParty.acronym.toLowerCase()\n        );\n      });\n      if (filtered.length > 0) {\n        setState({\n          ...state,\n          error: \"Two parties can not have thesame Name or Acronym\",\n          showError: true,\n        });\n        return;\n      }\n    }\n\n    // Check for 4 letters of the acronym\n    if (newParty.acronym.length <= 4 && newParty.acronym.length > 0) {\n      const NewParty = {\n        ...newParty,\n        acronym: newParty.acronym.toUpperCase(),\n        name: newParty.name\n          .toLowerCase()\n          .replace(/\\b\\w/g, (s) => s.toUpperCase()),\n        voteId: voteId,\n      };\n\n      console.log(NewParty);\n      // Upload the data to socialDb\n      // Social.set({\n      //   index: {\n      //     voteChainTest: JSON.stringify({ key: \"party\", value: NewParty }),\n      //   },\n      // });\n      // // console.log(newVotes);\n      // setNewParty({ name: \"\", acronym: \"\" });\n      // Remove the error\n      setState({\n        ...state,\n        error: \"\",\n        showError: false,\n      });\n\n      return {\n        index: {\n          voteChainTest: JSON.stringify({ key: \"party\", value: NewParty }),\n        },\n      };\n    } else {\n      setState({\n        ...state,\n        error: \"Acronym must be at most 4 letters\",\n        showError: true,\n      });\n      return null;\n    }\n  } else {\n    setState({\n      ...state,\n      error: `Party ${\n        newParty.name === \"\" ? \"Name\" : \"Acronym\"\n      } can not be empty`,\n      showError: true,\n    });\n  }\n}\n\nconst secText = styled.h3`\n    text-align: center;\n`;\n\nreturn (\n  <>\n    {accountId ? (\n      <Widget\n        src=\"abnakore.near/widget/Wrapper\"\n        props={{\n          body: (\n            <div className=\"main-body\">\n              {voteToRender ? (\n                <div className=\"two-sides\">\n                  <Widget\n                    src=\"abnakore.near/widget/Aside\"\n                    props={{\n                      objs: pages,\n                      active: `https://near.social/abnakore.near/widget/ManageParties?vote=${voteToRender.value.id}`,\n                    }}\n                  />\n                  {voteToRender.value.creator === accountId ? (\n                    <div className=\"body-contents\">\n                      <h1>Manage Parties</h1>\n                      <Widget\n                        src=\"abnakore.near/widget/Table\"\n                        props={{\n                          headings: [\"S/N\", \"Party Name\", \"Acronym\"],\n                          data: Object.values(\n                            voteToRender.value.parties.map((c, i) =>\n                              [i + 1].concat(Object.values(c))\n                            )\n                          ),\n                        }}\n                      />\n                      <div className=\"form\">\n                        <secText>Add Party</secText>\n                        {state.showError && (\n                          <p style={{ color: \"red\", textAlign: \"center\" }}>\n                            {state.error}\n                          </p>\n                        )}\n                        <div className=\"flex\">\n                          <Widget\n                            src=\"abnakore.near/widget/Input.jsx\"\n                            props={{\n                              type: \"text\",\n                              placeholder: \"Party Name\",\n                              required: true,\n                              item: \"name\",\n                              items: newParty,\n                              setItem: setNewParty,\n                              otherAttributes: {\n                                value: newParty.name,\n                              },\n                            }}\n                          />\n                          <Widget\n                            src=\"abnakore.near/widget/Input.jsx\"\n                            props={{\n                              type: \"text\",\n                              placeholder: \"Acronym\",\n                              required: true,\n                              item: \"acronym\",\n                              items: newParty,\n                              setItem: setNewParty,\n                              otherAttributes: {\n                                value: newParty.acronym,\n                              },\n                            }}\n                          />\n                        </div>\n                        <CommitButton data={save} onCommit={refresh}>\n                          Add\n                        </CommitButton>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"body-contents\">\n                      <h1>You don't have access to this page</h1>\n                      <a href=\"https://near.social/abnakore.near/widget/VoteChain\">\n                        Back to Home Page\n                      </a>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"body-contents\">\n                  <h1>Vote Doesn't exist</h1>\n                  {JSON.stringify(voteToRender)}\n                </div>\n              )}\n            </div>\n          ),\n        }}\n      />\n    ) : (\n      <Widget src=\"abnakore.near/widget/SignIn.jsx\" />\n    )}\n  </>\n);\n// {\n//   \"abnakore.near\": {\n//     \"parties\": \"[{\\\"name\\\":\\\"\\\",\\\"acronym\\\":\\\"\\\"}]\"\n//   }\n// }\n", "metadata": {"fork_of": "abnakore.near/widget/ManageParties@113181893"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/abnakore.near/widget/ManageParties", "fact_widget_deployments_id": "89ecf02fb194ea78b141628948b70a20", "inserted_timestamp": "2024-05-14T17:51:25.411Z", "modified_timestamp": "2024-05-14T18:54:02.790Z", "__row_index": 0}