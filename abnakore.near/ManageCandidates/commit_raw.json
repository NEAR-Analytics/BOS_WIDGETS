{"tx_hash": "2yUKEmT9YRhDXYneAVyHiNjvPN8Zi6FDY3mx5ShKu9kn", "action_id_social": "J6y4QeLwPpNmDf5hsExx8WB4eMLAQDnCJ7aPL1kLPDSM-0-widget", "block_id": 113181710, "block_timestamp": "2024-02-19T22:46:00.796Z", "signer_id": "abnakore.near", "widget_name": "ManageCandidates", "source_code": "// Get the user's accountId\nconst accountId = context.accountId;\n\n// Declaring variables\n// !!!\nconst voteId = props.vote && props.vote;\n// const voteId = 0;\n\n// All the votes\nconst [allVotes, setAllVotes] = useState([]);\nconst [voteToRender, setVoteToRender] = useState([]);\n\n// Get all the votes\nconst votesData = Social.get(`abnakore.near/votes`);\nuseEffect(() => {\n  if (votesData === undefined) {\n    // Set the votes to an empty list if there is no votes\n    setAllVotes([]);\n  } else {\n    setAllVotes(JSON.parse(votesData));\n  }\n  setVoteToRender(allVotes[voteId]);\n}, [votesData === null]);\n\n// Set the vote to be rendered\nuseEffect(() => {\n  setVoteToRender(allVotes[voteId]);\n}, [allVotes]);\n\n// Pages that will be displayed in the aside\nconst [pages, setPages] = useState([\n  {\n    name: \"Voting Page\",\n    link: `https://near.org/abnakore.near/widget/App.jsx?vote=${voteToRender.id}`,\n  },\n  {\n    name: \"Result\",\n    link: `https://near.org/abnakore.near/widget/Result.jsx?vote=${voteToRender.id}`,\n  },\n]);\n\n// Add admin pages if the user is the creator of the vote\nuseEffect(() => {\n  if (voteToRender.creator === accountId) {\n    setPages([\n      {\n        name: \"Voting Page\",\n        link: `https://near.org/abnakore.near/widget/App.jsx?vote=${voteToRender.id}`,\n      },\n      {\n        name: \"Result\",\n        link: `https://near.org/abnakore.near/widget/Result.jsx?vote=${voteToRender.id}`,\n      },\n      {\n        name: \"Admin Home\",\n        link: `https://near.org/abnakore.near/widget/AdminHome?vote=${voteToRender.id}`,\n      },\n      {\n        name: \"Manage Candidates\",\n        link: `https://near.org/abnakore.near/widget/ManageCandidates?vote=${voteToRender.id}`,\n      },\n      {\n        name: \"Mange Parties\",\n        link: `https://near.org/abnakore.near/widget/ManageParties?vote=${voteToRender.id}`,\n      },\n    ]);\n  } else {\n    setPages([\n      {\n        name: \"Voting Page\",\n        link: `https://near.org/abnakore.near/widget/App.jsx?vote=${voteToRender.id}`,\n      },\n      {\n        name: \"Result\",\n        link: `https://near.org/abnakore.near/widget/Result.jsx?vote=${voteToRender.id}`,\n      },\n    ]);\n  }\n}, [voteToRender.creator === accountId]);\n\n// Function that get the unselected parties\nfunction getUnusedParties() {\n  const usedParties = voteToRender.candidates.map(\n    (candidate) => candidate.party\n  );\n  const unusedParties = voteToRender.parties.filter(\n    (party) => !usedParties.includes(party.acronym)\n  );\n  return unusedParties;\n}\n\n// List of candidates and their curresponding number of votes\n// const [candidates, setCandidates] = useState([]);\n\n// name and acro\nconst [newCandidate, setNewCandidate] = useState({\n  name: \"\",\n  party: \"\",\n  role: \"\",\n  votes: 0,\n});\n\n// Update the dropdown\nfunction updateDropDown(e) {\n  setNewCandidate((prev) => {\n    prev.party = e.target.value;\n    return prev;\n  });\n}\n\n// Save the data and add a new candidate\nfunction save() {\n  if (newCandidate.name !== \"\" && newCandidate.party !== \"\") {\n    const newVotes = allVotes.map((vote) =>\n      vote.id === voteToRender.id\n        ? {\n            ...vote,\n            candidates: [\n              ...vote.candidates,\n              {\n                ...newCandidate,\n                name: newCandidate.name\n                  .toLowerCase()\n                  .replace(/\\b\\w/g, (s) => s.toUpperCase()),\n                role: voteToRender.role,\n                votes: 0,\n              },\n            ],\n          }\n        : vote\n    );\n\n    // Upload the data to socialDb\n    Social.set({ votes: newVotes });\n    setNewCandidate({\n      name: \"\",\n      party: \"\",\n      role: \"\",\n      votes: 0,\n    });\n  }\n}\n\nfunction refresh() {\n  // Get all the votes\n  const votesDatas = Social.get(`abnakore.near/votes`);\n  if (votesDatas === undefined) {\n    // Set the votes to an empty list if there is no votes\n    setAllVotes([]);\n  } else {\n    setAllVotes(JSON.parse(votesDatas));\n  }\n  setVoteToRender(allVotes[voteId]);\n\n  console.log(\"done\");\n}\n\nconst secText = styled.h3`\n    text-align: center;\n`;\n\n// Only signed In users can access the page\nreturn (\n  <>\n    {accountId ? (\n      <Widget\n        src=\"abnakore.near/widget/Wrapper\"\n        props={{\n          body: (\n            <div className=\"main-body\">\n              {voteToRender ? (\n                <div className=\"two-sides\">\n                  <Widget\n                    src=\"abnakore.near/widget/Aside\"\n                    props={{ objs: pages, active: \"/admin/manage_candidates\" }}\n                  />\n                  {voteToRender.creator === accountId ? (\n                    <div className=\"body-contents\">\n                      <h1>Manage Candidates</h1>\n                      <Widget\n                        src=\"abnakore.near/widget/Table\"\n                        props={{\n                          headings: [\n                            \"S/N\",\n                            \"Candidate's Name\",\n                            \"Party\",\n                            \"Role\",\n                            \"Number of votes\",\n                          ],\n                          data: Object.values(\n                            voteToRender.candidates\n                              .sort((a, b) => a.name > b.name)\n                              .map((c, i) => [i + 1].concat(Object.values(c)))\n                          ),\n                        }}\n                      />\n                      <div className=\"form\">\n                        <secText>Add Candidate</secText>\n                        <div className=\"flex\">\n                          <Widget\n                            src=\"abnakore.near/widget/Input.jsx\"\n                            props={{\n                              type: \"text\",\n                              placeholder: \"Full Name\",\n                              required: true,\n                              item: \"name\",\n                              items: newCandidate,\n                              setItem: setNewCandidate,\n                              otherAttributes: {\n                                value: newCandidate.name,\n                              },\n                            }}\n                          />\n\n                          <select\n                            className=\"drop-down\"\n                            value={newCandidate.party}\n                            onChange={updateDropDown}\n                            name=\"party\"\n                            required\n                          >\n                            <option className=\"option\" value=\"\">\n                              Select Party\n                            </option>\n                            {getUnusedParties().map((party) => (\n                              <option\n                                className=\"option\"\n                                key={party.acronym}\n                                value={party.acronym}\n                              >\n                                {party.name} ({party.acronym})\n                              </option>\n                            ))}\n                          </select>\n                        </div>\n                        <button onClick={save} onCommit={refresh()}>\n                          Add\n                        </button>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"body-contents\">\n                      <h1>Can not access this page</h1>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"body-contents\">\n                  <h1>Vote Doesn't exist</h1>\n                </div>\n              )}\n            </div>\n          ),\n        }}\n      />\n    ) : (\n      <Widget src=\"abnakore.near/widget/SignIn.jsx\" props={props} />\n    )}\n  </>\n);\n", "metadata": {"fork_of": "abnakore.near/widget/ManageCandidates@110908054"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/abnakore.near/widget/ManageCandidates", "fact_widget_deployments_id": "004eb991d1567696ffc7ff4396dacbe4", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}