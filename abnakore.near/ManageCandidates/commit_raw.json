{"tx_hash": "45Tyay826RTk644nJ4G1xeUunxTaqkbmdETgAmQHcaft", "action_id_social": "6uteAGgFNodeNGqKzfvXbyifwewPThpTqcpdVWKbcL5J-0-widget", "block_id": 118912598, "block_timestamp": "2024-05-14T16:38:38.313Z", "signer_id": "abnakore.near", "widget_name": "ManageCandidates", "source_code": "// Get the user's accountId\nconst accountId = context.accountId;\n\n// Declaring variables\n// !!!\nconst voteId = props.vote && parseFloat(props.vote);\n// const voteId = 113239184;\n\n// All the votes\n// const [allVotes, setAllVotes] = useState([]);\n// const [voteToRender, setVoteToRender] = useState([]);\nconst allVotes = Social.index(\"voteChainTest\", \"vote\")\n  ? Social.index(\"voteChainTest\", \"vote\")\n  : [];\nconst [otherCandidates, setOtherCandidates] = useState(\n  Social.index(\"voteChainTest\", \"candidate\")\n    ? Social.index(\"voteChainTest\", \"candidate\")\n    : []\n);\nconst otherParties = Social.index(\"voteChainTest\", \"party\");\n\n// Set the value of votetorender by adding other parties and candidates to it\nfunction getValue() {\n  console.log(otherCandidates);\n  var temp = allVotes.find((vote) => vote.blockHeight === voteId);\n  return {\n    ...temp,\n    value: {\n      ...temp.value,\n      parties: temp.value.parties.concat(\n        otherParties\n          .filter(\n            (party) =>\n              party.value.voteId === voteId &&\n              party.value.name &&\n              party.value.acronym\n          )\n          .map((party) => ({\n            name: party.value.name,\n            acronym: party.value.acronym,\n          }))\n      ),\n      candidates: temp.value.candidates.concat(\n        otherCandidates\n          .filter(\n            (candidate) =>\n              candidate.value.voteId === voteId &&\n              candidate.value.name &&\n              candidate.value.party &&\n              candidate.value.role\n          )\n          .map((c) => c.value)\n      ),\n    },\n  };\n}\nconst [voteToRender, setVoteToRender] = useState(getValue());\n\n// Get all the votes\nuseEffect(() => {\n  // Set the vote to be rendered\n  setVoteToRender(getValue());\n  console.log(voteToRender, allVotes, \"votesData\");\n}, [allVotes]);\n\nfunction refresh() {\n  setOtherCandidates(\n    Social.index(\"voteChainTest\", \"candidate\")\n      ? Social.index(\"voteChainTest\", \"candidate\")\n      : []\n  );\n  setVoteToRender(getValue());\n  // remove error\n  setState({\n    ...state,\n    error: \"\",\n    showError: false,\n  });\n  setNewCandidate({\n    name: \"\",\n    party: \"\",\n    role: \"\",\n    votes: 0,\n  });\n  console.log(\"donee\");\n}\n\n// Storing some data in state\nconst [state, setState] = useState({\n  error: \"\",\n  showError: false,\n});\n\n// Pages that will be displayed in the aside\nconst [pages, setPages] = useState([]);\n\n// Add admin pages if the user is the creator of the vote\nuseEffect(() => {\n  if (voteToRender.value.creator === accountId) {\n    setPages([\n      {\n        name: \"Voting Page\",\n        link: `https://near.social/abnakore.near/widget/App.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Result\",\n        link: `https://near.social/abnakore.near/widget/Result.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Admin Home\",\n        link: `https://near.social/abnakore.near/widget/AdminHome?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Manage Candidates\",\n        link: `https://near.social/abnakore.near/widget/ManageCandidates?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Mange Parties\",\n        link: `https://near.social/abnakore.near/widget/ManageParties?vote=${voteToRender.blockHeight}`,\n      },\n    ]);\n  } else {\n    setPages([\n      {\n        name: \"Voting Page\",\n        link: `https://near.social/abnakore.near/widget/App.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Result\",\n        link: `https://near.social/abnakore.near/widget/Result.jsx?vote=${voteToRender.blockHeight}`,\n      },\n    ]);\n  }\n}, [voteToRender.value.creator === accountId]);\n\n// Function that get the unselected parties\nfunction getUnusedParties() {\n  const usedParties = voteToRender.value.candidates.map(\n    (candidate) => candidate.party\n  );\n  const unusedParties = voteToRender.value.parties.filter(\n    (party) => !usedParties.includes(party.acronym)\n  );\n  return unusedParties;\n}\n\n// List of candidates and their curresponding number of votes\n// const [candidates, setCandidates] = useState([]);\n\n// name and acro\nconst [newCandidate, setNewCandidate] = useState({\n  name: \"\",\n  party: \"\",\n  role: \"\",\n  votes: 0,\n});\n\n// Update the dropdown\nfunction updateDropDown(e) {\n  setNewCandidate((prev) => {\n    prev.party = e.target.value;\n    return prev;\n  });\n}\n\n// Save the data and add a new candidate\nfunction save() {\n  if (newCandidate.name !== \"\" && newCandidate.party !== \"\") {\n    setOtherCandidates(\n      Social.index(\"voteChainTest\", \"candidate\")\n        ? Social.index(\"voteChainTest\", \"candidate\")\n        : []\n    );\n    setVoteToRender(getValue());\n\n    // check if there is another candidate with thesame party\n    const filtered = voteToRender.value.candidates.filter((candidate) => {\n      return candidate.party.toLowerCase() === newCandidate.party.toLowerCase();\n    });\n    if (filtered.length > 0) {\n      setState({\n        ...state,\n        error: \"Two candidates cannot be in thesame party\",\n        showError: true,\n      });\n      return;\n    }\n\n    const NewCandidate = {\n      ...newCandidate,\n      name: newCandidate.name\n        .toLowerCase()\n        .replace(/\\b\\w/g, (s) => s.toUpperCase()),\n      role: voteToRender.value.role,\n      votes: 0,\n      voteId: voteId,\n    };\n\n    // Upload the data to socialDb\n    console.log(NewCandidate);\n    // Social.set({\n    //   index: {\n    //     voteChainTest: JSON.stringify({\n    //       key: \"candidate\",\n    //       value: NewCandidate,\n    //     }),\n    //   },\n    // });\n    // setNewCandidate({\n    //   name: \"\",\n    //   party: \"\",\n    //   role: \"\",\n    //   votes: 0,\n    // });\n    setState({\n      ...state,\n      error: \"\",\n      showError: false,\n    });\n    return {\n      index: {\n        voteChainTest: JSON.stringify({\n          key: \"candidate\",\n          value: NewCandidate,\n        }),\n      },\n    };\n  } else {\n    setState({\n      ...state,\n      error: `Candidate's ${\n        newCandidate.name === \"\" ? \"Name\" : \"Party\"\n      } can not be empty`,\n      showError: true,\n    });\n    return null;\n  }\n}\n\nconst secText = styled.h3`\n    text-align: center;\n`;\n\n// Only signed In users can access the page\nreturn (\n  <>\n    {accountId ? (\n      <Widget\n        src=\"abnakore.near/widget/Wrapper\"\n        props={{\n          body: (\n            <div className=\"main-body\">\n              {voteToRender ? (\n                <div className=\"two-sides\">\n                  <Widget\n                    src=\"abnakore.near/widget/Aside\"\n                    props={{ objs: pages, active: \"/admin/manage_candidates\" }}\n                  />\n                  {voteToRender.value.creator === accountId ? (\n                    <div className=\"body-contents\">\n                      <h1>Manage Candidates</h1>\n                      <Widget\n                        src=\"abnakore.near/widget/Table\"\n                        props={{\n                          headings: [\n                            \"S/N\",\n                            \"Candidate's Name\",\n                            \"Party\",\n                            \"Role\",\n                          ],\n                          data: Object.values(\n                            voteToRender.value.candidates\n                              .sort((a, b) => a.name > b.name)\n                              .map((c, i) =>\n                                [i + 1].concat([c.name, c.party, c.role])\n                              )\n                          ),\n                        }}\n                      />\n                      <div className=\"form\">\n                        <secText>Add Candidate</secText>\n                        {state.showError && (\n                          <p style={{ color: \"red\", textAlign: \"center\" }}>\n                            {state.error}\n                          </p>\n                        )}\n                        <div className=\"flex\">\n                          <Widget\n                            src=\"abnakore.near/widget/Input.jsx\"\n                            props={{\n                              type: \"text\",\n                              placeholder: \"Full Name\",\n                              required: true,\n                              item: \"name\",\n                              items: newCandidate,\n                              setItem: setNewCandidate,\n                              otherAttributes: {\n                                value: newCandidate.name,\n                              },\n                            }}\n                          />\n\n                          <select\n                            className=\"drop-down\"\n                            value={newCandidate.party}\n                            onChange={updateDropDown}\n                            name=\"party\"\n                            required\n                          >\n                            <option className=\"option\" value=\"\">\n                              Select Party\n                            </option>\n                            {getUnusedParties().map((party) => (\n                              <option\n                                className=\"option\"\n                                key={party.acronym}\n                                value={party.acronym}\n                              >\n                                {party.name} ({party.acronym})\n                              </option>\n                            ))}\n                          </select>\n                        </div>\n                        <CommitButton data={save} onCommit={refresh}>\n                          Add\n                        </CommitButton>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"body-contents\">\n                      <h1>You don't have access to this page</h1>\n                      <a href=\"https://near.social/abnakore.near/widget/VoteChain\">\n                        Back to Home Page\n                      </a>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"body-contents\">\n                  <h1>Vote Doesn't exist</h1>\n                </div>\n              )}\n            </div>\n          ),\n        }}\n      />\n    ) : (\n      <Widget src=\"abnakore.near/widget/SignIn.jsx\" props={props} />\n    )}\n  </>\n);\n", "metadata": {"fork_of": "abnakore.near/widget/ManageCandidates@113181710"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/abnakore.near/widget/ManageCandidates", "fact_widget_deployments_id": "4c5339d0805bea4a483c00c4a3476876", "inserted_timestamp": "2024-05-14T18:54:02.790Z", "modified_timestamp": "2024-05-14T18:54:02.790Z", "__row_index": 0}