{"tx_hash": "6fQnj5DovharJTNQiA7xxgK71n6N2aW3GYYNFZk2oUrY", "action_id_social": "5S52i9scQW3kfhYMqhT4ViuAYrZBzUkRZoqEd7bGkLKP-0-widget", "block_id": 110394385, "block_timestamp": "2024-01-14T15:11:43.842Z", "signer_id": "abnakore.near", "widget_name": "App.jsx", "source_code": "// Get the user's accountId\nconst accountId = context.accountId;\nconst voteId = 0;\n\n// All the votes\nconst [allVotes, setAllVotes] = useState([]);\nconst [voteToRender, setVoteToRender] = useState([]);\nconst [opened, setOpened] = useState(false);\n\n// Get all the votes\nconst votesData = Social.get(`abnakore.near/votes`);\nuseEffect(() => {\n  if (votesData === undefined) {\n    // Set the votes to an empty list if there is no votes\n    setAllVotes([]);\n  } else {\n    setAllVotes(JSON.parse(votesData));\n  }\n  setVoteToRender(allVotes[voteId]);\n}, [votesData === null]);\n\n// Set the vote to be rendered\nuseEffect(() => {\n  setVoteToRender(allVotes[voteId]);\n}, [allVotes]);\n\nconst [candidate, setCandidate] = useState(0);\n\n// List of candidates and their curresponding number of votes\n// const [candidates, setCandidates] = useState(voteToRender.candidates);\n\n// Get the candidates data\n// const cands = Social.get(`abnakore.near/candidates`);\n\n// useEffect(() => {\n//   if (cands === undefined) {\n//     // Set the candidate to an empty list if there is no candidate\n//     setCandidates([]);\n//   } else {\n//     setCandidates(JSON.parse(cands));\n//   }\n// }, [cands === null]);\n\nconst [state, setState] = useState({\n  show_message: false,\n  show_error_on_dropdown: false,\n});\n\n// Pages that will be displayed in the aside\nconst [pages, setPages] = useState([\n  {\n    name: \"Voting Page\",\n    link: \"https://near.org/sandbox#/abnakore.near/widget/App.jsx\",\n  },\n  {\n    name: \"Result\",\n    link: \"https://near.org/sandbox#/abnakore.near/widget/Result.jsx\",\n  },\n  { name: \"Log out\", link: \"https://near.org/signin\" },\n]);\n\n// Users tht already voted\nconst [voted, setVoted] = useState([1]);\n\n// Functions\nfunction vote() {\n  if (candidate > 0) {\n    // console.log(context.accountId);\n    // console.log(voted);\n    // setCandidates([...candidates]);\n    setState({\n      ...state,\n      show_message: true,\n    });\n    setVoted((prev) => prev.concat([context.accountId]));\n  } else {\n    // Set an error on the dropdown\n    setState({\n      ...state,\n      show_error_on_dropdown: true,\n    });\n  }\n}\n\n// Update the value of the dropdown when changed\nfunction updateDropdown(e) {\n  setCandidate(e.target.value);\n  // Remove the error on the dropdown\n  setState({\n    ...state,\n    show_error_on_dropdown: false,\n  });\n}\n\n// Get the current date and time\nfunction getDateTime() {\n  var now = new Date();\n  now.setMinutes(now.getMinutes() - now.getTimezoneOffset());\n  return now.toISOString().slice(0, 16);\n}\n\n//  Format the date and time (January 7, 2024 at 5:57 PM)\nfunction formatDateTime(dateTimeString) {\n  // Assuming you have a date-time input with the format \"YYYY-MM-DDTHH:mm\" as a string\n  const dateTime = new Date(dateTimeString);\n\n  // Formatting the date and time in 12-hour format\n  const formattedDateTime = dateTime.toLocaleString(\"en-US\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n    hour: \"numeric\",\n    minute: \"numeric\",\n    hour12: true, // Set to true for 12-hour format\n  });\n\n  return formattedDateTime;\n}\n\n// check if the vote is ongoing\nfunction isOngoing() {\n  return voteToRender.closeTime !== \"\"\n    ? Date.parse(voteToRender.openTime) <= Date.parse(getDateTime()) &&\n        Date.parse(voteToRender.closeTime) > Date.parse(getDateTime())\n    : Date.parse(voteToRender.openTime) <= Date.parse(getDateTime());\n}\nconst [ongoing, setOngoing] = useState(isOngoing());\n\n// // Re check if it is ongoing every 1 sec\nuseEffect(() => {\n  const interval = setInterval(() => {\n    setOngoing(isOngoing());\n  }, 1000);\n  return () => clearInterval(interval);\n}, [voteToRender]);\n\nconst secText = styled.h3`\n    text-align: center;\n`;\nreturn (\n  <>\n    {accountId ? (\n      <Widget\n        src=\"abnakore.near/widget/Wrapper\"\n        props={{\n          body: (\n            <div className=\"main-body\">\n              {/* Check if the vote exists(i.e allVotes[voteId] exists) */}\n              {voteToRender ? (\n                <div className=\"two-sides\">\n                  {/* The Aside bar that helps in quick navigation btw pages */}\n                  <Widget\n                    src=\"abnakore.near/widget/Aside\"\n                    props={{ objs: pages, active: \"/\" }}\n                  />\n\n                  {/* Check if the vote is ongoing */}\n                  {ongoing === true ? (\n                    // Check if the vote has password\n                    voteToRender.passcode === \"\" || opened ? (\n                      <div className=\"body-contents\">\n                        <i>\n                          <svg\n                            width=\"64px\"\n                            height=\"64px\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                          >\n                            <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\n                            <g\n                              id=\"SVGRepo_tracerCarrier\"\n                              stroke-linecap=\"round\"\n                              stroke-linejoin=\"round\"\n                            ></g>\n                            <g id=\"SVGRepo_iconCarrier\">\n                              {\" \"}\n                              <path\n                                d=\"M4 6H20M4 12H20M4 18H20\"\n                                stroke=\"#fefefe\"\n                                stroke-width=\"2\"\n                                stroke-linecap=\"round\"\n                                stroke-linejoin=\"round\"\n                              ></path>{\" \"}\n                            </g>\n                          </svg>\n                        </i>\n                        <h1>{voteToRender.name}</h1>\n                        {JSON.stringify(ongoing)}\n                        <p\n                          style={{\n                            color: \"green\",\n                            display: voted.includes(context.accountId)\n                              ? \"block\"\n                              : \"none\",\n                          }}\n                        >\n                          You Have Succesfully Voted\n                        </p>\n                        <div className=\"card\">\n                          <div>\n                            <select\n                              disabled={\n                                voted.includes(context.accountId) ? true : false\n                              }\n                              className={`drop-down ${\n                                state.show_error_on_dropdown ? \"error\" : \"\"\n                              }`}\n                              value={candidate}\n                              onChange={updateDropdown}\n                              name=\"candidate\"\n                              required\n                            >\n                              <option className=\"option\" value={0}>\n                                Select Candidate\n                              </option>\n                              {voteToRender.candidates.map((candidate, i) => (\n                                <option\n                                  className=\"option\"\n                                  key={candidate.id}\n                                  value={i + 1}\n                                >\n                                  {candidate.name}\n                                </option>\n                              ))}\n                            </select>\n                          </div>\n                          <button\n                            disabled={\n                              voted.includes(context.accountId) ? true : false\n                            }\n                            onClick={vote}\n                          >\n                            Vote\n                          </button>\n\n                          <p\n                            id=\"thanks\"\n                            className={`read-the-docs ${\n                              !state.show_message ? \"\" : \"hide\"\n                            }`}\n                          >\n                            Thank you for voting{\" \"}\n                            {voteToRender.candidates[candidate - 1].name}\n                          </p>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"body-contents\">\n                        <div className=\"form\">\n                          <secText>Please Enter Passcode</secText>\n                          <Widget\n                            src=\"abnakore.near/widget/Input.jsx\"\n                            props={{\n                              type: \"text\",\n                              placeholder: \"Enter Passcode\",\n                            }}\n                          />\n                          <button>Submit</button>\n                        </div>\n                      </div>\n                    )\n                  ) : (\n                    <div className=\"body-contents\">\n                      {voteToRender.closeTime !== \"\"\n                        ? Date.parse(voteToRender.openTime) <=\n                            Date.parse(getDateTime()) &&\n                          Date.parse(voteToRender.closeTime) >\n                            Date.parse(getDateTime())\n                        : Date.parse(voteToRender.openTime) <=\n                          Date.parse(getDateTime())}\n                      {/* If the vote has not been started */}\n                      {Date.parse(voteToRender.openTime) >\n                      Date.parse(getDateTime()) ? (\n                        <>\n                          <h1>\n                            This vote will start on: <br />\n                          </h1>\n                          <h3>{formatDateTime(voteToRender.openTime)}</h3>\n                        </>\n                      ) : (\n                        <>\n                          <h1>\n                            The vote has been ended on: <br />\n                          </h1>\n                          <h3>{formatDateTime(voteToRender.closeTime)}</h3>\n                        </>\n                      )}\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"body-contents\">\n                  <h1>Vote Doesn't exist</h1>\n                </div>\n              )}\n            </div>\n          ),\n        }}\n      />\n    ) : (\n      <Widget src=\"abnakore.near/widget/SignIn.jsx\" props={props} />\n    )}\n  </>\n);\n", "metadata": {"fork_of": "abnakore.near/widget/App.jsx@110392215"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/abnakore.near/widget/App.jsx", "fact_widget_deployments_id": "790730a4a0137a785b2e3ce936389d09", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}