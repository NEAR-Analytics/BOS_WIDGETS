{"tx_hash": "TaMbqMLMrvrsJgmHYSvg4irVEKurqJTmgAmbTVAMsYe", "action_id_social": "4aosKaQDePPj6Hv1GzerbGa3zwbXXBa1pkJj8ZQNjwBN-0-widget", "block_id": 113226057, "block_timestamp": "2024-02-20T14:51:52.734Z", "signer_id": "abnakore.near", "widget_name": "CreateVote", "source_code": "// Get accountId\nconst accountId = context.accountId;\n\n// All the votes\nconst [allVotes, setAllVotes] = useState([]);\n\n// Storing some values in state\nconst [state, setState] = useState({\n  error: \"\",\n  showError: false,\n});\n\n// Get all the votes\nconst Data = Social.index(\"voteChainTest\", \"vote\");\n\nuseEffect(() => {\n  //   console.log(Data);\n  if (Data === undefined) {\n    // Set the candidate to an empty list if there is no candidate\n    setAllVotes([]);\n  } else {\n    setAllVotes(JSON.parse(Data));\n  }\n  //   console.log(Data, \"\");\n}, [Data === null]);\n\n// Get the current date and time\nfunction getDateTime() {\n  var now = new Date();\n  now.setMinutes(now.getMinutes() - now.getTimezoneOffset());\n  return now.toISOString().slice(0, 16);\n}\n\n// New Vote\nconst [newVote, setNewVote] = useState({\n  name: \"\",\n  desc: \"\",\n  role: \"\",\n  creator: \"\",\n  openTime: getDateTime(),\n  closeTime: \"\",\n  createdOn: \"\",\n  limit: \"\",\n  opened: true,\n  passcode: \"\",\n  candidates: [],\n  parties: [],\n  voters: [],\n});\n\n// Parties\nconst [parties, setParties] = useState([]);\n\n// New Party\nconst [newParty, setNewParty] = useState({\n  name: \"\",\n  acronym: \"\",\n});\n\n// candidates\nconst [candidates, setCandidates] = useState([]);\n\n// New Candidate\nconst [newCandidate, setNewCandidate] = useState({\n  name: \"\",\n  party: \"\",\n  role: newVote.role,\n  votes: 0,\n});\n\n// Add the new party to the table\nfunction AddParty() {\n  // Check if the data given is valid\n\n  if (newParty.name !== \"\" && newParty.acronym !== \"\") {\n    // check for no similar name or acronym\n    if (JSON.stringify(parties) !== JSON.stringify([])) {\n      const filtered = parties.filter((party) => {\n        return (\n          party.name.toLowerCase() === newParty.name.toLowerCase() ||\n          party.acronym.toLowerCase() === newParty.acronym.toLowerCase()\n        );\n      });\n      if (filtered.length > 0) {\n        return;\n      }\n    }\n\n    // Check for three letters of the acronym\n    if (newParty.acronym.length <= 4 && newParty.acronym.length > 0) {\n      setParties((prev) =>\n        prev.concat([\n          {\n            ...newParty,\n            acronym: newParty.acronym.toUpperCase(),\n            name: newParty.name\n              .toLowerCase()\n              .replace(/\\b\\w/g, (s) => s.toUpperCase()),\n          },\n        ])\n      );\n      setNewParty({ name: \"\", acronym: \"\" });\n    }\n  }\n}\n\n// Add the new party to the table\nfunction AddCandidate() {\n  // Check if the data given is valid\n\n  if (newCandidate.name !== \"\" && newCandidate.party !== \"\") {\n    // check if there is another candidate with thesame party\n    const filtered = candidates.filter((candidate) => {\n      return candidate.party.toLowerCase() === newCandidate.party.toLowerCase();\n    });\n    if (filtered.length > 0) {\n      return;\n    }\n\n    // Check for three letters of the acronym\n    setCandidates((prev) =>\n      prev.concat([\n        {\n          ...newCandidate,\n          name: newCandidate.name\n            .toLowerCase()\n            .replace(/\\b\\w/g, (s) => s.toUpperCase()),\n        },\n      ])\n    );\n    setNewCandidate({\n      name: \"\",\n      party: \"\",\n      role: \"\",\n      votes: 0,\n    });\n  }\n}\n\n// Function that get the unselected parties\nfunction getUnusedParties() {\n  // const filtered = candidates.filter((candidate) => {\n  //   return candidate.party.toLowerCase() === newCandidate.party.toLowerCase();\n  // });\n  const usedParties = candidates.map((candidate) => candidate.party);\n  const unusedParties = parties.filter(\n    (party) => !usedParties.includes(party.acronym)\n  );\n  return unusedParties;\n}\n\n// Update the value of the dropdown\nfunction updateDropDown(e) {\n  setTest(e.target.value);\n  let c = newCandidate;\n  c.party = e.target.value;\n  setNewCandidate(c);\n}\n\n// for test\nconst [test, setTest] = useState(\"E\");\n\nconst secText = styled.h5`\n    text-align: center;\n`;\n\n// Hashing function\nfunction hash(text) {\n  var hashed = \"\";\n  for (var i = 0; i < text.length; i++) {\n    // console.log(text.charAt(i), \"=\", text.charCodeAt(i));\n    hashed += text.charCodeAt(i);\n  }\n  //   console.log(hashed);\n  return hashed;\n}\n\n// The main create vote Function\nfunction createVote() {\n  console.log(\"creating vote\");\n  console.log(newVote);\n  // Check if the name is valid\n  if (newVote.name === \"\") {\n    setState({\n      ...state,\n      error: \"Name cannot be Empty\",\n      showError: true,\n    });\n    return;\n  }\n\n  // Validate desc\n  if (newVote.desc === \"\") {\n    setState({\n      ...state,\n      error: \"Description cannot be Empty\",\n      showError: true,\n    });\n    console.log(\"Description cannot be Empty\");\n    return;\n  }\n\n  // Validate role\n  if (newVote.role === \"\") {\n    setState({\n      ...state,\n      error: \"Role cannot be Empty\",\n      showError: true,\n    });\n    console.log(\"Role cannot be Empty\");\n    return;\n  }\n\n  // Validate start and end date and time\n  if (newVote.openTime !== \"\" && newVote.closeTime !== \"\") {\n    if (Date.parse(newVote.openTime) >= Date.parse(newVote.closeTime)) {\n      setState({\n        ...state,\n        error: \"Opening time must be earlier than the close time\",\n        showError: true,\n      });\n      console.log(\"Opening time must be earlier than the close time\");\n      return;\n    }\n  }\n\n  //   console.log(\"this\", candidates);\n  // Set the roles of the candidates\n  const newCandidates = candidates.map((candidate) => ({\n    ...candidate,\n    role: newVote.role,\n  }));\n  //   console.log(newCandidates);\n\n  const tempVote = newVote;\n\n  // Set the curresponding values of the obj\n  tempVote.creator = accountId;\n  tempVote.opened =\n    newVote.closeTime !== \"\"\n      ? Date.parse(newVote.openTime) <= Date.parse(getDateTime()) &&\n        Date.parse(newVote.closeTime) > Date.parse(getDateTime())\n      : Date.parse(newVote.openTime) <= Date.parse(getDateTime());\n  tempVote.createdOn = getDateTime();\n  tempVote.candidates = newCandidates;\n  tempVote.parties = parties;\n  tempVote.passcode = hash(newVote.passcode);\n  tempVote.id = allVotes.length;\n\n  //   console.log(\"That\", tempVote);\n\n  // Upload the data to socialDb\n  // Social.set({ votes: allVotes.concat([tempVote]) });\n  Social.set({\n    index: {\n      voteChainTest: JSON.stringify({\n        key: \"vote\",\n        value: tempVote,\n      }),\n    },\n  });\n\n  setNewVote({\n    name: \"\",\n    desc: \"\",\n    role: \"\",\n    creator: \"\",\n    openTime: getDateTime(),\n    closeTime: \"\",\n    createdOn: \"\",\n    limit: \"\",\n    opened: true,\n    passcode: \"\",\n    candidates: [],\n    parties: [],\n    voters: [],\n  });\n  setCandidates([]);\n  setParties([]);\n}\n\nreturn (\n  <>\n    {accountId ? (\n      <Widget\n        src=\"abnakore.near/widget/Wrapper\"\n        props={{\n          body: (\n            <div className=\"main-body\">\n              <div className=\"body-contents\">\n                <h1>Create</h1>\n                {state.showError && (\n                  <p style={{ color: \"red\" }}>{state.error}</p>\n                )}\n                <div className=\"form\">\n                  <Widget\n                    src=\"abnakore.near/widget/Input.jsx\"\n                    props={{\n                      type: \"text\",\n                      placeholder: \"Name / Title\",\n                      required: true,\n                      item: \"name\",\n                      items: newVote,\n                      setItem: setNewVote,\n                      otherAttributes: {\n                        value: newVote.name,\n                      },\n                    }}\n                  />\n\n                  <Widget\n                    src=\"abnakore.near/widget/Input.jsx\"\n                    props={{\n                      type: \"text\",\n                      placeholder: `Description ${newVote.desc.length}/700`,\n                      required: true,\n                      kind: \"textarea\",\n                      item: \"desc\",\n                      items: newVote,\n                      setItem: setNewVote,\n                      otherAttributes: {\n                        value: newVote.desc,\n                        maxLength: 700,\n                        rows: 10,\n                      },\n                    }}\n                  />\n                  <hr />\n\n                  <secText>Parties Section</secText>\n                  <Widget\n                    src=\"abnakore.near/widget/Table\"\n                    props={{\n                      headings: [\"S/N\", \"Party Name\", \"Acronym\"],\n                      data: parties.map((p, i) =>\n                        [i + 1].concat(Object.values(p).splice(0, 2))\n                      ),\n                    }}\n                  />\n                  <div className=\"form\">\n                    <secText>Add Party</secText>\n                    <div className=\"flex\">\n                      <Widget\n                        src=\"abnakore.near/widget/Input.jsx\"\n                        props={{\n                          type: \"text\",\n                          placeholder: \"Party Name\",\n                          required: true,\n                          item: \"name\",\n                          items: newParty,\n                          setItem: setNewParty,\n                          otherAttributes: {\n                            value: newParty.name,\n                          },\n                        }}\n                      />\n                      <Widget\n                        src=\"abnakore.near/widget/Input.jsx\"\n                        props={{\n                          type: \"text\",\n                          placeholder: \"Acronym\",\n                          required: true,\n                          item: \"acronym\",\n                          items: newParty,\n                          setItem: setNewParty,\n                          otherAttributes: {\n                            value: newParty.acronym,\n                          },\n                        }}\n                      />\n                    </div>\n                    <button onClick={AddParty}>Add</button>\n                  </div>\n                  <hr />\n\n                  <secText>Candidates Section</secText>\n                  <Widget\n                    src=\"abnakore.near/widget/Table\"\n                    props={{\n                      headings: [\"S/N\", \"Candidate's Name\", \"Party\"],\n                      data: candidates.map((p, i) =>\n                        [i + 1].concat(Object.values(p).splice(0, 2))\n                      ),\n                    }}\n                  />\n                  <div className=\"form\">\n                    <secText>Add Candidate</secText>\n                    <div className=\"flex\">\n                      <Widget\n                        src=\"abnakore.near/widget/Input.jsx\"\n                        props={{\n                          type: \"text\",\n                          placeholder: \"Candidate's Name\",\n                          required: true,\n                          item: \"name\",\n                          items: newCandidate,\n                          setItem: setNewCandidate,\n                          otherAttributes: {\n                            value: newCandidate.name,\n                          },\n                        }}\n                      />\n                      <select\n                        className=\"drop-down\"\n                        value={newCandidate.party}\n                        onChange={updateDropDown}\n                        name=\"party\"\n                        required\n                      >\n                        <option className=\"option\" value=\"\">\n                          Select Party\n                        </option>\n                        {getUnusedParties().map((party) => (\n                          <option\n                            className=\"option\"\n                            key={party.acronym}\n                            value={party.acronym}\n                          >\n                            {party.name} ({party.acronym})\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                    <button onClick={AddCandidate}>Add</button>\n                  </div>\n\n                  <Widget\n                    src=\"abnakore.near/widget/Input.jsx\"\n                    props={{\n                      type: \"text\",\n                      placeholder: \"Role\",\n                      required: true,\n                      item: \"role\",\n                      items: newVote,\n                      setItem: setNewVote,\n                      otherAttributes: {\n                        value: newVote.role,\n                      },\n                    }}\n                  />\n\n                  <Widget\n                    src=\"abnakore.near/widget/Input.jsx\"\n                    props={{\n                      type: \"password\",\n                      placeholder: \"Passcode (optional)\",\n                      required: false,\n                      item: \"passcode\",\n                      items: newVote,\n                      setItem: setNewVote,\n                      otherAttributes: {\n                        value: newVote.passcode,\n                      },\n                    }}\n                  />\n                  <Widget\n                    src=\"abnakore.near/widget/Input.jsx\"\n                    props={{\n                      type: \"number\",\n                      placeholder: \"Max number of voters (optional)\",\n                      required: false,\n                      item: \"limit\",\n                      items: newVote,\n                      setItem: setNewVote,\n                      otherAttributes: {\n                        value: newVote.limit,\n                      },\n                    }}\n                  />\n                  <div className=\"flex\">\n                    <Widget\n                      src=\"abnakore.near/widget/Input.jsx\"\n                      props={{\n                        type: \"datetime-local\",\n                        placeholder: \"Open on\",\n                        required: true,\n                        item: \"openTime\",\n                        items: newVote,\n                        setItem: setNewVote,\n                        otherAttributes: {\n                          min: getDateTime(),\n                          value: newVote.openTime,\n                          onChange: (e) => {\n                            if (e.target.value !== \"\") {\n                              setNewVote({\n                                ...newVote,\n                                openTime: e.target.value,\n                              });\n                            }\n                          },\n                        },\n                        styles: {\n                          width: \"120%\",\n                        },\n                      }}\n                    />\n                    <Widget\n                      src=\"abnakore.near/widget/Input.jsx\"\n                      props={{\n                        type: \"datetime-local\",\n                        placeholder: \"Close on (optional)\",\n                        required: true,\n                        item: \"closeTime\",\n                        items: newVote,\n                        setItem: setNewVote,\n                        otherAttributes: {\n                          min: newVote.openTime,\n                          value: newVote.closeTime,\n                          onChange: (e) => {\n                            setNewVote({\n                              ...newVote,\n                              closeTime: e.target.value,\n                            });\n                          },\n                        },\n                        styles: {\n                          width: \"100%\",\n                        },\n                      }}\n                    />\n                  </div>\n                  <button onClick={createVote}>Create</button>\n                </div>\n              </div>\n            </div>\n          ),\n        }}\n      />\n    ) : (\n      <Widget src=\"abnakore.near/widget/SignIn.jsx\" props={props} />\n    )}\n  </>\n);\n\n// // Get accountId\n// const accountId = context.accountId;\n\n// return (\n//   <>\n//     {accountId ? (\n//       <Widget\n//         src=\"abnakore.near/widget/Wrapper\"\n//         props={{\n//           body: (\n//             <div className=\"main-body\">\n//               <div className=\"body-contents\">\n//                 <h1>____</h1>\n//               </div>\n//             </div>\n//           ),\n//         }}\n//       />\n//     ) : (\n//       <Widget src=\"abnakore.near/widget/SignIn.jsx\" props={props} />\n//     )}\n//   </>\n// );\n", "metadata": {"fork_of": "abnakore.near/widget/CreateVote@113225878"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/abnakore.near/widget/CreateVote", "fact_widget_deployments_id": "8f380b3e69ea313408f0fa1c5f901aaa", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}