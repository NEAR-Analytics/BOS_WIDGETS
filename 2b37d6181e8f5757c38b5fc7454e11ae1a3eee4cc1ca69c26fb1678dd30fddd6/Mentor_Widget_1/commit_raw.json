{"tx_hash": "14uHGGpkG8SN9a5L6H7tN5mR8ba3H6WTDPn9ciE6BU85", "action_id_social": "82RrmayyMMiP9P9pDtsXESgtTcToKnBAPh355J2WR8a4-0-widget", "block_id": 96486256, "block_timestamp": "2023-07-14T22:52:57.065Z", "signer_id": "2b37d6181e8f5757c38b5fc7454e11ae1a3eee4cc1ca69c26fb1678dd30fddd6", "widget_name": "Mentor_Widget_1", "source_code": "let { address, tokenId } = props;\nState.init({\n  showLogin: false,\n  destination: props.destination,\n  transaction: null,\n  loading: false,\n  error: null,\n  eventUnlocked: false,\n});\n\nconst checkNFT = () => {\n  const sender = Ethers.send(\"eth_requestAccounts\")[0];\n  console.log(\"sender\", sender);\n  if (!sender) {\n    State.update({ error: \"Please login first\", showLogin: true });\n    return;\n  } else {\n    State.update({ error: \"\" });\n  }\n\n  const message = `Access Afropolitan token gated event with token ${address} and tokenId ${tokenId}}`;\n  const signer = Ethers.provider().getSigner();\n  signer.signMessage(message).then((signature) => {\n    console.log({ message, signature, ethers });\n    console.log(\n      \"ethers.utils.verifyMessage(message, signature)\",\n      ethers.utils.verifyMessage(message, signature)\n    );\n    const signerAddress = ethers.utils.verifyMessage(message, signature);\n    console.log({ signerAddress, sender });\n    if (signerAddress.toLowerCase() !== sender.toLowerCase()) {\n      State.update({ error: \"Signing address doesn't match user address\" });\n    } else {\n      checkNFTOwnership(sender);\n    }\n  });\n};\n\nconst checkNFTOwnership = (sender) => {\n  // check that this address is the owner of the token or is the userOf the token\n  const nftABI = fetch(\n    \"https://raw.githubusercontent.com/atilatech/together/f69d581b5f6d14b1d9f0d85dbd488f6d7ebce01b/src/artifacts/contracts/RentableNFT.sol/RentableNFT.json\"\n  );\n\n  const contractAbi = JSON.parse(nftABI.body);\n  const nftContract = new ethers.Contract(\n    address,\n    contractAbi.abi,\n    Ethers.provider().getSigner()\n  );\n  console.log(\"sender, contractAbi, nftContract\", {\n    sender,\n    contractAbi,\n    nftContract,\n  });\n\n  nftContract[\"ownerOf(uint256)\"](Number.parseInt(tokenId)).then((owner) => {\n    console.log({ owner });\n    if (owner.toLowerCase() === sender.toLowerCase()) {\n      State.update({ eventUnlocked: true });\n      return;\n    }\n    nftContract[\"userOf(uint256)\"](Number.parseInt(tokenId)).then((user) => {\n      console.log({ user });\n      if (user.toLowerCase() === sender.toLowerCase()) {\n        State.update({ eventUnlocked: true });\n      } else {\n        State.update({ error: \"You are not the owner or user of this NFT\" });\n      }\n    });\n  });\n};\n\nconst unlockButton = state.eventUnlocked ? (\n  <button className=\"btn btn-success m-3\" disabled={state.loading}>\n    Access Event\n  </button>\n) : (\n  <button\n    className=\"btn btn-primary m-3\"\n    onClick={() => checkNFT()}\n    disabled={state.loading}\n  >\n    Verify Ownership\n  </button>\n);\n\nconst setDestinationAddress = (value) => {\n  State.update({ destination: value });\n};\n\nconst loginButton = (\n  <Web3Connect\n    className=\"FormSubmitContainer\"\n    connectLabel={web3connectLabel}\n    onConnect={(provider) => {\n      console.log(\"provider\", provider);\n      State.update({ provider });\n    }}\n  />\n);\n\nconst lockedEventImage = (\n  <img src={state.token.media[0].gateway} width={300} alt={state.token.title} />\n);\n\nconst lockedImage = \"https://i.imgur.com/EsThDIl.jpg\";\nconst unlockedImage = \"https://i.imgur.com/6qyuwCf.jpg\";\n\nreturn (\n  <div className=\"EventDetail container card shadow my-5 p-5\">\n    <div className=\"The image\">\n      <img src=\"https://imgur.com/a/Eku3DEU\"> </img>\n    </div>\n    <h3\n      style={{\n        textAlign: \"center\",\n        fontFamily: \"Inter\",\n        fontSize: \"30px\",\n        color: \"#333\",\n        fontWeight: \"bold\",\n        letterSpacing: \"-1px\",\n      }}\n    >\n      Dr. Beverly Winters: Getting Started in Medicine\n    </h3>\n    <p\n      style={{\n        textAlign: \"center\",\n        fontFamily: \"Inter\",\n        fontSize: \"18px\",\n        color: \"#777\",\n        fontWeight: \"normal\",\n        letterSpacing: \"0\",\n      }}\n    >\n      7/15/2023 <br /> 6:00 - 8:00 PM EST <br /> Dr. Beverly Winters, chair of\n      Yale University's Pathology Department, shares advice on medical school\n      applications and what to expect for your first few years in the field\n    </p>\n    <div className=\"container\">\n      <div className=\"card shadow-sm\">\n        <div className=\"card-body\">\n          <img\n            src={state.eventUnlocked ? unlockedImage : lockedImage}\n            width={300}\n            alt={state.token.title}\n          />\n          {unlockButton}\n\n          {state.loading && (\n            <>\n              <p className=\"text-primary\">Loading transaction...</p>\n              <div class=\"progress\">\n                <div\n                  class=\"progress-bar progress-bar-striped progress-bar-animated\"\n                  role=\"progressbar\"\n                  aria-valuenow=\"100\"\n                  aria-valuemin=\"0\"\n                  aria-valuemax=\"100\"\n                  style={{ width: \"100%\" }}\n                ></div>\n              </div>\n            </>\n          )}\n          {state.transaction && (\n            <p className=\"text-success\">\n              Transfer was succesful!\n              <a\n                href={`https://goerli.etherscan.io/tx/${state.transaction.hash}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                View Transaction\n              </a>\n            </p>\n          )}\n\n          {state.error && <p className=\"text-danger\">{state.error}</p>}\n          <hr />\n          {state.showLogin && loginButton}\n        </div>\n      </div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/2b37d6181e8f5757c38b5fc7454e11ae1a3eee4cc1ca69c26fb1678dd30fddd6/widget/Mentor_Widget_1", "fact_widget_deployments_id": "9abe55c0b35063a9564fb4fa308749de", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 8}