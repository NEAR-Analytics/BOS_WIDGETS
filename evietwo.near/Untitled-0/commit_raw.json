{"tx_hash": "8RFDMdwmY8VW2iLLoFCQMp5x785QMfvLdSePecPsJHDX", "action_id_social": "69xLKrbErusRot3KaLAbExKmX6JBrPGjSBtagFqMThr9-0-widget", "block_id": 115795700, "block_timestamp": "2024-03-30T16:13:50.080Z", "signer_id": "evietwo.near", "widget_name": "Untitled-0", "source_code": "const accountId = props.accountId || context.accountId;\n\nconst [active, setActive] = useState(false);\nconst [data, setData] = useState([]);\nconst [source, setSource] = useState(\"\");\nconst [showBuilder, setShowBuilder] = useState(false);\nconst [text, setText] = useState(\"\");\nconst builder = \"https://i.ibb.co/fp8wDPB/builder.gif\";\nconst success = \"https://i.ibb.co/FHBZLBq/success.gif\";\nconst deploy = \"https://i.ibb.co/dD232QF/deploy.gif\";\nconst erro = \"https://i.ibb.co/jRMcyCV/error.gif\";\n\nconst [value, setValue] =\n  useState(`import { NearBindgen, near, call, view } from 'near-sdk-js';\n// Write Your Smart Contract in Typescript please\n// This editor accept only Typescript\n// Just build your contract  \n  `);\n\nfunction handleValueChange(e) {\n  setValue(e.target.value);\n}\n\nconst coding = {\n  background: \"black\",\n  color: \"white\",\n  fontFamily: \"monospace\",\n  border: \"none\",\n  padding: \"10px\",\n  width: \"60%\",\n  height: \"400px\",\n  resize: \"none\",\n  outline: \"none\",\n  overflow: \"auto\",\n  lineHeight: \"1.5\",\n  \"::placeholder\": {\n    color: \"rgba(255, 255, 255, 0.5)\",\n  },\n};\n\nconst NumberLine = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 10;\n    width: 40px;\n    padding: 10px;\n    color: rgba(255, 255, 255, 0.5);\n    font-family: monospace;\n    pointer-events: none;\n    user-select: none;\n    margin-left: 5px;\n`;\n\nconst Buttons = styled.div`\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      margin-bottom: 10px;\n      button.disabled {\n        opacity: 0.5;\n      }\n      \n      button.disabled:hover {\n        background-color: inherit; /* Override hover background */\n        color: inherit; /* Override hover color */\n        cursor: not-allowed;\n      }\n      width: 60%;\n`;\n\nconst Output = styled.div`\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: #1e1e1e;\n  padding: 10px;\n  color: white;\n  width: 60%;\n\n h3 {\n  margin: 0 0 10px;\n  font-size: 10px;\n  color: white;\n}\n\n.console {\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: #2e2e2e;\n  padding: 20px;\n  font-size: medium;\n  width: 100%;\n}\n\n.console div {\n  margin-bottom: 10px;\n}\n\n.console p {\n  margin: 0;\n}\n\n.console strong {\n  color: #9cdcfe;\n}\n\n.console a {\n  color: #4ec9b0;\n  text-decoration: none;\n}\n\n.builder-container {\n  float: right; /* or use display: inline-block; */\n  margin-left: 20px; /* adjust as needed */\n}\n`;\n\nconst BuilderContainer = styled.div`\n  float: right; /* or use display: inline-block; */\n  margin-left: 20px; /* adjust as needed */\n`;\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh; /* This ensures the container takes up the full height of the viewport */\n\n\n.text{\n    display: block;\n    text-align: center;\n}\n\n`;\n\nfunction Builder({ source, text }) {\n  return (\n    <Container>\n      <img src={source} />\n      <p>{text}</p>\n    </Container>\n  );\n}\n\nconst handleSave = async () => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"text/plain\",\n    },\n    body: value, // Assuming value holds the data you want to send\n  };\n\n  setShowBuilder(true);\n  setText(\"Building Your Contract\");\n  setSource(builder);\n\n  const response = asyncFetch(\"/user\", requestOptions);\n\n  response\n    .then((response) => {\n      setSource(success);\n      setText(\"Success\");\n      setActive(true);\n      setTimeout(() => {\n        setShowBuilder(false);\n      }, 5000);\n    })\n    .catch((error) => {\n      console.error(\"Error saving file:\", error);\n      setSource(erro);\n      setText(\"Build Failed, try again\");\n      setTimeout(() => {\n        setShowBuilder(false);\n      }, 5000);\n    });\n};\n\nconst handleRunFile = () => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"text/plain\",\n    },\n    body: \".testnet\", // Assuming value holds the data you want to send\n  };\n\n  setShowBuilder(true);\n  setText(\"Deploying your Contract\");\n  setSource(deploy);\n  // Send a POST request to the backend endpoint to run the file\n\n  const response = asyncFetch(\"/run-file\", requestOptions);\n\n  response\n    .then((response) => {\n      console.log(response.body);\n      setData(output);\n      setSource(success);\n      setText(\"Deployed\");\n      setTimeout(() => {\n        setShowBuilder(false);\n      }, 5000);\n    })\n    .catch((error) => {\n      setSource(erro);\n      setText(\"Deploy Failed, Try again\");\n      // setData([])\n      setTimeout(() => {\n        setShowBuilder(false);\n      }, 5000);\n    });\n};\n\nconst output = [\n  {\n    Account_id: accountId,\n    Contract_name: \"\",\n    Trasaction_id: \"\",\n    Trasaction_info: \"\",\n  },\n];\n\nreturn (\n  <div>\n    <BuilderContainer>\n      {showBuilder && <Builder source={source} text={text} />}\n    </BuilderContainer>\n    <Buttons>\n      <button onClick={handleSave} type=\"submit\">\n        Build\n      </button>\n      <button\n        onClick={handleRunFile}\n        type=\"submit\"\n        disabled={!active}\n        className={active ? \"\" : \"disabled\"}\n      >\n        {active ? \"Deploy\" : \"Deploy (Disabled)\"}\n      </button>\n    </Buttons>\n\n    <textarea\n      style={coding}\n      value={value}\n      onChange={handleValueChange}\n      // placeholder=\"Enter your code here...\"\n      //  onKeyDown={handleKey}\n    />\n    <Output className=\"output\">\n      <h3>Output</h3>\n      <div className=\"console\">\n        {data.map((data, key) => (\n          <div key={key}>\n            <p>\n              <strong>Account ID:</strong> {data.Account_id}{\" \"}\n              <button onClick={() => copyToClipboard(data.Account_id)}>\n                Copy\n              </button>\n            </p>\n            <p>\n              <strong>Contract Name:</strong> {data.ContractName}{\" \"}\n              <button onClick={() => copyToClipboard(data.ContractName)}>\n                Copy\n              </button>\n            </p>\n            <p>\n              <strong>Transaction ID:</strong> {data.Trasaction_id}{\" \"}\n              <button onClick={() => copyToClipboard(data.Trasaction_id)}>\n                Copy\n              </button>\n            </p>\n            <p>\n              <strong>Transaction Info:</strong>{\" \"}\n              <a href={data.Trasaction_info} target=\"_blank\">\n                {data.Trasaction_info}\n              </a>{\" \"}\n              <button onClick={() => copyToClipboard(data.Trasaction_info)}>\n                Copy\n              </button>\n            </p>\n          </div>\n        ))}\n      </div>\n    </Output>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/evietwo.near/widget/Untitled-0", "fact_widget_deployments_id": "5c90bc4d8007976586d402a91f2278e6", "inserted_timestamp": "2024-03-30T17:35:18.092Z", "modified_timestamp": "2024-03-30T17:35:18.092Z", "__row_index": 96}