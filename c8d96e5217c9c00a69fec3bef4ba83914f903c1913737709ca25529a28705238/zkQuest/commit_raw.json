{"tx_hash": "C1c4Nw5cgfrJpqm8stGPXdYSgk3HVF6X6XKghCyCmTcy", "action_id_social": "9beughKduBtp2JHK982ZDpp7ZoNTA4vXVANgVZvytBbQ-0-widget", "block_id": 105720091, "block_timestamp": "2023-11-15T00:58:29.439Z", "signer_id": "c8d96e5217c9c00a69fec3bef4ba83914f903c1913737709ca25529a28705238", "widget_name": "zkQuest", "source_code": "// ... (previous code remains unchanged)\r\n\r\nfunction sendSolution() {\r\n  const questContract = new ethers.Contract(\r\n    QUEST_ADDRESS,\r\n    QUEST_ABI,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  let transactionHash = \"\";\r\n\r\n  // 1. Use the correct contract function.\r\n  //    Tip: You can use era-test-node to replay transactions from your previous submissions, with --show-calls=user --resolve-hashes\r\n  questContract\r\n    .submitInvalid(QUEST_NAME, { gasLimit: 1000000 })\r\n    .then((transaction) => {\r\n      // 2. Construct the payload, including `QUEST_NAME` and the keccak hash.\r\n      //    - The answer is the private key of the first 'rich' account from era-test-node (with '0x' prefix)\r\n      //    - Replace ANSWER, ADDRESS, and attempts with the correct values.\r\n      let ANSWER = \"your_private_key\"; // Replace with the correct private key\r\n      let ADDRESS = \"your_zkQuest_account_address\"; // Replace with the correct account address\r\n      let attempts = 1; // Replace with the correct number of attempts\r\n\r\n      let answerHash = ethers.utils.solidityKeccak256(\r\n        [\"string\", \"address\", \"uint16\"],\r\n        [ANSWER, ADDRESS, attempts]\r\n      );\r\n\r\n      // 3. Call the identified contract function with the constructed payload.\r\n      questContract\r\n        .submitInvalid(QUEST_NAME, answerHash, { gasLimit: 1000000 }) // Include the answerHash in the function call\r\n        .then((transaction) => {\r\n          console.log(\"Hash is: \");\r\n          console.log(transaction.hash);\r\n          transactionHash = transaction.hash;\r\n\r\n          transaction\r\n            .wait()\r\n            .then((receipt) => {\r\n              State.update({\r\n                transactionStatus: \"ok\",\r\n              });\r\n            })\r\n            .catch((error) => {\r\n              State.update({\r\n                transactionStatus: \"failed\",\r\n              });\r\n            });\r\n        })\r\n        .catch((error) => console.log(\"Error submitting transaction: \" + error))\r\n        .finally(() =>\r\n          State.update({\r\n            transactionHash: transactionHash,\r\n            attempted: true,\r\n          })\r\n        );\r\n    })\r\n    .catch((error) => console.log(\"Error submitting transaction: \" + error));\r\n}\r\n\r\n// ... (rest of the code remains unchanged)\r\n", "metadata": {"tags": {"bos-gg": ""}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/c8d96e5217c9c00a69fec3bef4ba83914f903c1913737709ca25529a28705238/widget/zkQuest", "fact_widget_deployments_id": "72f50342f55c61b6618bc91acc1122d3", "inserted_timestamp": "2023-11-15T02:36:27.309Z", "modified_timestamp": "2023-11-15T02:36:27.309Z", "__row_index": 3}