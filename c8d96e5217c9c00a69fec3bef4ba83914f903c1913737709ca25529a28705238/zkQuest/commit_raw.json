{"tx_hash": "6jFhu4Qdg4STyVBpBJjEKrYKjn2qmoAqbmsvWetZLcPC", "action_id_social": "2NtjP56Xri1Q7osU6FBF63zpZfgQt3CzbCJRU64LuEMn-0-widget", "block_id": 105721023, "block_timestamp": "2023-11-15T01:19:09.582Z", "signer_id": "c8d96e5217c9c00a69fec3bef4ba83914f903c1913737709ca25529a28705238", "widget_name": "zkQuest", "source_code": "function sendSolution() {\n  const questContract = new ethers.Contract(\n    QUEST_ADDRESS,\n    QUEST_ABI,\n    Ethers.provider().getSigner()\n  );\n\n  let transactionHash = \"\";\n\n  // 1. Oops! We've been calling the wrong contract function all this time.\n  //    Tip: You can use era-test-node to replay transactions from your previous submissions, with --show-calls=user --resolve-hashes\n\n  // 2. And then there's the payload... Some of it seems to have gone missing!\n  //    - Don't forget to include `QUEST_NAME`.\n  //    - A keccak hash generated from a combination of specific elements: answer, your zkQuest account address, and the number of attempts.\n  //\n  //    let answerHash = ethers.utils.solidityKeccak256([\"string\", \"address\", \"uint16\"], [ANSWER, ADDRESS, attempts]);\n  //    Oh, and the answer is the private key of the first 'rich' account from era-test-node (with '0x' prefix)\n\n  // Replace the following placeholders with the correct values:\n  let ANSWER = \"your_private_key\"; // Replace with the correct private key\n  let ADDRESS = \"0x89Ea573E7ea1b6dE8Ece842302ad76ACbe531015\"; // Replace with the correct account address\n  let attempts = 1; // Replace with the correct number of attempts\n\n  let answerHash = ethers.utils.solidityKeccak256(\n    [\"string\", \"address\", \"uint16\"],\n    [QUEST_NAME, ADDRESS, attempts]\n  );\n\n  // 3. Call the identified contract function with the constructed payload.\n  questContract\n    .submitInvalid(QUEST_NAME, answerHash, { gasLimit: 1000000 })\n    .then((transaction) => {\n      console.log(\"Hash is: \");\n      console.log(transaction.hash);\n      transactionHash = transaction.hash;\n\n      transaction\n        .wait()\n        .then((receipt) => {\n          State.update({\n            transactionStatus: \"ok\",\n          });\n        })\n        .catch((error) => {\n          State.update({\n            transactionStatus: \"failed\",\n          });\n        });\n    })\n    .catch((error) => console.log(\"Error submitting transaction: \" + error))\n    .finally(() =>\n      State.update({\n        transactionHash: transactionHash,\n        attempted: true,\n      })\n    );\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/c8d96e5217c9c00a69fec3bef4ba83914f903c1913737709ca25529a28705238/widget/zkQuest", "fact_widget_deployments_id": "fca9bd4673391376ac32f12634c4276d", "inserted_timestamp": "2023-11-15T02:46:27.568Z", "modified_timestamp": "2023-11-15T02:46:27.568Z", "__row_index": 4}