{"tx_hash": "6rze1PQznhpGEeRgQfbaVhJFyXjmd3EECZnjieiUDGtH", "action_id_social": "9R95q6PM6EhAKT71L5y8LcaegMcwvyUxQReWciey2Kv9-0-widget", "block_id": 104649868, "block_timestamp": "2023-11-01T00:36:30.037Z", "signer_id": "devhub.efiz.near", "widget_name": "devhub.entity.addon.blog.Editor", "source_code": "const { Page } =\n  VM.require(\"devhub.efiz.near/widget/devhub.entity.addon.blog.Page\") ||\n  (() => <></>);\n\nconst InnerContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ButtonRow = styled.div`\n  display: flex;\n`;\n\nfunction normalizeString(str) {\n  return str.toLowerCase().replace(/\\s+/g, \"-\");\n}\n\nconst [selectedItem, setSelectedItem] = useState(\"\");\n\nconst handleItemClick = (item) => {\n  console.log(\"item\", item);\n  setSelectedItem(item);\n};\n\nconst Container = styled.div`\n  height: 100%;\n  overflow-y: auto;\n`;\n\nconst StyledItem = styled.div`\n  display: flex;\n  border-radius: 8px;\n  background-color: var(--base100);\n  padding: 10px;\n  width: 100%;\n  margin: 5px 0;\n  cursor: pointer;\n  border: 2px solid #6c5f5b;\n\n  &:hover {\n    background-color: var(--paper);\n  }\n`;\n\nconst ImageWrapper = styled.div`\n  border-radius: 50%;\n  overflow: hidden;\n  width: 40px;\n  height: 40px;\n  margin-right: 10px;\n`;\n\nconst Image = styled.img`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Name = styled.div`\n  flex: 1;\n  align-self: center;\n`;\n\nconst { Card } =\n  VM.require(\"devhub.efiz.near/widget/devhub.entity.addon.blog.Card\") ||\n  (() => <></>);\n\nconst { href } = VM.require(\"devhub.efiz.near/widget/core.lib.url\") || (() => {});\n\nconst { includeLabels, excludeLabels, layout } = props;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 16px;\n\n  @media (min-width: 769px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;\n\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\n\nconst fetchGraphQL = (operationsDoc, operationName, variables) => {\n  return fetch(QUERYAPI_ENDPOINT, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": `bo_near` },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n};\n\nconst queryName =\n  props.queryName ?? `bo_near_devhub_v17_posts_with_latest_snapshot`;\n\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\n    ${queryName}(\n      limit: $limit\n      offset: $offset\n      order_by: {block_height: desc}\n      where: $where\n    ) {\n      post_id\n    }\n  }\n`;\n\nincludeLabels = [\"devhub-test\"];\n\nconst buildWhereClause = () => {\n  let where = {};\n  if (props.author) {\n    where = { author_id: { _eq: props.author }, ...where };\n  }\n  if (props.term) {\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\n  }\n  if (props.includeLabels && Array.isArray(props.includeLabels)) {\n    where = { labels: { _containsAny: props.includeLabels }, ...where };\n  }\n  if (props.excludeLabels && Array.isArray(props.excludeLabels)) {\n    where = { labels: { _nin: props.excludeLabels }, ...where };\n  }\n  if (!props.recency) {\n    where = { parent_id: { _is_null: true }, ...where };\n  }\n  return where;\n};\n\nconst variables = { limit: DISPLAY_COUNT, offset, where: buildWhereClause() };\n\nconst posts = fetch(QUERYAPI_ENDPOINT, {\n  method: \"POST\",\n  headers: { \"x-hasura-role\": `bo_near` },\n  body: JSON.stringify({\n    query: query,\n    variables: variables,\n    operationName: \"DevhubPostsQuery\",\n  }),\n});\n\nfunction Sidebar({ items, handleItemClick }) {\n  return (\n    <Container>\n      {items.map((item, index) => (\n        <StyledItem key={index} onClick={() => handleItemClick(item.post_id)}>\n          <Name>{item.post_id}</Name>\n        </StyledItem>\n      ))}\n    </Container>\n  );\n}\n\nreturn (\n  <InnerContainer>\n    <div\n      className=\"template\"\n      style={{ display: \"flex\", width: \"100%\", height: \"100%\" }}\n    >\n      <div\n        className=\"left-panel\"\n        style={{\n          flex: 1,\n          maxWidth: \"100px\",\n          width: \"100%\",\n          margin: \"20px 20px 80px 20px\",\n        }}\n      >\n        <Sidebar\n          items={\n            posts.body.data.bo_near_devhub_v17_posts_with_latest_snapshot || []\n          }\n          handleItemClick={handleItemClick}\n        />\n      </div>\n      <div\n        className=\"right-panel\"\n        style={{ flex: 1, width: 0, overflow: \"scroll\" }}\n      >\n        <Widget // We need this so the individual posts can make the necessary call for more data\n          src=\"devhub.efiz.near/widget/devhub.entity.post.Postv2\"\n          props={{\n            postKey: selectedItem,\n            template: (p) => <Page {...(p || {})} />,\n          }} // I wonder if this could take list of types, their templates, normalizer functions, etc... and have this all as a module\n        />\n      </div>\n    </div>\n  </InnerContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devhub.efiz.near/widget/devhub.entity.addon.blog.Editor", "fact_widget_deployments_id": "c9c766f649719559c231ac84ffbe9545", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}