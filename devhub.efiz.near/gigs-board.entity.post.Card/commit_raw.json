{"tx_hash": "EH8bTci3bNtcSQA1dMyGDRDPFUjjNhF9ipVHNTvdeRwS", "action_id_social": "EcfMnrNe2Te2LDFcttTFLr83hrtQnY3duqPMBdpnbWWv-0-widget", "block_id": 104795070, "block_timestamp": "2023-11-02T22:30:45.740Z", "signer_id": "devhub.efiz.near", "widget_name": "gigs-board.entity.post.Card", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/gui/attractable\" */\nconst AttractableDiv = styled.div`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst AttractableLink = styled.a`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst AttractableImage = styled.img`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n/* END_INCLUDE: \"core/lib/gui/attractable\" */\n\nconst ButtonWithHover = styled.button`\n  background-color: #fff;\n\n  &:hover {\n    background-color: #e9ecef;\n    color: #000;\n  }\n`;\n\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\n\nconst post =\n  props.post ??\n  Near.view(nearDevGovGigsContractAccountId, \"get_post\", { post_id: postId });\n\nif (!post) {\n  return <div>Loading ...</div>;\n}\n\nconst referral = props.referral;\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\nconst compareTimestamp = props.compareTimestamp ?? \"\";\nconst swapTimestamps = currentTimestamp < compareTimestamp;\n\nconst snapshotHistory = post.snapshot_history;\n\nconst snapshot =\n  currentTimestamp === post.snapshot.timestamp\n    ? post.snapshot\n    : (snapshotHistory &&\n        snapshotHistory.find((s) => s.timestamp === currentTimestamp)) ??\n      null;\n\nconst fundingAmount = parseInt(\n  snapshot.requested_sponsorship_amount ?? snapshot.amount\n);\n\nconst sponsorshipToken =\n  snapshot.requested_sponsorship_token ?? snapshot.sponsorship_token;\n\nconst compareSnapshot =\n  compareTimestamp === post.snapshot.timestamp\n    ? post.snapshot\n    : (snapshotHistory &&\n        snapshotHistory.find((s) => s.timestamp === compareTimestamp)) ??\n      null;\n\n// If this post is displayed under another post. Used to limit the size.\nconst isUnderPost = props.isUnderPost ? true : false;\n\nconst parent_id = Near.view(nearDevGovGigsContractAccountId, \"get_parent_id\", {\n  post_id: postId,\n});\n\nconst childPostIdsUnordered =\n  Near.view(nearDevGovGigsContractAccountId, \"get_children_ids\", {\n    post_id: postId,\n  }) ?? [];\n\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\nconst expandable = props.isPreview ? false : props.expandable ?? false;\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\n\nconst draftState = props.draftState;\n\nfunction readableDate(timestamp) {\n  const date = new Date(timestamp);\n  return date.toDateString() + \" \" + date.toLocaleTimeString();\n}\n\nconst timestamp = readableDate(\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\n);\n\nconst searchKeywords =\n  (props.searchKeywords ?? []).length > 0 ? (\n    <div className=\"mb-4\" key=\"search-keywords\">\n      <small className=\"text-muted\">\n        {\n          <div\n            style={{ \"font-family\": \"monospace\" }}\n            key=\"post-search-keywords\"\n          >\n            <span>Found keywords: </span>\n\n            {(props.searchKeywords ?? []).map((tag) =>\n              widget(\"components.atom.tag\", { linkTo: \"Feed\", tag }, tag)\n            )}\n          </div>\n        }\n      </small>\n    </div>\n  ) : null;\n\nconst allowedToEdit =\n  !props.isPreview &&\n  Near.view(nearDevGovGigsContractAccountId, \"is_allowed_to_edit\", {\n    post_id: postId,\n    editor: context.accountId,\n  });\n\nconst btnEditorWidget = (post_type, name) => (\n  <li>\n    <a\n      className=\"dropdown-item\"\n      role=\"button\"\n      onClick={() =>\n        State.update({ post_type, editorType: \"EDIT\", showEditor: true })\n      }\n    >\n      {name}\n    </a>\n  </li>\n);\n\nconst editControl = allowedToEdit ? (\n  <div className=\"btn-group\" role=\"group\">\n    <a\n      className=\"card-link px-2\"\n      role=\"button\"\n      title=\"Edit post\"\n      data-bs-toggle=\"dropdown\"\n      aria-expanded=\"false\"\n      type=\"button\"\n    >\n      <i className=\"bi bi-pencil-square\" />\n    </a>\n\n    <ul className=\"dropdown-menu\">\n      {btnEditorWidget(\"Idea\", \"Edit as an idea\")}\n      {btnEditorWidget(\"Solution\", \"Edit as a solution\")}\n      {btnEditorWidget(\"Attestation\", \"Edit as an attestation\")}\n      {btnEditorWidget(\"Sponsorship\", \"Edit as a sponsorship\")}\n      {btnEditorWidget(\"Comment\", \"Edit as a comment\")}\n    </ul>\n  </div>\n) : null;\n\nconst shareButton = props.isPreview ? null : (\n  <a\n    className=\"card-link text-dark\"\n    href={href(\"Post\", { id: postId })}\n    role=\"button\"\n    target=\"_blank\"\n    title=\"Open in new tab\"\n  >\n    <div className=\"bi bi-share\"></div>\n  </a>\n);\n\nconst header = (\n  <div className=\"p-3 pt-4\" key=\"header\">\n    <small className=\"text-muted\">\n      <div className=\"row justify-content-between\">\n        <div className=\"col-4\">\n          {widget(\"components.molecule.profile-card\", {\n            accountId: post.author_id,\n          })}\n        </div>\n\n        <div className=\"col-5\">\n          <div className=\"d-flex justify-content-end\">\n            {editControl}\n            {timestamp}\n\n            {widget(\"entity.post.History\", {\n              post,\n              timestamp: currentTimestamp,\n            })}\n\n            {shareButton}\n          </div>\n        </div>\n      </div>\n    </small>\n  </div>\n);\n\nconst emptyIcons = {\n  Idea: \"bi-lightbulb\",\n  Comment: \"bi-chat\",\n  Solution: \"bi-rocket\",\n  Attestation: \"bi-check-circle\",\n  Sponsorship: \"bi-cash-coin\",\n  Github: \"bi-github\",\n  Like: \"bi-heart\",\n  Reply: \"bi-reply\",\n};\n\nconst fillIcons = {\n  Idea: \"bi-lightbulb-fill\",\n  Comment: \"bi-chat-fill\",\n  Solution: \"bi-rocket-fill\",\n  Attestation: \"bi-check-circle-fill\",\n  Sponsorship: \"bi-cash-coin\",\n  Github: \"bi-github\",\n  Like: \"bi-heart-fill\",\n  Reply: \"bi-reply-fill\",\n};\n\nconst borders = {\n  Idea: \"border-light\",\n  Comment: \"border-light\",\n  Solution: \"border-light\",\n  Attestation: \"border-light\",\n  Sponsorship: \"border-light\",\n  Github: \"border-light\",\n};\n\nconst containsLike = props.isPreview\n  ? false\n  : post.likes.find((l) => l.author_id === context.accountId);\n\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\n\n// This must be outside onLike, because Near.view returns null at first,\n// \tand when the view call finished, it returns true/false.\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\nlet grantNotify = Near.view(\"social.near\", \"is_write_permission_granted\", {\n  predecessor_id: nearDevGovGigsContractAccountId,\n  key: context.accountId + \"/index/notify\",\n});\n\nif (grantNotify === null) {\n  return;\n}\n\nconst onLike = () => {\n  if (!context.accountId) {\n    return;\n  }\n\n  let likeTxn = [\n    {\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: \"add_like\",\n\n      args: {\n        post_id: postId,\n      },\n\n      deposit: Big(10).pow(21).mul(2),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ];\n\n  if (grantNotify === false) {\n    likeTxn.unshift({\n      contractName: \"social.near\",\n      methodName: \"grant_write_permission\",\n\n      args: {\n        predecessor_id: nearDevGovGigsContractAccountId,\n        keys: [context.accountId + \"/index/notify\"],\n      },\n\n      deposit: Big(10).pow(23),\n      gas: Big(10).pow(12).mul(30),\n    });\n  }\n\n  Near.call(likeTxn);\n};\n\nconst btnCreatorWidget = (post_type, icon, name, desc) => {\n  return (\n    <li className=\"py-1\">\n      <a\n        className=\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\"\n        style={{ color: \"rgb(55,109,137)\" }}\n        role=\"button\"\n        onClick={() =>\n          State.update({ post_type, editorType: \"CREATE\", showEditor: true })\n        }\n      >\n        <i className={`bi ${icon}`} style={{ fontSize: \"1.5rem\" }} />\n\n        <div className=\"ps-2 text-wrap\" style={{ width: \"18rem\" }}>\n          <div>{name}</div>\n          <small className=\"fw-light text-secondary\">{desc}</small>\n        </div>\n      </a>\n    </li>\n  );\n};\n\nconst buttonsFooter = props.isPreview ? null : (\n  <div className=\"row\" key=\"buttons-footer\">\n    <div className=\"col-8\">\n      <div\n        className=\"btn-group\"\n        role=\"group\"\n        aria-label=\"Basic outlined example\"\n      >\n        <ButtonWithHover\n          type=\"button\"\n          className=\"btn\"\n          style={{ border: \"0px\" }}\n          onClick={onLike}\n        >\n          <i className={`bi ${likeBtnClass}`} />\n\n          {post.likes.length === 0\n            ? \"Like\"\n            : widget(\"components.layout.LikeButton.Faces\", {\n                likesByUsers: Object.fromEntries(\n                  post.likes.map(({ author_id }) => [author_id, \"\"])\n                ),\n              })}\n        </ButtonWithHover>\n\n        <div className=\"btn-group\" role=\"group\">\n          <ButtonWithHover\n            type=\"button\"\n            className=\"btn\"\n            style={{ border: \"0px\" }}\n            data-bs-toggle=\"dropdown\"\n            aria-expanded=\"false\"\n          >\n            <i className={`bi ${emptyIcons.Reply}`} />\n            <span>Reply</span>\n          </ButtonWithHover>\n\n          <ul className=\"dropdown-menu\">\n            {btnCreatorWidget(\n              \"Idea\",\n              emptyIcons.Idea,\n              \"Idea\",\n              \"Get feedback from the community about a problem, opportunity, or need.\"\n            )}\n\n            {btnCreatorWidget(\n              \"Solution\",\n              emptyIcons.Solution,\n              \"Solution\",\n              \"Provide a specific proposal or implementation to an idea, optionally requesting funding.\"\n            )}\n\n            {btnCreatorWidget(\n              \"Attestation\",\n              emptyIcons.Attestation,\n              \"Attestation\",\n              \"Formally review or validate a solution as a recognized expert.\"\n            )}\n\n            {btnCreatorWidget(\n              \"Sponsorship\",\n              emptyIcons.Sponsorship,\n              \"Sponsorship\",\n              \"Offer to fund projects, events, or proposals that match your needs.\"\n            )}\n\n            <li>\n              <hr className=\"dropdown-divider\" />\n            </li>\n\n            {btnCreatorWidget(\n              \"Comment\",\n              emptyIcons.Comment,\n              \"Comment\",\n              \"Ask a question, provide information, or share a resource that is relevant to the thread.\"\n            )}\n          </ul>\n        </div>\n\n        <ButtonWithHover\n          type=\"button\"\n          className=\"btn\"\n          style={{ border: \"0px\" }}\n          data-bs-toggle=\"collapse\"\n          href={`#collapseChildPosts${postId}`}\n          aria-expanded={defaultExpanded}\n          aria-controls={`collapseChildPosts${postId}`}\n        >\n          <i className=\"bi bi-arrows-expand\" />\n          {`Expand Replies (${childPostIds.length})`}\n        </ButtonWithHover>\n\n        {isUnderPost || !parent_id ? (\n          <div key=\"link-to-parent\"></div>\n        ) : (\n          <a href={href(\"Post\", { id: parent_id })}>\n            <ButtonWithHover\n              type=\"button\"\n              style={{ border: \"0px\" }}\n              className=\"btn\"\n              key=\"link-to-parent\"\n            >\n              <i className=\"bi bi-arrow-90deg-up\" />\n              <span>Go to parent</span>\n            </ButtonWithHover>\n          </a>\n        )}\n      </div>\n    </div>\n  </div>\n);\n\nconst tokenMapping = {\n  NEAR: \"NEAR\",\n\n  USDT: {\n    NEP141: {\n      address: \"usdt.tether-token.near\",\n    },\n  },\n  USDC: {\n    NEP141: {\n      address:\n        \"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\",\n    },\n  },\n  // Add more tokens here as needed\n};\n\nconst reverseTokenMapping = Object.keys(tokenMapping).reduce(\n  (reverseMap, key) => {\n    const value = tokenMapping[key];\n\n    if (typeof value === \"object\") {\n      reverseMap[JSON.stringify(value)] = key;\n    }\n\n    return reverseMap;\n  },\n\n  {}\n);\n\nfunction tokenResolver(token) {\n  if (typeof token === \"string\") {\n    return token;\n  } else if (typeof token === \"object\") {\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\n    return tokenString || null;\n  } else {\n    return null; // Invalid input\n  }\n}\n\nconst isDraft =\n  draftState?.post_type === state.post_type &&\n  (draftState?.parent_post_id === postId ||\n    draftState?.edit_post_id === postId);\n\nconst Editor = () => {\n  const onCancel = () =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      showEditor: false,\n    }));\n\n  return (\n    <div className=\"row\" id={`accordion${postId}`} key=\"editors-footer\">\n      <div\n        className={\"w-100\"}\n        key={`${state.post_type}${state.editorType}${postId}`}\n      >\n        {widget(\n          \"entity.post.PostEditor\",\n\n          state.editorType === \"CREATE\"\n            ? {\n                draftState:\n                  draftState?.parent_post_id === postId\n                    ? draftState\n                    : undefined,\n\n                mode: \"Create\",\n                onCancel,\n                parent_id: postId,\n                post_type: state.post_type,\n              }\n            : {\n                ...post.snapshot,\n                id: postId,\n                author_id: post.author_id,\n\n                draftState:\n                  draftState?.edit_post_id === postId ? draftState : undefined,\n\n                tags: post.snapshot.labels ?? [],\n\n                mode: \"Edit\",\n                onCancel,\n                post_type: state.post_type,\n                sponsorship_token: tokenResolver(sponsorshipToken),\n              }\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst tags = (\n  <div className=\"card-title\" style={{ margin: \"20px 0\" }} key=\"post-labels\">\n    {(post.snapshot.labels ?? []).map((tag) =>\n      widget(\"components.atom.tag\", { linkTo: \"Feed\", tag }, tag)\n    )}\n  </div>\n);\n\nconst postTitle =\n  snapshot.post_type === \"Comment\" ? null : (\n    <h5 className=\"card-title mb-4\" key=\"post-title\">\n      <div className=\"row justify-content-between\">\n        <div className=\"col-9\">\n          <i className={`bi ${emptyIcons[snapshot.post_type]}`} />\n          {snapshot.post_type}: {snapshot.name}\n        </div>\n      </div>\n    </h5>\n  );\n\nconst postExtra =\n  (snapshot.post_type === \"Solution\" || snapshot.post_type === \"Sponsorship\") &&\n  typeof fundingAmount === \"number\" &&\n  fundingAmount > 0 ? (\n    <div key=\"post-extra\">\n      <h6 className=\"card-subtitle mb-2 text-muted\">\n        {`Maximum amount: ${fundingAmount} ${tokenResolver(sponsorshipToken)}`}\n      </h6>\n\n      <h6 className=\"card-subtitle gap-2 mb-2 text-muted\">\n        <span>{`${\n          snapshot.post_type === \"Solution\" ? \"Requested sponsor\" : \"Supervisor\"\n        }:`}</span>\n\n        <Widget\n          src={`neardevgov.near/widget/ProfileLine`}\n          props={{\n            accountId: snapshot.requested_sponsor ?? snapshot.supervisor,\n          }}\n        />\n      </h6>\n    </div>\n  ) : null;\n\nconst childPostHasDraft = childPostIds.find(\n  (childId) =>\n    childId === draftState?.edit_post_id ||\n    childId === draftState?.parent_post_id\n);\n\nif (\n  (childPostHasDraft || state.childrenOfChildPostsHasDraft) &&\n  typeof props.expandParent === \"function\"\n) {\n  props.expandParent();\n}\n\nconst postsList =\n  props.isPreview || childPostIds.length === 0 ? null : (\n    <div className=\"row\" key=\"posts-list\">\n      <div\n        className={`collapse ${\n          defaultExpanded ||\n          childPostHasDraft ||\n          state.childrenOfChildPostsHasDraft\n            ? \"show\"\n            : \"\"\n        }`}\n        id={`collapseChildPosts${postId}`}\n      >\n        {childPostIds.map((childId) =>\n          widget(\n            \"entity.post.Card\",\n            {\n              id: childId,\n              isUnderPost: true,\n              draftState,\n\n              expandParent: () =>\n                State.update({ childrenOfChildPostsHasDraft: true }),\n            },\n            `subpost${childId}of${postId}`\n          )\n        )}\n      </div>\n    </div>\n  );\n\nconst LimitedMarkdown = styled.div`\n  max-height: 20em;\n`;\n\n// Determine if located in the post page.\nconst isInList = props.isInList;\nconst contentArray = snapshot.description.split(\"\\n\");\nconst needClamp = isInList && contentArray.length > 5;\n\nState.init({\n  clamp: needClamp,\n});\n\nconst clampedContent = needClamp\n  ? contentArray.slice(0, 3).join(\"\\n\")\n  : snapshot.description;\n\n// Should make sure the posts under the currently top viewed post are limited in size.\nconst descriptionArea = isUnderPost ? (\n  <LimitedMarkdown className=\"overflow-auto\" key=\"description-area\">\n    {widget(\"components.molecule.markdown-viewer\", {\n      text: snapshot.description,\n    })}\n  </LimitedMarkdown>\n) : (\n  <div>\n    <div className={state.clamp ? \"clamp\" : \"\"}>\n      {widget(\"components.molecule.markdown-viewer\", {\n        text: state.clamp ? clampedContent : snapshot.description,\n      })}\n    </div>\n\n    {state.clamp ? (\n      <div className=\"d-flex justify-content-start\">\n        <a\n          className=\"btn-link text-dark fw-bold text-decoration-none\"\n          onClick={() => State.update({ clamp: false })}\n        >\n          See more\n        </a>\n      </div>\n    ) : null}\n  </div>\n);\n\nconst timestampElement = (_snapshot) => (\n  <a\n    className=\"text-muted\"\n    href={href(\"Post\", {\n      id: postId,\n      timestamp: _snapshot.timestamp,\n      compareTimestamp: null,\n      referral,\n    })}\n  >\n    {readableDate(_snapshot.timestamp / 1000000).substring(4)}\n\n    <Widget\n      src=\"mob.near/widget/ProfileImage\"\n      props={{\n        accountId: _snapshot.editor_id,\n        style: { width: \"1.25em\", height: \"1.25em\" },\n        imageStyle: { transform: \"translateY(-12.5%)\" },\n      }}\n    />\n\n    {_snapshot.editor_id.substring(0, 8)}\n  </a>\n);\n\nfunction combineText(_snapshot) {\n  return (\n    \"## \" +\n    _snapshot.post_type +\n    \": \" +\n    _snapshot.name +\n    \"\\n\" +\n    _snapshot.description\n  );\n}\n\nreturn (\n  <AttractableDiv className={`card ${borders[snapshot.post_type]}`}>\n    {header}\n\n    <div className=\"card-body\">\n      {searchKeywords}\n\n      {compareSnapshot ? (\n        <div\n          className=\"border rounded\"\n          style={{ marginTop: \"16px\", marginBottom: \"16px\" }}\n        >\n          <div\n            className=\"d-flex justify-content-end\"\n            style={{ fontSize: \"12px\" }}\n          >\n            <div className=\"d-flex w-50 justify-content-end mt-1 me-2\">\n              {timestampElement(snapshot)}\n\n              {snapshot !== compareSnapshot && (\n                <>\n                  <div className=\"mx-1 align-self-center\">\n                    <i className=\"bi bi-file-earmark-diff\" />\n                  </div>\n\n                  {timestampElement(compareSnapshot)}\n                </>\n              )}\n            </div>\n          </div>\n\n          <Widget\n            src=\"markeljan.near/widget/MarkdownDiff\"\n            props={{\n              post: post,\n\n              currentCode: combineText(\n                swapTimestamps ? compareSnapshot : snapshot\n              ),\n\n              prevCode: combineText(\n                swapTimestamps ? snapshot : compareSnapshot\n              ),\n\n              showLineNumber: true,\n            }}\n          />\n        </div>\n      ) : (\n        <>\n          {postTitle}\n          {postExtra}\n          {descriptionArea}\n        </>\n      )}\n\n      {tags}\n      {buttonsFooter}\n      {!props.isPreview && (isDraft || state.showEditor) && <Editor />}\n      {postsList}\n    </div>\n  </AttractableDiv>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devhub.efiz.near/widget/gigs-board.entity.post.Card", "fact_widget_deployments_id": "7feff2d74ff038c7f929a5a389739b6e", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}