{"tx_hash": "EH8bTci3bNtcSQA1dMyGDRDPFUjjNhF9ipVHNTvdeRwS", "action_id_social": "EcfMnrNe2Te2LDFcttTFLr83hrtQnY3duqPMBdpnbWWv-0-widget", "block_id": 104795070, "block_timestamp": "2023-11-02T22:30:45.740Z", "signer_id": "devhub.efiz.near", "widget_name": "gigs-board.pages.Create", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/draftstate\" */\nconst DRAFT_STATE_STORAGE_KEY = \"POST_DRAFT_STATE\";\nlet is_edit_or_add_post_transaction = false;\nlet transaction_method_name;\n\nif (props.transactionHashes) {\n  const transaction = fetch(\"https://rpc.mainnet.near.org\", {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"tx\",\n      params: [props.transactionHashes, context.accountId],\n    }),\n  });\n  transaction_method_name =\n    transaction?.body?.result?.transaction?.actions[0].FunctionCall.method_name;\n\n  is_edit_or_add_post_transaction =\n    transaction_method_name == \"add_post\" ||\n    transaction_method_name == \"edit_post\";\n\n  if (is_edit_or_add_post_transaction) {\n    Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\n  }\n}\n\nconst onDraftStateChange = (draftState) =>\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(draftState));\nlet draftState;\ntry {\n  draftState = JSON.parse(Storage.privateGet(DRAFT_STATE_STORAGE_KEY));\n} catch (e) {}\n/* END_INCLUDE: \"core/lib/draftstate\" */\n\nconst activeOptionStyle = {\n  backgroundColor: \"#0C7283\",\n  color: \"#f3f3f3\",\n};\n\nconst postTypeOptions = {\n  Idea: {\n    name: \"Idea\",\n    icon: \"bi-lightbulb\",\n\n    description:\n      \"Get feedback from the community about a problem, opportunity, or need.\",\n  },\n\n  Solution: {\n    name: \"Solution\",\n    icon: \"bi-rocket\",\n\n    description:\n      \"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\",\n  },\n};\n\nconst CreatePage = ({ transactionHashes }) => {\n  const recoveredPostType = Storage.privateGet(\"post_type\");\n\n  const initialState = {\n    post_type: recoveredPostType ?? postTypeOptions.Idea.name,\n  };\n\n  State.init(initialState);\n\n  const stateReset = () => {\n    Storage.privateSet(\"post_type\", null);\n    State.update(initialState);\n  };\n\n  if (typeof transactionHashes === \"string\") stateReset();\n\n  if (recoveredPostType !== null) {\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      post_type: recoveredPostType,\n    }));\n  }\n\n  const typeSwitch = (optionName) => {\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      post_type: optionName,\n    }));\n\n    Storage.privateSet(\"post_type\", optionName);\n  };\n\n  return widget(\"components.template.app-layout\", {\n    children: (\n      <div\n        className=\"d-flex flex-column gap-4 p-4 bg-light\"\n        data-bs-parent={`#accordion${postId}`}\n        id={`${state.post_type}_post_spawner`}\n      >\n        {transactionHashes ? (\n          <>\n            <p\n              className=\"d-flex flex-column justify-content-center align-items-center gap-3\"\n              style={{ height: 480 }}\n            >\n              <span>Post created successfully.</span>\n\n              <a\n                style={{ backgroundColor: \"#3252A6\" }}\n                className=\"btn fw-bold\"\n                href={href(\"Feed\")}\n              >\n                Back to feed\n              </a>\n            </p>\n\n            {widget(\"entity.post.PostEditor\", {\n              className: \"d-none\",\n              transactionHashes,\n            })}\n          </>\n        ) : (\n          <>\n            <div className=\"d-flex flex-column gap-3 w-100\">\n              <p className=\"card-title fw-bold fs-6\">\n                What do you want to create?\n              </p>\n\n              <div className=\"d-flex gap-3\">\n                {Object.values(postTypeOptions).map((option) => (\n                  <button\n                    className={`btn btn-${\n                      state.post_type === option.name\n                        ? \"primary\"\n                        : \"outline-secondary\"\n                    }`}\n                    data-testid={`btn-${option.name.toLowerCase()}`}\n                    key={option.name}\n                    onClick={() => typeSwitch(option.name)}\n                    style={\n                      state.post_type === option.name ? activeOptionStyle : null\n                    }\n                    type=\"button\"\n                  >\n                    <i className={`bi ${option.icon}`} />\n                    <span>{option.name}</span>\n                  </button>\n                ))}\n              </div>\n\n              <p className=\"text-muted w-75\">\n                {postTypeOptions[state.post_type].description}\n              </p>\n            </div>\n\n            {widget(\"entity.post.PostEditor\", {\n              mode: \"Create\",\n              onCancel: stateReset,\n              parent_id: null,\n              post_type: state.post_type,\n              transactionHashes,\n            })}\n          </>\n        )}\n      </div>\n    ),\n  });\n};\n\nreturn CreatePage(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devhub.efiz.near/widget/gigs-board.pages.Create", "fact_widget_deployments_id": "c08251c2742b73facee0d1ae2fc65ee4", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 53}