{"tx_hash": "EH8bTci3bNtcSQA1dMyGDRDPFUjjNhF9ipVHNTvdeRwS", "action_id_social": "EcfMnrNe2Te2LDFcttTFLr83hrtQnY3duqPMBdpnbWWv-0-widget", "block_id": 104795070, "block_timestamp": "2023-11-02T22:30:45.740Z", "signer_id": "devhub.efiz.near", "widget_name": "gigs-board.pages.community.activity", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/adapter/dev-hub\" */\nconst devHubAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst DevHub = {\n  get_root_members: () =>\n    Near.view(devHubAccountId, \"get_root_members\") ?? null,\n\n  has_moderator: ({ account_id }) =>\n    Near.view(devHubAccountId, \"has_moderator\", { account_id }) ?? null,\n\n  create_community: ({ inputs }) =>\n    Near.call(devHubAccountId, \"create_community\", { inputs }),\n\n  get_community: ({ handle }) =>\n    Near.view(devHubAccountId, \"get_community\", { handle }) ?? null,\n\n  get_account_community_permissions: ({ account_id, community_handle }) =>\n    Near.view(devHubAccountId, \"get_account_community_permissions\", {\n      account_id,\n      community_handle,\n    }) ?? null,\n\n  update_community: ({ handle, community }) =>\n    Near.call(devHubAccountId, \"update_community\", { handle, community }),\n\n  delete_community: ({ handle }) =>\n    Near.call(devHubAccountId, \"delete_community\", { handle }),\n\n  update_community_board: ({ handle, board }) =>\n    Near.call(devHubAccountId, \"update_community_board\", { handle, board }),\n\n  update_community_github: ({ handle, github }) =>\n    Near.call(devHubAccountId, \"update_community_github\", { handle, github }),\n\n  get_access_control_info: () =>\n    Near.view(devHubAccountId, \"get_access_control_info\") ?? null,\n\n  get_all_authors: () => Near.view(devHubAccountId, \"get_all_authors\") ?? null,\n\n  get_all_communities_metadata: () =>\n    Near.view(devHubAccountId, \"get_all_communities_metadata\") ?? null,\n\n  get_all_labels: () => Near.view(devHubAccountId, \"get_all_labels\") ?? null,\n\n  get_post: ({ post_id }) =>\n    Near.view(devHubAccountId, \"get_post\", { post_id }) ?? null,\n\n  get_posts_by_author: ({ author }) =>\n    Near.view(devHubAccountId, \"get_posts_by_author\", { author }) ?? null,\n\n  get_posts_by_label: ({ label }) =>\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? null,\n\n  useQuery: (name, params) => {\n    const initialState = { data: null, error: null, isLoading: true };\n\n    const cacheState = useCache(\n      () =>\n        Near.asyncView(devHubAccountId, [\"get\", name].join(\"_\"), params ?? {})\n          .then((response) => ({\n            ...initialState,\n            data: response ?? null,\n            isLoading: false,\n          }))\n          .catch((error) => ({\n            ...initialState,\n            error: props?.error ?? error,\n            isLoading: false,\n          })),\n\n      JSON.stringify({ name, params }),\n      { subscribe: true }\n    );\n\n    return cacheState === null ? initialState : cacheState;\n  },\n};\n/* END_INCLUDE: \"core/adapter/dev-hub\" */\n\nconst CommunityActivityPage = ({ handle, transactionHashes }) => {\n  State.init({ isSpawnerHidden: true });\n\n  const spawnerToggle = (forcedState) =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      isSpawnerHidden: !(forcedState ?? lastKnownState.isSpawnerHidden),\n    }));\n\n  const communityData = DevHub.get_community({ handle });\n\n  return widget(\"entity.community.layout\", {\n    path: [{ label: \"Communities\", pageId: \"communities\" }],\n    title: \"Activity\",\n    handle,\n\n    children:\n      communityData !== null ? (\n        <div class=\"row\">\n          <div class=\"col-md-9\">\n            <div class=\"row mb-2\">\n              <div class=\"col\">\n                <div class=\"d-flex align-items-center justify-content-between\">\n                  <small class=\"text-muted\">\n                    <span>Required tags:</span>\n\n                    {widget(\"components.atom.tag\", {\n                      linkTo: \"Feed\",\n                      ...communityData,\n                    })}\n                  </small>\n\n                  {widget(\"components.molecule.button\", {\n                    icon: {\n                      type: \"bootstrap_icon\",\n                      variant: \"bi-plus-circle-fill\",\n                    },\n\n                    isHidden: !state.isSpawnerHidden,\n                    label: \"Post\",\n                    onClick: () => spawnerToggle(true),\n                  })}\n                </div>\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col\">\n                {widget(\"entity.post.Spawner\", {\n                  isHidden: state.isSpawnerHidden,\n                  onCancel: () => spawnerToggle(false),\n                  tags: [communityData.tag],\n                  transactionHashes,\n                })}\n\n                {widget(\"entity.post.List\", { tag: communityData.tag })}\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-md-3 container-fluid\">\n            {widget(\"entity.community.sidebar\", {\n              handle: communityData.handle,\n            })}\n          </div>\n        </div>\n      ) : (\n        <div>Loading ...</div>\n      ),\n  });\n};\n\nreturn CommunityActivityPage(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devhub.efiz.near/widget/gigs-board.pages.community.activity", "fact_widget_deployments_id": "d29138b311d82ce83ff3e345d32c0fa8", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 30}