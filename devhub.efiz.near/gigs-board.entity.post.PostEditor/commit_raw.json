{"tx_hash": "EH8bTci3bNtcSQA1dMyGDRDPFUjjNhF9ipVHNTvdeRwS", "action_id_social": "EcfMnrNe2Te2LDFcttTFLr83hrtQnY3duqPMBdpnbWWv-0-widget", "block_id": 104795070, "block_timestamp": "2023-11-02T22:30:45.740Z", "signer_id": "devhub.efiz.near", "widget_name": "gigs-board.entity.post.PostEditor", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/autocomplete\" */\nconst autocompleteEnabled = true;\n\nconst AutoComplete = styled.div`\n  z-index: 5;\n\n  > div > div {\n    padding: calc(var(--padding) / 2);\n  }\n`;\n\nfunction textareaInputHandler(value) {\n  const showAccountAutocomplete = /@[\\w][^\\s]*$/.test(value);\n  State.update((lastKnownState) => ({\n    ...lastKnownState,\n    text: value,\n    showAccountAutocomplete,\n  }));\n}\n\nfunction autoCompleteAccountId(id) {\n  let description = state.description.replace(/[\\s]{0,1}@[^\\s]*$/, \"\");\n  description = `${description} @${id}`.trim() + \" \";\n  State.update((lastKnownState) => ({\n    ...lastKnownState,\n    description,\n    showAccountAutocomplete: false,\n  }));\n}\n/* END_INCLUDE: \"core/lib/autocomplete\" */\n/* INCLUDE: \"core/lib/draftstate\" */\nconst DRAFT_STATE_STORAGE_KEY = \"POST_DRAFT_STATE\";\nlet is_edit_or_add_post_transaction = false;\nlet transaction_method_name;\n\nif (props.transactionHashes) {\n  const transaction = fetch(\"https://rpc.mainnet.near.org\", {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"tx\",\n      params: [props.transactionHashes, context.accountId],\n    }),\n  });\n  transaction_method_name =\n    transaction?.body?.result?.transaction?.actions[0].FunctionCall.method_name;\n\n  is_edit_or_add_post_transaction =\n    transaction_method_name == \"add_post\" ||\n    transaction_method_name == \"edit_post\";\n\n  if (is_edit_or_add_post_transaction) {\n    Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\n  }\n}\n\nconst onDraftStateChange = (draftState) =>\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(draftState));\nlet draftState;\ntry {\n  draftState = JSON.parse(Storage.privateGet(DRAFT_STATE_STORAGE_KEY));\n} catch (e) {}\n/* END_INCLUDE: \"core/lib/draftstate\" */\n\nconst normalizeTag = (tag) =>\n  tag\n    .replaceAll(/[- \\.]/g, \"_\")\n    .replaceAll(/[^\\w]+/g, \"\")\n    .replaceAll(/_+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\")\n    .toLowerCase()\n    .trim(\"-\");\n\nfunction tokenResolver(token) {\n  if (typeof token === \"string\") {\n    return token;\n  } else if (typeof token === \"object\") {\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\n    return tokenString || null;\n  } else {\n    return null; // Invalid input\n  }\n}\n\nconst postSchemas = {\n  Comment: [\"description\"],\n  Idea: [\"name\", \"description\"],\n\n  Solution: [\n    \"name\",\n    \"description\",\n    \"requested_sponsorship_amount\",\n    \"requested_sponsorship_token\",\n    \"requested_sponsor\",\n  ],\n\n  Attestation: [\"name\", \"description\"],\n\n  Sponsorship: [\n    \"name\",\n    \"description\",\n    \"amount\",\n    \"sponsorship_token\",\n    \"supervisor\",\n  ],\n\n  Github: [\"github_link\", \"name\", \"description\"],\n};\n\nconst availableTokenParameters = {\n  NEAR: \"NEAR\",\n\n  USDT: {\n    NEP141: {\n      address: \"usdt.tether-token.near\",\n    },\n  },\n\n  USDC: {\n    NEP141: {\n      address:\n        \"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\",\n    },\n  },\n};\n\nconst kycDisclaimer = (\n  <p>\n    <i>\n      * Note, all projects that were granted sponsorships are required to pass\n      KYC to receive the funding.\n    </i>\n  </p>\n);\n\nconst PostEditor = ({\n  id,\n  amount,\n  className,\n  name,\n  description,\n  github_link,\n  onCancel,\n  parent_id,\n  referral,\n  requested_sponsor,\n  requested_sponsorship_amount,\n  requested_sponsorship_token,\n  sponsorship_token,\n  supervisor,\n  selected,\n  tags,\n  text,\n  transactionHashes,\n  ...otherProps\n}) => {\n  const mode = otherProps.mode ?? \"Create\",\n    post_type = otherProps.post_type ?? \"Idea\";\n\n  const initialState = {\n    fundraising: typeof amount === \"string\" && parseInt(amount) > 0,\n    author_id: context.accountId,\n\n    tags: [\n      ...(tags ?? otherProps.labels ?? []),\n      ...(typeof referral === \"string\" ? [`referral:${referral}`] : []),\n    ],\n\n    /**\n     * Should always be updated along with `state.tags`\n     */\n    tagOptions: (tags ?? []).map((tag) => ({ name: tag })),\n    name: name ?? \"\",\n    description: description ?? \"\",\n    amount: requested_sponsorship_amount ?? amount ?? \"0\",\n\n    sponsorship_token:\n      availableTokenParameters[\n        sponsorship_token ?? requested_sponsorship_token\n      ] ?? \"USDT\",\n\n    supervisor: requested_sponsor ?? supervisor ?? \"neardevdao.near\",\n    github_link: github_link ?? \"\",\n    waitForDraftRecover: true,\n    warning: \"\",\n  };\n\n  State.init(initialState);\n\n  const stateReset = () => {\n    Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\n    State.update({ ...initialState, waitForDraftRecover: false });\n  };\n\n  if (state.waitForDraftRecover) {\n    const recoveredDraft =\n      otherProps.draftState ??\n      JSON.parse(Storage.privateGet(DRAFT_STATE_STORAGE_KEY) ?? null);\n\n    const isRelevantDraftDetected =\n      recoveredDraft?.post_type === post_type &&\n      (recoveredDraft?.parent_post_id === id ||\n        recoveredDraft?.edit_post_id === id);\n\n    if (isRelevantDraftDetected) {\n      if (typeof transactionHashes === \"string\") {\n        stateReset();\n      } else {\n        State.update((lastKnownState) => ({\n          ...lastKnownState,\n          ...recoveredDraft,\n\n          ...{\n            tags: (lastKnownState.tags.length > 0\n              ? lastKnownState\n              : recoveredDraft\n            ).tags,\n          },\n\n          waitForDraftRecover: false,\n        }));\n      }\n    }\n  }\n\n  const onCancelClick = () => {\n    if (typeof onCancel === \"function\") onCancel();\n    stateReset();\n  };\n\n  // This must be outside onClick, because Near.view returns null at first,\n  // and when the view call finished, it returns true/false.\n  // If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\n  const grantNotify = Near.view(\"social.near\", \"is_write_permission_granted\", {\n    predecessor_id: nearDevGovGigsContractAccountId,\n    key: context.accountId + \"/index/notify\",\n  });\n\n  if (!context.accountId) {\n    return (\n      <p className=\"alert alert-warning\">\n        Please connect your NEAR wallet first.\n      </p>\n    );\n  }\n\n  if (grantNotify === null) {\n    return <p>Loading...</p>;\n  }\n\n  const fields = postSchemas[post_type];\n\n  const onSubmit = () => {\n    const body = {\n      Comment: { description: state.description, comment_version: \"V2\" },\n\n      Idea: {\n        name: state.name,\n        description: state.description,\n        idea_version: \"V1\",\n      },\n\n      Solution: {\n        name: state.name,\n        description: state.description,\n        requested_sponsor: state.supervisor,\n        requested_sponsorship_amount: state.amount,\n\n        requested_sponsorship_token:\n          availableTokenParameters[state.sponsorship_token],\n\n        solution_version: \"V2\",\n      },\n\n      Attestation: {\n        name: state.name,\n        description: state.description,\n        attestation_version: \"V1\",\n      },\n\n      Sponsorship: {\n        name: state.name,\n        description: state.description,\n        supervisor: state.supervisor,\n        amount: state.amount,\n        sponsorship_token: availableTokenParameters[state.sponsorship_token],\n        sponsorship_version: \"V1\",\n      },\n\n      Github: {\n        name: state.name,\n        description: state.description,\n        github_version: \"V0\",\n        github_link: state.github_link,\n      },\n    }[post_type];\n\n    body[\"post_type\"] = post_type;\n\n    const transactions = [];\n\n    if (mode === \"Create\") {\n      onDraftStateChange({ ...state, parent_post_id: id ?? null, post_type });\n\n      transactions.push({\n        contractName: nearDevGovGigsContractAccountId,\n        methodName: \"add_post\",\n        args: { parent_id, labels: state.tags, body },\n        deposit: Big(10).pow(21).mul(2),\n        gas: Big(10).pow(12).mul(100),\n      });\n    } else if (mode === \"Edit\") {\n      onDraftStateChange({ ...state, edit_post_id: id, post_type });\n\n      transactions.push({\n        contractName: nearDevGovGigsContractAccountId,\n        methodName: \"edit_post\",\n        args: { id, labels: state.tags, body },\n        deposit: Big(10).pow(21).mul(2),\n        gas: Big(10).pow(12).mul(100),\n      });\n    }\n\n    if (mode === \"Create\" || mode === \"Edit\") {\n      if (grantNotify === false) {\n        transactions.unshift({\n          contractName: \"social.near\",\n          methodName: \"grant_write_permission\",\n\n          args: {\n            predecessor_id: nearDevGovGigsContractAccountId,\n            keys: [context.accountId + \"/index/notify\"],\n          },\n\n          deposit: Big(10).pow(23),\n          gas: Big(10).pow(12).mul(30),\n        });\n      }\n\n      Near.call(transactions);\n    }\n  };\n\n  const checkTag = (tag) =>\n    Near.asyncView(\n      nearDevGovGigsContractAccountId,\n      \"is_allowed_to_use_labels\",\n      { editor: context.accountId, labels: [tag] }\n    ).then((allowed) =>\n      State.update((lastKnownState) => ({\n        ...lastKnownState,\n\n        warning: allowed\n          ? \"\"\n          : `The tag \"${tag}\" is protected and can only be added by moderators`,\n      }))\n    );\n\n  const setTags = (options) => {\n    const tagOptions = options.map((tagOption) => ({\n      name: normalizeTag(tagOption.name),\n    }));\n\n    if (tagOptions.length < state.tagOptions.length) {\n      const lastKnownTagList = new Set(\n        state.tagOptions.map(({ name }) => name)\n      );\n\n      for (const tag of tagOptions) {\n        lastKnownTagList.delete(tag.name);\n      }\n\n      const protectedTag = lastKnownTagList.values().next().value;\n\n      Near.asyncView(\n        nearDevGovGigsContractAccountId,\n        \"is_allowed_to_use_labels\",\n        { editor: context.accountId, labels: [protectedTag] }\n      ).then((allowed) =>\n        State.update((lastKnownState) =>\n          allowed\n            ? { ...lastKnownState, tags: lastKnownTagList, tagOptions }\n            : {\n                ...lastKnownState,\n                warning: `The tag \"${protectedTag}\" is protected and can only be updated by moderators`,\n              }\n        )\n      );\n    } else {\n      State.update((lastKnownState) => ({\n        ...lastKnownState,\n        tags: tagOptions.map(({ name }) => name),\n\n        tagOptions: tagOptions.map((tagOption) => ({\n          name: normalizeTag(tagOption.name),\n        })),\n      }));\n    }\n  };\n\n  const existingTags =\n    Near.view(nearDevGovGigsContractAccountId, \"get_all_allowed_labels\", {\n      editor: context.accountId,\n    }) ?? [];\n\n  const tagEditor = (\n    <div className=\"col-lg-12  mb-2\">\n      <span>Tags:</span>\n\n      <Typeahead\n        multiple\n        labelKey=\"name\"\n        onInputChange={checkTag}\n        onChange={setTags}\n        options={existingTags.map((tag) => ({ name: tag }))}\n        placeholder=\"near.social, widget, NEP, standard, protocol, tool\"\n        selected={state.tagOptions}\n        positionFixed\n        allowNew={(results, params) =>\n          !new Set(existingTags).has(params.text) &&\n          (selected ?? []).filter(\n            (selectedTagOption) => selectedTagOption.name === params.text\n          ).length === 0 &&\n          Near.view(\n            nearDevGovGigsContractAccountId,\n            \"is_allowed_to_use_labels\",\n            {\n              editor: context.accountId,\n              labels: [params.text],\n            }\n          )\n        }\n      />\n    </div>\n  );\n\n  const titleSection = (\n    <div className=\"col-lg-6 mb-2\">\n      <span>Title:</span>\n\n      <input\n        data-testid=\"input-title\"\n        type=\"text\"\n        value={state.name}\n        onChange={(event) =>\n          State.update((lastKnownState) => ({\n            ...lastKnownState,\n            name: event.target.value,\n          }))\n        }\n      />\n    </div>\n  );\n\n  const descriptionSection = (\n    <div className=\"col-lg-12 mb-2\">\n      <span>Description:</span>\n      <br />\n\n      {widget(\"components.molecule.markdown-editor\", {\n        data: { handler: state.handler, content: state.description },\n\n        onChange: (content) => {\n          State.update((lastKnownState) => ({\n            ...lastKnownState,\n            description: content,\n            handler: \"update\",\n          }));\n\n          textareaInputHandler(content);\n        },\n      })}\n\n      {autocompleteEnabled && state.showAccountAutocomplete && (\n        <AutoComplete>\n          <Widget\n            src=\"near/widget/AccountAutocomplete\"\n            props={{\n              term: state.text.split(\"@\").pop(),\n              onSelect: autoCompleteAccountId,\n\n              onClose: () =>\n                State.update((lastKnownState) => ({\n                  ...lastKnownState,\n                  showAccountAutocomplete: false,\n                })),\n            }}\n          />\n        </AutoComplete>\n      )}\n    </div>\n  );\n\n  const fundraisingToggle = (\n    <div className=\"mb-2\">\n      <p className=\"fs-6 fw-bold mb-1\">\n        <span>Are you seeking funding for your solution?</span>\n        <span className=\"text-muted fw-normal\">(Optional)</span>\n      </p>\n\n      <div className=\"form-check form-check-inline\">\n        <label className=\"form-check-label\">\n          <button\n            className=\"btn btn-light p-0\"\n            data-testid=\"btn-request-funding\"\n            style={{\n              backgroundColor: state.fundraising ? \"#0C7283\" : \"inherit\",\n              color: \"#f3f3f3\",\n              border: \"solid #D9D9D9\",\n              borderRadius: \"100%\",\n              height: \"20px\",\n              width: \"20px\",\n            }}\n            onClick={() =>\n              State.update((lastKnownState) => ({\n                ...lastKnownState,\n                fundraising: true,\n              }))\n            }\n          />\n\n          <span>Yes</span>\n        </label>\n      </div>\n\n      <div className=\"form-check form-check-inline\">\n        <label className=\"form-check-label\">\n          <button\n            className=\"btn btn-light p-0\"\n            style={{\n              backgroundColor: !state.fundraising ? \"#0C7283\" : \"inherit\",\n              color: \"#f3f3f3\",\n              border: \"solid #D9D9D9\",\n              borderRadius: \"100%\",\n              height: \"20px\",\n              width: \"20px\",\n            }}\n            onClick={() =>\n              State.update((lastKnownState) => ({\n                ...lastKnownState,\n                fundraising: false,\n              }))\n            }\n          />\n\n          <span>No</span>\n        </label>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className={[\"card\", className].join(\" \")}>\n      <div className=\"card-header\">{`${mode} ${post_type}`}</div>\n\n      <div className=\"card-body\">\n        {state.warning && (\n          <div\n            className=\"alert alert-warning alert-dismissible fade show\"\n            role=\"alert\"\n          >\n            {state.warning}\n\n            <button\n              type=\"button\"\n              className=\"btn-close\"\n              data-bs-dismiss=\"alert\"\n              aria-label=\"Close\"\n              onClick={() =>\n                State.update((lastKnownState) => ({\n                  ...lastKnownState,\n                  warning: \"\",\n                }))\n              }\n            />\n          </div>\n        )}\n\n        {/* This statement around the githubLinkDiv creates a weird render bug\n      where the title renders extra on state change. */}\n        {fields.includes(\"github_link\") ? (\n          <div className=\"row\">\n            {fields.includes(\"github_link\") && (\n              <div className=\"col-lg-12  mb-2\">\n                <span>Github Issue URL:</span>\n\n                <input\n                  type=\"text\"\n                  value={state.github_link}\n                  onChange={(event) =>\n                    State.update((lastKnownState) => ({\n                      ...lastKnownState,\n                      github_link: event.target.value,\n                    }))\n                  }\n                />\n              </div>\n            )}\n\n            {tagEditor}\n            {fields.includes(\"name\") && titleSection}\n            {fields.includes(\"description\") && descriptionSection}\n          </div>\n        ) : (\n          <div className=\"row\">\n            {tagEditor}\n            {fields.includes(\"name\") ? titleSection : null}\n            {post_type === \"Solution\" ? fundraisingToggle : null}\n\n            {fields.includes(\"amount\") ? (\n              <div className=\"col-lg-6 mb-2\">\n                <span>Amount:</span>\n\n                <input\n                  type=\"text\"\n                  value={state.amount}\n                  onChange={(event) =>\n                    State.update((lastKnownState) => ({\n                      ...lastKnownState,\n                      amount: event.target.value,\n                    }))\n                  }\n                />\n              </div>\n            ) : null}\n\n            {post_type === \"Sponsorship\" ? (\n              <div className=\"col-lg-6 mb-2\">\n                <span>Currency</span>\n\n                <select\n                  onChange={(event) =>\n                    State.update((lastKnownState) => ({\n                      ...lastKnownState,\n                      sponsorship_token: event.target.value,\n                    }))\n                  }\n                  className=\"form-select\"\n                  aria-label=\"Select currency\"\n                >\n                  <option\n                    selected={tokenResolver(state.sponsorship_token) === \"USDT\"}\n                    value=\"USDT\"\n                  >\n                    USDT\n                  </option>\n\n                  <option\n                    selected={tokenResolver(state.sponsorship_token) === \"USDC\"}\n                    value=\"USDC\"\n                  >\n                    USDC\n                  </option>\n\n                  <option\n                    selected={tokenResolver(state.sponsorship_token) === \"NEAR\"}\n                    value=\"NEAR\"\n                  >\n                    NEAR\n                  </option>\n                </select>\n              </div>\n            ) : null}\n\n            {post_type === \"Sponsorship\" && (\n              <div className=\"col-lg-6 mb-2\">\n                <span>Supervisor</span>\n\n                <input\n                  type=\"text\"\n                  value={state.supervisor}\n                  onChange={(event) =>\n                    State.update((lastKnownState) => ({\n                      ...lastKnownState,\n                      supervisor: event.target.value,\n                    }))\n                  }\n                />\n              </div>\n            )}\n\n            {fields.includes(\"description\") ? descriptionSection : null}\n\n            {post_type === \"Solution\" && state.fundraising ? (\n              <div className=\"d-flex flex-column mb-2\">\n                <div className=\"col-lg-6  mb-2\">\n                  <span>Currency</span>\n\n                  <select\n                    data-testid=\"select-currency\"\n                    onChange={(event) =>\n                      State.update((lastKnownState) => ({\n                        ...lastKnownState,\n                        sponsorship_token: event.target.value,\n                      }))\n                    }\n                    className=\"form-select\"\n                    aria-label=\"Select currency\"\n                  >\n                    <option\n                      selected={\n                        tokenResolver(state.sponsorship_token) === \"USDT\"\n                      }\n                      value=\"USDT\"\n                    >\n                      USDT\n                    </option>\n\n                    <option\n                      selected={\n                        tokenResolver(state.sponsorship_token) === \"USDC\"\n                      }\n                      value=\"USDC\"\n                    >\n                      USDC\n                    </option>\n\n                    <option\n                      selected={\n                        tokenResolver(state.sponsorship_token) === \"NEAR\"\n                      }\n                      value=\"NEAR\"\n                    >\n                      NEAR\n                    </option>\n                  </select>\n                </div>\n\n                <div className=\"col-lg-6 mb-2\">\n                  <span>Requested amount</span>\n                  <span className=\"text-muted fw-normal\">(Numbers only)</span>\n\n                  <input\n                    data-testid=\"input-amount\"\n                    type=\"number\"\n                    value={parseInt(state.amount) > 0 ? state.amount : \"\"}\n                    min={0}\n                    onChange={(event) =>\n                      State.update((lastKnownState) => ({\n                        ...lastKnownState,\n\n                        amount: Number(\n                          event.target.value.toString().replace(/e/g, \"\")\n                        ).toString(),\n                      }))\n                    }\n                  />\n                </div>\n\n                <div className=\"col-lg-6 mb-2\">\n                  <p className=\"mb-1\">\n                    <span>Requested sponsor</span>\n                    <span className=\"text-muted fw-normal\">(Optional)</span>\n                  </p>\n\n                  <p\n                    style={{ fontSize: \"13px\" }}\n                    className=\"m-0 text-muted fw-light\"\n                  >\n                    If you are requesting funding from a specific sponsor,\n                    please enter their account ID.\n                  </p>\n\n                  <div className=\"input-group flex-nowrap\">\n                    <span className=\"input-group-text\" id=\"addon-wrapping\">\n                      @\n                    </span>\n\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      placeholder=\"Enter account ID\"\n                      value={state.supervisor}\n                      onChange={(event) =>\n                        State.update((lastKnownState) => ({\n                          ...lastKnownState,\n                          supervisor: event.target.value,\n                        }))\n                      }\n                    />\n                  </div>\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n\n        <button\n          className=\"btn btn-light mb-2 p-3\"\n          onClick={onCancelClick}\n          style={{ width: \"7rem\" }}\n        >\n          Cancel\n        </button>\n\n        <button\n          style={{\n            width: \"7rem\",\n            backgroundColor: \"#0C7283\",\n            color: \"#f3f3f3\",\n          }}\n          disabled={state.fundraising && (!state.amount || state.amount < 1)}\n          className=\"btn btn-light mb-2 p-3\"\n          onClick={onSubmit}\n        >\n          Submit\n        </button>\n\n        {kycDisclaimer}\n      </div>\n\n      <div className=\"card-footer\">\n        <span>Preview:</span>\n\n        {widget(\"entity.post.Card\", {\n          isPreview: true,\n          id: null,\n\n          post: {\n            author_id: state.author_id,\n            likes: [],\n\n            snapshot: {\n              amount: state.amount,\n              name: state.name,\n              description: state.description,\n              editor_id: state.editor_id,\n              github_link: state.github_link,\n              labels: state.tags,\n              post_type: post_type,\n              sponsorship_token: state.sponsorship_token,\n              supervisor: state.supervisor,\n            },\n          },\n        })}\n      </div>\n    </div>\n  );\n};\n\nreturn PostEditor(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devhub.efiz.near/widget/gigs-board.entity.post.PostEditor", "fact_widget_deployments_id": "20b76a155a803c99cacdfda2b57d9717", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 7}