{"tx_hash": "W6MULED6w3h3a4LdMF64JcGvFveKCbZMDQu6n3CgdeR", "action_id_social": "6qKYu9eNy1oAPQLxRmPDXdNm5JXxBRYTEF5jH9z6pudA-0-widget", "block_id": 104119311, "block_timestamp": "2023-10-24T17:56:51.324Z", "signer_id": "devhub.efiz.near", "widget_name": "gigs-board.entity.post.PostEditor", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n\n/* INCLUDE: \"core/lib/autocomplete\" */\nconst autocompleteEnabled = true;\nconst AutoComplete = styled.div`\n  z-index: 5;\n\n  > div > div {\n    padding: calc(var(--padding) / 2);\n  }\n`;\n\nfunction textareaInputHandler(value) {\n  const showAccountAutocomplete = /@[\\w][^\\s]*$/.test(value);\n  State.update({ text: value, showAccountAutocomplete });\n}\n\nfunction autoCompleteAccountId(id) {\n  let description = state.description.replace(/[\\s]{0,1}@[^\\s]*$/, \"\");\n  description = `${description} @${id}`.trim() + \" \";\n  State.update({ description, showAccountAutocomplete: false });\n}\n/* END_INCLUDE: \"core/lib/autocomplete\" */\n\nconst postType = props.postType ?? \"Sponsorship\";\nconst parentId = props.parentId ?? null;\nconst postId = props.postId ?? null;\nconst mode = props.mode ?? \"Create\";\n\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\nconst labelStrings = (props.labels ?? []).concat(referralLabels);\nconst labels = labelStrings.map((s) => {\n  return { name: s };\n});\n\ninitState({\n  seekingFunding: false,\n  author_id: context.accountId,\n  // Should be a list of objects with field \"name\".\n  labels,\n  // Should be a list of labels as strings.\n  // Both of the label structures should be modified together.\n  labelStrings,\n  postType,\n  name: props.name ?? \"\",\n  description: props.description ?? \"\",\n  amount: props.amount ?? \"0\",\n  token: tokenMapping[props.token] ?? \"USDT\",\n  supervisor: props.supervisor ?? \"\",\n  githubLink: props.githubLink ?? \"\",\n  warning: \"\",\n  draftStateApplied: false,\n});\n\nif (!state.draftStateApplied && props.draftState) {\n  State.update({ ...props.draftState, draftStateApplied: true });\n}\n\nlet fields = {\n  Comment: [\"description\"],\n  Idea: [\"name\", \"description\"],\n  Submission: [\"name\", \"description\", \"fund_raising\"],\n  Attestation: [\"name\", \"description\"],\n  Sponsorship: [\n    \"name\",\n    \"description\",\n    \"amount\",\n    \"sponsorship_token\",\n    \"supervisor\",\n  ],\n  Github: [\"githubLink\", \"name\", \"description\"],\n}[postType];\n\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\nlet grantNotify = Near.view(\"social.near\", \"is_write_permission_granted\", {\n  predecessor_id: nearDevGovGigsContractAccountId,\n  key: context.accountId + \"/index/notify\",\n});\nif (grantNotify === null) {\n  return;\n}\n\nconst tokenMapping = {\n  NEAR: \"NEAR\",\n  USDT: {\n    NEP141: {\n      address: \"usdt.tether-token.near\",\n    },\n  },\n};\n\nconst onSubmit = () => {\n  let labels = state.labelStrings;\n  var body = {\n    Comment: { description: state.description, comment_version: \"V2\" },\n    Idea: {\n      name: state.name,\n      description: state.description,\n      idea_version: \"V1\",\n    },\n    Submission: {\n      name: state.name,\n      description: generateDescription(\n        state.description,\n        state.amount,\n        state.token,\n        state.supervisor,\n        state.seekingFunding\n      ),\n      submission_version: \"V1\",\n    },\n    Attestation: {\n      name: state.name,\n      description: state.description,\n      attestation_version: \"V1\",\n    },\n    Sponsorship: {\n      name: state.name,\n      description: state.description,\n      amount: state.amount,\n      sponsorship_token: tokenMapping[state.token],\n      supervisor: state.supervisor,\n      sponsorship_version: \"V1\",\n    },\n    Github: {\n      name: state.name,\n      description: state.description,\n      github_version: \"V0\",\n      github_link: state.githubLink,\n    },\n  }[postType];\n  body[\"post_type\"] = postType;\n  if (!context.accountId) {\n    return;\n  }\n  let txn = [];\n  if (mode == \"Create\") {\n    props.onDraftStateChange(\n      Object.assign({}, state, { parent_post_id: parentId })\n    );\n    txn.push({\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: \"add_post\",\n      args: {\n        parent_id: parentId,\n        labels,\n        body,\n      },\n      deposit: Big(10).pow(21).mul(2),\n      gas: Big(10).pow(12).mul(100),\n    });\n  } else if (mode == \"Edit\") {\n    props.onDraftStateChange(\n      Object.assign({}, state, { edit_post_id: postId })\n    );\n    txn.push({\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: \"edit_post\",\n      args: {\n        id: postId,\n        labels,\n        body,\n      },\n      deposit: Big(10).pow(21).mul(2),\n      gas: Big(10).pow(12).mul(100),\n    });\n  }\n  if (mode == \"Create\" || mode == \"Edit\") {\n    if (grantNotify === false) {\n      txn.unshift({\n        contractName: \"social.near\",\n        methodName: \"grant_write_permission\",\n        args: {\n          predecessor_id: nearDevGovGigsContractAccountId,\n          keys: [context.accountId + \"/index/notify\"],\n        },\n        deposit: Big(10).pow(23),\n        gas: Big(10).pow(12).mul(30),\n      });\n    }\n    Near.call(txn);\n  }\n};\n\nconst normalizeLabel = (label) =>\n  label\n    .replaceAll(/[- \\.]/g, \"_\")\n    .replaceAll(/[^\\w]+/g, \"\")\n    .replaceAll(/_+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\")\n    .toLowerCase()\n    .trim(\"-\");\n\nconst checkLabel = (label) => {\n  Near.asyncView(nearDevGovGigsContractAccountId, \"is_allowed_to_use_labels\", {\n    editor: context.accountId,\n    labels: [label],\n  }).then((allowed) => {\n    if (allowed) {\n      State.update({ warning: \"\" });\n    } else {\n      State.update({\n        warning:\n          'The label \"' +\n          label +\n          '\" is protected and can only be added by moderators',\n      });\n      return;\n    }\n  });\n};\n\nconst setLabels = (labels) => {\n  labels = labels.map((o) => {\n    o.name = normalizeLabel(o.name);\n    return o;\n  });\n  if (labels.length < state.labels.length) {\n    let oldLabels = new Set(state.labels.map((label) => label.name));\n    for (let label of labels) {\n      oldLabels.delete(label.name);\n    }\n    let removed = oldLabels.values().next().value;\n    Near.asyncView(\n      nearDevGovGigsContractAccountId,\n      \"is_allowed_to_use_labels\",\n      { editor: context.accountId, labels: [removed] }\n    ).then((allowed) => {\n      if (allowed) {\n        let labelStrings = labels.map(({ name }) => name);\n        State.update({ labels, labelStrings });\n      } else {\n        State.update({\n          warning:\n            'The label \"' +\n            removed +\n            '\" is protected and can only be updated by moderators',\n        });\n        return;\n      }\n    });\n  } else {\n    let labelStrings = labels.map((o) => {\n      return o.name;\n    });\n    State.update({ labels, labelStrings });\n  }\n};\nconst existingLabelStrings =\n  Near.view(nearDevGovGigsContractAccountId, \"get_all_allowed_labels\", {\n    editor: context.accountId,\n  }) ?? [];\nconst existingLabelSet = new Set(existingLabelStrings);\nconst existingLabels = existingLabelStrings.map((s) => {\n  return { name: s };\n});\n\nconst labelEditor = (\n  <div className=\"col-lg-12  mb-2\">\n    Labels:\n    <Typeahead\n      multiple\n      labelKey=\"name\"\n      onInputChange={checkLabel}\n      onChange={setLabels}\n      options={existingLabels}\n      placeholder=\"near.social, widget, NEP, standard, protocol, tool\"\n      selected={state.labels}\n      positionFixed\n      allowNew={(results, props) => {\n        return (\n          !existingLabelSet.has(props.text) &&\n          props.selected.filter((selected) => selected.name === props.text)\n            .length == 0 &&\n          Near.view(\n            nearDevGovGigsContractAccountId,\n            \"is_allowed_to_use_labels\",\n            { editor: context.accountId, labels: [props.text] }\n          )\n        );\n      }}\n    />\n  </div>\n);\n\nconst githubLinkDiv = (\n  <div className=\"col-lg-12  mb-2\">\n    Github Issue URL:\n    <input\n      type=\"text\"\n      value={state.githubLink}\n      onChange={(event) => State.update({ githubLink: event.target.value })}\n    />\n  </div>\n);\n\nconst nameDiv = (\n  <div className=\"col-lg-6  mb-2\">\n    Title:\n    <input\n      type=\"text\"\n      value={state.name}\n      onChange={(event) => State.update({ name: event.target.value })}\n    />\n  </div>\n);\n\nconst amountDiv = (\n  <div className=\"col-lg-6  mb-2\">\n    Amount:\n    <input\n      type=\"text\"\n      value={state.amount}\n      onChange={(event) => State.update({ amount: event.target.value })}\n    />\n  </div>\n);\n\nconst tokenDiv = (\n  <div className=\"col-lg-6  mb-2\">\n    Currency\n    <select\n      onChange={(event) => State.update({ token: event.target.value })}\n      class=\"form-select\"\n      aria-label=\"Default select\"\n    >\n      <option selected value={\"USDT\"}>\n        USDT\n      </option>\n      <option value=\"NEAR\">NEAR</option>\n    </select>\n  </div>\n);\n\nconst supervisorDiv = (\n  <div className=\"col-lg-6 mb-2\">\n    Supervisor:\n    <input\n      type=\"text\"\n      value={state.supervisor}\n      onChange={(event) => State.update({ supervisor: event.target.value })}\n    />\n  </div>\n);\n\nconst callDescriptionDiv = () => {\n  return (\n    <div className=\"col-lg-12  mb-2\">\n      Description:\n      <br />\n      {widget(\"components.molecule.markdown-editor\", {\n        data: { handler: state.handler, content: state.description },\n        onChange: (content) => {\n          State.update({ description: content, handler: \"update\" });\n          textareaInputHandler(content);\n        },\n      })}\n      {autocompleteEnabled && state.showAccountAutocomplete && (\n        <AutoComplete>\n          <Widget\n            src=\"near/widget/AccountAutocomplete\"\n            props={{\n              term: state.text.split(\"@\").pop(),\n              onSelect: autoCompleteAccountId,\n              onClose: () => State.update({ showAccountAutocomplete: false }),\n            }}\n          />\n        </AutoComplete>\n      )}\n    </div>\n  );\n};\n\nconst disclaimer = (\n  <p>\n    <i>\n      * Note, all projects that were granted sponsorships are required to pass\n      KYC to receive the funding.\n    </i>\n  </p>\n);\n\nconst isFundraisingDiv = (\n  // This is jank with just btns and not radios. But the radios were glitchy af\n  <>\n    <div class=\"mb-2\">\n      <p class=\"fs-6 fw-bold mb-1\">\n        Are you seeking funding for your solution?\n        <span class=\"text-muted fw-normal\">(Optional)</span>\n      </p>\n      <div class=\"form-check form-check-inline\">\n        <label class=\"form-check-label\">\n          <button\n            className=\"btn btn-light p-0\"\n            style={{\n              backgroundColor: state.seekingFunding ? \"#0C7283\" : \"inherit\",\n              color: \"#f3f3f3\",\n              border: \"solid #D9D9D9\",\n              borderRadius: \"100%\",\n              height: \"20px\",\n              width: \"20px\",\n            }}\n            onClick={() => State.update({ seekingFunding: true })}\n          />\n          Yes\n        </label>\n      </div>\n      <div class=\"form-check form-check-inline\">\n        <label class=\"form-check-label\">\n          <button\n            className=\"btn btn-light p-0\"\n            style={{\n              backgroundColor: !state.seekingFunding ? \"#0C7283\" : \"inherit\",\n              color: \"#f3f3f3\",\n              border: \"solid #D9D9D9\",\n              borderRadius: \"100%\",\n              height: \"20px\",\n              width: \"20px\",\n            }}\n            onClick={() => State.update({ seekingFunding: false })}\n          />\n          No\n        </label>\n      </div>\n    </div>\n  </>\n);\n\nconst fundraisingDiv = (\n  <div class=\"d-flex flex-column mb-2\">\n    <div className=\"col-lg-6  mb-2\">\n      Currency\n      <select\n        onChange={(event) => State.update({ token: event.target.value })}\n        class=\"form-select\"\n        aria-label=\"Default select example\"\n      >\n        <option selected value=\"NEAR\">\n          NEAR\n        </option>\n        <option value={\"USDT\"}>USDT</option>\n      </select>\n    </div>\n    <div className=\"col-lg-6 mb-2\">\n      Requested amount\n      <span class=\"text-muted fw-normal\">(Numbers Only)</span>\n      <input\n        type=\"number\"\n        value={parseInt(state.amount) > 0 ? state.amount : \"\"}\n        min={0}\n        onChange={(event) => {\n          State.update({\n            amount: Number(\n              event.target.value.toString().replace(/e/g, \"\")\n            ).toString(),\n          });\n        }}\n      />\n    </div>\n    <div className=\"col-lg-6 mb-2\">\n      <p class=\"mb-1\">\n        Requested sponsor\n        <span class=\"text-muted fw-normal\">(Optional)</span>\n      </p>\n      <p style={{ fontSize: \"13px\" }} class=\"m-0 text-muted fw-light\">\n        If you are requesting funding from a specific sponsor, please enter\n        their username.\n      </p>\n      <div class=\"input-group flex-nowrap\">\n        <span class=\"input-group-text\" id=\"addon-wrapping\">\n          @\n        </span>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          placeholder=\"Enter username\"\n          value={state.supervisor}\n          onChange={(event) => State.update({ supervisor: event.target.value })}\n        />\n      </div>\n    </div>\n  </div>\n);\n\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\n  const fundingText =\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\n` : \"\";\n  const supervisorText = supervisor\n    ? `###### Requested sponsor: @${supervisor}\\n`\n    : \"\";\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\n}\n\nconst renamedPostType = postType == \"Submission\" ? \"Solution\" : postType;\n// Below there is a weird code with fields.includes(\"githubLink\") ternary operator.\n// This is to hack around rendering bug of near.social.\nreturn (\n  <div className=\"card\">\n    <div className=\"card-header\">\n      {mode} {renamedPostType}\n    </div>\n\n    <div class=\"card-body\">\n      {state.warning && (\n        <div\n          class=\"alert alert-warning alert-dismissible fade show\"\n          role=\"alert\"\n        >\n          {state.warning}\n          <button\n            type=\"button\"\n            class=\"btn-close\"\n            data-bs-dismiss=\"alert\"\n            aria-label=\"Close\"\n            onClick={() => State.update({ warning: \"\" })}\n          ></button>\n        </div>\n      )}\n      {/* This statement around the githubLinkDiv creates a weird render bug \n      where the title renders extra on state change. */}\n      {fields.includes(\"githubLink\") ? (\n        <div className=\"row\">\n          {fields.includes(\"githubLink\") && githubLinkDiv}\n          {labelEditor}\n          {fields.includes(\"name\") && nameDiv}\n          {fields.includes(\"description\") && callDescriptionDiv()}\n        </div>\n      ) : (\n        <div className=\"row\">\n          {labelEditor}\n          {fields.includes(\"name\") && nameDiv}\n          {fields.includes(\"amount\") && amountDiv}\n          {fields.includes(\"sponsorship_token\") && tokenDiv}\n          {fields.includes(\"supervisor\") && supervisorDiv}\n          {fields.includes(\"description\") && callDescriptionDiv()}\n          {fields.includes(\"fund_raising\") && isFundraisingDiv}\n          {state.seekingFunding &&\n            fields.includes(\"fund_raising\") &&\n            fundraisingDiv}\n        </div>\n      )}\n      <button\n        style={{\n          width: \"7rem\",\n          backgroundColor: \"#0C7283\",\n          color: \"#f3f3f3\",\n        }}\n        disabled={state.seekingFunding && (!state.amount || state.amount < 1)}\n        className=\"btn btn-light mb-2 p-3\"\n        onClick={onSubmit}\n      >\n        Submit\n      </button>\n      {disclaimer}\n    </div>\n    <div class=\"card-footer\">\n      Preview:\n      {widget(\"entity.post.Post\", {\n        isPreview: true,\n        id: 0, // irrelevant\n        post: {\n          author_id: state.author_id,\n          likes: [],\n          snapshot: {\n            editor_id: state.editor_id,\n            labels: state.labelStrings,\n            post_type: postType,\n            name: state.name,\n            description:\n              postType == \"Submission\"\n                ? generateDescription(\n                    state.description,\n                    state.amount,\n                    state.token,\n                    state.supervisor,\n                    state.seekingFunding\n                  )\n                : state.description,\n            amount: state.amount,\n            sponsorship_token: state.token,\n            supervisor: state.supervisor,\n            github_link: state.githubLink,\n          },\n        },\n      })}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devhub.efiz.near/widget/gigs-board.entity.post.PostEditor", "fact_widget_deployments_id": "2d316d52fc7910508c5bef3ac04b3870", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 46}