{"tx_hash": "DWxyx2i8wcPhADDfmZZSmPxfix2N2vCU4P86Sun1Tm2L", "action_id_social": "Ayyf9ypazdT7Cjp32Z9da7BMz6YrFsqEAcafykNwDiWY-0-widget", "block_id": 106027359, "block_timestamp": "2023-11-19T03:37:02.343Z", "signer_id": "0xvato.near", "widget_name": "starkard", "source_code": "// FETCH LIDO ABI\n\nconst sparkDai = \"0xD72630D78157E1a2feD7A329873Bfd496704403D\";\nconst gorliSparkPoolContract = \"0xe7EA57b22D5F496BF9Ca50a7830547b704Ecb91F\";\nconst tokenDecimals = 18;\n\nconst network = \"gorli\"; // \"gorli\" // \"rinkeby\" // \"mainnet\"\n\nconst sparkAbi = fetch(\n  \"https://raw.githubusercontent.com/0xstarkard/sparkAbis/main/pool.json\"\n);\n\nif (!sparkAbi.ok) {\n  return \"Loading\";\n}\n\nconst iface = new ethers.utils.Interface(sparkAbi.body);\n\n// FETCH LIDO STAKING APR\n\nif (state.lidoArp === undefined) {\n  const apr = fetch(\n    \"https://api.allorigins.win/get?url=https://stake.lido.fi/api/sma-steth-apr\"\n  );\n  if (!apr) return;\n  State.update({ lidoArp: JSON.parse(apr?.body?.contents) ?? \"...\" });\n}\n\n// HELPER FUNCTIONS\n\nconst getStakedBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"getUserAccountData\", [\n    receiver,\n  ]);\n\n  return Ethers.provider()\n    .call({\n      to: gorliSparkPoolContract,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      console.log(rawBalance);\n      const {\n        totalCollateralBase,\n        totalDebtBase,\n        availableBorrowsBase,\n        ltv,\n        healthFactor,\n      } = iface.decodeFunctionResult(\"getUserAccountData\", rawBalance);\n      console.log(\n        \"--->> \",\n        totalCollateralBase,\n        totalDebtBase,\n        availableBorrowsBase,\n        ltv,\n        healthFactor\n      );\n      // state update\n      State.update({ healthFactor, ltv, totalCollateralBase });\n    });\n};\n\nconst supply = (asset, strEther, onBehalfOf) => {\n  console.log(\"Entro....\");\n  if (!strEther) {\n    return console.log(\"Amount is missing\");\n  }\n  const pool = new ethers.Contract(\n    gorliSparkPoolContract,\n    sparkAbi.body,\n    Ethers.provider().getSigner()\n  );\n  console.log(\"Pool \", pool);\n  // address asset, uint256 amount, address onBehalfOf, uint16 referralCode\n  let amount = ethers.utils.parseUnits(strEther, tokenDecimals).toHexString();\n\n  pool\n    .supply(gorliSparkPoolContract, {\n      asset,\n      amount,\n      onBehalfOf,\n      referralCode: 0,\n    })\n    .then((transactionHash) => {\n      console.log(\"transactionHash is \" + transactionHash);\n    });\n};\n\n// DETECT SENDER\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    console.log(\"set sender\", accounts[0]);\n  }\n}\n\n// FETCH SENDER BALANCE\n\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\n// FETCH TX COST // only applies to lido\n\nif (state.txCost === undefined) {\n  const gasEstimate = ethers.BigNumber.from(1875000);\n  const gasPrice = ethers.BigNumber.from(1500000000);\n\n  const gasCostInWei = gasEstimate.mul(gasPrice);\n  const gasCostInEth = ethers.utils.formatEther(gasCostInWei);\n\n  // change to uniswap\n  let responsePrice = fetch(\n    \"https://api.etherscan.io/api?module=stats&action=ethprice&apikey=5KHW5BWX4G4DW9TGW1AHUNBW5N8QG8AT45\"\n  );\n\n  console.log(responsePrice);\n  if (!responsePrice) return \"\";\n\n  const ethPriceInUsd = responsePrice.body.result.ethusd;\n\n  const txCost = Number(gasCostInEth) * Number(ethPriceInUsd);\n\n  State.update({ txCost: txCost.toFixed(2) });\n}\n\n// FETCH CSS\n\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\n).body;\n\nif (!cssFont || !css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n                font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n                ${cssFont}\n                ${css}\n            `,\n  });\n}\nconst Theme = state.theme;\n\n// OUTPUT UI\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nreturn (\n  <Theme>\n    <div class=\"LidoContainer\">\n      <div class=\"Header\">\ud83d\udd25 SparkLend </div>\n      <div class=\"SubHeader\">\n        Get collateralized loans or uncollateralized p2p loans.\n      </div>\n\n      <div class=\"LidoForm\">\n        {state.sender && (\n          <>\n            <div class=\"LidoFormTopContainer\">\n              <div class=\"LidoFormTopContainerLeft\">\n                <div class=\"LidoFormTopContainerLeftContent1\">\n                  <div class=\"LidoFormTopContainerLeftContent1Container\">\n                    <span>Collateral available to stake</span>\n                    <div class=\"LidoFormTopContainerLeftContent1Circle\" />\n                  </div>\n                </div>\n                <div class=\"LidoFormTopContainerLeftContent2\">\n                  <span>\n                    {state.balance ?? (!state.sender ? \"0\" : \"...\")}&nbsp;ETH\n                  </span>\n                </div>\n              </div>\n              <div class=\"LidoFormTopContainerRight\">\n                <div class=\"LidoFormTopContainerRightContent1\">\n                  <div class=\"LidoFormTopContainerRightContent1Text\">\n                    <span>{getSender()}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"LidoSplitter\" />\n          </>\n        )}\n        <div\n          class={\n            state.sender ? \"LidoFormBottomContainer\" : \"LidoFormTopContainer\"\n          }\n        >\n          <div class=\"LidoFormTopContainerLeft\">\n            <div class=\"LidoFormTopContainerLeftContent1\">\n              <div class=\"LidoFormTopContainerLeftContent1Container\">\n                <span>Staked amount</span>\n              </div>\n            </div>\n            <div class=\"LidoFormTopContainerLeftContent2\">\n              <span>\n                {state.stakedBalance ?? (!state.sender ? \"0\" : \"...\")}\n                &nbsp;ETH\n              </span>\n            </div>\n          </div>\n          <div class=\"LidoFormTopContainerRight\">\n            <div class=\"LidoAprContainer\">\n              <div class=\"LidoAprTitle\">DAI APY</div>\n              <div class=\"LidoAprValue\">{state.lidoArp ?? \"...\"}%</div>\n            </div>\n          </div>\n          {state.healthFactor && (\n            <div class=\"LidoFormTopContainerRight\">\n              <div class=\"LidoAprContainer\">\n                <div class=\"LidoAprTitle\">Healt Factor</div>\n                <div class=\"LidoAprValue\">{state.healthFactor}</div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      <div class=\"LidoStakeForm\">\n        <div class=\"LidoStakeFormInputContainer\">\n          <span class=\"LidoStakeFormInputContainerSpan1\"></span>\n          <span class=\"LidoStakeFormInputContainerSpan2\">\n            <input\n              disabled={!state.sender}\n              class=\"LidoStakeFormInputContainerSpan2Input\"\n              value={state.strEther}\n              onChange={(e) => State.update({ strEther: e.target.value })}\n              placeholder=\"Amount\"\n            />\n          </span>\n          <span\n            class=\"LidoStakeFormInputContainerSpan3\"\n            onClick={() => {\n              State.update({\n                strEther: (parseFloat(state.balance) - 0.05).toFixed(2),\n              });\n            }}\n          >\n            <button\n              class=\"LidoStakeFormInputContainerSpan3Content\"\n              disabled={!state.sender}\n            >\n              <span class=\"LidoStakeFormInputContainerSpan3Max\">MAX</span>\n            </button>\n          </span>\n        </div>\n        {!!state.sender ? (\n          <button\n            class=\"LidoStakeFormSubmitContainer\"\n            onClick={() =>\n              supply(\n                \"0x7bcBc27f6AD9c1D1d51eeF8Bd314E4b14f49DB3F\",\n                state.strEther,\n                state.sender\n              )\n            }\n          >\n            <span>Supply</span>\n          </button>\n        ) : (\n          <Web3Connect\n            className=\"LidoStakeFormSubmitContainer\"\n            connectLabel=\"Connect with Web3\"\n          />\n        )}\n\n        <div class=\"LidoFooterContainer\"></div>\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/0xvato.near/widget/starkard", "fact_widget_deployments_id": "a1ae0528a3b103ab06af1c553fb745ac", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}