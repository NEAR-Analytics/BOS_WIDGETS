{"tx_hash": "GH8czkZxPWm24gVkzruaEc7KiWdkCgzzEBTThrcYjCQW", "action_id_social": "5ytobLG13ZLNaCzn41zy7C3X8pmCE3WF88cUSGsYVXNc-0-widget", "block_id": 112146120, "block_timestamp": "2024-02-05T07:59:10.528Z", "signer_id": "baam25.near", "widget_name": "owned.nfts", "source_code": "const accountId = props.accountId || context.accountId;\nconsole.log(accountId);\n\nconst [page, setPage] = useState(0);\n\nconst data = fetch(\"https://graph.mintbase.xyz\", {\n  method: \"POST\",\n  headers: {\n    \"mb-api-key\": \"omni-site\",\n    \"Content-Type\": \"application/json\",\n    \"x-hasura-role\": \"anonymous\",\n  },\n  body: JSON.stringify({\n    query: `\n  query v2_omnisite_GetOwnedTokens{\n    tokens: mb_views_nft_owned_tokens(\n      where: {\n        owner: { _eq: \"${accountId}\" }\n      }\n    ) {\n      tokenId: token_id\n      contractId: nft_contract_id\n      media\n    }}\n`,\n  }),\n});\n\nconst nfts = data.body?.data?.tokens;\n\nconst Wrapper = styled.div`\n  max-width: 1000px;\n  display: flex;\n  flex-direction: column;\n  margin: 3rem auto;\n  align-items: center;\n`;\nconst Contaienr = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 2rem;\n  justify-content: center;\n  > div {\n    width: 15rem;\n    height: 15rem;\n    border-radius: 10px;\n    overflow: hidden;\n    img {\n      transition: all 300ms ease-in-out;\n    }\n    :hover img {\n      scale: 1.1;\n    }\n  }\n`;\nconst Pagination = styled.div`\n  display: flex;\n  gap: 1rem;\n  justify-content: center;\n  margin-top: 2rem;\n  div {\n    border: 1px solid transparent;\n    background: #8c8c8c;\n    border-radius: 2px;\n    padding: 10px;\n    font-size: 12px;\n    color: white;\n    cursor: pointer;\n    :hover {\n      background: #8c8c8c;\n    }\n    &.active {\n      background: white;\n      color: #8c8c8c;\n      border-color: #8c8c8c;\n    }\n  }\n`;\n\nconst size = \"100%\";\n\n// Paginaton\nconst perPage = 9;\n// list of pages\nconst paginations = [...Array(parseInt(nfts?.length / perPage) + 1).keys()];\n\nlet lastElement = paginations[paginations.length - 1];\nconst handlePainate = (to) => {\n  if (to !== \"...\") {\n    setPage(parseInt(to));\n  }\n};\nconst Page = ({ children }) => {\n  return (\n    <div\n      onClick={() => handlePainate(children[0])}\n      className={`${children[0] + \"\" == page + \"\" ? \"active\" : \"\"}`}\n    >\n      {children[0]}\n    </div>\n  );\n};\nconst PagNumber = () => {\n  if (paginations.length < 4) {\n    return (\n      <Pagination>\n        {paginations?.map((num) => (\n          <Page>{num}</Page>\n        ))}\n      </Pagination>\n    );\n  } else if (page === 0) {\n    return (\n      <Pagination>\n        <Page>0</Page>\n        <Page>{page + 1}</Page>\n        <Page>...</Page>\n        <Page>{lastElement}</Page>\n      </Pagination>\n    );\n  } else if (page === lastElement) {\n    return (\n      <Pagination>\n        <Page>0</Page>\n        <Page>...</Page>\n        <Page>{page - 1}</Page>\n        <Page>{page}</Page>\n      </Pagination>\n    );\n  } else if (page + 1 === lastElement) {\n    return (\n      <Pagination>\n        <Page>0</Page>\n        <Page>...</Page>\n        <Page>{page - 1}</Page>\n        <Page>{page}</Page>\n        <Page>{lastElement}</Page>\n      </Pagination>\n    );\n  } else if (page + 1 < lastElement && page > 3) {\n    return (\n      <Pagination>\n        <Page>0</Page>\n        <Page>...</Page>\n        <Page>{page - 1}</Page>\n        <Page>{page}</Page>\n        <Page>{page + 1}</Page>\n        <Page>...</Page>\n        <Page>{lastElement}</Page>\n      </Pagination>\n    );\n  } else if (page < lastElement) {\n    return (\n      <Pagination>\n        <Page>0</Page>\n        <Page>{page}</Page>\n        <Page>{page + 1}</Page>\n        <Page>...</Page>\n        <Page>{lastElement}</Page>\n      </Pagination>\n    );\n  }\n};\n\nreturn (\n  <Wrapper>\n    <Contaienr>\n      {nfts?.slice(page * perPage, (page + 1) * perPage)?.map((nft) => (\n        <div key={nft.tokenId}>\n          <Widget\n            src=\"mob.near/widget/NftImage\"\n            props={{\n              nft: { tokenId: nft.tokenId, contractId: nft.contractId },\n              style: {\n                width: size,\n                height: size,\n                objectFit: \"cover\",\n                minWidth: size,\n                minHeight: size,\n                maxWidth: size,\n                maxHeight: size,\n                overflowWrap: \"break-word\",\n                borderRadius: \"inherit\",\n              },\n              className: \"\",\n              fallbackUrl:\n                \"https://ipfs.near.social/ipfs/bafkreihdiy3ec4epkkx7wc4wevssruen6b7f3oep5ylicnpnyyqzayvcry\",\n              alt: `NFT ${nft.contractId} ${nft.tokenId}`,\n            }}\n          />\n        </div>\n      ))}\n    </Contaienr>\n    <PagNumber />\n  </Wrapper>\n);\n", "metadata": {"fork_of": "baam25.near/widget/owned.nfts@112145475"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/baam25.near/widget/owned.nfts", "fact_widget_deployments_id": "b017abb4eda1771561d1512100b06be6", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}