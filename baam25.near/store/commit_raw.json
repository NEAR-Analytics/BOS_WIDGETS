{"tx_hash": "FB5KGWvgvAJvru7ybXGwSrg4ESoihs543AXmtZz3mtws", "action_id_social": "c74415B99RMP6jnJwYVixPtY2wd1ThFG2JJv1Y1pcHd-0-widget", "block_id": 112198032, "block_timestamp": "2024-02-06T01:17:42.216Z", "signer_id": "baam25.near", "widget_name": "store", "source_code": "const accountId = props.accountId || context.accountId;\nconst store = props.store;\nconst customStyle = props.customStyle || \"\";\n// Paginaton\nconst perPage = props.perPage || 48;\nconst AFFILIATE_ACCOUNT = props.affiliateAccount || \"baam25.near\";\n\nif (!store) return \"pass storeId\";\n\nconst [page, setPage] = useState(0);\nconst [filter, setFilter] = useState(\"Filter\");\n\nconst YoctoToNear = (amountYocto) => {\n  return new Big(amountYocto || 0).div(new Big(10).pow(24)).toString();\n};\nconst _price = (nft) => {\n  if (nft) {\n    return nft.listings[0]?.price;\n  }\n};\nconst data = fetch(\"https://graph.mintbase.xyz\", {\n  method: \"POST\",\n  headers: {\n    \"mb-api-key\": \"anon\",\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify({\n    query: `query MyQuery {\n      mb_views_nft_tokens(\n        where: {nft_contract_id: {_eq: \"${store}\"}}\n        order_by: {title: asc}\n      ) {\n        token_id\n        title\n        owner\n        media\n        metadata_id\n        listings(where: {unlisted_at: {_is_null: true}, accepted_at: {_is_null: true}}) {\n          price\n        }\n      }\n      mb_views_nft_owned_tokens_aggregate(\n        distinct_on: owner\n        where: {nft_contract_id: {_eq: \"${store}\"}}\n      ) {\n        aggregate {\n          count(distinct: true)\n        }\n      }\n      nft_earnings(where: {nft_contract_id: {_eq: \"${store}\"}}) {\n        amount\n      }\n      nft_activities(where: {nft_contract_id: {_eq: \"${store}\"}}) {\n        kind\n        price\n        action_receiver\n        action_sender\n        timestamp\n        token_id\n        receipt_id\n      }\n    }\n  `,\n  }),\n});\nlet nfts = data?.body?.data?.mb_views_nft_tokens;\n\nconst nft_earnings = data?.body?.data?.nft_earnings;\nconst nft_activities = data?.body?.data?.nft_activities;\nconst owners =\n  data?.body?.data?.mb_views_nft_owned_tokens_aggregate?.aggregate.count;\n\nlet floorPrice = 0;\nif (nfts.length) {\n  const lowestPrice = nfts.reduce((minObj, obj) => {\n    const currentPrice = _price(obj);\n    const minObjPrice = _price(minObj);\n    // Exclude null and undefined values\n    if (currentPrice != null && currentPrice !== undefined) {\n      // If minObj is null or currentPrice is lower than minObj.price, update minObj\n      if (minObj === null || currentPrice < minObjPrice) {\n        return obj;\n      }\n    }\n    // Otherwise, keep minObj unchanged\n    return minObj;\n  }, null);\n  floorPrice = YoctoToNear(_price(lowestPrice).toString()) + \" NEAR\";\n}\n\n// Filter\nswitch (filter) {\n  case \"name\":\n    nfts.sort((a, b) =>\n      a.name.localeCompare(b.name, undefined, { sensitivity: \"base\" })\n    );\n    break;\n  case \"Price: Low To High\":\n    nfts.sort((a, b) => {\n      const aPrice = a.listings[0].price;\n      const bPrice = b.listings[0].price;\n      if (aPrice === undefined && bPrice === undefined) {\n        return 0; // no change in order for null values\n      }\n      if (aPrice === undefined) {\n        return 1; // move object with null price to the end\n      }\n      if (bPrice === undefined) {\n        return -1; // move object with null price to the end\n      }\n      return aPrice - bPrice; // compare numeric values for non-null prices\n    });\n    break;\n  case \"Price: High To Low\":\n    nfts.sort((a, b) => {\n      const aPrice = a.listings[0].price || 0;\n      const bPrice = b.listings[0].price || 0;\n      return bPrice - aPrice;\n    });\n    break;\n  case \"Owned by me\":\n    nfts = nfts.filter((nft) => nft.owner === accountId);\n    break;\n  default:\n    break;\n}\n// GET Volume\nlet volume = new Big(0);\nif (nft_earnings?.length) {\n  nft_earnings.forEach((nft) => {\n    volume = volume.plus(new Big(nft.amount));\n  });\n}\nlet buy = (price, token_id) => {\n  const gas = 200000000000000;\n  const deposit = new Big(price).toFixed(0);\n  Near.call(\n    marketId,\n    \"buy\",\n    {\n      nft_contract_id: store,\n      token_id: token_id,\n    },\n    gas,\n    deposit\n  );\n};\n\nif (!data.ok) {\n  return \"Loading\";\n}\n\nconst size = \"20em\";\n\nconst Container = styled.div`\n  --primary-color: #aeaeae;\n  --primary-light: #aeaeae75;\n  display: flex;\n  flex-direction: column;\n  .store {\n    padding-left: 1rem;\n  }\n  .card-wrapper {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 1.5rem;\n    justify-content: space-between;\n  }\n  ${customStyle}\n`;\nconst NFTcard = styled.a`\n  display: flex;\n  width: 250px;\n  flex-direction: column;\n  border: 2px solid var(--primary-color);\n  border-radius: 10px;\n  box-shadow: 0px 0px 5px var(--primary-light);\n  transition: all 300ms ease-in-out;\n  cursor: pointer;\n  overflow: hidden;\n  text-decoration: none;\n  height: 100%;\n  :hover {\n    box-shadow: 0px 0px 30px var(--primary-light);\n    text-decoration: none;\n  }\n  img {\n    height: 250px;\n    object-fit: cover;\n    position: relative;\n    :before {\n      content: \" \";\n      display: block;\n      position: absolute;\n      height: 250px;\n      width: 250px;\n      background-image: url(\"https://i.stack.imgur.com/ATB3o.gif\");\n    }\n  }\n  .desc {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 1rem;\n  }\n  .tilte {\n    color: black;\n  }\n  .owner {\n    color: var(--primary-color);\n    font-size: 12px;\n    font-weight: 500;\n  }\n  .listed {\n    font-size: 10px;\n    color: #6c757d;\n    margin-left: auto;\n  }\n  .price {\n    font-size: 12px;\n    color: var(--primary-color);\n    margin-left: auto;\n    font-weight: bold;\n  }\n`;\n\nconst Stats = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem;\n  .filter {\n    margin-left: auto;\n    position: relative;\n  }\n`;\nconst Total = styled.div`\n  font-size: 16px;\n  flex-direction: column;\n  text-align: center;\n  padding: 10px;\n  border: 1px solid var(--primary-color);\n  border-radius: 6px;\n  div:last-child {\n    color: var(--primary-color);\n    font-weight: 600;\n  }\n`;\nconst Button = styled.button`\n  border-radius: 6px;\n  background: transparent;\n  width: 100%;\n  padding: 6px;\n  color: var(--primary-color);\n  border-color: var(--primary-color);\n  transition: all 300ms ease-in-out;\n  :hover {\n    background: var(--primary-color);\n    color: white;\n  }\n`;\nconst Trigger = styled.div`\n  border: 2px solid var(--primary-color);\n  border-radius: 1rem;\n  padding: 10px 1rem;\n  img {\n    width: 12px;\n  }\n`;\nconst stats = {\n  Items: nfts.length,\n  \"Total Owners\": owners,\n  \"Floor Price\": floorPrice,\n  Volume: YoctoToNear(volume.toString()) + \" NEAR\",\n};\nconst filterItems = [\n  {\n    name: \"Name\",\n    onSelect: () => setFilter(\"Name\"),\n  },\n  {\n    name: \"Price: Low To High\",\n    onSelect: () => setFilter(\"Price: Low To High\"),\n  },\n  {\n    name: \"Price: High To Low\",\n    onSelect: () => setFilter(\"Price: High To Low\"),\n  },\n  {\n    name: \"Owned by me\",\n    onSelect: () => setFilter(\"Owned by me\"),\n  },\n];\nreturn nfts ? (\n  <Container>\n    <h1 className=\"store\">{store}</h1>\n    <Stats>\n      {Object.keys(stats).map((label) => (\n        <Total key={label}>\n          <div> {label}</div> <div>{stats[label]}</div>\n        </Total>\n      ))}\n      <div className=\"filter\">\n        <Widget\n          src=\"near/widget/DIG.DropdownMenu\"\n          props={{\n            items: filterItems,\n            trigger: (\n              <Trigger>\n                {filter}\n                <img\n                  src=\"https://ipfs.near.social/ipfs/bafkreib55nddf64vsdxlhms5xpe6uirgizr2jbxbjecafcp3ehwqmaswd4\"\n                  alt=\"arrow\"\n                />\n              </Trigger>\n            ),\n          }}\n        />\n      </div>\n    </Stats>\n    <div className=\"card-wrapper\">\n      {nfts.length === 0 && (\n        <p\n          style={{\n            margin: \"auto\",\n            paddingTop: \"1rem\",\n            fontSize: \"20px\",\n            fontWeight: \"bold\",\n          }}\n        >\n          No Owned NFTs\n        </p>\n      )}\n      {nfts.slice(page * perPage, (page + 1) * perPage).map((nft) => {\n        let priceYocto = _price(nft);\n        if (priceYocto) {\n          priceYocto = priceYocto\n            .toLocaleString()\n            .replace(/,/g, \"\")\n            .replace(/\\s/g, \"\");\n        }\n        const priceNear = YoctoToNear(priceYocto);\n        return (\n          <div className=\"d-flex flex-column between wrap gap-1 w-15 p-3\">\n            <NFTcard\n              href={`https://mintbase.xyz/meta/${nft.metadata_id.replace(\n                \":\",\n                \"%3A\"\n              )}`}\n              target=\"_blank\"\n            >\n              <img\n                src={\n                  \"https://image-cache-service-z3w7d7dnea-ew.a.run.app/media?url=\" +\n                  nft.media\n                }\n                alt={nft.title}\n              />\n              <div className=\"desc\">\n                <div className=\"tilte\">{nft.title}</div>\n                <div className=\"owner\">\n                  {nft.owner.length > 20\n                    ? nft.owner.slice(0, 7) + \"....\"\n                    : nft.owner}\n                </div>\n                {!priceYocto && <div className=\"listed\">not listed</div>}\n                {priceYocto && (\n                  <Button\n                    disabled={!accountId}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      if (!accountId) return;\n                      buy(priceYocto, nft.token_id);\n                    }}\n                  >\n                    Buy {priceNear} N\n                  </Button>\n                )}\n              </div>\n            </NFTcard>\n          </div>\n        );\n      })}\n    </div>\n    <Widget\n      src=\"baam25.near/widget/pagination\"\n      props={{\n        onClick: (page) => setPage(page),\n        data: nfts,\n        page: page,\n        perPage: perPage,\n      }}\n    />\n  </Container>\n) : (\n  <p>loading...</p>\n);\n", "metadata": {"fork_of": "baam25.near/widget/store@112142630"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/baam25.near/widget/store", "fact_widget_deployments_id": "b975212d6b3a7db9cacff5cf9db7f0d4", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}