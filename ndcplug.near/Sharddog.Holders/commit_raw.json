{"tx_hash": "H6QddnStaKjws5qS86Q1JZfDuaCtLE1CYweyzbYNYsdV", "action_id_social": "2DriMXxSik4AMwVByDMVVBrkfDkxAGsfnqaW6chU89Ag-0-widget", "block_id": 97242452, "block_timestamp": "2023-07-24T18:49:42.309Z", "signer_id": "ndcplug.near", "widget_name": "Sharddog.Holders", "source_code": "const limit = 20;\nconst series = props.series ?? \"124\"; // add series filter\nconst title = props.title ?? \"Total Holders\";\nconst showHeader = props.showHeader ?? true;\nconst showImage = props.showImage ?? true;\n// add what nft they have and then add filter of unique people, add link to collection\nState.init({\n  offset: 0,\n  tokens: [],\n  hasMore: true,\n});\n\nfunction fetchTokens() {\n  asyncFetch(\"https://graph.mintbase.xyz/mainnet\", {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"omni-site\",\n      \"Content-Type\": \"application/json\",\n      \"x-hasura-role\": \"anonymous\",\n    },\n    body: JSON.stringify({\n      query: `\n          query MyQuery {\n            mb_views_nft_tokens(\n                limit: ${limit},\n                offset: ${state.offset}\n              where: { nft_contract_id: { _eq: \"mint.sharddog.near\" } token_id: {_regex: \"^${series}:\"}}\n              order_by: {minted_timestamp: desc}\n            ) {\n              media\n              owner\n            }\n          }\n        `,\n    }),\n  }).then((res) => {\n    if (res.ok) {\n      const tokens = res.body.data.mb_views_nft_tokens;\n      if (tokens.length > 0) {\n        State.update({\n          tokens: [...state.tokens, ...tokens],\n          offset: state.offset + limit,\n          hasMore: true,\n        });\n      } else {\n        State.update({\n          hasMore: false,\n        });\n      }\n    }\n  });\n}\n\nfunction Sharddog({ owner, media }) {\n  const size = \"100px\";\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-sm-3\">\n        {showImage && (\n          <Widget\n            src=\"mob.near/widget/Image\"\n            props={{\n              image: {\n                url: media,\n              },\n              style: {\n                width: size,\n                height: size,\n                objectFit: \"cover\",\n                minWidth: size,\n                minHeight: size,\n                maxWidth: size,\n                maxHeight: size,\n                overflowWrap: \"break-word\",\n              },\n            }}\n          />\n        )}\n      </div>\n      <div className=\"col-sm-9\">\n        <Widget\n          src=\"near/widget/AccountProfileCard\"\n          props={{\n            accountId: owner,\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst size = \"144px\";\n\nconst Grid = styled.div`\n  display: row;\n`;\n\nconst loader = (\n  <div className=\"loader\" key={\"loader\"}>\n    <span\n      className=\"spinner-grow spinner-grow-sm me-1\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />\n    Loading ...\n  </div>\n);\n\nreturn (\n  <>\n    {showHeader && <h1>Total Holders: {state.tokens.length}</h1>}\n\n    <InfiniteScroll\n      pageStart={0}\n      loadMore={fetchTokens}\n      hasMore={state.hasMore}\n      loader={loader}\n    >\n      <Grid>\n        {state.tokens?.map((it) => {\n          return <Sharddog owner={it.owner} media={it.media} />;\n        })}\n      </Grid>\n    </InfiniteScroll>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ndcplug.near/widget/Sharddog.Holders", "fact_widget_deployments_id": "03137549f4300ccbbada25e24dcadef6", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 1}