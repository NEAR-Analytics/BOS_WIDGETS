{"tx_hash": "8Y5JYnq9ngJc42CPp23nPjGLPMEUduDpXxWZ2RnTK2xL", "action_id_social": "64sgena61rpFzYRkLXEaf3GmFvRauG7K7hrY4a7vyHwP-0-widget", "block_id": 103457448, "block_timestamp": "2023-10-15T20:14:00.892Z", "signer_id": "c0cf2883421bfa90fbedbdaa2ce8aa7b98b21aecb6693f6054e5696890a80a24", "widget_name": "encodexnear23-uniswap", "source_code": null, "metadata": null, "branch": {"draft": {"": "const uniswapV2RouterContract = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\nconst tokenAContractAddress = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"; //WETH\nconst tokenBContractAddress = `0xdac17f958d2ee523a2206206994597c13d831ec7`; //USDT\nconst lptokenaddresss = \"0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852\"; //usdt weth FINAL\n\nconst apiurl =\n  \"https://api.etherscan.io/api?module=contract&action=getabi&address\";\nconst apikey = \"HXXJWINJIBIRGIIUY9Q9FZ2G377BWEEJAK\";\n\nconst API_URL =\n  \"https://us-central1-ethglobal-wat23-ai-hack.cloudfunctions.net/helloWorld\";\n\nconst AIR_API_KEY = \"6e4d51488a7546c5b9ee7a048ec3fc57\";\nconst AIR_API = \"https://api.airstack.xyz/gql\";\n\nconst tokenAABI = fetch(`${apiurl}=${tokenAContractAddress}&apikey=${apikey}`);\nconst tokenBABI = fetch(`${apiurl}=${tokenBContractAddress}&apikey=${apikey}`);\nconst lpABI = fetch(`${apiurl}=${lptokenaddresss}&apikey=${apikey}`);\nconst uniswapABI = fetch(\n  \"https://unpkg.com/@uniswap/v2-periphery@1.1.0-beta.0/build/IUniswapV2Router02.json\"\n);\n\nlet tokenAabi = tokenAABI.body.result;\nlet tokenBabi = tokenBABI.body.result;\nlet lpabi = lpABI.body.result;\n\nconst tokenDecimalsETH = 18;\nconst tokenDecimalsUSDT = 6;\nconst fixedDecimals = 5;\n\nconst options = [\n  {\n    name: \"WETH\",\n    price: 1561.79,\n    maxAmount: 0.001,\n    minSlippage: 0.01,\n    balance: 0,\n    poolBalance: 0,\n  },\n  {\n    name: \"USDT\",\n    price: 0.99986,\n    maxAmount: 1.55258,\n    minSlippage: 0.01,\n    balance: 0,\n    poolBalance: 0,\n  },\n];\n\nconst gas = {\n  gasPrice: ethers.utils.parseUnits(\"9\", tokenDecimalsETH / 2),\n  gasLimit: 250000,\n};\n\nState.init({\n  options: options,\n  coinA: options[0],\n  coinB: options[1],\n  feeTier: 0.01,\n  showButtons: false,\n  showAddLiquidity: false,\n  showRemoveLiquidity: false,\n  web3connectLabel: \"Connect Wallet\",\n  addLiquidityLabel: \"Add Liquidity\",\n  removeLiquidityLabel: \"Remove Liquidity\",\n  liquidityResult: null,\n  liquidityError: null,\n  gasPrice: null,\n  estimatedGasLimit: null,\n  offsetSeconds: 1800,\n  walletData: [],\n});\n\nlet provider, uniContract, tokenAcontract, tokenBcontract, lpTokenContract;\n\nlet amountADesired = ethers.utils\n  .parseUnits(\n    parseFloat(state.coinA.maxAmount).toFixed(fixedDecimals),\n    tokenDecimalsETH\n  )\n  .toHexString();\n\nlet amountBDesired = ethers.utils\n  .parseUnits(\n    parseFloat(state.coinB.maxAmount).toFixed(fixedDecimals + 3),\n    tokenDecimalsUSDT\n  )\n  .toHexString();\n\nlet amountAMin = ethers.utils\n  .parseUnits(\n    parseFloat(state.coinA.maxAmount * (1 - state.coinA.minSlippage)).toFixed(\n      fixedDecimals\n    ),\n    tokenDecimalsETH\n  )\n  .toHexString();\n\nlet amountBMin = ethers.utils\n  .parseUnits(\n    parseFloat(state.coinB.maxAmount * (1 - state.coinB.minSlippage)).toFixed(\n      fixedDecimals\n    ),\n    tokenDecimalsUSDT\n  )\n  .toHexString();\n\nconst addLiquidityUni = () => {\n  provider = Ethers.provider();\n  uniContract = new ethers.Contract(\n    uniswapV2RouterContract,\n    uniswapABI.body.abi,\n    provider.getSigner()\n  );\n  tokenAcontract = new ethers.Contract(\n    tokenAContractAddress,\n    tokenAabi,\n    provider.getSigner()\n  );\n  tokenBcontract = new ethers.Contract(\n    tokenBContractAddress,\n    tokenBabi,\n    provider.getSigner()\n  );\n  let deadline = ethers.BigNumber.from(\n    Math.floor(Date.now() / 1000) + 3600\n  ).toHexString();\n\n  tokenAcontract\n    .approve(uniswapV2RouterContract, amountADesired)\n    .then((response) => {\n      console.log(\"response token A GOOD --------\", response.hash);\n    })\n    .catch((error) => {\n      console.log(\"Error A:\", error);\n    });\n\n  tokenBcontract\n    .approve(uniswapV2RouterContract, amountBDesired, gas)\n    .then((response) => {\n      console.log(\"response token B GOOD --------\", response.hash);\n      uniContract\n        .addLiquidity(\n          tokenAContractAddress,\n          tokenBContractAddress,\n          amountADesired,\n          amountBDesired,\n          amountAMin,\n          amountBMin,\n          state.sender,\n          deadline,\n          gas\n        )\n        .then((response) => {\n          console.log(\"response UNI is \", response.hash);\n        })\n        .catch((error) => {\n          console.log(\"Error:\", error);\n        });\n    })\n    .catch((error) => {\n      console.log(\"Error B:\", error);\n    });\n  return;\n};\n\nconst removeLiquidityUni = () => {\n  provider = Ethers.provider();\n  uniContract = new ethers.Contract(\n    uniswapV2RouterContract,\n    uniswapABI.body.abi,\n    provider.getSigner()\n  );\n\n  lpTokenContract = new ethers.Contract(\n    lptokenaddresss,\n    lpabi,\n    provider.getSigner()\n  );\n\n  let lpAmountRaw = \"0.00000001663\";\n  let lpAmount = ethers.utils\n    .parseUnits(lpAmountRaw, tokenDecimalsETH)\n    .toHexString();\n\n  let amountAMin = ethers.utils\n    .parseUnits(\n      parseFloat(state.coinA.maxAmount * (1 - state.coinA.minSlippage)).toFixed(\n        fixedDecimals\n      ),\n      tokenDecimalsETH\n    )\n    .toHexString();\n\n  let amountBMin = ethers.utils\n    .parseUnits(\n      parseFloat(state.coinB.maxAmount * (1 - state.coinB.minSlippage)).toFixed(\n        fixedDecimals\n      ),\n      tokenDecimalsUSDT\n    )\n    .toHexString();\n  let deadline = ethers.BigNumber.from(\n    Math.floor(Date.now() / 1000) + 3600\n  ).toHexString();\n\n  lpTokenContract\n    .approve(uniswapV2RouterContract, lpAmount)\n    .then((response) => {\n      console.log(\"lp token approve GOOD --------\", response);\n      uniContract\n        .removeLiquidity(\n          tokenAContractAddress,\n          tokenBContractAddress,\n          lpAmount,\n          amountAMin,\n          amountBMin,\n          state.sender,\n          deadline\n        )\n        .then((response) => {\n          console.log(\"lp token remove request --------\", response);\n        })\n        .catch((error) => {\n          console.log(\"Error A:\", error);\n        });\n    })\n    .catch((error) => {\n      console.log(\"Error lp token:\", error);\n    });\n\n  return;\n};\n\nconst fetchAccountBalances = () => {\n  fetchBalanceRequest().then((res) => {\n    let data = res.body;\n    data = data.data.TokenBalances.TokenBalance;\n    const walletDataArray = data.map((item) => ({\n      tokenAddress: item.tokenAddress,\n      amount: item.amount,\n      formattedAmount: item.formattedAmount,\n    }));\n    State.update({\n      walletData: walletDataArray,\n    });\n    console.log(\"updating!\");\n  });\n};\n\nconst fetchBalanceRequest = async () => {\n  let data =\n    '{\"query\":\"query BalanceCheck {\\\\n  TokenBalances(\\\\n    input: {filter: {owner: {_in: [\\\\\"' +\n    state.sender +\n    '\\\\\"]}}, blockchain: ethereum, limit: 10}\\\\n  ) {\\\\n    TokenBalance {\\\\n      tokenAddress\\\\n      amount\\\\n      formattedAmount\\\\n      tokenType\\\\n      token {\\\\n        name\\\\n        symbol\\\\n      }\\\\n    }\\\\n  }\\\\n}\",\"operationName\":\"BalanceCheck\"}';\n  return asyncFetch(AIR_API, {\n    body: data,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      authorization: AIR_API_KEY,\n    },\n    method: \"POST\",\n  });\n};\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n        font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n        ${cssFont}\n        ${css}\n\n        .container {\n            display: flex;\n            justify-content: space-between; \n            align-items: center;\n            margin-bottom: 10px;\n          }\n\n          .centered-container {\n            display: flex;\n            justify-content: center; /* Centers horizontally */\n            align-items: center;     /* Centers vertically */\n            margin-top: 10px;\n            margin-bottom: 10px;\n          }\n          \n    `,\n  });\n}\n\nconst Theme = state.theme;\nconst web3connectLabel = state.web3connectLabel || \"n/a\";\n\n// FRONT END CONTROLS\nconst handleMaxClick = () => {\n  console.log(\"MAX clicked!\");\n  // Add functionality for max click here\n};\n\nconst updateOptionPrice = (name, newPrice) => {\n  const updatedOptions = state.options.map((option) => {\n    if (option.name === name) {\n      return { ...option, price: newPrice };\n    }\n    return option;\n  });\n  State.update({ options: updatedOptions });\n};\n\n//TOGGLES\nconst toggleShowButtons = () => {\n  State.update({ showButtons: !state.showButtons });\n};\n\nconst toggleAddLiquidity = () => {\n  State.update({ showAddLiquidity: !state.showAddLiquidity });\n};\nconst toggleRemoveLiquidity = () => {\n  State.update({ showRemoveLiquidity: !state.showRemoveLiquidity });\n};\n\nconst clearAll = () => {\n  State.update({\n    showAddLiquidity: !state.showAddLiquidity,\n  });\n};\n\n// HELPER FUNCTIONS/STATE\nif (state.txCost === undefined) {\n  const gasEstimate = ethers.BigNumber.from(1875000);\n  const gasPrice = ethers.BigNumber.from(1500000000);\n\n  const gasCostInWei = gasEstimate.mul(gasPrice);\n  const gasCostInEth = ethers.utils.formatEther(gasCostInWei);\n\n  let responseGql = fetch(\n    \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\n    {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `{\n          bundle(id: \"1\" ) {\n            ethPrice\n          }\n        }`,\n      }),\n    }\n  );\n\n  if (!responseGql) return \"\";\n\n  const ethPriceInUsd = responseGql.body.data.bundle.ethPrice;\n\n  const txCost = Number(gasCostInEth) * Number(ethPriceInUsd);\n\n  State.update({ txCost: `$${txCost.toFixed(2)}` });\n}\n\nif (state.fExchangeRate === undefined) {\n  const gasEstimate = ethers.BigNumber.from(gas.gasLimit);\n  const gasPrice = ethers.BigNumber.from(gas.gasPrice);\n\n  const gasCostInWei = gasEstimate.mul(gasPrice);\n  const gasCostInEth = ethers.utils.formatEther(gasCostInWei);\n\n  let responseGql = fetch(\n    \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\n    {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `{\n          bundle(id: \"1\" ) {\n            ethPrice\n          }\n        }`,\n      }),\n    }\n  );\n\n  if (!responseGql) return \"\";\n  const ethPriceInUsd = responseGql.body.data.bundle.ethPrice;\n  const txCost = Number(gasCostInEth) * Number(ethPriceInUsd);\n  State.update({ txCost: `$${txCost.toFixed(2)}` });\n}\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    console.log(\"set sender\", accounts[0]);\n    fetchAccountBalances();\n  }\n}\n\n// getters\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nreturn (\n  <div>\n    <Theme>\n      <div>\n        <div className=\"container\">\n          <div></div>\n          <div>\n            <Widget\n              src=\"a_liutiev.near/widget/button_web3connect\"\n              props={{ web3connectLabel }}\n            />\n          </div>\n        </div>\n\n        {!state.showAddLiquidity && !state.showRemoveLiquidity && (\n          <div class=\"card m-3\">\n            <div class=\"card-header\">\n              <div className=\"container\">\n                <div>\n                  <p>Pools</p>\n                </div>\n                <div>\n                  <button\n                    class=\"btn btn-primary m-0 p-1\"\n                    onClick={toggleRemoveLiquidity}\n                  >\n                    <p>Show Positions</p>\n                  </button>\n                  <button\n                    class=\"btn btn-primary m-0 p-1\"\n                    onClick={toggleAddLiquidity}\n                  >\n                    <p>New Position</p>\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"card-body\">\n              <div className=\"centered-container\">\n                {state.walletData.find(\n                  (t) => t.tokenAddress === lptokenaddresss\n                )?.formattedAmount || 0 !== 0 ? (\n                  <div className=\"container\">\n                    <div>\n                      <a\n                        href={`https://v2.info.uniswap.org/pair/${lptokenaddresss}`}\n                      >\n                        {state.coinA.name + \"/\" + state.coinB.name}\n                      </a>\n                    </div>\n                    <div>\n                      {parseFloat(\n                        state.walletData.find(\n                          (t) => t.tokenAddress === lptokenaddresss\n                        )?.formattedAmount || 0\n                      ).toFixed(12)}\n                    </div>\n                  </div>\n                ) : (\n                  <div>\n                    <p>Your active V2 liquidity positions will appear here.</p>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div class=\"card-footer\">\n              <div className=\"centered-container\">\n                <p>{getSender()}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {state.showAddLiquidity && (\n          <div class=\"card\">\n            {/* First div */}\n            <div class=\"card-header p-3\">\n              <div className=\"container\">\n                <div>\n                  <a href=\"#\" onClick={toggleAddLiquidity}>\n                    \u2190\n                  </a>\n                  <span>Add Liquidity</span>\n                </div>\n                <div>\n                  <a href=\"#\" onClick={clearAll}>\n                    Clear All\n                  </a>\n                  <span>\n                    <a href=\"#\">\u2699\ufe0f</a>\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Second div */}\n            <div class=\"card-body\">\n              <div className=\"container\">\n                <span>Select Pair</span>\n              </div>\n              <div className=\"container\">\n                <select\n                  value={state.coinA.name}\n                  onChange={(e) => {\n                    const selectedOption = state.options.find(\n                      (option) => option.name === e.target.value\n                    );\n                    State.update({ coinA: selectedOption });\n                  }}\n                >\n                  {state.options.map((option) => (\n                    <option value={option.name} key={option.name}>\n                      {option.name}\n                    </option>\n                  ))}\n                </select>\n\n                <select\n                  value={state.coinB.name}\n                  onChange={(e) => {\n                    const selectedOption = state.options.find(\n                      (opt) => opt.name === e.target.value\n                    );\n                    State.update({ coinB: selectedOption });\n                  }}\n                >\n                  {state.options\n                    .filter((option) => option.name === \"banana\")\n                    .concat(\n                      state.options.filter((option) => option.name !== \"banana\")\n                    )\n                    .map((option) => (\n                      <option value={option.name} key={option.name}>\n                        {option.name}\n                      </option>\n                    ))}\n                </select>\n              </div>\n              <div className=\"container\">\n                <span class=\"p-0 m-0 w-50\"> Set Slippage (%)</span>\n\n                <div className=\"container p-0\">\n                  <input\n                    type=\"text\"\n                    value={state.feeTier}\n                    placeholder=\"Fee Tier\"\n                    onChange={(e) => State.update({ feeTier: e.target.value })}\n                  />\n                  <button onClick={toggleShowButtons}>Edit</button>\n                </div>\n              </div>\n              {state.showButtons && (\n                <div className=\"container\">\n                  <button onClick={() => State.update({ feeTier: 0.001 })}>\n                    0.01%\n                  </button>\n                  <button onClick={() => State.update({ feeTier: 0.005 })}>\n                    0.05%\n                  </button>\n                  <button onClick={() => State.update({ feeTier: 0.003 })}>\n                    0.3%\n                  </button>\n                  <button onClick={() => State.update({ feeTier: 0.01 })}>\n                    1%\n                  </button>\n                </div>\n              )}\n            </div>\n\n            {/* Third div */}\n            <div class=\"card-body\">\n              <div class=\"container\">\n                {\" \"}\n                <span>Current Prices</span>\n              </div>\n              <div class=\"container\">\n                <div class=\"container\">\n                  <span>\n                    {state.coinA.name} per {state.coinB.name}\n                  </span>\n                </div>\n                <input\n                  type=\"number\"\n                  value={state.coinA.price / state.coinB.price}\n                  readOnly\n                  style={{ textAlign: \"right\", paddingLeft: \"px\" }}\n                />\n              </div>\n              <div class=\"container\">\n                <div class=\"container\">\n                  <span>\n                    {state.coinB.name} per {state.coinA.name}\n                  </span>\n                </div>\n                <input\n                  type=\"number\"\n                  value={state.coinB.price / state.coinA.price}\n                  readOnly\n                  style={{ textAlign: \"right\", paddingLeft: \"px\" }}\n                />\n              </div>\n            </div>\n\n            {/* Fourth div */}\n            <div class=\"card-body\">\n              <div class=\"container\">\n                <span>Deposit Amounts</span>\n              </div>\n              <div class=\"container card p-3\">\n                <div class=\"container\">\n                  <input\n                    type=\"number\"\n                    value={state.coinA.maxAmount}\n                    onChange={(e) => {\n                      const inputValue = parseFloat(e.target.value);\n                      if (inputValue <= state.coinA.balance) {\n                        State.update({\n                          coinA: { ...state.coinA, maxAmount: inputValue },\n                        });\n                      }\n                    }}\n                    max={state.coinA.balance}\n                    style={{ textAlign: \"right\" }}\n                  />\n                </div>\n                <div class=\"container\">\n                  <div></div>\n                  <div>\n                    <span>{state.coinA.name}</span>\n                    <span>\n                      Balance:{\" \"}\n                      {parseFloat(\n                        state.walletData.find(\n                          (t) =>\n                            t.tokenAddress ===\n                            \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"\n                        )?.formattedAmount || 0\n                      ).toFixed(6)}\n                    </span>\n                    <a href=\"#\" onClick={handleMaxClick}>\n                      MAX\n                    </a>\n                  </div>\n                </div>\n              </div>\n              <div class=\"container card p-3\">\n                <div class=\"container\">\n                  <input\n                    type=\"number\"\n                    value={state.coinB.maxAmount}\n                    onChange={(e) => {\n                      const inputValue = parseFloat(e.target.value);\n                      if (inputValue <= state.coinB.balance) {\n                        State.update({\n                          coinB: { ...state.coinB, maxAmount: inputValue },\n                        });\n                      }\n                    }}\n                    max={state.coinB.balance}\n                    style={{ textAlign: \"right\" }}\n                  />\n                </div>\n                <div class=\"container\">\n                  <div></div>\n                  <div>\n                    <span>{state.coinB.name}</span>\n                    <span>\n                      Balance:{\" \"}\n                      {parseFloat(\n                        state.walletData.find(\n                          (t) => t.tokenAddress === tokenBContractAddress\n                        )?.formattedAmount || 0\n                      ).toFixed(6)}\n                    </span>{\" \"}\n                    <a href=\"#\" onClick={handleMaxClick}>\n                      MAX\n                    </a>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"centered-container\">\n                <p>Estimated Transaction Cost: {state.txCost}</p>\n              </div>\n            </div>\n            <Widget\n              src=\"a_liutiev.near/widget/liquidityFooter\"\n              props={{\n                handleButtonClick: addLiquidityUni,\n                value: state.addLiquidityLabel,\n              }}\n            />\n          </div>\n        )}\n      </div>\n\n      {state.showRemoveLiquidity && (\n        <div class=\"card m-3\">\n          <div class=\"card-header\">\n            <div className=\"centered-container\">\n              <div>\n                <a href=\"#\" onClick={toggleRemoveLiquidity}>\n                  \u2190\n                </a>\n                <span>Remove Liquidity</span>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"card-body p-3\">\n            <div className=\"container\">\n              <div>{state.coinA.name + \" / \" + state.coinB.name}</div>\n              <div>\n                <a href={`https://v2.info.uniswap.org/account/${state.sender}`}>\n                  Active Pools \ud83d\udfe2\n                </a>\n              </div>\n            </div>\n            <div class=\"card m-3 p-3\">\n              <div className=\"container\">\n                <div>\n                  <a\n                    href={`https://v2.info.uniswap.org/pair/${lptokenaddresss}`}\n                  >\n                    {state.coinA.name + \"/\" + state.coinB.name}\n                  </a>\n                </div>\n                <div>\n                  {parseFloat(\n                    state.walletData.find(\n                      (t) => t.tokenAddress === lptokenaddresss\n                    )?.formattedAmount || 0\n                  ).toFixed(12)}\n                </div>\n              </div>\n\n              <div className=\"container\">\n                <div>\n                  <p>Fee tier</p>\n                </div>\n                <div>{state.feeTier * 100 + \"%\"}</div>\n              </div>\n            </div>\n          </div>\n          <Widget\n            src=\"a_liutiev.near/widget/liquidityFooter\"\n            props={{\n              handleButtonClick: removeLiquidityUni,\n              value: state.removeLiquidityLabel,\n            }}\n          />\n        </div>\n      )}\n    </Theme>\n  </div>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/c0cf2883421bfa90fbedbdaa2ce8aa7b98b21aecb6693f6054e5696890a80a24/widget/encodexnear23-uniswap", "fact_widget_deployments_id": "c29b599caf28e3caad654d0a18d977fb", "inserted_timestamp": "2023-10-15T22:20:19.365Z", "modified_timestamp": "2023-10-15T22:20:19.365Z", "__row_index": 0}