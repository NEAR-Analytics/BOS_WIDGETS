{"tx_hash": "9JH1L8cwbs7G3HmBNRSpLWuJMZkKNLwbWCNDc16GaeHC", "action_id_social": "2hS54NbAkmGyiS1ZuN1k6nhCUBmYSipVrU1kBt9cTy4G-0-widget", "block_id": 98814563, "block_timestamp": "2023-08-14T22:06:14.430Z", "signer_id": "yairnava.near", "widget_name": "Maverick-Swap", "source_code": "const routerAbi = fetch(\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/maverick-router.txt\"\n);\nif (!routerAbi.ok) {\n  return \"Loading\";\n}\n\nconst TOKENS = [\n  {\n    name: \"ETH\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/eth.svg\",\n    address: \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\",\n    coinGeckoId: \"ethereum\",\n    decimals: 18,\n  },\n  {\n    name: \"USDC\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/usdc.svg\",\n    address: \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\",\n    coinGeckoId: \"usd-coin\",\n    decimals: 6,\n  },\n  {\n    name: \"CBUSD\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/busd.png\",\n    address: \"0x2039bb4116B4EFc145Ec4f0e2eA75012D6C0f181\",\n    coinGeckoId: \"binance-usd\",\n    decimals: 18,\n  },\n  {\n    name: \"MAV\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/mav.png\",\n    address: \"0x787c09494Ec8Bcb24DcAf8659E7d5D69979eE508\",\n    coinGeckoId: \"maverick-protocol\",\n    decimals: 18,\n  },\n  {\n    name: \"LUSD\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/lusd.svg\",\n    address: \"0x503234F203fC7Eb888EEC8513210612a43Cf6115\",\n    coinGeckoId: \"liquity-usd\",\n    decimals: 18,\n  },\n  {\n    name: \"RETH\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/reth.png\",\n    address: \"0x32Fd44bB869620C0EF993754c8a00Be67C464806\",\n    coinGeckoId: \"rocket-pool-eth\",\n    decimals: 18,\n  },\n  {\n    name: \"CBETH\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/cbeth.png\",\n    address: \"0x75Af292c1c9a37b3EA2E6041168B4E48875b9ED5\",\n    coinGeckoId: \"coinbase-wrapped-staked-eth\",\n    decimals: 18,\n  },\n  {\n    name: \"USD+\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/usd+.png\",\n    address: \"0x8E86e46278518EFc1C5CEd245cBA2C7e3ef11557\",\n    coinGeckoId: \"usd\",\n    decimals: 6,\n  },\n  {\n    name: \"GRAI\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/grai.png\",\n    address: \"0x5FC44E95eaa48F9eB84Be17bd3aC66B6A82Af709\",\n    coinGeckoId: \"grai\",\n    decimals: 18,\n  },\n  {\n    name: \"FRAX\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/frax.png\",\n    address: \"0xb4C1544cb4163f4C2ECa1aE9Ce999F63892d912A\",\n    coinGeckoId: \"frax\",\n    decimals: 18,\n  },\n  {\n    name: \"WETH\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/weth.png\",\n    address: \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\",\n    coinGeckoId: \"usd-coin\",\n    decimals: 18,\n  },\n];\n\nconst POOLS = [\n  { name: \"ETH-USDC\", address: \"0x41c8cf74c27554a8972d3bf3d2bd4a14d8b604ab\" },\n  { name: \"ETH-CBUSD\", address: \"0x3Ae63FB198652E294B8DE4C2EF659D95D5ff28BE\" },\n  { name: \"ETH-MAV\", address: \"0x4D47167e66e86d1a1083f52136832d4f1eF5809A\" },\n  { name: \"ETH-LUSD\", address: \"0xB1338207DE233aE6a9A6D63309221b577F8Cd6E8\" },\n  { name: \"ETH-RETH\", address: \"0x07e1F845819D7CABc03684fdb4Bf99D5cd2B2964\" },\n  { name: \"ETH-CBETH\", address: \"0x23e8d6269717C567e4A2E9680491C8c65B67Ad0d\" },\n  { name: \"ETH-USD+\", address: \"0x15461e7D0d6061e082b2c9B641634BB096527679\" },\n  { name: \"ETH-GRAI\", address: \"\" },\n  { name: \"ETH-FRAX\", address: \"\" },\n  { name: \"USDC-CBUSD\", address: \"0x88D29317A355d8586bd0D98E8745ec3171d68F56\" },\n  { name: \"USDC-MAV\", address: \"0x74E398c79eb7a653b432f6313edF776C8d930142\" },\n  { name: \"USDC-LUSD\", address: \"0x6A9143A5f9BaF73841992DCB737844e5ad16A283\" },\n  { name: \"USDC-RETH\", address: \"\" },\n  { name: \"USDC-CBETH\", address: \"\" },\n  { name: \"USDC-USD+\", address: \"0xaCA5d8805D6f160Eb46E273e28169DDBF703eCdc\" },\n  { name: \"USDC-GRAI\", address: \"\" },\n  { name: \"USDC-FRAX\", address: \"0x4e1852cf46b24940412e13C358B4f19eC92b9eaE\" },\n  { name: \"CBUSD-MAV\", address: \"0x9f4A993b3120e52044810F1c91088a5630a8bF63\" },\n  { name: \"CBUSD-LUSD\", address: \"\" },\n  { name: \"CBUSD-RETH\", address: \"\" },\n  { name: \"CBUSD-CBETH\", address: \"\" },\n  { name: \"CBUSD-USD+\", address: \"\" },\n  { name: \"CBUSD-GRAI\", address: \"\" },\n  { name: \"CBUSD-FRAX\", address: \"\" },\n  { name: \"MAV-LUSD\", address: \"\" },\n  { name: \"MAV-RETH\", address: \"\" },\n  { name: \"MAV-CBETH\", address: \"\" },\n  { name: \"MAV-USD+\", address: \"\" },\n  { name: \"MAV-GRAI\", address: \"\" },\n  { name: \"MAV-FRAX\", address: \"\" },\n  { name: \"LUSD-RETH\", address: \"\" },\n  { name: \"LUSD-CBETH\", address: \"\" },\n  { name: \"LUSD-USD+\", address: \"\" },\n  { name: \"LUSD-GRAI\", address: \"0x28f57e5c2823183280CC9B3B45d746A2943111C3\" },\n  { name: \"LUSD-FRAX\", address: \"\" },\n  { name: \"RETH-CBETH\", address: \"\" },\n  { name: \"RETH-USD+\", address: \"\" },\n  { name: \"RETH-GRAI\", address: \"\" },\n  { name: \"RETH-FRAX\", address: \"\" },\n  { name: \"CBETH-USD+\", address: \"\" },\n  { name: \"CBETH-GRAI\", address: \"\" },\n  { name: \"CBETH-FRAX\", address: \"\" },\n  { name: \"USD+-GRAI\", address: \"\" },\n  { name: \"USD+-FRAX\", address: \"\" },\n  { name: \"GRAI-FRAX\", address: \"\" },\n];\n\nState.init({\n  isZkSync: false,\n  poolSelected: null,\n  tokenSendSelected: null,\n  tokenRecieveSelected: null,\n  amountInput: null,\n  amountRecieve: 0,\n  rate: 0,\n  routerContract: \"0x39E098A153Ad69834a9Dac32f0FCa92066aD03f4\",\n  onApproving: false,\n  onSwap: false,\n});\n\nconst switchNetwork = () => {\n  let chainId = 324;\n  Ethers.provider()\n    .getNetwork()\n    .then((res) => {\n      if (res.chainId == chainId) {\n        State.update({ isZkSync: true });\n      }\n    });\n};\n\nconst getErc20Balance = (tokenId, receiver, decimals, asset) => {\n  if (state.sender === undefined) {\n    return;\n  }\n  if (asset == \"ETH\") {\n    Ethers.provider()\n      .getBalance(state.sender)\n      .then((balance) => {\n        State.update({\n          inputBalance: parseFloat(\n            ethers.utils.formatUnits(balance, decimals)\n          ).toFixed(6),\n          unFixedInputBalance: balance.toHexString(),\n        });\n      });\n  } else {\n    asyncFetch(\n      \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n    )\n      .catch((res) => {\n        console.log(err);\n      })\n      .then((res) => {\n        const contract = new ethers.Contract(\n          tokenId,\n          res.body,\n          Ethers.provider().getSigner()\n        );\n        contract.balanceOf(receiver).then((res) => {\n          let balance = ethers.utils.formatUnits(res, decimals);\n          State.update({\n            inputBalance: parseFloat(balance).toFixed(6),\n            unFixedInputBalance: res.toHexString(),\n          });\n        });\n      });\n  }\n};\n\nfunction getPrice(type, data) {\n  let tokenIdForCoingeckoAPI;\n  tokenIdForCoingeckoAPI = data.coinGeckoId;\n  if (type) {\n    getErc20Balance(data.address, state.sender, data.decimals, data.name);\n  }\n  let dataUrl = `https://api.coingecko.com/api/v3/coins/${tokenIdForCoingeckoAPI}`;\n  asyncFetch(dataUrl).then((res) => {\n    const tokenData = res.body;\n    const price = Number(tokenData.market_data.current_price.usd);\n    console.log(state.tokenSendSelected);\n    console.log(state.tokenRecieveSelected);\n    if (\n      (state.tokenSendSelected != null || type) &&\n      (state.tokenRecieveSelected != null || !type)\n    ) {\n      type\n        ? State.update({ rate: price / state.tokenRecieveSelected.price })\n        : State.update({ rate: state.tokenSendSelected.price / price });\n    }\n    type\n      ? State.update({ tokenSendSelected: { price: price, ...data } })\n      : State.update({ tokenRecieveSelected: { price: price, ...data } });\n  });\n}\n\nconst tokenInApprovaleNeededCheck = (data) => {\n  if (data.name == \"ETH\") {\n    State.update({\n      approvalNeeded: false,\n    });\n  } else {\n    asyncFetch(\n      \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n    ).then((res) => {\n      const ifaceErc20 = new ethers.utils.Interface(res.body);\n      const encodedTokenAllowancesData = ifaceErc20.encodeFunctionData(\n        \"allowance\",\n        [state.sender, state.routerContract]\n      );\n      return Ethers.provider()\n        .call({\n          to: data.address,\n          data: encodedTokenAllowancesData,\n        })\n        .then((encodedTokenAllowanceHex) => {\n          const tokenAllowance = ifaceErc20.decodeFunctionResult(\n            \"allowance\",\n            encodedTokenAllowanceHex\n          );\n          if (tokenAllowance) {\n            State.update({\n              approvalNeeded: new Big(tokenAllowance).toFixed() == \"0\",\n            });\n          } else {\n            State.update({\n              approvalNeeded: false,\n            });\n          }\n        });\n    });\n  }\n};\n\nconst approveErc20Token = () => {\n  asyncFetch(\n    \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n  ).then((res) => {\n    const value = state.unFixedInputBalance;\n\n    const approveContract = new ethers.Contract(\n      state.tokenSendSelected.address,\n      res.body,\n      Ethers.provider().getSigner()\n    );\n\n    let gasArgs = {};\n\n    if (gweiPrice !== undefined && gasLimit !== undefined) {\n      gasArgs.gasPrice = ethers.utils.parseUnits(gweiPrice ?? \"0.26\", \"gwei\");\n      gasArgs.gasLimit = gasLimit ?? 20000000;\n    }\n\n    approveContract\n      .approve(state.routerContract, value, gasArgs)\n      .then((transactionHash) => {\n        State.update({\n          onApproving: true,\n        });\n        setTimeout(() => {\n          State.update({\n            onApproving: false,\n            approvalNeeded: false,\n          });\n        }, 10000);\n      });\n  });\n};\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    switchNetwork();\n  }\n}\n\nconst handleSendSelect = (data) => {\n  const token = TOKENS.find((token) => token.name === data.target.value);\n  getPrice(true, token);\n  tokenInApprovaleNeededCheck(token);\n};\n\nconst handleRecieveSelect = (data) => {\n  const token = TOKENS.find((token) => token.name === data.target.value);\n  getPrice(false, token);\n};\n\nconst turnTokens = () => {\n  const tokenSendSelected = state.tokenSendSelected;\n  const tokenRecieveSelected = state.tokenRecieveSelected;\n  if (tokenSendSelected && tokenRecieveSelected) {\n    State.update({ tokenSendSelected: null, tokenRecieveSelected: null });\n    setTimeout(() => {\n      State.update({\n        tokenSendSelected: tokenRecieveSelected,\n        tokenRecieveSelected: tokenSendSelected,\n      });\n      getErc20Balance(\n        tokenRecieveSelected.address,\n        state.sender,\n        tokenRecieveSelected.decimals,\n        tokenRecieveSelected.name\n      );\n      const price = Number(tokenRecieveSelected.price);\n      State.update({ rate: price / tokenSendSelected.price });\n      tokenInApprovaleNeededCheck(tokenRecieveSelected);\n    });\n  }\n};\n\nconst cantSwap = () => {\n  return (\n    state.tokenSendSelected && state.tokenRecieveSelected && state.amountInput\n  );\n};\n\nconst existPool = () => {\n  const poolName1 = `${state.tokenSendSelected.name}-${state.tokenRecieveSelected.name}`;\n  const poolName2 = `${state.tokenRecieveSelected.name}-${state.tokenSendSelected.name}`;\n\n  if (!state.tokenSendSelected.name || !state.tokenRecieveSelected.name) {\n    return true;\n  }\n\n  const pool = POOLS.find((p) => p.name === poolName1 || p.name === poolName2);\n\n  if (pool && pool.address != \"\") {\n    State.update({ poolSelected: pool.address });\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSufficientBalance = () => {\n  if (!state.amountInput) {\n    return true;\n  } else if (state.amountInput > state.inputBalance) {\n    return false;\n  }\n  return true;\n};\n\nconst setMaxBalance = () => {\n  if (state.inputBalance > 0) {\n    State.update({ amountInput: state.inputBalance });\n  }\n};\n\nconst confirmTransaction = () => {\n  const router = new ethers.Contract(\n    state.routerContract,\n    routerAbi.body,\n    Ethers.provider().getSigner()\n  );\n  let amountIn = ethers.utils.parseUnits(\n    state.amountInput,\n    state.tokenSendSelected.decimals\n  );\n  let paramsv2 = {\n    tokenIn: state.tokenSendSelected.address,\n    tokenOut: state.tokenRecieveSelected.address,\n    pool: state.poolSelected,\n    recipient: state.sender,\n    deadline: 1e13,\n    amountIn: amountIn,\n    amountOutMinimum: 0,\n    sqrtPriceLimitD18: 0,\n  };\n  const overrides = {\n    value: amountIn,\n    gasLimit: 2303039,\n  };\n  try {\n    router.exactInputSingle(paramsv2, overrides).then((res) => {\n      State.update({\n        onSwap: true,\n      });\n      setTimeout(() => {\n        State.update({\n          tokenSendSelected: null,\n          tokenRecieveSelected: null,\n          amountInput: 0,\n          inputBalance: 0,\n          amountRecieve: 0,\n          rate: 0,\n          poolSelected: null,\n          onSwap: false,\n        });\n      }, 10000);\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst getRecipient = () => {\n  return (\n    state.sender.substring(0, 5) +\n    \"...\" +\n    state.sender.substring(state.sender.length - 4, state.sender.length)\n  ).toUpperCase();\n};\n\nconst css = fetch(\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/widget.css\"\n).body;\n\nif (!css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    ${css}\n`,\n  });\n}\n\nconst Theme = state.theme;\nreturn (\n  <Theme>\n    <div class=\"text-center mt-1\">\n      <div class=\"MainContainer\">\n        <div class=\"ProtocolContainer\">\n          <div class=\"ProtocolNetworkContainet\">\n            <div class=\"ProtocolNetworkTextSection\">\n              <div class=\"ProtocolText\">PROTOCOL</div>\n            </div>\n            <div class=\"ProtocolNetworkSection\">\n              <div class=\"ProtocolNetworkContainer\">\n                <img\n                  class=\"ProtocolImg\"\n                  src=\"https://etherscan.io/token/images/maverick_32.png\"\n                />\n                <div class=\"NetworkText\">Maverick</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"titleSection\">\n          <div class=\"titleSwap\">SWAP</div>\n        </div>\n        {state.isZkSync ? (\n          <>\n            <div class=\"SendRecieveContainer\">\n              <div class=\"SendContainer\">\n                <div class=\"TokenSection\">\n                  {state.tokenSendSelected ? (\n                    <img class=\"TokenImg\" src={state.tokenSendSelected.icon} />\n                  ) : null}\n\n                  <div class=\"TokenNameSection\">\n                    <div class=\"TokenAction\">SEND {\"->\"}</div>\n                    <select\n                      class=\"TokenNameSelect\"\n                      value={\n                        state.tokenSendSelected\n                          ? state.tokenSendSelected.name\n                          : \"default\"\n                      }\n                      onChange={handleSendSelect}\n                    >\n                      <option\n                        value=\"default\"\n                        disabled={state.tokenSendSelected}\n                      >\n                        Select Token\n                      </option>\n                      {TOKENS.map((token) => {\n                        return (\n                          <>\n                            {state.tokenRecieveSelected.name != token.name && (\n                              <option>{token.name}</option>\n                            )}\n                          </>\n                        );\n                      })}\n                    </select>\n                  </div>\n                </div>\n                <div class=\"TokenAmountSection\">\n                  <input\n                    class=\"TokenAmountInput\"\n                    type=\"text\"\n                    placeholder=\"0\"\n                    inputmode=\"decimal\"\n                    min=\"0\"\n                    pattern=\"^[0-9]*[.]?[0-9]*$\"\n                    value={state.amountInput}\n                    onChange={(e) =>\n                      State.update({ amountInput: e.target.value })\n                    }\n                  />\n                  <div class=\"TokenAmountPreview\">\n                    {state.inputBalance != null ? (\n                      state.inputBalance && state.inputBalance > 0 ? (\n                        <span>\n                          Balance: {state.inputBalance}\n                          <span\n                            class=\"UserBalance\"\n                            onClick={async () => {\n                              setMaxBalance();\n                            }}\n                          >\n                            MAX\n                          </span>\n                        </span>\n                      ) : (\n                        \"Balance: 0\"\n                      )\n                    ) : (\n                      \"Balance: 0\"\n                    )}\n                  </div>\n                  {!isSufficientBalance() ? (\n                    <div class=\"TokenInsufficientBalance\">\n                      Insufficient Balance\n                    </div>\n                  ) : null}\n                </div>\n              </div>\n              <div class=\"turnSection\">\n                <button\n                  type=\"button\"\n                  class=\"turnButton\"\n                  onClick={async () => {\n                    turnTokens();\n                  }}\n                >\n                  <svg\n                    class=\"turnImg\"\n                    focusable=\"false\"\n                    aria-hidden=\"true\"\n                    viewBox=\"0 0 24 24\"\n                    data-testid=\"ArrowsUpDownIcon\"\n                  >\n                    <path d=\"M11.95 7.95l-1.414 1.414L8 6.828 8 20H6V6.828L3.465 9.364 2.05 7.95 7 3l4.95 4.95zm10 8.1L17 21l-4.95-4.95 1.414-1.414 2.537 2.536L16 4h2v13.172l2.536-2.536 1.414 1.414z\"></path>\n                  </svg>\n                </button>\n              </div>\n              <div class=\"RecieveContainer\">\n                <div class=\"TokenSection\">\n                  {state.tokenRecieveSelected ? (\n                    <img\n                      class=\"TokenImg\"\n                      src={state.tokenRecieveSelected.icon}\n                    />\n                  ) : null}\n\n                  <div class=\"TokenNameSection\">\n                    <div class=\"TokenAction\">{\"->\"} RECEIVE</div>\n                    <select\n                      class=\"TokenNameSelect\"\n                      value={\n                        state.tokenRecieveSelected\n                          ? state.tokenRecieveSelected.name\n                          : \"default\"\n                      }\n                      onChange={handleRecieveSelect}\n                    >\n                      <option\n                        value=\"default\"\n                        disabled={state.tokenRecieveSelected}\n                      >\n                        Select Token\n                      </option>\n                      {TOKENS.map((token) => {\n                        return (\n                          <>\n                            {state.tokenSendSelected.name != token.name && (\n                              <option>{token.name}</option>\n                            )}\n                          </>\n                        );\n                      })}\n                    </select>\n                  </div>\n                </div>\n                <div class=\"TokenAmountSection\">\n                  <div class=\"TokenAmount\">\n                    {state.amountInput\n                      ? (\n                          state.amountInput * parseFloat(state.rate).toFixed(6)\n                        ).toFixed(6)\n                      : 0}\n                  </div>\n                  <div class=\"TokenAmountPreview\">\n                    {state.rate != 0\n                      ? `${\n                          \"\u2248 \" +\n                          (\n                            state.amountInput * state.tokenSendSelected.price\n                          ).toFixed(6)\n                        } USD`\n                      : \"\"}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"FeesContainer\">\n              <div class=\"Line\" />\n              <div class=\"RecipientContainer\">\n                <div class=\"RecipientText\">Recipient</div>\n                <div class=\"RecipientValue\">{getRecipient()}</div>\n              </div>\n              <div class=\"RecipientContainer\">\n                <div class=\"RecipientText\">Rate</div>\n                <div class=\"RecipientValue\">\n                  {state.rate != 0\n                    ? `1 ${state.tokenSendSelected.name} \u2248 ${state.rate.toFixed(\n                        6\n                      )}\n              ${state.tokenRecieveSelected.name}`\n                    : \"\"}\n                </div>\n              </div>\n            </div>\n          </>\n        ) : (\n          state.sender && (\n            <span class=\"text-white\">\n              To proceed, please switch to the\n              <br />\n              zkSync Era Network using your wallet.\n            </span>\n          )\n        )}\n        <div class=\"ConfirmContainer\">\n          {!state.onApproving ? (\n            state.sender && state.isZkSync ? (\n              state.approvalNeeded ? (\n                state.inputBalance && state.inputBalance > 0 ? (\n                  <div\n                    class={\"ConfirmButton\"}\n                    onClick={async () => {\n                      approveErc20Token();\n                    }}\n                  >\n                    <div class={\"ConfirmText\"}>\n                      {`Approve ${state.tokenSendSelected.name}`}\n                    </div>\n                  </div>\n                ) : (\n                  <div class={\"ConfirmButtonDisabled\"}>\n                    <div class={\"ConfirmTextDisabled\"}>\n                      {`You don't have balance to approve`}\n                    </div>\n                  </div>\n                )\n              ) : cantSwap() && isSufficientBalance() && existPool() ? (\n                !state.onSwap ? (\n                  <div\n                    class={\"ConfirmButton\"}\n                    onClick={async () => {\n                      confirmTransaction();\n                    }}\n                  >\n                    <div class={\"ConfirmText\"}>Confirm</div>\n                  </div>\n                ) : (\n                  <div\n                    class={\"ConfirmButtonDisabled\"}\n                    onClick={async () => {\n                      confirmTransaction();\n                    }}\n                  >\n                    <div class={\"ConfirmTextDisabled\"}>Swap in progress...</div>\n                  </div>\n                )\n              ) : (\n                <div class={\"ConfirmButtonDisabled\"}>\n                  <div class={\"ConfirmTextDisabled\"}>\n                    {existPool()\n                      ? isSufficientBalance()\n                        ? \"Select a Pair and Amount\"\n                        : \"Insufficient Balance\"\n                      : \"Pool Not Deployed\"}\n                  </div>\n                </div>\n              )\n            ) : (\n              <Web3Connect\n                className=\"ConfirmButton ConfirmText\"\n                connectLabel=\"Connect Wallet\"\n              />\n            )\n          ) : (\n            <div class={\"ConfirmButtonDisabled\"}>\n              <div class={\"ConfirmTextDisabled\"}>\n                {`${state.tokenSendSelected.name} it's being approved...`}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/yairnava.near/widget/Maverick-Swap", "fact_widget_deployments_id": "537862e9842f87626f6080a0e2946ae5", "inserted_timestamp": "2023-08-14T23:35:36.079Z", "modified_timestamp": "2023-08-14T23:35:36.079Z", "__row_index": 0}