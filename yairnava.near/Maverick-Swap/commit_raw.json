{"tx_hash": "HULVbyTfwXu4izhmmdySKkfqWdko87AZvS4R1179i4rj", "action_id_social": "7jRS6KYJXaNt4iRnSygVThb2s5Xpq9LGKgdBsWkADWAC-0-widget", "block_id": 97490625, "block_timestamp": "2023-07-28T00:16:47.884Z", "signer_id": "yairnava.near", "widget_name": "Maverick-Swap", "source_code": "const TOKENS = [\n  {\n    name: \"ETH\",\n    icon: \"https://firebasestorage.googleapis.com/v0/b/token-library.appspot.com/o/eth.svg?alt=media&token=1985e3d8-3aa7-4d04-8839-565d4c341615\",\n    address: \"0x000000000000000000000000000000000000800A\",\n    coinGeckoId: \"ethereum\",\n    decimals: 18,\n  },\n  {\n    name: \"USDC\",\n    icon: \"https://firebasestorage.googleapis.com/v0/b/token-library.appspot.com/o/usdc.svg?alt=media&token=1985e3d8-3aa7-4d04-8839-565d4c341615\",\n    address: \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\",\n    coinGeckoId: \"usd-coin\",\n    decimals: 6,\n  },\n  {\n    name: \"MUTE\",\n    icon: \"https://firebasestorage.googleapis.com/v0/b/token-library.appspot.com/o/mute.svg?alt=media&token=91b36efd-93fe-4e05-86dd-b97890f5f137\",\n    address: \"0x0e97C7a0F8B2C9885C8ac9fC6136e829CbC21d42\",\n    coinGeckoId: \"mute\",\n    decimals: 18,\n  },\n  {\n    name: \"COMBO\",\n    icon: \"https://firebasestorage.googleapis.com/v0/b/token-library.appspot.com/o/combo.svg?alt=media&token=beb166a2-a1bf-4935-9a7f-60219174feec\",\n    address: \"0xc2B13Bb90E33F1E191b8aA8F44Ce11534D5698E3\",\n    coinGeckoId: \"furucombo\",\n    decimals: 18,\n  },\n  {\n    name: \"PERP\",\n    icon: \"https://firebasestorage.googleapis.com/v0/b/token-library.appspot.com/o/perp.svg?alt=media&token=03fa3dd9-123d-4a42-9885-6ae8e982a596\",\n    address: \"0x42c1c56be243c250AB24D2ecdcC77F9cCAa59601\",\n    coinGeckoId: \"perpetual-protocol\",\n    decimals: 18,\n  },\n  {\n    name: \"LUSD\",\n    icon: \"https://firebasestorage.googleapis.com/v0/b/token-library.appspot.com/o/lusd.svg?alt=media&token=0bafb7c1-d75a-4cc0-8d2c-a966ba5229ce\",\n    address: \"0x503234F203fC7Eb888EEC8513210612a43Cf6115\",\n    coinGeckoId: \"liquity-usd\",\n    decimals: 18,\n  },\n  {\n    name: \"DVF\",\n    icon: \"https://firebasestorage.googleapis.com/v0/b/token-library.appspot.com/o/dvf.svg?alt=media&token=2b99f719-6730-4a6e-8e98-7eadb4222010\",\n    address: \"0xBbD1bA24d589C319C86519646817F2F153c9B716\",\n    coinGeckoId: \"rhinofi\",\n    decimals: 18,\n  },\n  {\n    name: \"WOO\",\n    icon: \"https://firebasestorage.googleapis.com/v0/b/token-library.appspot.com/o/woo.svg?alt=media&token=e7e86642-a227-4bd5-8237-3e5c538146d6\",\n    address: \"0x9E22D758629761FC5708c171d06c2faBB60B5159\",\n    coinGeckoId: \"woo-network\",\n    decimals: 18,\n  },\n  {\n    name: \"DERI\",\n    icon: \"https://firebasestorage.googleapis.com/v0/b/token-library.appspot.com/o/deri.svg?alt=media&token=f9373638-b7d7-4e5f-aeeb-52e0429d20d7\",\n    address: \"0x140D5bc5b62d6cB492B1A475127F50d531023803\",\n    coinGeckoId: \"deri-protocol\",\n    decimals: 18,\n  },\n  {\n    name: \"DEXTF\",\n    icon: \"https://firebasestorage.googleapis.com/v0/b/token-library.appspot.com/o/dextf.svg?alt=media&token=1793cf4c-6933-42c0-a4a3-20ddbc7db753\",\n    address: \"0x9929bCAC4417A21d7e6FC86F6Dae1Cc7f27A2e41\",\n    coinGeckoId: \"dextf\",\n    decimals: 18,\n  },\n  {\n    name: \"GOVI\",\n    icon: \"https://firebasestorage.googleapis.com/v0/b/token-library.appspot.com/o/govi.svg?alt=media&token=82358649-c6cb-4f3e-ba13-fbb70d1d801f\",\n    address: \"0xD63eF5e9C628c8a0E8984CDfb7444AEE44B09044\",\n    coinGeckoId: \"govi\",\n    decimals: 18,\n  },\n  {\n    name: \"1INCH\",\n    icon: \"https://firebasestorage.googleapis.com/v0/b/token-library.appspot.com/o/1inch.svg?alt=media&token=4e354096-c9d5-4c7a-9da1-1ecfc715278f\",\n    address: \"0x3f0B8B206A7FBdB3ecFc08c9407CA83F5aB1Ce59\",\n    coinGeckoId: \"1inch\",\n    decimals: 18,\n  },\n  {\n    name: \"PEPE\",\n    icon: \"https://firebasestorage.googleapis.com/v0/b/token-library.appspot.com/o/pepe.svg?alt=media&token=f0368359-659a-46bc-a7b9-c419f9150fcd\",\n    address: \"0xFD282F16a64c6D304aC05d1A58Da15bed0467c71\",\n    coinGeckoId: \"pepe\",\n    decimals: 18,\n  },\n];\n\nState.init({\n  tokenSendSelected: null,\n  tokenRecieveSelected: null,\n  amountInput: null,\n  amountRecieve: 0,\n  rate: 0,\n});\n\nconst switchNetwork = () => {\n  console.log(Ethers.provider());\n  let chainId = 324;\n  try {\n    console.log(Ethers.provider().getNetwork());\n    Ethers.send(\"wallet_switchEthereumChain\", [{ chainId: `0x${chainId}` }]);\n    setTimeout(() => {\n      console.log(Ethers.provider().getNetwork());\n    }, \"5000\");\n  } catch (err) {\n    console.log(err);\n    Ethers.send(\"wallet_addEthereumChain\", [\n      {\n        chainId: \"324\",\n        chainName: \"zkSync Era Mainnet\",\n        rpcUrls: [\"https://mainnet.era.zksync.io\"],\n        blockExplorerUrls: [\"https://explorer.zksync.io/\"],\n        nativeCurrency: {\n          symbol: \"\",\n          decimals: 18,\n        },\n      },\n    ]);\n  }\n};\n\nconst getErc20Balance = (tokenId, receiver, decimals, asset) => {\n  if (state.sender === undefined) {\n    return;\n  }\n  if (asset == \"ETH\") {\n    console.log(\"ETH\");\n    Ethers.provider()\n      .getBalance(state.sender)\n      .then((balance) => {\n        State.update({\n          inputBalance: ethers.utils.formatUnits(balance, decimals),\n        });\n      });\n  } else {\n    asyncFetch(\n      \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n    )\n      .catch((res) => {\n        console.log(err);\n      })\n      .then((res) => {\n        const contract = new ethers.Contract(\n          tokenId,\n          res.body,\n          Ethers.provider().getSigner()\n        );\n        contract.balanceOf(receiver).then((res) => {\n          let balance = ethers.utils.formatUnits(res, decimals);\n          State.update({ inputBalance: balance });\n        });\n      });\n  }\n};\n\nfunction getPrice(type, data) {\n  let tokenIdForCoingeckoAPI;\n  tokenIdForCoingeckoAPI = data.coinGeckoId;\n  if (!type) {\n    getErc20Balance(data.address, state.sender, data.decimals, data.name);\n  }\n  let dataUrl = `https://api.coingecko.com/api/v3/coins/${tokenIdForCoingeckoAPI}`;\n  asyncFetch(dataUrl).then((res) => {\n    const tokenData = res.body;\n    const price = Number(tokenData.market_data.current_price.usd);\n    if (\n      (state.tokenSendSelected != null || type) &&\n      (state.tokenRecieveSelected != null || !type)\n    ) {\n      type\n        ? State.update({ rate: price / state.tokenRecieveSelected.price })\n        : State.update({ rate: state.tokenSendSelected.price / price });\n    }\n    type\n      ? State.update({ tokenSendSelected: { price: price, ...data } })\n      : State.update({ tokenRecieveSelected: { price: price, ...data } });\n  });\n}\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    switchNetwork();\n  }\n}\n\nconst handleSendSelect = (data) => {\n  const token = TOKENS.find((token) => token.name === data.target.value);\n  getPrice(true, token);\n};\n\nconst handleRecieveSelect = (data) => {\n  const token = TOKENS.find((token) => token.name === data.target.value);\n  getPrice(false, token);\n};\n\nconst cantSwap = () => {\n  return (\n    state.tokenSendSelected && state.tokenRecieveSelected && state.amountInput\n  );\n};\n\nconst isSufficientBalance = () => {\n  if (!state.amountInput) {\n    return true;\n  } else if (state.amountInput > state.inputBalance) {\n    return false;\n  }\n  return true;\n};\n\nconst confirmTransaction = () => {\n  console.log(\"Confirmando transacci\u00f3n\");\n};\n\nconst css = fetch(\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/widget.css\"\n).body;\n\nif (!css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    ${css}\n`,\n  });\n}\nconst Theme = state.theme;\nreturn (\n  <Theme>\n    <div class=\"text-center mt-1\">\n      <div class=\"MainContainer\">\n        <div class=\"ProtocolContainer\">\n          <div class=\"ProtocolNetworkContainet\">\n            <div class=\"ProtocolNetworkTextSection\">\n              <div class=\"ProtocolText\">PROTOCOL</div>\n            </div>\n            <div class=\"ProtocolNetworkSection\">\n              <div class=\"ProtocolNetworkContainer\">\n                <img\n                  class=\"ProtocolImg\"\n                  src=\"https://etherscan.io/token/images/maverick_32.png\"\n                />\n                <div class=\"NetworkText\">Maverick</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"SendRecieveContainer\">\n          <div class=\"SendContainer\">\n            <div class=\"TokenSection\">\n              {state.tokenSendSelected ? (\n                <img class=\"TokenImg\" src={state.tokenSendSelected.icon} />\n              ) : null}\n\n              <div class=\"TokenNameSection\">\n                <div class=\"TokenAction\">SEND {\"->\"}</div>\n                <select\n                  class=\"TokenNameSelect\"\n                  select={state.tokenSendSelected}\n                  onChange={handleSendSelect}\n                >\n                  {!state.tokenSendSelected ? (\n                    <option>Select Token</option>\n                  ) : null}\n                  {TOKENS.map((token) => {\n                    return (\n                      <>\n                        <option>{token.name}</option>\n                      </>\n                    );\n                  })}\n                </select>\n              </div>\n            </div>\n            <div class=\"TokenAmountSection\">\n              <input\n                class=\"TokenAmountInput\"\n                type=\"text\"\n                placeholder=\"0\"\n                inputmode=\"decimal\"\n                min=\"0\"\n                pattern=\"^[0-9]*[.]?[0-9]*$\"\n                value={state.amountInput}\n                onChange={(e) => State.update({ amountInput: e.target.value })}\n              />\n              <div class=\"TokenAmountPreview\">\n                {state.inputBalance != null\n                  ? `Balance: ${\n                      state.inputBalance\n                        ? parseFloat(state.inputBalance).toFixed(6)\n                        : \"\"\n                    }`\n                  : \"\"}\n              </div>\n              {!isSufficientBalance() ? (\n                <div class=\"TokenInsufficientBalance\">Insufficient Balance</div>\n              ) : null}\n            </div>\n          </div>\n          <div class=\"RecieveContainer\">\n            <div class=\"TokenSection\">\n              {state.tokenRecieveSelected ? (\n                <img class=\"TokenImg\" src={state.tokenRecieveSelected.icon} />\n              ) : null}\n\n              <div class=\"TokenNameSection\">\n                <div class=\"TokenAction\">{\"->\"} RECEIVE</div>\n                <select\n                  class=\"TokenNameSelect\"\n                  select={state.tokenRecieveSelected}\n                  onChange={handleRecieveSelect}\n                >\n                  {!state.tokenRecieveSelected ? (\n                    <option>Select Token</option>\n                  ) : null}\n                  {TOKENS.map((token) => {\n                    return (\n                      <>\n                        <option>{token.name}</option>\n                      </>\n                    );\n                  })}\n                </select>\n              </div>\n            </div>\n            <div class=\"TokenAmountSection\">\n              <div class=\"TokenAmount\">\n                {(state.amountInput * state.rate).toFixed(6)}\n              </div>\n              <div class=\"TokenAmountPreview\">\n                {state.rate != 0\n                  ? `${(\n                      state.amountInput * state.tokenSendSelected.price\n                    ).toFixed(6)} USD`\n                  : \"\"}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"FeesContainer\">\n          <div class=\"Line\" />\n          <div class=\"RateFeeContainer\">\n            <div class=\"RateFeeText\">Rate</div>\n            <div class=\"RateFeeValue\">\n              {state.rate != 0\n                ? `1 ${state.tokenSendSelected.name} = ${state.rate.toFixed(6)}\n              ${state.tokenRecieveSelected.name}`\n                : \"\"}\n            </div>\n          </div>\n          <div class=\"RateFeeContainer\">\n            <div class=\"RateFeeText\">Network fee</div>\n            <div class=\"RateFeeValue\">Fast \u2022 $15.41</div>\n          </div>\n          <div class=\"RateFeeContainer\">\n            <div class=\"RateFeeText\">zkSync fee</div>\n            <div class=\"RateFeeValue\">0.5%</div>\n          </div>\n        </div>\n        <div class=\"ConfirmContainer\">\n          {state.sender ? (\n            <div\n              class={\n                cantSwap() && isSufficientBalance()\n                  ? \"ConfirmButton\"\n                  : \"ConfirmButtonDisabled\"\n              }\n              onClick={async () => {\n                confirmTransaction();\n              }}\n            >\n              <div\n                class={\n                  cantSwap() && isSufficientBalance()\n                    ? \"ConfirmText\"\n                    : \"ConfirmTextDisabled\"\n                }\n              >\n                {cantSwap()\n                  ? isSufficientBalance()\n                    ? \"Confirm\"\n                    : \"Insufficient Balance\"\n                  : \"Select a Pair and Amount\"}\n              </div>\n            </div>\n          ) : (\n            <Web3Connect\n              className=\"ConfirmButton ConfirmText\"\n              connectLabel=\"Connect Wallet\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/yairnava.near/widget/Maverick-Swap", "fact_widget_deployments_id": "ae85f41ca3d733b5bf5be19ee3c82912", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 32}