{"tx_hash": "EZArqgQnVWPpeFyQr6mNjTsLf7PU49VMDG5qo8H6C1So", "action_id_social": "AZWDAUy7cNNt96mBiim313D8UdxwGhWThA3eAwBqUwD1-0-widget", "block_id": 98455808, "block_timestamp": "2023-08-10T00:16:49.657Z", "signer_id": "yairnava.near", "widget_name": "Maverick-Swap", "source_code": "const TOKENS = [\n  {\n    name: \"ETH\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/eth.svg\",\n    address: \"0x000000000000000000000000000000000000800A\",\n    coinGeckoId: \"ethereum\",\n    decimals: 18,\n  },\n  {\n    name: \"USDC\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/usdc.svg\",\n    address: \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\",\n    coinGeckoId: \"usd-coin\",\n    decimals: 6,\n  },\n  {\n    name: \"MUTE\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/mute.svg\",\n    address: \"0x0e97C7a0F8B2C9885C8ac9fC6136e829CbC21d42\",\n    coinGeckoId: \"mute\",\n    decimals: 18,\n  },\n  {\n    name: \"COMBO\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/combo.svg\",\n    address: \"0xc2B13Bb90E33F1E191b8aA8F44Ce11534D5698E3\",\n    coinGeckoId: \"furucombo\",\n    decimals: 18,\n  },\n  {\n    name: \"PERP\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/perp.svg\",\n    address: \"0x42c1c56be243c250AB24D2ecdcC77F9cCAa59601\",\n    coinGeckoId: \"perpetual-protocol\",\n    decimals: 18,\n  },\n  {\n    name: \"LUSD\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/lusd.svg\",\n    address: \"0x503234F203fC7Eb888EEC8513210612a43Cf6115\",\n    coinGeckoId: \"liquity-usd\",\n    decimals: 18,\n  },\n  {\n    name: \"DVF\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/dvf.svg\",\n    address: \"0xBbD1bA24d589C319C86519646817F2F153c9B716\",\n    coinGeckoId: \"rhinofi\",\n    decimals: 18,\n  },\n  {\n    name: \"WOO\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/woo.svg\",\n    address: \"0x9E22D758629761FC5708c171d06c2faBB60B5159\",\n    coinGeckoId: \"woo-network\",\n    decimals: 18,\n  },\n  {\n    name: \"DERI\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/deri.svg\",\n    address: \"0x140D5bc5b62d6cB492B1A475127F50d531023803\",\n    coinGeckoId: \"deri-protocol\",\n    decimals: 18,\n  },\n  {\n    name: \"DEXTF\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/dextf.svg\",\n    address: \"0x9929bCAC4417A21d7e6FC86F6Dae1Cc7f27A2e41\",\n    coinGeckoId: \"dextf\",\n    decimals: 18,\n  },\n  {\n    name: \"GOVI\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/govi.svg\",\n    address: \"0xD63eF5e9C628c8a0E8984CDfb7444AEE44B09044\",\n    coinGeckoId: \"govi\",\n    decimals: 18,\n  },\n  {\n    name: \"1INCH\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/1inch.svg\",\n    address: \"0x3f0B8B206A7FBdB3ecFc08c9407CA83F5aB1Ce59\",\n    coinGeckoId: \"1inch\",\n    decimals: 18,\n  },\n  {\n    name: \"PEPE\",\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/pepe.svg\",\n    address: \"0xFD282F16a64c6D304aC05d1A58Da15bed0467c71\",\n    coinGeckoId: \"pepe\",\n    decimals: 18,\n  },\n];\n\nconst POOLS = [\n  { name: \"ETH-USDC\", address: \"0x41C8cf74c27554A8972d3bf3D2BD4a14D8B604AB\" },\n  { name: \"ETH-MUTE\", address: \"0x83c90b99FDF00b6203529fF6F2354a57E9F6EeC5\" },\n  { name: \"ETH-COMBO\", address: \"\" },\n  { name: \"ETH-PERP\", address: \"\" },\n  { name: \"ETH-LUSD\", address: \"0xB1338207DE233aE6a9A6D63309221b577F8Cd6E8\" },\n  { name: \"ETH-DVF\", address: \"\" },\n  { name: \"ETH-WOO\", address: \"\" },\n  { name: \"ETH-DERI\", address: \"\" },\n  { name: \"ETH-DEXTF\", address: \"\" },\n  { name: \"ETH-GOVI\", address: \"\" },\n  { name: \"ETH-1INCH\", address: \"\" },\n  { name: \"ETH-PEPE\", address: \"\" },\n  { name: \"USDC-MUTE\", address: \"0xF4bc5bf7cc54a48b6c0ABFafa2836376e10eccE9\" },\n  { name: \"USDC-COMBO\", address: \"\" },\n  { name: \"USDC-PERP\", address: \"\" },\n  { name: \"USDC-LUSD\", address: \"0x6A9143A5f9BaF73841992DCB737844e5ad16A283\" },\n  { name: \"USDC-DVF\", address: \"\" },\n  { name: \"USDC-WOO\", address: \"\" },\n  { name: \"USDC-DERI\", address: \"\" },\n  { name: \"USDC-DEXTF\", address: \"\" },\n  { name: \"USDC-GOVI\", address: \"\" },\n  { name: \"USDC-1INCH\", address: \"\" },\n  { name: \"USDC-PEPE\", address: \"\" },\n  { name: \"MUTE-COMBO\", address: \"\" },\n  { name: \"MUTE-PERP\", address: \"\" },\n  { name: \"MUTE-LUSD\", address: \"\" },\n  { name: \"MUTE-DVF\", address: \"\" },\n  { name: \"MUTE-WOO\", address: \"\" },\n  { name: \"MUTE-DERI\", address: \"\" },\n  { name: \"MUTE-DEXTF\", address: \"\" },\n  { name: \"MUTE-GOVI\", address: \"\" },\n  { name: \"MUTE-1INCH\", address: \"\" },\n  { name: \"MUTE-PEPE\", address: \"\" },\n  { name: \"COMBO-PERP\", address: \"\" },\n  { name: \"COMBO-LUSD\", address: \"\" },\n  { name: \"COMBO-DVF\", address: \"\" },\n  { name: \"COMBO-WOO\", address: \"\" },\n  { name: \"COMBO-DERI\", address: \"\" },\n  { name: \"COMBO-DEXTF\", address: \"\" },\n  { name: \"COMBO-GOVI\", address: \"\" },\n  { name: \"COMBO-1INCH\", address: \"\" },\n  { name: \"COMBO-PEPE\", address: \"\" },\n  { name: \"PERP-LUSD\", address: \"\" },\n  { name: \"PERP-DVF\", address: \"\" },\n  { name: \"PERP-WOO\", address: \"\" },\n  { name: \"PERP-DERI\", address: \"\" },\n  { name: \"PERP-DEXTF\", address: \"\" },\n  { name: \"PERP-GOVI\", address: \"\" },\n  { name: \"PERP-1INCH\", address: \"\" },\n  { name: \"PERP-PEPE\", address: \"\" },\n  { name: \"LUSD-DVF\", address: \"\" },\n  { name: \"LUSD-WOO\", address: \"\" },\n  { name: \"LUSD-DERI\", address: \"\" },\n  { name: \"LUSD-DEXTF\", address: \"\" },\n  { name: \"LUSD-GOVI\", address: \"\" },\n  { name: \"LUSD-1INCH\", address: \"\" },\n  { name: \"LUSD-PEPE\", address: \"\" },\n  { name: \"DVF-WOO\", address: \"\" },\n  { name: \"DVF-DERI\", address: \"\" },\n  { name: \"DVF-DEXTF\", address: \"\" },\n  { name: \"DVF-GOVI\", address: \"\" },\n  { name: \"DVF-1INCH\", address: \"\" },\n  { name: \"DVF-PEPE\", address: \"\" },\n  { name: \"WOO-DERI\", address: \"\" },\n  { name: \"WOO-DEXTF\", address: \"\" },\n  { name: \"WOO-GOVI\", address: \"\" },\n  { name: \"WOO-1INCH\", address: \"\" },\n  { name: \"WOO-PEPE\", address: \"\" },\n  { name: \"DERI-DEXTF\", address: \"\" },\n  { name: \"DERI-GOVI\", address: \"\" },\n  { name: \"DERI-1INCH\", address: \"\" },\n  { name: \"DERI-PEPE\", address: \"\" },\n  { name: \"DEXTF-GOVI\", address: \"\" },\n  { name: \"DEXTF-1INCH\", address: \"\" },\n  { name: \"DEXTF-PEPE\", address: \"\" },\n  { name: \"GOVI-1INCH\", address: \"\" },\n  { name: \"GOVI-PEPE\", address: \"\" },\n  { name: \"1INCH-PEPE\", address: \"\" },\n];\n\nState.init({\n  tokenSendSelected: null,\n  tokenRecieveSelected: null,\n  amountInput: null,\n  amountRecieve: 0,\n  rate: 0,\n  routerContract: \"0x39E098A153Ad69834a9Dac32f0FCa92066aD03f4\",\n});\n\nconst switchNetwork = () => {\n  let chainId = 324;\n  try {\n    Ethers.send(\"wallet_switchEthereumChain\", [{ chainId: `0x${chainId}` }]);\n  } catch (err) {\n    console.log(err);\n    Ethers.send(\"wallet_addEthereumChain\", [\n      {\n        chainId: \"324\",\n        chainName: \"zkSync Era Mainnet\",\n        rpcUrls: [\"https://mainnet.era.zksync.io\"],\n        blockExplorerUrls: [\"https://explorer.zksync.io/\"],\n        nativeCurrency: {\n          symbol: \"\",\n          decimals: 18,\n        },\n      },\n    ]);\n  }\n};\n\nconst getErc20Balance = (tokenId, receiver, decimals, asset) => {\n  if (state.sender === undefined) {\n    return;\n  }\n  if (asset == \"ETH\") {\n    Ethers.provider()\n      .getBalance(state.sender)\n      .then((balance) => {\n        State.update({\n          inputBalance: parseFloat(\n            ethers.utils.formatUnits(balance, decimals)\n          ).toFixed(6),\n          unFixedInputBalance: balance.toHexString(),\n        });\n      });\n  } else {\n    asyncFetch(\n      \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n    )\n      .catch((res) => {\n        console.log(err);\n      })\n      .then((res) => {\n        const contract = new ethers.Contract(\n          tokenId,\n          res.body,\n          Ethers.provider().getSigner()\n        );\n        contract.balanceOf(receiver).then((res) => {\n          let balance = ethers.utils.formatUnits(res, decimals);\n          State.update({\n            inputBalance: parseFloat(balance).toFixed(6),\n            unFixedInputBalance: res.toHexString(),\n          });\n        });\n      });\n  }\n};\n\nfunction getPrice(type, data) {\n  let tokenIdForCoingeckoAPI;\n  tokenIdForCoingeckoAPI = data.coinGeckoId;\n  if (type) {\n    getErc20Balance(data.address, state.sender, data.decimals, data.name);\n  }\n  let dataUrl = `https://api.coingecko.com/api/v3/coins/${tokenIdForCoingeckoAPI}`;\n  asyncFetch(dataUrl).then((res) => {\n    const tokenData = res.body;\n    const price = Number(tokenData.market_data.current_price.usd);\n    if (\n      (state.tokenSendSelected != null || type) &&\n      (state.tokenRecieveSelected != null || !type)\n    ) {\n      type\n        ? State.update({ rate: price / state.tokenRecieveSelected.price })\n        : State.update({ rate: state.tokenSendSelected.price / price });\n    }\n    type\n      ? State.update({ tokenSendSelected: { price: price, ...data } })\n      : State.update({ tokenRecieveSelected: { price: price, ...data } });\n  });\n}\n\nconst tokenInApprovaleNeededCheck = (data) => {\n  if (data.name == \"ETH\") {\n    State.update({\n      approvalNeeded: false,\n    });\n  } else {\n    asyncFetch(\n      \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n    ).then((res) => {\n      const ifaceErc20 = new ethers.utils.Interface(res.body);\n      const encodedTokenAllowancesData = ifaceErc20.encodeFunctionData(\n        \"allowance\",\n        [state.sender, state.routerContract]\n      );\n      return Ethers.provider()\n        .call({\n          to: data.address,\n          data: encodedTokenAllowancesData,\n        })\n        .then((encodedTokenAllowanceHex) => {\n          const tokenAllowance = ifaceErc20.decodeFunctionResult(\n            \"allowance\",\n            encodedTokenAllowanceHex\n          );\n          if (tokenAllowance) {\n            console.log(\"Necesita approval\");\n            State.update({\n              approvalNeeded: new Big(tokenAllowance).toFixed() == \"0\",\n            });\n          } else {\n            State.update({\n              approvalNeeded: false,\n            });\n          }\n        });\n    });\n  }\n};\n\nconst approveErc20Token = () => {\n  asyncFetch(\n    \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n  ).then((res) => {\n    const value = state.unFixedInputBalance;\n\n    const approveContract = new ethers.Contract(\n      state.tokenSendSelected.address,\n      res.body,\n      Ethers.provider().getSigner()\n    );\n\n    let gasArgs = {};\n\n    if (gweiPrice !== undefined && gasLimit !== undefined) {\n      gasArgs.gasPrice = ethers.utils.parseUnits(gweiPrice ?? \"0.26\", \"gwei\");\n      gasArgs.gasLimit = gasLimit ?? 20000000;\n    }\n\n    approveContract\n      .approve(state.routerContract, value, gasArgs)\n      .then((transactionHash) => {\n        console.log(transactionHash);\n      });\n  });\n};\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    switchNetwork();\n  }\n}\n\nconst handleSendSelect = (data) => {\n  const token = TOKENS.find((token) => token.name === data.target.value);\n  getPrice(true, token);\n  tokenInApprovaleNeededCheck(token);\n};\n\nconst handleRecieveSelect = (data) => {\n  const token = TOKENS.find((token) => token.name === data.target.value);\n  getPrice(false, token);\n};\n\nconst turnTokens = () => {\n  const tokenSendSelected = state.tokenSendSelected;\n  const tokenRecieveSelected = state.tokenRecieveSelected;\n  if (tokenSendSelected && tokenRecieveSelected) {\n    State.update({ tokenSendSelected: null });\n    State.update({ tokenRecieveSelected: null });\n    setTimeout(() => {\n      State.update({ tokenSendSelected: tokenRecieveSelected });\n      State.update({ tokenRecieveSelected: tokenSendSelected });\n      getPrice(true, tokenRecieveSelected);\n      tokenInApprovaleNeededCheck(tokenRecieveSelected);\n    });\n  }\n};\n\nconst cantSwap = () => {\n  return (\n    state.tokenSendSelected && state.tokenRecieveSelected && state.amountInput\n  );\n};\n\nconst existPool = () => {\n  const poolName1 = `${state.tokenSendSelected.name}-${state.tokenRecieveSelected.name}`;\n  const poolName2 = `${state.tokenRecieveSelected.name}-${state.tokenSendSelected.name}`;\n\n  if (!state.tokenSendSelected.name || !state.tokenRecieveSelected.name) {\n    return true;\n  }\n\n  const pool = POOLS.find((p) => p.name === poolName1 || p.name === poolName2);\n\n  if (pool && pool.address != \"\") {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSufficientBalance = () => {\n  if (!state.amountInput) {\n    return true;\n  } else if (state.amountInput > state.inputBalance) {\n    return false;\n  }\n  return true;\n};\n\nconst setMaxBalance = () => {\n  if (state.inputBalance > 0) {\n    State.update({ amountInput: state.inputBalance });\n  }\n};\n\nconst confirmTransaction = () => {\n  console.log(\"Swap\");\n};\n\nconst css = fetch(\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/widget.css\"\n).body;\n\nif (!css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    ${css}\n`,\n  });\n}\n\nconst Theme = state.theme;\nreturn (\n  <Theme>\n    <div class=\"text-center mt-1\">\n      <div class=\"MainContainer\">\n        <div class=\"ProtocolContainer\">\n          <div class=\"ProtocolNetworkContainet\">\n            <div class=\"ProtocolNetworkTextSection\">\n              <div class=\"ProtocolText\">PROTOCOL</div>\n            </div>\n            <div class=\"ProtocolNetworkSection\">\n              <div class=\"ProtocolNetworkContainer\">\n                <img\n                  class=\"ProtocolImg\"\n                  src=\"https://etherscan.io/token/images/maverick_32.png\"\n                />\n                <div class=\"NetworkText\">Maverick</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"titleSection\">\n          <div class=\"titleSwap\">SWAP</div>\n        </div>\n        <div class=\"SendRecieveContainer\">\n          <div class=\"SendContainer\">\n            <div class=\"TokenSection\">\n              {state.tokenSendSelected ? (\n                <img class=\"TokenImg\" src={state.tokenSendSelected.icon} />\n              ) : null}\n\n              <div class=\"TokenNameSection\">\n                <div class=\"TokenAction\">SEND {\"->\"}</div>\n                <select\n                  class=\"TokenNameSelect\"\n                  select={state.tokenSendSelected || \"default\"}\n                  onChange={handleSendSelect}\n                >\n                  <option value=\"default\" disabled={state.tokenSendSelected}>\n                    Select Token\n                  </option>\n                  {TOKENS.map((token) => {\n                    return (\n                      <>\n                        {state.tokenRecieveSelected.name != token.name && (\n                          <option>{token.name}</option>\n                        )}\n                      </>\n                    );\n                  })}\n                </select>\n              </div>\n            </div>\n            <div class=\"TokenAmountSection\">\n              <input\n                class=\"TokenAmountInput\"\n                type=\"text\"\n                placeholder=\"0\"\n                inputmode=\"decimal\"\n                min=\"0\"\n                pattern=\"^[0-9]*[.]?[0-9]*$\"\n                value={state.amountInput}\n                onChange={(e) => State.update({ amountInput: e.target.value })}\n              />\n              <div class=\"TokenAmountPreview\">\n                {state.inputBalance != null ? (\n                  state.inputBalance && state.inputBalance > 0 ? (\n                    <span>\n                      Balance: {state.inputBalance}\n                      <span\n                        class=\"UserBalance\"\n                        onClick={async () => {\n                          setMaxBalance();\n                        }}\n                      >\n                        MAX\n                      </span>\n                    </span>\n                  ) : (\n                    \"Balance: 0\"\n                  )\n                ) : (\n                  \"Balance: 0\"\n                )}\n              </div>\n              {!isSufficientBalance() ? (\n                <div class=\"TokenInsufficientBalance\">Insufficient Balance</div>\n              ) : null}\n            </div>\n          </div>\n          <div class=\"turnSection\">\n            <button\n              type=\"button\"\n              class=\"turnButton\"\n              onClick={async () => {\n                turnTokens();\n              }}\n            >\n              <svg\n                class=\"turnImg\"\n                focusable=\"false\"\n                aria-hidden=\"true\"\n                viewBox=\"0 0 24 24\"\n                data-testid=\"ArrowsUpDownIcon\"\n              >\n                <path d=\"M11.95 7.95l-1.414 1.414L8 6.828 8 20H6V6.828L3.465 9.364 2.05 7.95 7 3l4.95 4.95zm10 8.1L17 21l-4.95-4.95 1.414-1.414 2.537 2.536L16 4h2v13.172l2.536-2.536 1.414 1.414z\"></path>\n              </svg>\n            </button>\n          </div>\n          <div class=\"RecieveContainer\">\n            <div class=\"TokenSection\">\n              {state.tokenRecieveSelected ? (\n                <img class=\"TokenImg\" src={state.tokenRecieveSelected.icon} />\n              ) : null}\n\n              <div class=\"TokenNameSection\">\n                <div class=\"TokenAction\">{\"->\"} RECEIVE</div>\n                <select\n                  class=\"TokenNameSelect\"\n                  select={state.tokenRecieveSelected || \"default\"}\n                  onChange={handleRecieveSelect}\n                >\n                  <option value=\"default\" disabled={state.tokenRecieveSelected}>\n                    Select Token\n                  </option>\n                  {TOKENS.map((token) => {\n                    return (\n                      <>\n                        {state.tokenSendSelected.name != token.name && (\n                          <option>{token.name}</option>\n                        )}\n                      </>\n                    );\n                  })}\n                </select>\n              </div>\n            </div>\n            <div class=\"TokenAmountSection\">\n              <div class=\"TokenAmount\">\n                {(\n                  state.amountInput * parseFloat(state.rate).toFixed(6)\n                ).toFixed(6)}\n              </div>\n              <div class=\"TokenAmountPreview\">\n                {state.rate != 0\n                  ? `${\n                      \"\u2248 \" +\n                      (\n                        state.amountInput * state.tokenSendSelected.price\n                      ).toFixed(6)\n                    } USD`\n                  : \"\"}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"FeesContainer\">\n          <div class=\"Line\" />\n          <div class=\"RateFeeContainer\">\n            <div class=\"RateFeeText\">Rate</div>\n            <div class=\"RateFeeValue\">\n              {state.rate != 0\n                ? `1 ${state.tokenSendSelected.name} \u2248 ${state.rate.toFixed(6)}\n              ${state.tokenRecieveSelected.name}`\n                : \"\"}\n            </div>\n          </div>\n          <div class=\"RateFeeContainer\">\n            <div class=\"RateFeeText\">Network fee</div>\n            <div class=\"RateFeeValue\">Fast \u2022 $15.41</div>\n          </div>\n          <div class=\"RateFeeContainer\">\n            <div class=\"RateFeeText\">zkSync fee</div>\n            <div class=\"RateFeeValue\">0.5%</div>\n          </div>\n        </div>\n        <div class=\"ConfirmContainer\">\n          {state.sender ? (\n            state.approvalNeeded ? (\n              <div\n                class={\"ConfirmButton\"}\n                onClick={async () => {\n                  approveErc20Token();\n                }}\n              >\n                <div class={\"ConfirmText\"}>\n                  {`Approve ${state.tokenSendSelected.name}`}\n                </div>\n              </div>\n            ) : cantSwap() && isSufficientBalance() && existPool() ? (\n              <div\n                class={\"ConfirmButton\"}\n                onClick={async () => {\n                  confirmTransaction();\n                }}\n              >\n                <div class={\"ConfirmText\"}>Confirm</div>\n              </div>\n            ) : (\n              <div class={\"ConfirmButtonDisabled\"}>\n                <div class={\"ConfirmTextDisabled\"}>\n                  {existPool()\n                    ? isSufficientBalance()\n                      ? \"Select a Pair and Amount\"\n                      : \"Insufficient Balance\"\n                    : \"Pool Not Deployed\"}\n                </div>\n              </div>\n            )\n          ) : (\n            <Web3Connect\n              className=\"ConfirmButton ConfirmText\"\n              connectLabel=\"Connect Wallet\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/yairnava.near/widget/Maverick-Swap", "fact_widget_deployments_id": "5cde0d88f4e5710a2ef5c6745e4fa6d6", "inserted_timestamp": "2023-08-10T01:52:02.415Z", "modified_timestamp": "2023-08-10T01:52:02.415Z", "__row_index": 3}