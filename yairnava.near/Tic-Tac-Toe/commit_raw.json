{"tx_hash": "HUoCWZSGE5hrun3XLBYNsuS6tgAKuUS5Bh7DnKqKNkQ3", "action_id_social": "5f4gWDcX8zHbMRXXkoPWvoBVPbrUaiBEA3zB8E8GNr5k-0-widget", "block_id": 100100545, "block_timestamp": "2023-08-31T19:24:56.602Z", "signer_id": "yairnava.near", "widget_name": "Tic-Tac-Toe", "source_code": "const SquareButton = styled.button`\n  background: #fff;\n  border: 1px solid black;\n  float: left;\n  font-size: 24px;\n  line-height: 34px;\n  height: 50px;\n  margin-right: -1px;\n  margin-top: -1px;\n  padding: 0;\n  text-align: center;\n  width: 50px;\n`;\n\nconst borderRow = {\n  clear: \"both\",\n  content: \"\",\n  display: \"table\",\n  opacity: \"0.7\"\n};\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction getEmptySquares(squares) {\n  return squares\n    .map((square, index) => (square === null ? index : null))\n    .filter((index) => index !== null);\n}\n\nfunction getRandomMove(emptySquares) {\n  const randomIndex = Math.floor(Math.random() * emptySquares.length);\n  return emptySquares[randomIndex];\n}\n\nState.init({\n  squares: Array(9).fill(null),\n  xIsNext: true,\n  winner: null,\n});\n\nfunction handleClick(i) {\n  const squares = state.squares.slice();\n  if (calculateWinner(squares) || squares[i]) {\n    return;\n  }\n  squares[i] = state.xIsNext ? \"X\" : \"O\";\n  State.update({\n    squares: squares,\n    xIsNext: !state.xIsNext,\n  });\n\n  const winner = calculateWinner(state.squares);\n\n  // CPU's turn\n  if (!state.xIsNext && !winner) {\n    setTimeout(() => {\n      const emptySquares = getEmptySquares(squares);\n      if (emptySquares.length > 0) {\n        // Check for winning move\n        for (let i = 0; i < emptySquares.length; i++) {\n          const cloneSquares = squares.slice();\n          cloneSquares[emptySquares[i]] = \"O\";\n          if (calculateWinner(cloneSquares) === \"O\") {\n            squares[emptySquares[i]] = \"O\";\n            State.update({\n              squares: squares,\n              xIsNext: !state.xIsNext,\n            });\n            return;\n          }\n        }\n\n        // Check for blocking player's winning move\n        for (let i = 0; i < emptySquares.length; i++) {\n          const cloneSquares = squares.slice();\n          cloneSquares[emptySquares[i]] = \"X\";\n          if (calculateWinner(cloneSquares) === \"X\") {\n            squares[emptySquares[i]] = \"O\";\n            State.update({\n              squares: squares,\n              xIsNext: !state.xIsNext,\n            });\n            return;\n          }\n        }\n\n        // Make a random move if no winning or blocking move found\n        if (emptySquares.length > 0) {\n          const randomMove = getRandomMove(emptySquares);\n          squares[randomMove] = \"O\";\n          State.update({\n            squares: squares,\n            xIsNext: !state.xIsNext,\n          });\n        }\n      }\n    }, 1000);\n  }\n}\n\nfunction renderSquare(i) {\n  return (\n    <SquareButton onClick={() => handleClick(i)}>\n      {state.squares[i]}\n    </SquareButton>\n  );\n}\n\nconst winner = calculateWinner(state.squares);\nconst emptySquares = getEmptySquares(state.squares);\nif (winner) {\n  State.update({\n    winner: winner,\n    status: \"Winner: \" + (winner === \"X\" ? \"Player\" : \"CPU\"),\n  });\n} else if (emptySquares.length === 0) {\n  console.log(\"It's a draw!\");\n  State.update({\n    status: \"It's a draw!\",\n  });\n} else {\n  State.update({\n    status: \"Turn: \" + (state.xIsNext ? \"Player\" : \"CPU\"),\n  });\n}\n\nreturn (\n  <div\n    style={{\n      width: \"100%\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      width: \"100%\",\n      height: \"308px\",\n      backgroundImage: \"url(https://raw.githubusercontent.com/yaairnaavaa/Burrito-Virtual-Pet/main/gameboyverde.png)\",\n      backgroundRepeat: \"no-repeat\",\n      backgroundSize: \"370px\",\n      backgroundPosition: \"top\"\n    }}\n  >\n    <div\n      style={{\n        textAlign: \"center\",\n        marginTop: \"83px\"\n      }}\n    >\n      <div style={borderRow}>\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div style={borderRow}>\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div style={borderRow}>\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n      <div style={{\n        marginTop: \"5px\",\n        fontSize: \"9px\",\n        color: \"white\"\n      }}>\n        {state.status}\n      </div>\n      <div\n        style={{\n          marginTop: \"7px\",\n        }}\n      >\n        <button\n          className=\"btn bg-dark btn-sm text-white\"\n          onClick={() =>\n            State.update({\n              squares: Array(9).fill(null),\n              xIsNext: true,\n              winner: null,\n              status: null,\n            })\n          }\n        >\n          Reset Game\n        </button>\n      </div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/yairnava.near/widget/Tic-Tac-Toe", "fact_widget_deployments_id": "9f24006a1f40605885bd84c4bcfc95ec", "inserted_timestamp": "2023-08-31T21:26:45.999Z", "modified_timestamp": "2023-08-31T21:26:45.999Z", "__row_index": 13}