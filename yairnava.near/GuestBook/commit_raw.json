{"tx_hash": "4W9fUjkpi7zZZsT67VsnrT6ieECbyPaH6evjRF6itsxD", "action_id_social": "9xY5rCPMgyHpjZFL4FhmzxsSWiVJMy8ZvhYvN63bUfQG-0-widget", "block_id": 114704425, "block_timestamp": "2024-03-14T17:02:14.265Z", "signer_id": "yairnava.near", "widget_name": "GuestBook", "source_code": "// Definition of the smart contract address.\nconst contract = \"guest-book.near\";\n\n// Hooks declaration to store the necessary information in the state of the component.\nconst [messages, setMessages] = useState([]);\nconst [newMessage, setNewMessages] = useState(\"\");\nconst [newDeposit, setNewDeposit] = useState(0);\n\n// Get the contract information after rendering.\nuseEffect(() => {\n  // Call the getMessages method of the smart contract\n  const data = Near.view(contract, \"getMessages\", {}).reverse();\n  // Assignment the information obtained from the contract to the messages property of the state.\n  setMessages(data);\n}, []);\n\n// Function to add a new message to the guestbook.\nconst addNewMessage = () => {\n  // It validates that the new message is not empty before adding it.\n  if (newMessage.trim() == \"\") {\n    return;\n  }\n\n  // The smart contract is called to add a new message, along with the text and the deposit.\n  Near.call(\n    contract,\n    \"addMessage\",\n    {\n      text: newMessage,\n    },\n    \"30000000000000\",\n    newDeposit * 1e24\n  );\n};\n\n// Rendering of the component making use of the messages retrieved from the smart contract to display them,\n// as well as the assignment of the methods to change the values to the corresponding state property\n// and the call to the method to save a new message to the corresponding button.\nreturn (\n  <div class=\"p-3\">\n    <h3 class=\"text-center\">Guest Book (BOS + NEAR)</h3>\n    <br />\n    {context.accountId ? (\n      <div class=\"border border-black p-3\">\n        <h3>New Message</h3>\n        <div class=\"row\">\n          <div class=\"col-sm\">\n            <input\n              placeholder=\"Message\"\n              onChange={(e) => setNewMessages(e.target.value)}\n            />\n          </div>\n          <div class=\"col-sm\">\n            <input\n              type=\"number\"\n              min=\"0\"\n              placeholder=\"Deposit\"\n              onChange={(e) => setNewDeposit(e.target.value)}\n            />\n          </div>\n        </div>\n        <button\n          class=\"btn btn-primary mt-2\"\n          onClick={async () => {\n            addNewMessage();\n          }}\n        >\n          Send Message\n        </button>\n      </div>\n    ) : (\n      <p class=\"text-center py-2\">\n        Debes iniciar sesi\u00f3n para guardar un mensaje\n      </p>\n    )}\n    <br />\n    <div class=\"border border-black p-3\">\n      <h3>List of Messages</h3>\n      <table className=\"table table-sm\">\n        <thead>\n          <tr class=\"p-3 mb-2 bg-primary text-white text-center\">\n            <th>Account</th>\n            <th>Message</th>\n            <th>Premium</th>\n          </tr>\n        </thead>\n        <tbody>\n          {messages.map((data, key) => {\n            return (\n              <tr class=\"text-center\">\n                <td>{data.sender}</td>\n                <td>{data.text}</td>\n                <td>{data.premium ? \"Yes\" : \"No\"}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  </div>\n);\n", "metadata": {"fork_of": "yairnava.near/widget/GuestBook@114587016"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/yairnava.near/widget/GuestBook", "fact_widget_deployments_id": "93c1514eb2a52a16384beff3e4e3cc89", "inserted_timestamp": "2024-03-14T18:29:23.328Z", "modified_timestamp": "2024-03-14T18:29:23.328Z", "__row_index": 0}