{"tx_hash": "6CupsWfPBubLWNenpcoEegbhXm9eqpr4ZfWtLUMVHXh9", "action_id_social": "9Muauv5vQAZLmeZBnC68xSdBgTe5ryzZhv5vrCCrqAgC-0-widget", "block_id": 115455921, "block_timestamp": "2024-03-25T17:02:59.671Z", "signer_id": "alem-lib.near", "widget_name": "createDebounce", "source_code": "/**\n * Create a debounced method to obtain the data after the desired interval.\n *\n * Example of usage:\n * `\n * const { createDebounce } = VM.require('alem-lib.near/widget/createDebounce');\n * if (!createDebounce) return \"\";\n *\n * const [words, setWords] = useState('')\n * const onInputChange = createDebounce((event) => setWords(event.target.value), 1000);\n *\n * // This will be changed 1 sec after the user stops typing.\n * console.log(words);\n *\n * return <input onChange={onInputChange} type=\"text\" />;\n * `\n *\n * @param cb Callback\n * @param timeout Timeout. Default is 1 sec.\n * @returns\n */\nconst createDebounce = (cb, timeout) => {\n  let timer;\n  const _timeout = timeout || 1000;\n  return (args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      cb(args);\n    }, _timeout);\n  };\n};\n\nreturn {\n  createDebounce,\n};\n", "metadata": {"fork_of": "alem-lib.near/widget/createDebounce@115455730"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/alem-lib.near/widget/createDebounce", "fact_widget_deployments_id": "102ca9ff0870d6324c99ccad3dcfed10", "inserted_timestamp": "2024-03-25T18:34:32.872Z", "modified_timestamp": "2024-03-25T18:34:32.872Z", "__row_index": 1}