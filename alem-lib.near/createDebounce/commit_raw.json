{"tx_hash": "3gJAbBwqRssRC9mSknn2S3v8AiYo8yeYUNJk6c4ga1af", "action_id_social": "BUa2P9gqtNLvjtphcNmaxq1bv3s1UB15bNuUSVzFhefX-0-widget", "block_id": 115455730, "block_timestamp": "2024-03-25T16:58:49.522Z", "signer_id": "alem-lib.near", "widget_name": "createDebounce", "source_code": "/**\n * Create a debounced method to obtain the data after the desired interval.\n *\n * Example of usage:\n * `\n * const [words, setWords] = useState('')\n * const onInputChange = createDebounce((event) => setWords(event.target.value), 1000);\n *\n * // This will be changed 1 sec after the user stops typing.\n * console.log(words);\n *\n * return <input onChange={onInputChange} type=\"text\" />;\n * `\n *\n * @param cb Callback\n * @param timeout Timeout. Default is 1 sec.\n * @returns\n */\nconst createDebounce = (cb, timeout) => {\n  let timer;\n  const _timeout = timeout || 1000;\n  return (args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      cb(args);\n    }, _timeout);\n  };\n};\n\nreturn {\n  createDebounce,\n};\n", "metadata": {"fork_of": "wendersonpires.near/widget/HelloWorld@102475434"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/alem-lib.near/widget/createDebounce", "fact_widget_deployments_id": "b3f2e802b3b21151a410e6d53d1cd391", "inserted_timestamp": "2024-03-25T18:34:32.872Z", "modified_timestamp": "2024-03-25T18:34:32.872Z", "__row_index": 0}