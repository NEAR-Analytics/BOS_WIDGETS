
  /** Bundle generated by AlÃ©m Library v1.0.0-alpha.0 - See more here: https://github.com/wpdas/alem */
  /** Project repository: https://github.com/wpdas/alem-docs-web */
  const updateAlemState = (updatedState) => { State.update({ alem: { ...state.alem, ...updatedState, }, });};const alemState = () => state.alem ;const AlemStateInitialBody = { alem: { rootProps: props, alemConfig_maintainRouteWhenDeveloping: ":::MAINTAIN_ROUTE:::", alemEnvironment: "production", alemExternalStylesLoaded: false, alemExternalStylesBody: "", },};State.init(AlemStateInitialBody); const props = { ...props, alem: { ...state.alem, createRoute: (path, component) => ({ path, component }) , useParams: () => { let params = alemState().rootProps; return params; }, loadExternalStyles: (URLs) => { if (!URLs && !alemState().alemExternalStylesLoaded) { return; } let stylesBody = ""; const totalItems = URLs.length; let loadedCounter = 0; const loadStyle = (styleURL) => { asyncFetch(styleURL).then((response) => { stylesBody += response.body; loadedCounter += 1; if (loadedCounter === totalItems) { updateAlemState({ alemExternalStylesLoaded: true, alemExternalStylesBody: stylesBody, }); } }); }; URLs.forEach((styleURL) => { loadStyle(styleURL); }); return alemState().alemExternalStylesLoaded; }, promisify: ( caller, resolve, reject, _timeout, ) => { const timer = 100; const timeout = _timeout || 10000; let timeoutCheck = 0; const find = () => { const response = caller(); if (response !== undefined && response !== null) { resolve(response); } else { if (timeoutCheck < timeout) { setTimeout(find, timer); timeoutCheck += timer; } else { if (reject) { reject(); } } } }; find(); }, isDevelopment: alemState().alemEnvironment === "development", componentsCode: { Router: ` const { } = props; const { routes, type, parameterName, alem, alemRoutes, initialRoute } = props; useEffect(() => { routes.forEach((route) => { if (!route.component) { console.error(\`Routes: Invalid component for route "\${route.path}"\`); } }); }, [routes]); useEffect(() => { if (parameterName && parameterName !== alem.routeParameterName) { alemRoutes.updateRouteParameterName(parameterName); } }, []); const { routeParameterName, routeType, activeRoute } = alemRoutes; const routeParamName = parameterName || routeParameterName; const checkIfPathIsIncludedToRoutes = (routePath) => { let pathFound = false; if (routes) { routes.forEach((routeItem) => { if (pathFound) return; if (!pathFound) { pathFound = routeItem.path === routePath; } }); } return pathFound; }; useEffect(() => { const bosProps = alem.rootProps; const maintainRoutesWhenDeveloping = alem.isDevelopment && alem.alemConfig_maintainRouteWhenDeveloping; if (routes) { let currentUrlPath = bosProps[routeParamName] && checkIfPathIsIncludedToRoutes(bosProps[routeParamName]) ? bosProps[routeParamName] : routes[0].path; const _routes = routes.map((route) => route.path); const _type = type || "URLBased"; let _activeRoute = initialRoute || currentUrlPath; if ( !(currentUrlPath && routeType == "URLBased" && alemRoutes.routeBlocked) ) { _activeRoute = maintainRoutesWhenDeveloping ? initialRoute || activeRoute : routes[0].path; } if (!_activeRoute) { _activeRoute = routes[0].path; } alemRoutes.updateRouteParameters({ routes: _routes, routeType: _type, activeRoute: _activeRoute, routeBlocked: true, }); } }, [routeType]); if (activeRoute === "") { const Component = routes[0].component; return <Component />; } const Component = routes.find( (route) => route.path === activeRoute, )?.component; if (Component) { return <Component />; } return <></>; `, MobileNavBar: `const Categories = { gettingStarted: "Getting Started", router: "Router", context: "Context", apis: "APIs", bos: "BOS",}; const RoutesPath = { about: { path: "about", title: "About", category: Categories.gettingStarted, }, featureOverview: { path: "feature-overview", title: "Feature Overview", category: Categories.gettingStarted, }, installation: { path: "installation", title: "Installation", category: Categories.gettingStarted, }, configFile: { path: "config-file", title: "Config File", category: Categories.gettingStarted, }, cli: { path: "cli", title: "CLI", category: Categories.gettingStarted, }, deployingWithGithubActions: { path: "deploying-with-github-actions", title: "Deploying with GitHub Actions", category: Categories.gettingStarted, }, routes: { path: "routes", title: "Routes", category: Categories.router, }, createRoute: { path: "create-route", title: "Create Route", category: Categories.router, }, routeLink: { path: "route-link", title: "Route Link", category: Categories.router, }, navigate: { path: "navigate", title: "Navigate", category: Categories.router, }, routerProvider: { path: "router-provider", title: "Router Provider", category: Categories.router, }, useLocation: { path: "use-location", title: "Use Location", category: Categories.router, }, useParams: { path: "use-params", title: "Use Params", category: Categories.router, }, useRoutes: { path: "useRoutes", title: "Use Routes", category: Categories.router, }, createContext: { path: "create-context", title: "Create Context", category: Categories.context, }, useContext: { path: "use-context", title: "Use Context", category: Categories.context, }, loadExternalStyles: { path: "load-external-styles", title: "Load External Styles", category: Categories.apis, }, promisify: { path: "promisify", title: "Promisify", category: Categories.apis, }, isDevelopment: { path: "is-development", title: "Is Development", category: Categories.apis, }, bosProps: { path: "bos-props", title: "APIs and Components", category: Categories.bos, },}; const getLinksByCategory = (category, onItemClick) => { const { pathname } = props.alemRoutes.getLocation(); return Object.keys(RoutesPath) .map((routeKey) => { const routeDetails = (RoutesPath )[routeKey]; if (routeDetails.category === category) { return ( <RouteLink to={routeDetails.path} onClick={onItemClick} label={routeDetails.title} className={pathname === routeDetails.path ? "active" : ""} /> ); } }) .filter((item) => !!item);}; const Container = styled.div\` display: flex; flex-direction: column; border-bottom: rgb(224 226 229) solid 1px; min-width: 240px; margin-top: 10px; margin-bottom: 40px; height: fit-content; @media (max-width: 800px) { width: 100%; } h3 { margin: 0; font-size: 14px; font-weight: 700; color: #292929; padding: 12px 21px 6px; } a { display: block; font-size: 14px; font-weight: 600; padding: 6px 21px; margin-bottom: 0; border-radius: 4px; color: rgb(129, 129, 129); cursor: pointer; transition: all 0.2s ease-in-out; text-decoration: none; text-transform: capitalize; } a.active { background: #edf4fc !important; color: #4498e0 !important; } a:hover { color: #4498e0 !important; }\`; const NavBar = styled.div\` display: flex; padding: 12px; justify-content: space-between;\`; const CollapseButton = styled.button\` background-color: rgb(243 244 246); border-radius: 12px; border: none; display: flex; justify-content: center; align-items: center; width: 80px;\`; const Logo = styled.img\` align-self: center;\`; const ItemsContainer = styled.button\` display: flex; overflow: hidden; height: \${(props) => (props.collapsed ? "fit-content" : "0px")}; background-color: #fff; border: none; flex-direction: column; align-items: center; padding-bottom: \${(props) => (props.collapsed ? "44px" : "0")};\`; const RouteLink = ({ to, label, className, style, onClick, children,}) => { const routeContext = useContext("alemRouterProvider"); if (!routeContext) { console.error("Link component is being used without Router on top of it."); } const onClickHandler = () => { if (onClick) { onClick(); } if (routeContext.alemRoutes.routeType === "ContentBased") { props.alemRoutes.navigate(to); } }; if (routeContext.alemRoutes.routeType === "URLBased") { return ( <a onClick={onClickHandler} className={className} style={{ cursor: "pointer", textDecoration: "none", ...style }} href={\`?\${routeContext.alemRoutes.routeParameterName || "path"}=\${to}\`} > {label || children} </a> ); } return ( <a style={{ cursor: "pointer", textDecoration: "none", ...style }} className={className} onClick={onClickHandler} > {label || children} </a> );}; const useContext = (contextKey) => { const wasContextInitialized = props[contextKey].initialized; if (!wasContextInitialized) { console.error(\`Context "\${contextKey}" not found.\`); return; } const contextKeys = props[contextKey].keys; const contextItems = {}; contextKeys.forEach((key) => { contextItems[key] = props[key]; }); return contextItems ;}; const useRoutes = () => { const contextData = useContext("alemRouterProvider"); if (!contextData) { console.error("useRoutes: You need to call \`RouterProvider()\` first."); } return contextData.alemRoutes;}; const { } = props; const [show, setShow] = useState(false); const closeMenu = () => { setShow(false); }; const { pathname } = props.alemRoutes.getLocation(); const { routeParameterName } = useRoutes(); const [gettingStartedItems, setGettingStartedItems] = useState([]); const [routerItems, setRouterItems] = useState([]); const [contextItems, setContextItems] = useState([]); const [apisItems, setApisItems] = useState([]); const [bosItems, setBosItems] = useState([]); useEffect(() => { const _gettingStartedItems = getLinksByCategory("Getting Started", closeMenu); const _routerItems = getLinksByCategory("Router", closeMenu); const _contextItems = getLinksByCategory("Context", closeMenu); const _apisItems = getLinksByCategory("APIs", closeMenu); const _bosItems = getLinksByCategory("BOS", closeMenu); setGettingStartedItems(_gettingStartedItems); setRouterItems(_routerItems); setContextItems(_contextItems); setApisItems(_apisItems); setBosItems(_bosItems); }, [pathname, routeParameterName]); return ( <Container> <NavBar> <RouteLink to="about"> <Logo src="https://cdn.jsdelivr.net/gh/wpdas/alem/docs/assets/near-script-logo.png" width={40} alt="logo" /> </RouteLink> <CollapseButton type="button" onClick={() => { setShow(!show); }} > {!show ? ( <span className="material-symbols-outlined">menu</span> ) : ( <span className="material-symbols-outlined">close</span> )} </CollapseButton> </NavBar> <ItemsContainer collapsed={show}> <div> <h3>Getting Started</h3> {gettingStartedItems} </div> <div> <h3>Router</h3> {routerItems} </div> <div> <h3>Context</h3> {contextItems} </div> <div> <h3>APIs</h3> {apisItems} </div> <div> <h3>NEAR VM (BOS)</h3> {bosItems} </div> </ItemsContainer> </Container> );`, Sidebar: ` const Categories = { gettingStarted: "Getting Started", router: "Router", context: "Context", apis: "APIs", bos: "BOS",}; const RoutesPath = { about: { path: "about", title: "About", category: Categories.gettingStarted, }, featureOverview: { path: "feature-overview", title: "Feature Overview", category: Categories.gettingStarted, }, installation: { path: "installation", title: "Installation", category: Categories.gettingStarted, }, configFile: { path: "config-file", title: "Config File", category: Categories.gettingStarted, }, cli: { path: "cli", title: "CLI", category: Categories.gettingStarted, }, deployingWithGithubActions: { path: "deploying-with-github-actions", title: "Deploying with GitHub Actions", category: Categories.gettingStarted, }, routes: { path: "routes", title: "Routes", category: Categories.router, }, createRoute: { path: "create-route", title: "Create Route", category: Categories.router, }, routeLink: { path: "route-link", title: "Route Link", category: Categories.router, }, navigate: { path: "navigate", title: "Navigate", category: Categories.router, }, routerProvider: { path: "router-provider", title: "Router Provider", category: Categories.router, }, useLocation: { path: "use-location", title: "Use Location", category: Categories.router, }, useParams: { path: "use-params", title: "Use Params", category: Categories.router, }, useRoutes: { path: "useRoutes", title: "Use Routes", category: Categories.router, }, createContext: { path: "create-context", title: "Create Context", category: Categories.context, }, useContext: { path: "use-context", title: "Use Context", category: Categories.context, }, loadExternalStyles: { path: "load-external-styles", title: "Load External Styles", category: Categories.apis, }, promisify: { path: "promisify", title: "Promisify", category: Categories.apis, }, isDevelopment: { path: "is-development", title: "Is Development", category: Categories.apis, }, bosProps: { path: "bos-props", title: "APIs and Components", category: Categories.bos, },}; const RouteLink = ({ to, label, className, style, onClick, children,}) => { const routeContext = useContext("alemRouterProvider"); if (!routeContext) { console.error("Link component is being used without Router on top of it."); } const onClickHandler = () => { if (onClick) { onClick(); } if (routeContext.alemRoutes.routeType === "ContentBased") { props.alemRoutes.navigate(to); } }; if (routeContext.alemRoutes.routeType === "URLBased") { return ( <a onClick={onClickHandler} className={className} style={{ cursor: "pointer", textDecoration: "none", ...style }} href={\`?\${routeContext.alemRoutes.routeParameterName || "path"}=\${to}\`} > {label || children} </a> ); } return ( <a style={{ cursor: "pointer", textDecoration: "none", ...style }} className={className} onClick={onClickHandler} > {label || children} </a> );}; const getLinksByCategory = (category, onItemClick) => { const { pathname } = props.alemRoutes.getLocation(); return Object.keys(RoutesPath) .map((routeKey) => { const routeDetails = (RoutesPath )[routeKey]; if (routeDetails.category === category) { return ( <RouteLink to={routeDetails.path} onClick={onItemClick} label={routeDetails.title} className={pathname === routeDetails.path ? "active" : ""} /> ); } }) .filter((item) => !!item);}; const A_8 = styled.div\` display: flex; flex-direction: column; gap: 16px; background: #fff; border-right: rgb(224 226 229) solid 1px; min-width: 240px; width: 240px; padding: 0px 17px 30px; margin-top: 40px; margin-right: 16px; z-index: 1; bottom: 0; margin-bottom: 40px; height: fit-content; @media (max-width: 800px) { width: 100%; } h3 { margin: 0; font-size: 14px; font-weight: 700; color: #292929; padding: 12px 21px 6px; } a { display: block; font-size: 14px; font-weight: 600; padding: 6px 21px; margin-bottom: 0; border-radius: 4px; color: rgb(129, 129, 129); cursor: pointer; transition: all 0.2s ease-in-out; text-decoration: none; text-transform: capitalize; } a.active { background: #edf4fc !important; color: #4498e0 !important; } a:hover { color: #4498e0 !important; }\`; const SidebarAboutLogo = styled.img\` align-self: center; @media (max-width: 800px) { display: none; }\`; const useContext = (contextKey) => { const wasContextInitialized = props[contextKey].initialized; if (!wasContextInitialized) { console.error(\`Context "\${contextKey}" not found.\`); return; } const contextKeys = props[contextKey].keys; const contextItems = {}; contextKeys.forEach((key) => { contextItems[key] = props[key]; }); return contextItems ;}; const useRoutes = () => { const contextData = useContext("alemRouterProvider"); if (!contextData) { console.error("useRoutes: You need to call \`RouterProvider()\` first."); } return contextData.alemRoutes;}; const { } = props; const { pathname } = props.alemRoutes.getLocation(); const { routeParameterName } = useRoutes(); const [gettingStartedItems, setGettingStartedItems] = useState([]); const [routerItems, setRouterItems] = useState([]); const [contextItems, setContextItems] = useState([]); const [apisItems, setApisItems] = useState([]); const [bosItems, setBosItems] = useState([]); useEffect(() => { const _gettingStartedItems = getLinksByCategory("Getting Started"); const _routerItems = getLinksByCategory("Router"); const _contextItems = getLinksByCategory("Context"); const _apisItems = getLinksByCategory("APIs"); const _bosItems = getLinksByCategory("BOS"); setGettingStartedItems(_gettingStartedItems); setRouterItems(_routerItems); setContextItems(_contextItems); setApisItems(_apisItems); setBosItems(_bosItems); }, [pathname, routeParameterName]); return ( <A_8> <SidebarAboutLogo src="https://cdn.jsdelivr.net/gh/wpdas/alem/docs/assets/near-script-logo.png" width={60} alt="logo" /> <div> <h3>Getting Started</h3> {gettingStartedItems} </div> <div> <h3>Router</h3> {routerItems} </div> <div> <h3>Context</h3> {contextItems} </div> <div> <h3>APIs</h3> {apisItems} </div> <div> <h3>NEAR VM (BOS)</h3> {bosItems} </div> </A_8> );`, App: `const SharedInfoModal = () => { return ( <> <div className="modal fade" id="sharedInfoModal" tabIndex={-1} aria-labelledby="exampleModalLabel" aria-hidden="true" > <div className="modal-dialog modal-dialog-centered"> <div className="modal-content"> <div className="modal-header"> <h1 className="modal-title fs-5" id="exampleModalLabel" style={{ alignItems: "center", display: "flex" }} > <ShareIcon /> <p style={{ marginBottom: 0, marginLeft: 8 }}>Share</p> </h1> <button type="button" className="btn-close" data-bs-dismiss="modal" aria-label="Close" ></button> </div> <div className="modal-body">Link copied to clipboard</div> <div className="modal-footer"> <button type="button" className="btn btn-primary" data-bs-dismiss="modal" style={{ padding: "0.55rem 2.5rem", borderRadius: "30px", border: "1px solid rgb(8 126 164)", backgroundColor: "rgb(8 126 164)", fontWeight: 700, }} > Ok </button> </div> </div> </div> </div> </> );}; const Modals = () => ( <> <SharedInfoModal /> </>); const A_1 = styled.p\` display: flex; justify-content: space-between; align-items: center; font-size: 16px; border-top: 1px solid rgb(224 226 229); color: rgb(67 74 90); font-weight: 500; line-height: 30px; width: 100%; padding: 22px 70px; font-family: "Source Code Pro", sans-serif, ui-sans-serif, system-ui, -apple-system; span { color: rgb(8 126 164); margin-left: 8px; } @media screen and (max-width: 1049px) { padding: 22px 10px; } @media screen and (max-width: 796px) { padding: 22px 10px; flex-direction: column; gap: 26px; }\`; const Item = styled.a\` font-size: 16px; line-height: 24px; text-align: center; margin: 0 8px; cursor: pointer; svg { width: 30px; height: 30px; }\`; const A_2 = styled.div\` display: flex; justify-content: center; p { margin: 0 0 0 8px; }\`; const Socials = styled.div\` display: flex; width: 200px; justify-content: space-between; p { font-size: 14px; margin-bottom: 0; } a { color: #292929; }\`; const Description = styled.p\` margin: 0; max-width: 430px; text-align: center; a { color: rgb(8 126 164); }\`; const GithubIcon = () => ( <svg _ngcontent-ng-c1539744558="" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 56 56"> <g _ngcontent-ng-c1539744558="" fill-rule="evenodd" clip-rule="evenodd"> <circle _ngcontent-ng-c1539744558="" fill="none" cx="28" cy="28" r="28"></circle> <path _ngcontent-ng-c1539744558="" fill="#181616" d="M28 0C12.54 0 0 12.54 0 28c0 12.37 8.02 22.86 19.15 26.57 1.4.26 1.91-.61 1.91-1.35 0-.66-.02-2.43-.04-4.76-7.79 1.69-9.43-3.75-9.43-3.75-1.27-3.23-3.11-4.1-3.11-4.1-2.54-1.74.19-1.7.19-1.7 2.81.2 4.29 2.89 4.29 2.89 2.5 4.28 6.55 3.04 8.15 2.33.25-1.81.98-3.04 1.78-3.74-6.22-.71-12.75-3.11-12.75-13.84 0-3.06 1.09-5.56 2.88-7.51-.29-.71-1.25-3.56.27-7.41 0 0 2.35-.75 7.7 2.87 2.23-.62 4.63-.93 7.01-.94 2.38.01 4.77.32 7.01.94 5.35-3.62 7.69-2.87 7.69-2.87 1.53 3.85.57 6.7.28 7.41 1.79 1.96 2.88 4.46 2.88 7.51 0 10.76-6.55 13.12-12.78 13.82 1.01.86 1.9 2.57 1.9 5.19 0 3.74-.03 6.76-.03 7.68 0 .75.5 1.62 1.93 1.35C47.98 50.86 56 40.37 56 28 56 12.54 43.46 0 28 0z" ></path> </g> </svg>); const TelegramIcon = () => ( <svg width="24px" height="24px" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlnsXlink="http://www.w3.org/1999/xlink" xmlSpace="preserve" style={{ fillRule: "evenodd", clipRule: "evenodd", strokeLinejoin: "round", strokeMiterlimit: "1.41421", }} > <path id="telegram-1" d="M18.384,22.779c0.322,0.228 0.737,0.285 1.107,0.145c0.37,-0.141 0.642,-0.457 0.724,-0.84c0.869,-4.084 2.977,-14.421 3.768,-18.136c0.06,-0.28 -0.04,-0.571 -0.26,-0.758c-0.22,-0.187 -0.525,-0.241 -0.797,-0.14c-4.193,1.552 -17.106,6.397 -22.384,8.35c-0.335,0.124 -0.553,0.446 -0.542,0.799c0.012,0.354 0.25,0.661 0.593,0.764c2.367,0.708 5.474,1.693 5.474,1.693c0,0 1.452,4.385 2.209,6.615c0.095,0.28 0.314,0.5 0.603,0.576c0.288,0.075 0.596,-0.004 0.811,-0.207c1.216,-1.148 3.096,-2.923 3.096,-2.923c0,0 3.572,2.619 5.598,4.062Zm-11.01,-8.677l1.679,5.538l0.373,-3.507c0,0 6.487,-5.851 10.185,-9.186c0.108,-0.098 0.123,-0.262 0.033,-0.377c-0.089,-0.115 -0.253,-0.142 -0.376,-0.064c-4.286,2.737 -11.894,7.596 -11.894,7.596Z" /> </svg>); const Footer = () => { return ( <A_1> <A_2> <img src="https://cdn.jsdelivr.net/gh/wpdas/alem/docs/assets/near-script-logo.png" width={30} alt="logo" /> <p>AlÃ©m</p> </A_2> <Row> <Description> This library is still under development. <a href="https://near.org/near/widget/ProfilePage?accountId=wendersonpires.near" target="_blank" > wendersonpires.near </a> </Description> </Row> <Socials> <Item href="https://t.me/alemlib" target="_blank"> <TelegramIcon /> <p>Telegram</p> </Item> <Item href="https://github.com/wpdas/alem" target="_blank"> <GithubIcon /> <p>GitHub</p> </Item> </Socials> </A_1> );}; const Loading = () => { return ( <AppContainer> <Spinner style={{ marginTop: "28vh" }} dark /> <AppBackground /> </AppContainer> );}; const A_3 = styled.div\` display: flex; flex-direction: column; gap: 16px; background: #fff; min-width: 240px; padding: 40px 17px 30px; z-index: 1; bottom: 0; margin-bottom: 40px; height: fit-content; width: 100%; max-width: 1046px; margin-left: auto; margin-right: auto; h4, h3, h2, h1 { font-weight: 700; font-size: 22px; color: rgb(35, 39, 47); } h4 { font-size: 16px; } code { background-color: #eee; padding: 4px; border-radius: 4px; color: #292929; } pre { div { background-color: #fafafa !important; box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px; border-radius: 8px; margin: 8px !important; } span { mix-blend-mode: exclusion; filter: saturate(4) hue-rotate(250deg); font-size: 14px; font-family: "Source Code Pro", sans-serif, ui-sans-serif, system-ui, -apple-system; line-height: 24px; -webkit-font-smoothing: auto; opacity: 0.9; } .language-sh { color: #555 !important; } .language-bash { color: #555 !important; > span { color: #555 !important; mix-blend-mode: normal; } } } a { color: rgb(8 126 164) !important; } strong { opacity: 0.8; } p { font-size: 17px; font-weight: 500; color: rgb(35 39 47); } ul { padding-left: 1.2rem; } li { margin-bottom: 10px; font-size: 17px; font-weight: 500; margin-left: 0px !important; color: rgb(35 39 47); }\`; const Title = styled.h3\` font-weight: 700; font-size: 26px; color: #292929;\`; const Spinner = ({ style, dark }) => ( <div style={{ display: "flex", justifyContent: "center", width: "100%", ...style }}> <div className={\`spinner-border \${dark ? "" : "text-light"}\`} role="status"> <span className="visually-hidden">Loading...</span> </div> </div>); const ShareIcon = () => <span className="material-symbols-outlined">share</span>; const SpinnerWrapper = styled.div\` margin: 200px 0;\`; const ShareButton = styled.button\` padding: 0.5rem 1.4rem; border-radius: 30px; border: 1px solid #ccc; background-color: #fff; color: #292929; font-weight: 700; font-size: 16px; display: flex; align-items: center; :hover { background-color: rgb(252 252 252); } span { margin-right: 18px; width: 18px; }\`; const TopSection = styled.div\` display: flex; flex-direction: column; align-items: flex-end; position: absolute; align-self: flex-end;\`; const Margin = styled.div\`\`; const MarkdownPage = ({ mdFileURL }) => { const mdContent = fetch(mdFileURL).body; const { pathname } = props.alemRoutes.getLocation(); const site = isDevelopment ? "http://127.0.0.1:8080/alem-lib.near/widget/Index" : "https://alem.dev/"; const copyToCliboard = () => { clipboard.writeText(\`\${site}?section=\${pathname}\`); }; return ( <> <TopSection> <div> <ShareButton data-bs-toggle="modal" data-bs-target="#sharedInfoModal" onClick={copyToCliboard} > <ShareIcon /> Share </ShareButton> </div> </TopSection> <Margin /> {mdContent ? ( <Markdown text={mdContent} /> ) : ( <SpinnerWrapper> <Spinner dark /> </SpinnerWrapper> )} </> );}; const Categories = { gettingStarted: "Getting Started", router: "Router", context: "Context", apis: "APIs", bos: "BOS",}; const RoutesPath = { about: { path: "about", title: "About", category: Categories.gettingStarted, }, featureOverview: { path: "feature-overview", title: "Feature Overview", category: Categories.gettingStarted, }, installation: { path: "installation", title: "Installation", category: Categories.gettingStarted, }, configFile: { path: "config-file", title: "Config File", category: Categories.gettingStarted, }, cli: { path: "cli", title: "CLI", category: Categories.gettingStarted, }, deployingWithGithubActions: { path: "deploying-with-github-actions", title: "Deploying with GitHub Actions", category: Categories.gettingStarted, }, routes: { path: "routes", title: "Routes", category: Categories.router, }, createRoute: { path: "create-route", title: "Create Route", category: Categories.router, }, routeLink: { path: "route-link", title: "Route Link", category: Categories.router, }, navigate: { path: "navigate", title: "Navigate", category: Categories.router, }, routerProvider: { path: "router-provider", title: "Router Provider", category: Categories.router, }, useLocation: { path: "use-location", title: "Use Location", category: Categories.router, }, useParams: { path: "use-params", title: "Use Params", category: Categories.router, }, useRoutes: { path: "useRoutes", title: "Use Routes", category: Categories.router, }, createContext: { path: "create-context", title: "Create Context", category: Categories.context, }, useContext: { path: "use-context", title: "Use Context", category: Categories.context, }, loadExternalStyles: { path: "load-external-styles", title: "Load External Styles", category: Categories.apis, }, promisify: { path: "promisify", title: "Promisify", category: Categories.apis, }, isDevelopment: { path: "is-development", title: "Is Development", category: Categories.apis, }, bosProps: { path: "bos-props", title: "APIs and Components", category: Categories.bos, },}; const Row = styled.div\` display: flex;\`; const Column = styled.div\` display: flex; flex-direction: column;\`; const A_4 = styled.div\` display: flex; flex-direction: column; align-items: center; margin-bottom: 90px;\`; const A_5 = styled.img\` pointer-events: none; margin-bottom: 20px; border-radius: 999px;\`; const A_6 = styled.h1\` font-size: 42px !important; margin-bottom: 14px;\`; const A_7 = styled.h3\` font-size: 28px !important; font-weight: 600; color: rgb(67 74 90); margin-bottom: 34px;\`; const CustomAnchor = styled.div\` display: flex; a { padding: 0.75rem 1.5rem; border-radius: 30px; border: 1px solid #ccc; background-color: #fff; color: rgb(35 39 47); font-weight: 700; font-size: 17px; :hover { background-color: #fafafa; } }\`; const CustomLink = styled.a\` padding: 0.75rem 1.5rem; border-radius: 30px; border: 1px solid rgb(8 126 164); background-color: rgb(8 126 164); margin-right: 12px; p { color: #fff !important; margin: 0; font-weight: 700 !important; font-size: 17px; } :hover { background-color: rgb(8 126 164); }\`; const Section = styled.div\` background-color: rgb(188 193 205 / 12%); display: flex; flex-direction: column; align-items: center; padding: 90px 20px; align-items: center; text-align: center; p { font-size: 20px; color: rgb(67 74 90); line-height: 1.5; max-width: 48rem; font-weight: 500; margin-top: 1.75rem; }\`; const Code = styled.span\` background-color: rgba(208, 211, 220, 0.4); border-radius: 0.5rem; border: 0 solid #e5e7eb; color: rgb(67 74 90); padding: 0.125rem 0.25rem;\`; const BlueCode = styled.span\` background-color: rgba(164, 187, 232, 0.4); border-radius: 0.5rem; border: 0 solid #e5e7eb; color: rgb(67 74 90); padding: 0.125rem 0.25rem;\`; const RedCode = styled.span\` background-color: rgba(223, 139, 142, 0.3); border-radius: 0.5rem; border: 0 solid #e5e7eb; color: rgb(67 74 90); padding: 0.125rem 0.25rem;\`; const useContext = (contextKey) => { const wasContextInitialized = props[contextKey].initialized; if (!wasContextInitialized) { console.error(\`Context "\${contextKey}" not found.\`); return; } const contextKeys = props[contextKey].keys; const contextItems = {}; contextKeys.forEach((key) => { contextItems[key] = props[key]; }); return contextItems ;}; const RouteLink = ({ to, label, className, style, onClick, children,}) => { const routeContext = useContext("alemRouterProvider"); if (!routeContext) { console.error("Link component is being used without Router on top of it."); } const onClickHandler = () => { if (onClick) { onClick(); } if (routeContext.alemRoutes.routeType === "ContentBased") { props.alemRoutes.navigate(to); } }; if (routeContext.alemRoutes.routeType === "URLBased") { return ( <a onClick={onClickHandler} className={className} style={{ cursor: "pointer", textDecoration: "none", ...style }} href={\`?\${routeContext.alemRoutes.routeParameterName || "path"}=\${to}\`} > {label || children} </a> ); } return ( <a style={{ cursor: "pointer", textDecoration: "none", ...style }} className={className} onClick={onClickHandler} > {label || children} </a> );}; const AboutPage = () => { return ( <div> <A_4> <A_5 src="https://cdn.jsdelivr.net/gh/wpdas/alem/docs/assets/near-script-logo.png" width={120} alt="logo" /> <A_6>AlÃ©m</A_6> <A_7>The library for web3 NEAR BOS interfaces</A_7> <Row> <CustomLink href="https://github.com/wpdas/alem-docs-web" target="_blank"> <p>See an Example</p> </CustomLink> <CustomAnchor> <RouteLink to={RoutesPath.featureOverview.path} label="Learn Alem" /> </CustomAnchor> </Row> </A_4> <Section> <A_6>Create user interfaces from components</A_6> <p> Alem use its compiler to let you build user interfaces out of individual pieces. Create your own components like <Code>Thumbnail</Code>, <Code>LikeButton</Code>, and{" "} <Code>Avatar</Code>. Then combine them into entire screens, pages, and other components. </p> </Section> <Section style={{ backgroundColor: "#fff" }}> <A_6>Stateless & Stateful Component</A_6> <p> Both types of components work perfectly with AlÃ©m. Prefer using stateless components for faster rendering. Stateless components <BlueCode>can receive children</BlueCode>. Stateful components <RedCode>cannot natively support children</RedCode> due to a limitation in Near VM. Although it is possible to also send children to stateful components using AlÃ©m, but it is not recommended as the children's properties may be lost. </p> </Section> <Section> <A_6>Network</A_6> <p> Currently supports <Code>Mainnet</Code> and <Code>Testnet</Code>. So, while you are developing and testing features you can test everything without worrying about expenses. </p> </Section> <Section style={{ backgroundColor: "#fff" }}> <A_6>Good Practices</A_6> <p> All project content will be organized in just one file. Be aware of this when developing your application. Whenever possible, use functions that return the desired content to avoid possible issues in the application. </p> </Section> </div> );}; const Routes = ({ libVersion }) => { const AboutPageRoute = props.alem.createRoute(RoutesPath.about.path, AboutPage); const routes = [ AboutPageRoute, { path: RoutesPath.featureOverview.path, component: () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/feature-overview.md\`} ></MarkdownPage> ), }, props.alem.createRoute(RoutesPath.installation.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/installation.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.configFile.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/config-file.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.cli.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/cli.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.deployingWithGithubActions.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/deploying-with-github-actions.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.routes.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/router/routes.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.createRoute.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/router/create-route.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.routeLink.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/router/route-link.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.navigate.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/router/navigate.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.routerProvider.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/router/router-provider.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.useLocation.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/router/use-location.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.useParams.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/router/use-params.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.useRoutes.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/router/use-routes.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.createContext.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/context/create-context.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.useContext.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/context/use-context.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.loadExternalStyles.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/api/load-external-styles.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.promisify.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/api/promisify.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.isDevelopment.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/api/is-development.md\`} ></MarkdownPage> )), props.alem.createRoute(RoutesPath.bosProps.path, () => ( <MarkdownPage mdFileURL={\`https://cdn.jsdelivr.net/gh/wpdas/alem/docs/bos-overview.md\`} ></MarkdownPage> )), ]; const urlParams = props.alem.useParams(); return ( <> {} <Widget loading=" " code={props.alem.componentsCode.Router} props={{ ...({routes: routes,type: "ContentBased",parameterName: "tab",initialRoute: urlParams.section, ...props}) }}></Widget> </> );}; const ContentView = ({ libVersion }) => { return ( <A_3> <Routes libVersion={libVersion} /> </A_3> );}; const AppContainer = styled.div\` display: flex; flex-direction: row; font-family: "Wix Madefor Display", sans-serif; @media (max-width: 800px) { flex-wrap: wrap; }\`; const AppBackground = styled.div\` background-color: #fff; position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: -2;\`; const Banner = styled.p\` display: flex; justify-content: center; align-items: center; font-size: 17px; height: 40px; background-color: rgb(243 244 246); color: rgb(67 74 90); font-weight: 500; line-height: 30px; width: 100%; span { color: rgb(8 126 164); margin-left: 8px; }\`; const MobileNavBarSwitcher = styled.div\` font-family: "Wix Madefor Display", sans-serif; height: 0px; overflow: hidden; @media (max-width: 800px) { display: flex; height: fit-content; }\`; const SideBarSwitcher = styled.div\` display: flex; @media (max-width: 800px) { height: 0px; overflow: hidden; }\`; const createContext = ( contextKey, defaultStateValue, defaultPropsValue,) => { if (!state || (state[contextKey] && !state[contextKey].initialized)) { const stateKeys = Object.keys(defaultStateValue); const propsKeys = Object.keys(defaultPropsValue || {}); let mainKeys = [...stateKeys, ...propsKeys]; mainKeys = mainKeys.filter( (item, index) => mainKeys.indexOf(item) === index, ); State.update({ ...state, ...defaultStateValue, [contextKey]: { initialized: true, keys: mainKeys }, }); } props = { ...props, ...state, ...defaultPropsValue, };}; const RouterProvider = () => { const AlemRoutesStateInitialBody = { alemRoutes: { routesInitialized: false, activeRoute: "", routeParameterName: "path", routes: [] , routeType: "URLBased", routeBlocked: true, }, }; const updateAlemRoutesState = (updatedState) => { State.update({ alemRoutes: { ...state.alemRoutes, ...updatedState, }, }); }; const alemRoutesState = () => state.alemRoutes ; const alemRoutesProps = { alemRoutes: { ...state.alemRoutes, updateRouteParameterName: (parameterName) => { updateAlemRoutesState({ routeParameterName: parameterName, }); }, updateRouteParameters: (props) => { updateAlemRoutesState({ routes: props.routes || alemRoutesState().routes, routeType: props.routeType || alemRoutesState().routeType, activeRoute: props.activeRoute || alemRoutesState().activeRoute, routeBlocked: props.routeBlocked || alemRoutesState().routeBlocked, routesInitialized: true, }); }, navigate: (route) => { if (alemRoutesState().routes.includes(route)) { updateAlemRoutesState({ activeRoute: route }); } }, getLocation: () => { return { pathname: alemRoutesState().activeRoute, routes: alemRoutesState().routes, isRoutesReady: alemRoutesState().routes && alemRoutesState().routes.length > 0, }; }, }, }; createContext( "alemRouterProvider", AlemRoutesStateInitialBody, alemRoutesProps, );}; const { } = props; const [libVersion, setLibVersion] = useState(""); const stylesLoaded = props.alem.loadExternalStyles([ "https://fonts.googleapis.com/css2?family=Wix+Madefor+Display:wght@400..800&display=swap", "https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0", "https://fonts.cdnfonts.com/css/source-code-pro", ]); useEffect(() => { asyncFetch("https://api.github.com/repos/wpdas/alem/tags").then((data) => { setLibVersion(data.body[0].name.replace("v", "")); }); }, []); if (!stylesLoaded || !libVersion) { return <Loading></Loading>; } RouterProvider(); return ( <div style={{ marginTop: "calc(-1 * var(--body-top-padding, 0))" }}> <Modals></Modals> <Banner> Alem is currently on version <span>{libVersion}</span>. </Banner> <MobileNavBarSwitcher> <Widget loading=" " code={props.alem.componentsCode.MobileNavBar} props={{ ...({ ...props}) }}></Widget> </MobileNavBarSwitcher> <AppContainer> <SideBarSwitcher> <Widget loading=" " code={props.alem.componentsCode.Sidebar} props={{ ...({ ...props}) }}></Widget> </SideBarSwitcher> <ContentView libVersion={libVersion} ></ContentView> </AppContainer> <Footer></Footer> <AppBackground></AppBackground> </div> );`, }, },};const alemCssBody = ``;const AlemTheme = styled.div` ${state.alem.alemExternalStylesBody} ${alemCssBody}`;return ( <AlemTheme> <Widget loading=" " code={props.alem.componentsCode.App} props={{ alem: props.alem }} /> </AlemTheme>);
  