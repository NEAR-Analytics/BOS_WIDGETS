{"tx_hash": "6Qrh2f6RnJxDZvNL5334Y2L2QD4fFC7569B9gHLtUDGT", "action_id_social": "3hqAXHuymnW4kj9ZgXZ7kRhneKFPnHYBCNXSDGARTu8b-0-widget", "block_id": 114303176, "block_timestamp": "2024-03-08T02:49:04.904Z", "signer_id": "alem-lib.near", "widget_name": "Index", "source_code": "\n  /** Bundle generated by Al\u00e9m Library v0.0.1-alpha.11 - See more here: https://github.com/wpdas/alem */\n  /** Project repository: https://github.com/wpdas/alem-docs-web */\n  const isDevelopment = state.alemEnvironment === \"development\";const promisify = (caller, resolve, reject, _timeout) => { const timer = 100; const timeout = _timeout || 10000; let timeoutCheck = 0; const find = () => { const response = caller(); if (response !== undefined && response !== null) { resolve(response); } else { if (timeoutCheck < timeout) { setTimeout(find, timer); timeoutCheck += timer; } else { if (reject) { reject(null); } } } }; find();};const AlemSpinner = () => { const ldsRipple = styled.keyframes` 0% { top: 36px; left: 36px; width: 0; height: 0; opacity: 0; } 4.9% { top: 36px; left: 36px; width: 0; height: 0; opacity: 0; } 5% { top: 36px; left: 36px; width: 0; height: 0; opacity: 1; } 100% { top: 0px; left: 0px; width: 72px; height: 72px; opacity: 0; } `; const SpinnerContainer = styled.div` display: inline-block; position: relative; width: 80px; height: 80px; div { position: absolute; border: 4px solid #000000; opacity: 1; border-radius: 50%; animation-timing-function: cubic-bezier(0, 0.2, 0.8, 1); animation-name: ${ldsRipple}; animation-duration: 1s; animation-iteration-count: infinite; } div:nth-child(2) { animation-delay: -0.5s; } `; return ( <div style={{ margin: \"auto\", paddingTop: \"236px\", width: \"100%\" }}> <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", }} > <SpinnerContainer> <div></div> <div></div> </SpinnerContainer> </div> </div> );};State.init({ alemStoreReady: false, alemRouteSystemInitialized: false, alemRouteBlocked: true, alemEnvironment: \"production\", alemConfig_maintainRouteWhenDeveloping: true, alemFontsLoaded: false, alemFontsBody: \"\", });if (!state.alemStoreReady) { promisify( () => Storage.privateGet(\"alem:store\"), (storeData) => { if (Object.keys(storeData).length > 1) { State.update({ alemStoreReady: true, ...storeData, stores: storeData?.stores || [], }); } else { State.update({ alemStoreReady: true, stores: [] }); } }, () => { State.update({ alemStoreReady: true, stores: [] }); }, 300, );}if (!state.alemStoreReady) { return \"\";}const removeAlemPropsFromState = (stateObj) => { delete stateObj.alemStoreReady; delete stateObj.alemRouteSystemInitialized; delete stateObj.alemFontsLoaded; delete stateObj.alemFontsBody; delete stateObj.alemRouteBlocked; delete stateObj.alemEnvironment; delete stateObj.alemConfig_maintainRouteWhenDeveloping; return stateObj;};const ALEM_USESTORE_KEY_SEPARATOR = \"::\";const createStore = (storeKey, obj) => { if (!state.stores.includes(storeKey) && obj && state.alemStoreReady) { const initParsedObj = {}; Object.keys(obj).forEach( (key) => (initParsedObj[`${storeKey}${ALEM_USESTORE_KEY_SEPARATOR}${key}`] = obj[key]), ); const updatedStores = state.stores ? [...state.stores, storeKey] : [storeKey]; const updatedState = removeAlemPropsFromState({ ...state, ...initParsedObj, stores: updatedStores, }); State.update(updatedState); Storage.privateSet(\"alem:store\", updatedState); }};const useStore = (storeKey) => { const getParsedObj = {}; Object.keys(state).forEach((key) => { if (key.includes(`${storeKey}${ALEM_USESTORE_KEY_SEPARATOR}`)) { getParsedObj[ key.replace(`${storeKey}${ALEM_USESTORE_KEY_SEPARATOR}`, \"\") ] = state[key]; } }); return { ...getParsedObj, update: (updateObj) => { if (state.alemStoreReady) { const updateParsedObj = {}; Object.keys(updateObj).forEach( (key) => (updateParsedObj[ `${storeKey}${ALEM_USESTORE_KEY_SEPARATOR}${key}` ] = updateObj[key]), ); State.update(updateParsedObj); const updatedState = removeAlemPropsFromState({ ...state }); Storage.privateSet( \"alem:store\", removeAlemPropsFromState(updatedState), ); } }, };};const clearStore = () => { Storage.privateSet(\"alem:store\", {});};const getStore = () => { const storesData = {}; if (state.stores) { const stateKeys = Object.keys(state); state.stores.forEach((storeKey) => { if (!storeKey.includes(\"alem:\")) { stateKeys.forEach((stateKey) => { if (stateKey.includes(storeKey)) { if (!storesData[storeKey]) { storesData[storeKey] = {}; } storesData[storeKey][ stateKey.replace(`${storeKey}${ALEM_USESTORE_KEY_SEPARATOR}`, \"\") ] = state[stateKey]; } }); } }); } return storesData;};createStore(\"alem:routes\", { activeRoute: \"\", type: \"URLBased\", routes: [],});const useAlemLibRoutesStore = () => useStore(\"alem:routes\");const Routes = ({ routes, type }) => { const { activeRoute, update } = useAlemLibRoutesStore(); const routeType = type || \"URLBased\"; useEffect(() => { const bosProps = props; const maintainRoutesWhenDeveloping = isDevelopment && state.alemConfig_maintainRouteWhenDeveloping; if (routes) { update({ routes: routes.map((route) => route.path), type: routeType, ...(bosProps.path && routeType === \"URLBased\" && state.alemRouteBlocked ? { activeRoute: bosProps.path } : { activeRoute: state.alemRouteSystemInitialized || maintainRoutesWhenDeveloping ? activeRoute : routes[0].path, }), }); State.update({ alemRouteSystemInitialized: true, alemRouteBlocked: true, }); } }, [props.path, activeRoute]); if (activeRoute === \"\") { const Component = routes[0].component; return <Component />; } const Component = routes.find( (route) => route.path === activeRoute, )?.component; if (Component) { return <Component />; } return \"\";};const navigate = (routePath) => { const { routes, update } = useAlemLibRoutesStore(); if (routes.includes(routePath)) { State.update({ alemRouteBlocked: false }); update({ activeRoute: routePath }); }};const RouteLink = ({ to, children, className }) => { const { type } = useAlemLibRoutesStore(); if (type === \"URLBased\") { return ( <a className={className} style={{ cursor: \"pointer\", textDecoration: \"none\" }} href={`?path=${to}`} > {children} </a> ); } const onClickHandler = () => { navigate(to); }; return ( <div style={{ cursor: \"pointer\", textDecoration: \"none\" }} onClick={onClickHandler} > {children} </div> );};const createRoute = (path, component) => ({ path, component });const useParams = () => { if (Object.keys(props).includes(\"path\")) { delete props.path; } return props;};const useLocation = () => { const { activeRoute, routes } = useAlemLibRoutesStore(); return { pathname: activeRoute, routes, };};const alemCssBody = ``;const loadFonts = (fonts) => { if (!fonts && !state.alemFontsLoaded) { return; } let fontsBody = \"\"; const fontsTotal = fonts.length; let loadedFonts = 0; const loadFont = (fontURL) => { asyncFetch(fontURL).then((response) => { fontsBody += response.body; loadedFonts += 1; if (loadedFonts === fontsTotal) { State.update({ alemFontsLoaded: true, alemFontsBody: fontsBody }); } }); }; fonts.forEach((fontURL) => { loadFont(fontURL); }); return state.alemFontsLoaded;};const AlemTheme = styled.div` ${state.alemFontsBody} ${alemCssBody}`;const AppContainer = styled.div` display: flex; flex-direction: row; font-family: \"Wix Madefor Display\", sans-serif; @media (max-width: 800px) { flex-wrap: wrap; }`;const AppBackground = styled.div` background-color: #fff; position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: -2;`;const Banner = styled.p` display: flex; justify-content: center; align-items: center; font-size: 17px; height: 40px; background-color: rgb(243 244 246); color: rgb(67 74 90); font-weight: 500; line-height: 30px; width: 100%; span { color: rgb(8 126 164); margin-left: 8px; }`;const ContentView = () => { return ( <ContentViewContainer> <AppRoutes /> </ContentViewContainer> );};const Loading = () => { return ( <AppContainer> <Spinner style={{ marginTop: \"28vh\" }} /> <AppBackground /> </AppContainer> );};createStore(\"alemStore\", { currentVersion: \"\" });const useAlemStore = () => useStore(\"alemStore\");asyncFetch(\"https://api.github.com/repos/wpdas/alem/tags\").then((data) => { const { update } = useAlemStore(); update({ currentVersion: data.body[0].name.replace(\"v\", \"\") });});const App = () => { const { currentVersion } = useAlemStore(); const fontsLoaded = loadFonts([ \"https://fonts.googleapis.com/css2?family=Wix+Madefor+Display:wght@400..800&display=swap\", \"https://fonts.cdnfonts.com/css/source-code-pro\", ]); if (!fontsLoaded) { return <Loading />; } return ( <div style={{ marginTop: \"calc(-1 * var(--body-top-padding, 0))\" }}> <Banner> Alem is currently on version <span>{currentVersion}</span>. </Banner> <AppContainer> <Sidebar /> <ContentView /> <AppBackground /> </AppContainer> </div> );};const AboutPage = () => { return ( <div> <AboutContainer> <AboutLogo src=\"https://cdn.jsdelivr.net/gh/wpdas/alem/docs/assets/near-script-logo.png\" width={120} alt=\"logo\" /> <AboutTitle>Al\u00e9m</AboutTitle> <AboutDescription>The library for web3 NEAR BOS interfaces</AboutDescription> <Row> <CustomButton>Learn Alem</CustomButton> </Row> </AboutContainer> <AboutSectionGray> <AboutTitle>Create user interfaces from components</AboutTitle> <p> Alem lets you build user interfaces out of individual pieces called components. Create your own React components like <Code>Thumbnail</Code>, <Code>LikeButton</Code>, and{\" \"} <Code>Avatar</Code>. Then combine them into entire screens, pages, and other componets. </p> </AboutSectionGray> </div> );};const Categories = { gettingStarted: \"Getting Started\", router: \"Router\", apis: \"APIs\", store: \"Store\", bos: \"BOS\",};const RoutesPath = { about: { path: \"\", title: \"About\", category: Categories.gettingStarted, }, featureOverview: { path: \"feature-overview\", title: \"Feature Overview\", category: Categories.gettingStarted, }, installation: { path: \"installation\", title: \"Installation\", category: Categories.gettingStarted, }, configFile: { path: \"config-file\", title: \"Config File\", category: Categories.gettingStarted, }, routes: { path: \"routes\", title: \"Routes\", category: Categories.router, }, createRoute: { path: \"create-route\", title: \"Create Route\", category: Categories.router, }, routeLink: { path: \"route-link\", title: \"Route Link\", category: Categories.router, }, navigate: { path: \"navigate\", title: \"Navigate\", category: Categories.router, }, useLocation: { path: \"use-location\", title: \"Use Location\", category: Categories.router, }, useParams: { path: \"use-params\", title: \"Use Params\", category: Categories.router, }, loadFonts: { path: \"load-fonts\", title: \"Load Fonts\", category: Categories.apis, }, promisify: { path: \"promisify\", title: \"Promisify\", category: Categories.apis, }, creatingStore: { path: \"creating-a-store\", title: \"Creating Store\", category: Categories.store, }, getStore: { path: \"get-store\", title: \"Get Store\", category: Categories.store, }, clearStore: { path: \"clear-store\", title: \"Clear Store\", category: Categories.store, }, bosProps: { path: \"bos-props\", title: \"APIs and Components\", category: Categories.bos, },};const AppRoutes = () => { const routes = [ createRoute(RoutesPath.about.path, AboutPage), createRoute(RoutesPath.featureOverview.path, FeatureOverviewPage), createRoute(RoutesPath.installation.path, InstallationPage), createRoute(RoutesPath.configFile.path, ConfigFilePage), createRoute(RoutesPath.routes.path, RoutesPage), createRoute(RoutesPath.createRoute.path, CreateRoutePage), createRoute(RoutesPath.routeLink.path, RouteLinkPage), createRoute(RoutesPath.navigate.path, NavigatePage), createRoute(RoutesPath.useLocation.path, UseLocationPage), createRoute(RoutesPath.useParams.path, UseParamsPage), createRoute(RoutesPath.loadFonts.path, LoadFontsPage), createRoute(RoutesPath.promisify.path, PromisifyPage), createRoute(RoutesPath.creatingStore.path, CreatingStorePage), createRoute(RoutesPath.getStore.path, GetStorePage), createRoute(RoutesPath.clearStore.path, ClearStorePage), createRoute(RoutesPath.bosProps.path, BOSPropsPage), ]; return <Routes routes={routes} type=\"ContentBased\" />;};const getMarkdownPage = (mdFileURL) => { const SpinnerWrapper = styled.div` margin: 200px 0; `; return () => { const mdContent = fetch(mdFileURL).body; if (!mdContent) { return ( <SpinnerWrapper> <Spinner dark /> </SpinnerWrapper> ); } return ( <> <Markdown text={mdContent} /> </> ); };};const FeatureOverviewPage = getMarkdownPage( \"https://cdn.jsdelivr.net/gh/wpdas/alem@v0.0.1-alpha.11/docs/feature-overview.md\",);const InstallationPage = getMarkdownPage( \"https://cdn.jsdelivr.net/gh/wpdas/alem/docs/installation.md\",);const ConfigFilePage = getMarkdownPage( \"https://cdn.jsdelivr.net/gh/wpdas/alem/docs/config-file.md\",);const BOSPropsPage = getMarkdownPage( \"https://cdn.jsdelivr.net/gh/wpdas/alem@v0.0.1-alpha.11/docs/bos-overview.md\",);const RoutesPage = getMarkdownPage( \"https://cdn.jsdelivr.net/gh/wpdas/alem/docs/router/routes.md\",);const CreateRoutePage = getMarkdownPage( \"https://cdn.jsdelivr.net/gh/wpdas/alem/docs/router/create-route.md\",);const RouteLinkPage = getMarkdownPage( \"https://cdn.jsdelivr.net/gh/wpdas/alem/docs/router/route-link.md\",);const NavigatePage = getMarkdownPage( \"https://cdn.jsdelivr.net/gh/wpdas/alem/docs/router/navigate.md\",);const UseLocationPage = getMarkdownPage( \"https://cdn.jsdelivr.net/gh/wpdas/alem/docs/router/use-location.md\",);const UseParamsPage = getMarkdownPage( \"https://cdn.jsdelivr.net/gh/wpdas/alem/docs/router/use-params.md\",);const LoadFontsPage = getMarkdownPage( \"https://cdn.jsdelivr.net/gh/wpdas/alem/docs/api/load-fonts.md\",);const PromisifyPage = getMarkdownPage( \"https://cdn.jsdelivr.net/gh/wpdas/alem/docs/api/promisify.md\",);const CreatingStorePage = getMarkdownPage( \"https://cdn.jsdelivr.net/gh/wpdas/alem/docs/store/creating-a-store.md\",);const GetStorePage = getMarkdownPage( \"https://cdn.jsdelivr.net/gh/wpdas/alem/docs/store/get-store.md\",);const ClearStorePage = getMarkdownPage( \"https://cdn.jsdelivr.net/gh/wpdas/alem/docs/store/clear-store.md\",);const AboutContainer = styled.div` display: flex; flex-direction: column; align-items: center; margin-bottom: 90px;`;const AboutLogo = styled.img` pointer-events: none; margin-bottom: 20px; border-radius: 999px;`;const AboutTitle = styled.h1` font-size: 42px !important; margin-bottom: 14px;`;const AboutDescription = styled.h3` font-size: 28px !important; font-weight: 600; color: rgb(67 74 90); margin-bottom: 34px;`;const Row = styled.div` display: flex;`;const CustomButton = styled.button` padding: 0.75rem 1.5rem; border-radius: 30px; border: 1px solid #ccc; background-color: #fff; color: rgb(35 39 47); font-weight: 700; font-size: 17px; :hover { background-color: #fafafa; }`;const AboutSectionGray = styled.div` background-color: rgb(188 193 205 / 12%); display: flex; flex-direction: column; align-items: center; padding: 90px 20px; align-items: center; text-align: center; p { font-size: 20px; color: rgb(67 74 90); line-height: 1.5; max-width: 48rem; font-weight: 500; margin-top: 1.75rem; }`;const Code = styled.span` background-color: rgba(208, 211, 220, 0.4); border-radius: 0.5rem; border: 0 solid #e5e7eb; color: rgb(67 74 90); padding: 0.125rem 0.25rem;`;const Spinner = ({ style, dark }) => ( <div style={{ display: \"flex\", justifyContent: \"center\", width: \"100%\", ...style }}> <div className={`spinner-border ${dark ? \"\" : \"text-light\"}`} role=\"status\"> <span className=\"visually-hidden\">Loading...</span> </div> </div>);const SidebarContainer = styled.div` display: flex; flex-direction: column; gap: 16px; background: #fff; border-right: rgba(41, 41, 41, 0.2) solid 1px; min-width: 240px; width: 240px; padding: 0px 17px 30px; margin-top: 40px; z-index: 1; bottom: 0; margin-bottom: 40px; height: fit-content; @media (max-width: 800px) { width: 100%; } h3 { margin: 0; font-size: 14px; font-weight: 700; color: #292929; padding: 12px 21px 6px; } a { display: block; font-size: 14px; font-weight: 600; padding: 6px 21px; margin-bottom: 0; border-radius: 4px; color: rgb(129, 129, 129); cursor: pointer; transition: all 0.2s ease-in-out; text-decoration: none; text-transform: capitalize; } a.active { background: #edf4fc !important; color: #4498e0 !important; } a:hover { color: #4498e0 !important; }`;const SidebarItem = ({ to, label }) => { const { pathname } = useLocation(); return ( <RouteLink to={to}> <a className={pathname === to ? \"active\" : \"\"}>{label}</a> </RouteLink> );};const Sidebar = () => { const getLinksByCategory = (category) => Object.keys(RoutesPath).map((routeKey) => { const routeDetails = (RoutesPath )[routeKey]; if (routeDetails.category === category) { return <SidebarItem to={routeDetails.path} label={routeDetails.title} />; } }); return ( <SidebarContainer> <div> <h3>Getting Started</h3> {getLinksByCategory(\"Getting Started\")} </div> <div> <h3>Store</h3> {getLinksByCategory(\"Store\")} </div> <div> <h3>Router</h3> {getLinksByCategory(\"Router\")} </div> <div> <h3>APIs</h3> {getLinksByCategory(\"APIs\")} </div> <div> <h3>NEAR VM (BOS)</h3> {getLinksByCategory(\"BOS\")} </div> </SidebarContainer> );};const ContentViewContainer = styled.div` display: flex; flex-direction: column; gap: 16px; background: #fff; min-width: 240px; width: 240px; padding: 40px 17px 30px; z-index: 1; bottom: 0; margin-bottom: 40px; margin-left: 16px; height: fit-content; width: 100%; h2, h1 { font-weight: 700; font-size: 22px; color: rgb(35, 39, 47); } code { background-color: #eee; padding: 4px; border-radius: 4px; color: #292929; } pre { div { background-color: #fafafa !important; box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px; border-radius: 8px; margin: 8px !important; } span { mix-blend-mode: exclusion; filter: saturate(4) hue-rotate(250deg); font-size: 14px; font-family: \"Source Code Pro\", sans-serif, ui-sans-serif, system-ui, -apple-system; line-height: 24px; -webkit-font-smoothing: auto; opacity: 0.9; } .language-sh { color: #555 !important; } } a { color: rgb(8 126 164) !important; } strong { opacity: 0.8; } p { font-size: 17px; font-weight: 500; color: rgb(35 39 47); } ul { padding-left: 1.2rem; } li { margin-bottom: 10px; font-size: 17px; font-weight: 500; margin-left: 0px !important; color: rgb(35 39 47); }`;const ContentViewTitle = styled.h3` font-weight: 700; font-size: 26px; color: #292929;`;return ( <AlemTheme> <App /> </AlemTheme>);\n  ", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/alem-lib.near/widget/Index", "fact_widget_deployments_id": "889184372e21cb4d97c54d7c664b5ad3", "inserted_timestamp": "2024-03-08T04:26:46.616Z", "modified_timestamp": "2024-03-08T04:26:46.616Z", "__row_index": 150}