{"tx_hash": "FzJBrJZc49fmr7Zx4xiDRVysrMM43hrtiuRgSa2QmFN7", "action_id_social": "6CTWkPF8Ut4q1PtRRiKkvyWs7tdSKVMCcYiwyFx9FU4k-0-widget", "block_id": 114181944, "block_timestamp": "2024-03-06T04:08:22.731Z", "signer_id": "alem-lib.near", "widget_name": "Index", "source_code": "const promisify = (caller, resolve, reject, _timeout) => { const timer = 100; const timeout = _timeout || 10000; let timeoutCheck = 0; const find = () => { const response = caller(); if (response !== undefined && response !== null) { resolve(response); } else { if (timeoutCheck < timeout) { setTimeout(find, timer); timeoutCheck += timer; } else { if (reject) { reject(null); } } } }; find();};const AlemSpinner = () => { const ldsRipple = styled.keyframes` 0% { top: 36px; left: 36px; width: 0; height: 0; opacity: 0; } 4.9% { top: 36px; left: 36px; width: 0; height: 0; opacity: 0; } 5% { top: 36px; left: 36px; width: 0; height: 0; opacity: 1; } 100% { top: 0px; left: 0px; width: 72px; height: 72px; opacity: 0; } `; const SpinnerContainer = styled.div` display: inline-block; position: relative; width: 80px; height: 80px; div { position: absolute; border: 4px solid #000000; opacity: 1; border-radius: 50%; animation-timing-function: cubic-bezier(0, 0.2, 0.8, 1); animation-name: ${ldsRipple}; animation-duration: 1s; animation-iteration-count: infinite; } div:nth-child(2) { animation-delay: -0.5s; } `; return ( <div style={{ margin: \"auto\", paddingTop: \"236px\", width: \"100%\" }}> <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", }} > <SpinnerContainer> <div></div> <div></div> </SpinnerContainer> </div> </div> );};State.init({ alemStoreReady: false, alemRouteSystemInitialized: false, alemRouteBlocked: true, alemFontsLoaded: false, alemFontsBody: \"\", });if (!state.alemStoreReady) { promisify( () => Storage.privateGet(\"alem:store\"), (storeData) => { if (Object.keys(storeData).length > 1) { State.update({ alemStoreReady: true, ...storeData, stores: storeData?.stores || [], }); } else { State.update({ alemStoreReady: true, stores: [] }); } }, () => { State.update({ alemStoreReady: true, stores: [] }); }, 300, );}if (!state.alemStoreReady) { return \"\";}const removeAlemPropsFromState = (stateObj) => { delete stateObj.alemStoreReady; delete stateObj.alemRouteSystemInitialized; delete stateObj.alemFontsLoaded; delete stateObj.alemFontsBody; return stateObj;};const ALEM_USESTORE_KEY_SEPARATOR = \"::\";const createStore = (storeKey, obj) => { if (!state.stores.includes(storeKey) && obj && state.alemStoreReady) { const initParsedObj = {}; Object.keys(obj).forEach( (key) => (initParsedObj[`${storeKey}${ALEM_USESTORE_KEY_SEPARATOR}${key}`] = obj[key]), ); const updatedStores = state.stores ? [...state.stores, storeKey] : [storeKey]; const updatedState = removeAlemPropsFromState({ ...state, ...initParsedObj, stores: updatedStores, }); State.update(updatedState); Storage.privateSet(\"alem:store\", updatedState); }};const useStore = (storeKey) => { const getParsedObj = {}; Object.keys(state).forEach((key) => { if (key.includes(`${storeKey}${ALEM_USESTORE_KEY_SEPARATOR}`)) { getParsedObj[ key.replace(`${storeKey}${ALEM_USESTORE_KEY_SEPARATOR}`, \"\") ] = state[key]; } }); return { ...getParsedObj, update: (updateObj) => { if (state.alemStoreReady) { const updateParsedObj = {}; Object.keys(updateObj).forEach( (key) => (updateParsedObj[ `${storeKey}${ALEM_USESTORE_KEY_SEPARATOR}${key}` ] = updateObj[key]), ); State.update(updateParsedObj); const updatedState = removeAlemPropsFromState({ ...state }); Storage.privateSet( \"alem:store\", removeAlemPropsFromState(updatedState), ); } }, };};const clearStore = () => { Storage.privateSet(\"alem:store\", {});};const getStore = () => { const storesData = {}; if (state.stores) { const stateKeys = Object.keys(state); state.stores.forEach((storeKey) => { if (!storeKey.includes(\"alem:\")) { stateKeys.forEach((stateKey) => { if (stateKey.includes(storeKey)) { if (!storesData[storeKey]) { storesData[storeKey] = {}; } storesData[storeKey][ stateKey.replace(`${storeKey}${ALEM_USESTORE_KEY_SEPARATOR}`, \"\") ] = state[stateKey]; } }); } }); } return storesData;};createStore(\"alem:routes\", { activeRoute: \"\", type: \"URLBased\", routes: [],});const useAlemLibRoutesStore = () => useStore(\"alem:routes\");const Routes = ({ routes, type }) => { const { activeRoute, update } = useAlemLibRoutesStore(); const routeType = type || \"URLBased\"; useEffect(() => { const bosProps = props; if (routes) { update({ routes: routes.map((route) => route.path), type: routeType, ...(bosProps.path && routeType === \"URLBased\" && state.alemRouteBlocked ? { activeRoute: bosProps.path } : { activeRoute: state.alemRouteSystemInitialized ? activeRoute : \"\", }), }); State.update({ alemRouteSystemInitialized: true, alemRouteBlocked: true, }); } }, []); if (activeRoute === \"\") { const Component = routes[0].component; return <Component />; } const Component = routes.find( (route) => route.path === activeRoute, )?.component; if (Component) { return <Component />; } return \"\";};const navigate = (routePath) => { const { routes, update } = useAlemLibRoutesStore(); if (routes.includes(routePath)) { State.update({ alemRouteBlocked: false }); update({ activeRoute: routePath }); }};const RouteLink = ({ to, children }) => { const { type } = useAlemLibRoutesStore(); if (type === \"URLBased\") { return ( <a style={{ cursor: \"pointer\", textDecoration: \"none\" }} href={`?path=${to}`} > {children} </a> ); } const onClickHandler = () => { navigate(to); }; return ( <div style={{ cursor: \"pointer\", textDecoration: \"none\" }} onClick={onClickHandler} > {children} </div> );};const createRoute = (path, component) => ({ path, component });const useParams = () => { if (Object.keys(props).includes(\"path\")) { delete props.path; } return props;};const useLocation = () => { const { activeRoute, routes } = useAlemLibRoutesStore(); return { pathname: activeRoute, routes, };};const alemCssBody = `.App { text-align: center;}.App-logo { height: 10vmin; pointer-events: none; margin-bottom: 20px;}@media (prefers-reduced-motion: no-preference) { .App-logo { animation: App-logo-spin infinite 10s linear; }}.App-header { min-height: 80vh; display: flex; flex-direction: column; align-items: center; justify-content: center; font-size: calc(10px + 2vmin); color: white; img { border-radius: 999px; } p { font-size: 34px; font-family: DisplayOTF, sans-serif; }}.App-link { color: #61b6fb; font-size: 24px; font-family: DisplayOTF, sans-serif;}@keyframes App-logo-spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); }}.App-bg { background-color: #282c34; background-image: linear-gradient(180deg, #525a6b 0%, #000000 100%); position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: -2;}`;const loadFonts = (fonts) => { if (!fonts && !state.alemFontsLoaded) { return; } let fontsBody = \"\"; const fontsTotal = fonts.length; let loadedFonts = 0; const loadFont = (fontURL) => { asyncFetch(fontURL).then((response) => { fontsBody += response.body; loadedFonts += 1; if (loadedFonts === fontsTotal) { State.update({ alemFontsLoaded: true, alemFontsBody: fontsBody }); } }); }; fonts.forEach((fontURL) => { loadFont(fontURL); }); return state.alemFontsLoaded;};const AlemTheme = styled.div` ${state.alemFontsBody} ${alemCssBody}`;const App = () => { const fontsLoaded = loadFonts([\"https://fonts.cdnfonts.com/css/display\"]); const Texts = () => ( <> <p> Edit <span>src/App.tsx</span> and save to reload. </p> <a className=\"App-link\" href=\"https://near.org/alem-lib.near/widget/Index\" target=\"_blank\" rel=\"noopener noreferrer\" > Learn Alem </a> </> ); return ( <div> <div className=\"App\"> <div className=\"App-header\"> <img src=\"https://ipfs.near.social/ipfs/bafkreicjdgat5xsw7vxbosoyygermawhkfi2by3ovg7c6tumrayn4rimty\" className=\"App-logo\" alt=\"logo\" /> {fontsLoaded ? <Texts /> : <Spinner />} </div> </div> <div className=\"App-bg\" /> </div> );};const Spinner = () => ( <div className=\"spinner-border\" role=\"status\"> <span className=\"visually-hidden\">Loading...</span> </div>);return ( <AlemTheme> <App /> </AlemTheme>);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/alem-lib.near/widget/Index", "fact_widget_deployments_id": "fbf3990991c3cc0e9c8be4e8eea3e73f", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 142}