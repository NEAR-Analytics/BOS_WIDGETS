{"tx_hash": "AKqQdK6qCU7rtFmos37i7fa9denk9L4yVvexDPqxCNQo", "action_id_social": "AfrH3iLo2sWsRJEpRMzYkRdU7o1iyqQwMk2sgr51wBLL-0-widget", "block_id": 116100291, "block_timestamp": "2024-04-04T07:45:21.746Z", "signer_id": "its4d2.near", "widget_name": "storage_management", "source_code": "const { accountId } = context;\nconst rpcServer = \"https://1rpc.io/near\";\n\nif (!accountId) return \"Please login\";\n\nconst txs = [...(state?.txs ?? [])];\nlet storageDeposits = [...(state?.storageDeposits ?? [])];\nState.init({\n  txs,\n  page: state?.page ?? 1,\n  doneTxs: state?.doneTxs ?? false,\n  storageDeposits,\n  doneRpc: state?.doneRpc ?? false,\n  language: \"en\",\n  expandedContracts: state?.expandedContracts ?? {},\n});\n\nconst translations = {\n  en: {\n    title: \"Storage Management\",\n    description:\n      \"This BOS app allows you to free unused Near that you have deposited for storage staking.\",\n    loadingTxs: \"Loading transactions...\",\n    scanningTxs: \"Scanning transactions...\",\n    remaining: \"Remaining\",\n    totalButton: \"Free {{amount}} NEAR from {{count}} contracts\",\n    staked: \"Staked\",\n    available: \"Available\",\n    freeButton: \"Free {{amount}} NEAR\",\n    unregisterButton: \"Unregister account for {{amount}} NEAR\",\n  },\n  zh: {\n    title: \"Storage Management\",\n    description: \"\u9019\u500b BOS \u61c9\u7528\u7a0b\u5f0f\u53ef\u4ee5\u8b93\u4f60\u91cb\u653e\u70ba\u5132\u5b58\u62b5\u62bc\u4f46\u672a\u4f7f\u7528\u7684 NEAR\u3002\",\n    loadingTxs: \"\u6b63\u5728\u8f09\u5165\u4ea4\u6613...\",\n    scanningTxs: \"\u6b63\u5728\u6383\u63cf\u4ea4\u6613...\",\n    remaining: \"\u5269\u9918\",\n    totalButton: \"\u5f9e {{count}} \u500b\u5408\u7d04\u4e2d\u91cb\u653e {{amount}} NEAR\",\n    staked: \"\u5df2\u62b5\u62bc\",\n    available: \"\u53ef\u7528\",\n    freeButton: \"\u91cb\u653e {{amount}} NEAR\",\n    unregisterButton: \"\u70ba {{amount}} NEAR \u8a3b\u92b7\u5e33\u6236\",\n  },\n  fr: {\n    title: \"Storage Management\",\n    description:\n      \"Cette application BOS vous permet de lib\u00e9rer les NEAR inutilis\u00e9s que vous avez d\u00e9pos\u00e9s pour le staking de stockage.\",\n    loadingTxs: \"Chargement des transactions...\",\n    scanningTxs: \"Analyse des transactions...\",\n    remaining: \"Restant\",\n    totalButton: \"Lib\u00e9rer {{amount}} NEAR de {{count}} contrats\",\n    staked: \"Engag\u00e9\",\n    available: \"Disponible\",\n    freeButton: \"Lib\u00e9rer {{amount}} NEAR\",\n    unregisterButton: \"D\u00e9sinscription du compte pour {{amount}} NEAR\",\n  },\n};\n\nconst onLanguageChange = (language) => {\n  State.update({ language });\n};\n\nconst Centered = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  height: 100vh;\n  padding-top: 33vh;\n`;\n\nconst Spinner = styled.span`\n  display: inline-block;\n  width: 2rem;\n  height: 2rem;\n  vertical-align: text-bottom;\n  border: 0.25em solid currentColor;\n  border-right-color: transparent;\n  border-radius: 50%;\n  animation: spinner-border 0.75s linear infinite;\n  margin-bottom: 1rem;\n\n  @keyframes spinner-border {\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nif (!state.doneTxs) {\n  asyncFetch(\n    `https://api.nearblocks.io/v1/account/${accountId}/txns?method=storage_deposit&order=desc&page=${state.page}&per_page=25`\n  ).then((res) => {\n    if (\n      !res.ok ||\n      !Array.isArray(res.body?.txns) ||\n      res.body.txns.length === 0\n    ) {\n      State.update({\n        doneTxs: true,\n      });\n      return;\n    }\n    State.update({\n      txs: txs.concat(res.body.txns),\n      page: state.page + 1,\n    });\n  });\n  return (\n    <Centered>\n      <Spinner />\n      <div>{translations[state.language].loadingTxs}</div>\n    </Centered>\n  );\n}\n\nif (!state.doneRpc) {\n  const tx = txs.pop();\n  asyncFetch(rpcServer, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"tx\",\n      params: [tx.transaction_hash, tx.predecessor_account_id],\n    }),\n  }).then((res) => {\n    if (!res.ok || !Array.isArray(res.body.result?.transaction?.actions)) {\n      State.update({\n        doneRpc: true,\n      });\n      return;\n    }\n    const storageDeposit = res.body.result.transaction.actions.find(\n      (action) => {\n        const args = action.FunctionCall?.args;\n        if (args == null) return false;\n        const actionArgs = JSON.parse(Buffer.from(args, \"base64\").toString());\n        return actionArgs.receiver_id === accountId;\n      }\n    );\n    if (storageDeposit != null) {\n      storageDeposits.push(tx.receiver_account_id);\n    }\n    const doneRpc = txs.length === 0;\n    if (doneRpc) {\n      storageDeposits = Array.from(new Set(storageDeposits));\n    }\n    State.update({\n      txs: [...txs],\n      storageDeposits: [...storageDeposits],\n      doneRpc,\n    });\n  });\n  return (\n    <Centered>\n      <Spinner />\n      <div>\n        {translations[state.language].scanningTxs}\n        <br />\n        {translations[state.language].remaining}: {txs.length}\n      </div>\n    </Centered>\n  );\n}\n\nconst storageBalances = {};\nfor (const contractId of state.storageDeposits) {\n  try {\n    const storageBalanceOf = Near.view(contractId, \"storage_balance_of\", {\n      account_id: accountId,\n    });\n    if (storageBalanceOf != null) {\n      storageBalances[contractId] = storageBalanceOf;\n    }\n  } catch (err) {}\n}\n\nlet totalAvailable = Big(\"0\");\nfor (const storageBalanceOf of Object.values(storageBalances)) {\n  if (\n    !storageBalanceOf ||\n    !storageBalanceOf.total ||\n    !storageBalanceOf.available\n  ) {\n    continue;\n  }\n  totalAvailable = totalAvailable.plus(storageBalanceOf.available);\n}\ntotalAvailable = totalAvailable.div(Big(10).pow(24)).round(3).toString();\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem;\n  max-width: 600px;\n  margin: 0 auto;\n  background-color: #f8f9fa;\n  border-radius: 10px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n`;\n\nconst TitleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  width: 100%;\n`;\n\nconst Title = styled.h1`\n  font-size: 2rem;\n  font-weight: bold;\n  text-align: center;\n  margin-top: 4rem;\n  margin-bottom: 1.5rem;\n`;\n\nconst LanguageSelector = styled.div`\n  position: absolute;\n  top: 0rem;\n  right: 1rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  cursor: pointer;\n`;\n\nconst Flag = styled.span`\n  font-size: 1.5rem;\n`;\n\nconst Text = styled.p`\n  font-size: 1rem;\n  text-align: center;\n  margin-bottom: 1.5rem;\n`;\n\nconst FormGroup = styled.div`\n  margin-top: 2rem;\n  width: 100%;\n`;\n\nconst Label = styled.label`\n  font-size: 1rem;\n  font-weight: bold;\n`;\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n`;\n\nconst Button = styled.button`\n  padding: 0.5rem 1rem;\n  font-size: 1rem;\n  color: white;\n  background-color: #007bff;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n  margin-top: 0.5rem;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n\nconst ContractCard = styled.div`\n  background-color: #ffffff;\n  border-radius: 10px;\n  padding: 1rem;\n  margin-bottom: 1rem;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  width: 100%;\n`;\n\nconst ContractHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  cursor: pointer;\n`;\n\nconst ContractDetails = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  margin-top: 1rem;\n`;\n\nconst storageWithdraw = (contractId) => {\n  Near.call(contractId, \"storage_withdraw\", {}, \"30000000000000\", \"1\");\n};\n\nconst storageWithdrawAll = () => {\n  Near.call(\n    Object.entries(storageBalances)\n      .filter(\n        ([_, storageBalanceOf]) =>\n          storageBalanceOf != null &&\n          !!storageBalanceOf.total &&\n          !!storageBalanceOf.available &&\n          Number(storageBalanceOf.available) > 0\n      )\n      .map(([contractId]) => ({\n        contractName: contractId,\n        methodName: \"storage_withdraw\",\n        deposit: \"1\",\n      }))\n  );\n};\n\nconst storageUnregister = (contractId) => {\n  Near.call(contractId, \"storage_unregister\", {}, \"30000000000000\", \"1\");\n};\n\nconst toggleContract = (contractId) => {\n  State.update({\n    expandedContracts: {\n      ...state.expandedContracts,\n      [contractId]: !state.expandedContracts[contractId],\n    },\n  });\n};\n\nconst renderStorageInfos = () =>\n  Object.entries(storageBalances)\n    .filter(\n      ([_, storageBalanceOf]) =>\n        storageBalanceOf != null &&\n        !!storageBalanceOf.total &&\n        !!storageBalanceOf.available\n    )\n    .map(([contractId, storageBalanceOf]) => {\n      const total = Big(storageBalanceOf.total)\n        .div(Big(10).pow(24))\n        .round(3)\n        .toString();\n      const available = Big(storageBalanceOf.available)\n        .div(Big(10).pow(24))\n        .round(3)\n        .toString();\n      return (\n        <ContractCard key={contractId}>\n          <ContractHeader onClick={() => toggleContract(contractId)}>\n            <Label>{contractId}</Label>\n            <span>{state.expandedContracts[contractId] ? \"\u25b2\" : \"\u25bc\"}</span>\n          </ContractHeader>\n          {state.expandedContracts[contractId] && (\n            <ContractDetails>\n              <div>\n                {translations[state.language].staked}: {total}\n              </div>\n              <div>\n                {translations[state.language].available}: {available}\n              </div>\n              <ButtonGroup>\n                {storageBalanceOf.available &&\n                  Number(storageBalanceOf.available) > 0 && (\n                    <Button onClick={() => storageWithdraw(contractId)}>\n                      {translations[state.language].freeButton.replace(\n                        \"{{amount}}\",\n                        available\n                      )}\n                    </Button>\n                  )}\n                <Button onClick={() => storageUnregister(contractId)}>\n                  {translations[state.language].unregisterButton.replace(\n                    \"{{amount}}\",\n                    total\n                  )}\n                </Button>\n              </ButtonGroup>\n            </ContractDetails>\n          )}\n        </ContractCard>\n      );\n    });\n\nreturn (\n  <Wrapper>\n    <TitleWrapper>\n      <Title>{translations[state.language].title}</Title>\n      <LanguageSelector>\n        <Flag onClick={() => onLanguageChange(\"en\")}>\ud83c\uddfa\ud83c\uddf8</Flag>\n        <Flag onClick={() => onLanguageChange(\"fr\")}>\ud83c\uddeb\ud83c\uddf7</Flag>\n        <Flag onClick={() => onLanguageChange(\"zh\")}>\ud83c\udded\ud83c\uddf0</Flag>\n      </LanguageSelector>\n    </TitleWrapper>\n    <Text>{translations[state.language].description}</Text>\n    {context.accountId ? (\n      <>\n        {!state.doneTxs || !state.doneRpc ? (\n          <Centered>\n            <Spinner />\n            <div>\n              {!state.doneTxs\n                ? translations[state.language].loadingTxs\n                : translations[state.language].scanningTxs}\n              {!state.doneRpc && (\n                <>\n                  <br />\n                  {translations[state.language].remaining}: {txs.length}\n                </>\n              )}\n            </div>\n          </Centered>\n        ) : (\n          <>\n            <Button onClick={() => storageWithdrawAll()}>\n              {translations[state.language].totalButton\n                .replace(\"{{amount}}\", totalAvailable)\n                .replace(\"{{count}}\", state.storageDeposits.length)}\n            </Button>\n            <FormGroup>{renderStorageInfos()}</FormGroup>\n          </>\n        )}\n      </>\n    ) : (\n      <Text\n        style={{\n          color: \"#856404\",\n          backgroundColor: \"#fff3cd\",\n          padding: \"1rem\",\n          borderRadius: \"5px\",\n        }}\n      >\n        {translations[state.language].loginPrompt}\n      </Text>\n    )}\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/its4d2.near/widget/storage_management", "fact_widget_deployments_id": "1adc67a1a0b6b66b1e5796540d785118", "inserted_timestamp": "2024-04-04T09:39:22.424Z", "modified_timestamp": "2024-04-04T09:39:22.424Z", "__row_index": 2}