{"tx_hash": "4DPfa2Szt9jnm61uoikkEyW2eGBiV9bxPK1BZv4nXcy3", "action_id_social": "G4PdPPSSWG67diJYS3YYH7ViRGJhzK7DZ9WL7kPYehhs-0-widget", "block_id": 96528299, "block_timestamp": "2023-07-15T11:58:16.183Z", "signer_id": "ndcui.sking.near", "widget_name": "Data.Balances", "source_code": "const NDCUI_ACCOUNT = props.NDCUI_ACCOUNT ?? \"ndcui.sking.near\";\n\nconst balances = props.balances; // expected to be in Pikespeak.ai balances API format\nconst showTable = props.showTable ?? true;\n\nif (!balances) {\n  const baseApi = \"https://api.pikespeak.ai\";\n  const publicApiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\n  const fetchApiConfig = {\n    mode: \"cors\",\n    headers: {\n      \"x-api-key\": publicApiKey,\n    },\n  };\n  const res = fetch(\n    `${baseApi}/account/balances?accounts=${[\n      props.accountId ?? context.accountId ?? \"bobo.near\",\n    ]}`,\n    fetchApiConfig\n  );\n  if (!res.body) {\n    return \"Loading...\";\n  }\n  balances = res.body;\n}\n\nconst colors = props.colors ?? [\n  \"#4498E0\",\n  \"#FFD50D\",\n  \"#F29BC0\",\n  \"#82E299\",\n  \"#F19D38\",\n];\n\n// Parsing the data to the format expected by the chart\nconst balanceData = balances.balancesTotal.map((balance) => balance.usdPrice);\nconst balanceLabels = balances.balancesTotal.map((balance) => balance.contract);\n\n// fill the rest of colors if balanceData.length > colors.length\nif (balanceData.length > colors.length) {\n  for (let i = colors.length; i < balanceData.length; i++) {\n    colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n  }\n}\n\n// format to small characters like 200k, 200m, 200b...\nconst formatNumber = (num) => {\n  if (num >= 1000000000) {\n    return (num / 1000000000).toFixed(1).replace(/\\.0$/, \"\") + \"b\";\n  }\n  if (num >= 1000000) {\n    return (num / 1000000).toFixed(1).replace(/\\.0$/, \"\") + \"m\";\n  }\n  if (num >= 1000) {\n    return (num / 1000).toFixed(1).replace(/\\.0$/, \"\") + \"k\";\n  }\n  return num;\n};\n\nconst totalUsd = formatNumber(balances.totalUsd);\n\nconst chartData = {\n  labels: balanceLabels,\n  datasets: [\n    {\n      data: balanceData,\n      label: \"Balance in USD\",\n      backgroundColor: colors,\n      hoverOffset: 4,\n    },\n  ],\n};\n\nconst chartOptions = {\n  type: \"doughnut\",\n  options: {\n    cutout: \"66%\",\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n  },\n};\n\nconst Doughnut = styled.div`\n  width: 300px;\n  height: 300px;\n  position: relative;\n\n  .middle {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    text-align: center;\n\n    .big {\n      font-size: 30px;\n      font-weight: bold;\n      display: block;\n    }\n\n    .small {\n      font-size: 15px;\n      color: #999;\n    }\n  }\n`;\n\nconst Table = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  min-width: 300px;\n\n  .item {\n    padding: 10px 0;\n    border-bottom: 1px solid #eee;\n    font-size: 14px;\n    color: #999;\n    display: grid;\n    grid-template-columns: 20px 1fr 1fr 1fr;\n    align-items: center;\n    gap: 10px;\n  }\n\n  .item > span:nth-child(2) {\n    text-transform: lowercase;\n    color: #000;\n    // ellipsis\n    max-width: 200px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  .item > span:nth-child(3) {\n    text-align: center;\n  }\n\n  .item > span:nth-child(4) {\n    text-align: end;\n  }\n\n  .ball {\n    width: 15px;\n    height: 15px;\n    border-radius: 50%;\n  }\n`;\n\nreturn (\n  <div className=\"d-flex flex-wrap gap-3 justify-content-center align-content-center\">\n    <Doughnut>\n      <Widget\n        src={`${NDCUI_ACCOUNT}/widget/Data.ChartJs`}\n        props={{ chartData, chartOptions }}\n      />\n      <div className=\"middle\" title={`Total Balance: $${totalUsd}`}>\n        <span className=\"big\">${totalUsd}</span>\n        <span className=\"small\">Balance in USD</span>\n      </div>\n    </Doughnut>\n    <Table>\n      {balances.balancesTotal.map((balance, i) => {\n        return (\n          <div className=\"item\">\n            <span\n              className=\"ball\"\n              style={{\n                background: colors[i],\n              }}\n            ></span>\n            <span title={balance.contract}>{balance.contract}</span>\n            <span title={`$${Number(balance.usdPrice).toFixed(2)}`}>\n              ${formatNumber(Number(balance.usdPrice).toFixed(2))}\n            </span>\n            <span title={`${Number(balance.amount)}`}>\n              {Number(balance.amount).toFixed(2)}\n              {balance.symbol}\n            </span>\n          </div>\n        );\n      })}\n    </Table>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ndcui.sking.near/widget/Data.Balances", "fact_widget_deployments_id": "a348ee7b3eedb880dfaec3fbb79bcde5", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 3}