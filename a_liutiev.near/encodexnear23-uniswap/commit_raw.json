{"tx_hash": "83fwbRcFtuPNZFFLakuxoMr65xbsKG9wKgWdYrLyQKfy", "action_id_social": "DPPizZ3RLUhf74Y8mSyT74qsWc6x7hE1oZonRoWqMkTC-0-widget", "block_id": 103400120, "block_timestamp": "2023-10-15T02:05:05.760Z", "signer_id": "a_liutiev.near", "widget_name": "encodexnear23-uniswap", "source_code": "const uniswapV2RouterContract = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\nconst tokenAContractAddress = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"; //WETH\nconst tokenBContractAddress = `0xdac17f958d2ee523a2206206994597c13d831ec7`; //USDT\nconst lptokenaddresss = \"0xb4e16d0168e52d35cacd2c6185b44281ec28c9dc\"; //usdt weth\nconst apiurl =\n  \"https://api.etherscan.io/api?module=contract&action=getabi&address\";\nconst apikey = \"HXXJWINJIBIRGIIUY9Q9FZ2G377BWEEJAK\";\n\nconst tokenAABI = fetch(`${apiurl}=${tokenAContractAddress}&apikey=${apikey}`);\nconst tokenBABI = fetch(`${apiurl}=${tokenBContractAddress}&apikey=${apikey}`);\nconst lpABI = fetch(`${apiurl}=${lptokenaddresss}&apikey=${apikey}`);\nconst uniswapABI = fetch(\n  \"https://unpkg.com/@uniswap/v2-periphery@1.1.0-beta.0/build/IUniswapV2Router02.json\"\n);\n\nconst tokenDecimalsETH = 18;\nconst tokenDecimalsUSDT = 6;\nconst fixedDecimals = 5;\n\nconst options = [\n  { name: \"WETH\", price: 5, maxAmount: 0.001, minSlippage: 0.01 },\n  { name: \"USDT\", price: 0, maxAmount: 1.5483, minSlippage: 0.01 },\n];\n\nState.init({\n  options: options,\n  coinA: options[0],\n  coinB: options[1],\n  feeTier: 0.05,\n  showButtons: false,\n  priceMinA: 0,\n  priceMinB: 0,\n  web3connectLabel: \"Connect Wallet\",\n  liquidityResult: null,\n  liquidityError: null,\n  gasPrice: null,\n  estimatedGasLimit: null,\n});\n\nconst liquidityProps = {\n  tokenDecimals: tokenDecimalsETH,\n  fixedDecimals: fixedDecimals,\n};\n\nconst provider = Ethers.provider();\nconst signer = Ethers.provider();\nconst gas = {\n  gasPrice: ethers.utils.parseUnits(\"9\", tokenDecimalsETH / 2),\n  gasLimit: 250000,\n};\n\nconst uniContract = new ethers.Contract(\n  uniswapV2RouterContract,\n  uniswapABI.body.abi,\n  provider.getSigner()\n);\n\nconst getDeadline = () => {\n  return ethers.BigNumber.from(\n    Math.floor(Date.now() / 1000) + offsetSeconds\n  ).toHexString();\n};\n\nlet amountADesired = ethers.utils\n  .parseUnits(\n    parseFloat(state.coinA.maxAmount).toFixed(fixedDecimals),\n    tokenDecimalsETH\n  )\n  .toHexString();\n\nlet amountBDesired = ethers.utils\n  .parseUnits(\n    parseFloat(state.coinB.maxAmount).toFixed(fixedDecimals + 3),\n    tokenDecimalsUSDT\n  )\n  .toHexString();\n\nlet amountAMin = ethers.utils\n  .parseUnits(\n    parseFloat(state.coinA.maxAmount * (1 - state.coinA.minSlippage)).toFixed(\n      fixedDecimals\n    ),\n    tokenDecimalsETH\n  )\n  .toHexString();\n\nlet amountBMin = ethers.utils\n  .parseUnits(\n    parseFloat(state.coinB.maxAmount * (1 - state.coinB.minSlippage)).toFixed(\n      fixedDecimals\n    ),\n    tokenDecimalsUSDT\n  )\n  .toHexString();\n\nlet lpAmountRaw = \"0.00000001663\";\nlet lpAmount = ethers.utils\n  .parseUnits(lpAmountRaw, tokenDecimalsETH)\n  .toHexString();\n\nlet to = state.sender;\nlet tokenAabi = tokenAABI.body.result;\nlet tokenBabi = tokenBABI.body.result;\nlet lpabi = lpABI.body.result;\nlet pair;\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n        font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n        ${cssFont}\n        ${css}\n        .container {\n            display: flex; justify-content: space-between;align-items: center; margin-bottom: 10px;\n          }\n        .centered-container { display: flex; justify-content: center; align-items: center;margin-top: 10px; margin-bottom: 10px;\n          }\n    `,\n  });\n}\n\nconst Theme = state.theme;\nconst web3connectLabel = state.web3connectLabel || \"n/a\";\n\n// FRONT END CONTROLS\nconst handleIncrement = () => {\n  State.update((prev) => ({ price: prev.price + 0.1 }));\n};\n\nconst handleDecrement = () => {\n  if (state.price > 0) State.update((prev) => ({ price: prev.price - 0.1 }));\n};\n\nconst handleMaxClick = () => {\n  console.log(\"MAX clicked!\");\n  // Add functionality for max click here\n};\n\nconst handleApprove = () => {\n  console.log(\"Approve clicked!\");\n  // Add functionality for approve here\n};\n\nconst updateOptionPrice = (name, newPrice) => {\n  const updatedOptions = state.options.map((option) => {\n    if (option.name === name) {\n      return { ...option, price: newPrice };\n    }\n    return option;\n  });\n  State.update({ options: updatedOptions });\n};\n\nconst toggleShowButtons = () => {\n  State.update({ showButtons: !state.showButtons });\n};\n\n// HELPER FUNCTIONS/STATE\nif (state.txCost === undefined) {\n  const gasEstimate = ethers.BigNumber.from(1875000);\n  const gasPrice = ethers.BigNumber.from(1500000000);\n\n  const gasCostInWei = gasEstimate.mul(gasPrice);\n  const gasCostInEth = ethers.utils.formatEther(gasCostInWei);\n\n  let responseGql = fetch(\n    \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\n    {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `{\n          bundle(id: \"1\" ) {\n            ethPrice\n          }\n        }`,\n      }),\n    }\n  );\n\n  if (!responseGql) return \"\";\n\n  const ethPriceInUsd = responseGql.body.data.bundle.ethPrice;\n  const txCost = Number(gasCostInEth) * Number(ethPriceInUsd);\n  State.update({ txCost: `$${txCost.toFixed(2)}` });\n}\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    console.log(\"set sender\", accounts[0]);\n  }\n}\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nconst addLiquidityUni = () => {\n  const tokenAcontract = new ethers.Contract(\n    tokenAContractAddress,\n    tokenAabi,\n    provider.getSigner()\n  );\n\n  tokenAcontract\n    .approve(uniswapV2RouterContract, amountADesired)\n    .then((response) => {\n      console.log(\"response token A GOOD --------\", response);\n    })\n    .catch((error) => {\n      console.log(\"Error A:\", error);\n    });\n\n  const tokenBcontract = new ethers.Contract(\n    tokenBContractAddress,\n    tokenBabi,\n    provider.getSigner()\n  );\n  tokenBcontract\n    .approve(uniswapV2RouterContract, amountBDesired, gas)\n    .then((response) => {\n      console.log(\"response token B GOOD --------\", response);\n      uniContract\n        .addLiquidity(\n          tokenAContractAddress,\n          tokenBContractAddress,\n          amountADesired,\n          amountBDesired,\n          amountAMin,\n          amountBMin,\n          to,\n          getDeadline(),\n          gas\n        )\n        .then((response) => {\n          console.log(\"response UNI is \" + JSON.stringify(response));\n        })\n        .catch((error) => {\n          console.log(\"Error:\", error);\n        });\n    })\n    .catch((error) => {\n      console.log(\"Error B:\", error);\n    });\n  return;\n};\n\nconst removeLiquidityUni = () => {\n  const lpTokenContract = new ethers.Contract(\n    lptokenaddresss,\n    lpabi,\n    provider.getSigner()\n  );\n\n  lpTokenContract\n    .approve(uniswapV2RouterContract, lpAmount)\n    .then((response) => {\n      console.log(\"lp token approve GOOD --------\", response);\n      uniContract\n        .removeLiquidity(\n          tokenAContractAddress,\n          tokenBContractAddress,\n          lpAmount,\n          amountAMin,\n          amountBMin,\n          to,\n          getDeadline()\n        )\n        .then((response) => {\n          console.log(\"lp token remove request --------\", response);\n        })\n        .catch((error) => {\n          console.log(\"Error A:\", error);\n        });\n    })\n    .catch((error) => {\n      console.log(\"Error A:\", error);\n    });\n  return;\n};\n\nreturn (\n  <div>\n    <Widget\n      src=\"a_liutiev.near/widget/addLiquidityCard\"\n      props={{ web3connectLabel }}\n    />\n    <div>\n      <button onClick={addLiquidityUni}>Add Liquidity</button>\n\n      {state.liquidityResult && <div>{state.liquidityResult}</div>}\n      {state.liquidityError && (\n        <div style={{ color: \"red\" }}>{state.liquidityError}</div>\n      )}\n      <button onClick={removeLiquidityUni}>Remove Liquidity</button>\n    </div>\n\n    <Theme>\n      <div>\n        <div className=\"container\">\n          <div></div>\n          <div>\n            <Widget\n              src=\"a_liutiev.near/widget/button_web3connect\"\n              props={{ web3connectLabel }}\n            />\n          </div>\n        </div>\n        <div>\n          <br></br>\n        </div>\n\n        <div class=\"card\">\n          <div class=\"card-header\">\n            <div className=\"container\">\n              <div>\n                <p>Pools</p>\n              </div>\n              <div>\n                <button class=\"btn btn-primary m-0 p-1\">\n                  <p>New Position</p>\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <div className=\"centered-container\">\n              <div>\n                <p>Your active V3 liquidity positions will appear here.</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"card-footer\">\n            <div className=\"centered-container\">\n              <p>{getSender()}</p>\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <br></br>\n        </div>\n\n        <div class=\"card\">\n          {/* First div */}\n          <div class=\"card-header p-3\">\n            <div className=\"container\">\n              <div>\n                <a href=\"#\">\u2190</a>\n                <span>Add Liquidity</span>\n              </div>\n              <div>\n                <a href=\"#\">Clear All</a>\n                <span>\n                  <a href=\"#\">\u2699\ufe0f</a>\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Second div */}\n          <div class=\"card-body\">\n            <div className=\"container\">\n              <span>Select Pair</span>\n            </div>\n            <div className=\"container\">\n              <select\n                value={state.coinA.name}\n                onChange={(e) => {\n                  const selectedOption = state.options.find(\n                    (option) => option.name === e.target.value\n                  );\n                  State.update({ coinA: selectedOption });\n                }}\n              >\n                {state.options.map((option) => (\n                  <option value={option.name} key={option.name}>\n                    {option.name}\n                  </option>\n                ))}\n              </select>\n\n              <select\n                value={state.coinB.name}\n                onChange={(e) => {\n                  const selectedOption = state.options.find(\n                    (opt) => opt.name === e.target.value\n                  );\n                  State.update({ coinB: selectedOption });\n                }}\n              >\n                {state.options\n                  .filter((option) => option.name === \"banana\")\n                  .concat(\n                    state.options.filter((option) => option.name !== \"banana\")\n                  )\n                  .map((option) => (\n                    <option value={option.name} key={option.name}>\n                      {option.name}\n                    </option>\n                  ))}\n              </select>\n            </div>\n            <div className=\"container\">\n              <input\n                type=\"text\"\n                value={state.feeTier}\n                placeholder=\"Fee Tier\"\n                onChange={(e) => State.update({ feeTier: e.target.value })}\n              />\n              <button onClick={toggleShowButtons}>Edit</button>\n            </div>\n            {state.showButtons && (\n              <div className=\"container\">\n                <button onClick={() => State.update({ feeTier: 0.001 })}>\n                  0.01%\n                </button>\n                <button onClick={() => State.update({ feeTier: 0.005 })}>\n                  0.05%\n                </button>\n                <button onClick={() => State.update({ feeTier: 0.003 })}>\n                  0.3%\n                </button>\n                <button onClick={() => State.update({ feeTier: 0.01 })}>\n                  1%\n                </button>\n              </div>\n            )}\n          </div>\n\n          {/* Third div */}\n          <div class=\"card-body\">\n            <div class=\"container\">\n              <span>Set Price Range</span>\n\n              <div>\n                <button>Full Range</button>\n                <button>{state.coinA.name}</button>\n                <button>{state.coinB.name}</button>\n              </div>\n            </div>\n            <div class=\"container\">\n              <span class=\"p-2\">Price</span>\n              <input\n                type=\"number\"\n                value={state.priceMinA}\n                onChange={(e) =>\n                  State.update({ priceMinA: Number(e.target.value) })\n                }\n              />\n            </div>\n            <div class=\"container\">\n              <span class=\"p-2\">Price</span>\n              <input\n                type=\"number\"\n                value={state.priceMinB}\n                onChange={(e) =>\n                  State.update({ priceMinB: Number(e.target.value) })\n                }\n              />\n            </div>\n            <div class=\"container\">\n              <span>Current Price</span>\n              <span>\n                {state.coinA.name} per {state.coinB.name}\n              </span>\n            </div>\n          </div>\n\n          {/* Fourth div */}\n          <div class=\"card-body\">\n            <span>Deposit Amounts</span>\n            <div>\n              <input type=\"text\" />\n              <span>{state.coinA.name}</span>\n              <span>Balance: 100USD</span>\n              <a href=\"#\" onClick={handleMaxClick}>\n                MAX\n              </a>\n            </div>\n            <div>\n              <input type=\"text\" />\n              <span>{state.coinB.name}</span>\n              <span>Balance: 100USD</span>\n              <a href=\"#\" onClick={handleMaxClick}>\n                MAX\n              </a>\n            </div>\n\n            <p>Estimated Transaction Cost: {state.txCost}</p>\n          </div>\n\n          {/* Pill button */}\n          <div class=\"card-footer\">\n            <div className=\"centered-container\">\n              <button\n                style={{ borderRadius: \"20px\", width: \"300px\" }}\n                onClick={handleApprove}\n              >\n                Approve\n              </button>\n            </div>\n          </div>\n        </div>\n        {/* Third div \n            <div>\n                <button>\n                    <p>Show closed positions</p>\n                </button>\n            </div>\n            */}\n      </div>\n      <div class=\"card m-3\">\n        <div class=\"card-header\">\n          <div className=\"centered-container\">\n            <div>\n              <p>Add Liquidity</p>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"card-body\">\n          <div className=\"container\">\n            <div>{state.coinA.name + \" / \" + state.coinB.name}</div>\n            <div>In Range \ud83d\udfe2</div>\n          </div>\n          <div class=\"card m-3 p-3\">\n            <div className=\"container\">\n              <div>{state.coinA.name}</div>\n              <div>{state.coinA.price}</div>\n            </div>\n            <div className=\"container\">\n              <div>{state.coinB.name}</div>\n              <div>{state.coinB.price}</div>\n            </div>\n            <br></br>\n            <div className=\"container\">\n              <div>\n                <p>Fee tier</p>\n              </div>\n              <div>{state.feeTier + \"%\"}</div>\n            </div>\n          </div>\n          <div className=\"container p-2 center\">\n            <div>\n              <p>Selected range</p>\n            </div>\n            <div>\n              <button>{state.coinA.name}</button>\n              <button>{state.coinB.name}</button>\n            </div>\n          </div>\n          <div className=\"container p-2 center\">\n            <div>\n              <p>Selected range</p>\n            </div>\n            <div>\n              <button>{state.coinA.name}</button>\n              <button>{state.coinB.name}</button>\n            </div>\n          </div>\n          <div className=\"container\">\n            <div class=\"card m-3 p-3\">\n              <div className=\"centered-container\">\n                <div>\n                  <p>MIN Price</p>\n                  {state.coinA.name}\n                  {state.coinA.price}\n                  {state.coinA.name + \" per \" + state.coinB.name}\n                  <p>\n                    Your position will be 100% composed of {state.coinA.name} at\n                    this price\n                  </p>\n                </div>\n              </div>\n            </div>\n            <div class=\"card m-3 p-3\">\n              <div className=\"centered-container\">\n                <div>\n                  <p>MAX Price</p>\n                  {state.coinA.name}\n                  {state.coinA.price}\n                  {state.coinA.name + \" per \" + state.coinB.name}\n                  <p>\n                    Your position will be 100% composed of {state.coinA.name} at\n                    this price\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"centered-container\">\n            <div class=\"card m-3 p-3\">\n              <div>\n                <p>MAX Price</p>\n                {state.coinA.name}\n                {state.coinA.price}\n                {state.coinA.name + \" per \" + state.coinB.name}\n                <p>\n                  Your position will be 100% composed of {state.coinA.name} at\n                  this price\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"card-footer\">\n            <div className=\"centered-container\">\n              <button\n                style={{ borderRadius: \"20px\", width: \"300px\" }}\n                onClick={handleApprove}\n              >\n                Approve\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Theme>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/a_liutiev.near/widget/encodexnear23-uniswap", "fact_widget_deployments_id": "8280c4b5bff3fcecff22a43c29356b80", "inserted_timestamp": "2023-10-15T03:38:08.911Z", "modified_timestamp": "2023-10-15T03:38:08.911Z", "__row_index": 1}