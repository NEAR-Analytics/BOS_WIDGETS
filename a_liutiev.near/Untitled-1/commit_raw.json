{"tx_hash": "ChPSegY9Mg8gvqBDwego4Knoyrze7L49eBrxJDh2z9bd", "action_id_social": "51DzywGXTRtVNJfVmcmYMkMFNHSHvMSFQL8xK5qL4rZ5-0-widget", "block_id": 103116885, "block_timestamp": "2023-10-11T09:26:09.999Z", "signer_id": "a_liutiev.near", "widget_name": "Untitled-1", "source_code": "const uniswapV2RouterContract = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\nconst usdcContract = \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\";\nconst ethContract = \"0x73bFE136fEba2c73F441605752b2B8CAAB6843Ec\";\nconst uniswapABI = fetch(\n  \"https://unpkg.com/@uniswap/v2-periphery@1.1.0-beta.0/build/IUniswapV2Router02.json\"\n);\n\nconst sender = \"0x0b95Eaf38E00ab26cB4bA6284726888CF2e5a0e1\";\nconst tokenDecimals = 18;\n\nconst options = [\n  { name: \"ETH\", price: 5, amount: 0.001, min: 0.001 },\n  { name: \"USDC\", price: 0, amount: 0.001, min: 0.001 },\n];\n\nState.init({\n  options: options,\n  coinA: options[0],\n  coinB: options[1],\n  feeTier: 0.05,\n  showButtons: false,\n  priceMinA: 0,\n  priceMinB: 0,\n  web3connectLabel: \"Connect Wallet\",\n  liquidityResult: null,\n  liquidityError: null,\n});\n\nconst iface = new ethers.utils.Interface(uniswapABI.body.abi);\n\nconst addLiquidityUni = () => {\n  State.update({liquidityResult: sender})\n  \n  const router = new ethers.Contract(\n    uniswapV2RouterContract,\n    uniswapABI.body.abi,\n    sender\n  );\n\n    \n\n\n\n  const amountADesired = ethers.utils.parseUnits(state.coinA.amount, tokenDecimals);\n  const amountBDesired = ethers.utils.parseUnits(state.coinB.amount, tokenDecimals);\n  const amountAMin = ethers.utils.parseUnits(state.coinA.min, tokenDecimals);\n  const amountBMin = ethers.utils.parseUnits(state.coinB.min, tokenDecimals);\n  const deadline = Math.floor(Date.now() / 1000) + 3600;\n\n  router.addLiquidity(\n      ethContract,\n      usdcContract,\n      amountADesired,\n      amountBDesired,\n      amountAMin,\n      amountBMin,\n      to,\n      deadline\n    )\n    .then((transaction) => {\n      // Here, the transaction is the pending transaction, not the receipt.\n      console.log(\"Transaction hash is:\", transaction.hash);\n\n      // You can decide if you want to wait for the receipt or not.\n      // To get the receipt, you can return transaction.wait();\n      return transaction.hash;\n    })\n    .then((transactionHash) => {\n      State.update({\n        liquidityResult: `Transaction hash: ${transactionHash}`,\n        liquidityError: null,\n      });\n    })\n    .catch((error) => {\n      State.update({ liquidityError: error.message, liquidityResult: null });\n    });\n};\n\nreturn (\n  <div>\n    <button onClick={addLiquidityUni}>Add Liquidity</button>\n\n    {state.liquidityResult && <div>{state.liquidityResult}</div>}\n    {state.liquidityError && (\n      <div style={{ color: \"red\" }}>{state.liquidityError}</div>\n    )}\n  </div>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/a_liutiev.near/widget/Untitled-1", "fact_widget_deployments_id": "c326bd4ecabaf9c0dc2191269eca3139", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 11}