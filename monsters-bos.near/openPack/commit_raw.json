{"tx_hash": "Ay9JmptSBdfecHkWLFpQjDHcxLkMT1BsjkYdayvD2dFZ", "action_id_social": "GgMNzDhaN9pFRcviJHB5kY5n8gU8rYFNaLbJMWy36Qum-0-widget", "block_id": 103479365, "block_timestamp": "2023-10-16T02:56:44.648Z", "signer_id": "monsters-bos.near", "widget_name": "openPack", "source_code": "//include common\nconst widgetSrc = (component) => {\n  if (context.networkId === \"mainnet\")\n    return `monsters-bos.near/widget/${component}`;\n  else\n    return `monstersdev.testnet/widget/${component}`;\n}\nconst ftContract = (context.networkId === \"mainnet\") ? \"monsters-alpha.near\" : \"dev-1693882284306-75813657022630\";\nconst nftContract = (context.networkId === \"mainnet\") ? \"monsters-nfts.near\" : \"dev-1697387315613-37447934459971\";\n\nconst alphaPacksOwned = Near.view(ftContract, \"ft_balance_of\", {account_id: context.accountId});\nconst isOpenDisabled = (alphaPacksOwned === 0);\nconst nftsOwned = Near.view(nftContract, \"nft_supply_for_owner\", {account_id: context.accountId});\nconst nfts = Near.view(nftContract, \"nft_tokens_for_owner\", {account_id: context.accountId, limit:1000});//{from_index: (nftsOwned-5).toString(), limit:5});\n\nconst sortedNfts = nfts.sort((a, b) => {\n  const dateA = Big(a.metadata.issued_at.replace(\".\", \"\").replace(\"Z\", \"\"));\n  const dateB = Big(b.metadata.issued_at.replace(\".\", \"\").replace(\"Z\", \"\"));\n  return (dateA < dateB) ? 1 : -1;\n});\n\nconst revealNfts = sortedNfts.slice(0, 5);\n\nconst lastOpened = Storage.privateGet(\"lastOpened\");\nconst allowReveal = true;//(sortedNfts.length > 0) && (!lastOpened || (new Date(sortedNfts[0].metadata.issued_at) > new Date(lastOpened)));\n\nState.init({error: null, reveal: [false, false, false, false, false]});\n\nconst CardList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px; // Provides spacing between each card.\n  justify-content: center; // Centers the cards in the middle.\n  padding: 0;\n  list-style-type: none; // Removes bullet points from the ul.\n`;\n\nconst CardLi = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 10px;\n  box-sizing: border-box; // Ensures padding doesn't increase card size.\n  \n  img {\n    cursor: pointer;\n  }\n`;\n\nconst UnrevealedCard = styled.div`\n  border: 3px solid;\n`\nconst StyledCard = styled.div`\n  border: 3px solid;\n\n  ${({ rarity }) => {\n    switch (rarity) {\n      case 'Land':\n        return `\n          border-color: #33FF33;\n          box-shadow: 0 0 10px gold;\n        `;\n      case 'Rare':\n        return `\n          border-color: gold;\n          box-shadow: 0 0 10px gold;\n        `;\n      case 'Uncommon':\n        return 'border-color: #3333FF;';\n      default:\n        return 'border-color: gray;';\n    }\n  }}\n`;\n\nconst openPack = () => {\n  try {\n    Near.call(ftContract, 'open_pack', {}, 300000000000000, 10000000000000000000000);\n  } catch (e) {\n    State.update({error:`Error from NEAR: ${e.message}`});\n  }\n}\n\nconst RevealableCard = ({ index, nft }) => {\n\n  const reveal = (index) => {\n      return () => {\n        let reveal = state.reveal;\n        reveal[index] = true;\n        if(reveal.every((x) => x)) {\n          Storage.privateSet(\"lastOpened\", (new Date()).toISOString());\n          console.log(\"Set last opened\", Storage.privateGet(\"lastOpened\"));\n        }\n        State.update({ ...state, reveal: reveal });\n      };\n  };\n  const rarity = () => {\n    return JSON.parse(nft.metadata.extra).rarity;\n  }\n\n  const getRarityClass = (rarityValue) => {\n    switch(rarityValue) {\n      case 'Land': return 'land-effect';\n      case 'Rare': return 'rare-effect';\n      case 'Uncommon': return 'uncommon-effect';\n      default: return 'common-effect';\n    }\n  };\n\n  const getEffectClass = () => {\n    if (state.reveal[index]) {\n      return `revealed ${getRarityClass(rarity())}`;\n    }\n    return '';\n  };\n\n  return (\n    <CardLi>\n      {\n        (!state.reveal[index]) ? (\n          <>\n          <UnrevealedCard rarity={rarity()}>\n            <img onClick={reveal(index)} src={\"https://nearmonsters.s3.us-west-004.backblazeb2.com/alpha/final/back.png\"} width={278} height={406}/>\n          </UnrevealedCard>\n          <p>{\"Reveal\"}</p>\n          </>\n        ) : (\n          <>\n          <StyledCard rarity={rarity()}>\n            <img className={getEffectClass()} src={nft.metadata.media} width={278} height={406}/>\n          </StyledCard>\n          <p>{rarity()}</p>\n          </>\n        )\n      }\n    </CardLi>\n  );\n};\n\nconsole.log(\"rendering\");\nreturn (\n  <div className=\"App\">\n    <Widget src={widgetSrc(\"header\")}/>\n    <div class=\"container border border-info p-3\">\n      <h3 class=\"text-center\">\n        {state.error && <p className=\"error\">{state.error}</p>}\n        <div>\n          <div>\n            <span class=\"text-decoration-underline\">{alphaPacksOwned}</span> packs owned\n            <button onClick={openPack} disabled={isOpenDisabled}>Open</button>\n            <a href={\"purchase\"}>Buy More</a>\n          </div>\n        </div>\n      </h3>\n      {allowReveal &&\n        <div><p>Your pack is ready!</p>\n          <CardList>\n            {revealNfts.map((nft, index) => (\n              <RevealableCard nft={nft} index={index} />\n            ))}\n          </CardList>\n        </div>\n      }\n    </div>\n  </div>\n)\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/monsters-bos.near/widget/openPack", "fact_widget_deployments_id": "f1980fdb24cf06f61587788ad1f0ee0d", "inserted_timestamp": "2023-10-16T04:37:33.857Z", "modified_timestamp": "2023-10-16T04:37:33.857Z", "__row_index": 0}