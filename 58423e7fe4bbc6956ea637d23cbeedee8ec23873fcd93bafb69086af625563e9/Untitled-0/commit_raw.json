{"tx_hash": "6qtQsYe9ABizjrHhnevLyJNyPvN2Q7MWbFWeP79rqwV9", "action_id_social": "9XrABqpePxC6h44Vs96bvLy7uHyDYzJS8aN2A5YWthQj-0-widget", "block_id": 93405399, "block_timestamp": "2023-06-04T02:50:09.910Z", "signer_id": "58423e7fe4bbc6956ea637d23cbeedee8ec23873fcd93bafb69086af625563e9", "widget_name": "Untitled-0", "source_code": null, "metadata": null, "branch": {"draft": {"": "// Styling\nconst Theme = styled.div`\n  ${\n    fetch(\n      \"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\"\n    ).body\n  }\n`;\n\n// Constants\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\nconst CHAIN_ID_MAP = {\n  5: \"ETH_GOERLI\",\n  137: \"MATIC\",\n};\n\nconst NETWORK_CONFIGS = {\n  ETH_GOERLI: {\n    chainId: \"0x5\",\n    chainName: \"Ethereum(Goerli)\",\n    currency: \"ETH\",\n    swap: \"0x9d340f30af6de05a3909a52f4dcc9350ffb67ecb\",\n  },\n  MATIC: {\n    chainId: \"0x89\",\n    chainName: \"Matic\",\n    currency: \"MATIC\",\n    swap: \"0x7660397e9430ec65eba63684298482a48470d90a\",\n  },\n};\n\nconst ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_notary\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"lockId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Cancelled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"lockId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Executed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"lockId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"toChain\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"payToken\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"payTokenAmount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"buyToken\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"buyTokenAmount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"NewLock\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"lockId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RequestCancel\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"lockId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"recipientLockId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SetRecipient\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"lockId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"digest\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"cancel\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"action\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lockId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"digest\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"checkSign\",\n    outputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"toChainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"payToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"payTokenAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"buyToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"buyTokenAmount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"create\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"toChainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"payToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"payTokenAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"buyToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"buyTokenAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"recipientLockId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"createAndSetRecipient\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"lockId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"digest\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"execute\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"messageHash\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getEthSignedHash\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"lockId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getLockInfo\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"lockId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"string\",\n        name: \"action\",\n        type: \"string\",\n      },\n    ],\n    name: \"hash\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"isRequestCancel\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"lockIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"locks\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"toChainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"payToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"payTokenAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"buyToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"buyTokenAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"executed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"cancelled\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"notary\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"recipients\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"recipientLockId\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"lockId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"requestCancel\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"lockId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"recipientLockId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setRecipient\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\n// State Initialize\nState.init({\n  balance: 0,\n  chainId: undefined,\n  fromChainId: undefined,\n  payAmount: \"0.0001\",\n  toChainId: undefined,\n  buyAmount: \"0.0001\",\n  activeView: \"exchange\",\n  myOrders: [],\n  listedOrders: [],\n  err: undefined,\n  result: \"\",\n});\n\n// prefetch\nconst sender = props.sender || Ethers.send(\"eth_requestAccounts\", [])[0];\n// if (!sender) return <Web3Connect connectLabel=\"Connect with Web3\" />;\n\nif (\n  state.fromChainId === undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((res) => {\n      if (res?.chainId && CHAIN_ID_MAP[res.chainId]) {\n        State.update({\n          chainId: res.chainId,\n          fromChainId: res.chainId,\n          toChainId: Object.keys(CHAIN_ID_MAP).filter(\n            (x) => x !== res.chainId\n          )[0],\n        });\n      } else {\n        State.update({\n          err: (\n            <>\n              <p>Unsupported Network. Available Networks below,</p>\n              <p>{Object.values(CHAIN_ID_MAP).join(\", \")}</p>\n            </>\n          ),\n        });\n      }\n    });\n}\n\nif (sender && state.fromChainId) {\n  Ethers.provider()\n    .getBalance(sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(5) });\n    });\n}\n\nconst ChainSelect = ({ chainIdState, chainIdMap }) => {\n  return (\n    <div className=\"input-group mb-3\" style={{ height: \"40px\" }}>\n      <button\n        className=\"btn btn-outline-secondary dropdown-toggle w-100\"\n        type=\"button\"\n        data-bs-toggle=\"dropdown\"\n        aria-expanded=\"false\"\n      >\n        {CHAIN_ID_MAP[state[chainIdState]]}\n      </button>\n      <ul className=\"dropdown-menu\">\n        {Object.entries(chainIdMap).map(\n          (\n            [chainId, chainName],\n            index // chainId, chainName\n          ) => (\n            <li key={index}>\n              <a\n                className=\"dropdown-item\"\n                href=\"#\"\n                onClick={(e) => {\n                  State.update({ [chainIdState]: chainId });\n                }}\n              >\n                {chainName}\n              </a>\n            </li>\n          )\n        )}\n      </ul>\n    </div>\n  );\n};\n\nconst create = () => {\n  const provider = Ethers.provider();\n  const signer = provider.getSigner();\n  console.log(state.fromChainId);\n  const swap = new ethers.Contract(\n    NETWORK_CONFIGS[CHAIN_ID_MAP[state.fromChainId]].swap,\n    ABI,\n    signer\n  );\n\n  const payAmountPow = ethers.utils\n    .parseUnits(state.payAmount, 18)\n    .toHexString();\n  const buyAmountPow = ethers.utils\n    .parseUnits(state.buyAmount, 18)\n    .toHexString();\n  swap.create(\n    state.toChainId,\n    ZERO_ADDRESS,\n    payAmountPow,\n    ZERO_ADDRESS,\n    buyAmountPow,\n    {\n      value: payAmountPow,\n    }\n  );\n};\n\nconst createAndSetRecipient = (\n  toChainId,\n  payAmount,\n  buyAmount,\n  recipient,\n  lockId\n) => {\n  const provider = Ethers.provider();\n  const signer = provider.getSigner();\n  const swap = new ethers.Contract(\n    NETWORK_CONFIGS[CHAIN_ID_MAP[state.chainId]].swap,\n    ABI,\n    signer\n  );\n\n  console.log(toChainId, payAmount, buyAmount, recipient, lockId);\n\n  const payAmountPow = ethers.utils.parseUnits(payAmount, 0).toHexString();\n  const buyAmountPow = ethers.utils.parseUnits(buyAmount, 0).toHexString();\n\n  console.log(payAmountPow, buyAmountPow);\n  swap.createAndSetRecipient(\n    toChainId,\n    ZERO_ADDRESS,\n    payAmountPow,\n    ZERO_ADDRESS,\n    buyAmountPow,\n    recipient,\n    lockId,\n    {\n      value: payAmountPow,\n    }\n  );\n};\n\nconst loadMyOrders = () => {\n  const myOrders = fetch(\n    \"https://api.studio.thegraph.com/query/47853/test/v0.0.1\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query: `{\n        newLocks(where: {owner: \"${sender}\"}) {\n          lockId\n          payToken\n          payTokenAmount\n          toChain\n          buyToken\n          buyTokenAmount\n          owner\n        }\n      }`,\n      }),\n    }\n  );\n  State.update({ myOrders: myOrders.body.data.newLocks });\n  if (!myOrders.ok) return \"Loading...\";\n};\n\nconst loadListedOrders = () => {\n  const listedOrders = fetch(\n    \"https://api.studio.thegraph.com/query/47853/test/v0.0.1\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query: `{\n        newLocks(where: {and: [{owner_not: \"${sender}\"},{toChain: \"${state.fromChainId}\"}]}) {\n          lockId\n          payToken\n          payTokenAmount\n          toChain\n          buyToken\n          buyTokenAmount\n          owner\n        }\n      }`,\n      }),\n    }\n  );\n  if (!listedOrders.ok) return \"Loading...\";\n  console.log(state.listedOrders);\n  State.update({ listedOrders: listedOrders.body.data.newLocks });\n};\n\nloadMyOrders();\nloadListedOrders();\n\nreturn (\n  <Theme>\n    <div className=\"container-fluid\">\n      <div className=\"navbar bg-body-tertiary border rounded px-3 mb-3\">\n        <a className=\"navbar-brand\" href=\"#\">\n          <h2>Blue Bird Bridge</h2>\n        </a>\n      </div>\n      <div\n        className=\"error_msg\"\n        style={{ display: state.err ? \"block\" : \"none\" }}\n      >\n        <div className=\"btn btn-warning w-100\">{state.err}</div>\n      </div>\n      <div\n        className=\"section\"\n        style={{ display: state.err ? \"none\" : \"block\" }}\n      >\n        <div className=\"row mb-3\">\n          <div className=\"col-12\">\n            <h3>My Account</h3>\n          </div>\n          <div className=\"col\">\n            <div className=\"border rounded p-3\">\n              <div>\n                Address :{\" \"}\n                <span className=\"badge text-bg-warning\">\n                  {sender.slice(0, 6)} ... {sender.slice(-4, sender.length)}\n                </span>\n              </div>\n              <div>\n                Balance : {state.balance}{\" \"}\n                {NETWORK_CONFIGS[CHAIN_ID_MAP[state.chainId]].currency}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"row mb-3\">\n          <div class=\"col-12\">\n            <button\n              className={\n                \"btn \" +\n                (state.activeView === \"exchange\"\n                  ? \"btn-warning\"\n                  : \"btn-secondary\") +\n                \" w-50\"\n              }\n              style={{\n                borderTopRightRadius: \"0\",\n                borderBottomRightRadius: \"0\",\n                float: \"left\",\n              }}\n              onClick={() => {\n                State.update({ activeView: \"exchange\" });\n              }}\n            >\n              Exchange\n            </button>\n            <button\n              className={\n                \"btn \" +\n                (state.activeView === \"dashboard\"\n                  ? \"btn-warning\"\n                  : \"btn-secondary\") +\n                \" w-50\"\n              }\n              style={{\n                borderTopLeftRadius: \"0\",\n                borderBottomLeftRadius: \"0\",\n                float: \"left\",\n              }}\n              onClick={() => {\n                State.update({ activeView: \"dashboard\" });\n              }}\n            >\n              Dashboard\n            </button>\n          </div>\n        </div>\n        <div\n          className=\"exchange\"\n          style={{\n            display: state.activeView === \"exchange\" ? \"block\" : \"none\",\n          }}\n        >\n          <div className=\"row mb-3\">\n            <div className=\"col-12\">\n              <h3>Make Order</h3>\n            </div>\n            <div className=\"col\">\n              <div className=\"border rounded p-3\">\n                <div className=\"row\">\n                  {/* TODO : MAKE ORDER */}\n                  <div className=\"row\">\n                    <div className=\"col-6\">\n                      <h4>From</h4>\n                      {ChainSelect({\n                        chainIdState: \"fromChainId\",\n                        chainIdMap: CHAIN_ID_MAP,\n                      })}\n                    </div>\n                    <div className=\"col-6\">\n                      <h4>\n                        Amount (\n                        {\n                          NETWORK_CONFIGS[CHAIN_ID_MAP[state.fromChainId]]\n                            .currency\n                        }\n                        )\n                      </h4>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"amount to transfer\"\n                        value={state.payAmount}\n                        onChange={(e) => {\n                          State.update({ payAmount: e.target.value });\n                        }}\n                        onFocus\n                      />\n                    </div>\n                    <div className=\"col-6\">\n                      <h4>To</h4>\n                      {ChainSelect({\n                        chainIdState: \"toChainId\",\n                        chainIdMap: CHAIN_ID_MAP,\n                      })}\n                    </div>\n                    <div className=\"col-6\">\n                      <h4>\n                        Amount (\n                        {\n                          NETWORK_CONFIGS[CHAIN_ID_MAP[state.toChainId]]\n                            .currency\n                        }\n                        )\n                      </h4>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"amount to transfer\"\n                        value={state.buyAmount}\n                        onChange={(e) => {\n                          State.update({ buyAmount: e.target.value });\n                        }}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"col-12\">\n                    <button\n                      className=\"btn btn-warning w-100\"\n                      onClick={() => {\n                        create();\n                      }}\n                    >\n                      Place New Order\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"row mb-3\">\n            <div className=\"col-12\">\n              <h3>Listed Orders</h3>\n              {state.listedOrders.map((order) => (\n                <div className=\"col-12 mb-2\">\n                  <div className=\"border rounded p-3\">\n                    <div className=\"row\">\n                      <div className=\"col-9\">\n                        <div>order_id : {order.lockId}</div>\n                        {/**/}\n                        <div>\n                          {\" \"}\n                          Paying{\" \"}\n                          {Big(order.buyTokenAmount)\n                            .div(Big(10).pow(18))\n                            .toFixed(6)}{\" \"}\n                          {\n                            NETWORK_CONFIGS[CHAIN_ID_MAP[order.toChain]]\n                              .currency\n                          }{\" \"}\n                          from {CHAIN_ID_MAP[order.toChain]}\n                        </div>\n                        <div>\n                          {\" \"}\n                          Buying{\" \"}\n                          {Big(order.payTokenAmount)\n                            .div(Big(10).pow(18))\n                            .toFixed(6)}{\" \"}\n                          {\n                            NETWORK_CONFIGS[CHAIN_ID_MAP[state.chainId]]\n                              .currency\n                          }{\" \"}\n                          from {CHAIN_ID_MAP[parseInt(state.chainId)]}\n                        </div>\n                        <div>owner: {order.owner}</div>\n                      </div>\n                      <div className=\"col-3\">\n                        <button\n                          className=\"btn btn-primary w-100 mb-2\"\n                          style={{\n                            float: \"center\",\n                          }}\n                          onClick={() => {\n                            createAndSetRecipient(\n                              state.toChainId,\n                              order.buyTokenAmount,\n                              order.payTokenAmount,\n                              order.owner,\n                              order.lockId\n                            );\n                          }}\n                        >\n                          Take\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n        <div\n          className=\"dashboard\"\n          style={{\n            display: state.activeView === \"dashboard\" ? \"block\" : \"none\",\n          }}\n        >\n          <div className=\"row mb-3\">\n            <div className=\"col-12\">\n              <h3>My Orders</h3>\n              <div className=\"row\">\n                {state.myOrders.map((order) => (\n                  <div className=\"col-12 mb-2\">\n                    <div className=\"border rounded p-3\">\n                      <div className=\"row\">\n                        <div className=\"col-9\">\n                          <div>order_id : {order.lockId}</div>\n                          <div>\n                            {\" \"}\n                            Paying{\" \"}\n                            {Big(order.payTokenAmount)\n                              .div(Big(10).pow(18))\n                              .toFixed(6)}{\" \"}\n                            {\n                              NETWORK_CONFIGS[CHAIN_ID_MAP[state.chainId]]\n                                .currency\n                            }{\" \"}\n                            from {CHAIN_ID_MAP[state.chainId]}\n                          </div>\n                          <div>\n                            {\" \"}\n                            Buying{\" \"}\n                            {Big(order.buyTokenAmount)\n                              .div(Big(10).pow(18))\n                              .toFixed(6)}{\" \"}\n                            {\n                              NETWORK_CONFIGS[CHAIN_ID_MAP[order.toChain]]\n                                .currency\n                            }{\" \"}\n                            from {CHAIN_ID_MAP[parseInt(order.toChain)]}\n                          </div>\n                          <div>Owner : {order.owner} </div>\n                        </div>\n                        <div className=\"col-3\">\n                          <button\n                            className=\"btn btn-danger w-100\"\n                            style={{\n                              float: \"center\",\n                            }}\n                            onClick={() => {\n                              State.update({ activeView: \"exchange\" });\n                            }}\n                          >\n                            CANCEL\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {state.result}\n    </div>\n  </Theme>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/58423e7fe4bbc6956ea637d23cbeedee8ec23873fcd93bafb69086af625563e9/widget/Untitled-0", "fact_widget_deployments_id": "d016c1294fd33fd9d9723434661dca69", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 12}