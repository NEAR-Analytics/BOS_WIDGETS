{"tx_hash": "6HFan2FmdT2AafcfzQxAJJqGiBx3ZdWyFK3sswi5GiG1", "action_id_social": "FuRPdEkmx6pvJujPx82oxWZaju7Rrj9NGgzabDdDSX7y-0-widget", "block_id": 105014735, "block_timestamp": "2023-11-05T18:46:04.322Z", "signer_id": "openwebbuild.near", "widget_name": "Post.Compose", "source_code": "// config\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"openwebbuild.near\",\n        discoveryAccountId: \"near\",\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"openwebbuild.testnet\",\n        discoveryAccountId: \"one.testnet\",\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\n\nfunction parseTitle(text) {\n  let title = text.split(\"\\n\")[0];\n  if (title && title.startsWith(\"# \")) {\n    title = title.slice(2).trim();\n    return title;\n  } else {\n    return \"\";\n  }\n}\n\nfunction parsePermalink(title) {\n  if (title) {\n    return title\n      .toLowerCase()\n      .replace(/\\s+/g, \"-\")\n      .replace(/[^\\w-]+/g, \"\");\n  } else {\n    return \"\";\n  }\n}\n\nState.init({\n  image: {},\n  text: \"\",\n  title: \"\",\n  permalink: \"\",\n  published: !!props.text,\n});\n\nconst profile = Social.getr(`${context.accountId}/profile`);\nconst autocompleteEnabled = true;\n\nconst title = parseTitle(state.text);\n// If the post already exists with the permalink, it's not allowed to change it.\nconst parsedPermalink = parsePermalink(title);\nconst permalink = props.permalink\n  ? parsedPermalink === props.permalink && parsedPermalink\n  : parsedPermalink;\nconst published = !!props.text || state.published;\nconst permalinkChanged =\n  props.permalink &&\n  parsedPermalink &&\n  parsedPermalink !== props.permalink &&\n  published;\n\nconst content = {\n  type: \"md\",\n  image: state.image.cid ? { ipfs_cid: state.image.cid } : undefined,\n  text: state.text,\n  title,\n  permalink,\n};\n\nconst postUrl = `/blog/${context.accountId}/${permalink}`;\n\nfunction extractMentions(text) {\n  const mentionRegex =\n    /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\n  mentionRegex.lastIndex = 0;\n  const accountIds = new Set();\n  for (const match of text.matchAll(mentionRegex)) {\n    if (\n      !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n      !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length)) &&\n      match[1].length >= 2 &&\n      match[1].length <= 64\n    ) {\n      accountIds.add(match[1].toLowerCase());\n    }\n  }\n  return [...accountIds];\n}\n\nfunction extractTagNotifications(text, item) {\n  return extractMentions(text || \"\")\n    .filter((accountId) => accountId !== context.accountId)\n    .map((accountId) => ({\n      key: accountId,\n      value: {\n        type: \"mention\",\n        item,\n      },\n    }));\n}\n\nfunction composeData() {\n  const data = {\n    post: {\n      main: JSON.stringify(content),\n    },\n    index: {\n      post: JSON.stringify({\n        key: \"main\",\n        value: {\n          type: \"md\",\n        },\n      }),\n    },\n  };\n\n  const notifications = extractTagNotifications(state.text, {\n    type: \"social\",\n    path: `${context.accountId}/post/main`,\n  });\n\n  if (notifications.length) {\n    data.index.notify = JSON.stringify(\n      notifications.length > 1 ? notifications : notifications[0]\n    );\n  }\n\n  return data;\n}\n\nfunction onCommit() {\n  State.update({\n    image: {},\n    text: \"\",\n    published: true,\n  });\n}\n\nfunction textareaInputHandler(value) {\n  const showAccountAutocomplete = /@[\\w][^\\s]*$/.test(value);\n  State.update({ text: value, showAccountAutocomplete });\n}\n\nfunction autoCompleteAccountId(id) {\n  let text = state.text.replace(/[\\s]{0,1}@[^\\s]*$/, \"\");\n  text = `${text} @${id}`.trim() + \" \";\n  State.update({ text, showAccountAutocomplete: false });\n}\n\nconst TEXT_CACHE_KEY = props.permalink ?? \"text_cache\";\n\nfunction autoSaveContent(event) {\n  Storage.privateSet(TEXT_CACHE_KEY, event.target.value);\n}\n\nfunction init() {\n  if (!state.text) {\n    const text = Storage.privateGet(TEXT_CACHE_KEY);\n    if (props.permalink) {\n      if (text) {\n        const savedPermalink = parsePermalink(parseTitle(text));\n        if (props.permalink === savedPermalink) {\n          State.update({ text });\n          return;\n        }\n      }\n      if (props.text) {\n        State.update({\n          text: props.text,\n        });\n      }\n    } else if (text) {\n      State.update({ text });\n    }\n  }\n}\n\ninit();\n\nconst Wrapper = styled.div`\n  --padding: 24px;\n  position: relative;\n  height: 100%;\n  border: 1px lightgrey solid;\n  border-radius: 10px;\n\n  @media (max-width: 1200px) {\n    --padding: 12px;\n  }\n`;\n\nconst Container = styled.div`\n  position: relative;\n  height: 100%;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Avatar = styled.div`\n  width: 40px;\n  height: 40px;\n  pointer-events: none;\n  position: absolute;\n  top: var(--padding);\n  left: var(--padding);\n\n  img {\n    object-fit: cover;\n    border-radius: 40px;\n    width: 100%;\n    height: 100%;\n  }\n\n  @media (max-width: 992px) {\n    display: none;\n  }\n`;\n\nconst EditorWrapper = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n  height: 100%;\n  flex: 1 0;\n\n  &::after,\n  textarea {\n    width: 100%;\n    min-width: 1em;\n    height: 100%;\n    min-height: 164px;\n    font: inherit;\n    padding: var(--padding) var(--padding) calc(40px + (var(--padding) * 2))\n      var(--padding);\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: none;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n\n    @media (max-width: 1200px) {\n      min-height: 124px;\n    }\n\n    @media (max-width: 992px) {\n      padding-left: var(--padding);\n    }\n  }\n\n  &::after {\n    content: attr(data-value) \" \";\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n\n  textarea {\n    transition: all 200ms;\n    box-shadow: inset 0 0 30px rgba(0, 0, 0, 0.05);\n    overflow-y: auto;\n    font-family: \"Roboto Mono\", Menlo, Consolas, sans-serif;\n    font-size: 14px;\n\n    &::placeholder {\n      opacity: 1;\n      color: #687076;\n    }\n\n    &:empty + p {\n      display: block;\n    }\n  }\n`;\n\nconst EditorDescription = styled.p`\n  position: absolute;\n  bottom: calc(var(--padding) + 24px);\n  left: var(--padding);\n  right: var(--padding);\n  font-size: 10px;\n  line-height: 18px;\n  font-weight: 400;\n  color: #687076;\n  pointer-events: none;\n  display: none;\n\n  a {\n    color: #000;\n    outline: none;\n    font-weight: 600;\n    pointer-events: auto;\n\n    &:hover,\n    &:focus {\n      color: #000;\n      text-decoration: underline;\n    }\n  }\n\n  @media (max-width: 992px) {\n    left: var(--padding);\n  }\n`;\n\nconst Actions = styled.div`\n  display: inline-flex;\n  gap: 12px;\n  position: absolute;\n  bottom: var(--padding);\n  right: var(--padding);\n\n  .commit-post-button,\n  .preview-post-button {\n    background: #59e692;\n    color: #09342e;\n    border-radius: 40px;\n    height: 40px;\n    padding: 0 35px;\n    font-weight: 600;\n    font-size: 14px;\n    border: none;\n    cursor: pointer;\n    transition: background 200ms, opacity 200ms;\n\n    &:hover,\n    &:focus {\n      background: rgb(112 242 164);\n      outline: none;\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n  }\n\n  .preview-post-button {\n    color: #11181c;\n    background: #f1f3f5;\n    padding: 0;\n    width: 40px;\n\n    &:hover,\n    &:focus {\n      background: #d7dbde;\n      outline: none;\n    }\n  }\n\n  .upload-image-button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: #f1f3f5;\n    color: #11181c;\n    border-radius: 40px;\n    height: 40px;\n    min-width: 40px;\n    font-size: 0;\n    border: none;\n    cursor: pointer;\n    transition: background 200ms, opacity 200ms;\n\n    &::before {\n      font-size: 16px;\n    }\n\n    &:hover,\n    &:focus {\n      background: #d7dbde;\n      outline: none;\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n\n    span {\n      margin-left: 12px;\n    }\n  }\n\n  .d-inline-block {\n    display: flex !important;\n    gap: 12px;\n    margin: 0 !important;\n\n    .overflow-hidden {\n      width: 40px !important;\n      height: 40px !important;\n    }\n  }\n`;\n\nconst PreviewWrapper = styled.div`\n  position: relative;\n  padding: var(--padding);\n  padding-bottom: calc(40px + (var(--padding) * 2));\n  flex: 1 0;\n  height: 100%;\n  overflow-y: auto;\n`;\n\nconst LinkPreview = styled.p`\n  font-size: 14px;\n  line-height: 18px;\n  font-weight: 400;\n  color: #687076;\n  pointer-events: none;\n  padding-left: 40px;\n\n  a {\n    color: #000;\n    outline: none;\n    font-weight: 600;\n    pointer-events: auto;\n    text-decoration: underline;\n  }\n`;\n\nconst AutoComplete = styled.div`\n  position: absolute;\n  z-index: 5;\n  bottom: 0;\n  left: 0;\n  right: 0;\n\n  > div > div {\n    padding: calc(var(--padding) / 2);\n  }\n`;\n\nreturn (\n  <Wrapper>\n    <Container>\n      <EditorWrapper data-value={state.text} class=\"col\">\n        <textarea\n          placeholder=\"What's happening?\"\n          onInput={(event) => textareaInputHandler(event.target.value)}\n          onKeyUp={(event) => {\n            if (event.key === \"Escape\") {\n              State.update({ showAccountAutocomplete: false });\n            }\n          }}\n          onChange={autoSaveContent}\n          value={state.text}\n        />\n\n        <EditorDescription>\n          <a href=\"https://www.markdownguide.org/basic-syntax/\" target=\"_blank\">\n            Markdown\n          </a>\n          is supported\n        </EditorDescription>\n      </EditorWrapper>\n      <PreviewWrapper class=\"col\">\n        {permalink ? (\n          <LinkPreview>\n            Post {published ? \"has been\" : \"will be\"} published to{\" \"}\n            <a\n              href={postUrl}\n              target=\"_blank\"\n            >{`/${context.accountId}/${permalink}`}</a>\n          </LinkPreview>\n        ) : permalinkChanged ? (\n          <LinkPreview>\n            Modify the post link{\" \"}\n            <a\n              href={postUrl}\n              target=\"_blank\"\n            >{`/${context.accountId}/${props.permalink}`}</a>{\" \"}\n            is not allowed.\n          </LinkPreview>\n        ) : (\n          <LinkPreview>\n            To publish post with a permanent link, add a title that starts with\n            \"# \" at the first line.\n          </LinkPreview>\n        )}\n\n        <Widget\n          src={`${config.ownerId}/widget/Post.View`}\n          props={{\n            accountId: context.accountId,\n            blockHeight: \"now\",\n            content,\n            hideAvatar: true,\n            hideComments: true,\n          }}\n        />\n      </PreviewWrapper>\n    </Container>\n\n    {autocompleteEnabled && state.showAccountAutocomplete && (\n      <AutoComplete>\n        <Widget\n          src={`${config.discoveryAccountId}/widget/AccountAutocomplete`}\n          props={{\n            term: state.text.split(\"@\").pop(),\n            onSelect: autoCompleteAccountId,\n            onClose: () => State.update({ showAccountAutocomplete: false }),\n          }}\n        />\n      </AutoComplete>\n    )}\n\n    <Actions>\n      {\n        <IpfsImageUpload\n          image={state.image}\n          className=\"upload-image-button bi bi-image\"\n        />\n      }\n\n      <CommitButton\n        disabled={!state.text || !permalink}\n        force\n        data={composeData}\n        onCommit={onCommit}\n        className=\"commit-post-button\"\n      >\n        Post\n      </CommitButton>\n    </Actions>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/openwebbuild.near/widget/Post.Compose", "fact_widget_deployments_id": "13f9b0d6d476eb740cda28d26aacba98", "inserted_timestamp": "2023-11-05T20:38:44.818Z", "modified_timestamp": "2023-11-05T20:38:44.818Z", "__row_index": 1}