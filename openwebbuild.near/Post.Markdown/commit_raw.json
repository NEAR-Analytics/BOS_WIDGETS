{"tx_hash": "26czgfRLSvETfbuKXTYmYJr2pYq7LEPTTZe7PesBXHk4", "action_id_social": "5tfxEtySnFAmLkuZcYR4k8u9hSi171aLv2namztoYBmt-0-widget", "block_id": 103866430, "block_timestamp": "2023-10-21T08:25:50.364Z", "signer_id": "openwebbuild.near", "widget_name": "Post.Markdown", "source_code": "// config\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"openwebbuild.near\",\n        discoveryAccountId: \"near\",\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"openwebbuild.testnet\",\n        discoveryAccountId: \"one.testnet\",\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\n\nconst Wrapper = styled.div`\n  font-family: source-serif-pro, Georgia, Cambria, \"Times New Roman\", Times,\n    serif;\n  font-size: 20px;\n  font-weight: 400;\n  line-height: 32px;\n  color: #242424;\n  word-break: break-word;\n\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n\n  > * {\n    margin-bottom: 12px;\n  }\n\n  h1 h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    font-weight: 600;\n    font-size: 16px;\n    line-height: 1.6em;\n    color: #11181c;\n  }\n\n  h1 {\n    font-family: sohne, \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n    font-size: 42px;\n    font-weight: 700;\n  }\n\n  h2 {\n    font-family: sohne, \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n    font-size: 24px;\n    font-weight: 600;\n    margin-top: 1.95em;\n    margin-bottom: -0.28em;\n  }\n\n  p {\n    white-space: pre-line;\n    letter-spacing: -0.003em;\n    margin-top: 2em;\n    margin-bottom: -0.46em;\n  }\n\n  h2 + p {\n    margin-top: 0.86em;\n    margin-bottom: -0.46em;\n  }\n\n  p:first-child {\n    margin-top: 0.46em;\n    margin-bottom: -0.46em;\n  }\n\n  a {\n    color: inherit;\n    outline: none;\n    text-decoration: underline;\n  }\n\n  img {\n    display: block;\n    max-width: 100%;\n    max-height: 80vh;\n  }\n\n  hr {\n    margin: 3em 0;\n  }\n`;\n\nconst Embedded = styled.span`\n  white-space: normal;\n\n  p {\n    white-space: normal;\n  }\n`;\n\nconst renderMention =\n  props.renderMention ??\n  ((accountId) => (\n    <Widget\n      key={accountId}\n      src={`${config.ownerId}/widget/Account.ProfileInline`}\n      props={{\n        accountId,\n        hideAvatar: true,\n      }}\n    />\n  ));\n\nconst renderWidget =\n  props.renderWidget ??\n  // URL pattern: scheme://authority/path?query#fragment\n  (({ url, scheme, authority, path, query }) => {\n    // widget URL now allows \"bos\" and \"near\" schemes\n    if (url && [\"bos\", \"near\"].includes(scheme) && authority && path) {\n      const location = authority + path;\n      const segments = location.split(\"/\");\n      if (segments && segments.length >= 3) {\n        const src = segments.slice(segments.length - 3).join(\"/\");\n        const props = {\n          ...{ markdown: props.text },\n          ...(query ?? {}),\n        };\n        return (\n          <Embedded className=\"embedded-widget\">\n            <Widget key={url} src={src} props={props} />\n          </Embedded>\n        );\n      }\n    }\n    // If not a valid widget URL, return the original URL\n    return url;\n  });\n\nreturn (\n  <Wrapper>\n    <Markdown\n      text={props.text}\n      onMention={renderMention}\n      onURL={renderWidget}\n    />\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/openwebbuild.near/widget/Post.Markdown", "fact_widget_deployments_id": "9252e2446546488a2ac4522765b741fe", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}