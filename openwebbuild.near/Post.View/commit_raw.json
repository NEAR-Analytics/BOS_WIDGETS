{"tx_hash": "GDs2xvhWsbs4jKmfQGh1Ug7GC3x4jU6GBvZpgcbJEqmC", "action_id_social": "9aZ7GH4JJe83reMcQrzyr2MkvzeJzrx4iyM13j8M7uET-0-widget", "block_id": 104941671, "block_timestamp": "2023-11-04T20:13:07.382Z", "signer_id": "openwebbuild.near", "widget_name": "Post.View", "source_code": "// config\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        gatewayDomain: \"openweb.build\",\n        ownerId: \"openwebbuild.near\",\n        discoveryAccountId: \"near\",\n        eugeneId: \"mob.near\",\n      };\n    case \"testnet\":\n      return {\n        gatewayDomain: \"dev.openweb.build\",\n        ownerId: \"openwebbuild.testnet\",\n        discoveryAccountId: \"one.testnet\",\n        eugeneId: \"eugenethedream\",\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\n\nconst accountId = props.accountId;\nlet permalink = props.permalink;\nlet blockHeight =\n  props.blockHeight === \"now\" ? \"now\" : parseInt(props.blockHeight);\nconst subscribe = !!props.subscribe;\nconst notifyAccountId = accountId;\n\n// -- Post Query Helper Functions --\n\nfunction queryPostByBlockHeight(accountId, blockHeight) {\n  return JSON.parse(\n    Social.get(`${accountId}/post/main`, blockHeight) ?? \"null\"\n  );\n}\n\nconst GRAPHQL_ENDPOINT =\n  props.GRAPHQL_ENDPOINT || \"https://near-queryapi.api.pagoda.co\";\n\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\n  return fetch(`${GRAPHQL_ENDPOINT}/v1/graphql`, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": \"openwebbuild_near\" },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n}\n\nfunction createQuery() {\n  const indexerQueries = `\n    query QueryPostByPermalink($accountId: String, $permalink: String, $offset: Int, $limit: Int) {\n      openwebbuild_near_blog_posts(where: { account_id: { _eq: $accountId }, permalink: { _eq: $permalink } }, order_by: { block_height: desc }, offset: $offset, limit: $limit) {\n        id\n        permalink\n        content\n        block_height\n        account_id\n        block_timestamp\n        title\n      }\n    }\n  `;\n  return indexerQueries;\n}\n\nfunction queryPostByPermalink(accountId, permalink) {\n  if (context.networkId === \"mainnet\") {\n    // query post with Query API\n    const result = fetchGraphQL(\n      createQuery(sortOption, type),\n      \"QueryPostByPermalink\",\n      {\n        accountId,\n        permalink,\n        offset: 0,\n        limit: 1,\n      }\n    );\n    if (result.status === 200 && result.body) {\n      if (result.body.errors) {\n        console.log(\"error:\", result.body.errors);\n      } else {\n        let data = result.body.data;\n        if (data) {\n          const posts = data.openwebbuild_near_blog_posts;\n          if (posts && posts.length > 0) {\n            const p = posts[0];\n            const content = JSON.parse(p.content || null);\n            if (content) {\n              return {\n                blockHeight: p.block_height,\n                ...content,\n              };\n            }\n          }\n        }\n      }\n      return null;\n    }\n  } else {\n    // query post with NEAR Social indexer\n    const index = {\n      action: \"post\",\n      key: \"main\",\n      options: {\n        limit: 50,\n        order: \"desc\",\n        accountId,\n      },\n    };\n    const posts = Social.index(index.action, index.key, index.options);\n    if (posts) {\n      for (const p of posts) {\n        const content = queryPostByBlockHeight(accountId, p.blockHeight);\n        if (content && content.permalink === permalink) {\n          return {\n            blockHeight: p.blockHeight,\n            ...content,\n          };\n        }\n      }\n    }\n    return null;\n  }\n}\n\n// -- End of Post Query Helper Functions --\n\nconst content =\n  props.content ??\n  (accountId && permalink\n    ? queryPostByPermalink(accountId, permalink)\n    : accountId && blockHeight\n    ? queryPostByBlockHeight(accountId, blockHeight)\n    : null);\n\nif (!blockHeight && content) {\n  blockHeight = content.blockHeight;\n}\nif (!permalink && content) {\n  permalink = content.permalink;\n}\n\nconst postUrl = `https://${config.gatewayDomain}/${config.ownerId}/widget/Page.Post?accountId=${accountId}&permalink=${permalink}`;\nconst editUrl = `/${config.ownerId}/widget/Post.Editor?permalink=${permalink}`;\n\nconst item = {\n  type: \"social\",\n  path: `${accountId}/post/main`,\n  permalink,\n};\n\nconst Post = styled.div`\n  position: relative;\n\n  &::before {\n    content: \"\";\n    display: ${props.hideBorder ? \"none\" : \"block\"};\n    position: absolute;\n    left: 19px;\n    top: ${props.hideAvatar ? \"0px\" : \"52px\"};\n    bottom: 12px;\n    width: 2px;\n    background: #eceef0;\n  }\n`;\n\nconst Header = styled.div`\n  margin-bottom: 0;\n  display: inline-flex;\n  width: 100%;\n`;\n\nconst Body = styled.div`\n  padding-left: ${props.hideBorder ? \"0px\" : \"52px\"};\n  padding-bottom: 1px;\n`;\n\nconst Content = styled.div`\n  img {\n    display: block;\n    max-width: 100%;\n    max-height: 80vh;\n    margin: 0 0 12px;\n  }\n  margin: 24px 0;\n`;\n\nconst Text = styled.p`\n  display: block;\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n  color: #687076;\n  white-space: nowrap;\n`;\n\nconst Actions = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin: -6px -6px 6px;\n`;\n\nconst Comments = styled.div`\n  > div > div:first-child {\n    padding-top: 12px;\n  }\n`;\n\nconst EditButton = styled.div`\n  margin: 0 0 0 auto;\n  border: 0.5px solid #e3e3e0;\n  background-color: #f3f3f2;\n  height: 46px;\n  width: 46px;\n  border-radius: 50%;\n\n  > div,\n  a {\n    width: 100%;\n    height: 100%;\n  }\n\n  a {\n    color: #1b1b18 !important;\n    background-color: #f3f3f2 !important;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 50%;\n\n    i {\n      font-size: 18px !important;\n    }\n  }\n\n  button {\n    border-width: 0;\n  }\n`;\n\nreturn (\n  <Post>\n    {!props.hideAvatar && (\n      <Header>\n        <Widget\n          src={`${config.ownerId}/widget/Account.Profile`}\n          props={{\n            accountId,\n            hideAccountId: true,\n            inlineContent: (\n              <>\n                <Text as=\"span\">\uff65</Text>\n                <Text>\n                  {blockHeight === \"now\" ? (\n                    \"now\"\n                  ) : (\n                    <>\n                      <Widget\n                        src={`${\n                          context.networkId === \"mainnet\"\n                            ? \"mob.near\"\n                            : \"one.testnet\"\n                        }/widget/TimeAgo`}\n                        props={{ blockHeight }}\n                      />{\" \"}\n                      ago\n                    </>\n                  )}\n                </Text>\n              </>\n            ),\n          }}\n        />\n        {accountId === context.accountId && permalink && content.permalink && (\n          <EditButton>\n            <Widget\n              src={`${config.ownerId}/widget/Post.WriteButton`}\n              props={{\n                link: editUrl,\n                title: \"Edit\",\n              }}\n            />\n          </EditButton>\n        )}\n      </Header>\n    )}\n\n    <Body>\n      <Content>\n        {content.text && (\n          <Widget\n            src={`${config.ownerId}/widget/Post.Markdown`}\n            props={{ text: content.text }}\n          />\n        )}\n\n        {content.image && (\n          <Widget\n            src={`${config.eugeneId}/widget/Image`}\n            props={{\n              image: content.image,\n            }}\n          />\n        )}\n      </Content>\n\n      {blockHeight !== \"now\" && (\n        <Actions>\n          <Widget\n            src={`${config.discoveryAccountId}/widget/LikeButton`}\n            props={{\n              item,\n              notifyAccountId,\n            }}\n          />\n          <Widget\n            src={`${config.discoveryAccountId}/widget/CommentButton`}\n            props={{\n              item,\n              onClick: () => State.update({ showReply: !state.showReply }),\n            }}\n          />\n          <Widget\n            src={`${config.discoveryAccountId}/widget/CopyUrlButton`}\n            props={{\n              url: postUrl,\n            }}\n          />\n        </Actions>\n      )}\n\n      {state.showReply && (\n        <div className=\"mb-2\">\n          <Widget\n            src={`${config.discoveryAccountId}/widget/Comments.Compose`}\n            props={{\n              notifyAccountId,\n              item,\n              onComment: () => State.update({ showReply: false }),\n            }}\n          />\n        </div>\n      )}\n\n      {!props.hideComments && (\n        <Comments>\n          <Widget\n            src={`${config.ownerId}/widget/Comment.Feed`}\n            props={{\n              item,\n              highlightComment: props.highlightComment,\n              limit: props.commentsLimit,\n              subscribe,\n              raw,\n            }}\n          />\n        </Comments>\n      )}\n    </Body>\n  </Post>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/openwebbuild.near/widget/Post.View", "fact_widget_deployments_id": "48980be121a45b5289f7042f203a81ca", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}