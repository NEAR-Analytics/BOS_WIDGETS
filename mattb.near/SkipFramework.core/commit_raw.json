{"tx_hash": "D5bhftErybpRN7H4oVYn3gAS6Dux5uSokhar1kyQuAjR", "action_id_social": "Bx2HMKb44JpqEHL4RNDhmrfNSjAUbA3dUD4MiF7AnFX3-0-widget", "block_id": 95532083, "block_timestamp": "2023-07-02T12:50:55.199Z", "signer_id": "mattb.near", "widget_name": "SkipFramework.core", "source_code": "const { onLoad, onRefresh, loaded } = props;\nconst DEFAULT_APP_NAME = \"SkipApp\";\nconst STORAGE_KEY = \"SkipFramework.store\";\nconst EVENTS_KEY = \"SkipFramework.events\";\n\nlet SkipFramework = {\n  $appName: DEFAULT_APP_NAME,\n  $path: \"\",\n  $props: {},\n  $state: {},\n  $store: {},\n  $watchers: {},\n  $events: {},\n  $subscribedEvents: {},\n  $locks: {},\n  $storeLoaded: false,\n  $initialized: false,\n  $listenersInitialized: false,\n  $listenersEnabled: false,\n  $output: \"\",\n  $route: {\n    name: \"\",\n    widget: null,\n    props: {},\n  },\n  create: (appName) => {\n    if (SkipFramework.$appName == DEFAULT_APP_NAME) {\n      SkipFramework.$appName = appName;\n      SkipFramework.$refresh();\n    }\n\n    return SkipFramework;\n  },\n  with: (vars) => {\n    if (!SkipFramework.$initialized) {\n      SkipFramework.$state = SkipFramework.$destructure(vars);\n      SkipFramework.$setMethods(vars);\n      SkipFramework.$setStore(vars);\n      SkipFramework.$setWatchers(vars);\n      SkipFramework.$setComputed(vars);\n      SkipFramework.$triggerComputed();\n      SkipFramework.$initComponentEventChain();\n      SkipFramework.$initialized = true;\n      SkipFramework.$refresh();\n    }\n\n    return SkipFramework;\n  },\n  listens: (events) => {\n    SkipFramework.$subscribedEvents = events;\n    SkipFramework.$initEventsChain();\n\n    return SkipFramework;\n  },\n  routing: (ctx, params, routes) => {\n    if (!SkipFramework.$path) {\n      SkipFramework.$path = ctx.widgetSrc;\n      SkipFramework.$refresh();\n    }\n\n    if (\n      !SkipFramework.$route.widget &&\n      Object.keys(routes).filter((key) => Object.keys(params).includes(key))\n        .length > 0\n    ) {\n      let route = Object.keys(routes)\n        .filter((route) => route in params)\n        .shift();\n\n      if (typeof routes[route] === \"function\") {\n        delete params[route];\n        SkipFramework.$route = {\n          name: route,\n          widget: routes[route],\n          props: params,\n        };\n        SkipFramework.$refresh();\n      }\n    }\n  },\n  to: (route, params) => {\n    return `/#/${SkipFramework.$path}?${route}${Object.keys(params || {})\n      .map((key) => `&${key}=${params[key]}`)\n      .join(\"\")}`;\n  },\n  $destructure: (vars) => {\n    let state = vars[\"state\"] || {};\n\n    return {\n      ...state,\n    };\n  },\n  $setMethods: (vars) => {\n    let methods = vars[\"methods\"] || {};\n    Object.keys(methods)\n      .filter(\n        (method) =>\n          !(method in SkipFramework) && typeof methods[method] === \"function\"\n      )\n      .forEach((method) => {\n        SkipFramework[method] = methods[method];\n      });\n  },\n  $setStore: (vars) => {\n    SkipFramework.$store = {\n      ...SkipFramework.$store,\n      ...(vars[\"store\"] || {}),\n    };\n\n    Storage.get(SkipFramework.$getStorageKey());\n\n    setTimeout(() => {\n      SkipFramework.$state = {\n        ...SkipFramework.$state,\n        ...SkipFramework.$filterStore(\n          Storage.get(SkipFramework.$getStorageKey()) || {}\n        ),\n      };\n      SkipFramework.$storeLoaded = true;\n      SkipFramework.$triggerComputed();\n      SkipFramework.$refresh();\n    }, 100);\n  },\n  $setComputed: (vars) => {\n    SkipFramework.$computed = {\n      ...SkipFramework.$computed,\n      ...(vars[\"computed\"] || {}),\n    };\n  },\n  $setWatchers: (vars) => {\n    SkipFramework.$watchers = {\n      ...SkipFramework.$watchers,\n      ...(vars[\"watch\"] || {}),\n    };\n  },\n  $filterStore: (storage) => {\n    let actualStore = {};\n\n    Object.keys(storage).map((key) =>\n      !!SkipFramework.$store[key] ? (actualStore[key] = storage[key]) : \"\"\n    );\n\n    return actualStore;\n  },\n  $triggerWatchers: (vars) => {\n    if (Object.keys(vars) in SkipFramework.$watchers) {\n      Object.keys(vars).forEach((key) => {\n        if (typeof SkipFramework.$watchers[key] == \"function\") {\n          let modifiers = SkipFramework.$watchers[key](\n            SkipFramework.$state[key],\n            vars[key]\n          );\n\n          if (!!modifiers) {\n            SkipFramework.set(modifiers);\n          }\n\n          SkipFramework.$refresh();\n        }\n      });\n    }\n  },\n  $triggerStore: (vars) => {\n    if (SkipFramework.$store && Object.keys(vars) in SkipFramework.$store) {\n      let res = {};\n      Object.keys(vars)\n        .filter(\n          (key) => key in SkipFramework.$store && SkipFramework.$store[key]\n        )\n        .forEach((key) => {\n          res[key] = vars[key];\n        });\n      Storage.set(SkipFramework.$getStorageKey(), {\n        ...(Storage.get(SkipFramework.$getStorageKey()) || {}),\n        ...res,\n      });\n    }\n  },\n  $triggerComputed: () => {\n    Object.keys(SkipFramework.$computed).forEach((key) => {\n      if (typeof SkipFramework.$computed[key] == \"function\") {\n        SkipFramework.$state[key] = SkipFramework.$computed[key](\n          SkipFramework.$state\n        );\n      }\n    });\n    SkipFramework.$refresh();\n  },\n  set: (values) => {\n    SkipFramework.$triggerWatchers(values);\n    SkipFramework.$state = {\n      ...SkipFramework.$state,\n      ...values,\n    };\n    SkipFramework.$triggerStore(values);\n    SkipFramework.$triggerComputed(values);\n\n    SkipFramework.$refresh();\n  },\n  get: (key) => {\n    return SkipFramework.$state[key] ?? \"\";\n  },\n  render: (html) => {\n    if (\n      !!SkipFramework.$route.widget &&\n      typeof SkipFramework.$route.widget === \"function\"\n    ) {\n      SkipFramework.$output = SkipFramework.$route.widget(\n        SkipFramework.$route.props,\n        SkipFramework.$state\n      );\n    } else {\n      SkipFramework.$output = html;\n      SkipFramework.$listenEvents();\n    }\n\n    return SkipFramework.$output;\n  },\n  $refresh: () => {\n    if (!!onRefresh) {\n      onRefresh(SkipFramework);\n    }\n  },\n  $getStorageKey: () => {\n    return `${STORAGE_KEY}-${SkipFramework.$appName}`;\n  },\n  $getCurrentComponentEventsKey: () => {\n    return SkipFramework.$getComponentEventsKey(SkipFramework.$appName);\n  },\n  $getComponentEventsKey: (key) => {\n    return `${EVENTS_KEY}-${key}`;\n  },\n  $initComponentEventChain: () => {\n    Storage.get(SkipFramework.$getCurrentComponentEventsKey());\n\n    setTimeout(() => {\n      Storage.set(\n        SkipFramework.$getCurrentComponentEventsKey(),\n        Storage.get(SkipFramework.$getCurrentComponentEventsKey()) || {\n          name: SkipFramework.$appName,\n          data: [],\n          locked: false,\n        }\n      );\n    }, 200);\n  },\n  $initEventsChain: () => {\n    if (\n      Object.keys(SkipFramework.$subscribedEvents).length > 0 &&\n      !SkipFramework.$listenersInitialized\n    ) {\n      Object.keys(SkipFramework.$subscribedEvents).forEach((componentName) => {\n        let extComponentKey =\n          SkipFramework.$getComponentEventsKey(componentName);\n\n        Storage.set(\n          SkipFramework.$getCurrentComponentEventsKey() + \".\" + extComponentKey,\n          {\n            name: componentName,\n            data: [],\n            locked: false,\n          }\n        );\n      });\n      SkipFramework.$listenersInitialized = true;\n      SkipFramework.$refresh();\n    }\n  },\n  $listenEvents: () => {\n    Object.keys(SkipFramework.$subscribedEvents).forEach((componentName) => {\n      Storage.get(SkipFramework.$getComponentEventsKey(componentName));\n    });\n    Storage.get(SkipFramework.$getCurrentComponentEventsKey());\n\n    if (\n      Object.keys(SkipFramework.$subscribedEvents).length > 0 &&\n      !SkipFramework.$listenersEnabled\n    ) {\n      setInterval(() => {\n        Object.keys(SkipFramework.$subscribedEvents).forEach(\n          (componentName) => {\n            let extComponentKey =\n              SkipFramework.$getComponentEventsKey(componentName);\n            let eventsChain = Storage.get(extComponentKey) || {};\n            let componentEventsChain =\n              Storage.get(\n                SkipFramework.$getCurrentComponentEventsKey() +\n                  \".\" +\n                  extComponentKey\n              ) || {};\n\n            if (\n              eventsChain &&\n              !(extComponentKey in SkipFramework.$locks) &&\n              eventsChain.data.length > componentEventsChain.data.length\n            ) {\n              SkipFramework.$locks[extComponentKey] = true;\n              SkipFramework.$refresh();\n\n              SkipFramework.$processEvents(\n                componentName,\n                eventsChain.data.slice(\n                  componentEventsChain.data.length,\n                  eventsChain.data.length\n                )\n              );\n\n              SkipFramework.$commitEvents(extComponentKey, eventsChain);\n              delete SkipFramework.$locks[extComponentKey];\n              SkipFramework.$refresh();\n            }\n          }\n        );\n      }, 500);\n      SkipFramework.$listenersEnabled = true;\n      SkipFramework.$refresh();\n    }\n  },\n  $lockEvents: (events) => {\n    Storage.set(SkipFramework.$getCurrentComponentEventsKey(), {\n      ...events,\n      name: SkipFramework.$appName,\n      locked: true,\n    });\n  },\n  $commitEvents: (key, events) => {\n    Storage.set(\n      SkipFramework.$getCurrentComponentEventsKey() + \".\" + key,\n      events\n    );\n  },\n  $processEvents: (componentName, events) => {\n    events.forEach((event) => {\n      SkipFramework.$triggerEvent(componentName, event);\n    });\n  },\n  $triggerEvent: (componentName, event) => {\n    let triggers = SkipFramework.$subscribedEvents[componentName];\n    if (event.name in triggers && typeof triggers[event.name] === \"function\") {\n      triggers[event.name](event.data);\n    }\n  },\n  emit: (eventName, data) => {\n    SkipFramework.$emitEvent(eventName, data);\n  },\n  $emitEvent: (eventName, data) => {\n    let eventsChain = Storage.get(\n      SkipFramework.$getCurrentComponentEventsKey()\n    );\n    eventsChain.data = eventsChain.data.concat({\n      name: eventName,\n      data: data,\n    });\n\n    Storage.set(SkipFramework.$getCurrentComponentEventsKey(), eventsChain);\n  },\n};\n\nif (onLoad && !loaded) {\n  onLoad({\n    skip: SkipFramework,\n  });\n}\n", "metadata": null, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/mattb.near/widget/SkipFramework.core", "fact_widget_deployments_id": "e8796c145982224cd29868869df17d06", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 0}