{"tx_hash": "9LhmcLaMoNWEJSYLnXwUxtXXZQrDzpPs1owix7EKWi1z", "action_id_social": "4CPvgiJhqTyhQjtrgQCP491gyN5CrneDwcyYMu7xdQBU-0-widget", "block_id": 95229138, "block_timestamp": "2023-06-28T13:12:47.636Z", "signer_id": "mattb.near", "widget_name": "GenaDrop.MultiChainMinter", "source_code": "let {\n  Heading,\n  ImageUploadCard,\n  NFTCard,\n  Editable,\n  SendToInput,\n  Main,\n  Text,\n  Elipse,\n  Card,\n  ImageCard,\n  Input,\n  TextArea,\n  SelectTag,\n  ChainIcon,\n  SelectReplicaContainer,\n  SelectGroup,\n  ToggleButton,\n  HeaderBox,\n  HistoryBox,\n  HistoryNFTBox,\n} = VM.require(\"mattb.near/widget/GenaDrop.MultiChainMinterStyles\");\n\nconst OWNER_ID = \"minorityprogrammers.near\";\nlet accountId = context.accountId;\n\nconst DEFAULT_NFT_TITLE = \"My awesome NFT\";\nconst DEFAULT_NFT_DESCRIPTION =\n  \"I've just created a brand new NFT using GenaDrop\";\n\nState.init({\n  title: DEFAULT_NFT_TITLE,\n  description: DEFAULT_NFT_DESCRIPTION,\n  recipient: \"\",\n  isSoulBound: false,\n  showAlert: false,\n  toastMessage: \"\",\n  selectIsOpen: false,\n  selectedChain: \"0\",\n  customRecipient: false,\n  mintedNfts: [],\n});\n\nif (state.sdk.initialized) {\n  setTimeout(() => {\n    State.update({ mintedNfts: state.sdk.getMintedNfts() });\n  }, 1000);\n}\n\nconst handleMint = () => {\n  if (!state.image.cid) {\n    return;\n  }\n\n  if (!state.title) {\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please enter a title for the NFT\",\n    });\n\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else if (!state.description) {\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please enter a description for the NFT\",\n    });\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else {\n    try {\n      state.sdk.mint(\n        state.recipient,\n        state.title,\n        state.description,\n        state.selectedChain,\n        state.image.cid,\n        state.isSoulBound\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    Ethers.provider()\n      .getNetwork()\n      .then((data) => {\n        State.update({\n          selectedChain: data.chainId,\n        });\n      });\n  }\n}\n\nconst handleSelectClick = () => {\n  State.update({\n    selectIsOpen: !state.selectIsOpen,\n  });\n};\n\nconst handleOutsideClick = (e) => {\n  if (!!state.selectIsOpen) {\n    State.update({\n      selectIsOpen: false,\n    });\n  }\n};\n\nconst onChangeTitle = (title) => {\n  State.update({\n    title,\n  });\n};\n\nconst onChangeRecipient = (recipient) => {\n  State.update({\n    customRecipient: true,\n  });\n\n  if (state.selectedChain == \"0\") {\n    State.update({\n      recipient: recipient[0],\n    });\n  } else {\n    State.update({\n      recipient,\n    });\n  }\n};\n\nconst handleChainChange = (chain_id) => {\n  try {\n    Ethers.send(\"wallet_switchEthereumChain\", [\n      { chainId: `0x${Number(chain_id).toString(16)}` },\n    ]);\n\n    State.update({\n      selectedChain: chain_id,\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst onChangeDesc = (description) => {\n  State.update({\n    description,\n  });\n};\n\nconst handleToggle = () => {\n  State.update({\n    isSoulBound: !state.isSoulBound,\n  });\n};\n\nif (!(state.sender || accountId)) {\n  State.update({\n    showAlert: true,\n    toastMessage: \"Please Sign in or connect a wallet\",\n  });\n} else {\n  State.update({\n    showAlert: false,\n    toastMessage: \"\",\n  });\n}\n\nif (!state.customRecipient) {\n  if (state.selectedChain == \"0\") {\n    State.update({\n      recipient: accountId,\n    });\n  } else {\n    State.update({\n      recipient: state.sender,\n    });\n  }\n}\n\nreturn (\n  <div\n    style={{\n      background: \"#fafafa\",\n      width: \"100%\",\n    }}\n  >\n    <div style={{ display: \"none\" }}>\n      <Widget\n        src=\"mattb.near/widget/GenaDrop.GenaDropSDK\"\n        props={{\n          onLoad: (sdk) => State.update({ sdk: sdk }),\n          onRefresh: (sdk) => State.update({ sdk: sdk }),\n          loaded: !!state.sdk,\n        }}\n      />\n    </div>\n    {!!state.sdk ? (\n      <div>\n        {state.showAlert && (\n          <Widget src=\"jgodwill.near/widget/genalert\" props={state} />\n        )}\n\n        <Main className=\"container-fluid\">\n          <div className=\"flex-grow-1\">\n            <HeaderBox>\n              <Heading\n                style={{\n                  \"text-align\": \"left\",\n                }}\n                className=\"fs-2 fw-bold\"\n              >\n                NFT Minter\n              </Heading>\n              <Web3Connect\n                className=\"connect-wallet\"\n                connectLabel=\"Connect wallet\"\n                disconnectLabel=\"Disconnect\"\n              />\n            </HeaderBox>\n\n            <div\n              style={{\n                \"text-align\": \"center\",\n              }}\n            >\n              <SelectGroup className=\"form-group\">\n                <SelectReplicaContainer>\n                  <div\n                    className={`select-replica__select ${\n                      state.selectIsOpen ? \"open\" : \"\"\n                    }`}\n                    onClick={handleSelectClick}\n                  >\n                    <div className=\"select-replica__selected\">\n                      {state.sdk.chains.filter(\n                        (chain) => chain.id === state.selectedChain.toString()\n                      ) ? (\n                        <img\n                          src={state.sdk.chains\n                            .filter(\n                              (chain) =>\n                                chain.id === state.selectedChain.toString()\n                            )\n                            .map((c) => c.url)}\n                          alt={state.sdk.chains\n                            .filter(\n                              (chain) =>\n                                chain.id === state.selectedChain.toString()\n                            )\n                            .map((c) => c.name)}\n                        />\n                      ) : (\n                        \"Select an option\"\n                      )}\n                      <span>\u25bc</span>\n                    </div>\n                    <div\n                      className={`select-replica__options ${\n                        state.selectIsOpen ? \"open\" : \"\"\n                      }`}\n                    >\n                      {state.sdk.chains.map((chain) =>\n                        chain.id !== state.selectedChain.toString() ? (\n                          <div\n                            key={chain.id}\n                            className={`select-replica__option ${\n                              selectedOption === chain.name ? \"selected\" : \"\"\n                            }`}\n                            onClick={() => handleChainChange(chain.id)}\n                          >\n                            <img src={chain.url} alt={chain.name} />\n                          </div>\n                        ) : (\n                          \"\"\n                        )\n                      )}\n                    </div>\n                  </div>\n                </SelectReplicaContainer>\n                {state.sdk.lastMintlink && (\n                  <a href={`${state.sdk.lastMintLink}`} target=\"_blank\">\n                    View Transaction\n                  </a>\n                )}\n              </SelectGroup>\n            </div>\n\n            {!state.image.cid ? (\n              <>\n                <ImageUploadCard className=\"flex-grow-1\">\n                  <Elipse>\n                    <span\n                      style={{\n                        opacity: \".2\",\n                        \"font-weight\": \"bold\",\n                      }}\n                    >\n                      NFT\n                    </span>\n                  </Elipse>\n                  <>\n                    <IpfsImageUpload\n                      image={state.image}\n                      className=\"btn text-decoration-none link-primary pe-auto\"\n                    />\n                    <div>\n                      <Text>jpg, jpeg, png, webp, gif</Text>\n                      <Text>\n                        <strong>Max. 20MB</strong>\n                      </Text>\n                    </div>\n                  </>\n                </ImageUploadCard>\n\n                {state.mintedNfts.length > 0 ? (\n                  <>\n                    <HeaderBox\n                      style={{\n                        \"margin-top\": \"4rem\",\n                      }}\n                    >\n                      <Heading\n                        style={{\n                          \"text-align\": \"left\",\n                        }}\n                        className=\"fs-2 fw-bold\"\n                      >\n                        History\n                      </Heading>\n                    </HeaderBox>\n                    <HistoryBox>\n                      {state.mintedNfts.map((nft) => (\n                        <HistoryNFTBox>\n                          {!!nft.image && <img src={nft.image} alt=\"NFT\" />}\n                          <div className=\"details\">\n                            <h1>{nft.title}</h1>\n                            <p className=\"description\">{nft.description}</p>\n                            {!!nft.account && (\n                              <p className=\"author\">{nft.account}</p>\n                            )}\n                          </div>\n                          <div className=\"tx-details\">\n                            <p className=\"title\">Sent to</p>\n                            <p className=\"info\">{nft.recipient}</p>\n                            {!!nft.network && nft.network != \"0\" && (\n                              <a\n                                target=\"_blank\"\n                                href={nft.link}\n                                className=\"title\"\n                              >\n                                View transaction on{\" \"}\n                                {state.sdk.contractAddresses[nft.network][1]}\n                              </a>\n                            )}\n                          </div>\n                        </HistoryNFTBox>\n                      ))}\n                    </HistoryBox>\n                  </>\n                ) : (\n                  <></>\n                )}\n              </>\n            ) : (\n              <>\n                <NFTCard>\n                  <div>\n                    <img\n                      src={`https://ipfs.near.social/ipfs/` + state.image.cid}\n                      alt=\"Uploaded Image\"\n                    />\n                    <div className=\"replace-btn\">\n                      <IpfsImageUpload\n                        image={state.image}\n                        className=\"btn text-decoration-none link-primary pe-auto\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"body\">\n                    <Editable\n                      className={\n                        state.title == DEFAULT_NFT_TITLE ? \"editable\" : \"\"\n                      }\n                    >\n                      <Input\n                        type=\"text\"\n                        className=\"input-title\"\n                        value={state.title || \"\"}\n                        onChange={(e) => onChangeTitle(e.target.value)}\n                      />\n                    </Editable>\n                    <Editable\n                      className={\n                        state.description == DEFAULT_NFT_DESCRIPTION\n                          ? \"editable\"\n                          : \"\"\n                      }\n                    >\n                      <TextArea\n                        type=\"text\"\n                        value={state.description || \"\"}\n                        onChange={(e) => onChangeDesc(e.target.value)}\n                      />\n                    </Editable>\n                    <SendToInput>\n                      <label>Send to</label>\n                      <Input\n                        type=\"text\"\n                        placeholder={\n                          state.selectedChain == \"0\" ? accountId : state.sender\n                        }\n                        onChange={(e) => onChangeRecipient(e.target.value)}\n                      />\n                    </SendToInput>\n                  </div>\n\n                  <button\n                    type=\"button\"\n                    disabled={\n                      !state.title ||\n                      !state.recipient ||\n                      !(state.sender || accountId)\n                    }\n                    className=\"mint-btn\"\n                    onClick={handleMint}\n                  >\n                    Mint to{\" \"}\n                    {state.sdk.contractAddresses[state.selectedChain][1]}\n                  </button>\n                </NFTCard>\n              </>\n            )}\n          </div>\n        </Main>\n        <h6 className=\"text-center mt-5\">\n          <a\n            href=\"https://genadrop.io\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            \ud83d\udca7GenaDrop\n          </a>\n          <Widget\n            src=\"miraclx.near/widget/Attribution\"\n            props={{ authors: [OWNER_ID], dep: true }}\n          />\n        </h6>\n      </div>\n    ) : (\n      \"Loading...\"\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattb.near/widget/GenaDrop.MultiChainMinter", "fact_widget_deployments_id": "4cc0b99e10b85f08d6da020901831e15", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 0}