{"tx_hash": "3Y8BU9mKLBUoHRtx9rwUAfQZDQE89ayCB1KXnJu7BPCc", "action_id_social": "AMSwXj3sKsXR7eK3bHiPi9sUS5V3cqFbPaGXprYq1fJB-0-widget", "block_id": 109785823, "block_timestamp": "2024-01-07T03:23:54.316Z", "signer_id": "mattb.near", "widget_name": "LensSDKRequire", "source_code": "let LensSDK = {\n  url: \"\",\n  jwt: {\n    accessToken: \"\",\n    refreshToken: \"\",\n  },\n  authenticated: false,\n  enableMainnet: () => {\n    LensSDK.url = \"https://api.lens.dev\";\n  },\n  enableTestnet: () => {\n    LensSDK.url = \"https://api-mumbai.lens.dev\";\n  },\n  init: () => {\n    LensSDK.enableMainnet();\n\n    return LensSDK;\n  },\n  request: (query, variables, headers, method) => {\n    return asyncFetch(LensSDK.url, {\n      method: method || \"POST\",\n      headers: headers || {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query: query,\n        variables: variables || {},\n      }),\n    });\n  },\n  getChallenge: (address) => {\n    return LensSDK.request(\n      `\n        query Challenge ($address: EthereumAddress!) {\n            challenge(request: { address: $address}) {\n            text\n            }\n        }\n       `,\n      {\n        address: address,\n      }\n    );\n  },\n  authenticateSignature: (address, signature) => {\n    return LensSDK.request(\n      `\n        mutation Authenticate ($address: EthereumAddress!, $signature: Signature!) {\n            authenticate(request: {\n            address: $address,\n            signature: $signature\n            }) {\n            accessToken\n            refreshToken\n            }\n        }\n      `,\n      {\n        address: address,\n        signature: signature,\n      }\n    );\n  },\n  authenticateLens: (address, signer, onSuccess) => {\n    return LensSDK.getChallenge(address).then((payload) => {\n      let challenge = payload.body.data.challenge.text;\n      const response = signer().signMessage(challenge);\n\n      return response.then((signature) => {\n        return LensSDK.authenticateSignature(address, signature).then((payload) => {\n          if (\n            payload.status === 200 &&\n            !!payload.body.data.authenticate.accessToken\n          ) {\n            LensSDK.jwt.accessToken =\n              payload.body.data.authenticate.accessToken;\n            LensSDK.jwt.refreshToken =\n              payload.body.data.authenticate.refreshToken;\n            LensSDK.authenticated = true;\n\n            if (onSuccess) {\n              onSuccess();\n            }\n\n            if (onRefresh) {\n              onRefresh(LensSDK);\n            }\n\n            return true;\n          }\n\n          return false;\n        });\n      });\n    });\n  },\n  isFollowedByMe: (profileId) => {\n    return LensSDK.request(\n      `\n                query Profile {\n                    profile(request: { profileId: \"` +\n        profileId +\n        `\" }) {\n                        isFollowedByMe\n                    }\n                }`,\n      {},\n      {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": LensSDK.jwt.accessToken,\n      }\n    );\n  },\n  getProfileByHandle: (handle) => {\n    return LensSDK.request(\n      `\n        query Profile ($handle: Handle!) {\n          profile(request: { handle: $handle }) {\n            id\n            name\n            bio\n            attributes {\n              displayType\n              traitType\n              key\n              value\n            }\n            followNftAddress\n            metadata\n            isDefault\n            picture {\n              ... on NftImage {\n                contractAddress\n                tokenId\n                uri\n                verified\n              }\n              ... on MediaSet {\n                original {\n                  url\n                  mimeType\n                }\n              }\n              __typename\n            }\n            handle\n            coverPicture {\n              ... on NftImage {\n                contractAddress\n                tokenId\n                uri\n                verified\n              }\n              ... on MediaSet {\n                original {\n                  url\n                  mimeType\n                }\n              }\n              __typename\n            }\n            ownedBy\n            stats {\n              totalFollowers\n              totalFollowing\n              totalPosts\n              totalComments\n              totalMirrors\n              totalPublications\n              totalCollects\n            }\n          }\n    }\n  `,\n      {\n        handle: handle,\n      }\n    );\n  },\n  getProfileByEthereumAddress: (ethereumAddress) => {\n    return LensSDK.request(\n      `\n        query Profiles ($address: [EthereumAddress!]) {\n        profiles(request: { ownedBy: $address}) {\n          items {\n            handle\n          }\n        }\n    }\n    `,\n      {\n        address: [ethereumAddress],\n      }\n    );\n  },\n  followProfile: (profileId) => {\n    return LensSDK.request(\n      `\n        mutation ProxyAction {\n            proxyAction(request: {\n                follow: {\n                    freeFollow: {\n                        profileId: \"` +\n        profileId +\n        `\"\n                    }\n                }\n            })\n        }`,\n      {},\n      {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": LensSDK.jwt.accessToken,\n      }\n    );\n  },\n  unfollowProfile: (profileId) => {\n    return LensSDK.request(\n      `\n        mutation Unfollow {\n  createUnfollowTypedData(request: { profile: \"` +\n        profileId +\n        `\" }) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n        __typename\n      }\n      types {\n        BurnWithSig {\n          name\n          type\n          __typename\n        }\n        __typename\n      }\n      value {\n        nonce\n        deadline\n        tokenId\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}`,\n      {},\n      {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": LensSDK.jwt.accessToken,\n      }\n    );\n  },\n};\n\nreturn LensSDK.init();\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattb.near/widget/LensSDKRequire", "fact_widget_deployments_id": "84cbaff66e0ee420b7cd20af6c9c31f1", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}