{"tx_hash": "9uwpj2ijLUiww6NgsixyeFjA5n3g7qnQS6pztaqr9HBZ", "action_id_social": "5wgCUG3vmrEFqyMWDkfT2hcRi7UQ6kG21dARPHnXDicA-0-widget", "block_id": 114040646, "block_timestamp": "2024-03-03T23:03:13.976Z", "signer_id": "mattb.near", "widget_name": "NearBadger.Components.Modal", "source_code": "const LensLib = VM.require(\"mattb.near/widget/NearBadger.Libs.Lens\");\nconst FarcasterLib = VM.require(\"mattb.near/widget/NearBadger.Libs.Farcaster\");\n\nconst { onClose } = props;\nconst POLYGON_CHAIN_ID = 137;\n\nState.init({\n  step: 0,\n  address: null,\n  chainId: 0,\n  handle: null,\n  checkedHandle: false,\n  platform: \"\",\n  addresses: [],\n});\n\nif (!Ethers.provider()) {\n  State.update({\n    address: null,\n  });\n} else {\n  Ethers.provider()\n    .send(\"eth_requestAccounts\")\n    .then(([address]) => State.update({ address }));\n\n  Ethers.provider().on(\"network\", (newNetwork) => {\n    State.update({\n      chainId: newNetwork.chainId,\n    });\n  });\n\n  Ethers.provider().on(\"accountsChanged\", ([address]) => {\n    State.update({\n      address,\n    });\n  });\n}\n\nif (\n  state.platform === \"lens\" &&\n  state.address &&\n  state.chainId == POLYGON_CHAIN_ID &&\n  !state.checkedHandle\n) {\n  LensLib.getAddressHandle(state.address).then((handle) => {\n    if (handle) {\n      State.update({\n        handle,\n      });\n    }\n\n    State.update({\n      checkedHandle: true,\n    });\n  });\n}\n\nconst DarkOverlay = styled.div`\n    display:flex;\n    align-items:flex-start;\n    justify-content:center;\n    width:100%;\n    height:100vh;\n    background-color:rgba(0,0,0,.02);\n    backdrop-filter:blur(5px);\n    overflow-y:scroll;\n    box-sizing:border-box;\n    padding-top:5rem;\n`;\n\nconst Box = styled.div`\n    position:relative;\n    width:100%;\n    max-width:500px;\n    border-radius:20px;\n    background-color:#fff;\n    box-shadow: 0 0 20px 10px rgba(0,0,0,.1);\n    padding:1.5rem;\n    border:2px solid rgba(0,0,0,.05);\n    margin-top:100px;\n`;\n\nconst Title = styled.h1`\n    font-size:1.6rem;\n    font-weight:bold;\n    margin-bottom:1.5rem;\n`;\n\nconst Text = styled.p`\n\n`;\n\nconst Controls = styled.div`\n    width:100%;\n    margin-top:1.2rem;\n`;\n\nconst StepButton = styled.button`\n    display:flex;\n    justify-content:center;\n    align-items:center;\n    width:100%;\n    height:50px;\n    background-color:#87B697;\n    border:0;\n    font-weight:bold;\n    color:#000;\n    margin-top:.5rem;\n    border-radius:30px;\n    font-size:.9rem;\n\n    :disabled {\n      background-color: #F2F2F2;\n      color:rgba(0,0,0,.3);\n    }\n`;\n\nconst Requirements = styled.ul`\n    position:relative;\n    padding:0;\n    margin:0;\n    list-style:none;\n    padding: 30px 0 30px 50px;\n    border-radius:10px;\n    background-color:#F2F2F2;\n    overflow:hidden;\n\n    ::after {\n        content:'';\n        position:absolute;\n        top:0;\n        left:40px;\n        width:2px;\n        height:100%;\n        background-color:rgba(0,0,0,.1);\n        border-radius:10px;\n    }\n\n    .retry {\n        display:block;\n        z-index:99999;\n        position:absolute;\n        cursor:pointer;\n        right:13px;\n        bottom:13px;\n        font-size:.8rem;\n        font-weight:bold;\n        opacity:.5;\n        background-color:rgba(0,0,0,.1);\n        padding: 3px 10px;\n        border-radius:20px;\n        border:0;\n        transition: all .2s;\n        border:1px solid rgba(0,0,0,.05);\n\n        :hover {\n            opacity:.7;\n            transition: all .2s;\n        }\n    }\n`;\n\nconst Requirement = styled.li`\n    font-size:.8rem;\n    position:relative;\n    padding-left:5px;\n    display:flex;\n    flex-direction:column;\n    justify-content:flex-start;\n    \n    :not(:last-of-type) {\n        margin-bottom:10px;\n    }\n\n    h2 {\n        color:rgba(0,0,0,.3);\n        font-size:.8rem;\n        font-weight:normal;\n        padding:0;\n        margin:0;\n\n        + .description {\n            margin-left:10px;\n        }\n    }\n\n    &.selected {\n        \n        h2 {\n            color:#000;\n            font-size:.95rem;\n            font-weight:bold;\n            padding:0;\n            margin:0;\n\n            + .description {\n                margin-left:10px;\n            }\n        }\n\n        ::after {\n            width:20px;\n            height:20px;\n            left:-19px;\n        }\n\n        ::before {\n            width:12px;\n            height:12px;\n            left:-15px;\n        }\n\n        &.show-description {\n          + .description {\n              display:block;\n          }\n        }\n\n        &.failed {\n            + .description {\n                display:block;\n            }\n        }\n    }\n\n    &.pending {\n        ::before {\n            background-color:#FDD835;\n        }\n    }\n\n    &.verified {\n        ::before {\n            background-color:#00C753;\n        }\n\n        &+ .description {\n          display:none!important;\n        }\n    }\n\n    &.failed {\n        ::before {\n            background-color:#FF1744;\n        }\n    }\n\n    ::after {\n        content:'';\n        position:absolute;\n        width:15px;\n        height:15px;\n        background-color:#F2F2F2;\n        border-radius:100%;\n        margin:auto;\n        top:0;\n        bottom:0;\n        left:-17px;\n        z-index:999;\n    }\n\n    ::before {\n        content:'';\n        position:absolute;\n        width:8px;\n        height:8px;\n        background-color:rgba(0,0,0,.2);\n        border-radius:100%;\n        margin:auto;\n        top:0;\n        bottom:0;\n        left:-13px;\n        z-index:1000;\n    }\n\n    &+ .description {\n        display:none;\n    }\n`;\n\nconst Description = styled.li`\n    margin-left:15px;\n    margin-bottom:10px;\n    font-size:.8rem;\n\n    button {\n        display:block;\n        z-index:99999;\n        cursor:pointer;\n        right:13px;\n        bottom:13px;\n        font-size:.8rem;\n        font-weight:bold;\n        color:#000;\n        opacity:.5;\n        background-color:rgba(0,0,0,.1);\n        padding: 3px 10px;\n        border-radius:20px;\n        border:0;\n        transition: all .2s;\n        border:1px solid rgba(0,0,0,.05);\n        margin:10px 0 15px;\n\n        :hover, :focus {\n            opacity:.7;\n            transition: all .2s;\n            color:#000;\n            background-color:rgba(0,0,0,.1);\n            border:1px solid rgba(0,0,0,.05);\n        }\n    }\n\n    input {\n      max-width:150px;\n      margin-top:10px;\n    }\n`;\n\nconst Warning = styled.div`\n    width:100%;\n    background-color:#fff2c4;\n    border-radius:10px;\n    margin-top:20px;\n    padding:20px;\n\n    h2 {\n        font-size:1.2rem;\n        font-weight:bold;\n    }\n\n    p {\n        font-size:.8rem;\n        margin:0;\n        padding:0;\n    }\n`;\n\nconst Grid = styled.div`\n  display:flex;\n  justify-content:center;\n  flex-wrap:wrap;\n`;\n\nconst Cell = styled.div`\n  padding:10px;\n  flex-grow:1;\n  max-width:150px;\n\n  :first-of-type {\n    padding-left:0;\n  }\n\n  :last-of-type {\n    padding-right:0;\n  }\n`;\n\nconst Option = styled.div`\n  display:flex;\n  align-items:center;\n  justify-content:center;\n  flex-direction:column;\n  cursor:pointer;\n  width:100%;\n  height:calc(150px - 20px);\n  border:3px solid rgba(0,0,0,.1);\n  border-radius:15px;\n  box-shadow: 0 0 0 0 rgba(0,0,0,.02);\n  transition: all .2s;\n\n  :hover {\n    box-shadow: 0 0 0 4px rgba(0,0,0,.02);\n    border:3px solid rgba(0,0,0,.2);\n    transition: all .2s;\n\n    * {\n      opacity:1;\n      transition: all .2s;\n    }\n  }\n\n  * {\n    opacity:.6;\n    transition: all .2s;\n  }\n\n  &.selected {\n    border:3px solid rgba(0,0,0,.2);\n    \n    * {\n      opacity:1;\n      transition: all .2s;\n    }\n  }\n\n  img {\n    margin-bottom:10px;\n  }\n\n  p {\n    margin:0;\n    padding:0;\n    font-weight:bold;\n    font-size:.8rem;\n  }\n`;\n\nlet steps = [\n  <>\n    <Title>Choose platform</Title>\n    <Text>\n      Select one of the supported social platforms you want to get your profile\n      verified on and click <strong>Next</strong>\n    </Text>\n    <Grid>\n      <Cell>\n        <Option\n          className={`${state.platform === \"lens\" ? \"selected\" : \"\"}`}\n          onClick={() => State.update({ platform: \"lens\" })}\n        >\n          <img\n            style={{\n              maxWidth: \"80px\",\n            }}\n            src=\"https://ipfs.near.social/ipfs/bafkreiggkmczb7v43nicdia4n7xqkgynopby5k3nxs3zj6fij5eeurh23i\"\n          />\n          <p>Lens Protocol</p>\n        </Option>\n      </Cell>\n      <Cell>\n        <Option\n          className={`${state.platform === \"farcaster\" ? \"selected\" : \"\"}`}\n          onClick={() => State.update({ platform: \"farcaster\" })}\n        >\n          <img\n            style={{\n              maxWidth: \"60px\",\n            }}\n            src=\"https://ipfs.near.social/ipfs/bafkreif2ff55fa77acvcclxlccsidhyz5sos3abs5yln7daotbp35nwa7a\"\n          />\n          <p>Farcaster</p>\n        </Option>\n      </Cell>\n    </Grid>\n  </>,\n  {\n    lens: (\n      <>\n        <Title>Verify handle</Title>\n        <Text>\n          Before starting the process, we need to check everything is ready to\n          verify your handle\n        </Text>\n        <Requirements>\n          <Requirement\n            className={`${\n              context.accountId != null ? \"verified\" : \"selected failed\"\n            }`}\n          >\n            <h2>NEAR account connected</h2>\n          </Requirement>\n          <Description className=\"description\">\n            Your NEAR account is not connected\n            <button>Check again</button>\n          </Description>\n          <Requirement\n            className={`\n          ${state.address ? \"verified\" : \"selected failed\"}\n      `}\n          >\n            <h2>Ethereum wallet connected</h2>\n          </Requirement>\n          <Description className=\"description\">\n            Your wallet is not connected\n            <Web3Connect connectLabel=\"Connect wallet\" />\n          </Description>\n          <Requirement\n            className={`\n          ${\n            state.address && state.chainId == POLYGON_CHAIN_ID ? \"verified\" : \"\"\n          }\n          ${\n            state.address && state.chainId != POLYGON_CHAIN_ID\n              ? \"selected failed\"\n              : \"\"\n          }\n      `}\n          >\n            <h2>Polygon network connected</h2>\n          </Requirement>\n          <Description className=\"description\">\n            Your wallet is not connected to Polygon network. Some wallets might\n            experience issues when trying to switch automatically. Please, in\n            that case, switch it manually.\n            <button\n              onClick={() => {\n                try {\n                  Ethers.setChain({\n                    chainId: ethers.utils.hexlify(POLYGON_CHAIN_ID),\n                  });\n                } catch {\n                  Ethers.send(\"wallet_switchEthereumChain\", [\n                    {\n                      chainId: ethers.utils.hexlify(POLYGON_CHAIN_ID),\n                    },\n                  ]);\n                }\n              }}\n            >\n              Switch network\n            </button>\n          </Description>\n          <Requirement\n            className={`\n          ${state.handle && state.address ? \"verified\" : \"\"}\n          ${\n            !state.checkedHandle &&\n            state.address &&\n            state.chainId == POLYGON_CHAIN_ID\n              ? \"selected pending\"\n              : \"\"\n          }\n          ${\n            state.address && state.checkedHandle && !state.handle\n              ? \"selected failed\"\n              : \"\"\n          }\n      `}\n          >\n            <h2>Lens handle available</h2>\n          </Requirement>\n          <Description className=\"description\">\n            Your address doesn't own any Lens handle\n          </Description>\n        </Requirements>\n        {state.handle && (\n          <Warning>\n            <h2>Warning</h2>\n            <Text>\n              You will need NEAR in your account to save your verified identity\n            </Text>\n          </Warning>\n        )}\n      </>\n    ),\n    farcaster: (\n      <>\n        <Title>Verify handle</Title>\n        <Text>\n          Before starting the process, we need to check everything is ready to\n          verify your handle\n        </Text>\n        <Requirements>\n          <Requirement\n            className={`${\n              context.accountId != null ? \"verified\" : \"selected failed\"\n            }`}\n          >\n            <h2>NEAR account connected</h2>\n          </Requirement>\n          <Description className=\"description\">\n            Your NEAR account is not connected\n            <button>Check again</button>\n          </Description>\n          <Requirement\n            className={`\n            ${\n              context.accountId != null\n                ? \"selected pending show-description\"\n                : \"\"\n            }\n          ${state.handle && state.checkedHandle ? \"verified\" : \"\"}\n      `}\n          >\n            <h2>Farcaster profile linked to wallet</h2>\n          </Requirement>\n          <Description className=\"description\">\n            Link your Ethereum address to your Farcaster profile.\n            <br />\n            To do so, go to the Warpcast app and click\n            <br />\n            <strong>\n              Settings {\">\"} Connected addresses {\">\"} Connect address\n            </strong>\n            <br />\n            After that, please type your Farcaster username below\n            <br />\n            <input\n              type=\"text\"\n              value={state.handle}\n              onChange={(e) => State.update({ handle: e.target.value })}\n            />\n            <button\n              onClick={() => {\n                FarcasterLib.getAddressesByHandle(state.handle).then(\n                  (evmAddresses) => {\n                    State.update({\n                      addresses: evmAddresses,\n                    });\n\n                    State.update({\n                      checkedHandle: true,\n                    });\n                  }\n                );\n              }}\n            >\n              Next\n            </button>\n          </Description>\n          <Requirement\n            className={`\n              ${\n                state.handle && state.checkedHandle\n                  ? state.address\n                    ? \"verified\"\n                    : \"selected failed\"\n                  : \"pending\"\n              }\n          `}\n          >\n            <h2>Ethereum wallet connected</h2>\n          </Requirement>\n          <Description className=\"description\">\n            Your wallet is not connected\n            <Web3Connect connectLabel=\"Connect wallet\" />\n          </Description>\n          <Requirement\n            className={`\n              ${state.addresses.includes(state.address) && true ? \"verified\" : \"\"}\n              ${state.addresses.length === 0 ? \"pending\" : \"\"}\n          `}\n          >\n            <h2>Ethereum wallet owns the profile</h2>\n          </Requirement>\n          <Description className=\"description\">\n            Looks like your wallet doesn't own this profile. Please, restart the\n            process and try again.\n          </Description>\n        </Requirements>\n        {state.handle &&\n          state.addresses.length > 0 && (\n            <Warning>\n              <h2>Warning</h2>\n              <Text>\n                You will need NEAR in your account to save your verified\n                identity\n              </Text>\n            </Warning>\n          )}\n      </>\n    ),\n  }[state.platform] || <></>,\n];\n\nreturn (\n  <DarkOverlay\n    onClick={() => {\n      if (state.boxClicked) {\n        State.update({ boxClicked: false });\n      } else {\n        onClose();\n      }\n    }}\n  >\n    <Box\n      onClick={() => {\n        State.update({ boxClicked: true });\n      }}\n    >\n      {steps[state.step] ?? \"\"}\n      <Controls>\n        {steps[state.step + 1] && (\n          <StepButton\n            onClick={() => State.update({ step: state.step + 1 })}\n            disabled={!state.platform}\n          >\n            Next\n          </StepButton>\n        )}\n        {steps[state.step - 1] && (\n          <StepButton onClick={() => State.update({ step: state.step - 1 })}>\n            Back\n          </StepButton>\n        )}\n        {!steps[state.step + 1] && (\n          <StepButton\n            onClick={() => {\n              if (state.platform === \"lens\") {\n                LensLib.createProof(state.address, context.accountId);\n              } else {\n                FarcasterLib.createProof(\n                  state.handle,\n                  state.address,\n                  context.accountId\n                );\n              }\n            }}\n            disabled={\n              state.platform === \"lens\"\n                ? !context.accountId ||\n                  !state.address ||\n                  state.chainId != POLYGON_CHAIN_ID ||\n                  !state.handle\n                : !context.accountId ||\n                  !state.addresses ||\n                  !state.address\n            }\n          >\n            Sign & Save\n          </StepButton>\n        )}\n      </Controls>\n    </Box>\n  </DarkOverlay>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattb.near/widget/NearBadger.Components.Modal", "fact_widget_deployments_id": "c76fcf35c52e50d9d5f5f36d09db844c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}