{"tx_hash": "BF93Aex3fMy7zrYm57xw4KyZqNHYuk6c5cW9zNJSQMxj", "action_id_social": "F4rj7sPzbHXJjRf2hevmFjCMduF6gqstpAjpwSW2ViRm-0-widget", "block_id": 99726756, "block_timestamp": "2023-08-26T20:22:38.415Z", "signer_id": "mattb.near", "widget_name": "NearBook.Components.App.Editor", "source_code": "const RICHTEXT_PREVIEW_MODE = \"rich\";\nconst MARKDOWN_PREVIEW_MODE = \"markdown\";\nconst DEFAULT_PREVIEW_MODE = RICHTEXT_PREVIEW_MODE;\nconst MARKDOWN_ICON_URL = \"https://ipfs.near.social/ipfs/bafkreiatzdufjgkofiwg4pe3otrfqqunnwrad5obwl4kmcnudfcm2yuvgu\";\nconst RICHTEXT_ICON_URL = \"https://ipfs.near.social/ipfs/bafkreifny5bvi5ad5bmfimhvi6dl52cwg4nb3koqlsp6thldpll2khnm3a\";\n\nconst TEXT_FORMATS = {\n  format: (text, startSymbol, endSymbol) => {\n    return text.length == 0 ? \"\" : `${startSymbol}${text}${endSymbol}`;\n  },\n  bold: {\n    symbol: \"B\",\n    length: 2,\n    format: (text) => TEXT_FORMATS.format(text, \"**\", \"**\"),\n  },\n  italic: {\n    symbol: \"I\",\n    length: 1,\n    format: (text) => TEXT_FORMATS.format(text, \"*\", \"*\"),\n  },\n  underline: {\n    symbol: \"U\",\n    length: 2,\n    format: (text) => TEXT_FORMATS.format(text, \"++\", \"++\"),\n  },\n  code: {\n    symbol: \"</>\",\n    length: 2,\n    format: (text) => TEXT_FORMATS.format(text, \"`\", \"`\"),\n  },\n};\n\nconst getRichText = () => {\n  let text = state.document.rawText;\n\n  if (state.format) {\n    let positions = 0;\n\n    state.format.map((val) => {\n      if (val.end) {\n        text =\n          text.substring(0, val.start + positions) +\n          TEXT_FORMATS[val.type].format(\n            text.substring(val.start + positions, val.end + positions)\n          ) +\n          text.substring(val.end + positions, text.length);\n\n        positions += TEXT_FORMATS[val.type].length * 2;\n      } else {\n        if (state[val.type]) {\n          text =\n            text.substring(0, val.start + positions) +\n            TEXT_FORMATS[val.type].format(\n              text.substring(val.start + positions, text.length)\n            );\n        }\n      }\n    });\n\n    return text;\n  }\n\n  return text;\n};\n\nState.init({\n  previewMode: DEFAULT_PREVIEW_MODE,\n  format: [],\n  bold: false,\n  italic: false,\n  underline: false,\n  code: false,\n  document: Storage.get(\"document\") || {\n    richText: getRichText(),\n    rawText: \"\",\n  },\n  history: Storage.get(\"document-history\") || {\n    backIndex: null,\n    forwardIndex: null,\n    currentIndex: null,\n    data: []\n  }\n});\n\nconst Editor = styled.div`\n    display:flex;\n    flex-direction:column;\n    width:100%;\n    height:calc(100vh - 50px - 4rem);\n`;\n\nconst Toolbar = styled.div`\n    display:flex;\n    align-items:center;\n    width:100%;\n    height:50px;\n    background-color:#fff;\n    border: 1px solid rgba(0,0,0,.05);\n`;\n\nconst Logo = styled.div`\n    display:flex;\n    align-items:center;\n    justify-content:center;\n    width:50px;\n    height:100%;\n    border-right:1px solid rgba(0,0,0,.05);\n    font-weight:bold;\n    font-size:1.7rem;\n`;\n\nconst Document = styled.div`\n    flex-grow:1;\n    background-color:rgba(0,0,0,.02);\n    padding: 2rem;\n    box-sizing:border-box;\n`;\n\nconst Wrapper = styled.div`\n    display:flex;\n    flex-direction:column;\n    width:100%;\n    height:100%;\n    max-width:800px;\n    margin: 0 auto;\n`;\n\nconst TitleInput = styled.input`\n    border:0;\n    color:rgba(0,0,0,.9);\n    font-weight:bold;\n    background-color:transparent;\n    outline-style:none;\n    font-size:2rem;\n    margin-bottom:1rem;\n\n    ::placeholder {\n        color:rgba(0,0,0,.6)!important;\n        font-weight:bold!important;\n        font-size:2rem;\n    }\n`;\n\nconst DocumentBody = styled.div`\n    position:relative;\n    display:flex;\n    flex-direction:column;\n    font-size:1rem;\n    height:100%;\n`;\n\nconst BodyArea = styled.textarea`\n    border:0;\n    width:100%;\n    flex-grow:1;\n    background-color:transparent;\n    outline-style:none;\n    font-size:1rem;\n    color:transparent;\n    caret-color:black;\n    resize:none;\n\n    ::placeholder {\n        color:rgba(0,0,0,.4)!important;\n        font-size:1rem;\n    }\n`;\n\nconst Options = styled.ul`  \n    display:flex;\n    list-style:none;\n    padding:0;\n    margin:0;\n    padding:1rem;\n    flex-grow:1;\n    text-transform:capitalize;\n\n    li {\n        display:flex;\n        align-items:center;\n        justify-content:center;\n        min-width:30px;\n        min-height:30px;\n        border-radius:7px;\n        border:2px solid rgba(0,0,0,.05);\n        font-size:.8rem;\n        font-weight:bold;\n        cursor:pointer;\n        transition:all .2s;\n\n        &.selected {\n          background-color:rgba(0,0,0,.05);\n        }\n\n        &.italic {\n          font-style:italic;\n          span {\n            position:relative;\n            left:-1px;\n          }\n        }\n\n        &.underline {\n          text-decoration:underline;\n        }\n\n        :not(:last-of-type) {\n            margin-right:5px;\n        }\n\n        :hover {\n            transition:all .2s;\n            box-shadow: 0 0 0 2px rgba(0,0,0,.05);\n        }\n    }\n`;\n\nconst TextVisualizer = styled.div`\n    position:absolute;\n    top:0;\n    left:0;\n\n    * {\n        margin:0;\n        padding:0;\n    }\n`;\n\nconst Actions = styled.div`\n    padding: .7rem;\n    \n    .save, .back {\n        padding:.3rem 1rem;\n        border:0;\n        border-radius:5px;\n        font-size:.8rem;\n        transition: all .2s;\n\n        :hover {\n            transition: all .2s;\n            opacity:.9;\n        }\n    }\n\n    .save {\n        background-color: #2142e7;\n        color:#fff;\n\n        :hover {\n            background-color: #2142e7;\n        }\n    }\n\n    .back {\n        opacity:.6;\n        color:#000;\n        background-color:#fff;\n        box-shadow: inset 0 0 0 2px rgba(0,0,0,.1)!important;\n\n        :hover {\n            opacity:.9;\n        }\n    }\n`;\n\nconst DocumentFooter = styled.div`\n  width:100%;\n  min-height:30px;\n  font-size:.8rem;\n  text-align:right;\n  color:rgba(0,0,0,.4)\n`;\n\nconst toggleOption = (optionType) => {\n  let option = {};\n  option[optionType] = !state[optionType];\n\n  State.update(option);\n\n  if (state[optionType]) {\n    State.update({\n      format: [\n        ...state.format,\n        {\n          type: optionType,\n          start: state.document.rawText.length,\n          end: null,\n        },\n      ],\n    });\n  } else {\n    let newFormat = state.format.map((val, idx) => {\n      if (val.type === optionType && !val.end) {\n        val.end = state.document.rawText.length;\n      }\n\n      return val;\n    });\n    State.update({\n      format: newFormat,\n    });\n\n    State.update({\n      document: {\n        ...state.document,\n        richText: getRichText(),\n      },\n    });\n  }\n};\n\nreturn (\n  <Editor>\n    <Toolbar>\n      <Logo>n</Logo>\n      <Options>\n        {Object.keys(TEXT_FORMATS)\n          .filter((key) => key !== \"format\")\n          .map((format) => (\n            <OverlayTrigger\n              key={format}\n              placement=\"bottom\"\n              overlay={\n                <Tooltip id={`tooltip-${format}`}>{format.substring(0,1).toUpperCase() + format.substring(1, format.length)}</Tooltip>\n                }\n            >\n              <li\n                className={`format ${state[format] ? \"selected\" : \"\"}`}\n                onMouseDown={(e) => {\n                  e.preventDefault();\n                }}\n                onClick={(e) => toggleOption(format)}\n              >\n                {TEXT_FORMATS[format].symbol}\n              </li>\n            </OverlayTrigger>\n          ))}\n      </Options>\n      <Actions>\n        <Options>\n          <li className={state.history.data.length == 0}>{\"<\"}</li>\n          <li>{\">\"}</li>\n          <li><button className=\"back\">Close</button></li>\n          <li><button className=\"save\">Save</button></li>\n        </Options>\n      </Actions>\n    </Toolbar>\n    <Document>\n      <Wrapper>\n        <TitleInput type=\"text\" placeholder=\"This is the title.\" />\n        <DocumentBody>\n          {RICHTEXT_PREVIEW_MODE === state.previewMode && (\n            <TextVisualizer>\n              <Markdown text={state.document.richText} />\n            </TextVisualizer>\n          )}\n          <BodyArea\n            value={state.document.rawText}\n            style={{\n              color:\n                MARKDOWN_PREVIEW_MODE === state.previewMode\n                  ? \"#000\"\n                  : \"transparent\",\n                caretColor: `${state.document.rawText.length > 0 ? \"transparent\" : \"#000\"}`\n            }}\n            onChange={(event) => {\n              State.update({\n                document: {\n                  ...state.document,\n                  rawText: event.target.value,\n                },\n              });\n\n              State.update({\n                document: {\n                  ...state.document,\n                  richText: getRichText(),\n                },\n              });\n\n              Storage.set(\"document\", state.document);\n            }}\n            placeholder=\"This is the body of your document. Type something.\"\n          />\n        </DocumentBody>\n        <DocumentFooter>\n          {state.document.rawText.split(\" \").length - 1} words\n          <br />\n          {state.document.rawText.length} characters\n        </DocumentFooter>\n      </Wrapper>\n    </Document>\n  </Editor>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattb.near/widget/NearBook.Components.App.Editor", "fact_widget_deployments_id": "8dfdf5b78dad802653173ebfede1cd1d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}