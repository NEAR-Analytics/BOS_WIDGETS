{"tx_hash": "7Kf4cec1M6CgiAF56pVsRTJevrb9gVmNWJc4uhUsvJfZ", "action_id_social": "fSr43EX6EijN5WQPydE4afQG4BXCWGEzhUkLusNy7uM-0-widget", "block_id": 109897791, "block_timestamp": "2024-01-08T12:07:02.820Z", "signer_id": "mattb.near", "widget_name": "SDKs.Verifiers.Lens", "source_code": "const EthereumSigner = VM.require(`sdks.near/widget/SDKs.EthereumSigner.Main`);\nconst LensSDK = VM.require(`mattb.near/widget/LensSDKRequire`);\n\nconst LensVerifier = {\n  authenticate: (address) => {\n    return LensSDK.authenticateLens(address, () =>\n      Ethers.provider().getSigner()\n    );\n  },\n  createProof: (address, nearAccount) => {\n    return LensVerifier.authenticate(address).then((success) => {\n      if (success) {\n        return LensSDK.getProfileByEthereumAddress(address).then((payload) => {\n          let [profile] = payload.body.data.profiles.items;\n          let handle = profile.handle;\n\n          if (!handle) {\n              return new Promise((_, reject) => reject(\"This address doesn't own a handle or the request failed\"));\n          }\n\n          return LensVerifier.sign(handle, nearAccount, address).then(\n            (signature) => {\n              return {\n                handle,\n                signature,\n              };\n            }\n          );\n        });\n      }\n\n      return new Promise((_, reject) => reject(\"Lens authentication failed\"));\n    });\n  },\n  sign: (handle, nearAccount, address) => {\n    return EthereumSigner.sign(\n      LensVerifier.getChallenge(handle, nearAccount, address)\n    );\n  },\n  verify: (handle, nearAccount, signature) => {\n    return LensSDK.getProfileByHandle(handle).then((payload) => {\n      let expectedAddress = payload.body.data.profile.ownedBy;\n\n      const message = LensVerifier.getChallenge(\n        handle,\n        nearAccount,\n        expectedAddress\n      );\n\n      return EthereumSigner.verify(message, signature, expectedAddress);\n    });\n  },\n  getChallenge: (handle, nearAccount, address) => {\n    return `${nearAccount.toLowerCase()} with address ${address.toLowerCase()} owns the ${handle.toLowerCase()} handle`;\n  },\n};\n\nreturn LensVerifier;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattb.near/widget/SDKs.Verifiers.Lens", "fact_widget_deployments_id": "22ce508e1c24776f7ff75dc133958ed0", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}