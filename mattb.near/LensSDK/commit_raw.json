{"tx_hash": "7ocdfUVH3PPvbGkgnKVL5NGuFFLPNPDZkJ5gck92vYVW", "action_id_social": "EaaHUWSLwoXe3bdMyVY8ngHKPNqrbXVRNLEFsfKjYQEF-0-widget", "block_id": 96368476, "block_timestamp": "2023-07-13T10:13:20.980Z", "signer_id": "mattb.near", "widget_name": "LensSDK", "source_code": "const { onLoad, onRefresh, loaded, testnet } = props;\n\nconst LENS_API_URL = testnet\n  ? \"https://api-mumbai.lens.dev\"\n  : \"https://api.lens.dev\";\n\nlet LensSDK = {\n  jwt: {\n    accessToken: \"\",\n    refreshToken: \"\",\n  },\n  authenticated: false,\n  request: (query, variables, headers, method) => {\n    return asyncFetch(LENS_API_URL, {\n      method: method || \"POST\",\n      headers: headers || {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query: query,\n        variables: variables || {},\n      }),\n    });\n  },\n  getChallenge: (address) => {\n    return LensSDK.request(\n      `\n        query Challenge ($address: EthereumAddress!) {\n            challenge(request: { address: $address}) {\n            text\n            }\n        }\n       `,\n      {\n        address: address,\n      }\n    );\n  },\n  authenticateSignature: (address, signature) => {\n    return LensSDK.request(\n      `\n        mutation Authenticate ($address: EthereumAddress!, $signature: Signature!) {\n            authenticate(request: {\n            address: $address,\n            signature: $signature\n            }) {\n            accessToken\n            refreshToken\n            }\n        }\n      `,\n      {\n        address: address,\n        signature: signature,\n      }\n    );\n  },\n  authenticateLens: (address, signer, onSuccess) => {\n    LensSDK.getChallenge(address).then((payload) => {\n      let challenge = payload.body.data.challenge.text;\n      const response = signer().signMessage(challenge);\n\n      response.then((signature) => {\n        LensSDK.authenticateSignature(address, signature).then((payload) => {\n          if (\n            payload.status === 200 &&\n            !!payload.body.data.authenticate.accessToken\n          ) {\n            LensSDK.jwt.accessToken =\n              payload.body.data.authenticate.accessToken;\n            LensSDK.jwt.refreshToken =\n              payload.body.data.authenticate.refreshToken;\n            LensSDK.authenticated = true;\n\n            if (onSuccess) {\n              onSuccess();\n            }\n\n            if (onRefresh) {\n              onRefresh(LensSDK);\n            }\n          }\n        });\n      });\n    });\n  },\n  isFollowedByMe: (profileId) => {\n    return LensSDK.request(\n      `\n                query Profile {\n                    profile(request: { profileId: \"` +\n        profileId +\n        `\" }) {\n                        isFollowedByMe\n                    }\n                }`,\n      {},\n      {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": LensSDK.jwt.accessToken,\n      }\n    );\n  },\n  getProfileByHandle: (handle) => {\n    return LensSDK.request(\n      `\n        query Profile ($handle: Handle!) {\n          profile(request: { handle: $handle }) {\n            id\n            name\n            bio\n            attributes {\n              displayType\n              traitType\n              key\n              value\n            }\n            followNftAddress\n            metadata\n            isDefault\n            picture {\n              ... on NftImage {\n                contractAddress\n                tokenId\n                uri\n                verified\n              }\n              ... on MediaSet {\n                original {\n                  url\n                  mimeType\n                }\n              }\n              __typename\n            }\n            handle\n            coverPicture {\n              ... on NftImage {\n                contractAddress\n                tokenId\n                uri\n                verified\n              }\n              ... on MediaSet {\n                original {\n                  url\n                  mimeType\n                }\n              }\n              __typename\n            }\n            ownedBy\n            stats {\n              totalFollowers\n              totalFollowing\n              totalPosts\n              totalComments\n              totalMirrors\n              totalPublications\n              totalCollects\n            }\n          }\n    }\n  `,\n      {\n        handle: handle,\n      }\n    );\n  },\n  getProfileByEthereumAddress: (ethereumAddress) => {\n    return LensSDK.request(\n      `\n        query Profiles ($address: [EthereumAddress!]) {\n        profiles(request: { ownedBy: $address}) {\n          items {\n            handle\n          }\n        }\n    }\n    `,\n      {\n        address: [ethereumAddress],\n      }\n    );\n  },\n  followProfile: (profileId) => {\n    return LensSDK.request(\n      `\n        mutation ProxyAction {\n            proxyAction(request: {\n                follow: {\n                    freeFollow: {\n                        profileId: \"` +\n        profileId +\n        `\"\n                    }\n                }\n            })\n        }`,\n      {},\n      {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": LensSDK.jwt.accessToken,\n      }\n    );\n  },\n  unfollowProfile: (profileId) => {\n    return LensSDK.request(\n      `\n        mutation Unfollow {\n  createUnfollowTypedData(request: { profile: \"` +\n        profileId +\n        `\" }) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n        __typename\n      }\n      types {\n        BurnWithSig {\n          name\n          type\n          __typename\n        }\n        __typename\n      }\n      value {\n        nonce\n        deadline\n        tokenId\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}`,\n      {},\n      {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": LensSDK.jwt.accessToken,\n      }\n    );\n  },\n  getPost: (publicationId) => {\n    return LensSDK.request(`query Publication {\n  publication(request: {\n    publicationId: \"${publicationId}\"\n  }) {\n   __typename \n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n    ... on Mirror {\n      ...MirrorFields\n    }\n  }\n}\n\nfragment MediaFields on Media {\n  url\n  mimeType\n}\n\nfragment ProfileFields on Profile {\n  id\n  name\n  bio\n  attributes {\n    displayType\n    traitType\n    key\n    value\n  }\n  isFollowedByMe\n  isFollowing(who: null)\n  followNftAddress\n  metadata\n  isDefault\n  handle\n  picture {\n    ... on NftImage {\n      contractAddress\n      tokenId\n      uri\n      verified\n    }\n    ... on MediaSet {\n      original {\n        ...MediaFields\n      }\n    }\n  }\n  coverPicture {\n    ... on NftImage {\n      contractAddress\n      tokenId\n      uri\n      verified\n    }\n    ... on MediaSet {\n      original {\n        ...MediaFields\n      }\n    }\n  }\n  ownedBy\n  dispatcher {\n    address\n  }\n  stats {\n    totalFollowers\n    totalFollowing\n    totalPosts\n    totalComments\n    totalMirrors\n    totalPublications\n    totalCollects\n  }\n  followModule {\n    ...FollowModuleFields\n  }\n}\n\nfragment PublicationStatsFields on PublicationStats { \n  totalAmountOfMirrors\n  totalAmountOfCollects\n  totalAmountOfComments\n  totalUpvotes\n}\n\nfragment MetadataOutputFields on MetadataOutput {\n  name\n  description\n  content\n  media {\n    original {\n      ...MediaFields\n    }\n  }\n  attributes {\n    displayType\n    traitType\n    value\n  }\n}\n\nfragment Erc20Fields on Erc20 {\n  name\n  symbol\n  decimals\n  address\n}\n\nfragment PostFields on Post {\n  id\n  profile {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  metadata {\n    ...MetadataOutputFields\n  }\n  createdAt\n  collectModule {\n    ...CollectModuleFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n  appId\n  hidden\n  reaction(request: null)\n  mirrors(by: null)\n  hasCollectedByMe\n}\n\nfragment MirrorBaseFields on Mirror {\n  id\n  profile {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  metadata {\n    ...MetadataOutputFields\n  }\n  createdAt\n  collectModule {\n    ...CollectModuleFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n  appId\n  hidden\n  reaction(request: null)\n  hasCollectedByMe\n}\n\nfragment MirrorFields on Mirror {\n  ...MirrorBaseFields\n  mirrorOf {\n   ... on Post {\n      ...PostFields          \n   }\n   ... on Comment {\n      ...CommentFields          \n   }\n  }\n}\n\nfragment CommentBaseFields on Comment {\n  id\n  profile {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  metadata {\n    ...MetadataOutputFields\n  }\n  createdAt\n  collectModule {\n    ...CollectModuleFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n  appId\n  hidden\n  reaction(request: null)\n  mirrors(by: null)\n  hasCollectedByMe\n}\n\nfragment CommentFields on Comment {\n  ...CommentBaseFields\n  mainPost {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n      ...MirrorBaseFields\n      mirrorOf {\n        ... on Post {\n           ...PostFields          \n        }\n        ... on Comment {\n           ...CommentMirrorOfFields        \n        }\n      }\n    }\n  }\n}\n\nfragment CommentMirrorOfFields on Comment {\n  ...CommentBaseFields\n  mainPost {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n       ...MirrorBaseFields\n    }\n  }\n}\n\nfragment FollowModuleFields on FollowModule {\n  ... on FeeFollowModuleSettings {\n    type\n    amount {\n      asset {\n        name\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n    recipient\n  }\n  ... on ProfileFollowModuleSettings {\n    type\n    contractAddress\n  }\n  ... on RevertFollowModuleSettings {\n    type\n    contractAddress\n  }\n  ... on UnknownFollowModuleSettings {\n    type\n    contractAddress\n    followModuleReturnData\n  }\n}\n\nfragment CollectModuleFields on CollectModule {\n  __typename\n  ... on FreeCollectModuleSettings {\n    type\n    followerOnly\n    contractAddress\n  }\n  ... on FeeCollectModuleSettings {\n    type\n    amount {\n      asset {\n        ...Erc20Fields\n      }\n      value\n    }\n    recipient\n    referralFee\n  }\n  ... on LimitedFeeCollectModuleSettings {\n    type\n    collectLimit\n    amount {\n      asset {\n        ...Erc20Fields\n      }\n      value\n    }\n    recipient\n    referralFee\n  }\n  ... on LimitedTimedFeeCollectModuleSettings {\n    type\n    collectLimit\n    amount {\n      asset {\n        ...Erc20Fields\n      }\n      value\n    }\n    recipient\n    referralFee\n    endTimestamp\n  }\n  ... on RevertCollectModuleSettings {\n    type\n  }\n  ... on TimedFeeCollectModuleSettings {\n    type\n    amount {\n      asset {\n        ...Erc20Fields\n      }\n      value\n    }\n    recipient\n    referralFee\n    endTimestamp\n  }\n  ... on UnknownCollectModuleSettings {\n    type\n    contractAddress\n    collectModuleReturnData\n  }\n}\n\nfragment ReferenceModuleFields on ReferenceModule {\n  ... on FollowOnlyReferenceModuleSettings {\n    type\n    contractAddress\n  }\n  ... on UnknownReferenceModuleSettings {\n    type\n    contractAddress\n    referenceModuleReturnData\n  }\n  ... on DegreesOfSeparationReferenceModuleSettings {\n    type\n    contractAddress\n    commentsRestricted\n    mirrorsRestricted\n    degreesOfSeparation\n  }\n}`);\n  },\n  getPostComments: (postId) => {\n    return LensSDK.request(\n      `query CommentFeed($request: PublicationsQueryRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n\t  publications(request: $request) {\n\t    items {\n\t      ... on Comment {\n\t        ...CommentFields\n\t        __typename\n\t      }\n\t      __typename\n\t    }\n\t    pageInfo {\n\t      next\n\t      __typename\n\t    }\n\t    __typename\n\t  }\n\t}\n\n\tfragment CommentFields on Comment {\n\t  id\n\t  profile {\n\t    ...ProfileFields\n\t    __typename\n\t  }\n\t  reaction(request: $reactionRequest)\n\t  mirrors(by: $profileId)\n\t  bookmarked(by: $profileId)\n\t  notInterested(by: $profileId)\n\t  hasCollectedByMe\n\t  onChainContentURI\n\t  isGated\n\t  isDataAvailability\n\t  dataAvailabilityProofs\n\t  canComment(profileId: $profileId) {\n\t    result\n\t    __typename\n\t  }\n\t  canMirror(profileId: $profileId) {\n\t    result\n\t    __typename\n\t  }\n\t  canDecrypt(profileId: $profileId) {\n\t    result\n\t    reasons\n\t    __typename\n\t  }\n\t  collectModule {\n\t    ...CollectModuleFields\n\t    __typename\n\t  }\n\t  stats {\n\t    ...StatsFields\n\t    __typename\n\t  }\n\t  metadata {\n\t    ...MetadataFields\n\t    __typename\n\t  }\n\t  hidden\n\t  createdAt\n\t  appId\n\t  commentOn {\n\t    ... on Post {\n\t      ...PostFields\n\t      __typename\n\t    }\n\t    ... on Comment {\n\t      id\n\t      profile {\n\t        ...ProfileFields\n\t        __typename\n\t      }\n\t      reaction(request: $reactionRequest)\n\t      mirrors(by: $profileId)\n\t      bookmarked(by: $profileId)\n\t      notInterested(by: $profileId)\n\t      hasCollectedByMe\n\t      onChainContentURI\n\t      isGated\n\t      isDataAvailability\n\t      dataAvailabilityProofs\n\t      canComment(profileId: $profileId) {\n\t        result\n\t        __typename\n\t      }\n\t      canMirror(profileId: $profileId) {\n\t        result\n\t        __typename\n\t      }\n\t      canDecrypt(profileId: $profileId) {\n\t        result\n\t        reasons\n\t        __typename\n\t      }\n\t      collectModule {\n\t        ...CollectModuleFields\n\t        __typename\n\t      }\n\t      metadata {\n\t        ...MetadataFields\n\t        __typename\n\t      }\n\t      stats {\n\t        ...StatsFields\n\t        __typename\n\t      }\n\t      mainPost {\n\t        ... on Post {\n\t          ...PostFields\n\t          __typename\n\t        }\n\t        ... on Mirror {\n\t          ...MirrorFields\n\t          __typename\n\t        }\n\t        __typename\n\t      }\n\t      hidden\n\t      createdAt\n\t      __typename\n\t    }\n\t    ... on Mirror {\n\t      ...MirrorFields\n\t      __typename\n\t    }\n\t    __typename\n\t  }\n\t  __typename\n\t}\n\n\tfragment ProfileFields on Profile {\n\t  id\n\t  name\n\t  handle\n\t  bio\n\t  ownedBy\n\t  isFollowedByMe\n\t  stats {\n\t    totalFollowers\n\t    totalFollowing\n\t    totalPosts\n\t    totalComments\n\t    totalMirrors\n\t    __typename\n\t  }\n\t  attributes {\n\t    traitType\n\t    key\n\t    value\n\t    __typename\n\t  }\n\t  picture {\n\t    ... on MediaSet {\n\t      original {\n\t        url\n\t        __typename\n\t      }\n\t      __typename\n\t    }\n\t    ... on NftImage {\n\t      uri\n\t      tokenId\n\t      contractAddress\n\t      chainId\n\t      __typename\n\t    }\n\t    __typename\n\t  }\n\t  coverPicture {\n\t    ... on MediaSet {\n\t      original {\n\t        url\n\t        __typename\n\t      }\n\t      __typename\n\t    }\n\t    __typename\n\t  }\n\t  followModule {\n\t    __typename\n\t  }\n\t  __typename\n\t}\n\n\tfragment CollectModuleFields on CollectModule {\n\t  ... on FreeCollectModuleSettings {\n\t    type\n\t    contractAddress\n\t    followerOnly\n\t    __typename\n\t  }\n\t  ... on FeeCollectModuleSettings {\n\t    type\n\t    referralFee\n\t    contractAddress\n\t    followerOnly\n\t    amount {\n\t      ...ModuleFeeAmountFields\n\t      __typename\n\t    }\n\t    __typename\n\t  }\n\t  ... on LimitedFeeCollectModuleSettings {\n\t    type\n\t    collectLimit\n\t    referralFee\n\t    contractAddress\n\t    followerOnly\n\t    amount {\n\t      ...ModuleFeeAmountFields\n\t      __typename\n\t    }\n\t    __typename\n\t  }\n\t  ... on LimitedTimedFeeCollectModuleSettings {\n\t    type\n\t    collectLimit\n\t    endTimestamp\n\t    referralFee\n\t    contractAddress\n\t    followerOnly\n\t    amount {\n\t      ...ModuleFeeAmountFields\n\t      __typename\n\t    }\n\t    __typename\n\t  }\n\t  ... on TimedFeeCollectModuleSettings {\n\t    type\n\t    endTimestamp\n\t    referralFee\n\t    contractAddress\n\t    followerOnly\n\t    amount {\n\t      ...ModuleFeeAmountFields\n\t      __typename\n\t    }\n\t    __typename\n\t  }\n\t  ... on MultirecipientFeeCollectModuleSettings {\n\t    type\n\t    optionalCollectLimit: collectLimit\n\t    optionalEndTimestamp: endTimestamp\n\t    referralFee\n\t    followerOnly\n\t    contractAddress\n\t    amount {\n\t      ...ModuleFeeAmountFields\n\t      __typename\n\t    }\n\t    recipients {\n\t      recipient\n\t      split\n\t      __typename\n\t    }\n\t    __typename\n\t  }\n\t  ... on SimpleCollectModuleSettings {\n\t    type\n\t    optionalCollectLimit: collectLimit\n\t    optionalEndTimestamp: endTimestamp\n\t    contractAddress\n\t    followerOnly\n\t    fee {\n\t      amount {\n\t        ...ModuleFeeAmountFields\n\t        __typename\n\t      }\n\t      recipient\n\t      referralFee\n\t      __typename\n\t    }\n\t    __typename\n\t  }\n\t  __typename\n\t}\n\n\tfragment ModuleFeeAmountFields on ModuleFeeAmount {\n\t  asset {\n\t    symbol\n\t    decimals\n\t    address\n\t    __typename\n\t  }\n\t  value\n\t  __typename\n\t}\n\n\tfragment StatsFields on PublicationStats {\n\t  totalUpvotes\n\t  totalAmountOfMirrors\n\t  totalAmountOfCollects\n\t  totalBookmarks\n\t  totalAmountOfComments\n\t  commentsTotal(customFilters: GARDENERS)\n\t  __typename\n\t}\n\n\tfragment MetadataFields on MetadataOutput {\n\t  name\n\t  content\n\t  image\n\t  tags\n\t  attributes {\n\t    traitType\n\t    value\n\t    __typename\n\t  }\n\t  cover {\n\t    original {\n\t      url\n\t      __typename\n\t    }\n\t    __typename\n\t  }\n\t  media {\n\t    original {\n\t      url\n\t      mimeType\n\t      __typename\n\t    }\n\t    __typename\n\t  }\n\t  encryptionParams {\n\t    accessCondition {\n\t      or {\n\t        criteria {\n\t          ...SimpleConditionFields\n\t          and {\n\t            criteria {\n\t              ...SimpleConditionFields\n\t              __typename\n\t            }\n\t            __typename\n\t          }\n\t          or {\n\t            criteria {\n\t              ...SimpleConditionFields\n\t              __typename\n\t            }\n\t            __typename\n\t          }\n\t          __typename\n\t        }\n\t        __typename\n\t      }\n\t      __typename\n\t    }\n\t    __typename\n\t  }\n\t  __typename\n\t}\n\n\tfragment SimpleConditionFields on AccessConditionOutput {\n\t  nft {\n\t    contractAddress\n\t    chainID\n\t    contractType\n\t    tokenIds\n\t    __typename\n\t  }\n\t  eoa {\n\t    address\n\t    __typename\n\t  }\n\t  token {\n\t    contractAddress\n\t    amount\n\t    chainID\n\t    condition\n\t    decimals\n\t    __typename\n\t  }\n\t  follow {\n\t    profileId\n\t    __typename\n\t  }\n\t  collect {\n\t    publicationId\n\t    thisPublication\n\t    __typename\n\t  }\n\t  __typename\n\t}\n\n\tfragment PostFields on Post {\n\t  id\n\t  profile {\n\t    ...ProfileFields\n\t    __typename\n\t  }\n\t  reaction(request: $reactionRequest)\n\t  mirrors(by: $profileId)\n\t  bookmarked(by: $profileId)\n\t  notInterested(by: $profileId)\n\t  hasCollectedByMe\n\t  onChainContentURI\n\t  isGated\n\t  isDataAvailability\n\t  dataAvailabilityProofs\n\t  canComment(profileId: $profileId) {\n\t    result\n\t    __typename\n\t  }\n\t  canMirror(profileId: $profileId) {\n\t    result\n\t    __typename\n\t  }\n\t  canDecrypt(profileId: $profileId) {\n\t    result\n\t    reasons\n\t    __typename\n\t  }\n\t  collectModule {\n\t    ...CollectModuleFields\n\t    __typename\n\t  }\n\t  stats {\n\t    ...StatsFields\n\t    __typename\n\t  }\n\t  metadata {\n\t    ...MetadataFields\n\t    __typename\n\t  }\n\t  hidden\n\t  createdAt\n\t  appId\n\t  __typename\n\t}\n\n\tfragment MirrorFields on Mirror {\n\t  id\n\t  profile {\n\t    ...ProfileFields\n\t    __typename\n\t  }\n\t  reaction(request: $reactionRequest)\n\t  hasCollectedByMe\n\t  isGated\n\t  isDataAvailability\n\t  dataAvailabilityProofs\n\t  canComment(profileId: $profileId) {\n\t    result\n\t    __typename\n\t  }\n\t  canMirror(profileId: $profileId) {\n\t    result\n\t    __typename\n\t  }\n\t  canDecrypt(profileId: $profileId) {\n\t    result\n\t    reasons\n\t    __typename\n\t  }\n\t  collectModule {\n\t    ...CollectModuleFields\n\t    __typename\n\t  }\n\t  stats {\n\t    ...StatsFields\n\t    __typename\n\t  }\n\t  metadata {\n\t    ...MetadataFields\n\t    __typename\n\t  }\n\t  hidden\n\t  mirrorOf {\n\t    ... on Post {\n\t      ...PostFields\n\t      __typename\n\t    }\n\t    ... on Comment {\n\t      id\n\t      profile {\n\t        ...ProfileFields\n\t        __typename\n\t      }\n\t      collectNftAddress\n\t      reaction(request: $reactionRequest)\n\t      mirrors(by: $profileId)\n\t      bookmarked(by: $profileId)\n\t      notInterested(by: $profileId)\n\t      onChainContentURI\n\t      isGated\n\t      isDataAvailability\n\t      dataAvailabilityProofs\n\t      canComment(profileId: $profileId) {\n\t        result\n\t        __typename\n\t      }\n\t      canMirror(profileId: $profileId) {\n\t        result\n\t        __typename\n\t      }\n\t      canDecrypt(profileId: $profileId) {\n\t        result\n\t        reasons\n\t        __typename\n\t      }\n\t      stats {\n\t        ...StatsFields\n\t        __typename\n\t      }\n\t      createdAt\n\t      __typename\n\t    }\n\t    __typename\n\t  }\n\t  createdAt\n\t  appId\n\t  __typename\n\t}`,\n      {\n        profileId: null,\n        request: {\n          commentsOf: postId,\n          commentsOfOrdering: \"RANKING\",\n          commentsRankingFilter: \"RELEVANT\",\n        },\n        reactionRequest: null,\n        limit: 30,\n      }\n    );\n  },\n};\n\nif (!!onLoad && !loaded) {\n  onLoad(LensSDK);\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattb.near/widget/LensSDK", "fact_widget_deployments_id": "67706e3be406c2eb0822288734c32419", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}