{"tx_hash": "5qc2Yu8NJmEbdM9duszfh7fX1cmVFrhWYCVscqLuWsWg", "action_id_social": "7sjjdVHaCwFR1WfBHzHzGhJjWi9eGwME7dY2qpdkmRX8-0-widget", "block_id": 104114245, "block_timestamp": "2023-10-24T16:18:01.882Z", "signer_id": "silkking.near", "widget_name": "lib.emojis", "source_code": "const {\r\n  isTest,\r\n  stateUpdate,\r\n  functionsToCallByLibrary,\r\n  callLibs,\r\n  baseAction,\r\n  widgets,\r\n} = props;\r\n\r\nconst libName = \"emojis\"; // EDIT: set lib name\r\nconst functionsToCall = functionsToCallByLibrary[libName];\r\n\r\nlet resultFunctionsToCallByLibrary = Object.assign(\r\n  {},\r\n  functionsToCallByLibrary\r\n);\r\nlet resultFunctionsToCall = [];\r\n\r\n// const currentVersion = \"\"; // EDIT: Set version\r\n\r\n// const prodAction = `${baseAction}_v${currentVersion}`;\r\nconst prodAction = `${baseAction}`; //NOTE: consider use versions\r\nconst testAction = `test_${prodAction}`;\r\nconst action = isTest ? testAction : prodAction;\r\n\r\n// START LIB CALLS SECTION\r\n// interface FunctionCall {\r\n//     functionName: string,\r\n//     key: string, // The state of the caller will be updated with this string as a key\r\n//     props: Record<string, any> // function parameters as object\r\n// }\r\n\r\n// type LibsCalls = Record<string, FunctionCall> // Key is lib name after lib.\r\n\r\nconst libSrcArray = [widgets.libSBT]; // string to lib widget // EDIT: set libs to call\r\n\r\nconst libsCalls = {};\r\nlibSrcArray.forEach((libSrc) => {\r\n  const libName = libSrc.split(\"lib.\")[1];\r\n  libsCalls[libName] = [];\r\n});\r\n\r\nState.init({\r\n  libsCalls, // is a LibsCalls object\r\n});\r\n// END LIB CALLS SECTION\r\n\r\nfunction log(message) {\r\n  console.log(`lib.${libName}`, message);\r\n}\r\n\r\nfunction logError(message) {\r\n  console.error(`lib.${libName}`, message);\r\n}\r\n\r\nfunction libStateUpdate(obj) {\r\n  State.update(obj);\r\n}\r\n\r\n// START LIB FUNCTIONS: EDIT set functions you need\r\nfunction canUserReact(props) {\r\n  const { env, accountId, sbtsNames } = props;\r\n\r\n  setAreValidUsers([accountId], sbtsNames);\r\n  const result = state[`isValidUser-${accountId}`];\r\n\r\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n    const discardCondition =\r\n      call.functionName === \"canUserReact\" && result !== undefined;\r\n    return !discardCondition;\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nfunction setAreValidUsers(accountIds, sbtsNames) {\r\n  const newLibsCalls = Object.assign({}, state.libsCalls);\r\n  if (!newLibsCalls.SBT) {\r\n    logError(\"Key SBT is not set in lib.\", libName);\r\n  }\r\n\r\n  accountIds.forEach((accountId) => {\r\n    const isCallPushed =\r\n      newLibsCalls.SBT.find((libCall) => {\r\n        return (\r\n          libCall.functionName === \"isValidUser\" &&\r\n          libCall.props.accountId === accountId\r\n        );\r\n      }) !== undefined;\r\n    const isCallReturned = state[`isValidUser-${accountId}`] !== undefined;\r\n\r\n    if (isCallPushed || isCallReturned) {\r\n      return;\r\n    }\r\n\r\n    newLibsCalls.SBT.push({\r\n      functionName: \"isValidUser\",\r\n      key: `isValidUser-${accountId}`,\r\n      props: {\r\n        accountId,\r\n        sbtsNames,\r\n      },\r\n    });\r\n  });\r\n  State.update({ libsCalls: newLibsCalls });\r\n}\r\n\r\nfunction createEmoji(props) {\r\n  const { reaction, elementReactedId, onCommit, onCancel } = props;\r\n\r\n  saveHandler(reaction, elementReactedId, onCommit, onCancel);\r\n\r\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n    return call.functionName !== \"createEmoji\";\r\n  });\r\n\r\n  return reaction;\r\n}\r\n\r\nconst saveHandler = (reaction, elementReactedId, onCommit, onCancel) => {\r\n  if (reaction) {\r\n    const newData = composeReactionData(reaction, elementReactedId);\r\n\r\n    Social.set(newData, {\r\n      force: true,\r\n      onCommit,\r\n      onCancel,\r\n    });\r\n  } else {\r\n    logError(\"Reaction is missing\");\r\n  }\r\n};\r\n\r\nfunction composeReactionData(reaction, elementReactedId) {\r\n  const data = {\r\n    index: {\r\n      [action]: JSON.stringify({\r\n        key: elementReactedId,\r\n        value: {\r\n          reactionId: `r-${context.accountId}-${Date.now()}`,\r\n          reaction,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n\r\n  return data;\r\n}\r\n\r\nfunction getReactionBlackListByBlockHeight() {\r\n  return [];\r\n}\r\n\r\nfunction getReactions(action, elementReactedId) {\r\n  return Social.index(action, elementReactedId, {\r\n    order: \"desc\",\r\n    subscribe: true,\r\n  });\r\n}\r\n\r\nfunction getEmojisNormalized(env, elementReactedId) {\r\n  const emojisByVersion = Object.keys(versions).map((version) => {\r\n    const action = versions[version].action;\r\n\r\n    const allReactions = getReactions(action, elementReactedId);\r\n    if (!allReactions) return [];\r\n    const validReactions = filterInvalidReactions(env, allReactions);\r\n\r\n    return getLatestEdits(validReactions);\r\n  });\r\n\r\n  return normalizeLibData(emojisByVersion);\r\n}\r\n\r\nfunction getLatestEdits(reactions) {\r\n  return reactions.filter((obj) => {\r\n    const userLatestInteraction = reactions.find(\r\n      (vote) => vote.accountId === obj.accountId\r\n    );\r\n    return JSON.stringify(userLatestInteraction) === JSON.stringify(obj);\r\n  });\r\n}\r\n\r\nfunction filterInvalidReactions(env, reactions) {\r\n  return reactions\r\n    .filter((reaction) => reaction.value.reactionId) // Has id\r\n    .filter(\r\n      (reaction) =>\r\n        !getReactionBlackListByBlockHeight().includes(reaction.blockHeight) // Blockheight is not in blacklist\r\n    );\r\n}\r\n\r\nfunction getEmojis(props) {\r\n  const { env, sbtsNames, elementReactedId } = props;\r\n  // Call other libs\r\n  const normReations = getEmojisNormalized(env, elementReactedId);\r\n\r\n  // Keep last edit from every reaction\r\n  const lastReactions = normReations.filter((reaction) => {\r\n    return normReations.find(\r\n      (compReaction) =>\r\n        JSON.stringify(compReaction) === JSON.stringify(reaction)\r\n    );\r\n  });\r\n\r\n  const lastReactionsAuthors = lastReactions.map((reaction) => {\r\n    return reaction.accountId;\r\n  });\r\n\r\n  setAreValidUsers(lastReactionsAuthors, sbtsNames);\r\n\r\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n    const discardCondition =\r\n      call.functionName === \"getEmojis\" &&\r\n      state[`isValidUser-${call.props.accountId}`] !== undefined;\r\n    return !discardCondition;\r\n  });\r\n\r\n  const finalReactions = filterValidEmojis(lastReactions);\r\n  const finalEmojisMapped = {};\r\n  sbtsNames.forEach((sbtName) => {\r\n    const sbtEmojis = finalReactions.filter((reaction) => {\r\n      if (!reaction.sbts) return false;\r\n      return reaction.sbts.indexOf(sbtName) !== -1;\r\n    });\r\n    finalEmojisMapped[sbtName] = sbtEmojis;\r\n  });\r\n\r\n  return finalEmojisMapped;\r\n}\r\n\r\nfunction filterValidator(emojis) {\r\n  return emojis.filter((emoji) => {\r\n    return (\r\n      emoji.sbts.find((emojiSBT) => {\r\n        return (\r\n          state[`isValidUser-${emoji.accountId}`][emojiSBT] ||\r\n          emojiSBT === \"public\"\r\n        );\r\n      }) !== undefined\r\n    );\r\n  });\r\n}\r\n\r\nfunction filterValidEmojis(emojis) {\r\n  let filteredEmojis = filterValidator(filteredEmojis ?? emojis);\r\n\r\n  return filteredEmojis;\r\n}\r\n\r\nfunction normalizeOld(reaction) {\r\n  reaction.sbts = [\"public\"];\r\n\r\n  return reaction;\r\n}\r\n\r\n// END LIB FUNCTIONS\r\n\r\n// EDIT: set functions you want to export\r\nfunction callFunction(call) {\r\n  if (call.functionName === \"canUserReact\") {\r\n    return canUserReact(call.props);\r\n  } else if (call.functionName === \"createEmoji\") {\r\n    return createEmoji(call.props);\r\n  } else if (call.functionName === \"getEmojis\") {\r\n    return getEmojis(call.props);\r\n  }\r\n}\r\n\r\n// EDIT: set versions you want to handle, considering their action to Social.index and the way to transform to one version to another (normalization)\r\nconst versions = {\r\n  old: {\r\n    normalizationFunction: normalizeOld,\r\n    action: props.isTest ? `test_${baseAction}` : baseAction,\r\n  },\r\n};\r\n\r\nfunction normalizeLibData(libDataByVersion) {\r\n  let libData;\r\n\r\n  Object.keys(versions).forEach((version, index, array) => {\r\n    const normFn = versions[version].normalizationFunction;\r\n    const normLibData = libDataByVersion[index].map((libData, i) => {\r\n      return normFn(libData);\r\n    });\r\n\r\n    if (index + 1 === array.length) {\r\n      // Last index\r\n      libData = normLibData;\r\n      return;\r\n    }\r\n    libDataByVersion[index + 1] =\r\n      libDataByVersion[index + 1].concat(normLibData);\r\n  });\r\n\r\n  return libData;\r\n}\r\n\r\nif (functionsToCall && functionsToCall.length > 0) {\r\n  const updateObj = Object.assign({}, functionsToCallByLibrary);\r\n  resultFunctionsToCall = [...functionsToCall];\r\n  functionsToCall.forEach((call) => {\r\n    updateObj[call.key] = callFunction(call);\r\n  });\r\n\r\n  resultFunctionsToCallByLibrary[libName] = resultFunctionsToCall;\r\n  updateObj.functionsToCallByLibrary = resultFunctionsToCallByLibrary;\r\n  stateUpdate(updateObj);\r\n}\r\n\r\n// function callLibs(\r\n//   src,\r\n//   stateUpdate,\r\n//   functionsToCallByLibrary,\r\n//   extraProps,\r\n//   callerWidget\r\n// ) {\r\n//   // if (callerWidget === \"lib.emojis\") {\r\n//   // console.log(\r\n//   //   -1,\r\n//   //   `Call libs props ${callerWidget}: `,\r\n//   //   src,\r\n//   //   functionsToCallByLibrary,\r\n//   //   callLibs\r\n//   // );\r\n//   // }\r\n\r\n//   return (\r\n//     <Widget\r\n//       src={src}\r\n//       props={{\r\n//         isTest,\r\n//         stateUpdate,\r\n//         functionsToCallByLibrary,\r\n//         callLibs,\r\n//         widgets,\r\n//         ...extraProps,\r\n//       }}\r\n//     />\r\n//   );\r\n// }\r\n\r\n// const a = getEmojis({\r\n//   env: undefined,\r\n//   sbtsNames: [\r\n//     \"fractal.i-am-human.near - class 1\",\r\n//     \"community.i-am-human.near - class 1\",\r\n//     \"community.i-am-human.near - class 2\",\r\n//     \"community.i-am-human.near - class 3\",\r\n//     \"public\",\r\n//   ],\r\n//   elementReactedId: \"silkking.near-1696976701328\",\r\n// });\r\n\r\n// console.log(a);\r\n\r\nreturn (\r\n  <>\r\n    {libSrcArray.map((src) => {\r\n      return callLibs(\r\n        src,\r\n        libStateUpdate,\r\n        state.libsCalls,\r\n        {},\r\n        `lib.${libName}`\r\n      );\r\n    })}\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/lib.emojis", "fact_widget_deployments_id": "2e444c7fb53690f28b151b6221459054", "inserted_timestamp": "2023-10-24T18:22:52.283Z", "modified_timestamp": "2023-10-24T18:22:52.283Z", "__row_index": 4}