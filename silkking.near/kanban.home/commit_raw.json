{"tx_hash": "63iRpj2fdsmkWzJg99bzwoTYoFxV5UkM2YsGuu3aEGoZ", "action_id_social": "HdjRZm7VJjhkq2bP8KrmL2QmkvJZiXqf9UYFnN71FjPH-0-widget", "block_id": 117455115, "block_timestamp": "2024-04-23T14:19:06.090Z", "signer_id": "silkking.near", "widget_name": "kanban.home", "source_code": "const { renderColumn } = VM.require(\"silkking.near/widget/column\");\nconst { ColumnStyle } = VM.require(\"silkking.near/widget/homeStyles\");\n\nconst { columns } = props;\n\n/* ************************ */\n/*        Variables         */\n/* ************************ */\n// Columnas a generar\n/*  Estructura\n\n     {\n        title : string\n        allowCardCreation : bool\n        cards : [\n            title: string,\n            content : string\n            action {\n                text: string (button text)\n                callBack: callbackmethod / javascript\n            }\n        ]\n    }\n\n    */\n\n/* ************************ */\n/* Funciones del componente */\n/* ************************ */\n\n// Dragging ------------------\nvar objectOverOn;\n\nfunction onDragStart(e) {\n  console.log(e);\n}\n\nfunction onDragOver(e) {\n  objectOverOn = e.target;\n  e.preventDefault();\n}\n\nfunction onDragEnd(e) {\n  var o = objectOverOn;\n  if (o != undefined) {\n    const colDestino = o.dataset.column;\n    const colOrigen = e.target.dataset.column;\n    const cardIndex = e.target.dataset.card;\n    if (!isNaN(colDestino)) {\n      if (colOrigen != colDestino) {\n        var cc = currentColumns;\n        const movedCard = cc[colOrigen].cards.splice(cardIndex, 1);\n        cc[colDestino].cards.push(movedCard[0]);\n        setColumns(cc);\n      } else console.log(\"Dropped on same column\", o);\n    } else console.log(\"No droppable destination\", o);\n  } else console.log(\"No destination\", o);\n  objectOverOn = null;\n}\n\n// New Card ------------------\nfunction newCardCallBack(e, data) {\n  const o = e.target;\n  const colDestino = o.dataset.column;\n  var cc = currentColumns;\n  switch (o.dataset.action) {\n    case \"new\":\n      setNewCardTitle(null);\n      setNewCardContent(null);\n      for (var n = 0; n < cc.length; n++) {\n        cc[n].newCard = false;\n      }\n      cc[colDestino].newCard = true;\n      break;\n    case \"title\":\n      setNewCardTitle(data);\n      break;\n    case \"content\":\n      setNewCardContent(data);\n      break;\n    case \"ok\":\n      const newCard = { title: newCardTitle, content: newCardContent };\n      cc[colDestino].cards.push(newCard);\n      cc[colDestino].newCard = false;\n      break;\n    case \"cancel\":\n      cc[colDestino].newCard = false;\n      break;\n  }\n  setColumns(cc);\n}\n\n// State ------------------\nconst [currentColumns, setColumns] = useState(columns);\nconst [newCardTitle, setNewCardTitle] = useState(\"\");\nconst [newCardContent, setNewCardContent] = useState(\"\");\n\n// Rendering ------------------\nvar c = columns.length;\nconst w = \"calc(\" + (100 / c).toFixed(2).toString() + \"% - 20px)\";\n\nreturn (\n  <div id=\"divMaster\">\n    {currentColumns.map((col, index) => {\n      return (\n        <ColumnStyle onDragOver={onDragOver} style={{ width: w }} key={index}>\n          {renderColumn(\n            index,\n            col,\n            onDragStart,\n            onDragOver,\n            onDragEnd,\n            newCardCallBack\n          )}\n        </ColumnStyle>\n      );\n    })}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/kanban.home", "fact_widget_deployments_id": "7ee3a2e12c750c0611f6d51b93001327", "inserted_timestamp": "2024-04-23T17:54:15.847Z", "modified_timestamp": "2024-04-23T17:54:15.847Z", "__row_index": 0}