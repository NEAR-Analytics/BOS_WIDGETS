{"tx_hash": "8ephe2DBfvSm1pnEzCW5ABdFWTHBB3hG9rCQ9p7QLigv", "action_id_social": "AMHn2KDzPSFKArpQYts8J3sEHe6k6k8W1sBZEauQ9KB7-0-widget", "block_id": 104195063, "block_timestamp": "2023-10-25T19:01:11.757Z", "signer_id": "silkking.near", "widget_name": "lib.comment", "source_code": "const {\r\n  isTest,\r\n  stateUpdate,\r\n  functionsToCallByLibrary,\r\n  callLibs,\r\n  baseAction,\r\n  widgets,\r\n} = props;\r\nconst libName = \"comment\"; // EDIT: set lib name\r\nconst functionsToCall = functionsToCallByLibrary[libName];\r\n\r\nlet resultFunctionsToCallByLibrary = Object.assign(\r\n  {},\r\n  functionsToCallByLibrary\r\n);\r\nlet resultFunctionsToCall = [];\r\n\r\nconst currentVersion = \"0.0.2\"; // EDIT: Set version\r\n\r\nconst prodAction = `${baseAction}_v${currentVersion}`; // TODO consider versions\r\n// const prodAction = `${baseAction}`;\r\nconst testAction = `test_${prodAction}`;\r\nconst action = isTest ? testAction : prodAction;\r\n\r\n// START LIB CALLS SECTION\r\n// interface FunctionCall {\r\n//     functionName: string,\r\n//     key: string, // The state of the caller will be updated with this string as a key\r\n//     props: Record<string, any> // function parameters as object\r\n// }\r\n\r\n// type LibsCalls = Record<string, FunctionCall> // Key is lib name after lib.\r\n\r\nconst libSrcArray = [widgets.libSBT]; // string to lib widget // EDIT: set libs to call\r\n\r\nconst libsCalls = {};\r\nlibSrcArray.forEach((libSrc) => {\r\n  const libName = libSrc.split(\"lib.\")[1];\r\n  libsCalls[libName] = [];\r\n});\r\n\r\nState.init({\r\n  libsCalls, // is a LibsCalls object\r\n});\r\n// END LIB CALLS SECTION\r\n\r\nfunction log(message) {\r\n  console.log(`lib.${libName}`, message);\r\n}\r\n\r\nfunction logError(message) {\r\n  console.error(`lib.${libName}`, message);\r\n}\r\n\r\nfunction libStateUpdate(obj) {\r\n  State.update(obj);\r\n}\r\n\r\n// START LIB FUNCTIONS: EDIT set functions you need\r\n\r\nfunction canUserCreateComment(props) {\r\n  const { accountId, sbtsNames } = props;\r\n\r\n  setAreValidUsers([accountId], sbtsNames);\r\n\r\n  const result =\r\n    state[`isValidUser-${accountId}`] || sbtsNames.includes(\"public\");\r\n\r\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n    const discardCondition =\r\n      call.functionName === \"canUserCreateComment\" && result !== undefined;\r\n    return !discardCondition;\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nfunction setAreValidUsers(accountIds, sbtsNames) {\r\n  const newLibCalls = Object.assign({}, state.libsCalls);\r\n\r\n  if (newLibsCalls && !newLibsCalls.SBT) {\r\n    logError(\"Key SBT is not set in lib.\", libName);\r\n  }\r\n\r\n  accountIds.forEach((accountId) => {\r\n    const isCallPushed =\r\n      newLibCalls.SBT.find((libCall) => {\r\n        return (\r\n          libCall.functionName === \"isValidUser\" &&\r\n          libCall.props.accountId === accountId\r\n        );\r\n      }) !== undefined;\r\n    const isCallReturned = state[`isValidUser-${accountId}`] !== undefined;\r\n\r\n    if (isCallPushed || isCallReturned) {\r\n      return;\r\n    }\r\n\r\n    newLibCalls.SBT.push({\r\n      functionName: \"isValidUser\",\r\n      key: `isValidUser-${accountId}`,\r\n      props: {\r\n        accountId,\r\n        sbtsNames,\r\n      },\r\n    });\r\n  });\r\n  State.update({ libCalls: newLibCalls });\r\n}\r\n\r\nfunction createComment(props) {\r\n  console.log(2, props);\r\n  const { comment, onClick, onCommit, onCancel } = props;\r\n\r\n  onClick();\r\n\r\n  saveComment(comment, onCommit, onCancel);\r\n\r\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n    return call.functionName !== \"createComment\";\r\n  });\r\n\r\n  return comment;\r\n}\r\n\r\nfunction composeCommentData(comment) {\r\n  const data = {\r\n    index: {\r\n      [action]: JSON.stringify({\r\n        key: comment.id,\r\n        value: {\r\n          type: \"md\",\r\n          comment,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n\r\n  return data;\r\n}\r\n\r\nfunction saveComment(comment, onCommit, onCancel) {\r\n  if (comment.text) {\r\n    const newData = composeCommentData(comment);\r\n    Social.set(newData, {\r\n      force: true,\r\n      onCommit,\r\n      onCancel,\r\n    });\r\n  }\r\n}\r\n\r\nfunction getComments(action, id) {\r\n  return Social.index(action, id, {\r\n    order: \"desc\",\r\n    subscribe: true,\r\n  });\r\n}\r\n\r\nfunction getCommentBlackListByBlockHeight() {\r\n  return [98588599];\r\n}\r\n\r\nfunction filterInvalidComments(commentIndexes) {\r\n  return commentIndexes.filter(\r\n    (commentIndexes) =>\r\n      commentIndexes.blockHeight &&\r\n      !getCommentBlackListByBlockHeight().includes(commentIndexes.blockHeight) // Comment is not in blacklist\r\n  );\r\n}\r\n\r\nfunction getValidComments(props) {\r\n  const { env, articleSbts, id } = props;\r\n  // Call other libs\r\n  const normComments = getCommentsNormalized(env, id);\r\n\r\n  // const blacklistFilteredComments = commentIndexes\r\n  //   ? filterInvalidCommentsIndexes(commentIndexes)\r\n  //   : [];\r\n\r\n  const commentsAuthors = normComments.map((comment) => {\r\n    return comment.accountId;\r\n  });\r\n\r\n  setAreValidUsers(commentsAuthors, articleSbts);\r\n\r\n  // const validAuthors = commentsAuthors.filter((author) => {\r\n  //   return state[`isValidUser-${author}`][articleSbt];\r\n  // });\r\n\r\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n    const discardCondition =\r\n      call.functionName === \"getValidComments\" &&\r\n      state[`isValidUser-${call.props.accountId}`] !== undefined;\r\n    return !discardCondition;\r\n  });\r\n\r\n  const finalComments = filterValidComments(normComments);\r\n\r\n  // if (articleSbts.length > 0) {\r\n  // We assume there will only be just one articleSbt\r\n  // const articleSbt = articleSbts[0];\r\n\r\n  // const blacklistFilteredCommentsAuthors = blacklistFilteredComments.map(\r\n  //   (comment) => {\r\n  //     return comment.accountId;\r\n  //   }\r\n  // );\r\n\r\n  // setAreValidUsers(blacklistFilteredCommentsAuthors, articleSbts);\r\n\r\n  // const validAuthors = blacklistFilteredCommentsAuthors.filter((author) => {\r\n  //   return state[`isValidUser-${author}`][articleSbt];\r\n  // });\r\n\r\n  // resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n  //   const discardCondition =\r\n  //     call.functionName === \"getValidComments\" &&\r\n  //     state[`isValidUser-${call.props.accountId}`] !== undefined;\r\n  //   return !discardCondition;\r\n  // });\r\n  // finalComments = blacklistFilteredComments.filter((comment) => {\r\n  //   return validAuthors.includes(comment.accountId);\r\n  // });\r\n  // }\r\n  return finalComments;\r\n}\r\n\r\nfunction filterValidator(comments) {\r\n  return comments.filter((comment) => {\r\n    return (\r\n      comment.sbts.find((commentSbt) => {\r\n        return (\r\n          state[`isValidUser-${comment.accountId}`][commentSbt] ||\r\n          commentSbt === \"public\"\r\n        );\r\n      }) !== undefined\r\n    );\r\n  });\r\n}\r\n\r\nfunction filterValidComments(comments) {\r\n  let filteredComments = filterValidator(filteredComments ?? comments);\r\n\r\n  return filteredComments;\r\n}\r\n\r\nfunction getCommentsNormalized(env, id) {\r\n  const commentsByVersion = Object.keys(versions).map((version) => {\r\n    const action = versions[version].action;\r\n\r\n    const comments = getComments(action, id);\r\n    if (!comments) return [];\r\n    const validComments = filterInvalidComments(comments);\r\n\r\n    return validComments;\r\n  });\r\n\r\n  return normalizeLibData(commentsByVersion);\r\n}\r\n\r\nfunction normalizeOldToV_0_0_1(comment) {\r\n  comment.sbts = [\"public\"];\r\n\r\n  return comment;\r\n}\r\n\r\nfunction normalizeFromV0_0_1ToV0_0_2(comment) {\r\n  if (comment.sbts[0] !== \"public\") {\r\n    comment.sbts[0] = comment.sbts[0] + \" - class 1\";\r\n  } // There is only one comment that is not public and only has class 1\r\n\r\n  return comment;\r\n}\r\n\r\nfunction normalizeFromV0_0_2ToV0_0_3(comment) {\r\n  return comment;\r\n}\r\n// END LIB FUNCTIONS\r\n\r\n// EDIT: set functions you want to export\r\nfunction callFunction(call) {\r\n  if (call.functionName === \"createComment\") {\r\n    return createComment(call.props);\r\n  } else if (call.functionName === \"getValidComments\") {\r\n    return getValidComments(call.props);\r\n  } else if (call.functionName === \"canUserCreateComment\") {\r\n    return canUserCreateComment(call.props);\r\n  }\r\n}\r\n\r\n// EDIT: set versions you want to handle, considering their action to Social.index and the way to transform to one version to another (normalization)\r\nconst versions = {\r\n  old: {\r\n    normalizationFunction: normalizeOldToV_0_0_1,\r\n    action: baseAction,\r\n  },\r\n  \"v1.0.1\": {\r\n    normalizationFunction: normalizeFromV0_0_1ToV0_0_2,\r\n    action: `${baseAction}-v1.0.1`,\r\n  },\r\n  \"v0.0.2\": {\r\n    normalizationFunction: normalizeFromV0_0_2ToV0_0_3,\r\n    action: `${baseAction}-v0.0.2`,\r\n  },\r\n};\r\n\r\nfunction normalizeLibData(libDataByVersion) {\r\n  let libData;\r\n\r\n  Object.keys(versions).forEach((version, index, array) => {\r\n    const normFn = versions[version].normalizationFunction;\r\n    const normLibData = libDataByVersion[index].map((libData, i) => {\r\n      return normFn(libData);\r\n    });\r\n\r\n    if (index + 1 === array.length) {\r\n      // Last index\r\n      libData = normLibData;\r\n      return;\r\n    }\r\n    libDataByVersion[index + 1] =\r\n      libDataByVersion[index + 1].concat(normLibData);\r\n  });\r\n\r\n  return libData;\r\n}\r\n\r\nif (functionsToCall && functionsToCall.length > 0) {\r\n  const updateObj = Object.assign({}, functionsToCallByLibrary);\r\n  console.log(11, updateObj);\r\n  resultFunctionsToCall = [...functionsToCall];\r\n  console.log(9, resultFunctionsToCall);\r\n  functionsToCall.forEach((call) => {\r\n    updateObj[call.key] = callFunction(call);\r\n  });\r\n\r\n  resultFunctionsToCallByLibrary[libName] = resultFunctionsToCall;\r\n  // updateObj.functionsToCallByLibrary = resultFunctionsToCallByLibrary;\r\n  updateObj.libsCalls = resultFunctionsToCallByLibrary;\r\n  console.log(10, updateObj);\r\n  stateUpdate(updateObj);\r\n}\r\n\r\nreturn (\r\n  <>\r\n    {libSrcArray.map((src) => {\r\n      return callLibs(\r\n        src,\r\n        libStateUpdate,\r\n        state.libsCalls,\r\n        {},\r\n        `lib.${libName}`\r\n      );\r\n    })}\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/lib.comment", "fact_widget_deployments_id": "1e81dad5b68ce3d9a226d3d0a971c82a", "inserted_timestamp": "2023-10-25T20:50:02.235Z", "modified_timestamp": "2023-10-25T20:50:02.235Z", "__row_index": 3}