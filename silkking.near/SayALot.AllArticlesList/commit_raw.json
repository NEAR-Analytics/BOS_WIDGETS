{"tx_hash": "B7kpfxdMUBnN1d9PsMqfZyKNAfasZJsPCsTpavjSszBv", "action_id_social": "DQkBiGK5FBxdSr47vhP8Jv7dJdVZKrLKVzkeven9sKmA-0-widget", "block_id": 104119496, "block_timestamp": "2023-10-24T18:00:23.069Z", "signer_id": "silkking.near", "widget_name": "SayALot.AllArticlesList", "source_code": "//===============================================INITIALIZATION=====================================================\r\n\r\nlet {\r\n  isTest,\r\n  stateUpdate,\r\n  articlesToRender,\r\n  tabs,\r\n  widgets,\r\n  addressForArticles,\r\n  handleFilterArticles,\r\n  handleOpenArticle,\r\n  authorForWidget,\r\n  initialCreateState,\r\n  editArticleData,\r\n  handleEditArticle,\r\n  showCreateArticle,\r\n  sbtWhiteList,\r\n  sbts,\r\n  handleShareButton,\r\n  canLoggedUserCreateArticles,\r\n  filterBy,\r\n  callLibs,\r\n} = props;\r\n\r\nconst libSrcArray = [widgets.libUpVotes];\r\n\r\nlet initLibsCalls = { upVotes: [] };\r\n\r\n//For the moment we'll allways have only 1 sbt in the array. If this change remember to do the propper work in SayALot.lib.SBT and here.\r\n\r\ninitLibsCalls.upVotes = articlesToRender.map((article) => {\r\n  return {\r\n    functionName: \"getUpVotes\",\r\n    key: `upVotes-${article.id}`,\r\n    props: {\r\n      id: article.id ?? `${article.author}-${article.timeCreate}`,\r\n      sbtsNames: article.sbts ?? [],\r\n    },\r\n  };\r\n});\r\n\r\nif (articlesToRender.length > 0) {\r\n  State.update({ libsCalls: initLibsCalls });\r\n}\r\n\r\nState.init({\r\n  start: Date.now(),\r\n  libsCalls: initLibsCalls,\r\n});\r\n// console.log(1, \"All articles list\", state);\r\n// console.log(2, \"All articles list\", initLibsCalls);\r\n\r\nlet finalArticlesWithUpVotes = articlesToRender.map((article) => {\r\n  article.upVotes = state[`upVotes-${article.id}`];\r\n\r\n  return article;\r\n});\r\n\r\nconst fiveDaysTimeLapse = 432000000;\r\n\r\nconst newestArticlesWithUpVotes = finalArticlesWithUpVotes\r\n  .filter((article) => article.timeLastEdit > Date.now() - fiveDaysTimeLapse)\r\n  .sort((a, b) => b.timeLastEdit - a.timeLastEdit);\r\n\r\nconst olderArticlesWithUpVotes = finalArticlesWithUpVotes\r\n  .filter((article) => article.timeLastEdit < Date.now() - fiveDaysTimeLapse)\r\n  .sort((a, b) => b.upVotes.length - a.upVotes.length);\r\n\r\nconst sortedFinalArticlesWithUpVotes = [\r\n  ...newestArticlesWithUpVotes,\r\n  ...olderArticlesWithUpVotes,\r\n];\r\n\r\n//=============================================END INITIALIZATION===================================================\r\n\r\n//===================================================CONSTS=========================================================\r\n\r\nconst ArticlesListContainer = styled.div`\r\n  background-color: rgb(248, 248, 249);\r\n`;\r\n\r\nconst CallLibrary = styled.div`\r\n  display: none;\r\n`;\r\n\r\nconst IconCursorPointer = styled.i`\r\n  cursor: pointer;\r\n`;\r\n\r\n//=================================================END CONSTS=======================================================\r\n\r\n//==================================================FUNCTIONS=======================================================\r\n\r\nfunction getDateLastEdit(timestamp) {\r\n  const date = new Date(Number(timestamp));\r\n  const dateString = {\r\n    date: date.toLocaleDateString(),\r\n    time: date.toLocaleTimeString(),\r\n  };\r\n  return dateString;\r\n}\r\n\r\nfunction allArticlesListStateUpdate(obj) {\r\n  State.update(obj);\r\n}\r\n\r\n//================================================END FUNCTIONS=====================================================\r\nreturn (\r\n  <>\r\n    {\r\n      // true ? (\r\n      showCreateArticle ? (\r\n        <Widget\r\n          src={widgets.create}\r\n          props={{\r\n            isTest,\r\n            addressForArticles,\r\n            authorForWidget,\r\n            stateUpdate,\r\n            widgets,\r\n            initialCreateState,\r\n            editArticleData,\r\n            callLibs,\r\n            handleFilterArticles,\r\n            handleEditArticle,\r\n            initialBody: \"\",\r\n            canLoggedUserCreateArticles,\r\n            sbts,\r\n          }}\r\n        />\r\n      ) : (\r\n        <h6>You can't post since you don't own this SBT</h6>\r\n      )\r\n    }\r\n    <div>\r\n      {filterBy.parameterName === \"tag\" && (\r\n        <div className=\"mt-3\">\r\n          <h6>Filter by tag:</h6>\r\n          <div className=\"d-flex align-items-center \">\r\n            <Widget\r\n              src={widgets.newStyledComponents.Element.Badge}\r\n              props={{\r\n                children: filterBy.parameterValue,\r\n                variant: \"round info\",\r\n                size: \"lg\",\r\n              }}\r\n            />\r\n            <IconCursorPointer\r\n              className=\"bi bi-x\"\r\n              onClick={() => handleFilterArticles({ filterBy: \"\", value: \"\" })}\r\n            ></IconCursorPointer>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <ArticlesListContainer className=\"row card-group py-3\">\r\n        {sortedFinalArticlesWithUpVotes.length > 0 ? (\r\n          sortedFinalArticlesWithUpVotes.map((article, i) => {\r\n            const authorProfileCall = Social.getr(`${article.author}/profile`);\r\n\r\n            if (authorProfileCall) {\r\n              article.authorProfile = authorProfileCall;\r\n            }\r\n\r\n            // If some widget posts data different than an array it will be ignored\r\n            if (!Array.isArray(article.tags)) article.tags = [];\r\n            return (\r\n              <Widget\r\n                src={widgets.generalCard}\r\n                props={{\r\n                  widgets,\r\n                  isTest,\r\n                  data: article,\r\n                  displayOverlay: true,\r\n                  renderReactions: true,\r\n                  addressForArticles,\r\n                  handleOpenArticle,\r\n                  handleFilterArticles,\r\n                  authorForWidget,\r\n                  handleShareButton,\r\n                  sbtWhiteList,\r\n                  callLibs,\r\n                }}\r\n              />\r\n            );\r\n          })\r\n        ) : (\r\n          <h5>No articles uploaded using this SBT yet</h5>\r\n        )}\r\n      </ArticlesListContainer>\r\n    </div>\r\n    <CallLibrary>\r\n      {libSrcArray.map((src) => {\r\n        return callLibs(\r\n          src,\r\n          allArticlesListStateUpdate,\r\n          state.libsCalls,\r\n          { baseAction: \"sayALotUpVote\" },\r\n          \"All articles list\"\r\n        );\r\n      })}\r\n    </CallLibrary>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/SayALot.AllArticlesList", "fact_widget_deployments_id": "34c8eae2f64dd27854b9b25634034011", "inserted_timestamp": "2023-10-24T19:49:29.310Z", "modified_timestamp": "2023-10-24T19:49:29.310Z", "__row_index": 8}