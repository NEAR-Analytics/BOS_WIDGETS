{"tx_hash": "9ynk9Nid584CtKvmj3zDZbos7y4ksx96JTV9f3xD4tvc", "action_id_social": "3L9EYGt4gPTUkieKpUsdRoA7ToJ9zNAFkm3TRzYPqKe4-0-widget", "block_id": 103758548, "block_timestamp": "2023-10-19T20:42:26.653Z", "signer_id": "silkking.near", "widget_name": "lib.article_v_old", "source_code": "// HOW TO USE\n// Create the functions that you want. Then add the functions you want to 'export' inside the `callFunction` function\n\n// INTERFACES\n// interface FunctionCall {\n//     functionName: string,\n//     key: string, // The state of the caller will be updated with this string as a key\n//     props: Record<string, any> // function parameters as object\n// }\n\n// type LibsCalls = Record<string, FunctionCall> // Key is lib name after lib.\n\nconst { isTest, stateUpdate, functionsToCallByLibrary, callLibs, action } =\n  props;\nconst functionsToCall = functionsToCallByLibrary.template; // Change this with the name of your widget\nconst libName = \"article_v_old\";\n\nlet resultFunctionsToCallByLibrary = Object.assign(\n  {},\n  functionsToCallByLibrary\n); // We make a copy of the functions we're going to call to clean it afterwards if needed, so it isn't called every time the caller gets updated.\nlet resultFunctionsToCall = []; // Util for resultFunctionsToCallByLibrary\n\nconst libSrcArray = []; // string to lib widget\n\nState.init({\n  libsCalls: {}, // is a LibsCalls object. It's used to call another library's functions\n});\n\nfunction log(message) {\n  console.log(`lib.${libName}`, message);\n}\n\nfunction logError(message) {\n  console.error(`lib.${libName}`, message);\n}\n\nfunction getNewFormatValidArticles(env) {}\n\nfunction getArticles(props) {\n  const { env } = props;\n\n  const articlesIndexes = getArticlesIndexes();\n\n  const validArticlesIndexes = filterInvalidArticlesIndexes(\n    env,\n    articlesIndexes\n  );\n\n  const validLatestEdits = getLatestEdits(validArticlesIndexes);\n\n  const articles = validLatestEdits.map(getArticle);\n  return normalizeArticles(articles);\n}\n\nfunction getArticlesIndexes() {\n  return Social.index(action, \"main\", {\n    order: \"desc\",\n    subscribe: true,\n  });\n}\n\nfunction filterInvalidArticlesIndexes(env, articlesIndexes) {\n  return articlesIndexes\n    .filter((articleIndex) => articleIndex.value.id) // Has id\n    .filter(\n      (articleIndex) =>\n        articleIndex.value.id.split(\"-\")[0] === articleIndex.accountId\n    )\n    .filter(\n      (articleIndex) =>\n        !getArticleBlackListByBlockHeight().includes(articleIndex.blockHeight) // Blockheight is not in blacklist\n    )\n    .filter(\n      (articleIndex) =>\n        !getArticleBlackListByRealArticleId().includes(articleIndex.value.id) // Article id is not in blacklist\n    );\n}\n\nfunction getArticleBlackListByBlockHeight() {\n  return [\n    91092435, 91092174, 91051228, 91092223, 91051203, 98372095, 96414482,\n    96412953, 103131250,\n  ];\n}\n\nfunction getLatestEdits(newFormatArticlesIndexes) {\n  return newFormatArticlesIndexes.filter((articleIndex) => {\n    const latestEditForThisArticle = newFormatArticlesIndexes.find(\n      (newArticleData) => newArticleData.value.id === articleIndex.value.id\n    );\n    return (\n      JSON.stringify(articleIndex) === JSON.stringify(latestEditForThisArticle)\n    );\n  });\n}\n\nfunction getArticle(articleIndex) {\n  const article = Social.get(\n    `${articleIndex.accountId}/${action}/main`,\n    articleIndex.blockHeight\n  );\n\n  let articleParsed = undefined;\n  if (article) {\n    articleParsed = JSON.parse(article);\n    articleParsed.blockHeight = articleIndex.blockHeight;\n    articleParsed.id = articleIndex.value.id;\n  }\n\n  if (articleParsed) {\n    return articleParsed;\n  }\n}\n\nfunction getArticleBlackListByRealArticleId() {\n  return [\n    \"blaze.near-1690410074090\",\n    \"blaze.near-1690409577184\",\n    \"blaze.near-1690803928696\",\n    \"blaze.near-1690803872147\",\n    \"blaze.near-1690574978421\",\n    \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb-1691703303485\",\n    \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb-1691702619510\",\n    \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb-1691702487944\",\n    \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb-1691707918243\",\n    \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb-1691707889297\",\n  ];\n}\n\nfunction normalizeOldToV_0_0_1(article) {\n  article.realArticleId = `${article.author}-${article.timeCreate}`;\n  article.sbts = [\"public\"];\n\n  return article;\n}\n\nfunction normalizeFromV0_0_1ToV0_0_2(article) {\n  article.title = article.articleId;\n  article.id = article.realArticleId;\n  if (article.sbts[0] !== \"public\") {\n    article.sbts[0] = article.sbts[0] + \" - class 1\";\n  } // There is only one article that is not public and only has class 1\n\n  delete article.articleId;\n  delete article.realArticleId;\n\n  return article;\n}\n\nfunction normalizeFromV0_0_2ToV0_0_3(article) {\n  if (!Array.isArray(article.tags) && typeof article.tags === \"object\") {\n    article.tags = Object.keys(article.tags);\n  }\n}\n\nfunction normalizeArticles(articles) {\n  articles = articles.map(normalizeOldToV_0_0_1);\n  articles = articles.map(normalizeFromV0_0_1ToV0_0_2);\n  articles = articles.map(normalizeFromV0_0_2ToV0_0_3);\n  return articles;\n}\n\nfunction callFunction(call) {\n  if (call.functionName === \"getArticles\") {\n    return getArticles(call.props);\n  }\n}\n\nif (functionsToCall && functionsToCall.length > 0) {\n  const updateObj = Object.assign({}, functionsToCallByLibrary);\n  resultFunctionsToCall = [...functionsToCall];\n  functionsToCall.forEach((call) => {\n    updateObj[call.key] = callFunction(call);\n  });\n\n  resultFunctionsToCallByLibrary.template = resultFunctionsToCall;\n  updateObj.functionsToCallByLibrary = resultFunctionsToCallByLibrary;\n  stateUpdate(updateObj);\n}\n\nreturn (\n  <>\n    {libSrcArray.map((src) => {\n      return callLibs(src, libStateUpdate, state.libsCalls, `lib.${libName}`);\n    })}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/lib.article_v_old", "fact_widget_deployments_id": "fbefc34b22aeab590fbb2397ef538ce0", "inserted_timestamp": "2023-10-19T22:37:59.206Z", "modified_timestamp": "2023-10-19T22:37:59.206Z", "__row_index": 0}