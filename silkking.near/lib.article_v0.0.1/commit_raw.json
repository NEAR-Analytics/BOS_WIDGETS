{"tx_hash": "EoTQprRVT5ZpRDr91PcFpmgDhuYUyU3VrDwjyAskWLAf", "action_id_social": "vy72DexnLxRAroDXUrFGM67ZEupCHTEcdp84wZj144b-0-widget", "block_id": 103758710, "block_timestamp": "2023-10-19T20:45:30.401Z", "signer_id": "silkking.near", "widget_name": "lib.article_v0.0.1", "source_code": "// HOW TO USE\r\n// Create the functions that you want. Then add the functions you want to 'export' inside the `callFunction` function\r\n\r\n// INTERFACES\r\n// interface FunctionCall {\r\n//     functionName: string,\r\n//     key: string, // The state of the caller will be updated with this string as a key\r\n//     props: Record<string, any> // function parameters as object\r\n// }\r\n\r\n// type LibsCalls = Record<string, FunctionCall> // Key is lib name after lib.\r\n\r\nconst { isTest, stateUpdate, functionsToCallByLibrary, callLibs, action } =\r\n  props;\r\nconst functionsToCall = functionsToCallByLibrary.template; // Change this with the name of your widget\r\nconst libName = \"article_v0.0.1\";\r\n\r\nlet resultFunctionsToCallByLibrary = Object.assign(\r\n  {},\r\n  functionsToCallByLibrary\r\n); // We make a copy of the functions we're going to call to clean it afterwards if needed, so it isn't called every time the caller gets updated.\r\nlet resultFunctionsToCall = []; // Util for resultFunctionsToCallByLibrary\r\n\r\nconst libSrcArray = []; // string to lib widget\r\n\r\nState.init({\r\n  libsCalls: {}, // is a LibsCalls object. It's used to call another library's functions\r\n});\r\n\r\nfunction log(message) {\r\n  console.log(`lib.${libName}`, message);\r\n}\r\n\r\nfunction logError(message) {\r\n  console.error(`lib.${libName}`, message);\r\n}\r\n\r\nfunction getNewFormatValidArticles(env) {}\r\n\r\nfunction getArticles(props) {\r\n  const { env } = props;\r\n\r\n  const articlesIndexes = getArticlesIndexes();\r\n\r\n  const validArticlesIndexes = filterInvalidArticlesIndexes(\r\n    env,\r\n    articlesIndexes\r\n  );\r\n\r\n  const validLatestEdits = getLatestEdits(validArticlesIndexes);\r\n\r\n  const articles = validLatestEdits.map(getArticle);\r\n  return normalizeArticles(articles);\r\n}\r\n\r\nfunction getArticlesIndexes() {\r\n  return Social.index(action, \"main\", {\r\n    order: \"desc\",\r\n    subscribe: true,\r\n  });\r\n}\r\n\r\nfunction filterInvalidArticlesIndexes(env, articlesIndexes) {\r\n  return articlesIndexes\r\n    .filter((articleIndex) => articleIndex.value.id) // Has id\r\n    .filter(\r\n      (articleIndex) =>\r\n        articleIndex.value.id.split(\"-\")[0] === articleIndex.accountId\r\n    )\r\n    .filter(\r\n      (articleIndex) =>\r\n        !getArticleBlackListByBlockHeight().includes(articleIndex.blockHeight) // Blockheight is not in blacklist\r\n    )\r\n    .filter(\r\n      (articleIndex) =>\r\n        !getArticleBlackListByRealArticleId().includes(articleIndex.value.id) // Article id is not in blacklist\r\n    );\r\n}\r\n\r\nfunction getArticleBlackListByBlockHeight() {\r\n  return [\r\n    91092435, 91092174, 91051228, 91092223, 91051203, 98372095, 96414482,\r\n    96412953, 103131250,\r\n  ];\r\n}\r\n\r\nfunction getLatestEdits(newFormatArticlesIndexes) {\r\n  return newFormatArticlesIndexes.filter((articleIndex) => {\r\n    const latestEditForThisArticle = newFormatArticlesIndexes.find(\r\n      (newArticleData) => newArticleData.value.id === articleIndex.value.id\r\n    );\r\n    return (\r\n      JSON.stringify(articleIndex) === JSON.stringify(latestEditForThisArticle)\r\n    );\r\n  });\r\n}\r\n\r\nfunction getArticle(articleIndex) {\r\n  const article = Social.get(\r\n    `${articleIndex.accountId}/${action}/main`,\r\n    articleIndex.blockHeight\r\n  );\r\n\r\n  let articleParsed = undefined;\r\n  if (article) {\r\n    articleParsed = JSON.parse(article);\r\n    articleParsed.blockHeight = articleIndex.blockHeight;\r\n    articleParsed.id = articleIndex.value.id;\r\n  }\r\n\r\n  if (articleParsed) {\r\n    return articleParsed;\r\n  }\r\n}\r\n\r\nfunction getArticleBlackListByRealArticleId() {\r\n  return [\r\n    \"blaze.near-1690410074090\",\r\n    \"blaze.near-1690409577184\",\r\n    \"blaze.near-1690803928696\",\r\n    \"blaze.near-1690803872147\",\r\n    \"blaze.near-1690574978421\",\r\n    \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb-1691703303485\",\r\n    \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb-1691702619510\",\r\n    \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb-1691702487944\",\r\n    \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb-1691707918243\",\r\n    \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb-1691707889297\",\r\n  ];\r\n}\r\n\r\nfunction normalizeFromV0_0_1ToV0_0_2(article) {\r\n  article.title = article.articleId;\r\n  article.id = article.realArticleId;\r\n  if (article.sbts[0] !== \"public\") {\r\n    article.sbts[0] = article.sbts[0] + \" - class 1\";\r\n  } // There is only one article that is not public and only has class 1\r\n\r\n  delete article.articleId;\r\n  delete article.realArticleId;\r\n\r\n  return article;\r\n}\r\n\r\nfunction normalizeFromV0_0_2ToV0_0_3(article) {\r\n  if (!Array.isArray(article.tags) && typeof article.tags === \"object\") {\r\n    article.tags = Object.keys(article.tags);\r\n  }\r\n}\r\n\r\nfunction normalizeArticles(articles) {\r\n  articles = articles.map(normalizeFromV0_0_1ToV0_0_2);\r\n  articles = articles.map(normalizeFromV0_0_2ToV0_0_3);\r\n\r\n  return articles;\r\n}\r\n\r\nfunction callFunction(call) {\r\n  if (call.functionName === \"getArticles\") {\r\n    return getArticles(call.props);\r\n  }\r\n}\r\n\r\nif (functionsToCall && functionsToCall.length > 0) {\r\n  const updateObj = Object.assign({}, functionsToCallByLibrary);\r\n  resultFunctionsToCall = [...functionsToCall];\r\n  functionsToCall.forEach((call) => {\r\n    updateObj[call.key] = callFunction(call);\r\n  });\r\n\r\n  resultFunctionsToCallByLibrary.template = resultFunctionsToCall;\r\n  updateObj.functionsToCallByLibrary = resultFunctionsToCallByLibrary;\r\n  stateUpdate(updateObj);\r\n}\r\n\r\nreturn (\r\n  <>\r\n    {libSrcArray.map((src) => {\r\n      return callLibs(src, libStateUpdate, state.libsCalls, `lib.${libName}`);\r\n    })}\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/lib.article_v0.0.1", "fact_widget_deployments_id": "0d69f314f6f41fe83f9adf8c6af72130", "inserted_timestamp": "2023-10-19T22:39:45.957Z", "modified_timestamp": "2023-10-19T22:39:45.957Z", "__row_index": 0}