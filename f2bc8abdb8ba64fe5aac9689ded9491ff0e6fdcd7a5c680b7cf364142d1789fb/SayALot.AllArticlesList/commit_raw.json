{"tx_hash": "2bDEUyMkKzdrjpLc5GR8KUWK1Dq9KDaQMyFLvnRuKue9", "action_id_social": "HtTXTyFpVnC1aiQmGZM4MpBPTEvBbZ6bchPbnEQSLCqg-0-widget", "block_id": 104200218, "block_timestamp": "2023-10-25T20:40:59.336Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "SayALot.AllArticlesList", "source_code": "//===============================================INITIALIZATION=====================================================\n\nlet {\n  isTest,\n  stateUpdate,\n  articlesToRender,\n  tabs,\n  widgets,\n  addressForArticles,\n  handleFilterArticles,\n  handleOpenArticle,\n  authorForWidget,\n  initialCreateState,\n  editArticleData,\n  handleEditArticle,\n  showCreateArticle,\n  sbtWhiteList,\n  sbts,\n  handleShareButton,\n  canLoggedUserCreateArticles,\n  filterBy,\n  callLibs,\n} = props;\n\nconst libSrcArray = [widgets.libUpVotes];\n\nlet initLibsCalls = { upVotes: [] };\n\n//For the moment we'll allways have only 1 sbt in the array. If this change remember to do the propper work in SayALot.lib.SBT and here.\n\ninitLibsCalls.upVotes = articlesToRender.map((article) => {\n  return {\n    functionName: \"getUpVotes\",\n    key: `upVotes-${article.id}`,\n    props: {\n      id: article.id ?? `${article.author}-${article.timeCreate}`,\n      sbtsNames: article.sbts ?? [],\n    },\n  };\n});\n\nif (articlesToRender.length > 0) {\n  State.update({ libsCalls: initLibsCalls });\n}\n\nState.init({\n  start: Date.now(),\n  libsCalls: initLibsCalls,\n});\n// console.log(1, \"All articles list\", state);\n// console.log(2, \"All articles list\", initLibsCalls);\n\nif (state.upVotesBySBT && Object.keys(state.upVotesBySBT).length > 0) {\n  // console.log(\n  //   \"Object.keys(state.upVotesBySBT): \",\n  //   Object.keys(state.upVotesBySBT)\n  // );\n\n  const key = Object.keys(state.upVotesBySBT)[0]; // There should always be one for now\n  // console.log(\"key: \", key);\n  const newUpvotes = state.upVotesBySBT[key];\n  // console.log(\"newUpvotes: \", newUpvotes);\n  if (JSON.stringify(state.upVotes) !== JSON.stringify(newUpvotes)) {\n    State.update({ upVotes: newUpvotes });\n  }\n}\n\nlet finalArticlesWithUpVotes = articlesToRender.map((article) => {\n  // console.log(0, state[`upVotes-${article.id}`]);\n  // console.log(article);\n  if (state[`upVotes-${article.id}`]) {\n    const key = Object.keys(state[`upVotes-${article.id}`])[0];\n    const articleUpVotes = state[`upVotes-${article.id}`][key];\n    // article.upVotes = state[`upVotes-${article.id}`];\n    article.upVotes = articleUpVotes;\n\n    return article;\n  }\n});\n\nconst fiveDaysTimeLapse = 432000000;\n\nconst newestArticlesWithUpVotes = finalArticlesWithUpVotes\n  .filter((article) => article.timeLastEdit > Date.now() - fiveDaysTimeLapse)\n  .sort((a, b) => b.timeLastEdit - a.timeLastEdit);\n\nconst olderArticlesWithUpVotes = finalArticlesWithUpVotes\n  .filter((article) => article.timeLastEdit < Date.now() - fiveDaysTimeLapse)\n  .sort((a, b) => b.upVotes.length - a.upVotes.length);\n\nconst sortedFinalArticlesWithUpVotes = [\n  ...newestArticlesWithUpVotes,\n  ...olderArticlesWithUpVotes,\n];\n\n//=============================================END INITIALIZATION===================================================\n\n//===================================================CONSTS=========================================================\n\nconst ArticlesListContainer = styled.div`\n  background-color: rgb(248, 248, 249);\n`;\n\nconst CallLibrary = styled.div`\n  display: none;\n`;\n\nconst IconCursorPointer = styled.i`\n  cursor: pointer;\n`;\n\n//=================================================END CONSTS=======================================================\n\n//==================================================FUNCTIONS=======================================================\n\nfunction getDateLastEdit(timestamp) {\n  const date = new Date(Number(timestamp));\n  const dateString = {\n    date: date.toLocaleDateString(),\n    time: date.toLocaleTimeString(),\n  };\n  return dateString;\n}\n\nfunction allArticlesListStateUpdate(obj) {\n  State.update(obj);\n}\n\n//================================================END FUNCTIONS=====================================================\nreturn (\n  <>\n    {\n      // true ? (\n      showCreateArticle ? (\n        <Widget\n          src={widgets.create}\n          props={{\n            isTest,\n            addressForArticles,\n            authorForWidget,\n            stateUpdate,\n            widgets,\n            initialCreateState,\n            editArticleData,\n            callLibs,\n            handleFilterArticles,\n            handleEditArticle,\n            initialBody: \"\",\n            canLoggedUserCreateArticles,\n            sbts,\n          }}\n        />\n      ) : (\n        <h6>You can't post since you don't own this SBT</h6>\n      )\n    }\n    <div>\n      {filterBy.parameterName === \"tag\" && (\n        <div className=\"mt-3\">\n          <h6>Filter by tag:</h6>\n          <div className=\"d-flex align-items-center \">\n            <Widget\n              src={widgets.newStyledComponents.Element.Badge}\n              props={{\n                children: filterBy.parameterValue,\n                variant: \"round info\",\n                size: \"lg\",\n              }}\n            />\n            <IconCursorPointer\n              className=\"bi bi-x\"\n              onClick={() => handleFilterArticles({ filterBy: \"\", value: \"\" })}\n            ></IconCursorPointer>\n          </div>\n        </div>\n      )}\n      <ArticlesListContainer className=\"row card-group py-3\">\n        {sortedFinalArticlesWithUpVotes.length > 0 ? (\n          sortedFinalArticlesWithUpVotes.map((article, i) => {\n            const authorProfileCall = Social.getr(`${article.author}/profile`);\n\n            if (authorProfileCall) {\n              article.authorProfile = authorProfileCall;\n            }\n\n            // If some widget posts data different than an array it will be ignored\n            if (!Array.isArray(article.tags)) article.tags = [];\n            return (\n              <Widget\n                src={widgets.generalCard}\n                props={{\n                  widgets,\n                  isTest,\n                  data: article,\n                  displayOverlay: true,\n                  renderReactions: true,\n                  addressForArticles,\n                  handleOpenArticle,\n                  handleFilterArticles,\n                  authorForWidget,\n                  handleShareButton,\n                  sbtWhiteList,\n                  callLibs,\n                }}\n              />\n            );\n          })\n        ) : (\n          <h5>No articles uploaded using this SBT yet</h5>\n        )}\n      </ArticlesListContainer>\n    </div>\n    <CallLibrary>\n      {libSrcArray.map((src) => {\n        return callLibs(\n          src,\n          allArticlesListStateUpdate,\n          state.libsCalls,\n          { baseAction: \"sayALotUpVote\" },\n          \"All articles list\"\n        );\n      })}\n    </CallLibrary>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/SayALot.AllArticlesList", "fact_widget_deployments_id": "d5e53c74347faadb5fafb798eb172520", "inserted_timestamp": "2023-10-25T22:37:11.901Z", "modified_timestamp": "2023-10-25T22:37:11.901Z", "__row_index": 0}