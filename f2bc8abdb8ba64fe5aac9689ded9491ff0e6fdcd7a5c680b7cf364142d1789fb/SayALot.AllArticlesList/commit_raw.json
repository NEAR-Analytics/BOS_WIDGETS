{"tx_hash": "GtBu2vVVwi8UVg3op1Lqhih74qPk46LFG1PfmqCn6cVs", "action_id_social": "DyGjLjoFAAniE6YjsCEAn7SCBVPVwTR7Czkts7mWKMDo-0-widget", "block_id": 103094169, "block_timestamp": "2023-10-11T02:12:20.759Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "SayALot.AllArticlesList", "source_code": "//===============================================INITIALIZATION=====================================================\r\n\r\nlet {\r\n  isTest,\r\n  stateUpdate,\r\n  articlesToRender,\r\n  tabs,\r\n  widgets,\r\n  addressForArticles,\r\n  handleFilterArticles,\r\n  handleOpenArticle,\r\n  authorForWidget,\r\n  initialCreateState,\r\n  editArticleData,\r\n  callLibs,\r\n  handleEditArticle,\r\n  showCreateArticle,\r\n  sbtWhiteList,\r\n  handleSbtSelection,\r\n  sbts,\r\n  createSbtOptions,\r\n  handleShareButton,\r\n  // logedUserSbts,\r\n} = props;\r\n\r\nconst libSrcArray = [widgets.libUpVotes];\r\n\r\nlet initLibCalls = [];\r\n\r\n//For the moment we'll allways have only 1 sbt in the array. If this change remember to do the propper work in SayALot.lib.SBT and here.\r\nconst articleSbts = articleToRenderData.sbts[0] ?? [];\r\n\r\narticlesToRender.forEach((article) =>\r\n  initLibCalls.push({\r\n    functionName: \"getUpVotes\",\r\n    key: `upVotes-${article.id}`,\r\n    props: {\r\n      id: article.id ?? `${article.author}-${article.timeCreate}`,\r\n      articleSbts: article.sbts ?? [],\r\n    },\r\n  })\r\n);\r\n\r\nif (initLibCalls.length > 0) {\r\n  State.update({ libCalls: initLibCalls });\r\n}\r\n\r\nState.init({\r\n  start: Date.now(),\r\n  libCalls: initLibCalls,\r\n});\r\n\r\nlet finalArticlesWithUpVotes = articlesToRender.map((article) => {\r\n  article.upVotes = state[`upVotes-${article.id}`];\r\n\r\n  return article;\r\n});\r\n\r\nconst fiveDaysTimeLapse = 432000000;\r\n\r\nconst newestArticlesWithUpVotes = finalArticlesWithUpVotes\r\n  .filter((article) => article.timeLastEdit > Date.now() - fiveDaysTimeLapse)\r\n  .sort((a, b) => b.timeLastEdit - a.timeLastEdit);\r\n\r\nconst olderArticlesWithUpVotes = finalArticlesWithUpVotes\r\n  .filter((article) => article.timeLastEdit < Date.now() - fiveDaysTimeLapse)\r\n  .sort((a, b) => b.upVotes.length - a.upVotes.length);\r\n\r\nconst sortedFinalArticlesWithUpVotes = [\r\n  ...newestArticlesWithUpVotes,\r\n  ...olderArticlesWithUpVotes,\r\n];\r\n\r\n//=============================================END INITIALIZATION===================================================\r\n\r\n//===================================================CONSTS=========================================================\r\n\r\nconst ArticlesListContainer = styled.div`\r\n  background-color: rgb(248, 248, 249);\r\n`;\r\n\r\nconst CallLibrary = styled.div`\r\n  display: none;\r\n`;\r\n\r\n//=================================================END CONSTS=======================================================\r\n\r\n//==================================================FUNCTIONS=======================================================\r\n\r\nfunction getDateLastEdit(timestamp) {\r\n  const date = new Date(Number(timestamp));\r\n  const dateString = {\r\n    date: date.toLocaleDateString(),\r\n    time: date.toLocaleTimeString(),\r\n  };\r\n  return dateString;\r\n}\r\n\r\nfunction allArticlesListStateUpdate(obj) {\r\n  State.update(obj);\r\n}\r\n\r\n//================================================END FUNCTIONS=====================================================\r\nreturn (\r\n  <>\r\n    {\r\n      // true && (\r\n      showCreateArticle && (\r\n        <Widget\r\n          src={widgets.create}\r\n          props={{\r\n            isTest,\r\n            addressForArticles,\r\n            authorForWidget,\r\n            stateUpdate,\r\n            widgets,\r\n            initialCreateState,\r\n            editArticleData,\r\n            callLibs,\r\n            handleFilterArticles,\r\n            handleEditArticle,\r\n            initialBody: \"\",\r\n            createSbtOptions,\r\n          }}\r\n        />\r\n      )\r\n    }\r\n    <div className=\"mt-3 border-top pt-2\">\r\n      <Widget\r\n        src={widgets.styledComponents}\r\n        props={{\r\n          Dropdown: {\r\n            label: \"Select sbt filter\",\r\n            value: sbts[0],\r\n            handleChange: handleSbtSelection,\r\n            options: createSbtOptions(),\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n    <ArticlesListContainer className=\"row card-group mt-3 py-3 rounded\">\r\n      {sortedFinalArticlesWithUpVotes.length > 0 &&\r\n        sortedFinalArticlesWithUpVotes.map((article, i) => {\r\n          const authorProfileCall = Social.getr(`${article.author}/profile`);\r\n\r\n          if (authorProfileCall) {\r\n            article.authorProfile = authorProfileCall;\r\n          }\r\n\r\n          // If some widget posts data different than an array it will be ignored\r\n          if (!Array.isArray(article.tags)) article.tags = [];\r\n          return (\r\n            <Widget\r\n              src={widgets.generalCard}\r\n              props={{\r\n                widgets,\r\n                isTest,\r\n                data: article,\r\n                displayOverlay: true,\r\n                renderReactions: true,\r\n                addressForArticles,\r\n                handleOpenArticle,\r\n                handleFilterArticles,\r\n                authorForWidget,\r\n                handleShareButton,\r\n                // logedUserSbts,\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n    </ArticlesListContainer>\r\n    <CallLibrary>\r\n      {callLibs(libSrcArray, allArticlesListStateUpdate, state.libCalls)}\r\n    </CallLibrary>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/SayALot.AllArticlesList", "fact_widget_deployments_id": "da70c9df33410c074364fac3956be94f", "inserted_timestamp": "2023-10-11T03:47:32.937Z", "modified_timestamp": "2023-10-11T03:47:32.937Z", "__row_index": 35}