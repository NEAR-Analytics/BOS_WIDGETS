{"tx_hash": "8pbgnx6jJLDXcoFhrbPK6kvJy2DqFixN4QmNM7es7Pqj", "action_id_social": "GCC6mJurtPQeqGK63Ly8HaNwW8uSzgBseBGeGBXZQmd4-0-widget", "block_id": 102701055, "block_timestamp": "2023-10-05T21:21:57.326Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "SayALot.AllArticlesList", "source_code": "//===============================================INITIALIZATION=====================================================\n\nlet {\n  isTest,\n  stateUpdate,\n  finalArticles,\n  tabs,\n  widgets,\n  addressForArticles,\n  handleFilterArticles,\n  handleOpenArticle,\n  authorForWidget,\n  initialCreateState,\n  editArticleData,\n  callLibs,\n  handleEditArticle,\n  showCreateArticle,\n  sbtWhiteList,\n  handleSbtSelection,\n  sbts,\n  createSbtOptions,\n  // logedUserSbts,\n} = props;\n\nconst libSrcArray = [widgets.libUpVotes];\n\nlet initLibCalls = [];\n\n//For the moment we'll allways have only 1 sbt in the array. If this change remember to do the propper work in SayALot.lib.SBT and here.\nconst articleSbts = articleToRenderData.sbts[0] ?? [];\n\nfinalArticles.forEach((article) =>\n  initLibCalls.push({\n    functionName: \"getUpVotes\",\n    key: `upVotes-${article.realArticleId}`,\n    props: {\n      realArticleId:\n        article.realArticleId ?? `${article.author}-${article.timeCreate}`,\n      articleSbts: article.sbts[0] ?? [],\n    },\n  })\n);\n\nif (initLibCalls.length > 0) {\n  State.update({ libCalls: initLibCalls });\n}\n\nState.init({\n  start: Date.now(),\n  libCalls: initLibCalls,\n});\n\nlet finalArticlesWithUpVotes = finalArticles.map((article) => {\n  article.upVotes = state[`upVotes-${article.realArticleId}`];\n\n  return article;\n});\n\nconst fiveDaysTimeLapse = 432000000;\n\nconst newestArticlesWithUpVotes = finalArticlesWithUpVotes\n  .filter((article) => article.timeLastEdit > Date.now() - fiveDaysTimeLapse)\n  .sort((a, b) => b.timeLastEdit - a.timeLastEdit);\n\nconst olderArticlesWithUpVotes = finalArticlesWithUpVotes\n  .filter((article) => article.timeLastEdit < Date.now() - fiveDaysTimeLapse)\n  .sort((a, b) => b.upVotes.length - a.upVotes.length);\n\nconst sortedFinalArticlesWithUpVotes = [\n  ...newestArticlesWithUpVotes,\n  ...olderArticlesWithUpVotes,\n];\n\n//=============================================END INITIALIZATION===================================================\n\n//===================================================CONSTS=========================================================\n\nconst ArticlesListContainer = styled.div`\n  background-color: rgb(248, 248, 249);\n`;\n\nconst CallLibrary = styled.div`\n  display: none;\n`;\n\n//=================================================END CONSTS=======================================================\n\n//==================================================FUNCTIONS=======================================================\n\nfunction getDateLastEdit(timestamp) {\n  const date = new Date(Number(timestamp));\n  const dateString = {\n    date: date.toLocaleDateString(),\n    time: date.toLocaleTimeString(),\n  };\n  return dateString;\n}\n\nfunction allArticlesListStateUpdate(obj) {\n  State.update(obj);\n}\n\n//================================================END FUNCTIONS=====================================================\n// console.log(\"state.libCalls: \", state.libCalls);\nreturn (\n  <>\n    {\n      // true && (\n      showCreateArticle && (\n        <Widget\n          src={widgets.create}\n          props={{\n            isTest,\n            addressForArticles,\n            authorForWidget,\n            stateUpdate,\n            widgets,\n            initialCreateState,\n            editArticleData,\n            callLibs,\n            handleFilterArticles,\n            handleEditArticle,\n            initialBody: \"\",\n            createSbtOptions,\n          }}\n        />\n      )\n    }\n    <div className=\"mt-3 border-top pt-2\">\n      <Widget\n        src={widgets.styledComponents}\n        props={{\n          Dropdown: {\n            label: \"Select sbt filter\",\n            value: sbts[0],\n            handleChange: handleSbtSelection,\n            options: createSbtOptions(),\n          },\n        }}\n      />\n    </div>\n    <ArticlesListContainer className=\"row card-group mt-3 py-3 rounded\">\n      {sortedFinalArticlesWithUpVotes.length > 0 &&\n        sortedFinalArticlesWithUpVotes.map((article, i) => {\n          const authorProfileCall = Social.getr(`${article.author}/profile`);\n\n          if (authorProfileCall) {\n            article.authorProfile = authorProfileCall;\n          }\n\n          // If some widget posts data different than an array it will be ignored\n          if (!Array.isArray(article.tags)) article.tags = [];\n          return (\n            <Widget\n              src={widgets.generalCard}\n              props={{\n                widgets,\n                isTest,\n                data: article,\n                displayOverlay: true,\n                renderReactions: true,\n                addressForArticles,\n                handleOpenArticle,\n                handleFilterArticles,\n                authorForWidget,\n                // logedUserSbts,\n              }}\n            />\n          );\n        })}\n    </ArticlesListContainer>\n    <CallLibrary>\n      {callLibs(libSrcArray, allArticlesListStateUpdate, state.libCalls)}\n    </CallLibrary>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/SayALot.AllArticlesList", "fact_widget_deployments_id": "48665a42aacb732d87a9a364fc81f7e3", "inserted_timestamp": "2023-10-05T23:24:46.654Z", "modified_timestamp": "2023-10-05T23:24:46.654Z", "__row_index": 66}