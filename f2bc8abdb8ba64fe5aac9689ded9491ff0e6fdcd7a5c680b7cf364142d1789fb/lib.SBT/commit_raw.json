{"tx_hash": "tbxsjASG2D6n25ZLvVTzvSNwy7yekJT1zohbT1eA1iT", "action_id_social": "CKKJpGFvCsgHr7394w7iQj1PjxWqwonPT57f2u7xUSvo-0-widget", "block_id": 104120879, "block_timestamp": "2023-10-24T18:26:46.790Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "lib.SBT", "source_code": "const {\r\n  isTest,\r\n  stateUpdate,\r\n  functionsToCallByLibrary,\r\n  callLibs,\r\n  baseAction,\r\n  widgets,\r\n} = props;\r\nconst libName = \"SBT\"; // EDIT: set lib name\r\nconst functionsToCall = functionsToCallByLibrary[libName];\r\n\r\nlet resultFunctionsToCallByLibrary = Object.assign(\r\n  {},\r\n  functionsToCallByLibrary\r\n);\r\nlet resultFunctionsToCall = [];\r\n\r\n// START LIB CALLS SECTION\r\n// This lib does not call any other lib\r\n// END LIB CALLS SECTION\r\n\r\nfunction log(message) {\r\n  console.log(`lib.${libName}`, message);\r\n}\r\n\r\nfunction logError(message) {\r\n  console.error(`lib.${libName}`, message);\r\n}\r\n\r\nfunction libStateUpdate(obj) {\r\n  State.update(obj);\r\n}\r\n\r\n// START LIB FUNCTIONS: EDIT set functions you need\r\nfunction isValidUser(props) {\r\n  const { accountId, sbtsNames } = props;\r\n  const userSBTs = Near.view(\r\n    \"registry.i-am-human.near\",\r\n    \"sbt_tokens_by_owner\",\r\n    {\r\n      account: accountId,\r\n    }\r\n  );\r\n  const sbtsData = sbtsNames.map((sbt) => {\r\n    const data = sbt.split(\" - class \");\r\n    return { name: data[0], classNumber: Number(data[1]) };\r\n  });\r\n  const usersValidityBySBT = {};\r\n  sbtsNames.forEach((sbtName, index) => {\r\n    const userValidityBySBT =\r\n      userSBTs.find((userSbt) => {\r\n        return (\r\n          userSbt[0] === sbtsData[index].name &&\r\n          userSbt[1].find(\r\n            (sbtExtraData) =>\r\n              sbtExtraData.metadata[\"class\"] === sbtsData[index].classNumber\r\n          )\r\n        );\r\n      }) !== undefined;\r\n    usersValidityBySBT[sbtName] = userValidityBySBT || sbtName === \"public\";\r\n  });\r\n\r\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n    return call.functionName !== \"isValidUser\";\r\n  });\r\n\r\n  // return true;\r\n  return { ...usersValidityBySBT };\r\n}\r\n\r\nfunction getLoggedUserSbts(props) {\r\n  const { accountId } = props;\r\n  const userSBTs = Near.view(\r\n    \"registry.i-am-human.near\",\r\n    \"sbt_tokens_by_owner\",\r\n    {\r\n      account: accountId,\r\n    }\r\n  );\r\n\r\n  if (userSBTs) {\r\n    resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n      return call.functionName !== \"getLoggedUserSbts\";\r\n    });\r\n  }\r\n\r\n  return userSBTs;\r\n}\r\n// END LIB FUNCTIONS\r\n\r\n// EDIT: set functions you want to export\r\nfunction callFunction(call) {\r\n  if (call.functionName === \"isValidUser\") {\r\n    return isValidUser(call.props);\r\n  } else if (call.functionName === \"getLoggedUserSbts\") {\r\n    return getLoggedUserSbts(call.props);\r\n  }\r\n}\r\n\r\nif (functionsToCall && functionsToCall.length > 0) {\r\n  const updateObj = Object.assign({}, functionsToCallByLibrary);\r\n  resultFunctionsToCall = [...functionsToCall];\r\n  functionsToCall.forEach((call) => {\r\n    updateObj[call.key] = callFunction(call);\r\n  });\r\n\r\n  resultFunctionsToCallByLibrary[libName] = resultFunctionsToCall;\r\n  updateObj.functionsToCallByLibrary = resultFunctionsToCallByLibrary;\r\n  stateUpdate(updateObj);\r\n}\r\n\r\nreturn <></>;\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/lib.SBT", "fact_widget_deployments_id": "4202e72f295a5dd2f614ff29f4827ce2", "inserted_timestamp": "2023-10-24T20:29:50.983Z", "modified_timestamp": "2023-10-24T20:29:50.983Z", "__row_index": 5}