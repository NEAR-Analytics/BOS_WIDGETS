{"tx_hash": "3kBDXuCTemhnhGNTmnWN1RfSwAEqVm1FsN3hhLVAX19H", "action_id_social": "Cd3C3DzTcrULSY4AATKkku1GyffsHGMDzAemZqZ2Dz6-0-widget", "block_id": 111134121, "block_timestamp": "2024-01-23T17:18:49.201Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "lib.SBT", "source_code": "// lib.SBT\r\n\r\nconst {\r\n  isTest,\r\n  stateUpdate,\r\n  functionsToCallByLibrary,\r\n  callLibs,\r\n  baseAction,\r\n  callerWidget,\r\n  widgets,\r\n} = props;\r\nconst libName = \"SBT\"; // EDIT: set lib name\r\nconst functionsToCall = functionsToCallByLibrary[libName];\r\n\r\nconst sbtWhiteList =\r\n  context.networkId === \"testnet\"\r\n    ? [\r\n        {\r\n          value: \"fractal-v2.i-am-human.testnet - class 1\",\r\n          title: \"Fractal\",\r\n          default: true,\r\n        },\r\n        {\r\n          value: \"community-v2.i-am-human.testnet - class 1\",\r\n          title: \"Community\",\r\n        },\r\n      ]\r\n    : [\r\n        {\r\n          value: \"fractal.i-am-human.near - class 1\",\r\n          title: \"General\",\r\n          default: true,\r\n        },\r\n        { value: \"community.i-am-human.near - class 1\", title: \"OG\" },\r\n        { value: \"community.i-am-human.near - class 2\", title: \"Contributor\" },\r\n        {\r\n          value: \"community.i-am-human.near - class 3\",\r\n          title: \"Core Contributor\",\r\n        },\r\n        { value: \"elections.ndc-gwg.near - class 2\", title: \"HoM\" },\r\n        { value: \"elections.ndc-gwg.near - class 3\", title: \"CoA\" },\r\n        { value: \"elections.ndc-gwg.near - class 4\", title: \"TC\" },\r\n        { value: \"public\", title: \"Public\" },\r\n      ];\r\n\r\nlet resultFunctionsToCallByLibrary = Object.assign(\r\n  {},\r\n  functionsToCallByLibrary\r\n);\r\nlet resultFunctionsToCall = [];\r\n\r\nconst registryContract =\r\n  context.networkId === \"mainnet\"\r\n    ? \"registry.i-am-human.near\"\r\n    : \"registry-v2.i-am-human.testnet\";\r\n\r\n// START LIB CALLS SECTION\r\n// This lib does not call any other lib\r\n// END LIB CALLS SECTION\r\n\r\nfunction log(message) {\r\n  console.log(`lib.${libName}`, message);\r\n}\r\n\r\nfunction logError(message) {\r\n  console.error(`lib.${libName}`, message);\r\n}\r\n\r\nfunction libStateUpdate(obj) {\r\n  State.update(obj);\r\n}\r\n\r\n// START LIB FUNCTIONS: EDIT set functions you need\r\n\r\nfunction getSBTWhiteList(props) {\r\n  const {} = props;\r\n\r\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n    return call.functionName !== \"getSBTWhiteList\";\r\n  });\r\n\r\n  return sbtWhiteList;\r\n}\r\n\r\nfunction isValidUser(props) {\r\n  const { accountId, sbtsNames } = props;\r\n  const userSBTs = Near.view(registryContract, \"sbt_tokens_by_owner\", {\r\n    account: accountId,\r\n  });\r\n  const isSBTContractLoaded = userSBTs !== null;\r\n  if (!isSBTContractLoaded) {\r\n    return undefined;\r\n  }\r\n\r\n  const sbtsData = sbtsNames.map((sbt) => {\r\n    const data = sbt.split(\" - class \");\r\n    return { name: data[0], classNumber: Number(data[1]) };\r\n  });\r\n  const usersValidityBySBT = {};\r\n  sbtsNames.forEach((sbtName, index) => {\r\n    const isUserValid =\r\n      isSBTContractLoaded &&\r\n      userSBTs.find((userSbt) => {\r\n        return (\r\n          userSbt[0] === sbtsData[index].name &&\r\n          userSbt[1].find(\r\n            (sbtExtraData) =>\r\n              sbtExtraData.metadata[\"class\"] === sbtsData[index].classNumber\r\n          )\r\n        );\r\n      }) !== undefined;\r\n    usersValidityBySBT[sbtName] = isUserValid || sbtName === \"public\";\r\n  });\r\n\r\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n    return call.functionName !== \"isValidUser\";\r\n  });\r\n\r\n  // return true;\r\n  return { ...usersValidityBySBT };\r\n}\r\n\r\nfunction getUserSBTs(props) {\r\n  const { accountId } = props;\r\n  const userSBTs = Near.view(registryContract, \"sbt_tokens_by_owner\", {\r\n    account: accountId,\r\n  });\r\n\r\n  if (userSBTs) {\r\n    resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n      return call.functionName !== \"getUserSBTs\";\r\n    });\r\n  }\r\n\r\n  return userSBTs;\r\n}\r\n// END LIB FUNCTIONS\r\n\r\n// EDIT: set functions you want to export\r\nfunction callFunction(call) {\r\n  if (call.functionName === \"getSBTWhiteList\") {\r\n    return getSBTWhiteList(call.props);\r\n  } else if (call.functionName === \"isValidUser\") {\r\n    return isValidUser(call.props);\r\n  } else if (call.functionName === \"getUserSBTs\") {\r\n    return getUserSBTs(call.props);\r\n  }\r\n}\r\n\r\nif (functionsToCall && functionsToCall.length > 0) {\r\n  const updateObj = Object.assign({}, functionsToCallByLibrary);\r\n  resultFunctionsToCall = [...functionsToCall];\r\n  functionsToCall.forEach((call) => {\r\n    updateObj[call.key] = callFunction(call);\r\n  });\r\n\r\n  resultFunctionsToCallByLibrary[libName] = resultFunctionsToCall;\r\n  updateObj.functionsToCallByLibrary = resultFunctionsToCallByLibrary;\r\n  stateUpdate(updateObj);\r\n}\r\n\r\nreturn <></>;\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/lib.SBT", "fact_widget_deployments_id": "28563bfbbef650bbb079258073076f89", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 13}