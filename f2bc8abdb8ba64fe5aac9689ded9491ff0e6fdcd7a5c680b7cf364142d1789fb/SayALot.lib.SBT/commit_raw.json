{"tx_hash": "EaHRzbrXsP2BSgVqXLwXuN6PMwavotBVf1wu71VNXP5L", "action_id_social": "JD94fVWreztuXMyzxgBLRSYRQknVwLPYfKRMaW3CWF6B-0-widget", "block_id": 103696370, "block_timestamp": "2023-10-19T00:53:47.965Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "SayALot.lib.SBT", "source_code": "const { isTest, stateUpdate, functionsToCallByLibrary, callLibs } = props;\r\nconst functionsToCall = functionsToCallByLibrary.SBT;\r\n\r\nlet resultFunctionsToCallByLibrary = Object.assign(\r\n  {},\r\n  functionsToCallByLibrary\r\n);\r\nlet resultFunctionsToCall = [];\r\n\r\nfunction isValidUser(props) {\r\n  const { accountId, sbtsNames } = props;\r\n  const userSBTs = Near.view(\r\n    \"registry.i-am-human.near\",\r\n    \"sbt_tokens_by_owner\",\r\n    {\r\n      account: accountId,\r\n    }\r\n  );\r\n\r\n  const sbtsData = sbtsNames.map((sbt) => {\r\n    const data = sbt.split(\" - class \");\r\n    return { name: data[0], classNumber: Number(data[1]) };\r\n  });\r\n  const usersValidityBySBT = {};\r\n  sbtsNames.forEach((sbtName, index) => {\r\n    const userValidityBySBT =\r\n      userSBTs.find((userSbt) => {\r\n        return (\r\n          userSbt[0] === sbtsData[index].name &&\r\n          userSbt[1].find(\r\n            (sbtExtraData) =>\r\n              sbtExtraData.metadata[\"class\"] === sbtsData[index].classNumber\r\n          )\r\n        );\r\n      }) !== undefined;\r\n    usersValidityBySBT[sbtName] = userValidityBySBT;\r\n  });\r\n\r\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n    return call.functionName !== \"isValidUser\";\r\n  });\r\n\r\n  // return true;\r\n  return { ...usersValidityBySBT };\r\n}\r\n\r\nfunction getLoggedUserSbts(props) {\r\n  const { accountId } = props;\r\n  const userSBTs = Near.view(\r\n    \"registry.i-am-human.near\",\r\n    \"sbt_tokens_by_owner\",\r\n    {\r\n      account: accountId,\r\n    }\r\n  );\r\n\r\n  if (userSBTs) {\r\n    resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n      return call.functionName !== \"getLoggedUserSbts\";\r\n    });\r\n  }\r\n\r\n  return userSBTs;\r\n}\r\n\r\nfunction callFunction(call) {\r\n  if (call.functionName === \"isValidUser\") {\r\n    return isValidUser(call.props);\r\n  } else if (call.functionName === \"getLoggedUserSbts\") {\r\n    return getLoggedUserSbts(call.props);\r\n  }\r\n}\r\n\r\nif (functionsToCall && functionsToCall.length > 0) {\r\n  const updateObj = Object.assign({}, functionsToCallByLibrary);\r\n  resultFunctionsToCall = [...functionsToCall];\r\n  functionsToCall.forEach((call) => {\r\n    updateObj[call.key] = callFunction(call);\r\n  });\r\n\r\n  resultFunctionsToCallByLibrary.article = resultFunctionsToCall;\r\n  updateObj.functionsToCallByLibrary = resultFunctionsToCallByLibrary;\r\n  stateUpdate(updateObj);\r\n}\r\n\r\nreturn <></>;\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/SayALot.lib.SBT", "fact_widget_deployments_id": "2c7bb14d8b9f8141d571ed4af02bde1d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}