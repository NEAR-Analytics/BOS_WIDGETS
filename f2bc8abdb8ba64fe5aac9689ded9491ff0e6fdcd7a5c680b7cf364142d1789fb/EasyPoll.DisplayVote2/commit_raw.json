{"tx_hash": "YsweMM9q5ai8RrLLmvso1XuboK6Qr1qnxyaJhch1LEc", "action_id_social": "x76WJfTuBJmxwuco91anQpn3JC97AswTWQBkbgPtr15-0-widget", "block_id": 94564715, "block_timestamp": "2023-06-19T20:53:52.701Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "EasyPoll.DisplayVote2", "source_code": "const widgetOwner = \"neardigitalcollective.near\";\r\nconst isTest = props.isTest;\r\n\r\nlet defaultVotes = [];\r\nfor (let i = 0; i < props.poll.value.questions.length; i++) {\r\n  if (props.poll.value.questions[i].questionType == \"2\") {\r\n    defaultVotes.push([\"\"]);\r\n  } else {\r\n    defaultVotes.push(\"\");\r\n  }\r\n}\r\n\r\nlet userVote;\r\n\r\nState.init({\r\n  vote: userVote ?? defaultVotes,\r\n});\r\n\r\nfunction getInputStyles(questionType, questionNumber, optionNumber) {\r\n  if (questionType == \"2\") {\r\n    return state.vote[questionNumber].includes(optionNumber + \"\")\r\n      ? {\r\n          borderColor: \"black\",\r\n          borderWidth: \"thick\",\r\n          width: \"1rem\",\r\n          marginRight: \"0.7rem\",\r\n        }\r\n      : {\r\n          width: \"1rem\",\r\n          marginRight: \"0.7rem\",\r\n        };\r\n  } else {\r\n    return optionNumber + \"\" == state.vote[questionNumber]\r\n      ? {\r\n          borderColor: \"black\",\r\n          borderWidth: \"thick\",\r\n          width: \"1rem\",\r\n          marginRight: \"0.7rem\",\r\n        }\r\n      : {\r\n          width: \"1rem\",\r\n          marginRight: \"0.7rem\",\r\n        };\r\n  }\r\n}\r\n\r\n// let secondaryColor = \"#E9EBF8\";\r\n// let fontColorBlue = \"#003E9C\";\r\n// let fontColorRed = \"#9C2B2B\";\r\n// let fontColorYellow = \"#9C7B03\";\r\n// let fontColorPurple = \"#763E9C\";\r\n// let fontColorGreen = \"#009C6D\";\r\n// let fontColorPink = \"#9C0034\";\r\n// let fontColorSkyBlue = \"#007C9C\";\r\n// let fontColorIndigo = \"#006758\";\r\n\r\n// let allFontColors = [\r\n//   fontColorBlue,\r\n//   fontColorRed,\r\n//   fontColorYellow,\r\n//   fontColorPurple,\r\n//   fontColorGreen,\r\n//   fontColorPink,\r\n//   fontColorSkyBlue,\r\n//   fontColorIndigo,\r\n// ];\r\n\r\n// function getFontColor(index) {\r\n//   return Number.isInteger((index + 1) / allFontColors.length)\r\n//     ? allFontColors[0]\r\n//     : allFontColors[\r\n//         ((index + 1) / allFontColors.length -\r\n//           Math.trunc((index + 1) / allFontColors.length)) *\r\n//           allFontColors.length -\r\n//           1\r\n//       ];\r\n// }\r\n\r\nlet bgBlue = \"#96C0FF\";\r\nlet bgRed = \"#FFB4B4\";\r\nlet bgYellow = \"#FFE999\";\r\nlet bgPurple = \"#E6C0FF\";\r\nlet bgGreen = \"#96FFE0\";\r\nlet bgPink = \"#FF96B9\";\r\nlet bgSkyBlue = \"#96EAFF\";\r\nlet bgIndigo = \"#96DCD2\";\r\n\r\nlet allBgColors = [\r\n  bgBlue,\r\n  bgRed,\r\n  bgYellow,\r\n  bgPurple,\r\n  bgGreen,\r\n  bgPink,\r\n  bgSkyBlue,\r\n  bgIndigo,\r\n];\r\n\r\nlet secondaryBgBlue = \"#E6F0FF\";\r\nlet secondaryBgRed = \"#FFEDED\";\r\nlet secondaryBgYellow = \"#FFFAE6\";\r\nlet secondaryBgPurple = \"#F9F0FF\";\r\nlet secondaryBgGreen = \"#E6FFF7\";\r\nlet secondaryBgPink = \"#FFE6EE\";\r\nlet secondaryBgSkyBlue = \"#E6FAFF\";\r\nlet secondaryBgIndigo = \"#E6F6F4\";\r\n\r\nlet allSecondaryBgColors = [\r\n  secondaryBgBlue,\r\n  secondaryBgRed,\r\n  secondaryBgYellow,\r\n  secondaryBgPurple,\r\n  secondaryBgGreen,\r\n  secondaryBgPink,\r\n  secondaryBgSkyBlue,\r\n  secondaryBgIndigo,\r\n];\r\n\r\nfunction getBgColor(index, isPrimary) {\r\n  let allColorsOfThisType =\r\n    state.vote != `${index}` && isPrimary ? allBgColors : allSecondaryBgColors;\r\n\r\n  return Number.isInteger((index + 1) / allColorsOfThisType.length)\r\n    ? allColorsOfThisType[0]\r\n    : allColorsOfThisType[\r\n        ((index + 1) / allColorsOfThisType.length -\r\n          Math.trunc((index + 1) / allColorsOfThisType.length)) *\r\n          allColorsOfThisType.length -\r\n          1\r\n      ];\r\n}\r\n\r\nfunction isVoteValid() {\r\n  let isValid = state.vote.length == props.poll.value.questions.length;\r\n  isValid = isValid && context.accountId;\r\n  for (let i = 0; i < state.vote.length; i++) {\r\n    const vote = state.vote[i];\r\n    // vote should always be a string, but in one case is treated as an array. Replace array with csv\r\n    if (Array.isArray(vote)) {\r\n      isValid = isValid && vote.filter((v) => v.trim() != \"\").length > 0;\r\n    } else {\r\n      isValid = isValid && vote.trim() != \"\";\r\n    }\r\n  }\r\n  return isValid;\r\n}\r\n\r\nreturn (\r\n  <>\r\n    <Widget\r\n      src={`f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/EasyPoll.DisplayMultiVote2`}\r\n      props={{\r\n        isTest,\r\n        widgetOwner,\r\n        getBgColor,\r\n        poll: props.poll,\r\n        indexVersion: props.indexVersion,\r\n        vote: state.vote,\r\n        questions: props.poll.value.questions,\r\n        renderMultipleChoiceInput,\r\n        getInputStyles: getInputStyles,\r\n        canVote: props.canVote,\r\n        hasVoted: props.hasVoted,\r\n        stateUpdate: (data) => State.update(data),\r\n        isQuestionOpen: props.isQuestionOpen,\r\n        isVoteValid: isVoteValid,\r\n        validAnswersToThisPoll: props.validAnswersToThisPoll,\r\n        countVotes: props.countVotes,\r\n      }}\r\n    />\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/EasyPoll.DisplayVote2", "fact_widget_deployments_id": "7d97a28ae6a95d6358dae22234898c2d", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 0}