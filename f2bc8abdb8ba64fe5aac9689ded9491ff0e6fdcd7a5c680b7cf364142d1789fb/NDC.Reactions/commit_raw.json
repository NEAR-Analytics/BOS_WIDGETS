{"tx_hash": "8UKCv2cjiPfFbRgbfoM5UueZQxayMGUDyP1mtqgJGhuq", "action_id_social": "3CX81mYajhoVYvUP83Uh9RGNcD2jc2Huw8b71sCj6xY2-0-widget", "block_id": 99018416, "block_timestamp": "2023-08-17T14:01:10.592Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "NDC.Reactions", "source_code": "const { isTest, authorForWidget, elementReactedId } = props;\r\n// Don't forget to put space between emoji and text -> \"\u2764\ufe0f Positive\"\r\nconst initialEmoji = \"\ud83e\udd0d Like\";\r\n// It is important that 'Heart' Positive emoji is first\r\nconst emojiArray = [\r\n  \"\u2764\ufe0f Positive\",\r\n  \"\ud83d\ude4f Thank you\",\r\n  \"\ud83d\udcaf Definitely\",\r\n  \"\ud83d\udc40 Thinking\",\r\n  \"\ud83d\udd25 Awesome\",\r\n  \"\ud83d\udc4d Like\",\r\n  \"\ud83d\ude4c Celebrate\",\r\n  \"\ud83d\udc4f Applause\",\r\n  \"\u26a1 Lightning\",\r\n  \"\u22c8 Bowtie\",\r\n];\r\n\r\nconst accountThatIsLoggedIn = context.accountId;\r\n\r\nconst libSrcArray = [`${authorForWidget}/widget/SayALot.lib.emojis`];\r\n\r\nfunction callLibs(srcArray, stateUpdate, libCalls) {\r\n  return (\r\n    <>\r\n      {srcArray.map((src) => {\r\n        return (\r\n          <Widget\r\n            src={src}\r\n            props={{\r\n              isTest,\r\n              stateUpdate,\r\n              libCalls,\r\n            }}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nconst prodAction = \"sayALotArticle\";\r\nconst testAction = `test_${prodAction}`;\r\nconst action = isTest ? testAction : prodAction;\r\n\r\nconst libCalls = [\r\n  {\r\n    functionName: \"getReactionsData\",\r\n    key: \"reactionsData\",\r\n    props: {\r\n      elementReactedId,\r\n      createdReaction: state.createReaction,\r\n    },\r\n  },\r\n];\r\n\r\nState.init({\r\n  emoji: undefined,\r\n  reactionsData: { reactionsStatistics: [], userReaction: undefined },\r\n  show: false,\r\n  loading: false,\r\n  libCalls,\r\n});\r\n\r\n// ========= UNFILTERED REACTIONS and SOCIAL.INDEX =========\r\n// const path = isTest ? \"test_reaction\" : \"reaction\";\r\n// const unfilteredReactions = Social.index(path, item, {\r\n//   order: \"desc\",\r\n// });\r\n\r\n// if (!unfilteredReactions) {\r\n//   return \"Loading...\";\r\n// }\r\n\r\n// ========= ARRAY LAST REACTION FOR EACH USER =========\r\n// arrayLastReactionForEachUser - array of objects {accountId, blockHeight, value: {type: \"\ud83d\ude01 LOL\"}}\r\n// const uniqueAccounts = [];\r\n// const arrayLastReactionForEachUser =\r\n//   unfilteredReactions &&\r\n//   unfilteredReactions.filter((obj) => {\r\n//     if (!uniqueAccounts.includes(obj.accountId)) {\r\n//       uniqueAccounts.push(obj.accountId);\r\n//       return true;\r\n//     }\r\n//     return false;\r\n//   });\r\n\r\n// ========= GET USER EMOJI =========\r\n// const userReaction = arrayLastReactionForEachUser.find((obj) => {\r\n//   return obj.accountId === accountThatIsLoggedIn;\r\n// });\r\n\r\n// // ========= GET REACTIONS STATISTICS =========\r\n// const getReactionStats = (acc, reactionObj) => {\r\n//   if (reactionObj.value.type === initialEmoji) {\r\n//     return acc;\r\n//   }\r\n//   if (!acc.hasOwnProperty(reactionObj.value.type)) {\r\n//     acc[reactionObj.value.type] = {\r\n//       quantity: 0,\r\n//       emoji: reactionObj.value.type.slice(0, 2),\r\n//       text: reactionObj.value.type.slice(2),\r\n//       accounts: [],\r\n//     };\r\n//     // acc[reactionObj.value.type].quantity = 0;\r\n//     // acc[reactionObj.value.type].emoji = reactionObj.value.type.slice(0, 2);\r\n//     // acc[reactionObj.value.type].accounts = [];\r\n//   }\r\n//   acc[reactionObj.value.type].quantity += 1;\r\n//   acc[reactionObj.value.type].accounts = [\r\n//     reactionObj.accountId,\r\n//     ...acc[reactionObj.value.type].accounts,\r\n//   ];\r\n\r\n//   return acc;\r\n// };\r\n// const countReactionsStats = (arr) =>\r\n//   Object.values(arr.reduce(getReactionStats, {}));\r\n// let reactionsStatistics =\r\n//   arrayLastReactionForEachUser &&\r\n//   countReactionsStats(arrayLastReactionForEachUser);\r\n// if (\r\n//   state.reactionsStatistics.length === 0 ||\r\n//   state.reactionsStatistics === null\r\n// ) {\r\n//   State.update({\r\n//     reactionsStatistics,\r\n//   });\r\n// }\r\n// //reactionsStatistics - array of objects {emoji: '\ud83d\ude01', quantity: 2, accounts: []}\r\n\r\n// // ========= CHECK DOES USER VOTED =========\r\n// const doesUserVoted = () => {\r\n//   const resObject = arrayLastReactionForEachUser.find(\r\n//     (item) => item.accountId === accountThatIsLoggedIn\r\n//   );\r\n//   return resObject;\r\n// };\r\n\r\n// ========= UPDATE EMOJI STATE IF USER VOTED SOMETIME BEFORE =========\r\n// function updateEmojiIfUserVoted() {\r\n//   const resObject = arrayLastReactionForEachUser.find(\r\n//     (item) => item.accountId === accountThatIsLoggedIn\r\n//   );\r\n//   if (resObject) {\r\n//     State.update({ emoji: resObject.value.type });\r\n//   }\r\n// }\r\n// state.emoji === undefined &&\r\n//   arrayLastReactionForEachUser &&\r\n//   updateEmojiIfUserVoted();\r\n\r\n// ========= UPDATE REACTION STATISTICS IF USER VOTED RIGHT NOW=========\r\nfunction updateReactionsStatisticsIfUserVoted(newEmoji) {\r\n  let currentReactionsStatistics = state.reactionsData.reactionsStatistics;\r\n  console.log(\"currentReactionsStatistics: \", currentReactionsStatistics);\r\n\r\n  const resObject = currentReactionsStatistics.find((item) =>\r\n    item.accounts.includes(accountThatIsLoggedIn)\r\n  );\r\n  console.log(\"resObject: \", resObject);\r\n\r\n  if (!resObject) {\r\n    currentReactionsStatistics = [\r\n      ...currentReactionsStatistics,\r\n      {\r\n        accountId: accountThatIsLoggedIn,\r\n        blockHeight: item.blockHeight,\r\n        value: { type: newEmoji },\r\n      },\r\n    ];\r\n  } else {\r\n    currentReactionsStatistics =\r\n      currentReactionsStatistics &&\r\n      currentReactionsStatistics.map((item) => {\r\n        if (item.accountId === accountThatIsLoggedIn) {\r\n          return { ...item, value: { type: newEmoji } };\r\n        }\r\n        return item;\r\n      });\r\n  }\r\n\r\n  function countReactionsStats(arr) {\r\n    return Object.values(arr.reduce(getReactionStats, {}));\r\n  }\r\n\r\n  let reactionsStatistics =\r\n    currentReactionsStatistics &&\r\n    countReactionsStats(currentReactionsStatistics);\r\n\r\n  console.log(reactionsStatistics);\r\n  State.update({\r\n    reactionsStatistics,\r\n    loading: false,\r\n    show: false,\r\n  });\r\n}\r\n\r\n// ================= Mouse Handlers ===============\r\n\r\nfunction handleOnMouseEnter() {\r\n  State.update({ show: true });\r\n}\r\n\r\nfunction handleOnMouseLeave() {\r\n  State.update({ show: false });\r\n}\r\n\r\nfunction onCommit() {\r\n  updateReactionsStatisticsIfUserVoted(emojiToWrite);\r\n}\r\n\r\nfunction onPushEnd() {\r\n  State.update({ loading: false, show: false });\r\n}\r\n\r\nfunction reactListener(emojiMessage) {\r\n  if (state.loading) {\r\n    return;\r\n  }\r\n  State.update({\r\n    loading: true,\r\n  });\r\n\r\n  // decide to put unique emoji or white heart (unreaction emoji)\r\n  const emojiToWrite =\r\n    emojiMessage === initialEmoji &&\r\n    state.reactionsData.userReaction.value.reaction === initialEmoji\r\n      ? emojiArray[0]\r\n      : emojiMessage;\r\n\r\n  const newLibCalls = [...state.libCalls];\r\n  newLibCalls.push({\r\n    functionName: \"createReaction\",\r\n    key: \"createReaction\",\r\n    props: {\r\n      elementReactedId,\r\n      reaction: emojiToWrite,\r\n      onCommit,\r\n      onCancel: onPushEnd,\r\n    },\r\n  });\r\n  State.update({ libCalls: newLibCalls });\r\n\r\n  // let data;\r\n\r\n  // if (isTest) {\r\n  //   data = {\r\n  //     index: {\r\n  //       test_reaction: JSON.stringify({\r\n  //         key: item,\r\n  //         value: {\r\n  //           type: emojiToWrite,\r\n  //         },\r\n  //       }),\r\n  //     },\r\n  //   };\r\n  // } else {\r\n  //   data = {\r\n  //     index: {\r\n  //       reaction: JSON.stringify({\r\n  //         key: item,\r\n  //         value: {\r\n  //           type: emojiToWrite,\r\n  //         },\r\n  //       }),\r\n  //     },\r\n  //   };\r\n  // // }\r\n\r\n  // Social.set(data, {\r\n  //   onCommit: () => {\r\n  //     updateReactionsStatisticsIfUserVoted(emojiToWrite);\r\n  //     State.update({ emoji: emojiToWrite, loading: false, show: false });\r\n  //   },\r\n  //   onCancel: () => State.update({ loading: false, show: false }),\r\n  // });\r\n}\r\n\r\nfunction reactionsStateUpdate(obj) {\r\n  State.update(obj);\r\n}\r\n\r\nfunction showWhenCalled(objText) {\r\n  return state.showReactionsListModal == objText\r\n    ? { display: \"block\", backdropFilter: \"blur(3px)\", cursor: \"auto\" }\r\n    : {};\r\n}\r\n\r\n// =============== CSS Styles ===============\r\nconst Button = styled.button`\r\n  min-width: fit-content;\r\n  background: transparent;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: start;\r\n  height: 2.5em;\r\n  padding: 6px 12px;\r\n  margin: 2px 0;\r\n  border: 0;\r\n  border-radius: .375rem;\r\n  :hover {\r\n    background: #EBEBEB; \r\n    outline: 1px solid #C6C7C8;\r\n  }\r\n`;\r\n\r\nconst SmallReactButton = styled.button`\r\n  background: transparent;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: start;\r\n  width: fit-content;\r\n  height: 2.5em;\r\n  padding: 6px 12px;\r\n  margin: 2px 0;\r\n  border: 0;\r\n  border-radius: .375rem;\r\n  :hover {\r\n    background: #EBEBEB; \r\n    outline: 1px solid #C6C7C8;\r\n  }\r\n`;\r\n\r\nconst SmallButton = styled.button`\r\nposition: relative;\r\n  border: 0;\r\n  background: transparent;\r\n  width: 35px;\r\n  height: 35px;\r\n  color: ${({ isHeart }) => (isHeart ? \"red\" : \"\")};\r\n`;\r\n\r\nconst SmallButtonSpan = styled.span`\r\n  font-size: 19px;\r\n  :hover{\r\n      position: absolute;\r\n      font-size: 35px;\r\n      bottom: -5px;\r\n      width: 35px;\r\n      height: 40px;\r\n      transform: translateX(-50%) translateY(-50%);\r\n  }\r\n  \r\n  @media (max-width: 599px) {\r\n      ::before { \r\n          position: absolute;\r\n          width: 100%;\r\n          height: 100%;\r\n          background-color: rgba(255, 255, 255, .4);\r\n          content: \"\";}\r\n      :hover{\r\n      ::before { \r\n          position: absolute;\r\n          width: 100%;\r\n          height: 120%;\r\n          background-color: rgba(255, 255, 255, .4);\r\n          content: \"\";}\r\n  }\r\n      \r\n  }\r\n`;\r\n\r\n// =============== NEW CSS Styles ===============!!!!!!!!\r\nconst EmojiWrapper = styled.div`\r\n  display: inline-block;\r\n  position: relative;\r\n  overflow: visible !important;\r\n  padding-left: 8px;\r\n`;\r\n\r\nconst EmojiListWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  padding: 0.5rem;\r\n  \r\n  background: white;\r\n  border-radius: 1rem;\r\n  box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15) !important;\r\n  position: absolute;\r\n  right: 0;\r\n  width: 370px;\r\n  max-width: 35vw;\r\n  flex-wrap: wrap;\r\n  display: ${({ show }) => (show ? \"flex\" : \"none\")};\r\n  transform: translateY(-10%);\r\n  zIndex: 2;\r\n`;\r\n\r\nconst SpinnerContainer = styled.div`\r\n  height: 1rem;\r\n  width: 1rem;\r\n  marginTop: 2px;\r\n`;\r\n\r\nconst CallLibrary = styled.div`\r\n  display: none;\r\n`;\r\n\r\n// =============== NEW JSX ===============!!!!!!!!\r\nconst Overlay = () => {\r\n  return (\r\n    <EmojiListWrapper\r\n      onMouseEnter={handleOnMouseEnter}\r\n      onMouseLeave={handleOnMouseLeave}\r\n      show={state.show}\r\n    >\r\n      {emojiArray &&\r\n        emojiArray.map((item) => {\r\n          return (\r\n            <SmallButton\r\n              onClick={() => reactListener(item)}\r\n              isHeart={index === 0}\r\n            >\r\n              <OverlayTrigger\r\n                placement=\"top\"\r\n                overlay={\r\n                  <Tooltip>\r\n                    <div className=\"text-truncate text-start\">\r\n                      {item.slice(2)}\r\n                    </div>\r\n                  </Tooltip>\r\n                }\r\n              >\r\n                <SmallButtonSpan>{item.slice(0, 2)}</SmallButtonSpan>\r\n              </OverlayTrigger>\r\n            </SmallButton>\r\n          );\r\n        })}\r\n    </EmojiListWrapper>\r\n  );\r\n};\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <SpinnerContainer className=\"spinner-border text-secondary\" role=\"status\">\r\n      <span className=\"sr-only\" title=\"Loading...\"></span>\r\n    </SpinnerContainer>\r\n  );\r\n};\r\n\r\nconst renderReaction = (item, isInButton) => {\r\n  return (\r\n    ((item.accounts.includes(context.accountId) && isInButton) ||\r\n      (!item.accounts.includes(context.accountId) && !isInButton)) && (\r\n      <span>\r\n        <Widget\r\n          className={isInButton ? \"ps-3\" : \"\"}\r\n          src={`testwiki.near/widget/WikiOnSocialDB_TooltipProfiles`}\r\n          props={{ accounts: item.accounts, emoji: item.emoji }}\r\n        />\r\n      </span>\r\n    )\r\n  );\r\n};\r\n\r\nreturn (\r\n  <>\r\n    <EmojiWrapper>\r\n      {!state.reactionsData.userReaction ? (\r\n        <Button\r\n          onMouseEnter={handleOnMouseEnter}\r\n          onMouseLeave={handleOnMouseLeave}\r\n        >\r\n          {state.loading && <Spinner />}\r\n          {initialEmoji}\r\n        </Button>\r\n      ) : (\r\n        <SmallReactButton\r\n          onMouseEnter={handleOnMouseEnter}\r\n          onMouseLeave={handleOnMouseLeave}\r\n        >\r\n          {state.loading && <Spinner />}\r\n          {state.reactionsData.reactionsStatistics &&\r\n            state.reactionsData.reactionsStatistics.map((item) =>\r\n              renderReaction(item, true)\r\n            )}\r\n        </SmallReactButton>\r\n      )}\r\n      <Overlay />\r\n      {state.reactionsData.reactionsStatistics &&\r\n        state.reactionsData.reactionsStatistics.map((item) =>\r\n          renderReaction(item, false)\r\n        )}\r\n    </EmojiWrapper>\r\n\r\n    <CallLibrary>\r\n      {callLibs(\r\n        libSrcArray,\r\n        reactionsStateUpdate,\r\n        state.libCalls,\r\n        initialEmoji\r\n      )}\r\n    </CallLibrary>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/NDC.Reactions", "fact_widget_deployments_id": "785111d4f496e7010be123f49218685a", "inserted_timestamp": "2023-08-17T15:47:38.124Z", "modified_timestamp": "2023-08-17T15:47:38.124Z", "__row_index": 61}