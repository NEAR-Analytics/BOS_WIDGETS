{"tx_hash": "hGJzLAxYmbKsUdbyioDpTSXCzsT8DUBLRBHkotTr6jc", "action_id_social": "3LmbafuTN58kRrrN1vCGBct9E2VqRrpQtmzaKwQPwTVx-0-widget", "block_id": 94265692, "block_timestamp": "2023-06-15T21:32:49.366Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "EasyPoll.DisplayMultiVote2", "source_code": "State.init({ currentQuestion: 0 });\r\n\r\nconst getFirstSBTToken = () => {\r\n  const view = Near.view(\"registry.i-am-human.near\", \"sbt_tokens_by_owner\", {\r\n    account: `${context.accountId}`,\r\n    issuer: \"fractal.i-am-human.near\",\r\n  });\r\n  return view?.[0]?.[1]?.[0];\r\n};\r\n\r\nconst hasSBTTokens = true || getFirstSBTToken() !== undefined;\r\n\r\nconst renderTextInput = (questionNumber) => {\r\n  return (\r\n    <div>\r\n      {props.hasVoted ? (\r\n        <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(2,1fr)\" }}>\r\n          <Widget\r\n            src={`${widgetOwner}/widget/EasyPoll.AnswerCommentsContainer`}\r\n            props={{\r\n              answers: props.validAnswersToThisPoll,\r\n              questionNumber,\r\n            }}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <textarea\r\n            value={props.state.vote[questionNumber]}\r\n            onChange={(e) => {\r\n              let newVote = props.state.vote;\r\n              newVote[questionNumber] = e.target.value;\r\n\r\n              props.stateUpdate({ vote: newVote });\r\n            }}\r\n            style={{ width: \"100%\" }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nreturn (\r\n  <>\r\n    {props.poll.value.questions.map((question, questionNumber) => {\r\n      if (state.currentQuestion == questionNumber) {\r\n        return (\r\n          <div\r\n            style={{\r\n              border: \"1.5px solid rgb(206, 212, 218)\",\r\n              borderRadius: \"24px\",\r\n              position: \"relative\",\r\n            }}\r\n            className=\"p-3 my-3\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <p\r\n                style={{\r\n                  backgroundColor: \"#353A40\",\r\n                  padding: \"0.15rem 0.65rem\",\r\n                  borderRadius: \"9px\",\r\n                  color: \"white\",\r\n                }}\r\n              >\r\n                {questionNumber + 1}\r\n              </p>\r\n              <h4 style={{ fontWeight: \"700\", marginLeft: \"0.8rem\" }}>\r\n                {question.question}\r\n              </h4>\r\n            </div>\r\n\r\n            {!props.hasVoted &&\r\n            (question.questionType == \"0\" || question.questionType == \"1\") ? (\r\n              <p className=\"mb-1\">Select one option:</p>\r\n            ) : !props.hasVoted && question.questionType == \"2\" ? (\r\n              <p className=\"mb-1\">You can check multiple options:</p>\r\n            ) : (\r\n              !props.hasVoted && <p className=\"mb-1\">Write your answer:</p>\r\n            )}\r\n            {question.questionType != \"3\"\r\n              ? question.choicesOptions.map((option, optionNumber) => {\r\n                  return (\r\n                    <Widget\r\n                      src={`${widgetOwner}/widget/EasyPoll.DisplayMultiVote`}\r\n                      props={{\r\n                        state: props.state,\r\n                        questionNumber,\r\n                        questionType,\r\n                        option,\r\n                        optionNumber,\r\n                        canVote: props.canVote,\r\n                        getBgColor: props.getBgColor,\r\n                        getFontColor: props.getFontColor,\r\n                        countVotes: props.countVotes,\r\n                        getBorderRadious: props.getBorderRadious,\r\n                        calculatePercentageOfOption:\r\n                          props.calculatePercentageOfOption,\r\n                        getBlockTimestamp: props.getBlockTimestamp,\r\n                        clickCheckboxInputHandler:\r\n                          props.clickCheckboxInputHandler,\r\n                        clickRadioInputHandler: props.clickRadioInputHandler,\r\n                        getInputStyles: props.getInputStyles,\r\n                      }}\r\n                    />\r\n                  );\r\n                })\r\n              : props.renderTextInput(questionNumber)}\r\n          </div>\r\n        );\r\n      } else {\r\n        return <></>;\r\n      }\r\n    })}\r\n\r\n    {props.poll.value.questions.length > 1 && (\r\n      <div className=\"d-flex justify-content-between\">\r\n        {state.currentQuestion > 0 ? (\r\n          <div\r\n            className=\"d-flex aling-items-center\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              State.update({ currentQuestion: state.currentQuestion - 1 });\r\n            }}\r\n          >\r\n            <i className=\"bi bi-arrow-left\" />\r\n            <h6 className=\"mx-2\">Previous question</h6>\r\n          </div>\r\n        ) : (\r\n          <div style={{ minWidth: \"1px\" }}></div>\r\n        )}\r\n        {state.currentQuestion < props.poll.value.questions.length ? (\r\n          <div\r\n            className=\"d-flex aling-items-center\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              State.update({ currentQuestion: state.currentQuestion + 1 });\r\n            }}\r\n          >\r\n            <h6 className=\"mx-2\">Next question</h6>\r\n            <i className=\"bi bi-arrow-right\" />\r\n          </div>\r\n        ) : (\r\n          <div style={{ minWidth: \"1px\" }}></div>\r\n        )}\r\n      </div>\r\n    )}\r\n\r\n    {props.isQuestionOpen ? (\r\n      props.hasVoted ? (\r\n        \"\"\r\n      ) : props.isVoteValid() && hasSBTTokens ? (\r\n        <CommitButton\r\n          className=\"w-100\"\r\n          style={\r\n            props.state.hoveringElement != \"voteButton\"\r\n              ? {\r\n                  marginTop: \"0.5rem\",\r\n                  padding: \"0.5rem\",\r\n                  backgroundColor: \"#000000\",\r\n                  color: \"#FFFFFF\",\r\n                  fontSize: \"1rem\",\r\n                  borderRadius: \"9px\",\r\n                  border: \"1.5px solid transparent\",\r\n                }\r\n              : {\r\n                  marginTop: \"0.5rem\",\r\n                  padding: \"0.5rem\",\r\n                  backgroundColor: \"#FFFFFF\",\r\n                  color: \"#000000\",\r\n                  fontSize: \"1rem\",\r\n                  borderRadius: \"9px\",\r\n                  border: \"1.5px solid #000000\",\r\n                }\r\n          }\r\n          onMouseEnter={() =>\r\n            props.stateUpdate({ hoveringElement: \"voteButton\" })\r\n          }\r\n          onMouseLeave={() => props.stateUpdate({ hoveringElement: \"\" })}\r\n          data={props.getPublicationParams()}\r\n        >\r\n          Vote\r\n        </CommitButton>\r\n      ) : (\r\n        <>\r\n          {hasSBTTokens ? (\r\n            <button\r\n              className=\"w-100\"\r\n              style={\r\n                props.state.hoveringElement != \"voteButton\"\r\n                  ? {\r\n                      marginTop: \"0.5rem\",\r\n                      padding: \"0.5rem\",\r\n                      backgroundColor: \"#000000\",\r\n                      color: \"#FFFFFF\",\r\n                      fontSize: \"1rem\",\r\n                      borderRadius: \"9px\",\r\n                      border: \"1.5px solid transparent\",\r\n                    }\r\n                  : {\r\n                      marginTop: \"0.5rem\",\r\n                      padding: \"0.5rem\",\r\n                      backgroundColor: \"#FFFFFF\",\r\n                      color: \"#000000\",\r\n                      fontSize: \"1rem\",\r\n                      borderRadius: \"9px\",\r\n                      border: \"1.5px solid #000000\",\r\n                    }\r\n              }\r\n              onMouseEnter={() =>\r\n                props.stateUpdate({ hoveringElement: \"voteButton\" })\r\n              }\r\n              onMouseLeave={() => props.stateUpdate({ hoveringElement: \"\" })}\r\n              onClick={() => props.stateUpdate({ showErrorsInForm: true })}\r\n            >\r\n              Vote\r\n            </button>\r\n          ) : (\r\n            <>\r\n              <p className=\"p-2\">\r\n                In order to vote get verified on{\" \"}\r\n                <a href=\"https://i-am-human.app\">i-am-human.app</a> and get a FV\r\n                SBT\r\n              </p>\r\n            </>\r\n          )}\r\n          {props.state.showErrorsInForm && (\r\n            <span className=\"text-danger\">Please answer all the questions</span>\r\n          )}\r\n        </>\r\n      )\r\n    ) : (\r\n      \"\"\r\n    )}\r\n    <p\r\n      style={{\r\n        fontWeight: \"500\",\r\n        fontSize: \"1.1rem\",\r\n        color: \"#767B8E\",\r\n        letterSpacing: \"-0.02em\",\r\n        marginTop: \"0.8rem\",\r\n      }}\r\n    >\r\n      {props.validAnswersToThisPoll.length} votes\r\n    </p>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/EasyPoll.DisplayMultiVote2", "fact_widget_deployments_id": "ad75935d7eb9de562823cfc7692795e1", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 50}