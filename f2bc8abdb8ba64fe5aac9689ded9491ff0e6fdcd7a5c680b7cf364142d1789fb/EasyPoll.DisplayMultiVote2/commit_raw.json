{"tx_hash": "5yN3ztaycyzKokESabgGPRjd3a2Wb2MypSR5QmFcCeN4", "action_id_social": "Geny6WqQqeXqixQp7rvAxnG7t5oGhcynkjvCXNCUwPbQ-0-widget", "block_id": 94331920, "block_timestamp": "2023-06-16T19:21:40.360Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "EasyPoll.DisplayMultiVote2", "source_code": "State.init({\r\n  currentQuestion: 0,\r\n  vote: props.vote,\r\n  showErrorsInForm: false,\r\n  validAnswersToThisPoll: props.validAnswersToThisPoll,\r\n  hasVoted: props.hasVoted,\r\n});\r\n\r\nlet hasVoted = state.hasVoted;\r\nlet validAnswersToThisPoll = state.validAnswersToThisPoll;\r\n\r\nconst isTest = props.isTest;\r\n\r\nlet widgetOwner = props.widgetOwner;\r\n\r\nfunction newValidAnswers() {\r\n  let newAnswers;\r\n  if (validAnswersToThisPoll) {\r\n    validAnswersToThisPoll.push({\r\n      accountId: context.accountId,\r\n      blockHeight: 1,\r\n      value: {\r\n        answer: props.vote,\r\n        questionBlockHeight: props.poll.blockHeight,\r\n      },\r\n    });\r\n    newAnswers = validAnswersToThisPoll;\r\n  } else {\r\n    newAnswers = {\r\n      accountId: context.accountId,\r\n      blockHeight: 1,\r\n      value: {\r\n        answer: props.vote,\r\n        questionBlockHeight: props.poll.blockHeight,\r\n      },\r\n    };\r\n  }\r\n\r\n  return newAnswers;\r\n}\r\n\r\n//TODO review this!\r\nconst getPublicationParams = () => {\r\n  return {\r\n    index: {\r\n      poll_question: JSON.stringify(\r\n        {\r\n          key: isTest\r\n            ? `test-answer-v${props.indexVersion}`\r\n            : `answer-v${props.indexVersion}`,\r\n          value: {\r\n            answer: props.vote,\r\n            questionBlockHeight: props.poll.blockHeight,\r\n          },\r\n        },\r\n        undefined,\r\n        0\r\n      ),\r\n    },\r\n  };\r\n};\r\n\r\nfunction clickCheckboxInputHandler(questionNumber, optionNumber) {\r\n  return () => {\r\n    let newVote = state.vote;\r\n\r\n    let oldQuestionVotes = newVote[questionNumber];\r\n    let newQuestionVotes = [];\r\n\r\n    if (!oldQuestionVotes.includes(optionNumber + \"\")) {\r\n      newQuestionVotes = oldQuestionVotes;\r\n      newQuestionVotes.push(optionNumber + \"\");\r\n    } else {\r\n      for (let i = 0; i < oldQuestionVotes.length; i++) {\r\n        if (oldQuestionVotes[i] != optionNumber + \"\") {\r\n          newQuestionVotes.push(oldQuestionVotes[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    newVote[questionNumber] = newQuestionVotes.filter((a) => a != \"\");\r\n\r\n    State.update({ votes: newVote });\r\n  };\r\n}\r\n\r\nfunction clickRadioInputHandler(questionNumber, optionNumber) {\r\n  return () => {\r\n    let newVote = props.vote;\r\n\r\n    newVote[questionNumber] = optionNumber + \"\";\r\n    State.update({ vote: newVote });\r\n  };\r\n}\r\n\r\nconst renderMultipleChoiceInput = ({\r\n  questionNumber,\r\n  questionType,\r\n  option,\r\n  optionNumber,\r\n}) => (\r\n  <>\r\n    <Widget\r\n      src={`f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/EasyPoll.DisplayMultiVote`}\r\n      props={{\r\n        vote: state.vote,\r\n        questionNumber,\r\n        questionType,\r\n        option,\r\n        optionNumber,\r\n        canVote: !hasVoted,\r\n        getBgColor: props.getBgColor,\r\n        countVotes: props.countVotes,\r\n        clickRadioInputHandler: clickRadioInputHandler,\r\n        clickCheckboxInputHandler: clickCheckboxInputHandler,\r\n        getInputStyles: props.getInputStyles,\r\n      }}\r\n    />\r\n  </>\r\n);\r\n\r\nconst renderAnswers = (questionNumber) => {\r\n  return (\r\n    <Widget\r\n      src={`f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/EasyPoll.AnswerCommentsContainer`}\r\n      props={{\r\n        answers: validAnswersToThisPoll,\r\n        questionNumber,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nlet questions = props.questions;\r\n\r\nconst ChangeQuestionContainer = styled.div`\r\n  div {\r\n    cursor: pointer;\r\n    display: flex;\r\n    aling-items: center;\r\n  }\r\n\r\n  div:hover {\r\n    transform: scale(1.1);\r\n  }\r\n`;\r\n\r\nconst getFirstSBTToken = () => {\r\n  const view = Near.view(\"registry.i-am-human.near\", \"sbt_tokens_by_owner\", {\r\n    account: `${context.accountId}`,\r\n    issuer: \"fractal.i-am-human.near\",\r\n  });\r\n  return view?.[0]?.[1]?.[0];\r\n};\r\n\r\nconst hasSBTTokens = true || getFirstSBTToken() !== undefined;\r\n\r\nconst renderTextInput = (questionNumber) => {\r\n  return (\r\n    <div>\r\n      {hasVoted ? (\r\n        <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(2,1fr)\" }}>\r\n          {renderAnswers(questionNumber)}\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <textarea\r\n            value={state.vote[questionNumber]}\r\n            onChange={(e) => {\r\n              let newVote = state.vote;\r\n              newVote[questionNumber] = e.target.value;\r\n\r\n              State.update({ vote: newVote });\r\n            }}\r\n            style={{ width: \"100%\" }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nreturn (\r\n  <>\r\n    {hasVoted && <h6 className=\"text-center mt-3\">You have voted</h6>}\r\n    {questions.map((question, questionNumber) => {\r\n      {\r\n        if (questionNumber == state.currentQuestion) {\r\n          return (\r\n            <div\r\n              style={{\r\n                border: \"1.5px solid rgb(206, 212, 218)\",\r\n                borderRadius: \"24px\",\r\n                position: \"relative\",\r\n              }}\r\n              className=\"p-3 my-3\"\r\n            >\r\n              <div className=\"d-flex\">\r\n                <p\r\n                  style={{\r\n                    backgroundColor: \"#353A40\",\r\n                    padding: \"0.15rem 0.65rem\",\r\n                    borderRadius: \"9px\",\r\n                    color: \"white\",\r\n                  }}\r\n                >\r\n                  {questionNumber + 1}\r\n                </p>\r\n                <h4 style={{ fontWeight: \"700\", marginLeft: \"0.8rem\" }}>\r\n                  {question.question}\r\n                </h4>\r\n              </div>\r\n\r\n              {!hasVoted &&\r\n              (question.questionType == \"0\" || question.questionType == \"1\") ? (\r\n                <p className=\"mb-1\">Select one option:</p>\r\n              ) : !hasVoted && question.questionType == \"2\" ? (\r\n                <p className=\"mb-1\">You can check multiple options:</p>\r\n              ) : (\r\n                !hasVoted && <p className=\"mb-1\">Write your answer:</p>\r\n              )}\r\n              {question.questionType != \"3\"\r\n                ? question.choicesOptions.map((option, optionNumber) => {\r\n                    return renderMultipleChoiceInput({\r\n                      questionNumber: questionNumber,\r\n                      questionType: question.questionType,\r\n                      option,\r\n                      optionNumber,\r\n                      clickRadioInputHandler,\r\n                    });\r\n                  })\r\n                : renderTextInput(questionNumber)}\r\n            </div>\r\n          );\r\n        } else <></>;\r\n      }\r\n    })}\r\n\r\n    {questions.length > 1 && (\r\n      <div className=\"d-flex justify-content-between\">\r\n        {state.currentQuestion > 0 ? (\r\n          <ChangeQuestionContainer\r\n            onClick={() => {\r\n              State.update({ currentQuestion: state.currentQuestion - 1 });\r\n            }}\r\n          >\r\n            <div>\r\n              <i className=\"bi bi-arrow-left\" />\r\n              <h6 className=\"mx-2\">Previous question</h6>\r\n            </div>\r\n          </ChangeQuestionContainer>\r\n        ) : (\r\n          <div style={{ minWidth: \"1px\" }}></div>\r\n        )}\r\n        {state.currentQuestion < questions.length - 1 ? (\r\n          <ChangeQuestionContainer\r\n            onClick={() => {\r\n              State.update({ currentQuestion: state.currentQuestion + 1 });\r\n            }}\r\n          >\r\n            <div>\r\n              <h6 className=\"mx-2\">Next question</h6>\r\n              <i className=\"bi bi-arrow-right\" />\r\n            </div>\r\n          </ChangeQuestionContainer>\r\n        ) : (\r\n          <div style={{ minWidth: \"1px\" }}></div>\r\n        )}\r\n      </div>\r\n    )}\r\n\r\n    {props.isQuestionOpen ? (\r\n      hasVoted ? (\r\n        \"\"\r\n      ) : props.isVoteValid() && hasSBTTokens ? (\r\n        <CommitButton\r\n          className=\"w-100\"\r\n          style={\r\n            state.hoveringElement != \"voteButton\"\r\n              ? {\r\n                  marginTop: \"0.5rem\",\r\n                  padding: \"0.5rem\",\r\n                  backgroundColor: \"#000000\",\r\n                  color: \"#FFFFFF\",\r\n                  fontSize: \"1rem\",\r\n                  borderRadius: \"9px\",\r\n                  border: \"1.5px solid transparent\",\r\n                }\r\n              : {\r\n                  marginTop: \"0.5rem\",\r\n                  padding: \"0.5rem\",\r\n                  backgroundColor: \"#FFFFFF\",\r\n                  color: \"#000000\",\r\n                  fontSize: \"1rem\",\r\n                  borderRadius: \"9px\",\r\n                  border: \"1.5px solid #000000\",\r\n                }\r\n          }\r\n          onMouseEnter={() => {\r\n            State.update({\r\n              hoveringElement: \"voteButton\",\r\n            });\r\n          }}\r\n          onMouseLeave={() => State.update({ hoveringElement: \"\" })}\r\n          data={getPublicationParams()}\r\n          onCommit={() => {\r\n            State.update({\r\n              validAnswersToThisPoll: newValidAnswers(),\r\n              hasVoted: true,\r\n            });\r\n          }}\r\n        >\r\n          Vote\r\n        </CommitButton>\r\n      ) : (\r\n        <>\r\n          {hasSBTTokens ? (\r\n            <button\r\n              className=\"w-100\"\r\n              style={\r\n                state.hoveringElement != \"voteButton\"\r\n                  ? {\r\n                      marginTop: \"0.5rem\",\r\n                      padding: \"0.5rem\",\r\n                      backgroundColor: \"#000000\",\r\n                      color: \"#FFFFFF\",\r\n                      fontSize: \"1rem\",\r\n                      borderRadius: \"9px\",\r\n                      border: \"1.5px solid transparent\",\r\n                    }\r\n                  : {\r\n                      marginTop: \"0.5rem\",\r\n                      padding: \"0.5rem\",\r\n                      backgroundColor: \"#FFFFFF\",\r\n                      color: \"#000000\",\r\n                      fontSize: \"1rem\",\r\n                      borderRadius: \"9px\",\r\n                      border: \"1.5px solid #000000\",\r\n                    }\r\n              }\r\n              onMouseEnter={() =>\r\n                State.update({ hoveringElement: \"voteButton\" })\r\n              }\r\n              onMouseLeave={() => State.update({ hoveringElement: \"\" })}\r\n              onClick={() => State.update({ showErrorsInForm: true })}\r\n            >\r\n              Vote\r\n            </button>\r\n          ) : (\r\n            <>\r\n              <p className=\"p-2\">\r\n                In order to vote get verified on{\" \"}\r\n                <a href=\"https://i-am-human.app\">i-am-human.app</a> and get a FV\r\n                SBT\r\n              </p>\r\n            </>\r\n          )}\r\n          {state.showErrorsInForm && (\r\n            <span className=\"text-danger\">Please answer all the questions</span>\r\n          )}\r\n        </>\r\n      )\r\n    ) : (\r\n      \"\"\r\n    )}\r\n    <p\r\n      style={{\r\n        fontWeight: \"500\",\r\n        fontSize: \"1.1rem\",\r\n        color: \"#767B8E\",\r\n        letterSpacing: \"-0.02em\",\r\n        marginTop: \"0.8rem\",\r\n      }}\r\n    >\r\n      {validAnswersToThisPoll.length} votes\r\n    </p>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/EasyPoll.DisplayMultiVote2", "fact_widget_deployments_id": "d972e5cdde503d25dc4eb2d364075e47", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 10}