{"tx_hash": "8JpP7fY1pvW5d7v5DSTSwXjuFSfPFCr8FLjwKpz8B2MR", "action_id_social": "4tsc1cFZwaAaqWxJJvoeectDFLUNgXrX79Mx4QF8wHSr-0-widget", "block_id": 94278256, "block_timestamp": "2023-06-16T01:36:08.591Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "EasyPoll.DisplayMultiVote2", "source_code": "State.init({\n  currentQuestion: 0,\n  vote: props.vote,\n  showErrorsInForm: false,\n});\n\n//TODO review this!\nconst getPublicationParams = () => {\n  return {\n    index: {\n      poll_question: JSON.stringify(\n        {\n          key: `answer-v${props.indexVersion}`,\n          value: {\n            answer: props.vote,\n            questionBlockHeight: props.poll.blockHeight,\n          },\n        },\n        undefined,\n        0\n      ),\n    },\n  };\n};\n\nfunction clickCheckboxInputHandler(questionNumber, optionNumber) {\n  return () => {\n    let newVote = state.vote;\n\n    let oldQuestionVotes = newVote[questionNumber];\n    let newQuestionVotes = [];\n\n    if (!oldQuestionVotes.includes(optionNumber + \"\")) {\n      newQuestionVotes = oldQuestionVotes;\n      newQuestionVotes.push(optionNumber + \"\");\n    } else {\n      for (let i = 0; i < oldQuestionVotes.length; i++) {\n        if (oldQuestionVotes[i] != optionNumber + \"\") {\n          newQuestionVotes.push(oldQuestionVotes[i]);\n        }\n      }\n    }\n\n    newVote[questionNumber] = newQuestionVotes.filter((a) => a != \"\");\n\n    State.update({ votes: newVote });\n  };\n}\n\nfunction clickRadioInputHandler(questionNumber, optionNumber) {\n  return () => {\n    let newVote = props.vote;\n\n    newVote[questionNumber] = optionNumber + \"\";\n    State.update({ vote: newVote });\n  };\n}\n\nconst renderMultipleChoiceInput = ({\n  questionNumber,\n  questionType,\n  option,\n  optionNumber,\n}) => (\n  <>\n    <Widget\n      src={`f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/EasyPoll.DisplayMultiVote`}\n      props={{\n        vote: props.vote,\n        questionNumber,\n        questionType,\n        option,\n        optionNumber,\n        canVote: props.canVote,\n        getBgColor: props.getBgColor,\n        countVotes: props.countVotes,\n        clickRadioInputHandler: clickRadioInputHandler,\n        clickCheckboxInputHandler: clickCheckboxInputHandler,\n        getInputStyles: props.getInputStyles,\n      }}\n    />\n  </>\n);\n\nconst renderAnswers = (questionNumber) => {\n  return (\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.AnswerCommentsContainer`}\n      props={{\n        answers: props.validAnswersToThisPoll,\n        questionNumber,\n      }}\n    />\n  );\n};\n\nlet questions = props.questions;\n\nconst ChangeQuestionContainer = styled.div`\n  div {\n    cursor: pointer;\n    display: flex;\n    aling-items: center;\n  }\n\n  div:hover {\n    transform: scale(1.1);\n  }\n`;\n\nconsole.log(\"CPVS: \", props.vote);\nconsole.log(\"TS: \", state);\n\nconst getFirstSBTToken = () => {\n  const view = Near.view(\"registry.i-am-human.near\", \"sbt_tokens_by_owner\", {\n    account: `${context.accountId}`,\n    issuer: \"fractal.i-am-human.near\",\n  });\n  return view?.[0]?.[1]?.[0];\n};\n\nconst hasSBTTokens = true || getFirstSBTToken() !== undefined;\n\nconst renderTextInput = (questionNumber) => {\n  return (\n    <div>\n      {props.hasVoted ? (\n        <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(2,1fr)\" }}>\n          {renderAnswers(questionNumber)}\n        </div>\n      ) : (\n        <div>\n          <textarea\n            value={state.vote[questionNumber]}\n            onChange={(e) => {\n              let newVote = state.vote;\n              newVote[questionNumber] = e.target.value;\n\n              State.update({ vote: newVote });\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nreturn (\n  <>\n    {questions.map((question, questionNumber) => {\n      {\n        if (questionNumber == state.currentQuestion) {\n          return (\n            <div\n              style={{\n                border: \"1.5px solid rgb(206, 212, 218)\",\n                borderRadius: \"24px\",\n                position: \"relative\",\n              }}\n              className=\"p-3 my-3\"\n              onMouseLeave={() => props.stateUpdate({ vote: state.vote })}\n            >\n              <div className=\"d-flex\">\n                <p\n                  style={{\n                    backgroundColor: \"#353A40\",\n                    padding: \"0.15rem 0.65rem\",\n                    borderRadius: \"9px\",\n                    color: \"white\",\n                  }}\n                >\n                  {questionNumber + 1}\n                </p>\n                <h4 style={{ fontWeight: \"700\", marginLeft: \"0.8rem\" }}>\n                  {question.question}\n                </h4>\n              </div>\n\n              {!props.hasVoted &&\n              (question.questionType == \"0\" || question.questionType == \"1\") ? (\n                <p className=\"mb-1\">Select one option:</p>\n              ) : !props.hasVoted && question.questionType == \"2\" ? (\n                <p className=\"mb-1\">You can check multiple options:</p>\n              ) : (\n                !props.hasVoted && <p className=\"mb-1\">Write your answer:</p>\n              )}\n              {question.questionType != \"3\"\n                ? question.choicesOptions.map((option, optionNumber) => {\n                    return renderMultipleChoiceInput({\n                      questionNumber: questionNumber,\n                      questionType: question.questionType,\n                      option,\n                      optionNumber,\n                    });\n                  })\n                : renderTextInput(questionNumber)}\n            </div>\n          );\n        } else <></>;\n      }\n    })}\n\n    {questions.length > 1 && (\n      <div className=\"d-flex justify-content-between\">\n        {state.currentQuestion > 0 ? (\n          <ChangeQuestionContainer\n            onClick={() => {\n              State.update({ currentQuestion: state.currentQuestion - 1 });\n            }}\n          >\n            <div>\n              <i className=\"bi bi-arrow-left\" />\n              <h6 className=\"mx-2\">Previous question</h6>\n            </div>\n          </ChangeQuestionContainer>\n        ) : (\n          <div style={{ minWidth: \"1px\" }}></div>\n        )}\n        {state.currentQuestion < questions.length - 1 ? (\n          <ChangeQuestionContainer\n            onClick={() => {\n              State.update({ currentQuestion: state.currentQuestion + 1 });\n            }}\n          >\n            <div>\n              <h6 className=\"mx-2\">Next question</h6>\n              <i className=\"bi bi-arrow-right\" />\n            </div>\n          </ChangeQuestionContainer>\n        ) : (\n          <div style={{ minWidth: \"1px\" }}></div>\n        )}\n      </div>\n    )}\n\n    {props.isQuestionOpen ? (\n      props.hasVoted ? (\n        \"\"\n      ) : props.isVoteValid() && hasSBTTokens ? (\n        <CommitButton\n          className=\"w-100\"\n          style={\n            state.hoveringElement != \"voteButton\"\n              ? {\n                  marginTop: \"0.5rem\",\n                  padding: \"0.5rem\",\n                  backgroundColor: \"#000000\",\n                  color: \"#FFFFFF\",\n                  fontSize: \"1rem\",\n                  borderRadius: \"9px\",\n                  border: \"1.5px solid transparent\",\n                }\n              : {\n                  marginTop: \"0.5rem\",\n                  padding: \"0.5rem\",\n                  backgroundColor: \"#FFFFFF\",\n                  color: \"#000000\",\n                  fontSize: \"1rem\",\n                  borderRadius: \"9px\",\n                  border: \"1.5px solid #000000\",\n                }\n          }\n          onMouseEnter={() => {\n            State.update({\n              hoveringElement: \"voteButton\",\n            });\n          }}\n          onMouseLeave={() => State.update({ hoveringElement: \"\" })}\n          data={getPublicationParams()}\n        >\n          Vote\n        </CommitButton>\n      ) : (\n        <>\n          {hasSBTTokens ? (\n            <button\n              className=\"w-100\"\n              style={\n                state.hoveringElement != \"voteButton\"\n                  ? {\n                      marginTop: \"0.5rem\",\n                      padding: \"0.5rem\",\n                      backgroundColor: \"#000000\",\n                      color: \"#FFFFFF\",\n                      fontSize: \"1rem\",\n                      borderRadius: \"9px\",\n                      border: \"1.5px solid transparent\",\n                    }\n                  : {\n                      marginTop: \"0.5rem\",\n                      padding: \"0.5rem\",\n                      backgroundColor: \"#FFFFFF\",\n                      color: \"#000000\",\n                      fontSize: \"1rem\",\n                      borderRadius: \"9px\",\n                      border: \"1.5px solid #000000\",\n                    }\n              }\n              onMouseEnter={() =>\n                State.update({ hoveringElement: \"voteButton\" })\n              }\n              onMouseLeave={() => State.update({ hoveringElement: \"\" })}\n              onClick={() => State.update({ showErrorsInForm: true })}\n            >\n              Vote\n            </button>\n          ) : (\n            <>\n              <p className=\"p-2\">\n                In order to vote get verified on{\" \"}\n                <a href=\"https://i-am-human.app\">i-am-human.app</a> and get a FV\n                SBT\n              </p>\n            </>\n          )}\n          {state.showErrorsInForm && (\n            <span className=\"text-danger\">Please answer all the questions</span>\n          )}\n        </>\n      )\n    ) : (\n      \"\"\n    )}\n    <p\n      style={{\n        fontWeight: \"500\",\n        fontSize: \"1.1rem\",\n        color: \"#767B8E\",\n        letterSpacing: \"-0.02em\",\n        marginTop: \"0.8rem\",\n      }}\n    >\n      {props.validAnswersToThisPoll.length} votes\n    </p>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/EasyPoll.DisplayMultiVote2", "fact_widget_deployments_id": "58e6b1813f0765dba02ff73d1004f9ee", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 56}