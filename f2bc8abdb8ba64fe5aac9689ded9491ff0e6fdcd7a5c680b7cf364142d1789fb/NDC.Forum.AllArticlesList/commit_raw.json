{"tx_hash": "9KdQ6QmJuByjM6MFGWXzZa4gXoCu8CsNXBFJCCyED4Z8", "action_id_social": "8NLCHKxsfBVEx1BRYYk6vjgPc1XuV9uSnMpVmgg8xj5a-0-widget", "block_id": 112890922, "block_timestamp": "2024-02-15T16:04:13.393Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "NDC.Forum.AllArticlesList", "source_code": "// NDC.Forum.AllArticlesList\r\n\r\n//===============================================INITIALIZATION=====================================================\r\n\r\nlet {\r\n  isTest,\r\n  stateUpdate,\r\n  articlesToRender,\r\n  tabs,\r\n  widgets,\r\n  addressForArticles,\r\n  handleFilterArticles,\r\n  handleOpenArticle,\r\n  authorForWidget,\r\n  initialCreateState,\r\n  editArticleData,\r\n  handleEditArticle,\r\n  showCreateArticle,\r\n  sbtWhiteList,\r\n  sbts,\r\n  handleShareButton,\r\n  handleShareSearch,\r\n  canLoggedUserCreateArticles,\r\n  filterBy,\r\n  callLibs,\r\n  baseActions,\r\n  handleOnCommitArticle,\r\n  sharedSearchInputValue,\r\n} = props;\r\n\r\nconst libSrcArray = [widgets.libs.libUpVotes];\r\n\r\nlet initLibsCalls = { upVotes: [] };\r\n\r\n//For the moment we'll allways have only 1 sbt in the array. If this change remember to do the propper work in lib.SBT and here.\r\n\r\ninitLibsCalls.upVotes = articlesToRender.map((article) => {\r\n  return {\r\n    functionName: \"getUpVotes\",\r\n    key: `upVotes-${article.id}`,\r\n    props: {\r\n      id: article.id ?? `${article.author}-${article.timeCreate}`,\r\n      sbtsNames: article.sbts ?? [],\r\n    },\r\n  };\r\n});\r\n\r\nif (articlesToRender.length > 0) {\r\n  State.update({ libsCalls: initLibsCalls });\r\n}\r\n\r\nState.init({\r\n  start: Date.now(),\r\n  libsCalls: initLibsCalls,\r\n  searchInputValue: sharedSearchInputValue ?? \"\",\r\n});\r\n\r\nif (state.upVotesBySBT && Object.keys(state.upVotesBySBT).length > 0) {\r\n  const key = Object.keys(state.upVotesBySBT)[0]; // There should always be one for now\r\n  const newUpvotes = state.upVotesBySBT[key];\r\n  if (JSON.stringify(state.upVotes) !== JSON.stringify(newUpvotes)) {\r\n    State.update({ upVotes: newUpvotes });\r\n  }\r\n}\r\n\r\nlet finalArticlesWithUpVotes = articlesToRender.map((article) => {\r\n  if (state[`upVotes-${article.id}`]) {\r\n    const key = Object.keys(state[`upVotes-${article.id}`])[0];\r\n    const articleUpVotes = state[`upVotes-${article.id}`][key];\r\n    article.upVotes = articleUpVotes;\r\n\r\n    return article;\r\n  }\r\n});\r\n\r\nconst articlesFilteredBySerch =\r\n  !state.searchInputValue && state.searchInputValue === \"\"\r\n    ? finalArticlesWithUpVotes\r\n    : finalArticlesWithUpVotes.filter((article) => {\r\n        if (article.title && article.body && article.author) {\r\n          return (\r\n            article.title\r\n              .toLowerCase()\r\n              .includes(state.searchInputValue.toLowerCase()) ||\r\n            article.body\r\n              .toLowerCase()\r\n              .includes(state.searchInputValue.toLowerCase()) ||\r\n            article.author\r\n              .toLowerCase()\r\n              .includes(state.searchInputValue.toLowerCase())\r\n          );\r\n        } else {\r\n          return true;\r\n        }\r\n      });\r\n\r\nconst fiveDaysTimeLapse = 432000000;\r\n\r\nconst newestArticlesWithUpVotes = articlesFilteredBySerch\r\n  .filter((article) => article.timeLastEdit > Date.now() - fiveDaysTimeLapse)\r\n  .sort((a, b) => b.timeLastEdit - a.timeLastEdit);\r\n\r\nconst olderArticlesWithUpVotes = articlesFilteredBySerch\r\n  .filter((article) => article.timeLastEdit < Date.now() - fiveDaysTimeLapse)\r\n  .sort((a, b) => b.upVotes.length - a.upVotes.length);\r\n\r\nconst sortedFinalArticlesWithUpVotes = [\r\n  ...newestArticlesWithUpVotes,\r\n  ...olderArticlesWithUpVotes,\r\n];\r\n\r\n//=============================================END INITIALIZATION===================================================\r\n\r\n//===================================================CONSTS=========================================================\r\n\r\nconst AcordionContainer = styled.div`--bs-accordion-border-width: 0px!important;`;\r\n\r\nconst NoMargin = styled.div`margin: 0 0.75rem;`;\r\n\r\nconst AccordionBody = styled.div`padding: 0;`;\r\n\r\nconst ArticlesListContainer = styled.div`\r\n    background-color: rgb(248, 248, 249);\r\n    margin: 0;\r\n  `;\r\n\r\nconst CallLibrary = styled.div`\r\n    display: none;\r\n  `;\r\n\r\nconst IconCursorPointer = styled.i`\r\n    cursor: pointer;\r\n  `;\r\n\r\nconst ShareSearchRow = styled.div`\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-content: center;\r\n    margin-bottom: 1rem;\r\n    margin-top: 1rem;\r\n  `;\r\n\r\nconst ShareSearchText = styled.h6`\r\n    margin-bottom: 0;\r\n    margin-left: 1rem;\r\n    margin-right: 1rem;\r\n  `;\r\n\r\nconst SearchResult = styled.span`\r\n    margin-left: 0.5rem;\r\n    font-size: small;\r\n  `;\r\n\r\n//=================================================END CONSTS=======================================================\r\n\r\n//==================================================FUNCTIONS=======================================================\r\n\r\nfunction getDateLastEdit(timestamp) {\r\n  const date = new Date(Number(timestamp));\r\n  const dateString = {\r\n    date: date.toLocaleDateString(),\r\n    time: date.toLocaleTimeString(),\r\n  };\r\n  return dateString;\r\n}\r\n\r\nfunction allArticlesListStateUpdate(obj) {\r\n  State.update(obj);\r\n}\r\n\r\nfunction handleSearch(e) {\r\n  State.update({ searchInputValue: e.target.value });\r\n}\r\n\r\n//================================================END FUNCTIONS=====================================================\r\nreturn (\r\n  <>\r\n    {showCreateArticle ? (\r\n      <>\r\n        <AcordionContainer className=\"accordion\" id=\"accordionExample\">\r\n          <NoMargin className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n              <button\r\n                className=\"accordion-button collapsed border border-2\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseOne\"\r\n                aria-expanded=\"true\"\r\n                aria-controls=\"collapseOne\"\r\n              >\r\n                <h6 className=\"m-0\">+ Create post</h6>\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseOne\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingOne\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <AccordionBody className=\"accordion-body\">\r\n                <Widget\r\n                  src={widgets.views.editableWidgets.create}\r\n                  props={{\r\n                    isTest,\r\n                    addressForArticles,\r\n                    authorForWidget,\r\n                    stateUpdate,\r\n                    widgets,\r\n                    initialCreateState,\r\n                    editArticleData,\r\n                    callLibs,\r\n                    handleFilterArticles,\r\n                    handleEditArticle,\r\n                    initialBody: \"\",\r\n                    canLoggedUserCreateArticles,\r\n                    sbts,\r\n                    baseActions,\r\n                    handleOnCommitArticle,\r\n                  }}\r\n                />\r\n              </AccordionBody>\r\n            </div>\r\n          </NoMargin>\r\n        </AcordionContainer>\r\n      </>\r\n    ) : (\r\n      <h6>You can't post since you don't own this SBT</h6>\r\n    )}\r\n    <Widget\r\n      src={widgets.views.standardWidgets.styledComponents}\r\n      props={{\r\n        Input: {\r\n          label: \"Search\",\r\n          value: state.searchInputValue,\r\n          type: \"text\",\r\n          placeholder: \"You can search by title, content or author\",\r\n          handleChange: handleSearch,\r\n        },\r\n      }}\r\n    />\r\n    {state.searchInputValue !== \"\" &&\r\n      sortedFinalArticlesWithUpVotes.length > 0 && (\r\n        <SearchResult className=\"text-secondary\">{`Found ${sortedFinalArticlesWithUpVotes.length} articles searching for \"${state.searchInputValue}\"`}</SearchResult>\r\n      )}\r\n    <ShareSearchRow>\r\n      <ShareSearchText>Share search</ShareSearchText>\r\n      <Widget\r\n        src={widgets.views.standardWidgets.newStyledComponents.Input.Button}\r\n        props={{\r\n          size: \"sm\",\r\n          className: \"info outline icon\",\r\n          children: <i className=\"bi bi-share\"></i>,\r\n          onClick: () => handleShareSearch(true, state.searchInputValue),\r\n        }}\r\n      />\r\n    </ShareSearchRow>\r\n    <NoMargin>\r\n      {filterBy.parameterName === \"tag\" && (\r\n        <div className=\"mt-3\">\r\n          <h6>Filter by tag:</h6>\r\n          <div className=\"d-flex align-items-center \">\r\n            <Widget\r\n              src={\r\n                widgets.views.standardWidgets.newStyledComponents.Element.Badge\r\n              }\r\n              props={{\r\n                children: filterBy.parameterValue,\r\n                variant: \"round info\",\r\n                size: \"lg\",\r\n              }}\r\n            />\r\n            <IconCursorPointer\r\n              className=\"bi bi-x\"\r\n              onClick={() => handleFilterArticles({ filterBy: \"\", value: \"\" })}\r\n            ></IconCursorPointer>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <ArticlesListContainer className=\"row card-group py-3\">\r\n        {sortedFinalArticlesWithUpVotes.length > 0 ? (\r\n          sortedFinalArticlesWithUpVotes.map((article, i) => {\r\n            const authorProfileCall = Social.getr(`${article.author}/profile`);\r\n\r\n            if (authorProfileCall) {\r\n              article.authorProfile = authorProfileCall;\r\n            }\r\n\r\n            // If some widget posts data different than an array it will be ignored\r\n            if (!Array.isArray(article.tags)) article.tags = [];\r\n            return (\r\n              <div key={article.id}>\r\n                <Widget\r\n                  src={widgets.views.editableWidgets.generalCard}\r\n                  props={{\r\n                    widgets,\r\n                    isTest,\r\n                    data: article,\r\n                    displayOverlay: true,\r\n                    renderReactions: true,\r\n                    addressForArticles,\r\n                    handleOpenArticle,\r\n                    handleFilterArticles,\r\n                    authorForWidget,\r\n                    handleShareButton,\r\n                    sbtWhiteList,\r\n                    handleEditArticle,\r\n                    callLibs,\r\n                    baseActions,\r\n                  }}\r\n                />\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <h5>{`No articles ${\r\n            state.searchInputValue !== \"\"\r\n              ? `haver been found searching for ${state.searchInputValue}`\r\n              : \"uploaded using this SBT yet\"\r\n          }`}</h5>\r\n        )}\r\n      </ArticlesListContainer>\r\n    </NoMargin>\r\n    <CallLibrary>\r\n      {libSrcArray.map((src) => {\r\n        return callLibs(\r\n          src,\r\n          allArticlesListStateUpdate,\r\n          state.libsCalls,\r\n          { baseAction: baseActions.upVoteBaseAction },\r\n          \"All articles list\"\r\n        );\r\n      })}\r\n    </CallLibrary>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/NDC.Forum.AllArticlesList", "fact_widget_deployments_id": "fe6e5df84b536042f2b6bdd8d36c8115", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}