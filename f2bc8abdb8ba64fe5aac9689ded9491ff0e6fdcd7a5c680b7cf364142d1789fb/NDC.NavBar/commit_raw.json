{"tx_hash": "4nn1uVzKDqcGXAGuiMHjCprQ3WhT71sJL4igmM2sHx9m", "action_id_social": "2FNdAt31btng7yz6Ai1o8z4T1dRmxGY28pfBEGBFqAsR-0-widget", "block_id": 98869550, "block_timestamp": "2023-08-15T15:17:29.824Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "NDC.NavBar", "source_code": "const {\n  handleGoHomeButton,\n  handlePillNavigation,\n  brand,\n  pills,\n  navigationButtons,\n  isTest,\n  displayedTabId,\n  writersWhiteList,\n  handleFilterArticles,\n} = props;\nfunction stateUpdate(obj) {\n  State.update(obj);\n}\nconst libSrcArray = [\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/SayALot.lib.article\",\n];\n\nfunction callLibs(srcArray, stateUpdate, libCalls) {\n  return (\n    <>\n      {srcArray.map((src) => {\n        return (\n          <Widget\n            src={src}\n            props={{\n              isTest,\n              stateUpdate,\n              libCalls,\n            }}\n          />\n        );\n      })}\n    </>\n  );\n}\n/*\n======================================================PILLS EXAMPLE====================================================\n    *Note: the first pill allways has to be the first one displayed*\n    pills: [{\n        id: string,\n        title: string,\n    }]    \n============(When modified to be web app we should delete action to replace it with a propper State.update)============\n\n======================================================BRAND EXAMPLE====================================================\n    brand: {\n        homePageId: string,\n        brandName: string,\n        logoHref: string,\n        logoRemWidth: number/string,\n        logoRemHeight: number/string,\n    }\n    \n============(When modified to be web app we should delete action to replace it with a propper State.update)============\n*/\n\nconst loggedUserAccountId = context.accountId;\n\nconst initLibCalls = [\n  {\n    functionName: \"canUserCreateArticle\",\n    key: \"canLoggedUserCreateArticle\",\n    props: {\n      accountId: loggedUserAccountId,\n      env: isTest ? \"test\" : \"prod\",\n    },\n  },\n];\n\nState.init({\n  selectedPillIndex: 0,\n  libCalls: initLibCalls,\n});\nconst canLoggedUserCreateArticle = state.canLoggedUserCreateArticle;\nconsole.log(canLoggedUserCreateArticle);\n\nconst logoRemWidth = brand.logoRemWidth\n  ? brand.logoRemWidth + \"rem\"\n  : undefined;\nconst logoRemHeight = brand.logoRemHeight\n  ? brand.logoRemHeight + \"rem\"\n  : undefined;\n\nif (\n  !stateUpdate ||\n  !(displayedTabId + \"\") ||\n  !pills ||\n  (brand && (!brand.logoHref || !(brand.homePageId + \"\")))\n) {\n  const crucialPropMissingMsg = \"The following crucial props are missing:\";\n  return (\n    <div>\n      <h3 className=\"text-danger\">{crucialPropMissingMsg}</h3>\n      <ul>\n        {!stateUpdate && <li className=\"text-danger\">stateUpdate</li>}\n\n        {!(displayedTabId + \"\") && (\n          <li className=\"text-danger\">displayedTabId</li>\n        )}\n\n        {!pills && <li className=\"text-danger\">pills</li>}\n\n        {brand && !brand.logoHref && (\n          <li className=\"text-danger\">brand.logoHref</li>\n        )}\n\n        {brand && !(brand.homePageId + \"\") && (\n          <li className=\"text-danger\">brand.homePageId</li>\n        )}\n      </ul>\n    </div>\n  );\n}\n\n//============================================Styled components==================================================\nconst BrandLogoContainer = styled.div`\n    width: ${logoRemWidth ?? \"4rem\"};\n    height: ${logoRemHeight ?? \"4rem\"};\n    cursor: pointer;\n`;\n\nconst activeColor = \"#9333EA\";\n\nconst Pill = styled.div`\n    font-family: system-ui;\n    font-weight: 500;\n    font-size: 1.2rem;\n    line-height: 24px;\n    color: black;\n    cursor: pointer;\n    user-select: none;\n\n    &:hover {\n        color: ${activeColor};\n    }\n`;\n\nconst StylessATag = styled.a`\n    &:hover {\n        text-decoration: none;\n    }\n`;\n//============================================End styled components==============================================\n\n//=================================================Components====================================================\n\nconst renderButton = (button, i) => {\n  return (\n    <Widget\n      src=\"rubycop.near/widget/NDC.StyledComponents\"\n      props={{\n        Button: {\n          size: \"big\",\n          onClick: () => {\n            handlePillNavigation(button.id);\n            State.update({\n              selectedPillIndex: undefined,\n              selectedButtonIndex: i,\n            });\n          },\n          text: button.title,\n          className:\n            state.selectedButtonIndex == i ? \"primary light\" : \"primary dark\",\n        },\n      }}\n    />\n  );\n};\n//==============================================End components===================================================\n\n//==================================================FUNCTIONS====================================================\n\n//================================================END FUNCTIONS===================================================\nreturn (\n  <div className=\"navbar navbar-expand-md border-bottom mb-3\">\n    <div className=\"container-fluid\">\n      {brand && (\n        <BrandLogoContainer\n          className=\"navbar-brand text-decoration-none\"\n          onClick={handleGoHomeButton}\n        >\n          <Widget\n            src=\"mob.near/widget/Image\"\n            props={{\n              // image: metadata.image,\n              className: \"w-100 h-100\",\n              style: {\n                objectFit: \"cover\",\n              },\n              thumbnail: false,\n              fallbackUrl: brand.logoHref,\n              alt: brand.brandName ?? \"\",\n            }}\n          />\n        </BrandLogoContainer>\n      )}\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarNav\"\n        aria-controls=\"navbarNav\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div\n        className=\"collapse navbar-collapse justify-content-center\"\n        id=\"navbarNav\"\n      >\n        <ul className=\"navbar-nav\">\n          {pills &&\n            pills.map((pill, i) => {\n              return !(pill.id + \"\") || !pill.title ? (\n                <p className=\"text-danger border\">Pill passed wrong</p>\n              ) : (\n                <li className=\"nav-item\">\n                  <Pill\n                    style={\n                      state.selectedPillIndex == i ? { color: activeColor } : {}\n                    }\n                    onClick={() => {\n                      //First one is set to be de \"Home\" one\n                      if (pill.id == 0) {\n                        const filter = { filterBy: \"\" };\n                        handleFilterArticles(filter);\n                      } else {\n                        handlePillNavigation(pill.id);\n                      }\n                      State.update({\n                        selectedPillIndex: i,\n                        selectedButtonIndex: undefined,\n                      });\n                    }}\n                    className={`nav-link ${\n                      id === displayedTabId\n                        ? \"active text-decoration-underline\"\n                        : \"text-decoration-none\"\n                    } `}\n                  >\n                    {pill.title}\n                  </Pill>\n                </li>\n              );\n            })}\n          {/*navigationButtons &&\n            loggedUserAccountId &&\n            canLoggedUserCreateArticle &&\n            navigationButtons.map((button, i) => {\n              return !(button.id + \"\") || !button.title ? (\n                <p className=\"text-danger border\">Button passed wrong</p>\n              ) : (\n                <div className=\"d-block d-md-none\">\n                  {renderButton(button, i)}\n                </div>\n              );\n            })*/}\n        </ul>\n      </div>\n      {navigationButtons &&\n        loggedUserAccountId &&\n        canLoggedUserCreateArticle &&\n        navigationButtons.map((button, i) => {\n          return !(button.id + \"\") || !button.title ? (\n            <p className=\"text-danger border\">Button passed wrong</p>\n          ) : (\n            <div className=\"d-none d-md-block\">{renderButton(button, i)}</div>\n          );\n        })}\n    </div>\n    <div style={{ display: \"none\" }}>\n      {callLibs(libSrcArray, stateUpdate, state.libCalls)}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/NDC.NavBar", "fact_widget_deployments_id": "0b3335fe2cf06a19e10a793678f6109c", "inserted_timestamp": "2023-08-15T17:17:51.321Z", "modified_timestamp": "2023-08-15T17:17:51.321Z", "__row_index": 4}