{"tx_hash": "CJjH6U1PuGEK6YcH9tDpdRzNaybDyAAwMaWzgoPr2tkf", "action_id_social": "CXJc2fdZ1mjX3hUSKxQLuxu1svVtNgxZW4de9JmTj1Ym-0-widget", "block_id": 103695372, "block_timestamp": "2023-10-19T00:35:20.112Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "SayALot.lib.comment", "source_code": "const { isTest, stateUpdate, functionsToCallByLibrary, callLibs } = props;\r\nconst functionsToCall = functionsToCallByLibrary.comment;\r\n\r\nconst prodAction = \"sayALotComment-v0.0.2\";\r\nconst testAction = `test_${prodAction}`;\r\nconst action = isTest ? testAction : prodAction;\r\n\r\nconst authorForWidget =\r\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\r\n// const authorForWidget = \"sayalot.near\";\r\n// const authorForWidget = \"kenrou-it.near\";\r\n// const authorForWidget = \"silkking.near\";\r\nconst libSrcArray = [`${authorForWidget}/widget/SayALot.lib.SBT`];\r\n\r\nState.init({\r\n  libCalls: [],\r\n  libsCalls: { SBT: [] },\r\n});\r\n\r\nlet resultFunctionsToCallByLibrary = Object.assign(\r\n  {},\r\n  functionsToCallByLibrary\r\n);\r\nlet resultFunctionsToCall = [];\r\n\r\nfunction libStateUpdate(obj) {\r\n  State.update(obj);\r\n}\r\n\r\nfunction setAreValidUsers(accountIds, sbtsNames) {\r\n  const newLibCalls = Object.assign({}, state.libsCalls);\r\n  accountIds.forEach((accountId) => {\r\n    const isCallPushed =\r\n      newLibCalls.SBT.find((libCall) => {\r\n        return (\r\n          libCall.functionName === \"isValidUser\" &&\r\n          libCall.props.accountId === accountId\r\n        );\r\n      }) !== undefined;\r\n    const isCallReturned = state[`isValidUser-${accountId}`] !== undefined;\r\n\r\n    if (isCallPushed || isCallReturned) {\r\n      return;\r\n    }\r\n\r\n    newLibCalls.SBT.push({\r\n      functionName: \"isValidUser\",\r\n      key: `isValidUser-${accountId}`,\r\n      props: {\r\n        accountId,\r\n        sbtsNames,\r\n      },\r\n    });\r\n  });\r\n  State.update({ libCalls: newLibCalls });\r\n}\r\n\r\nfunction canUserCreateComment(props) {\r\n  const { accountId, sbtsNames } = props;\r\n  setAreValidUsers([accountId], sbtsNames);\r\n\r\n  const result = state[`isValidUser-${accountId}`];\r\n\r\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n    const discardCondition =\r\n      call.functionName === \"canUserCreateComment\" && result !== undefined;\r\n    return !discardCondition;\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nfunction createComment(props) {\r\n  const { comment, onClick, onCommit, onCancel } = props;\r\n\r\n  onClick();\r\n\r\n  saveComment(comment, onCommit, onCancel);\r\n\r\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n    return call.functionName !== \"createComment\";\r\n  });\r\n\r\n  return comment;\r\n}\r\n\r\nfunction composeCommentData(comment) {\r\n  const data = {\r\n    index: {\r\n      [action]: JSON.stringify({\r\n        key: comment.id,\r\n        value: {\r\n          type: \"md\",\r\n          comment,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n\r\n  return data;\r\n}\r\n\r\nfunction saveComment(comment, onCommit, onCancel) {\r\n  if (comment.text) {\r\n    const newData = composeCommentData(comment);\r\n    Social.set(newData, {\r\n      force: true,\r\n      onCommit,\r\n      onCancel,\r\n    });\r\n  }\r\n}\r\n\r\nfunction getComments(id) {\r\n  return Social.index(action, id, {\r\n    order: \"desc\",\r\n    subscribe: true,\r\n  });\r\n}\r\n\r\nfunction getCommentBlackListByBlockHeight() {\r\n  return [98588599];\r\n}\r\n\r\nfunction filterInvalidArticlesIndexes(commentIndexes) {\r\n  return commentIndexes.filter(\r\n    (commentIndexes) =>\r\n      commentIndexes.blockHeight &&\r\n      !getCommentBlackListByBlockHeight().includes(commentIndexes.blockHeight) // Comment is not in blacklist\r\n  );\r\n}\r\n\r\nfunction getValidComments(props) {\r\n  const { id, articleSbts } = props;\r\n  const commentIndexes = getComments(id);\r\n  const blacklistFilteredComments = commentIndexes\r\n    ? filterInvalidArticlesIndexes(commentIndexes)\r\n    : [];\r\n\r\n  let finalComments = blacklistFilteredComments;\r\n  if (articleSbts.length > 0) {\r\n    // We assume there will only be just one articleSbt\r\n    const articleSbt = articleSbts[0];\r\n\r\n    const blacklistFilteredCommentsAuthors = blacklistFilteredComments.map(\r\n      (comment) => {\r\n        return comment.accountId;\r\n      }\r\n    );\r\n\r\n    setAreValidUsers(blacklistFilteredCommentsAuthors, articleSbts);\r\n\r\n    const validAuthors = blacklistFilteredCommentsAuthors.filter((author) => {\r\n      return state[`isValidUser-${author}`][articleSbt];\r\n    });\r\n\r\n    resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n      const discardCondition =\r\n        call.functionName === \"getValidComments\" &&\r\n        state[`isValidUser-${call.props.accountId}`] !== undefined;\r\n      return !discardCondition;\r\n    });\r\n    finalComments = blacklistFilteredComments.filter((comment) => {\r\n      return validAuthors.includes(comment.accountId);\r\n    });\r\n  }\r\n  return finalComments;\r\n}\r\n\r\nfunction callFunction(call) {\r\n  if (call.functionName === \"createComment\") {\r\n    return createComment(call.props);\r\n  } else if (call.functionName === \"getValidComments\") {\r\n    return getValidComments(call.props);\r\n  } else if (call.functionName === \"canUserCreateComment\") {\r\n    return canUserCreateComment(call.props);\r\n  }\r\n}\r\n\r\nif (functionsToCall && functionsToCall.length > 0) {\r\n  const updateObj = Object.assign({}, functionsToCallByLibrary);\r\n  resultFunctionsToCall = [...functionsToCall];\r\n  functionsToCall.forEach((call) => {\r\n    updateObj[call.key] = callFunction(call);\r\n  });\r\n\r\n  resultFunctionsToCallByLibrary.article = resultFunctionsToCall;\r\n  updateObj.functionsToCallByLibrary = resultFunctionsToCallByLibrary;\r\n  stateUpdate(updateObj);\r\n}\r\n\r\nreturn (\r\n  <>\r\n    {libSrcArray.map((src) => {\r\n      return callLibs(src, libStateUpdate, state.libsCalls, \"lib.comment\");\r\n    })}\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/SayALot.lib.comment", "fact_widget_deployments_id": "f2f3a41c222e276b947ba5385f04efdf", "inserted_timestamp": "2023-10-19T02:38:37.404Z", "modified_timestamp": "2023-10-19T02:38:37.404Z", "__row_index": 12}