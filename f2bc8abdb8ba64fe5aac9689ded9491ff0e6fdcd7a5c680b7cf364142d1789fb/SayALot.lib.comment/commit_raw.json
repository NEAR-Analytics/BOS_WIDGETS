{"tx_hash": "3Npda2iWTJUsjRcrikDevJxBjQHNj2JNyX1oHNzRrw82", "action_id_social": "Fg1Cs3m1yLtEc5GrsSK631uDxGDCnSU5VBHbVvMB3inb-0-widget", "block_id": 98588500, "block_timestamp": "2023-08-11T19:59:17.539Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "SayALot.lib.comment", "source_code": "const { isTest, stateUpdate, libCalls } = props;\n\nconst prodAction = \"sayALotComment\";\nconst testAction = `test_${prodAction}`;\nconst action = isTest ? testAction : prodAction;\n\nfunction createComment(props) {\n  const { comment } = props;\n\n  saveComment(comment);\n\n  resultLibCalls = resultLibCalls.filter((call) => {\n    return call.functionName !== \"createComment\";\n  });\n\n  return comment;\n}\n\n//addressForComments should be the realArticleId of the article\nfunction composeCommentData(comment) {\n  const data = {\n    index: {\n      [action]: JSON.stringify({\n        key: comment.realArticleId,\n        value: {\n          type: \"md\",\n          comment,\n        },\n      }),\n    },\n  };\n\n  return data;\n}\n\nfunction saveComment(comment) {\n  if (comment.text) {\n    const newData = composeCommentData(comment);\n\n    Social.set(newData, {\n      force: true,\n    });\n    // onCancel: () => {\n    //   State.update({ saving: false });\n    // },\n  }\n}\n\nfunction getComment(props) {\n  const { realArticleId } = props;\n  return Social.index(action, realArticleId, {\n    order: \"desc\",\n  });\n}\n\nfunction getCommentBlackListByBlockHeight() {\n  return [];\n}\n\nfunction filterInvalidArticlesIndexes(commentIndexes) {\n  return commentIndexes.filter(\n    (commentIndexes) =>\n      !getCommentBlackListByBlockHeight().includes(commentIndexes.blockHeight) // Comment is not in blacklist\n  );\n}\n\nfunction getValidComments(props) {\n  const commentIndexes = getComment(props);\n  const validCommentsIndexes = filterInvalidArticlesIndexes(commentIndexes);\n\n  return validCommentsIndexes;\n}\n\nfunction libCall(call) {\n  if (call.functionName === \"createComment\") {\n    return createComment(call.props);\n  } else if (call.functionName === \"getValidComments\") {\n    return getValidComments(call.props);\n  }\n}\nlet resultLibCalls = [];\nif (libCalls && libCalls.length > 0) {\n  const updateObj = {};\n  resultLibCalls = [...libCalls];\n  libCalls.forEach((call) => {\n    updateObj[call.key] = libCall(call);\n  });\n\n  updateObj.libCalls = resultLibCalls;\n  stateUpdate(updateObj);\n}\n\nreturn <>{}</>;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/SayALot.lib.comment", "fact_widget_deployments_id": "371b55a4c7bb69def3c5180bbd7138c0", "inserted_timestamp": "2023-08-11T21:41:38.838Z", "modified_timestamp": "2023-08-11T21:41:38.838Z", "__row_index": 23}