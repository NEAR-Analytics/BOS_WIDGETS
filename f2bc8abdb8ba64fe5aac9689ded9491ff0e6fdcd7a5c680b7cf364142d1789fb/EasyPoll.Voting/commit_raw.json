{"tx_hash": "8tEfCcZJmA6n4WHByjtm8L14F2fcctiGvcAzp1zNKJHf", "action_id_social": "EBaoAGYQrqv2xzuzcwirwJw1Tc6pLaYCVU9vPuu6wtcm-0-widget", "block_id": 94335587, "block_timestamp": "2023-06-16T20:32:28.598Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "EasyPoll.Voting", "source_code": "State.init({\r\n  showQuestionsByThisUser: false,\r\n  descriptionHeightLimited: true,\r\n  poll: {},\r\n  polls: [{}],\r\n  profile: {},\r\n  pollsByThisCreator: [{}],\r\n  answers: [{}],\r\n});\r\n\r\nconst isTest = props.isTest;\r\n\r\nif (!props.isPreview && !props.blockHeight) {\r\n  return \"Prop block height wasn't provided\";\r\n}\r\n\r\nif (!props.canOperate) {\r\n  return \"You are not allowed to vote\";\r\n}\r\n\r\nconst widgetOwner = \"neardigitalcollective.near\";\r\nconst indexVersion = props.indexVersion ?? \"3.2.0\";\r\nconst canOperate = props.canOperate;\r\nconst whitelist = props.whitelist;\r\n\r\nlet isPreview = props.isPreview ?? false;\r\nlet shouldDisplayViewAll = props.shouldDisplayViewAll;\r\n\r\nlet questionBlockHeight = Number(props.blockHeight);\r\n\r\nconst polls =\r\n  !props.previewInfo &&\r\n  Social.index(\"poll_question\", `question-v${indexVersion}`);\r\nif (JSON.stringify(polls) != JSON.stringify(state.polls)) {\r\n  State.update({ polls: polls });\r\n}\r\n\r\nif (!state.polls) {\r\n  return \"Loading\";\r\n} else {\r\n  const poll =\r\n    props.previewInfo ??\r\n    state.polls.find((q) => q.blockHeight == questionBlockHeight);\r\n\r\n  if (JSON.stringify(poll) != JSON.stringify(state.poll)) {\r\n    State.update({ poll: poll });\r\n  }\r\n\r\n  if (!state.poll && !isPreview) {\r\n    return \"Loading... \";\r\n  }\r\n}\r\n\r\nlet profile = Social.getr(`${state.poll.accountId}/profile`);\r\n\r\nif (JSON.stringify(profile) != JSON.stringify(state.profile)) {\r\n  State.update({ profile: profile });\r\n}\r\n\r\n// if (!profile) {\r\n//   return \"Loading\";\r\n// }\r\n\r\nlet pollsByThisCreator = Social.index(\r\n  \"poll_question\",\r\n  `question-v${indexVersion}`,\r\n  {\r\n    accountId: state.poll.accountId,\r\n  }\r\n);\r\n\r\nif (\r\n  JSON.stringify(pollsByThisCreator) != JSON.stringify(state.pollsByThisCreator)\r\n) {\r\n  State.update({ pollsByThisCreator: pollsByThisCreator });\r\n}\r\n\r\nif (!state.pollsByThisCreator) {\r\n  return \"Loading\";\r\n}\r\n\r\nfunction transformDateFormat(date) {\r\n  return new Date(date).toLocaleDateString();\r\n}\r\n\r\nfunction isActive(poll) {\r\n  return (\r\n    poll.value.startTimestamp < Date.now() &&\r\n    Date.now() < poll.value.endTimestamp\r\n  );\r\n}\r\n\r\nfunction isUpcoming(poll) {\r\n  return poll.value.startTimestamp > Date.now();\r\n}\r\n\r\nfunction getValidAnswersQtyFromQuestion(questionBlockHeight) {\r\n  // let poll = polls.find(q => q.blockHeight == questionBlockHeight)\r\n\r\n  const answers = isTest\r\n    ? Social.index(\"poll_question\", `test-answer-v${indexVersion}`)\r\n    : Social.index(\"poll_question\", `answer-v${indexVersion}`);\r\n\r\n  if (JSON.stringify(answers) != JSON.stringify(state.answers)) {\r\n    State.update({ answers: answers });\r\n  }\r\n\r\n  if (!state.answers) {\r\n    return \"Loading\";\r\n  }\r\n\r\n  const answersFromThisPoll = state.answers.filter(\r\n    (a) => a.value.questionBlockHeight == questionBlockHeight\r\n  );\r\n\r\n  const usersWithAnswers = answersFromThisPoll.map((a) => a.accountId);\r\n  const usersWithAnswersWithoutDuplicates = usersWithAnswers.filter(\r\n    (u, index) => usersWithAnswers.indexOf(u) == index\r\n  );\r\n  return usersWithAnswersWithoutDuplicates.length;\r\n}\r\n\r\nconst renderPollTypeIcon = () => {\r\n  let allPollTypes = [];\r\n  for (let i = 0; i < poll.value.questions.length; i++) {\r\n    if (!allPollTypes.includes(poll.value.questions[i].questionType)) {\r\n      allPollTypes.push(poll.value.questions[i].questionType);\r\n    }\r\n  }\r\n\r\n  return allPollTypes.length == 1 &&\r\n    (allPollTypes[0] == \"0\" || allPollTypes[0] == \"1\") ? (\r\n    <i className=\"bi bi-pie-chart\" style={{ padding: \"0.6rem 0.8rem\" }}></i>\r\n  ) : allPollTypes.length == 1 && allPollTypes[0] == \"2\" ? (\r\n    <i\r\n      style={{\r\n        transform: \"rotate(90deg)\",\r\n        padding: \"0.6rem 0.8rem\",\r\n      }}\r\n      className=\"bi bi-bar-chart-line\"\r\n    ></i>\r\n  ) : allPollTypes.length == 1 && allPollTypes[0] == \"3\" ? (\r\n    <i className=\"bi bi-file-text\" style={{ padding: \"0.6rem 0.8rem\" }}></i>\r\n  ) : (\r\n    <i className=\"bi bi-collection\" style={{ padding: \"0.6rem 0.8rem\" }}></i>\r\n  );\r\n};\r\n\r\nconst renderQuestionsByThisCreator = () => {\r\n  //TODO show only the 2 polls\r\n  return state.pollsByThisCreator.map((pollByCreator, index) => {\r\n    let divStyle =\r\n      index == 0\r\n        ? { backGroundColor: \"white\" }\r\n        : {\r\n            backGroundColor: \"white\",\r\n            paddingTop: \"1rem\",\r\n            borderTop: \"1px solid #ced4da\",\r\n          };\r\n    return (\r\n      <div style={divStyle}>\r\n        <div className=\"d-flex align-items-center\">\r\n          <div\r\n            className=\"d-flex justify-content-center\"\r\n            style={{\r\n              maxHeight: \"2.8rem\",\r\n              aspectRatio: \"1\",\r\n              borderRadius: \"16px\",\r\n              backgroundColor: \"#F2F6FA\",\r\n              marginRight: \"0.8rem\",\r\n            }}\r\n          >\r\n            {renderPollTypeIcon(pollByCreator)}\r\n          </div>\r\n          <p\r\n            className=\"w-100 text-truncate\"\r\n            style={{ fontWeight: \"500\", margin: \"0\" }}\r\n          >\r\n            {pollByCreator.value.title}\r\n          </p>\r\n        </div>\r\n        <div className=\"d-flex justify-content-between flex-nowrap text-secondary mb-2\">\r\n          <div>\r\n            <i className=\"bi bi-people\"></i>\r\n            <span>\r\n              {getValidAnswersQtyFromQuestion(pollByCreator.blockHeight)}\r\n            </span>\r\n          </div>\r\n          <span>\r\n            Ends\r\n            <Widget\r\n              src={`silkking.near/widget/timeAgo`}\r\n              props={{\r\n                timeInFuture: pollByCreator.value.endTimestamp,\r\n                reduced: true,\r\n              }}\r\n            />\r\n          </span>\r\n          <span\r\n            style={{\r\n              backgroundColor: isUpcoming(pollByCreator)\r\n                ? \"#FFF3B4\"\r\n                : isActive(pollByCreator)\r\n                ? \"#D9FCEF\"\r\n                : \"#FFE5E5\",\r\n\r\n              height: \"1.5rem\",\r\n              width: \"4rem\",\r\n              textAlign: \"center\",\r\n              borderRadius: \"16px\",\r\n              marginRight: \"1rem\",\r\n              lineHeight: \"1.5rem\",\r\n              fontSize: \"0.8rem\",\r\n              letterSpacing: \"-0.025rem\",\r\n              color: isUpcoming(pollByCreator)\r\n                ? \"#FFC905\"\r\n                : isActive(pollByCreator)\r\n                ? \"#00B37D\"\r\n                : \"#FF4747\",\r\n              fontWeight: \"500\",\r\n            }}\r\n          >\r\n            {isUpcoming(pollByCreator)\r\n              ? \"Upcoming\"\r\n              : isActive(pollByCreator)\r\n              ? \"Active\"\r\n              : \"Closed\"}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nfunction closeModalClickingOnTransparent() {\r\n  return (e) => {\r\n    e.target.id == \"modal\" && State.update({ showQuestionsByThisUser: false });\r\n  };\r\n}\r\n\r\nconst renderModal = () => {\r\n  return (\r\n    <div\r\n      className=\"modal\"\r\n      id=\"modal\"\r\n      style={\r\n        state.showQuestionsByThisUser && {\r\n          display: \"block\",\r\n          backgroundColor: \"#7e7e7e70\",\r\n        }\r\n      }\r\n      tabindex=\"-1\"\r\n      role=\"dialog\"\r\n      onClick={closeModalClickingOnTransparent()}\r\n    >\r\n      <div\r\n        className=\"modal-dialog\"\r\n        style={{ maxWidth: \"100%\" }}\r\n        role=\"document\"\r\n      >\r\n        <div\r\n          className=\"modal-content\"\r\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\r\n        >\r\n          <div className=\"modal-header flex-row-reverse\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"close\"\r\n              dataDismiss=\"modal\"\r\n              ariaLabel=\"Close\"\r\n              onClick={() => State.update({ showQuestionsByThisUser: false })}\r\n            >\r\n              <span ariaHidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <div\r\n            className=\"modal-body\"\r\n            style={{\r\n              width: \"90%\",\r\n              borderRadius: \"1rem\",\r\n              margin: \"0 auto\",\r\n            }}\r\n          >\r\n            <Widget\r\n              src={`${widgetOwner}/widget/EasyPoll.Questions`}\r\n              props={{\r\n                accountId: state.poll.accountId,\r\n                onlyUser: true,\r\n                indexVersion,\r\n                canOperate,\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-dismiss=\"modal\"\r\n              onClick={() => State.update({ showQuestionsByThisUser: false })}\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction showDescription(description) {\r\n  if (state.descriptionHeightLimited && description.length > 501) {\r\n    return description.slice(0, 500) + \"...\";\r\n  } else {\r\n    return description;\r\n  }\r\n}\r\n\r\nreturn (\r\n  <>\r\n    <Widget\r\n      src={`f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/EasyPoll.Voting2`}\r\n      props={{\r\n        isTest,\r\n        state,\r\n        stateUpdate: (data) => State.update(data),\r\n        profile,\r\n        isUpcoming,\r\n        isActive,\r\n        widgetOwner,\r\n        questionBlockHeight,\r\n        showDescription,\r\n        questionsByCreator,\r\n        shouldDisplayViewAll: true,\r\n        renderQuestionsByThisCreator,\r\n        isPreview,\r\n        renderModal,\r\n        indexVersion,\r\n        whitelist,\r\n      }}\r\n    />\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/EasyPoll.Voting", "fact_widget_deployments_id": "c592da72c4ba4632aff385f0d2ac9f94", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 1}