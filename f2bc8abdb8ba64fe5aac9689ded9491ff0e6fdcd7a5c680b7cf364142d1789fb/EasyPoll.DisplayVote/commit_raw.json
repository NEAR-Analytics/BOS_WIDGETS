{"tx_hash": "BP4MiJADzMBVjhoajXkHoA1uzpxGVjFJj8rvC4RP1mTK", "action_id_social": "872u9SSDtrwb5nDUenMPRdYm1rnimy9wxgteuYQnKSLs-0-widget", "block_id": 94561636, "block_timestamp": "2023-06-19T19:56:39.006Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "EasyPoll.DisplayVote", "source_code": "if (!props.isPreview && !props.poll) {\r\n  return \"Property poll not set\";\r\n}\r\n\r\nif (!props.whitelist) {\r\n  return \"Property whitelist not set\";\r\n}\r\n\r\nconst isTest = props.isTest;\r\n\r\nconst isPreview = props.isPreview ?? false;\r\nconst indexVersion = props.indexVersion ?? \"3.2.0\";\r\nconst whitelist = props.whitelist;\r\n\r\nlet widgetOwner = \"neardigitalcollective.near\";\r\n\r\n// Getting question\r\nconst poll = props.poll;\r\n\r\nState.init({\r\n  answers: {},\r\n});\r\n\r\n// Utility function\r\nfunction getBlockTimestamp(blockHeight) {\r\n  // It is stored in nanoseconds which is 1e-6 miliseconds\r\n  return Near.block(blockHeight).header.timestamp / 1e6;\r\n}\r\n\r\n// Discards answers that were posted after question's end date\r\nfunction getTimeRelatedValidAnswers(answers) {\r\n  let low = 0;\r\n  let high = answers.length - 1;\r\n  const questionEndTimestamp = poll.value.endTimestamp;\r\n  let endBlockTimestamp = getBlockTimestamp(answers[high].blockHeight);\r\n  if (endBlockTimestamp < questionEndTimestamp) return answers;\r\n  // For tries to exceed 50 there should be more than 10e15 answers which will never happen. But if you mess up and make an infinite cycle it will crash. This way it will never be infinite\r\n  let tries = 10;\r\n  while (high - low > 1 && tries > 0) {\r\n    tries--;\r\n    let curr = Math.floor((high - low) / 2) + low;\r\n    let currBlockTimestamp = getBlockTimestamp(answers[curr].blockHeight);\r\n    if (currBlockTimestamp < questionEndTimestamp) {\r\n      low = curr;\r\n    } else {\r\n      high = curr;\r\n    }\r\n  }\r\n  // Slice ignores the index of the last one. Since high - low == 1, high = low + 1\r\n  return answers.slice(0, high);\r\n}\r\n\r\nfunction getOptionRelatedValidAnswers(answers) {\r\n  return answers.filter((a) => {\r\n    const userAnswers = a.value.answer;\r\n    return userAnswers.every((an, i) => {\r\n      // If has choicesOptions, then it's needs validation answer is among the options. If not, any answer is just fine\r\n      if (poll.value.questions[i].choicesOptions.length > 0) {\r\n        if (Array.isArray(an)) {\r\n          return an.every(\r\n            (ans) =>\r\n              0 <= Number(ans) &&\r\n              Number(ans) < poll.value.questions[i].choicesOptions.length\r\n          );\r\n        } else {\r\n          return (\r\n            0 <= Number(an) &&\r\n            Number(an) < poll.value.questions[i].choicesOptions.length\r\n          );\r\n        }\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n// Getting valid answers\r\nconst answers = isTest\r\n  ? Social.index(\"poll_question\", `test-answer-v${indexVersion}`)\r\n  : Social.index(\"poll_question\", `answer-v${indexVersion}`);\r\n\r\nif (JSON.stringify(answers) != JSON.stringify(state.answers)) {\r\n  State.update({ answers: answers });\r\n}\r\n\r\nif (!state.answers) {\r\n  return \"Loading\";\r\n}\r\n\r\nconst isUserAllowedToVote = (accountId) => {\r\n  const view = Near.view(\"registry.i-am-human.near\", \"sbt_tokens_by_owner\", {\r\n    account: accountId,\r\n    issuer: \"fractal.i-am-human.near\",\r\n  });\r\n  const hasSBTToken = view?.[0]?.[1]?.[0];\r\n  return hasSBTToken || whitelist.includes(accountId);\r\n};\r\n\r\nconst answersToThisPoll = state.answers.filter(\r\n  (a) => a.value.questionBlockHeight == props.poll.blockHeight\r\n);\r\nfunction getValidAnswers() {\r\n  let validTimeAnswers = getTimeRelatedValidAnswers(answersToThisPoll);\r\n  let validOptionAndTimeAnswers =\r\n    getOptionRelatedValidAnswers(validTimeAnswers);\r\n  const validateAddresses = validOptionAndTimeAnswers.filter((item) => {\r\n    return isUserAllowedToVote(item.accountId);\r\n    // const view = Near.view(\"registry.i-am-human.near\", \"sbt_tokens_by_owner\", {\r\n    //   account: item.accountId,\r\n    //   issuer: \"fractal.i-am-human.near\",\r\n    // });\r\n    // return view?.[0]?.[1]?.[0] /*|| whitelist.includes(item.accountId)*/;\r\n  });\r\n  return validateAddresses;\r\n}\r\nconst validAnswersToThisPoll = getValidAnswers(answersToThisPoll);\r\n// Getting if user has already voted\r\nconst currAccountId = context.accountId ?? \"\";\r\nfunction userHasVoted() {\r\n  return (\r\n    validAnswersToThisPoll.find((a) => a.accountId == currAccountId) !=\r\n    undefined\r\n  );\r\n}\r\nlet hasVoted = true ?? userHasVoted();\r\nconst isQuestionOpen =\r\n  poll.value.startTimestamp < Date.now() &&\r\n  Date.now() < poll.value.endTimestamp;\r\nconst canVote = !hasVoted && isQuestionOpen;\r\n\r\n// Counting votes to display\r\nfunction countVotes(questionNumber, questionType) {\r\n  if (questionType == \"3\") return;\r\n  return validAnswersToThisPoll.reduce((acc, curr) => {\r\n    let ans = curr.value.answer[questionNumber];\r\n    if (Array.isArray(ans)) {\r\n      ans.forEach((a) => {\r\n        acc[Number(a)] += 1;\r\n      });\r\n    } else {\r\n      acc[Number(ans)] += 1;\r\n    }\r\n\r\n    return acc;\r\n  }, new Array(poll.value.questions[questionNumber].choicesOptions.length).fill(0));\r\n}\r\n\r\nfunction calculatePercentage(votesToThisOption) {\r\n  if (validAnswersToThisPoll.length == 0) return 0;\r\n  return ((votesToThisOption / validAnswersToThisPoll.length) * 100).toFixed(2);\r\n}\r\n\r\nreturn (\r\n  <Widget\r\n    src={`f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/EasyPoll.DisplayVote2`}\r\n    props={{\r\n      isTest,\r\n      poll,\r\n      canVote,\r\n      countVotes,\r\n      hasVoted,\r\n      indexVersion,\r\n      isQuestionOpen,\r\n      validAnswersToThisPoll,\r\n      whitelist,\r\n    }}\r\n  />\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/EasyPoll.DisplayVote", "fact_widget_deployments_id": "7957bc1ae6381a0049103582498df940", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 13}