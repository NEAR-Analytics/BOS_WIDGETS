{"tx_hash": "39VGtG6eBZ1VyirsxNqBjAHySTnixB7S9LTaYssXZ3yj", "action_id_social": "DN7niNwP14TmXnqgPkmGtd4a4K5caBLqARBpsNGQt9UC-0-widget", "block_id": 107107092, "block_timestamp": "2023-12-04T02:18:00.932Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "NDC.Forum.Create", "source_code": "//NDC.Forum.Create\r\n\r\nconst {\r\n  isTest,\r\n  addressForArticles,\r\n  authorForWidget,\r\n  stateUpdate,\r\n  initialBody,\r\n  initialCreateState,\r\n  editArticleData,\r\n  widgets,\r\n  handleFilterArticles,\r\n  handleEditArticle,\r\n  handlerStateUpdate,\r\n  sbtWhiteList,\r\n  sbts,\r\n  canLoggedUserCreateArticles,\r\n  callLibs,\r\n  baseActions,\r\n  handleOnCommitArticle,\r\n} = props;\r\n\r\nconst libSrcArray = [widgets.libArticle];\r\n\r\nconst errTextNoBody = \"ERROR: no article Body\",\r\n  errTextNoId = \"ERROR: no article Id\",\r\n  errTextDublicatedId = \"ERROR: there is article with such name\";\r\n\r\nState.init({\r\n  ...initialCreateState,\r\n  initialBody: props.initialBody ?? \"\",\r\n  functionsToCallByLibrary: {\r\n    article: [],\r\n  },\r\n});\r\n\r\nfunction createStateUpdate(obj) {\r\n  State.update(obj);\r\n}\r\n\r\nconst tagsArray =\r\n  editArticleData && !state.tagsModified ? editArticleData.tags : state.tags;\r\n\r\nconst accountId = context.accountId;\r\n\r\nfunction getRealArticleId() {\r\n  if (editArticleData) {\r\n    return (\r\n      editArticleData.id ??\r\n      `${editArticleData.author}-${editArticleData.timeCreate}`\r\n    );\r\n  } else {\r\n    return `${accountId}-${Date.now()}`;\r\n  }\r\n}\r\n\r\nfunction getArticleData() {\r\n  const args = {\r\n    title: editArticleData.title ?? state.title,\r\n    author: editArticleData.author ?? accountId,\r\n    lastEditor: accountId,\r\n    timeLastEdit: Date.now(),\r\n    timeCreate: editArticleData.timeCreate ?? Date.now(),\r\n    body: state.articleBody,\r\n    version: editArticleData ? editArticleData.version + 1 : 0,\r\n    navigation_id: null,\r\n    tags: tagsArray ?? [],\r\n    id: getRealArticleId(),\r\n    sbts,\r\n  };\r\n  return args;\r\n}\r\n\r\nconsole.log(getArticleData());\r\n\r\nfunction onCommit(article) {\r\n  State.update({\r\n    title: \"\",\r\n    clearArticleId: true,\r\n    tags: [],\r\n    clearTags: true,\r\n    articleBody: \"\",\r\n    clearArticleBody: true,\r\n    initalBody: \"\",\r\n    // showCreatedArticle: true,\r\n    showPreview: false,\r\n    saving: false,\r\n  });\r\n\r\n  if (!Array.isArray(article.tags)) article.tags = Object.keys(article.tags);\r\n\r\n  handleOnCommitArticle(article);\r\n}\r\n\r\nfunction onCancel() {\r\n  State.update({\r\n    createdArticle: undefined,\r\n    saving: false,\r\n  });\r\n}\r\n\r\nfunction getInitialMarkdownBody() {\r\n  if (\r\n    editArticleData &&\r\n    (!state.articleBody || state.articleBody === editArticleData.body)\r\n  ) {\r\n    return editArticleData.body;\r\n  } else if (state.articleBody && state.articleBody !== editArticleData.body) {\r\n    return state.articleBody;\r\n  } else {\r\n    return state.initialBody == \"\" || !state.initialBody\r\n      ? \"Post content (markdown supported)\"\r\n      : state.initalBody;\r\n  }\r\n}\r\n\r\nfunction createArticleListener() {\r\n  //To test without commiting use the next line and comment the rest\r\n  // onCommit();\r\n  State.update({ saving: true });\r\n  const article = getArticleData();\r\n\r\n  const newLibsCalls = Object.assign({}, state.functionsToCallByLibrary);\r\n  newLibsCalls.article.push({\r\n    functionName: \"createArticle\",\r\n    key: \"createdArticle\",\r\n    props: {\r\n      article,\r\n      onCommit: () => onCommit(article),\r\n      onCancel,\r\n    },\r\n  });\r\n\r\n  State.update({ functionsToCallByLibrary: newLibsCalls });\r\n}\r\n\r\nfunction switchShowPreview() {\r\n  State.update({\r\n    showPreview: !state.showPreview,\r\n    initialBody: state.articleBody,\r\n  });\r\n}\r\n\r\nconst GeneralContainer = styled.div`\r\n  background-color: rgb(248, 248, 249);\r\n  margin: 0;\r\n`;\r\n\r\nconst Button = styled.button` \r\n  margin: 0px 1rem; \r\n  display: inline-block; \r\n  text-align: center; \r\n  vertical-align: middle; \r\n  cursor: pointer; \r\n  user-select: none; \r\n  transition: color 0.15s ease-in-out,background-color 0.15s ease-in-out,border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out; \r\n \r\n  border: 2px solid transparent; \r\n  font-weight: 500; \r\n  padding: 0.3rem 0.5rem; \r\n  background-color: #010A2D; \r\n  border-radius: 12px; \r\n  color: white; \r\n  text-decoration: none;   \r\n \r\n  &:hover { \r\n    color: #010A2D; \r\n    background-color: white; \r\n  } \r\n`;\r\n\r\nconst CreationContainer = styled.div`\r\n  background-color: rgb(230, 230, 230);\r\n  border-radius: 20px;\r\n  padding: 1rem 0;\r\n  position: relative;\r\n`;\r\n\r\nconst SecondContainer = styled.div`\r\n  min-width: 360px;\r\n  background-color: white;\r\n  padding: 1rem;\r\n`;\r\n\r\nconst BoxShadow = styled.div`\r\n  box-shadow: rgba(140, 149, 159, 0.1) 0px 4px 28px 0px;\r\n`;\r\n\r\nconst SpinnerContainer = styled.div`\r\n  height: 1rem;\r\n  width: 1rem;\r\n  marginTop: 2px;\r\n`;\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <SpinnerContainer className=\"spinner-border text-secondary\" role=\"status\">\r\n      <span className=\"sr-only\" title=\"Loading...\"></span>\r\n    </SpinnerContainer>\r\n  );\r\n};\r\n\r\nconst initialTagsObject = {};\r\n\r\nArray.isArray(tagsArray) &&\r\n  tagsArray.forEach((tag) => {\r\n    initialTagsObject[tag] = true;\r\n  });\r\n\r\nreturn (\r\n  <div>\r\n    <GeneralContainer className=\"pt-2 row card-group\">\r\n      <BoxShadow className=\"rounded-3 p-3 m-3 bg-white col-lg-8 col-md-8 col-sm-12\">\r\n        {/*{state.createdArticle && state.showCreatedArticle && editArticleData ? (\r\n          <Widget\r\n            src={widgets.articleView}\r\n            props={{\r\n              widgets,\r\n              isTest,\r\n              handleFilterArticles,\r\n              articleToRenderData: state.createdArticle,\r\n              authorForWidget,\r\n              handleEditArticle,\r\n              callLibs,\r\n              baseActions,\r\n            }}\r\n          />\r\n        ) : ( If you uncomment this you need to uncomment the line before </BoxShadow> too*/}\r\n        <div>\r\n          {\r\n            // <CreationContainer className=\"container-fluid\">\r\n          }\r\n          <SecondContainer className=\"rounded\">\r\n            {state.showPreview ? (\r\n              <Widget\r\n                src={widgets.generalCard}\r\n                props={{\r\n                  widgets,\r\n                  isTest,\r\n                  data: {\r\n                    title: state.title,\r\n                    author: accountId,\r\n                    lastEditor: accountId,\r\n                    timeLastEdit: Date.now(),\r\n                    timeCreate: Date.now(),\r\n                    body: state.articleBody,\r\n                    version: 0,\r\n                    navigation_id: null,\r\n                    tags: tagsArray,\r\n                    id: getRealArticleId(),\r\n                    sbts,\r\n                  },\r\n                  addressForArticles,\r\n                  handleOpenArticle: () => {},\r\n                  handleFilterArticles: () => {},\r\n                  authorForWidget,\r\n                  handleShareButton: () => {},\r\n                  callLibs,\r\n                  baseActions,\r\n                }}\r\n              />\r\n            ) : (\r\n              <div>\r\n                <div className=\"d-flex flex-column pt-3\">\r\n                  <label for=\"inputArticleId\" className=\"small text-danger\">\r\n                    {state.errorId}\r\n                  </label>\r\n                  <Widget\r\n                    src={widgets.fasterTextInput}\r\n                    props={{\r\n                      firstText: state.title,\r\n                      forceClear: state.clearArticleId,\r\n                      stateUpdate: (obj) => State.update(obj),\r\n                      filterText: (e) => e.target.value,\r\n                      placeholder: \"Post title (case-sensitive)\",\r\n                      editable: editArticleData,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"d-flex flex-column pt-3\">\r\n                  <label\r\n                    for=\"textareaArticleBody\"\r\n                    className=\"small text-danger\"\r\n                  >\r\n                    {state.errorBody}\r\n                  </label>\r\n                  <div className=\"d-flex gap-2\">\r\n                    <Widget\r\n                      src={widgets.markownEditorIframe}\r\n                      props={{\r\n                        initialText: getInitialMarkdownBody(),\r\n                        onChange: (articleBody) =>\r\n                          State.update({\r\n                            articleBody,\r\n                            clearArticleBody: false,\r\n                          }),\r\n                        clearArticleBody: state.clearArticleBody,\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"d-flex flex-column pt-3\">\r\n                  <Widget\r\n                    src={widgets.tagsEditor}\r\n                    props={{\r\n                      forceClear: state.clearTags,\r\n                      stateUpdate: (obj) => State.update(obj),\r\n                      initialTagsObject,\r\n                      placeholder: \"Input tags\",\r\n                      setTagsObject: (tags) => {\r\n                        // state.tags = Object.keys(tags);\r\n                        State.update({\r\n                          tagsModified: true,\r\n                          tags: Object.keys(tags),\r\n                        });\r\n                      },\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            )}\r\n            <div className=\"mt-2 d-flex justify-content-end\">\r\n              <Widget\r\n                src={widgets.newStyledComponents.Input.Button}\r\n                props={{\r\n                  className: \"info outline mx-2\",\r\n                  disabled:\r\n                    state.title.length === 0 || state.articleBody.length === 0,\r\n                  onClick: switchShowPreview,\r\n                  children: (\r\n                    <i\r\n                      className={`bi ${\r\n                        state.showPreview ? \"bi-pencil\" : \"bi-eye-fill\"\r\n                      }`}\r\n                    ></i>\r\n                  ),\r\n                }}\r\n              />\r\n              <Widget\r\n                src={widgets.newStyledComponents.Input.Button}\r\n                props={{\r\n                  className: \"info \",\r\n                  disabled:\r\n                    state.title.length === 0 || state.articleBody.length === 0,\r\n                  onClick: createArticleListener,\r\n                  children: (\r\n                    <div className=\"d-flex justify-conten-center align-items-center\">\r\n                      {state.saving ? (\r\n                        <Spinner />\r\n                      ) : (\r\n                        <>\r\n                          <span>\r\n                            {editArticleData ? \"Save edition\" : \"Post\"}\r\n                          </span>\r\n                          <i className=\"bi bi-check2\"></i>\r\n                        </>\r\n                      )}\r\n                    </div>\r\n                  ),\r\n                }}\r\n              />\r\n            </div>\r\n          </SecondContainer>\r\n          <div style={{ display: \"none\" }}>\r\n            {libSrcArray.map((src) => {\r\n              return callLibs(\r\n                src,\r\n                createStateUpdate,\r\n                state.functionsToCallByLibrary,\r\n                { baseAction: baseActions.articlesBaseAction },\r\n                \"Create\"\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        {/*)}*/}\r\n      </BoxShadow>\r\n    </GeneralContainer>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/NDC.Forum.Create", "fact_widget_deployments_id": "d21131b32285a53a62117637e48ff8f7", "inserted_timestamp": "2023-12-04T03:40:59.677Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 8}