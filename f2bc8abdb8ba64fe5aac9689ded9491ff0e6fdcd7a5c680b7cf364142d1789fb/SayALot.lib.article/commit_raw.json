{"tx_hash": "EGLHbLyMbhMgP3PE1hx6zvTVmGfqp82iDBjKt5qkxDBH", "action_id_social": "3EyvcYsHb8f6ZiAFZDbrntz9HJqmTDZPiD7CE94iCYPP-0-widget", "block_id": 102237104, "block_timestamp": "2023-09-29T16:58:29.358Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "SayALot.lib.article", "source_code": "const { isTest, stateUpdate, libCalls } = props;\r\n\r\n//TODO check if env is still needed since we are not using the whitelist anymore because of the human verification system\r\n\r\nconst prodAction = \"sayALotArticle\";\r\nconst testAction = `test_${prodAction}`;\r\nconst action = isTest ? testAction : prodAction;\r\n\r\nconst authorForWidget =\r\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\r\n//const authorForWidget = \"sayalot.near\";\r\nconst libSrcArray = [`${authorForWidget}/widget/SayALot.lib.SBT`];\r\n\r\nState.init({ libCalls: [] });\r\n\r\nfunction libStateUpdate(obj) {\r\n  State.update(obj);\r\n}\r\n\r\nfunction setAreValidUsers(accountIds, sbt) {\r\n  const newLibCalls = [...state.libCalls];\r\n  accountIds.forEach((accountId) => {\r\n    const isCallPushed =\r\n      newLibCalls.find((libCall) => {\r\n        return (\r\n          libCall.functionName === \"isValidUser\" &&\r\n          libCall.props.accountId === accountId\r\n        );\r\n      }) !== undefined;\r\n\r\n    if (isCallPushed) {\r\n      return;\r\n    }\r\n\r\n    newLibCalls.push({\r\n      functionName: \"isValidUser\",\r\n      key: `isValidUser-${accountId}`,\r\n      props: {\r\n        accountId,\r\n        sbtName: sbt,\r\n      },\r\n    });\r\n  });\r\n  State.update({ libCalls: newLibCalls });\r\n}\r\n\r\nfunction callLibs(srcArray, stateUpdate, libCalls) {\r\n  return (\r\n    <>\r\n      {srcArray.map((src) => {\r\n        return (\r\n          <Widget\r\n            src={src}\r\n            props={{\r\n              isTest,\r\n              stateUpdate,\r\n              libCalls,\r\n            }}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\n// const initLibCalls = [\r\n//   {\r\n//     functionName: \"get1\",\r\n//     key: \"test\",\r\n//     props: {},\r\n//   },\r\n//   {\r\n//     functionName: \"getWritersWhitelist\",\r\n//     key: \"writersWhitelist\",\r\n//     props: { env: \"test\" },\r\n//   },\r\n// ];\r\n\r\n// function getWritersWhitelist(env) {\r\n//   if (env === \"test\") {\r\n//     return [\r\n//       \"silkking.near\",\r\n//       \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\",\r\n//       \"blaze.near\",\r\n//       \"ayelen.near\",\r\n//       \"kenrou-it.near\",\r\n//     ];\r\n//   } else {\r\n//     return [\r\n//       \"neardigitalcollective.near\",\r\n//       \"blaze.near\",\r\n//       \"jlw.near\",\r\n//       \"kazanderdad.near\",\r\n//       \"joep.near\",\r\n//       \"sarahkornfeld.near\",\r\n//       \"yuensid.near\",\r\n//       \"shubham007.near\",\r\n//       \"fiftycent.near\",\r\n//       \"ozymandius.near\",\r\n//       \"chloe.near\",\r\n//     ];\r\n//   }\r\n// }\r\n\r\nfunction canUserCreateArticle(props) {\r\n  const { env, accountId, sbtName } = props;\r\n\r\n  setAreValidUsers([accountId], sbtName);\r\n\r\n  console.log(\"state: \", state);\r\n  console.log(\"isValidUser-${accountId}: \", `isValidUser-${accountId}`);\r\n\r\n  const result = state[`isValidUser-${accountId}`];\r\n\r\n  console.log(\"result: \", result);\r\n\r\n  resultLibCalls = resultLibCalls.filter((call) => {\r\n    return call.functionName !== \"canUserCreateArticle\" && result !== undefined;\r\n  });\r\n\r\n  return result;\r\n\r\n  // return getWritersWhitelist(env).includes(accountId);\r\n}\r\n\r\nfunction canUserEditArticle(props) {\r\n  const { article } = props;\r\n\r\n  return article.author === context.accountId;\r\n}\r\n\r\nfunction createArticle(props) {\r\n  const { article, onCommit, onCancel } = props;\r\n\r\n  saveHandler(article, onCommit, onCancel);\r\n\r\n  resultLibCalls = resultLibCalls.filter((call) => {\r\n    return call.functionName !== \"createArticle\";\r\n  });\r\n\r\n  return article;\r\n}\r\n\r\nfunction composeData(article) {\r\n  let data;\r\n  data = {\r\n    [action]: {\r\n      main: JSON.stringify(article),\r\n    },\r\n    index: {\r\n      [action]: JSON.stringify({\r\n        key: \"main\",\r\n        value: {\r\n          type: \"md\",\r\n          id: article.realArticleId ?? `${context.accountId}-${Date.now()}`,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n\r\n  // if (tagsArray.length) {\r\n  //   data.index.tag = JSON.stringify(\r\n  //     tagsArray.map((tag) => ({\r\n  //       key: tag,\r\n  //       value: item,\r\n  //     }))\r\n  //   );\r\n  // }\r\n\r\n  return data;\r\n}\r\n\r\nconst saveHandler = (article, onCommit, onCancel) => {\r\n  if (article.articleId && article.body) {\r\n    const newData = composeData(article);\r\n\r\n    Social.set(newData, {\r\n      force: true,\r\n      onCommit,\r\n      onCancel,\r\n    });\r\n    // onCancel: () => {\r\n    //   State.update({ saving: false });\r\n    // },\r\n  }\r\n};\r\n\r\nfunction getArticlesIndexes() {\r\n  return Social.index(action, \"main\", {\r\n    order: \"desc\",\r\n    subscribe: true,\r\n  });\r\n}\r\n\r\nfunction getArticleBlackListByBlockHeight() {\r\n  return [\r\n    91092435, 91092174, 91051228, 91092223, 91051203, 98372095, 96414482,\r\n    96412953,\r\n  ];\r\n}\r\n\r\nfunction getArticleBlackListByRealArticleId() {\r\n  return [\r\n    \"blaze.near-1690410074090\",\r\n    \"blaze.near-1690409577184\",\r\n    \"blaze.near-1690803928696\",\r\n    \"blaze.near-1690803872147\",\r\n    \"blaze.near-1690574978421\",\r\n    \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb-1691703303485\",\r\n    \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb-1691702619510\",\r\n    \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb-1691702487944\",\r\n    \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb-1691707918243\",\r\n    \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb-1691707889297\",\r\n  ];\r\n}\r\n\r\nfunction filterInvalidArticlesIndexes(env, articlesIndexes) {\r\n  return (\r\n    articlesIndexes\r\n      .filter((articleIndex) => articleIndex.value.id) // Has realArticleId\r\n      .filter(\r\n        (articleIndex) =>\r\n          articleIndex.value.id.split(\"-\")[0] === articleIndex.accountId\r\n      ) // realArticleId begins with same accountId as index object\r\n      // .filter((articleIndex) =>\r\n      //   getWritersWhitelist(env).includes(articleIndex.accountId)\r\n      // ) // Account is in whitelist\r\n      .filter(\r\n        (articleIndex) =>\r\n          !getArticleBlackListByBlockHeight().includes(articleIndex.blockHeight) // Article is not in blacklist\r\n      )\r\n      .filter(\r\n        (articleIndex) =>\r\n          !getArticleBlackListByRealArticleId().includes(articleIndex.value.id) // Article is not in blacklist\r\n      )\r\n  );\r\n}\r\n\r\nfunction getLatestEdits(newFormatArticlesIndexes) {\r\n  return newFormatArticlesIndexes.filter((articleIndex) => {\r\n    const latestEditForThisArticle = newFormatArticlesIndexes.find(\r\n      (newArticleData) => newArticleData.value.id === articleIndex.value.id\r\n    );\r\n    return (\r\n      JSON.stringify(articleIndex) === JSON.stringify(latestEditForThisArticle)\r\n    );\r\n  });\r\n}\r\n\r\nfunction getArticle(articleIndex) {\r\n  const article = Social.get(\r\n    `${articleIndex.accountId}/${action}/main`,\r\n    articleIndex.blockHeight\r\n  );\r\n\r\n  let articleParsed = undefined;\r\n  if (article) {\r\n    articleParsed = JSON.parse(article);\r\n    articleParsed.blockHeight = articleIndex.blockHeight;\r\n    articleParsed.realArticleId = articleIndex.value.id;\r\n  }\r\n\r\n  if (articleParsed) {\r\n    return articleParsed;\r\n  }\r\n}\r\n\r\nfunction addIAmHumanData(article) {\r\n  const articleIAmHumanData = Near.view(\r\n    \"registry.i-am-human.near\",\r\n    \"sbt_tokens_by_owner\",\r\n    { account: article.author }\r\n  );\r\n\r\n  let newArticleData = undefined;\r\n  if (articleIAmHumanData) {\r\n    newArticleData = article;\r\n    newArtcileData.iAmHumanData = articleIAmHumanData;\r\n  }\r\n\r\n  if (newArticleData) {\r\n    return newArticleData;\r\n  }\r\n}\r\n\r\nfunction getOldArticleBasicDataArray(env) {\r\n  if (env === \"test\") {\r\n    return [\r\n      {\r\n        accountId:\r\n          \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\",\r\n        blockHeight: 97325392,\r\n      },\r\n      {\r\n        accountId:\r\n          \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\",\r\n        blockHeight: 97317287,\r\n      },\r\n      { accountId: \"ayelen.near\", blockHeight: 96927579 },\r\n      { accountId: \"kenrou-it.near\", blockHeight: 96924422 },\r\n      {\r\n        accountId:\r\n          \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\",\r\n        blockHeight: 96879470,\r\n      },\r\n      {\r\n        accountId:\r\n          \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\",\r\n        blockHeight: 96878182,\r\n      },\r\n      {\r\n        accountId:\r\n          \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\",\r\n        blockHeight: 96643643,\r\n      },\r\n      { accountId: \"silkking.near\", blockHeight: 96491128 },\r\n    ];\r\n  } else {\r\n    return [\r\n      { accountId: \"ozymandius.near\", blockHeight: 97329049 },\r\n      { accountId: \"fiftycent.near\", blockHeight: 97322138 },\r\n      { accountId: \"blaze.near\", blockHeight: 97255023 },\r\n      { accountId: \"jlw.near\", blockHeight: 97250015 },\r\n      { accountId: \"kazanderdad.near\", blockHeight: 96692435 },\r\n      // { accountId: \"blaze.near\", blockHeight: 96414482 },\r\n      // { accountId: \"blaze.near\", blockHeight: 96412953 },\r\n      { accountId: \"sarahkornfeld.near\", blockHeight: 96402919 },\r\n      { accountId: \"sarahkornfeld.near\", blockHeight: 96402476 },\r\n      { accountId: \"sarahkornfeld.near\", blockHeight: 96402330 },\r\n      { accountId: \"sarahkornfeld.near\", blockHeight: 96401880 },\r\n      { accountId: \"ozymandius.near\", blockHeight: 95810612 },\r\n      { accountId: \"blaze.near\", blockHeight: 95766756 },\r\n      { accountId: \"blaze.near\", blockHeight: 95766700 },\r\n      { accountId: \"jlw.near\", blockHeight: 95705034 },\r\n      { accountId: \"blaze.near\", blockHeight: 95413943 },\r\n      { accountId: \"blaze.near\", blockHeight: 94936576 },\r\n      { accountId: \"yuensid.near\", blockHeight: 94866690 },\r\n      { accountId: \"sarahkornfeld.near\", blockHeight: 94863580 },\r\n      { accountId: \"blaze.near\", blockHeight: 94801223 },\r\n      { accountId: \"sarahkornfeld.near\", blockHeight: 94344236 },\r\n      { accountId: \"sarahkornfeld.near\", blockHeight: 94188387 },\r\n      { accountId: \"jlw.near\", blockHeight: 93986868 },\r\n      { accountId: \"blaze.near\", blockHeight: 92999498 },\r\n    ];\r\n  }\r\n}\r\n\r\nfunction getNewFormatValidArticles(env, filterBy) {\r\n  const articlesIndexes = getArticlesIndexes(filterBy);\r\n\r\n  const validArticlesIndexes = filterInvalidArticlesIndexes(\r\n    env,\r\n    articlesIndexes\r\n  );\r\n\r\n  const validLatestEdits = getLatestEdits(validArticlesIndexes);\r\n\r\n  return validLatestEdits.map(getArticle);\r\n}\r\n\r\nfunction getOldFormatArticles(env) {\r\n  const oldBasicDataArray = getOldArticleBasicDataArray(env);\r\n  return oldBasicDataArray.map(getArticle);\r\n}\r\n\r\nfunction getLastEditArticles(props) {\r\n  const { env, filterBy, currentValidator } = props;\r\n  const oldFormatArticles = getOldFormatArticles(env);\r\n  const newFormatArticles = getNewFormatValidArticles(env, filterBy);\r\n\r\n  const finalOldFormatArticles = oldFormatArticles.filter(\r\n    (oldFormatArticle) => {\r\n      return !newFormatArticles.find(\r\n        (newFormatArticle) =>\r\n          newFormatArticle.articleId === oldFormatArticle.articleId\r\n      );\r\n    }\r\n  );\r\n\r\n  const lastEditionArticles = newFormatArticles.concat(finalOldFormatArticles);\r\n\r\n  const validFormatLastEditionArticles =\r\n    convertArticlesTagsToValidFormat(lastEditionArticles);\r\n\r\n  const validFormatFilteredArticlesWithIAmHumanData =\r\n    validFormatLastEditionArticles.map(addIAmHumanData);\r\n\r\n  finalArticles = filterArticles(\r\n    filterBy,\r\n    currentValidator,\r\n    validFormatFilteredArticlesWithIAmHumanData\r\n  );\r\n\r\n  return finalArticles;\r\n}\r\n\r\nfunction convertArticlesTagsToValidFormat(articlesArray) {\r\n  let validFormatArticlesArray = [];\r\n  articlesArray.map((article) => {\r\n    if (article) {\r\n      let tags = article.tags;\r\n\r\n      if (tags && !tags.length && tags + \"\" != \"0\") {\r\n        tags = Object.keys(tags);\r\n      }\r\n      article.tags = tags;\r\n\r\n      validFormatArticlesArray.push(article);\r\n    }\r\n  });\r\n  return validFormatArticlesArray;\r\n}\r\n\r\nfunction filterArticlesByTag(tag, articles) {\r\n  return articles.filter((article) => {\r\n    return article.tags.includes(tag);\r\n  });\r\n}\r\n\r\nfunction filterArticlesByAuthor(author, articles) {\r\n  return articles.filter((article) => {\r\n    return article.author === author;\r\n  });\r\n}\r\n\r\nfunction fiterVaidator(articles, currentValidator) {\r\n  return articles.filter((article) => {\r\n    let isValid = false;\r\n    for (let i = 0; i < article.iAmHumanData.length; i++) {\r\n      if (!isValid) {\r\n        isValid = article.iAmHumanData[i][0] === currentValidator;\r\n      }\r\n    }\r\n    return isValid;\r\n  });\r\n}\r\n\r\nfunction filterArticles(filterBy, currentValidator, articles) {\r\n  let filteredArticles;\r\n\r\n  if (filterBy.parameterName == \"tag\") {\r\n    filteredArticles = filterArticlesByTag(filterBy.parameterValue, articles);\r\n  } else if (filterBy.parameterName == \"author\") {\r\n    filteredArticles = filterArticlesByAuthor(\r\n      filterBy.parameterValue,\r\n      articles\r\n    );\r\n  }\r\n  filteredArticles = fiterVaidator(articles, currentValidator);\r\n\r\n  return filteredArticles;\r\n}\r\n\r\nfunction libCall(call) {\r\n  if (call.functionName === \"canUserCreateArticle\") {\r\n    return canUserCreateArticle(call.props);\r\n  } else if (call.functionName === \"createArticle\") {\r\n    return createArticle(call.props);\r\n  } else if (call.functionName === \"canUserEditArticle\") {\r\n    return canUserEditArticle(call.props);\r\n  } else if (call.functionName === \"getLastEditArticles\") {\r\n    return getLastEditArticles(call.props);\r\n  }\r\n}\r\n\r\nfunction getComments(args) {\r\n  const { realArticleId } = args;\r\n  const key = realArticleId;\r\n  return Social.index(action, key);\r\n}\r\n\r\nfunction setComment(args) {\r\n  const { realArticleId, text, previousCommentId } = args;\r\n  const data = {\r\n    index: {\r\n      [action]: JSON.stringify({\r\n        key: realArticleId,\r\n        value: {\r\n          text,\r\n          id: `${realArticleId}-${Date.now()}`,\r\n          previousCommentId,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n  Social.set(data);\r\n\r\n  resultLibCalls = resultLibCalls.filter((call) => {\r\n    return call.functionName !== \"setComment\";\r\n  });\r\n\r\n  return text;\r\n}\r\n\r\nlet resultLibCalls = [];\r\n\r\nif (libCalls && libCalls.length > 0) {\r\n  const updateObj = {};\r\n  resultLibCalls = [...libCalls];\r\n  libCalls.forEach((call) => {\r\n    updateObj[call.key] = libCall(call);\r\n  });\r\n\r\n  updateObj.libCalls = resultLibCalls;\r\n  stateUpdate(updateObj);\r\n}\r\n\r\nconsole.log(\"algun numerito random\", state);\r\n\r\nreturn <>{callLibs(libSrcArray, libStateUpdate, state.libCalls)}</>;\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/SayALot.lib.article", "fact_widget_deployments_id": "a32f2cbe3886145159b12c18af2d3d86", "inserted_timestamp": "2023-09-29T18:47:24.876Z", "modified_timestamp": "2023-09-29T18:47:24.876Z", "__row_index": 124}