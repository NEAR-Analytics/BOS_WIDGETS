{"tx_hash": "9D9uCr3gNtxwuMso1ckEemoawWN3whn3BeCFLRc48uH3", "action_id_social": "5nBF1Ay69R3CDVcLUVBPDHzDN3tyguhHCEGLDiD2cYGF-0-widget", "block_id": 94265856, "block_timestamp": "2023-06-15T21:36:03.255Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "EasyPoll.Questions", "source_code": "let sharedBlockHeight = props.sharedBlockHeight;\r\nlet whitelist = props.whitelist;\r\nconst indexVersion = props.indexVersion ?? \"3.2.0\";\r\n\r\nState.init({\r\n  polls: {},\r\n  showQuestion: sharedBlockHeight,\r\n  modalBlockHeight: sharedBlockHeight ?? question.blockHeight,\r\n});\r\n\r\nconst widgetOwner =\r\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\r\nconst canOperate = props.canOperate;\r\n\r\nlet globalAccountId = props.accountId ?? context.accountId;\r\n\r\nconst onlyUsersPolls = props.onlyUser ?? false;\r\n\r\nconst getFirstSBTToken = (accountId) => {\r\n  const view = Near.view(\"registry.i-am-human.near\", \"sbt_tokens_by_owner\", {\r\n    account: accountId,\r\n    issuer: \"fractal.i-am-human.near\",\r\n  });\r\n  return view?.[0]?.[1]?.[0];\r\n};\r\n\r\nconst shouldDisplayUserQuestions = (accountId) => {\r\n  return (\r\n    getFirstSBTToken(accountId) !== undefined || whitelist.includes(accountId)\r\n  );\r\n};\r\n\r\nlet polls = Social.index(\"poll_question\", `question-v${indexVersion}`);\r\n\r\nif (JSON.stringify(polls) != JSON.stringify(state.polls)) {\r\n  State.update({ polls: polls });\r\n}\r\nif (!polls) {\r\n  return \"Loading\";\r\n}\r\nconsole.log(polls);\r\n\r\npolls = polls.filter((p) => shouldDisplayUserQuestions(p.accountId));\r\n\r\nif (onlyUsersPolls) {\r\n  polls = state.polls.filter((poll) => {\r\n    if (poll.accountId == globalAccountId) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  });\r\n}\r\n\r\npolls = polls.sort((q1, q2) => {\r\n  const isQ1Finished = q1.value.endTimestamp < Date.now();\r\n  const isQ2Finished = q2.value.endTimestamp < Date.now();\r\n  if (isQ1Finished && !isQ2Finished) return 1;\r\n  if (!isQ1Finished && isQ2Finished) return -1;\r\n  if (isQ1Finished && isQ2Finished)\r\n    return q2.value.endTimestamp - q1.value.endTimestamp;\r\n  return q1.value.endTimestamp - q2.value.endTimestamp;\r\n});\r\n\r\nlet usersMakingQuestions = [];\r\nfor (let i = 0; i < polls.length; i++) {\r\n  if (!usersMakingQuestions.includes(polls[i].accountId)) {\r\n    usersMakingQuestions.push(polls[i].accountId);\r\n  }\r\n}\r\n\r\nfunction closeModalClickingOnTransparent() {\r\n  return (e) => {\r\n    e.target.id == \"modal\" && State.update({ showQuestion: false });\r\n  };\r\n}\r\n\r\nconst GridDiv = styled.div`\r\n  grid-template-columns: repeat(${(props) =>\r\n    props.onlyUsersPolls ? \"2\" : \"3\"}, 1fr);\r\n  @media screen and (max-width: 1024px)  {\r\n      grid-template-columns:repeat(2,1fr);\r\n  }\r\n  @media screen and (max-width: 768px)  {\r\n      grid-template-columns:repeat(1,1fr);\r\n  }\r\n  display: grid;\r\n`;\r\n\r\nconst renderModal = () => {\r\n  return (\r\n    <div\r\n      className=\"modal\"\r\n      id=\"modal\"\r\n      style={\r\n        state.showQuestion && { display: \"block\", backgroundColor: \"#7e7e7e70\" }\r\n      }\r\n      tabindex=\"-1\"\r\n      role=\"dialog\"\r\n      onClick={closeModalClickingOnTransparent()}\r\n    >\r\n      <div className=\"modal-dialog\" style={{ maxWidth: \"95%\" }} role=\"document\">\r\n        <div\r\n          className=\"modal-content\"\r\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\r\n        >\r\n          <div className=\"modal-header flex-row-reverse\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"close\"\r\n              dataDismiss=\"modal\"\r\n              ariaLabel=\"Close\"\r\n              onClick={() => State.update({ showQuestion: false })}\r\n            >\r\n              <span ariaHidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <div className=\"modal-body\" style={{ backgroundColor: \"#FAFAFB\" }}>\r\n            <Widget\r\n              src={`${widgetOwner}/widget/EasyPoll.Voting`}\r\n              props={{\r\n                blockHeight: state.modalBlockHeight,\r\n                shouldDisplayViewAll: false,\r\n                indexVersion,\r\n                canOperate,\r\n                whitelist,\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-dismiss=\"modal\"\r\n              onClick={() => State.update({ showQuestion: false })}\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst renderPolls = (onlyUsersPolls) => {\r\n  if (onlyUsersPolls) {\r\n    return polls.map((poll, index) => {\r\n      return (\r\n        <div\r\n          className=\"mx-1 py-3 px-4 my-2\"\r\n          style={\r\n            polls.length == 1\r\n              ? {\r\n                  boxSizing: \"border-box\",\r\n                  boxShadow: \"0px 8px 28px rgba(43, 68, 106, 0.05)\",\r\n                  backgroundColor: \"white\",\r\n                  borderRadius: \"1rem\",\r\n                  cursor: \"pointer\",\r\n                }\r\n              : {\r\n                  boxSizing: \"border-box\",\r\n                  boxShadow: \"0px 8px 28px rgba(43, 68, 106, 0.05)\",\r\n                  backgroundColor: \"white\",\r\n                  borderRadius: \"1rem\",\r\n                  cursor: \"pointer\",\r\n                }\r\n          }\r\n          onClick={() => {\r\n            State.update({\r\n              showQuestion: true,\r\n              modalBlockHeight: poll.blockHeight,\r\n            });\r\n          }}\r\n        >\r\n          <Widget\r\n            src={`${widgetOwner}/widget/EasyPoll.MinimalistQuestionHeader`}\r\n            props={{ ...poll }}\r\n          />\r\n          <Widget\r\n            src={`${widgetOwner}/widget/EasyPoll.MinimalistQuestionInfo`}\r\n            props={{ ...poll, indexVersion }}\r\n          />\r\n        </div>\r\n      );\r\n    });\r\n  } else {\r\n    return (\r\n      <>\r\n        {usersMakingQuestions.map((accountId) => {\r\n          return (\r\n            <div\r\n              className=\"mx-1 py-3 px-4 my-2\"\r\n              style={{\r\n                boxSizing: \"border-box\",\r\n                boxShadow: \"0px 8px 28px rgba(43, 68, 106, 0.05)\",\r\n                backgroundColor: \"white\",\r\n                borderRadius: \"1rem\",\r\n              }}\r\n            >\r\n              <Widget\r\n                src={`${widgetOwner}/widget/EasyPoll.QuestionHeader`}\r\n                props={{ allUsersQuestions: polls, accountId }}\r\n              />\r\n              <Widget\r\n                src={`${widgetOwner}/widget/EasyPoll.QuestionsByCreator`}\r\n                props={{ accountId, indexVersion, canOperate, whitelist }}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nreturn (\r\n  <div\r\n    style={{\r\n      borderRadius: \"3px\",\r\n      backgroundColor: \"rgb(230, 230, 230)\",\r\n    }}\r\n  >\r\n    <GridDiv onlyUsersPolls={onlyUsersPolls}>\r\n      {renderPolls(onlyUsersPolls)}\r\n    </GridDiv>\r\n    {/*TODO add a page picker instead the infinite scroll?*/}\r\n    {state.showQuestion && renderModal()}\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/EasyPoll.Questions", "fact_widget_deployments_id": "bbb5b3fc02a4ad3450f9304f9ce90e0f", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 0}