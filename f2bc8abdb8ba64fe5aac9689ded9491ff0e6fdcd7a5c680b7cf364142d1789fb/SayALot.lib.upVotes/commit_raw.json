{"tx_hash": "6t1kKAsGhNaDNib9vVd6j27NcN2NF6Gj7i77TD8M4gyH", "action_id_social": "7PRpxBT9iqzCyg23YJwaDyVKcWkQDSoAKoUsboePWgdb-0-widget", "block_id": 99123257, "block_timestamp": "2023-08-18T23:20:53.170Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "SayALot.lib.upVotes", "source_code": "const { isTest, stateUpdate, libCalls } = props;\r\n\r\nconst prodAction = \"sayALotUpVote-v1.0.0\";\r\nconst testAction = `test_${prodAction}`;\r\nconst action = isTest ? testAction : prodAction;\r\n\r\n// ========= GET UPVOTES STATISTICS =========\r\nfunction countUpVotes(arrayLastInteractionForEachUser) {\r\n  let upVotes =\r\n    arrayLastInteractionForEachUser &&\r\n    arrayLastInteractionForEachUser.filter(\r\n      (interaction) => !interaction.value.deleteReaction\r\n    );\r\n  return upVotes.length;\r\n}\r\n\r\nfunction getUpVotes(props) {\r\n  const { realArticleId } = props;\r\n  // const { realArticleId, createdInteraction } = props;\r\n\r\n  const allVotes = Social.index(action, realArticleId, {\r\n    order: \"desc\",\r\n    subscribe: true,\r\n  });\r\n\r\n  // const uniqueAccounts = [];\r\n  let upVotes =\r\n    allVotes &&\r\n    allVotes\r\n      .filter((obj) => {\r\n        const userLatestInteraction = allVotes.find(\r\n          (vote) => vote.accountId === obj.accountId\r\n        );\r\n        return JSON.stringify(userLatestInteraction) === JSON.stringify(obj);\r\n        // if (!uniqueAccounts.includes(obj.accountId)) {\r\n        //   // uniqueAccounts.push(obj.accountId);\r\n        //   return true;\r\n        // }\r\n        // return false;\r\n      })\r\n      .filter((vote) => !vote.value.isDelete) ?? [];\r\n  return upVotes;\r\n\r\n  // const userInteraction =\r\n  //   upVotes &&\r\n  //   upVotes.find((obj) => {\r\n  //     return obj.accountId === context.accountId;\r\n  //   });\r\n\r\n  // if (userInteraction && createdInteraction) {\r\n  //   const newArrayOfLastInteractions = upVotes\r\n  //     .filter((obj) => {\r\n  //       return obj.accountId !== context.accountId;\r\n  //     })\r\n  //     .push({\r\n  //       accountId: context.accountId,\r\n  //       value: {\r\n  //         type: \"md\",\r\n  //         deleteReaction: createdInteraction.value.deleteReaction,\r\n  //       },\r\n  //     });\r\n\r\n  //   upVotes = newArrayOfLastInteractions;\r\n  // }\r\n\r\n  // return {\r\n  //   reactionsStatistics: countUpVotes(upVotes),\r\n  //   userInteraction,\r\n  // };\r\n}\r\n\r\nfunction addVote(props) {\r\n  const { realArticleId } = props;\r\n  console.log(\"in addVote\")\r\n  saveUpVote(realArticleId);\r\n\r\n  resultLibCalls = resultLibCalls.filter((call) => {\r\n    return call.functionName !== \"addVote\";\r\n  });\r\n\r\n  return upVote;\r\n}\r\n\r\nfunction deleteVote(props) {\r\n  const { realArticleId, upVoteId } = props;\r\n\r\n  saveDeleteVote(realArticleId, upVoteId);\r\n\r\n  resultLibCalls = resultLibCalls.filter((call) => {\r\n    return call.functionName !== \"deleteVote\";\r\n  });\r\n}\r\n\r\nfunction saveDeleteVote(realArticleId, upVoteId) {\r\n  const newData = composeDeleteUpVoteData(realArticleId, upVoteId);\r\n\r\n  Social.set(newData, {\r\n    force: true,\r\n  });\r\n}\r\n\r\nfunction composeDeleteUpVoteData(realArticleId, upVoteId) {\r\n  const data = {\r\n    index: {\r\n      [action]: JSON.stringify({\r\n        key: realArticleId,\r\n        value: {\r\n          isDelete: true,\r\n          upVoteId,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n\r\n  return data;\r\n}\r\n\r\nfunction composeUpVoteData(realArticleId) {\r\n  console.log(\"in composeData\")\r\n  const data = {\r\n    index: {\r\n      [action]: JSON.stringify({\r\n        key: realArticleId,\r\n        value: {\r\n          upVoteId: `uv-${context.accountId}-${Date.now()}`,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n\r\n  return data;\r\n}\r\n\r\nfunction saveUpVote(realArticleId) {\r\n  console.log(\"in saveUpVote\")\r\n  const newData = composeUpVoteData(realArticleId);\r\n\r\n  Social.set(newData, {\r\n    force: true,\r\n  });\r\n}\r\n\r\nfunction libCall(call) {\r\n  if (call.functionName === \"getUpVotes\") {\r\n    return getUpVotes(call.props);\r\n  } else if (call.functionName === \"addVote\") {\r\n    return addVote(call.props);\r\n  } else if (call.functionName === \"deleteVote\") {\r\n    return deleteVote(call.props);\r\n  }\r\n}\r\n\r\nlet resultLibCalls = [];\r\nif (libCalls && libCalls.length > 0) {\r\n  // console.log(\r\n  //   \"Calling functions\",\r\n  //   libCalls.map((lc) => lc.functionName)\r\n  // );\r\n  const updateObj = {};\r\n  resultLibCalls = [...libCalls];\r\n  libCalls.forEach((call) => {\r\n    updateObj[call.key] = libCall(call);\r\n  });\r\n\r\n  updateObj.libCalls = resultLibCalls;\r\n  stateUpdate(updateObj);\r\n}\r\n\r\nreturn <></>;\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/SayALot.lib.upVotes", "fact_widget_deployments_id": "a03e152c580d4d1b912af3856ee0f012", "inserted_timestamp": "2023-08-19T00:57:01.027Z", "modified_timestamp": "2023-08-19T00:57:01.027Z", "__row_index": 19}