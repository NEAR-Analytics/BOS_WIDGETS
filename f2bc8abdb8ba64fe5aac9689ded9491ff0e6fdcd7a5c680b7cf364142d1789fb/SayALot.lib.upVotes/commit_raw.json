{"tx_hash": "HkjEtRY2MyWjDCxNnU9vzZ9bwRwoBBcikyuDmozRVNgK", "action_id_social": "AgZLRhpxSvHySCkqYUFMFDZ6jqAg1kuZKQtpT2BCHCKo-0-widget", "block_id": 98957018, "block_timestamp": "2023-08-16T18:52:18.757Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "SayALot.lib.upVotes", "source_code": "const { isTest, stateUpdate, libCalls } = props;\r\n\r\nconst prodAction = \"sayALotUpVote\";\r\nconst testAction = `test_${prodAction}`;\r\nconst action = isTest ? testAction : prodAction;\r\n\r\nfunction getUpVotes(props) {\r\n  const { elementReactedId, createdInteraction } = props;\r\n\r\n  const allVotes = Social.index(action, elementReactedId, {\r\n    order: \"desc\",\r\n  });\r\n\r\n  const uniqueAccounts = [];\r\n  let arrayLastInteractionForEachUser =\r\n    allVotes &&\r\n    allVotes.filter((obj) => {\r\n      if (!uniqueAccounts.includes(obj.accountId)) {\r\n        uniqueAccounts.push(obj.accountId);\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n\r\n  const userInteraction =\r\n    arrayLastInteractionForEachUser &&\r\n    arrayLastInteractionForEachUser.find((obj) => {\r\n      return obj.accountId === context.accountId;\r\n    });\r\n\r\n  if (userInteraction && createdInteraction) {\r\n    const newArrayOfLastInteractions = arrayLastInteractionForEachUser\r\n      .filter((obj) => {\r\n        return obj.accountId !== context.accountId;\r\n      })\r\n      .push({\r\n        accountId: context.accountId,\r\n        value: {\r\n          type: \"md\",\r\n          deleteReaction: createdInteraction.value.deleteReaction,\r\n        },\r\n      });\r\n\r\n    arrayLastInteractionForEachUser = newArrayOfLastInteractions;\r\n  }\r\n\r\n  // ========= GET UPVOTES STATISTICS =========\r\n  function countUpVotes() {\r\n    let upVotes =\r\n      arrayLastInteractionForEachUser &&\r\n      arrayLastInteractionForEachUser.filter(\r\n        (interaction) => !interaction.value.deleteReaction\r\n      );\r\n    return upVotes.length;\r\n  }\r\n\r\n  return { reactionsStatistics: countUpVotes(), userInteraction };\r\n}\r\n\r\nfunction addVote(props) {\r\n  const { isDelete, elementReactedId, onCommit, onCancel } = props;\r\n\r\n  saveUpVote(isDelete, elementReactedId, onCommit, onCancel);\r\n\r\n  resultLibCalls = resultLibCalls.filter((call) => {\r\n    return call.functionName !== \"addVote\";\r\n  });\r\n\r\n  return upVote;\r\n}\r\n\r\nfunction composeUpVoteData(isDelete, elementReactedId) {\r\n  const data = {\r\n    index: {\r\n      [action]: JSON.stringify({\r\n        key: elementReactedId,\r\n        value: {\r\n          type: \"md\",\r\n          deleteReaction: isDelete,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n\r\n  return data;\r\n}\r\n\r\nfunction saveUpVote(isDelete, elementReactedId, onCommit, onCancel) {\r\n  const newData = composeUpVoteData(isDelete, elementReactedId);\r\n\r\n  Social.set(newData, {\r\n    force: true,\r\n    onCommit,\r\n    onCancel,\r\n  });\r\n}\r\n\r\nfunction libCall(call) {\r\n  if (call.functionName === \"getUpVotes\") {\r\n    return getUpVotes(call.props);\r\n  } else if (call.functionName === \"addVote\") {\r\n    return addVote(call.props);\r\n  }\r\n}\r\n\r\nlet resultLibCalls = [];\r\nif (libCalls && libCalls.length > 0) {\r\n  // console.log(\r\n  //   \"Calling functions\",\r\n  //   libCalls.map((lc) => lc.functionName)\r\n  // );\r\n  const updateObj = {};\r\n  resultLibCalls = [...libCalls];\r\n  libCalls.forEach((call) => {\r\n    updateObj[call.key] = libCall(call);\r\n  });\r\n\r\n  updateObj.libCalls = resultLibCalls;\r\n  stateUpdate(updateObj);\r\n}\r\n\r\nreturn <></>;\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/SayALot.lib.upVotes", "fact_widget_deployments_id": "d6b10cde2268b768fead49eb43ed0b19", "inserted_timestamp": "2023-08-16T20:43:42.976Z", "modified_timestamp": "2023-08-16T20:43:42.976Z", "__row_index": 26}