{"tx_hash": "4s7Ka9jL8n2kME5fPN9xQhZWBErqcjqmtHy8iYZzbPkP", "action_id_social": "ABUyJcNhj2JqMqd3SLrk9a9tYoyW8Gcd62VgiU9qvoQ2-0-widget", "block_id": 107107832, "block_timestamp": "2023-12-04T02:37:16.874Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "lib.comment", "source_code": "// lib.comment\r\nconst {\r\n  mainStateUpdate,\r\n  isTest,\r\n  stateUpdate,\r\n  functionsToCallByLibrary,\r\n  callLibs,\r\n  baseAction,\r\n  widgets,\r\n  usersSBTs,\r\n} = props;\r\n\r\nconst libName = \"comment\"; // EDIT: set lib name\r\nconst functionsToCall = functionsToCallByLibrary[libName];\r\n\r\nlet resultFunctionsToCallByLibrary = Object.assign(\r\n  {},\r\n  functionsToCallByLibrary\r\n);\r\nlet resultFunctionsToCall = [];\r\n\r\nconst currentVersion = \"0.0.2\"; // EDIT: Set version\r\n\r\nconst prodAction = `${baseAction}_v${currentVersion}`; // TODO consider versions\r\n// const prodAction = `${baseAction}`;\r\nconst testAction = `test_${prodAction}`;\r\nconst action = isTest ? testAction : prodAction;\r\n\r\n// START LIB CALLS SECTION\r\n// interface FunctionCall {\r\n//     functionName: string,\r\n//     key: string, // The state of the caller will be updated with this string as a key\r\n//     props: Record<string, any> // function parameters as object\r\n// }\r\n\r\n// type LibsCalls = Record<string, FunctionCall> // Key is lib name after lib.\r\n\r\nconst libSrcArray = [widgets.libSBT]; // string to lib widget // EDIT: set libs to call\r\n\r\nconst libsCalls = {};\r\nlibSrcArray.forEach((libSrc) => {\r\n  const libName = libSrc.split(\"lib.\")[1];\r\n  libsCalls[libName] = [];\r\n});\r\n\r\nState.init({\r\n  libsCalls, // is a LibsCalls object\r\n});\r\n// END LIB CALLS SECTION\r\n\r\nfunction log(message) {\r\n  console.log(`lib.${libName}`, message);\r\n}\r\n\r\nfunction logError(message) {\r\n  console.error(`lib.${libName}`, message);\r\n}\r\n\r\nfunction libStateUpdate(obj) {\r\n  State.update(obj);\r\n}\r\n\r\n// START LIB FUNCTIONS: EDIT set functions you need\r\n\r\nfunction canUserCreateComment(props) {\r\n  const { accountId, sbtsNames } = props;\r\n\r\n  if (sbtsNames.includes(\"public\")) return true;\r\n\r\n  if (accountId) {\r\n    setAreValidUsers([accountId], sbtsNames);\r\n  } else {\r\n    return false;\r\n  }\r\n\r\n  let allSBTsValidations = [];\r\n\r\n  let result;\r\n\r\n  let userCredentials =\r\n    usersSBTs.find((data) => data.user === accountId).credentials ??\r\n    state[`isValidUser-${accountId}`];\r\n\r\n  if (userCredentials) {\r\n    const allSBTs = Object.keys(userCredentials);\r\n\r\n    allSBTs.forEach((sbt) => {\r\n      sbt !== \"public\" && allSBTsValidations.push(userCredentials[sbt]);\r\n    });\r\n\r\n    result = allSBTsValidations.includes(true);\r\n  }\r\n\r\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n    const discardCondition =\r\n      call.functionName === \"canUserCreateComment\" && result !== undefined;\r\n    return !discardCondition;\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nfunction setAreValidUsers(accountIds, sbtsNames) {\r\n  const newLibCalls = Object.assign({}, state.libsCalls);\r\n\r\n  if (newLibsCalls && !newLibsCalls.SBT) {\r\n    logError(\"Key SBT is not set in lib.\", libName);\r\n  }\r\n\r\n  accountIds.forEach((accountId) => {\r\n    const isCallPushed =\r\n      newLibCalls.SBT.find((libCall) => {\r\n        return (\r\n          libCall.functionName === \"isValidUser\" &&\r\n          libCall.props.accountId === accountId\r\n        );\r\n      }) !== undefined;\r\n    const isCallReturned = state[`isValidUser-${accountId}`] !== undefined;\r\n\r\n    if (isCallPushed || isCallReturned) {\r\n      return;\r\n    }\r\n\r\n    const existingUserSBTs = usersSBTs.find(\r\n      (userSBTs) => userSBTs.user === accountId\r\n    );\r\n\r\n    if (!existingUserSBTs) {\r\n      newLibCalls.SBT.push({\r\n        functionName: \"isValidUser\",\r\n        key: `isValidUser-${accountId}`,\r\n        props: {\r\n          accountId,\r\n        },\r\n      });\r\n    }\r\n  });\r\n  State.update({ libCalls: newLibCalls });\r\n}\r\n\r\nfunction createComment(props) {\r\n  const { comment, onClick, onCommit, onCancel } = props;\r\n\r\n  onClick();\r\n\r\n  saveComment(comment, onCommit, onCancel);\r\n\r\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n    return call.functionName !== \"createComment\";\r\n  });\r\n\r\n  return comment;\r\n}\r\n\r\nfunction composeCommentData(comment) {\r\n  const data = {\r\n    index: {\r\n      [action]: JSON.stringify({\r\n        key: comment.id,\r\n        value: {\r\n          type: \"md\",\r\n          comment,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n\r\n  return data;\r\n}\r\n\r\nfunction saveComment(comment, onCommit, onCancel) {\r\n  if (comment.text) {\r\n    const newData = composeCommentData(comment);\r\n    Social.set(newData, {\r\n      force: true,\r\n      onCommit,\r\n      onCancel,\r\n    });\r\n  }\r\n}\r\n\r\nfunction getComments(action, id, subscribe) {\r\n  return Social.index(action, id, {\r\n    order: \"desc\",\r\n    subscribe,\r\n  });\r\n}\r\n\r\nfunction getCommentBlackListByBlockHeight() {\r\n  return [98588599];\r\n}\r\n\r\nfunction filterInvalidComments(comments) {\r\n  return comments.filter(\r\n    (comment) =>\r\n      comment.blockHeight &&\r\n      !getCommentBlackListByBlockHeight().includes(comment.blockHeight) // Comment is not in blacklist\r\n  );\r\n}\r\n\r\nfunction getValidComments(props) {\r\n  const { env, articleSbts, id } = props;\r\n  // Call other libs\r\n  const normComments = getCommentsNormalized(env, id);\r\n\r\n  const commentsAuthors = normComments.map((comment) => {\r\n    return comment.accountId;\r\n  });\r\n\r\n  setAreValidUsers(commentsAuthors, articleSbts);\r\n\r\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\r\n    const discardCondition =\r\n      call.functionName === \"getValidComments\" &&\r\n      state[`isValidUser-${call.props.accountId}`] !== undefined;\r\n    return !discardCondition;\r\n  });\r\n\r\n  const finalComments = filterValidComments(normComments, articleSbts);\r\n\r\n  return finalComments;\r\n}\r\n\r\nfunction filterValidator(comments, articleSbts) {\r\n  if (articleSbts.includes(\"public\")) return comments;\r\n\r\n  return comments.filter((comment) => {\r\n    let allSBTsValidations = [];\r\n\r\n    let result;\r\n\r\n    let userCredentials =\r\n      usersSBTs.find((data) => data.user === comment.accountId).credentials ??\r\n      state[`isValidUser-${comment.accountId}`];\r\n\r\n    if (userCredentials) {\r\n      const allSBTs = Object.keys(userCredentials);\r\n\r\n      allSBTs.forEach((sbt) => {\r\n        sbt !== \"public\" && allSBTsValidations.push(userCredentials[sbt]);\r\n      });\r\n\r\n      result = allSBTsValidations.includes(true);\r\n    }\r\n\r\n    return result;\r\n\r\n    // return (\r\n    //   articleSbts.find((sbt) => {\r\n    //     return (\r\n    //       state[`isValidUser-${comment.accountId}`][sbt] ||\r\n    //       commentSbt === \"public\"\r\n    //     );\r\n    //   }) !== undefined\r\n    // );\r\n  });\r\n}\r\n\r\nfunction filterValidComments(comments, articleSbts) {\r\n  let filteredComments = filterValidator(\r\n    filteredComments ?? comments,\r\n    articleSbts\r\n  );\r\n\r\n  return filteredComments;\r\n}\r\n\r\nfunction getCommentsNormalized(env, id) {\r\n  const commentsByVersion = Object.keys(versions).map((version, index, arr) => {\r\n    const action = versions[version].action;\r\n    const subscribe = index + 1 === arr.length;\r\n\r\n    const comments = getComments(action, id, subscribe);\r\n    if (!comments) return [];\r\n\r\n    const validComments = filterInvalidComments(comments);\r\n\r\n    return validComments;\r\n  });\r\n\r\n  return normalizeLibData(commentsByVersion);\r\n}\r\n\r\nfunction normalizeOldToV_0_0_1(comment) {\r\n  return comment;\r\n}\r\n\r\nfunction normalizeFromV0_0_1ToV0_0_2(comment) {\r\n  return comment;\r\n}\r\n\r\nfunction normalizeFromV0_0_2ToV0_0_3(comment) {\r\n  return comment;\r\n}\r\n// END LIB FUNCTIONS\r\n\r\n// EDIT: set functions you want to export\r\nfunction callFunction(call) {\r\n  if (call.functionName === \"createComment\") {\r\n    return createComment(call.props);\r\n  } else if (call.functionName === \"getValidComments\") {\r\n    return getValidComments(call.props);\r\n  } else if (call.functionName === \"canUserCreateComment\") {\r\n    return canUserCreateComment(call.props);\r\n  }\r\n}\r\n\r\n// EDIT: set versions you want to handle, considering their action to Social.index and the way to transform to one version to another (normalization)\r\nconst versions = {\r\n  old: {\r\n    normalizationFunction: normalizeOldToV_0_0_1,\r\n    action: props.isTest ? `test_${baseAction}` : baseAction,\r\n  },\r\n  \"v1.0.1\": {\r\n    normalizationFunction: normalizeFromV0_0_1ToV0_0_2,\r\n    action: props.isTest ? `test_${baseAction}-v1.0.1` : `${baseAction}-v1.0.1`,\r\n  },\r\n  \"v0.0.2\": {\r\n    normalizationFunction: normalizeFromV0_0_2ToV0_0_3,\r\n    action: props.isTest ? `test_${baseAction}_v0.0.2` : `${baseAction}_v0.0.2`,\r\n  },\r\n};\r\n\r\nfunction normalizeLibData(libDataByVersion) {\r\n  let libData;\r\n\r\n  Object.keys(versions).forEach((version, index, array) => {\r\n    const normFn = versions[version].normalizationFunction;\r\n    const normLibData = libDataByVersion[index].map((libData, i) => {\r\n      return normFn(libData);\r\n    });\r\n\r\n    if (index + 1 === array.length) {\r\n      // Last index\r\n      libData = normLibData;\r\n      return;\r\n    }\r\n    libDataByVersion[index + 1] =\r\n      libDataByVersion[index + 1].concat(normLibData);\r\n  });\r\n\r\n  return libData;\r\n}\r\n\r\nif (functionsToCall && functionsToCall.length > 0) {\r\n  const updateObj = Object.assign({}, functionsToCallByLibrary);\r\n  resultFunctionsToCall = [...functionsToCall];\r\n  functionsToCall.forEach((call) => {\r\n    updateObj[call.key] = callFunction(call);\r\n  });\r\n\r\n  resultFunctionsToCallByLibrary[libName] = resultFunctionsToCall;\r\n  updateObj.functionsToCallByLibrary = resultFunctionsToCallByLibrary;\r\n\r\n  const oldUsersSBTs = usersSBTs;\r\n  // {\r\n  //   user: string,\r\n  //   credentials: {},\r\n  // }\r\n\r\n  const newUsersSBTs = Object.keys(state).map((key) => {\r\n    if (key.includes(\"isValidUser-\")) {\r\n      if (state[key] !== undefined) {\r\n        const user = key.split(\"isValidUser-\")[1];\r\n        const credentials = state[key];\r\n\r\n        const oldUsers = oldUsersSBTs.map((userSbts) => userSbts.user);\r\n\r\n        if (!oldUsers.includes(user)) {\r\n          return {\r\n            user,\r\n            credentials,\r\n          };\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  const finalUsersSBTs = [...oldUsersSBTs, ...newUsersSBTs].filter(\r\n    (userSBTs) => userSBTs !== undefined\r\n  );\r\n\r\n  if (finalUsersSBTs[0]) {\r\n    mainStateUpdate({ usersSBTs: finalUsersSBTs });\r\n  }\r\n\r\n  stateUpdate(updateObj);\r\n}\r\n\r\n// function callLibs(\r\n//   src,\r\n//   stateUpdate,\r\n//   functionsToCallByLibrary,\r\n//   extraProps,\r\n//   callerWidget\r\n// ) {\r\n//   return (\r\n//     <Widget\r\n//       src={src}\r\n//       props={{\r\n//         isTest,\r\n//         stateUpdate,\r\n//         functionsToCallByLibrary,\r\n//         callLibs,\r\n//         widgets,\r\n//         ...extraProps,\r\n//       }}\r\n//     />\r\n//   );\r\n// }\r\n\r\nreturn (\r\n  <>\r\n    {libSrcArray.map((src) => {\r\n      return callLibs(\r\n        src,\r\n        libStateUpdate,\r\n        state.libsCalls,\r\n        {},\r\n        `lib.${libName}`\r\n      );\r\n    })}\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/lib.comment", "fact_widget_deployments_id": "6b8f5436ee93f7a89bd547c8d2e307d5", "inserted_timestamp": "2023-12-04T03:50:13.057Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 27}