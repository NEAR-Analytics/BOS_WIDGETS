{"tx_hash": "DLCpuGQoYaguTY4mDVge5DTSG9RE6y7MPyD62YD6ecM9", "action_id_social": "Gn1MCDSnKXijYW9f2ARpQdPxqVB4Ec43SLMC6AbpLVRJ-0-widget", "block_id": 98813927, "block_timestamp": "2023-08-14T21:54:26.821Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "SayALot.lib.emojis", "source_code": "const { isTest, stateUpdate, libCalls } = props;\r\n\r\nconst prodAction = \"sayALotReaction\";\r\nconst testAction = `test_${prodAction}`;\r\nconst action = isTest ? testAction : prodAction;\r\n\r\nfunction createReaction(props) {\r\n  const { reaction, onCommit, onCancel } = props;\r\n\r\n  saveReaction(reaction, onCommit, onCancel);\r\n\r\n  resultLibCalls = resultLibCalls.filter((call) => {\r\n    return call.functionName !== \"createReaction\";\r\n  });\r\n\r\n  return reaction;\r\n}\r\n\r\nfunction composeReactionData(reaction) {\r\n  const data = {\r\n    index: {\r\n      [action]: JSON.stringify({\r\n        key: reaction.realArticleId,\r\n        value: {\r\n          type: \"md\",\r\n          reaction,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n\r\n  return data;\r\n}\r\n\r\nfunction saveReaction(reaction, onCommit, onCancel) {\r\n  if (reaction) {\r\n    const newData = composeReactionData(reaction);\r\n\r\n    Social.set(newData, {\r\n      force: true,\r\n      onCommit,\r\n      onCancel,\r\n    });\r\n  }\r\n}\r\n\r\nfunction getReactionsData(props) {\r\n  const { realArticleId, createReaction } = props;\r\n\r\n  const allReactions = Social.index(action, realArticleId, {\r\n    order: \"desc\",\r\n  });\r\n\r\n  console.log(allReactions);\r\n  if (allReactions) {\r\n  }\r\n\r\n  const uniqueAccounts = [];\r\n  const arrayLastReactionForEachUser =\r\n    allReactions &&\r\n    allReactions.filter((obj) => {\r\n      if (!uniqueAccounts.includes(obj.accountId)) {\r\n        uniqueAccounts.push(obj.accountId);\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n\r\n  const userReaction =\r\n    arrayLastReactionForEachUser &&\r\n    arrayLastReactionForEachUser.find((obj) => {\r\n      return obj.accountId === accountThatIsLoggedIn;\r\n    });\r\n\r\n  // ========= GET REACTIONS STATISTICS =========\r\n  function getReactionStats(acc, reactionObj) {\r\n    if (reactionObj.value.type === initialEmoji) {\r\n      return acc;\r\n    }\r\n    if (!acc.hasOwnProperty(reactionObj.value.type)) {\r\n      acc[reactionObj.value.type] = {\r\n        quantity: 0,\r\n        emoji: reactionObj.value.type.slice(0, 2),\r\n        text: reactionObj.value.type.slice(2),\r\n        accounts: [],\r\n      };\r\n      // acc[reactionObj.value.type].quantity = 0;\r\n      // acc[reactionObj.value.type].emoji = reactionObj.value.type.slice(0, 2);\r\n      // acc[reactionObj.value.type].accounts = [];\r\n    }\r\n    acc[reactionObj.value.type].quantity += 1;\r\n    acc[reactionObj.value.type].accounts = [\r\n      reactionObj.accountId,\r\n      ...acc[reactionObj.value.type].accounts,\r\n    ];\r\n\r\n    return acc;\r\n  }\r\n  function countReactionsStats(arr) {\r\n    Object.values(arr.reduce(getReactionStats, {}));\r\n  }\r\n  let reactionsStatistics =\r\n    arrayLastReactionForEachUser &&\r\n    countReactionsStats(arrayLastReactionForEachUser);\r\n  //reactionsStatistics - array of objects {emoji: '\ud83d\ude01', quantity: 2, accounts: []}\r\n\r\n  return { reactionsStatistics, userReaction };\r\n}\r\n\r\nfunction libCall(call) {\r\n  if (call.functionName === \"createReaction\") {\r\n    return createReaction(call.props);\r\n  } else if (call.functionName === \"getReactionsData\") {\r\n    return getReactionsData(props);\r\n  }\r\n}\r\n\r\nlet resultLibCalls = [];\r\nif (libCalls && libCalls.length > 0) {\r\n  console.log(\r\n    \"Calling functions\",\r\n    libCalls.map((lc) => lc.functionName)\r\n  );\r\n  const updateObj = {};\r\n  resultLibCalls = [...libCalls];\r\n  libCalls.forEach((call) => {\r\n    updateObj[call.key] = libCall(call);\r\n  });\r\n\r\n  updateObj.libCalls = resultLibCalls;\r\n  stateUpdate(updateObj);\r\n}\r\n\r\nreturn <>{}</>;\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/SayALot.lib.emojis", "fact_widget_deployments_id": "5a794ad1e5c2dc9b8052c7034998aabb", "inserted_timestamp": "2023-08-14T23:28:31.186Z", "modified_timestamp": "2023-08-14T23:28:31.186Z", "__row_index": 10}