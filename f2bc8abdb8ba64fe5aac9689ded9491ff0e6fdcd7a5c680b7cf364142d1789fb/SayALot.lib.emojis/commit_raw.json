{"tx_hash": "9xnvzACkm46awSdoq7GvQnT3TsBkfZ182hCdSSBMYJ4Z", "action_id_social": "6VkbD5grfp71L49oNAD5tGTPSuUQEegvjvG37zk9QDoj-0-widget", "block_id": 103694842, "block_timestamp": "2023-10-19T00:25:37.431Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "SayALot.lib.emojis", "source_code": "const { isTest, stateUpdate, functionsToCallByLibrary, callLibs } = props;\r\nconst functionsToCall = functionsToCallByLibrary.emojis;\r\n\r\nconst prodAction = \"sayALotReaction\";\r\nconst testAction = `test_${prodAction}`;\r\nconst action = isTest ? testAction : prodAction;\r\n\r\nconst authorForWidget =\r\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\r\n//const authorForWidget = \"sayalot.near\";\r\n// const authorForWidget = \"kenrou-it.near\";\r\n// const authorForWidget = \"silkking.near\";\r\nconst libSrcArray = [`${authorForWidget}/widget/SayALot.lib.SBT`];\r\nconst initialEmoji = \"\ud83e\udd0d Like\";\r\n\r\nState.init({ libCalls: [], libsCalls: { SBT: [] } });\r\n\r\nlet resultFunctionsToCallByLibrary = Object.assign(\r\n  {},\r\n  functionsToCallByLibrary\r\n);\r\nlet resultFunctionsToCall = [];\r\n\r\nfunction libStateUpdate(obj) {\r\n  State.update(obj);\r\n}\r\n\r\nfunction setAreValidUsers(accountIds, sbtsNames) {\r\n  const newLibsCalls = Object.assign({}, state.libsCalls);\r\n\r\n  accountIds.forEach((accountId, index) => {\r\n    const isCallPushed =\r\n      newLibsCalls.SBT.find((libCall) => {\r\n        return (\r\n          libCall.functionName === \"isValidUser\" &&\r\n          libCall.props.accountId === accountId\r\n        );\r\n      }) !== undefined;\r\n    const isCallReturned = state[`isValidUser-${accountId}`] !== undefined;\r\n\r\n    if (isCallPushed || isCallReturned) {\r\n      return;\r\n    }\r\n\r\n    newLibsCalls.SBT.push({\r\n      functionName: \"isValidUser\",\r\n      key: `isValidUser-${accountId}`,\r\n      props: {\r\n        accountId,\r\n        sbtsNames,\r\n      },\r\n    });\r\n  });\r\n  State.update({ libsCalls: newLibsCalls });\r\n}\r\n\r\n// function callLibs(srcArray, stateUpdate, libCalls) {\r\n//   return (\r\n//     <>\r\n//       {srcArray.map((src) => {\r\n//         return (\r\n//           <Widget\r\n//             src={src}\r\n//             props={{\r\n//               isTest,\r\n//               stateUpdate,\r\n//               libCalls,\r\n//             }}\r\n//           />\r\n//         );\r\n//       })}\r\n//     </>\r\n//   );\r\n// }\r\n\r\nfunction canUserReact(props) {\r\n  const { env, accountId, sbtsNames } = props;\r\n\r\n  setAreValidUsers([accountId], sbtsNames);\r\n\r\n  const result = state[`isValidUser-${accountId}`];\r\n\r\n  resultLibCalls = resultLibCalls.filter((call) => {\r\n    const discardCondition =\r\n      call.functionName === \"canUserReact\" && result !== undefined;\r\n    return !discardCondition;\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nfunction createReaction(props) {\r\n  const { reaction, elementReactedId, onCommit, onCancel } = props;\r\n\r\n  saveReaction(reaction, elementReactedId, onCommit, onCancel);\r\n\r\n  resultLibCalls = resultLibCalls.filter((call) => {\r\n    return call.functionName !== \"createReaction\";\r\n  });\r\n\r\n  return reaction;\r\n}\r\n\r\nfunction composeReactionData(reaction, elementReactedId) {\r\n  const data = {\r\n    index: {\r\n      [action]: JSON.stringify({\r\n        key: elementReactedId,\r\n        value: {\r\n          reactionId: `r-${context.accountId}-${Date.now()}`,\r\n          reaction,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n\r\n  return data;\r\n}\r\n\r\nfunction saveReaction(reaction, elementReactedId, onCommit, onCancel) {\r\n  if (reaction) {\r\n    const newData = composeReactionData(reaction, elementReactedId);\r\n\r\n    Social.set(newData, {\r\n      force: true,\r\n      onCommit,\r\n      onCancel,\r\n    });\r\n  }\r\n}\r\n\r\nfunction getReactionsData(props) {\r\n  // const { elementReactedId, createdReaction } = props;\r\n  const { elementReactedId, articleSbts } = props;\r\n  const allReactions = Social.index(action, elementReactedId, {\r\n    order: \"desc\",\r\n    subscribe: true,\r\n  });\r\n\r\n  let validReactions = allReactions;\r\n\r\n  if (articleSbts.length > 0) {\r\n    const validReactionsAuthors = validReactions.map((reaction) => {\r\n      return reaction.accountId;\r\n    });\r\n\r\n    setAreValidUsers(validReactionsAuthors, articleSbts);\r\n\r\n    const validAuthors = validReactionsAuthors.filter((author) => {\r\n      return state[`isValidUser-${author}`] === true;\r\n    });\r\n\r\n    resultLibCalls = resultLibCalls.filter((call) => {\r\n      const discardCondition =\r\n        call.functionName === \"getReactions\" &&\r\n        state[`isValidUser-${call.props.accountId}`] !== undefined;\r\n      return !discardCondition;\r\n    });\r\n\r\n    validReactions = validReactionsAuthors.filter((author) => {\r\n      return validAuthors.includes(author.accountId);\r\n    });\r\n  }\r\n\r\n  // const uniqueAccounts = [];\r\n  let arrayLastReactionForEachUser =\r\n    validReactions &&\r\n    validReactions.filter((obj) => {\r\n      const userLatestInteraction = validReactions.find(\r\n        (vote) => vote.accountId === obj.accountId\r\n      );\r\n      return JSON.stringify(userLatestInteraction) === JSON.stringify(obj);\r\n      // if (!uniqueAccounts.includes(obj.accountId)) {\r\n      //   uniqueAccounts.push(obj.accountId);\r\n      //   return true;\r\n      // }\r\n      // return false;\r\n    });\r\n\r\n  const userReaction =\r\n    arrayLastReactionForEachUser &&\r\n    arrayLastReactionForEachUser.find((obj) => {\r\n      return obj.accountId === context.accountId;\r\n    });\r\n\r\n  // if (userReaction && createdReaction) {\r\n  //   const newArrayOfLastReactions = arrayLastReactionForEachUser\r\n  //     .filter((obj) => {\r\n  //       return obj.accountId !== context.accountId;\r\n  //     })\r\n  //     .push({\r\n  //       accountId: context.accountId,\r\n  //       value: {\r\n  //         type: \"md\",\r\n  //         reaction: createdReaction,\r\n  //       },\r\n  //     });\r\n\r\n  //   arrayLastReactionForEachUser = newArrayOfLastReactions;\r\n  // }\r\n\r\n  // ========= GET REACTIONS STATISTICS =========\r\n  function getReactionStats(acc, reactionObj) {\r\n    if (reactionObj.value.reaction === initialEmoji) {\r\n      return acc;\r\n    }\r\n\r\n    if (!acc.hasOwnProperty(reactionObj.value.reaction)) {\r\n      acc[reactionObj.value.reaction] = {\r\n        quantity: 0,\r\n        emoji: reactionObj.value.reaction.slice(0, 2),\r\n        text: reactionObj.value.reaction.slice(2),\r\n        accounts: [],\r\n      };\r\n      // acc[reactionObj.value.reaction].quantity = 0;\r\n      // acc[reactionObj.value.reaction].emoji = reactionObj.value.reaction.slice(0, 2);\r\n      // acc[reactionObj.value.reaction].accounts = [];\r\n    }\r\n    acc[reactionObj.value.reaction].quantity += 1;\r\n    acc[reactionObj.value.reaction].accounts = [\r\n      reactionObj.accountId,\r\n      ...acc[reactionObj.value.reaction].accounts,\r\n    ];\r\n\r\n    return acc;\r\n  }\r\n  function countReactionsStats(arr) {\r\n    return Object.values(arr.reduce(getReactionStats, {}));\r\n  }\r\n\r\n  let reactionsStatistics =\r\n    arrayLastReactionForEachUser &&\r\n    countReactionsStats(arrayLastReactionForEachUser);\r\n  //reactionsStatistics - array of objects {emoji: '\ud83d\ude01', quantity: 2, accounts: []}\r\n\r\n  // if (reactionsStatistics !== null) {\r\n  //   resultLibCalls = resultLibCalls.filter((call) => {\r\n  //     return call.functionName !== \"getReactionsData\";\r\n  //   });\r\n  // }\r\n\r\n  return { reactionsStatistics, userReaction };\r\n}\r\n\r\nfunction callFunction(call) {\r\n  if (call.functionName === \"createReaction\") {\r\n    return createReaction(call.props);\r\n  } else if (call.functionName === \"getReactionsData\") {\r\n    return getReactionsData(call.props);\r\n  } else if (call.functionName === \"canUserReact\") {\r\n    return canUserReact(call.props);\r\n  }\r\n}\r\n\r\nif (functionsToCall && functionsToCall.length > 0) {\r\n  const updateObj = Object.assign({}, functionsToCallByLibrary);\r\n  resultFunctionsToCall = [...functionsToCall];\r\n  functionsToCall.forEach((call) => {\r\n    updateObj[call.key] = callFunction(call);\r\n  });\r\n\r\n  resultFunctionsToCallByLibrary.article = resultFunctionsToCall;\r\n  updateObj.functionsToCallByLibrary = resultFunctionsToCallByLibrary;\r\n  stateUpdate(updateObj);\r\n}\r\n\r\nreturn (\r\n  <>\r\n    {libSrcArray.map((src) => {\r\n      return callLibs(src, libStateUpdate, state.libsCalls, \"lib.emojis\");\r\n    })}\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/SayALot.lib.emojis", "fact_widget_deployments_id": "c4b136a351c2d619f5b39496a6d63c70", "inserted_timestamp": "2023-10-19T02:31:49.486Z", "modified_timestamp": "2023-10-19T02:31:49.486Z", "__row_index": 44}