{"tx_hash": "65gGYGwFccVbKcuFqJ9tHUM4edFehUYgCp2ju2Vw8Bh4", "action_id_social": "9w5YoBZr5679j1vE3zoReYcwQPb68HdS9nMGbcy48foV-0-widget", "block_id": 91117505, "block_timestamp": "2023-05-05T01:09:30.606Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "WikiOnSocialDB_ManualIndexFeed", "source_code": "const addressForArticles = \"wikiTest2Article\";\nconst addressForComments = \"wikiTest2Comment\";\nconst authorForWidget = \"rodrigos.near\";\nconst index = props.index;\n\nconsole.log(\"2cosas\", props.showAllComments, props.renderItem);\nif (!index) {\n  return \"props.index is not defined\";\n}\nconst commentToShareBlockHeight = props.commentToShareBlockHeight\n  ? Number(props.commentToShareBlockHeight)\n  : undefined;\n\nconst renderItem =\n  props.renderItem ??\n  ((item, i) => (\n    <div key={i}>\n      #{item.blockHeight}: {JSON.stringify(item)}\n    </div>\n  ));\nconst cachedRenderItem = (item, i) => {\n  const key = JSON.stringify(item);\n  console.log(\"props.showAllComments\", props.showAllComments);\n  console.log(\"item.blockHeight\", item.blockHeight);\n  console.log(\"commentToShareBlockHeight\", commentToShareBlockHeight);\n\n  if (!props.showAllComments && item.blockHeight == commentToShareBlockHeight) {\n    console.log(\"in 1\");\n    state.cachedItems[key] = renderItem(item, i);\n    State.update();\n  } else if (!(key in state.cachedItems)) {\n    console.log(\"in 2\");\n    state.cachedItems[key] = renderItem(item, i);\n    State.update();\n  }\n  return state.cachedItems[key];\n};\n\nindex.options = index.options || {};\nconst initialRenderLimit =\n  props.initialRenderLimit ?? index.options.limit ?? 10;\nconst addDisplayCount =\n  props.nextLimit ?? initialRenderLimit ?? index.options.limit;\n\nindex.options.limit = Math.min(\n  Math.max(initialRenderLimit + addDisplayCount, index.options.limit),\n  100\n);\nconst reverse = !!props.reverse;\n\nconst initialItems = Social.index(index.action, index.key, index.options);\n\nif (initialItems === null) {\n  return \"\";\n}\n\nconst computeFetchFrom = (items, limit) => {\n  if (!items || items.length < limit) {\n    return false;\n  }\n  const blockHeight = items[items.length - 1].blockHeight;\n  return index.options.order === \"desc\" ? blockHeight - 1 : blockHeight + 1;\n};\n\nconst mergeItems = (newItems) => {\n  const items = [\n    ...new Set([...newItems, ...state.items].map((i) => JSON.stringify(i))),\n  ].map((i) => JSON.parse(i));\n  items.sort((a, b) => a.blockHeight - b.blockHeight);\n  if (index.options.order === \"desc\") {\n    items.reverse();\n  }\n  return items;\n};\n\nconst jInitialItems = JSON.stringify(initialItems);\nif (state.jInitialItems !== jInitialItems) {\n  const jIndex = JSON.stringify(index);\n  if (jIndex !== state.jIndex) {\n    State.update({\n      jIndex,\n      jInitialItems,\n      items: initialItems,\n      fetchFrom: false,\n      nextFetchFrom: computeFetchFrom(initialItems, index.options.limit),\n      displayCount: initialRenderLimit,\n      cachedItems: {},\n    });\n  } else {\n    State.update({\n      jInitialItems,\n      items: mergeItems(initialItems),\n    });\n  }\n}\n\nif (state.fetchFrom) {\n  const limit = addDisplayCount;\n  const newItems = Social.index(\n    index.action,\n    index.key,\n    Object.assign({}, index.options, {\n      from: state.fetchFrom,\n      subscribe: undefined,\n      limit,\n    })\n  );\n  if (newItems !== null) {\n    State.update({\n      items: mergeItems(newItems),\n      fetchFrom: false,\n      nextFetchFrom: computeFetchFrom(newItems, limit),\n    });\n  }\n}\n\nconst makeMoreItems = () => {\n  State.update({\n    displayCount: state.displayCount + addDisplayCount,\n  });\n  if (\n    state.items.length - state.displayCount < addDisplayCount &&\n    !state.fetchFrom &&\n    state.nextFetchFrom &&\n    state.nextFetchFrom !== state.fetchFrom\n  ) {\n    State.update({\n      fetchFrom: state.nextFetchFrom,\n    });\n  }\n};\n\nconst fetchMore =\n  state.fetchFrom && state.items.length < state.displayCount ? (\n    <div className=\"loader\" key={\"loader\"}>\n      <span\n        className=\"spinner-grow spinner-grow-sm me-1\"\n        role=\"status\"\n        aria-hidden=\"true\"\n      />\n      Loading ...\n    </div>\n  ) : (\n    state.displayCount < state.items.length && (\n      <div key={\"loader more\"}>\n        <a href=\"javascript:void\" onClick={(e) => makeMoreItems()}>\n          {props.loadMoreText ?? \"Load more...\"}\n        </a>\n      </div>\n    )\n  );\n\nconst items = state.items ? state.items.slice(0, state.displayCount) : [];\nif (reverse) {\n  items.reverse();\n}\n\nreturn (\n  <>\n    {reverse && fetchMore}\n    {items.map(cachedRenderItem)}\n    {!reverse && fetchMore}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/WikiOnSocialDB_ManualIndexFeed", "fact_widget_deployments_id": "57ab01a5736b8c3a3f0b3bc75e082d54", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}