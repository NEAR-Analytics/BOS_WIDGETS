{"tx_hash": "Z32Sv46hT4VsudVzovYVy29ZzQMXnXJWCQN3D4Y5TbU", "action_id_social": "2k1jzsAuWKUMmypyvQREhYZ8tbSdEYgdNg5z2zgd3HhJ-0-widget", "block_id": 121158209, "block_timestamp": "2024-06-14T16:44:44.261Z", "signer_id": "builddao.near", "widget_name": "page.proposals.Card", "source_code": "const {\n  id,\n  typeName,\n  proposer,\n  description,\n  kind,\n  status,\n  totalVotesNeeded,\n  totalVotes,\n  submission_time,\n  votes,\n  expirationTime,\n} = props.proposalData;\nconst { daoId, isAllowedToVote, handleVote, comments, proposalData } = props;\nconst accountId = context.accountId;\nconst ThemeContainer =\n  props.ThemeContainer ||\n  styled.div`\n    --primary-bg-color: #23242b;\n    --secondary-bg-color: #ffffff1a;\n    --primary-border-color: #fff;\n    --primary-text-color: #ffffff;\n    --secondary-text-color: #b0b0b0;\n    --primary-btn-bg-color: #eca227;\n    --primary-btn-text-color: #000;\n    --approve-bg-color: #82e299;\n    --reject-bg-color: #c23f38;\n    --spam-bg-color: #f5c518;\n    --vote-button-color: #ffffff;\n    --success-badge-bg-color: #38c7931a;\n    --success-badge-text-color: #38c793;\n    --primary-badge-bg-color: #eca22733;\n    --primary-badge-text-color: #eca227;\n    --info-badge-bg-color: #51b6ff33;\n    --info-badge-text-color: #51b6ff;\n    --danger-badge-bg-color: #fd2a5c1a;\n    --danger-badge-text-color: #fd2a5c;\n    --black-badge-bg-color: #ffffff1a;\n    --black-badge-text-color: #fff;\n  `;\nfunction checkVotes(value) {\n  return votes[accountId] === value;\n}\nconst Wrapper = styled.div`\n  margin: 16px auto;\n  border-radius: 16px;\n  padding: 24px;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  min-height: 500px;\n  width: 100%;\n  border: 1px solid var(--primary-border-color);\n  b {\n    font-weight: 600;\n  }\n  .font-monospace {\n    color: var(--secondary-text-color) !important;\n  }\n  .secondary-bg {\n    background: var(--secondary-bg-color) !important;\n  }\n  .secondary-text {\n    color: var(--secondary-text-color) !important;\n  }\n  a {\n    background: var(--secondary-bg-color) !important;\n    color: var(--primary-text-color) !important;\n  }\n  .social_url {\n    background: var(--secondary-bg-color) !important;\n  }\n  .btn-primary {\n    background-color: var(--primary-btn-bg-color) !important;\n    color: var(--primary-btn-text-color) !important;\n    border: none;\n  }\n  ul {\n    background-color: var(--primary-bg-color);\n  }\n  .Approve {\n    background: none !important;\n    .vote {\n      color: #38c793 !important;\n    }\n  }\n  .Reject {\n    background: none !important;\n    .vote {\n      color: #bf2c37 !important;\n    }\n  }\n  .Remove {\n    background: none !important;\n    .vote {\n      color: #73692d !important;\n    }\n  }\n  .success {\n    border: 1px solid var(--success-badge-bg-color) !important;\n    background: var(--success-badge-bg-color) !important;\n    color: var(--success-badge-text-color) !important;\n  }\n  .primary {\n    border: 1px solid var(--primary-badge-bg-color) !important;\n    background: var(--primary-badge-bg-color) !important;\n    color: var(--primary-badge-text-color) !important;\n  }\n  .info {\n    border: 1px solid var(--info-badge-bg-color) !important;\n    background: var(--info-badge-bg-color) !important;\n    color: var(--info-badge-text-color) !important;\n  }\n  .danger {\n    border: 1px solid var(--danger-badge-bg-color) !important;\n    background: var(--danger-badge-bg-color) !important;\n    color: var(--danger-badge-text-color) !important;\n  }\n  .black {\n    border: 1px solid var(--black-badge-bg-color) !important;\n    background: var(--black-badge-bg-color) !important;\n    color: var(--black-badge-text-color) !important;\n  }\n  .word-wrap {\n    word-wrap: break-word;\n  }\n  ${({ status }) =>\n    status === \"Approved\" &&\n    `\n    border-color: var(--approve-bg-color);\n  `}\n  ${({ status }) =>\n    status === \"In Progress\" &&\n    `\n    border-color: #fff;\n  `}\n  ${({ status }) =>\n    (status === \"Failed\" || status === \"Rejected\") &&\n    `\n    border-color: var(--reject-bg-color);\n  `}\n  .text-sm {\n    font-size: 14px;\n  }\n  .counter-text {\n    font-size: 14px;\n    margin-right: 5px;\n    border-width: 2px;\n    animation-duration: 8s;\n  }\n  .text-center {\n    text-align: center;\n  }\n  .info_section {\n    border-right: 1px solid #dee2e6;\n    padding-right: 15px;\n    margin: 10px 15px 10px 0;\n    &.no-border {\n      border: 0;\n    }\n    @media (max-width: 768px) {\n      border: 0;\n    }\n  }\n`;\nconst cls = (c) => c.join(\" \");\nconst YouVotedBadge = () => {\n  return (\n    <Widget\n      loading=\"\"\n      src=\"nearui.near/widget/Element.Badge\"\n      props={{\n        size: \"sm\",\n        variant: \"info outline mb-1\",\n        children: \"You voted\",\n      }}\n    />\n  );\n};\nfunction renderPermission({ isAllowedToVote }) {\n  return (\n    <div className={\"text-center p-2 rounded-pill secondary-text secondary-bg\"}>\n      {isAllowedToVote\n        ? \"You are allowed to vote on this proposal\"\n        : \"You are not allowed to vote on this proposal\"}\n    </div>\n  );\n}\nconst execProposal = ({ daoId, id }) =>\n  Near.call(daoId, \"execute\", { id }, 50000000000000);\nfunction renderHeader({ typeName, id, status }) {\n  let statusicon;\n  let statustext;\n  let statusvariant;\n  switch (status) {\n    case \"Approved\":\n    case \"Accepted\":\n      statusicon = \"bi bi-check-circle\";\n      statustext = status;\n      statusvariant = \"success\";\n      break;\n    case \"Executed\":\n      statusicon = \"bi bi-play-fill\";\n      statustext = status;\n      statusvariant = \"success\";\n      break;\n    case \"InProgress\":\n      statusicon = \"spinner-border spinner-border-sm\";\n      statustext = \"In Progress\";\n      statusvariant = \"primary\";\n      break;\n    case \"Expired\":\n      statusicon = \"bi bi-clock\";\n      statustext = status;\n      statusvariant = \"black\";\n      break;\n    case \"Failed\":\n      statusicon = \"bi bi-x-circle\";\n      statustext = status;\n      statusvariant = \"black\";\n      break;\n    case \"Rejected\":\n      statusicon = \"bi bi-ban\";\n      statustext = status;\n      statusvariant = \"danger\";\n      break;\n  }\n  return (\n    <div className=\"card__header\">\n      <div className=\"d-flex flex-column gap-2\">\n        <div className=\"d-flex align-items-center justify-content-between\">\n          <h4>{typeName}</h4>\n        </div>\n        <div className=\"d-flex gap-2 flex-wrap align-items-center\">\n          <Widget\n            loading=\"\"\n            src=\"nearui.near/widget/Element.Badge\"\n            props={{\n              children: `Proposal ID #${id}`,\n              variant: \"\",\n              className: \"secondary-bg\",\n              size: \"lg\",\n            }}\n          />\n          <Widget\n            loading=\"\"\n            src=\"nearui.near/widget/Element.Badge\"\n            props={{\n              children: (\n                <>\n                  <i\n                    className={statusicon}\n                    style={{\n                      fontSize: \"16px\",\n                      marginRight: \"5px\",\n                      borderWidth: \"2px\",\n                      animationDuration: \"3s\",\n                    }}\n                  ></i>\n                  {statustext}\n                </>\n              ),\n              variant: `${statusvariant} round`,\n              size: \"lg\",\n            }}\n          />\n          {status === \"InProgress\" &&\n            parseInt(Big(expirationTime).div(1000000)) > Date.now() && (\n              <Widget\n                loading=\"\"\n                src=\"nearui.near/widget/Element.Badge\"\n                props={{\n                  children: (\n                    <div className=\"counter-text\">\n                      <Widget\n                        loading=\"\"\n                        src=\"astraplusplus.ndctools.near/widget/Common.Layout.Countdown\"\n                        props={{\n                          timeToCheck: parseInt(\n                            Big(expirationTime).div(1000000)\n                          ),\n                        }}\n                      />\n                    </div>\n                  ),\n                  variant: `info round`,\n                  size: \"lg\",\n                }}\n              />\n            )}\n        </div>\n      </div>\n    </div>\n  );\n}\nfunction renderData({\n  proposer,\n  description,\n  submission_time,\n  totalVotesNeeded,\n}) {\n  return (\n    <div className=\"d-flex gap-2 flex-column\">\n      <div className=\"d-flex gap-2\">\n        <div className=\"w-50\">\n          <div className=\"mb-2\">\n            <b>Proposer</b>\n          </div>\n          <div className=\"secondary-text\">\n            <Widget\n              loading=\"\"\n              src=\"mob.near/widget/Profile.ShortInlineBlock\"\n              props={{ accountId: proposer, tooltip: true }}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"mt-3 word-wrap \">\n        <b>Description</b>\n        <div className=\"secondary-text\">\n          <Markdown text={description} />\n        </div>\n      </div>\n      <Widget\n        loading=\"\"\n        src=\"astraplusplus.ndctools.near/widget/Common.Modals.ProposalArguments\"\n        props={{ daoId, proposal: proposalData }}\n      />\n      <div className=\"d-flex flex-wrap\">\n        {submission_time && (\n          <div className=\"info_section\">\n            <b>Submitted at</b>\n            <div>\n              <small className=\"secondary-text\">\n                {new Date(\n                  parseInt(Big(submission_time).div(1000000))\n                ).toLocaleString()}\n              </small>\n            </div>\n          </div>\n        )}\n        <div className=\"info_section\">\n          <b>Expired at</b>\n          <div>\n            <small className=\"secondary-text\">\n              {new Date(\n                parseInt(Big(expirationTime).div(1000000))\n              ).toLocaleString()}\n            </small>\n          </div>\n        </div>\n        <div className=\"info_section no-border\">\n          <b>Required Votes</b>\n          <div>\n            <small className=\"secondary-text\">{totalVotesNeeded}</small>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nfunction renderVoteButtons({\n  totalVotes,\n  status,\n  isAllowedToVote,\n  handleVote,\n}) {\n  const finished = status !== \"InProgress\";\n  const VoteButton = styled.button`\n    width: 100%;\n    border-radius: 15px;\n    border: 1px solid transparent;\n    padding: 0 20px;\n    line-height: 45px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    position: relative;\n    overflow: hidden;\n    color: var(--vote-button-color);\n    background-color: var(--secondary-bg-color);\n    --vote-button-bg: var(--approve-bg-color);\n    &.no {\n      --vote-button-bg: var(--reject-bg-color);\n    }\n    &.no > div:last-child {\n      transition: all 0.4s ease-in-out;\n    }\n    ${({ finished, percentage, disabled }) => {\n      if (finished) {\n        if (percentage > 80) {\n          return `\n        &.no > div:last-child {\n          color: var(--vote-button-color) !important;\n        }\n      `;\n        }\n      } else if (!disabled) {\n        return `\n        &:hover.no > div:last-child {\n          color: var(--vote-button-color) !important;\n        } \n        `;\n      }\n    }}}\n    &.spam {\n      --vote-button-bg: var(--spam-bg-color);\n    }\n    &:before {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      height: 100%;\n      border-radius: 12px;\n      transition: all 0.4s ease-in-out;\n      z-index: 0;\n      background-color: var(--vote-button-bg);\n      ${({ percentage }) => `\n        min-width: ${percentage && percentage > 5 ? `${percentage}%` : \"5px\"};\n      `}\n    }\n    &:after {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      height: 100%;\n      border-radius: 12px;\n      transition: all 0.4s ease-in-out;\n      z-index: 1;\n      background-color: var(--vote-button-bg);\n      min-width: ${({ percentage }) =>\n        percentage && percentage > 5 ? `${percentage}%` : \"5px\"};\n      ${({ finished, wins }) =>\n        finished &&\n        wins &&\n        `\n        display: none;\n      `}\n    }\n    ${({ disabled }) =>\n      !disabled &&\n      `\n    &:hover {\n      &:before {\n        min-width: 100%;\n      }\n    }\n  `}\n    & > div {\n      z-index: 2;\n    }\n    & > div:last-child span {\n      display: block;\n      font-size: 15px;\n      font-weight: 600;\n      line-height: 1.4;\n      &:last-child {\n        font-size: 12px;\n        font-weight: 400;\n      }\n    }\n  `;\n  const getPercentage = (vote) => {\n    const percentage = Math.round((vote / totalVotesNeeded) * 100);\n    return percentage || 0;\n  };\n  const percentages = {\n    yes: getPercentage(totalVotes.yes),\n    no: getPercentage(totalVotes.no),\n    spam: getPercentage(totalVotes.spam),\n    abstain: getPercentage(totalVotes.abstain),\n  };\n  const wins = {\n    yes: status === \"Approved\",\n    no: status === \"Rejected\",\n    spam: status === \"Failed\" || status === \"Spam\",\n  };\n  const voted = {\n    yes: checkVotes(\"Approve\"),\n    no: checkVotes(\"Reject\"),\n    spam: checkVotes(\"Remove\"),\n  };\n  const alreadyVoted = voted.yes || voted.no || voted.spam || voted.abstain;\n  const VotePercentage = ({ vote }) => (\n    <div>\n      <span>\n        {percentages[vote]}\n        <i className=\"bi bi-percent\"></i>\n      </span>\n      <span>\n        {totalVotes[vote]} {totalVotes[vote] === 1 ? \"Vote\" : \"Votes\"}\n      </span>\n    </div>\n  );\n  return (\n    <div\n      className=\"d-lg-grid d-flex flex-wrap gap-2 align-items-end\"\n      style={{\n        gridTemplateColumns: \"repeat(3,1fr)\",\n      }}\n    >\n      <div className=\"w-100\">\n        {voted.yes && <YouVotedBadge />}\n        <VoteButton\n          className=\"yes\"\n          percentage={percentages.yes}\n          finished={finished}\n          wins={wins.yes}\n          myVote={voted.yes}\n          onClick={() => handleVote(\"VoteApprove\")}\n          disabled={alreadyVoted || finished || !isAllowedToVote[0]}\n        >\n          <div>\n            {wins.yes && (\n              <span title=\"Yes won\">\n                <i className=\"bi bi-check-circle\"></i>\n              </span>\n            )}\n            <span className=\"text-sm\">Approve</span>\n          </div>\n          <VotePercentage vote=\"yes\" />\n        </VoteButton>\n      </div>\n      <div className=\"w-100\">\n        {voted.no && <YouVotedBadge />}\n        <VoteButton\n          className=\"no\"\n          percentage={percentages.no}\n          finished={finished}\n          wins={wins.no}\n          myVote={voted.no}\n          onClick={() => handleVote(\"VoteReject\")}\n          disabled={alreadyVoted || finished || !isAllowedToVote[1]}\n        >\n          <div className=\"d-flex gap-2 align-items-center\">\n            {wins.no && (\n              <span title=\"No won\">\n                <i className=\"bi bi-check-circle\"></i>\n              </span>\n            )}\n            <span className=\"text-sm\">Reject</span>\n          </div>\n          <VotePercentage vote=\"no\" />\n        </VoteButton>\n      </div>\n      <div className=\"w-100\">\n        {voted.spam && <YouVotedBadge />}\n        <VoteButton\n          className=\"spam\"\n          percentage={percentages.spam}\n          finished={finished}\n          wins={wins.spam}\n          myVote={voted.spam}\n          onClick={() => handleVote(\"VoteRemove\")}\n          disabled={alreadyVoted || finished || !isAllowedToVote[2]}\n        >\n          <div className=\"d-flex gap-2 align-items-center\">\n            <span>Spam</span>\n          </div>\n          <VotePercentage vote=\"spam\" />\n        </VoteButton>\n      </div>\n    </div>\n  );\n}\nfunction renderFooter({ totalVotes, votes, comments, daoId, proposal }) {\n  const items = [\n    {\n      title: \"Comments\",\n      icon: \"bi bi-chat-left-text\",\n      count: comments.length || 0,\n      widget: \"Common.Modals.Comments\",\n      props: {\n        daoId,\n        proposal,\n        commentsCount: comments.length,\n        item: {\n          type: \"dao_proposal_comment\",\n          path: `${daoId}/proposal/main`,\n          proposal_id: proposal.id + \"-beta\",\n        },\n      },\n    },\n    {\n      title: \"Voters\",\n      icon: \"bi bi-people\",\n      count: totalVotes.total,\n      widget: \"Common.Modals.Voters\",\n      props: {\n        daoId,\n        votes,\n        totalVotes,\n        proposalId: proposal.id,\n        votersCount: totalVotes.total,\n      },\n    },\n    {\n      title: \"Share\",\n      icon: \"bi bi-share\",\n      widget: \"Common.Modals.Share\",\n      props: {\n        url: `https://near.org/builddao.near/widget/Proposals?daoId=${daoId}&proposalId=${\n          proposalData.id\n        }${props.dev ? \"&dev=true\" : \"\"}`,\n        text: \"Explore this new proposal from our DAO! Your support and feedback are essential as we work towards a decentralized future. Review the details and join the discussion here:\",\n      },\n    },\n  ];\n  if (proposal.typeName !== \"Text\") {\n    items.push({\n      title: \"More details\",\n      icon: \"bi bi-three-dots\",\n      widget: \"Common.Modals.ProposalArguments\",\n      props: {\n        daoId,\n        proposal,\n        showCard: true,\n      },\n    });\n  }\n  const renderModal = (item, index) => {\n    return (\n      <Widget\n        loading=\"\"\n        src=\"astraplusplus.ndctools.near/widget/Layout.Modal\"\n        props={{\n          content: (\n            <Widget\n              loading=\"\"\n              src={`astraplusplus.ndctools.near/widget/${item.widget}`}\n              props={item.props}\n            />\n          ),\n          toggle: (\n            <div\n              key={index}\n              className={\n                \"d-flex gap-2 align-items-center justify-content-center user-select-none secondary-text\" +\n                (index !== items.length - 1 ? \" border-end\" : \"\")\n              }\n            >\n              <i className={item.icon} style={{ color: \"white\" }}></i>\n              {item.count && <span>{item.count}</span>}\n              <span>{item.title}</span>\n            </div>\n          ),\n          toggleContainerProps: {\n            className: \"flex-fill\",\n          },\n        }}\n      />\n    );\n  };\n  return (\n    <div className=\"d-flex gap-3 justify-content-between mt-2 border-top pt-4 flex-wrap\">\n      {items.map(renderModal)}\n    </div>\n  );\n}\nconst voted = {\n  yes: checkVotes(\"Approve\"),\n  no: checkVotes(\"Reject\"),\n  spam: checkVotes(\"Remove\"),\n  abstain: checkVotes(\"Abstain\"),\n};\nconst alreadyVoted = voted.yes || voted.no || voted.spam;\nconst canVote =\n  isAllowedToVote.every((v) => v) && status === \"In Progress\" && !alreadyVoted;\nreturn (\n  <ThemeContainer>\n    <Wrapper className=\"ndc-card\" status={status}>\n      {renderPermission({ isAllowedToVote: isAllowedToVote.every((v) => v) })}\n      {renderHeader({ typeName, id, daoId, status })}\n      {renderData({\n        proposer,\n        description,\n        submission_time,\n        totalVotesNeeded,\n      })}\n      {renderVoteButtons({\n        totalVotes,\n        status,\n        votes,\n        accountId,\n        isAllowedToVote,\n        handleVote: (action) => {\n          return handleVote({\n            action,\n            proposalId: id,\n            proposer,\n          });\n        },\n      })}\n      {renderFooter({\n        totalVotes,\n        votes,\n        comments,\n        daoId,\n        proposal: proposalData,\n      })}\n    </Wrapper>\n  </ThemeContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/builddao.near/widget/page.proposals.Card", "fact_widget_deployments_id": "68df854bd5f87812cf1a44bb1b3a1f0c", "inserted_timestamp": "2024-06-14T17:55:46.860Z", "modified_timestamp": "2024-06-14T17:55:46.860Z", "__row_index": 1}