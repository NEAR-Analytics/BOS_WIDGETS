{"tx_hash": "7Rgkj3qsig5ygP1J4ieDRt7E1joL8Pt7mNR4sPhEBCbt", "action_id_social": "H2Rq7VqfzehZoNz9Eu7rB36DcwvPtSUWcRqgsNZeh7wn-0-widget", "block_id": 121619019, "block_timestamp": "2024-06-20T21:42:31.004Z", "signer_id": "builddao.near", "widget_name": "page.proposals.create.Transfer", "source_code": "const { Button } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n};\nconst { ProposalVisibilityInfoModal } = VM.require(\n  \"builddao.near/widget/page.proposals.VisibilityInfoModal\"\n) || {\n  ProposalVisibilityInfoModal: () => <></>,\n};\nconst DaoSDK = VM.require(\"sdks.near/widget/SDKs.Sputnik.DaoSDK\") || (() => {});\nconst [recipient, setRecipient] = useState(\"\");\nconst [token, setToken] = useState(\"\");\nconst [amount, setAmount] = useState(0);\nconst [description, setDescription] = useState(\"\");\nconst [validatedAddresss, setValidatedAddress] = useState(true);\nconst [isInfoModalActive, setInfoModalActive] = useState(false);\nconst [copied, setCopied] = useState(false);\nconst bootstrapTheme = props.bootstrapTheme;\nconst [text, setText] = useState(\"\");\nconst [editorKey, setEditorKey] = useState(0);\nconst [notificationsData, setNotificationData] = useState(null);\nuseEffect(() => {\n  if (!props.item) {\n    return;\n  }\n  const { path, blockHeight } = props.item;\n  setText(`[EMBED](${path}@${blockHeight})`);\n  setEditorKey((editorKey) => editorKey + 1);\n}, [props.item]);\nconst memoizedKey = useMemo((editorKey) => editorKey, [editorKey]);\nconst selectedDAO = props.selectedDAO;\nconst sdk = DaoSDK(selectedDAO);\nif (!sdk) {\n  return <></>;\n}\nconst res = fetch(`https://api.nearblocks.io/v1/account/${selectedDAO}/tokens`);\nconst NearTokenId = \"NEAR\";\nconst tokensData = [\n  {\n    decimals: 24,\n    icon: \"\",\n    name: \"NEAR\",\n    symbol: \"NEAR\",\n    tokenId: NearTokenId,\n  },\n];\nif (res.body) {\n  res.body?.tokens?.fts.map((item) => {\n    const ftMetadata = Near.view(item, \"ft_metadata\", {});\n    if (ftMetadata === null) {\n      return;\n    }\n    tokensData.push({ ...ftMetadata, tokenId: item });\n  });\n}\n// handle checking\nconst regex = /.{1}\\.near$/;\nuseEffect(() => {\n  if (regex.test(recipient) || recipient === \"\") {\n    setValidatedAddress(true);\n  } else {\n    setValidatedAddress(false);\n  }\n}, [recipient]);\nuseEffect(() => {\n  if (amount < 0) {\n    setAmount(0);\n  }\n}, [amount]);\nconst MarkdownEditor = `\n  html {\n    background: #23242b;\n  }\n  * {\n    border: none !important;\n  }\n  .rc-md-editor {\n    background: #4f5055;\n    border-top: 1px solid #4f5055 !important;\n    border-radius: 8px;\n  }\n  .editor-container {\n    background: #4f5055;\n  }\n  \n  .drop-wrap {\n    \n    border-radius: 0.5rem !important;\n  }\n  .header-list {\n    display: flex;\n    align-items: center;\n  }\n  textarea {\n    background: #23242b !important;\n    color: #fff !important;\n    font-family: sans-serif !important;\n    font-size: 1rem;\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-radius: 0 0 8px 8px;\n  }\n  .rc-md-navigation {\n    background: #23242b !important;\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-bottom: 0 !important;\n    border-radius: 8px 8px 0 0;\n  \n    i {\n      color: #cdd0d5;\n    }\n  }\n  .editor-container {\n    border-radius: 0 0 8px 8px;\n  }\n  .rc-md-editor .editor-container .sec-md .input {\n    overflow-y: auto;\n    padding: 8px !important;\n    line-height: normal;\n    border-radius: 0 0 8px 8px;\n  }\n`;\nconst TextareaWrapper = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n  width: 100%;\n  textarea {\n    display: flex;\n    align-items: center;\n    transition: all 0.3s ease;\n  }\n  textarea::placeholder {\n    padding-top: 4px;\n    font-size: 20px;\n  }\n  textarea:focus::placeholder {\n    font-size: inherit;\n    padding-top: 0px;\n  }\n  &::after,\n  textarea,\n  iframe {\n    width: 100%;\n    min-width: 1em;\n    height: unset;\n    min-height: 3em;\n    font: inherit;\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: 0px solid #eee;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n  }\n  iframe {\n    padding: 0;\n  }\n  textarea:focus,\n  textarea:not(:empty) {\n    border-bottom: 1px solid #eee;\n    min-height: 5em;\n  }\n  &::after {\n    content: attr(data-value) \" \";\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n  &.markdown-editor::after {\n    padding-top: 66px;\n    font-family: monospace;\n    font-size: 14px;\n  }\n`;\nconst sdkCall = () => {\n  let ftMetadata = tokensData.find((item) => item.tokenId === token);\n  const amountInYocto = Big(amount)\n    .mul(Big(10).pow(ftMetadata.decimals))\n    .toFixed();\n  sdk.createTransferProposal({\n    description: text,\n    tokenId: token === NearTokenId ? \"\" : token,\n    receiverId: recipient,\n    amount: amountInYocto,\n    gas,\n    deposit,\n    gas: 180000000000000,\n    deposit: 200000000000000,\n    additionalCalls: notificationsData,\n  });\n};\nconst NotificationSelector = useMemo(() => {\n  return (\n    <Widget\n      loading=\"\"\n      src=\"builddao.near/widget/page.proposals.NotificationRolesSelector\"\n      props={{\n        daoId: selectedDAO,\n        onUpdate: (v) => {\n          setNotificationData(v);\n        },\n        proposalType: \"Transfer\",\n      }}\n    />\n  );\n}, [selectedDAO]);\nreturn (\n  <div className=\"d-flex flex-column\">\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"recipient\">\n        Recipient<span className=\"text-danger\">*</span>\n      </label>\n      <input\n        className=\"form-control\"\n        name=\"recipient\"\n        id=\"recipient\"\n        placeholder=\"NEAR Address\"\n        value={recipient}\n        data-bs-theme={bootstrapTheme}\n        onChange={(e) => setRecipient(e.target.value)}\n      />\n      {!validatedAddresss && (\n        <span className=\"text-danger\" style={{ fontSize: 12 }}>\n          Please check if the NEAR address is valid!\n        </span>\n      )}\n    </div>\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"token\">\n        Token<span className=\"text-danger\">*</span>\n      </label>\n      <select\n        class=\"form-select\"\n        name=\"token\"\n        id=\"token\"\n        value={token}\n        data-bs-theme={bootstrapTheme}\n        onChange={(e) => setToken(e.target.value)}\n      >\n        <option value=\"\">Select a token</option>\n        {tokensData?.map((item) => {\n          return <option value={item.tokenId}>{item.symbol}</option>;\n        })}\n      </select>\n    </div>\n    <div className=\"form-group mb-3\">\n      <label htmlFor=\"amount\">\n        Amount<span className=\"text-danger\">*</span>\n      </label>\n      <input\n        className=\"form-control\"\n        name=\"amount\"\n        id=\"amount\"\n        type=\"number\"\n        value={amount}\n        data-bs-theme={bootstrapTheme}\n        onChange={(e) => setAmount(e.target.value)}\n      />\n    </div>\n    <div className=\"form-group mb-3\">\n      <label>Proposal Description</label>\n      <TextareaWrapper\n        className=\"markdown-editor mb-3\"\n        data-value={text || \"\"}\n        key={memoizedKey}\n      >\n        <Widget\n          loading=\"\"\n          src=\"mob.near/widget/MarkdownEditorIframe\"\n          props={{\n            initialText: text,\n            embedCss: props.customCSS || MarkdownEditor,\n            onChange: (v) => {\n              setText(v);\n            },\n          }}\n        />\n      </TextareaWrapper>\n    </div>\n    {NotificationSelector}\n    <div className=\"w-100 d-flex\">\n      <Button\n        disabled={!token || !recipient || !amount || !validatedAddresss}\n        className=\"ms-auto\"\n        variant=\"primary\"\n        onClick={() => {\n          setInfoModalActive(true);\n        }}\n      >\n        Create\n      </Button>\n    </div>\n    <ProposalVisibilityInfoModal\n      open={isInfoModalActive}\n      setInfoModalActive={setInfoModalActive}\n      copied={copied}\n      setCopied={setCopied}\n      sdkCall={sdkCall}\n    />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/builddao.near/widget/page.proposals.create.Transfer", "fact_widget_deployments_id": "de36952929c7bc2fdb6ffffd459f288b", "inserted_timestamp": "2024-06-20T22:54:09.280Z", "modified_timestamp": "2024-06-20T23:54:31.353Z", "__row_index": 0}