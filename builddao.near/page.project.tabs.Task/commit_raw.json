{"tx_hash": "7Y7zyMDjSX67qEpZypVJEQykLFi3YgyzKh9CweWiAk5K", "action_id_social": "748YHusYUGWR4WUgW78Ha5pNXS6ryPtAH8xEE5JbYEem-0-widget", "block_id": 121980118, "block_timestamp": "2024-06-25T17:49:48.231Z", "signer_id": "builddao.near", "widget_name": "page.project.tabs.Task", "source_code": "const { Modal, Button, ProgressState } = VM.require(\n  \"buildhub.near/widget/components\"\n) || {\n  Modal: () => <></>,\n  Button: () => <></>,\n  ProgressState: () => <></>,\n};\nconst { normalize } = VM.require(\"devs.near/widget/lib.stringUtils\") || {\n  normalize: () => {},\n};\nconst { getProjectMeta } = VM.require(\"builddao.near/widget/lib.projects\") || {\n  getProjectMeta: () => {},\n};\nconst { id } = props;\nconst project = getProjectMeta(id);\nconst app = props.app || \"buildhub.near\";\nconst type = props.type || \"task\";\nconst projectTask = \"project-task\";\nconst ThemeContainer =\n  props.ThemeContainer ||\n  styled.div`\n    --primary-color: rgb(255, 175, 81);\n    --border-color: rgba(255, 255, 255, 0.2);\n    --font-color: #fff;\n    --menu-bg-color: #0b0c14;\n    --secondary-font-color: rgba(176, 176, 176, 1);\n    --card-bg-color: rgba(35, 36, 43, 1);\n  `;\nconst Wrapper = styled.div`\n  color: white;\n  .border {\n    border-color: var(--border-color) !important;\n  }\n  input::placeholder {\n    color: var(--secondary-font-color) !important;\n  }\n  .form-control {\n    background: #23242b !important;\n    color: #fff !important;\n    border: 1px solid var(--border-color) !important;\n  }\n  .form-check-input:checked {\n    background-color: var(--primary-color) !important;\n    border-color: var(--primary-color) !important;\n  }\n  .cbx:hover span:first-child {\n    border-color: var(--primary-color) !important;\n  }\n  .pointer {\n    cursor: pointer;\n  }\n  .red {\n    color: #dc3545;\n  }\n  .badge {\n    border: 1px solid var(--primary-color) !important;\n  }\n  .hashtag {\n    color: var(--primary-color) !important;\n  }\n  .secondary-text {\n    color: var(--secondary-font-color) !important;\n  }\n  .dropdown-menu {\n    background-color: var(--menu-bg-color) !important;\n    color: var(--font-color) !important;\n    li.dropdown-item {\n      display: flex;\n      gap: 10px;\n      align-items: center;\n      cursor: pointer;\n      color: var(--font-color) !important;\n      &:hover {\n        a {\n          color: var(--menu-bg-color) !important;\n        }\n      }\n    }\n    .link-dark,\n    .dropdown-item {\n      color: var(--font-color) !important;\n      &:hover {\n        color: var(--menu-bg-color) !important;\n        span {\n          color: var(--menu-bg-color) !important;\n        }\n      }\n    }\n    .dropdown-item.active,\n    .dropdown-item:active {\n      background-color: var(--primary-color) !important;\n    }\n  }\n  .container {\n    border: none !important;\n  }\n  .assignee-item {\n    display: inline-block;\n    padding: 0.2em 0.4em;\n    border-radius: 10px;\n    border: 0.8px solid lightgray;\n    position: relative;\n  }\n  .flex-1 {\n    flex: 1;\n  }\n  .warning-tag {\n    color: #eca227;\n    background-color: rgba(236, 162, 39, 0.1);\n    font-size: 12px;\n  }\n`;\nconst projectID = normalize(project?.title, \"-\");\nconst StatusValues = {\n  PROPOSED: \"proposed\",\n  PROGRESS: \"progress\",\n  COMPLETED: \"completed\",\n};\nconst task = {\n  title: \"\",\n  description: \"\",\n  author: context.accountId,\n  tags: [],\n  list: [], // listItem\n  status: \"\",\n  priority: \"\",\n  assignees: [],\n  startDate: \"\",\n  endDate: \"\",\n};\nconst [proposedTasks, setProposedTasks] = useState([]);\nconst [progressTasks, setProgresTasks] = useState([]);\nconst [completedTasks, setCompletedTasks] = useState([]);\nconst [showAddTaskModal, setShowAddTaskModal] = useState(false);\nconst [taskDetail, setTaskDetail] = useState({});\nconst [showDropdownIndex, setShowDropdownIndex] = useState(null);\nconst [isEditTask, setIsEdit] = useState(false);\nconst [showDeleteConfirmationModalIndex, setDeleteConfirmationIndex] =\n  useState(null);\nconst [showViewTaskModal, setViewTaskModal] = useState(false);\nconst [currentEditTaskId, setCurrentTaskId] = useState(null); // if user change title we need the same earlier key to update the data\nconst isAllowedToAdd = (project.contributors ?? []).includes(context.accountId);\nconst flattenObject = (obj) => {\n  let paths = [];\n  try {\n    Object.keys(obj).forEach((key) => {\n      const projects = Object.keys(\n        obj?.[key]?.[app]?.[projectTask]?.[projectID]?.[type] ?? {}\n      );\n      projects.map((path) => {\n        if (!path || !path.includes(\"_\")) {\n          return;\n        }\n        const convertedStr = path.replace(/_/g, \"/\");\n        paths.push(convertedStr);\n      });\n    });\n  } catch (e) {}\n  return paths;\n};\nconst processData = useCallback(\n  (data) => {\n    const accounts = Object.entries(data ?? {});\n    const allTasks = accounts\n      .map((account) => {\n        // allow only creator to edit tasks\n        const isAllowedToEdit = account[0] === context.accountId;\n        return Object.entries(account?.[1]?.[type] ?? {}).map((kv) => {\n          const metadata = JSON.parse(kv[1]);\n          return {\n            ...metadata,\n            taskId: kv[0],\n            isAllowedToEdit,\n          };\n        });\n      })\n      .flat();\n    return allTasks;\n  },\n  [type]\n);\nfunction fetchTasks() {\n  if (!projectID) {\n    return;\n  }\n  const keys = Social.keys(\n    `*/${app}/${projectTask}/${projectID}/${type}/*`,\n    \"final\",\n    {\n      order: \"desc\",\n      subscribe: true,\n    }\n  );\n  if (!keys) {\n    return \"Loading...\";\n  }\n  let flattenedKeys = flattenObject(keys);\n  const data = Social.get(flattenedKeys, \"final\");\n  // check if task is singular (since we have to update the return format for parsing)\n  const isSingular = flattenedKeys.length === 1;\n  if (isSingular) {\n    const [name, task, taskName] = flattenedKeys?.[0]?.split(\"/\").slice(0, 3);\n    return {\n      [name]: {\n        [task]: {\n          [taskName]: data,\n        },\n      },\n    };\n  }\n  return data;\n}\nconst data = fetchTasks();\nconst tasks = processData(data);\nfunction sortByPriority(a, b) {\n  const priorityOrder = { P0: 0, P1: 1, P2: 2, P3: 3 };\n  return priorityOrder[a.priority] - priorityOrder[b.priority];\n}\nuseEffect(() => {\n  if (Array.isArray(tasks)) {\n    setProposedTasks(\n      tasks\n        .filter((i) => i.status === StatusValues.PROPOSED)\n        .sort(sortByPriority)\n    );\n    setProgresTasks(\n      tasks\n        .filter((i) => i.status === StatusValues.PROGRESS)\n        .sort(sortByPriority)\n    );\n    setCompletedTasks(\n      tasks\n        .filter((i) => i.status === StatusValues.COMPLETED)\n        .sort(sortByPriority)\n    );\n  }\n}, [tasks]);\nconst onAddTask = (data) => {\n  const taskData = { ...data };\n  delete taskData.isAllowedToEdit;\n  delete taskData.taskId;\n  const taskId = normalize(taskData.title, \"-\");\n  const socialData = {\n    [type]: {\n      [taskId]: {\n        \"\": JSON.stringify(taskData),\n        metadata: taskData,\n      },\n    },\n    [app]: {\n      [projectTask]: {\n        [projectID]: {\n          [type]: {\n            [`${context.accountId}_task_${taskId}`]: \"\",\n          },\n        },\n      },\n    },\n  };\n  Social.set(socialData, {\n    onCommit: () => setShowAddTaskModal(false),\n  });\n};\nconst onEditTask = useCallback(\n  (data) => {\n    const newData = { ...data };\n    delete newData.isAllowedToEdit;\n    delete newData.taskId;\n    const taskId = currentEditTaskId;\n    const updatedData = {\n      [type]: {\n        [taskId]: {\n          \"\": JSON.stringify(newData),\n          metadata: newData,\n        },\n      },\n      [app]: {\n        [projectTask]: {\n          [projectID]: {\n            [type]: {\n              [`${context.accountId}_task_${taskId}`]: \"\",\n            },\n          },\n        },\n      },\n    };\n    Social.set(updatedData, {\n      force: true,\n      onCommit: () => setShowAddTaskModal(false),\n    });\n  },\n  [taskDetail, currentEditTaskId]\n);\nconst onDeleteTask = useCallback(() => {\n  const taskId = currentEditTaskId;\n  const updatedData = {\n    [type]: {\n      [taskId]: null,\n    },\n    [app]: {\n      [projectTask]: {\n        [projectID]: {\n          [type]: {\n            [`${context.accountId}_task_${taskId}`]: null,\n          },\n        },\n      },\n    },\n  };\n  Social.set(updatedData, {\n    force: true,\n  });\n}, [taskDetail, currentEditTaskId]);\nfunction handleDropdownToggle(columnTitle, index, value) {\n  setShowDropdownIndex((prevState) => ({\n    ...prevState,\n    [columnTitle + index]: value ?? !prevState[columnTitle + index] ?? true,\n  }));\n}\nconst DropdownMenu = ({ columnTitle, item, index, changeStatusOptions }) => {\n  return (\n    <span\n      className=\"ms-auto flex-shrink-0\"\n      onClick={(event) => event.stopPropagation()}\n      tabIndex=\"0\"\n      onBlur={() => handleDropdownToggle(columnTitle, index, false)}\n    >\n      <div\n        data-testid=\"task-dropdown\"\n        data-bs-toggle=\"dropdown\"\n        aria-expanded=\"false\"\n        onClick={() => {\n          handleDropdownToggle(columnTitle, index);\n          setTaskDetail(item);\n          setCurrentTaskId(normalize(item.taskId));\n        }}\n      >\n        <i class=\"bi bi-three-dots h5 pointer\"></i>\n      </div>\n      {showDropdownIndex[columnTitle + index] && (\n        <ul className=\"dropdown-menu show border\">\n          <li\n            className=\"dropdown-item\"\n            onClick={() => {\n              handleDropdownToggle(columnTitle, index);\n              setIsEdit(true);\n              setShowAddTaskModal(true);\n            }}\n          >\n            <i class=\"bi bi-pencil\"></i>Edit Task\n          </li>\n          <li\n            className=\"dropdown-item\"\n            onClick={() => {\n              handleDropdownToggle(columnTitle, index);\n              setDeleteConfirmationIndex(index);\n            }}\n          >\n            <i class=\"bi bi-trash3\"></i>Delete Task\n          </li>\n          {(changeStatusOptions ?? []).length > 0 && (\n            <div>\n              <hr />\n              <div\n                style={{ color: \"var(--secondary-font-color)\" }}\n                className=\"px-2 mb-1\"\n              >\n                Change Status\n              </div>\n              {changeStatusOptions.map((i) => (\n                <li\n                  className=\"dropdown-item\"\n                  onClick={() => {\n                    const data = { status: i.value };\n                    updateTaskDetail(data);\n                    handleDropdownToggle(columnTitle, index);\n                    onEditTask({ ...taskDetail, ...data });\n                  }}\n                >\n                  <i class=\"bi bi-check2\"></i>\n                  {i.label}\n                </li>\n              ))}\n            </div>\n          )}\n        </ul>\n      )}\n    </span>\n  );\n};\nconst DeleteConfirmationModal = () => {\n  return (\n    <Modal\n      open={typeof showDeleteConfirmationModalIndex === \"number\"}\n      title={\"Delete Task\"}\n      onOpenChange={() => setDeleteConfirmationIndex(null)}\n    >\n      <div className=\"d-flex flex-column gap-2\">\n        Are you sure you want to delete the task ?\n        <div className=\"d-flex justify-content-end gap-3 align-items-center mt-3\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setDeleteConfirmationIndex(null)}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              setDeleteConfirmationIndex(null);\n              onDeleteTask();\n            }}\n          >\n            Delete\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\nconst today = new Date().toISOString().split(\"T\")[0];\nconst AddTaskModal = useMemo(() => {\n  return (\n    <Modal\n      open={showAddTaskModal}\n      title={(isEditTask ? \"Edit\" : \"Add\") + \" Task\"}\n      onOpenChange={() => {\n        setShowAddTaskModal(!showAddTaskModal);\n        setTaskDetail(null);\n      }}\n      disableOutsideClick={true}\n    >\n      <Widget\n        src=\"builddao.near/widget/page.project.TaskEditor\"\n        props={{\n          showAddTaskModal: showAddTaskModal,\n          isEditTask: isEditTask,\n          task: taskDetail,\n          onEditTask: onEditTask,\n          onAddTask: onAddTask,\n          setShowAddTaskModal: setShowAddTaskModal,\n          project: project,\n        }}\n      />\n    </Modal>\n  );\n}, [showAddTaskModal, taskDetail]);\nfunction formatDate(date) {\n  return date;\n}\nconst ViewTaskModal = () => {\n  return (\n    <Modal\n      open={showViewTaskModal}\n      title={\"Task Details\"}\n      onOpenChange={() => {\n        setViewTaskModal(!showViewTaskModal);\n        setTaskDetail(null);\n      }}\n      disableOutsideClick={true}\n    >\n      <div className=\"d-flex flex-column gap-4\">\n        <div>\n          <label class=\"mb-1\">Title</label>\n          <div className=\"secondary-text\">{taskDetail.title}</div>\n        </div>\n        <div>\n          <label class=\"mb-1\">Description</label>\n          <div className=\"secondary-text\">{taskDetail.description}</div>\n        </div>\n        <div>\n          <label class=\"mb-1\">Priority</label>\n          <div className=\"secondary-text\">{taskDetail.priority ?? \"None\"}</div>\n        </div>\n        <div>\n          <label class=\"mb-1\">Assignee</label>\n          <div className=\"d-flex gap-2 align-items-center\">\n            {Array.isArray(taskDetail.assignees) &&\n              taskDetail.assignees.map((assignee) => (\n                <div className=\"assignee-item\" key={index}>\n                  <Widget\n                    src={\"builddao.near/widget/components.project.ProfileCard\"}\n                    props={{\n                      accountId: assignee,\n                      openLinkInNewTab: true,\n                    }}\n                  />\n                </div>\n              ))}\n          </div>\n        </div>\n        <div>\n          <label class=\"mb-1\">Labels</label>\n          <div className=\"d-flex gap-2 align-items-center\">\n            {Array.isArray(taskDetail.tags) &&\n              taskDetail.tags.map((tag) => (\n                <span key={i} className=\"badge p-2 rounded-0\">\n                  <span className=\"hashtag\">#</span>\n                  {tag}\n                </span>\n              ))}\n          </div>\n        </div>\n        <div className=\"d-flex gap-4 align-items-center\">\n          <div>\n            <label>Start Date</label>\n            <div className=\"secondary-text\">\n              {formatDate(taskDetail.startDate)}\n            </div>\n          </div>\n          <div>\n            <label>End Date</label>\n            <div className=\"secondary-text\">\n              {formatDate(taskDetail.endDate)}\n            </div>\n          </div>\n        </div>\n        <div>\n          <div className=\"d-flex justify-content-between mb-1 align-items-center\">\n            <label>Task List</label>\n          </div>\n          <div className=\"d-flex flex-column gap-2\">\n            {Array.isArray(taskDetail.list) &&\n              taskDetail.list?.map((item) => (\n                <div>\n                  <div className=\"d-flex gap-2\">\n                    <input\n                      className=\"form-check-input\"\n                      type=\"checkbox\"\n                      checked={item.isCompleted}\n                      disabled={true}\n                    />\n                    <label>{item.title}</label>\n                  </div>\n                </div>\n              ))}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\nconst Column = ({ title, addTask, columnTasks, changeStatusOptions }) => {\n  return (\n    <div className=\"d-flex flex-column gap-1 col-md-4\">\n      <div className=\"border p-3 rounded-2 d-flex justify-content-between align-items-center h6\">\n        {title}\n        {isAllowedToAdd && (\n          <div onClick={addTask}>\n            <i class=\"bi bi-plus-lg pointer\"></i>\n          </div>\n        )}\n      </div>\n      <div className=\"d-flex flex-column gap-2\">\n        {columnTasks.map((item, index) => (\n          <div\n            onClick={() => {\n              setViewTaskModal(true);\n              setTaskDetail(item);\n            }}\n            style={{ backgroundColor: \"var(--card-bg-color)\" }}\n            className=\"p-3 d-flex justify-content-between rounded-2 gap-2 pointer\"\n          >\n            <div className=\"d-flex flex-column gap-2\">\n              <div className=\"h6 bold\">{item.title}</div>\n              <div className=\"h6\">Author: {item.author}</div>\n              <div className=\"h6\">Priority: {item.priority}</div>\n              {title === \"In Progress\" &&\n                (!item.startDate || !item.endDate) && (\n                  <div className=\"warning-tag p-1 px-2 rounded-2\">\n                    It is necessary to define start/end dates.\n                  </div>\n                )}\n              {/* <div className=\"h6\">Last edited: </div> */}\n            </div>\n            {item.isAllowedToEdit && (\n              <DropdownMenu\n                columnTitle={title}\n                item={item}\n                index={index}\n                changeStatusOptions={changeStatusOptions}\n              />\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\nconst columns = [\n  {\n    title: \"Proposed\",\n    columnTasks: proposedTasks,\n    addTask: () => {\n      setTaskDetail({ ...task, status: StatusValues.PROPOSED });\n      setShowAddTaskModal(true);\n    },\n    changeStatusOptions: [\n      { label: \"In Progress\", value: StatusValues.PROGRESS },\n    ],\n  },\n  {\n    title: \"In Progress\",\n    columnTasks: progressTasks,\n    addTask: () => {\n      setTaskDetail({ ...task, status: StatusValues.PROGRESS });\n      setShowAddTaskModal(true);\n    },\n    changeStatusOptions: [\n      { label: \"Completed\", value: StatusValues.COMPLETED },\n    ],\n  },\n  {\n    title: \"Completed\",\n    columnTasks: completedTasks,\n    addTask: () => {\n      setTaskDetail({ ...task, status: StatusValues.COMPLETED });\n      setShowAddTaskModal(true);\n    },\n    changeStatusOptions: [],\n  },\n];\nreturn (\n  <ThemeContainer>\n    <Wrapper>\n      {AddTaskModal}\n      <ViewTaskModal />\n      <DeleteConfirmationModal />\n      <div className=\"container\">\n        <div className=\"row\">\n          {columns.map((item) => (\n            <Column\n              title={item.title}\n              addTask={item.addTask}\n              columnTasks={item.columnTasks}\n              changeStatusOptions={item.changeStatusOptions}\n            />\n          ))}\n        </div>\n      </div>\n    </Wrapper>\n  </ThemeContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/builddao.near/widget/page.project.tabs.Task", "fact_widget_deployments_id": "184912a3fcc4fbf34bf0ed600700fce5", "inserted_timestamp": "2024-06-25T18:55:22.973Z", "modified_timestamp": "2024-06-25T18:55:22.973Z", "__row_index": 1}