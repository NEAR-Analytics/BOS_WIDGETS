{"tx_hash": "784SHXHYUMV63XsBdR6EbEbPsPahM5qwoteEc3oMExK4", "action_id_social": "HmbqDFt2iJKZsEJhZ324baMEtKUgEdvQ6hCekxzi11Z4-0-widget", "block_id": 121157771, "block_timestamp": "2024-06-14T16:36:18.780Z", "signer_id": "builddao.near", "widget_name": "page.projects.Editor", "source_code": "const accountId = context.accountId;\nconst { Button, InputField, TextEditor, Modal } = VM.require(\n  \"buildhub.near/widget/components\"\n) || {\n  Button: () => <></>,\n  InputField: () => <></>,\n  TextEditor: () => <></>,\n  Modal: () => <></>,\n};\nconst { normalize } = VM.require(\"devs.near/widget/lib.stringUtils\") || {\n  normalize: () => {},\n};\nconst { getProjectMeta } = VM.require(\"builddao.near/widget/lib.projects\") || {\n  getProjectMeta: () => {},\n};\nconst { href } = VM.require(\"buildhub.near/widget/lib.url\") || {\n  href: () => {},\n};\nconst isNearAddress = (address) => {\n  if (typeof address !== \"string\") {\n    return false;\n  }\n  // Check for unnamed wallet address format\n  if (address.length === 64 && /^[0-9A-F]+$/i.test(address)) {\n    return true;\n  }\n  // Existing logic for account name validation (assuming .near or .testnet suffix)\n  if (!address.endsWith(\".near\") && !address.endsWith(\".testnet\")) {\n    return false;\n  }\n  const parts = address.split(\".\");\n  if (parts[0].length < 2 || parts[0].length > 32) {\n    return false;\n  }\n  if (!/^[a-z0-9_-]+$/i.test(parts[0])) {\n    return false;\n  }\n  return true;\n};\nconst tabs = [\n  { id: \"overview\", label: \"Overview\", disabled: true, checked: true },\n  // { id: \"activity\", label: \"Activity\", checked: true },\n  { id: \"tasks\", label: \"Tasks\", checked: true },\n  // Uncomment after the support is added\n  // { id: \"discussion\", label: \"Discussion\", checked: false },\n  // { id: \"code\", label: \"Code\", checked: false },\n  // { id: \"roadmap\", label: \"Roadmap\", checked: false },\n  // Feed tabs\n  { id: \"activity\", label: \"Activity\", checked: true },\n  { id: \"updatesFeed\", label: \"Updates Feed\", checked: true },\n  { id: \"feedbackFeed\", label: \"Feedback Feed\", checked: true },\n];\nconst app = props.app ?? \"builddao.near\";\nconst poltlockProjectId = props.poltlockProjectId;\nconst potlockProjectProfile = null;\nconst potlockProjectTags = null;\nconst editProjectId = props.id ?? null;\nconst isEditScreen = !!editProjectId;\nlet editProjectData = null;\nif (editProjectId) {\n  editProjectData = getProjectMeta(editProjectId);\n}\nif (poltlockProjectId) {\n  potlockProjectProfile = Social.getr(`${poltlockProjectId}/profile`);\n}\nconst [tags, setTags] = useState(props.filters.tags ?? []);\nconst [projectAccount, setProjectAccount] = useState(accountId);\nconst [title, setTitle] = useState(\"\");\nconst [description, setDescription] = useState(\"\");\nconst [location, setLocation] = useState(\"\");\nconst [contributorsWithRoles, setContributorsWithRoles] = useState([]);\nconst [contributors, setContributors] = useState([context.accountId]);\nconst [twitter, setTwitter] = useState(\"\");\nconst [gitHub, setGitHub] = useState(\"\");\nconst [telegram, setTelegram] = useState(\"\");\nconst [website, setWebsite] = useState(\"\");\nconst [selectedTabs, setSelectedTabs] = useState(\n  new Set(tabs.filter((tab) => tab.checked).map((tab) => tab.id.toLowerCase()))\n);\nconst [avatar, setAvatar] = useState(\"\");\nconst [coverImage, setCoverImage] = useState(\"\");\nconst [teamSize, setTeamSize] = useState(teamSize ?? \"\");\nconst [invalidContributorFound, setInvalidContributorFound] = useState(false);\nconst [invalidProjectAccount, setInvalidProjectAccount] = useState(false);\nconst [showSuccessModal, setShowSuccessModal] = useState(false);\nconst [roles, setRoles] = useState([]);\nconst [currentScreen, setCurrentScreen] = useState(1);\nconst [projectIdForSocialDB, setProjectId] = useState(null); // for edit changes\nconst [contributorSearchTerm, setContributorSearch] = useState(\"\");\nfunction removeWhiteSpace(str) {\n  return str.replace(/\\s/g, \"-\").toLowerCase();\n}\nfunction convertArrayToObject(array) {\n  const obj = {};\n  array.forEach((value, index) => {\n    obj[value] = \"\";\n  });\n  return obj;\n}\nfunction convertObjectToArray(obj) {\n  return Object.keys(obj);\n}\nuseEffect(() => {\n  if (potlockProjectProfile && !title) {\n    const {\n      name,\n      description,\n      image,\n      backgroundImage,\n      linktree,\n      plTeam,\n      plCategories,\n      tags,\n    } = potlockProjectProfile;\n    const { twitter, github, telegram, website } = linktree;\n    setTitle(name);\n    setDescription(description);\n    setContributorsWithRoles(\n      JSON.parse(plTeam ?? \"[]\").map((i) => {\n        return { role: \"\", accountId: i };\n      })\n    );\n    setContributors(JSON.parse(plTeam ?? \"[]\"));\n    setTwitter(linktree.twitter ? `https://twitter.com/${twitter}` : null);\n    setGitHub(linktree.github ? `https://github.com/${github}` : null);\n    setTelegram(linktree.telegram ? `https://t.me/${telegram}` : null);\n    setWebsite(\n      website\n        ? website.includes(\"https://\")\n          ? website\n          : `https://${website}`\n        : null\n    );\n    setAvatar(image);\n    setCoverImage(backgroundImage);\n    setProjectAccount(poltlockProjectId);\n    setTags(\n      (plCategories\n        ? JSON.parse(plCategories ?? \"[]\")\n        : Object.keys(tags ?? {})\n      ).map((i) => removeWhiteSpace(i))\n    );\n  }\n}, [potlockProjectProfile]);\nuseEffect(() => {\n  if (editProjectData && !title) {\n    const {\n      title,\n      description,\n      profileImage,\n      backgroundImage,\n      linktree,\n      contributorsWithRoles,\n      contributors,\n      projectAccountId,\n      tags,\n      tabs,\n      location,\n      teamSize,\n    } = editProjectData;\n    const { twitter, github, telegram, website } = linktree;\n    setTitle(title);\n    setLocation(location);\n    setTeamSize(teamSize);\n    setProjectId(editProjectId.split(\"project/\")[1]);\n    setDescription(description);\n    setContributorsWithRoles(contributorsWithRoles ?? []);\n    setContributors(contributors ?? []);\n    setTwitter(twitter);\n    setGitHub(github);\n    setTelegram(telegram);\n    setWebsite(website);\n    setAvatar(profileImage?.image ?? profileImage);\n    setCoverImage(backgroundImage?.image ?? backgroundImage);\n    setProjectAccount(projectAccountId);\n    setTags(\n      Array.isArray(tags)\n        ? tags.map((i) => removeWhiteSpace(i))\n        : convertObjectToArray(tags ?? {})\n    );\n    setSelectedTabs(new Set(tabs));\n  }\n}, [editProjectData]);\nconst handleCheckboxChange = (event) => {\n  const { id } = event.target;\n  const newSelectedTabs = new Set(selectedTabs); // Create a copy to avoid mutation\n  if (event.target.checked) {\n    newSelectedTabs.add(id.toLowerCase());\n  } else {\n    newSelectedTabs.delete(id.toLowerCase());\n  }\n  setSelectedTabs(newSelectedTabs);\n};\nconst handleTags = (tags) => {\n  let filtered = tags.map((tag) =>\n    removeWhiteSpace(tag.customOption ? tag.label : tag)\n  );\n  setTags(filtered);\n};\n// Commenting roles code (to be added in v1)\n// const handleRoles = (roles) => {\n//   let filtered = roles.map((role) =>\n//     removeWhiteSpace(role.customOption ? role.label : role),\n//   );\n//   setRoles(filtered);\n// };\n// const handleContributorChange = ({ index, role, accountId }) => {\n//   const updatedData = [...contributorsWithRoles];\n//   updatedData[index].role = role;\n//   updatedData[index].accountId = accountId;\n//   setContributorsWithRoles(updatedData);\n// };\n// const handleAddContributor = () => {\n//   setContributorsWithRoles([\n//     ...contributorsWithRoles,\n//     { accountId: \"\", role: \"\" },\n//   ]);\n// };\n// const handleDeleteContributor = ({ index }) => {\n//   const updatedData = [...contributorsWithRoles];\n//   updatedData.splice(index, 1);\n//   setContributorsWithRoles(updatedData);\n// };\nconst handleContributors = (contributors) => {\n  let filtered = contributors.map((contributor) => {\n    if (contributor.customOption) {\n      return contributor.label;\n    } else {\n      return contributor;\n    }\n  });\n  const invalidAddress = filtered.find((address) => !isNearAddress(address));\n  invalidAddress\n    ? setInvalidContributorFound(true)\n    : setInvalidContributorFound(false);\n  setContributors(filtered);\n};\nfunction isValidUrl(url) {\n  const regex = /^(?:(http|https):\\/\\/)?([^\\s]+\\.[^\\s]+)?(?:\\/[\\w\\-\\.]+)*\\/?$/;\n  return regex.test(url);\n}\nconst websiteUrlHandler = (e) => {\n  const url = e.target.value;\n  setWebsite(url);\n};\nconst projectAccountIdHandler = (e) => {\n  const accountId = e.target.value;\n  const isValid = isNearAddress(accountId);\n  !isValid ? setInvalidProjectAccount(true) : setInvalidProjectAccount(false);\n  setProjectAccount(accountId);\n};\nconst Container = styled.div`\n  color: white;\n  .form-control {\n    background: transparent;\n  }\n  .form-group {\n    width: 100%;\n    & > div > div.p-2 {\n      background: transparent !important;\n      border: 1px solid var(--border-color, #ccc);\n      border-width: 0px 1px 1px;\n      border-top-style: initial;\n      border-right-style: solid;\n      border-bottom-style: solid;\n      border-left-style: solid;\n      border-top-color: initial;\n      border-right-color: rgb(222, 226, 230);\n      border-bottom-color: rgb(222, 226, 230);\n      border-left-color: rgb(222, 226, 230);\n      border-image: initial;\n      border-bottom-left-radius: 0.375rem;\n      border-bottom-right-radius: 0.375rem;\n      min-height: 9em;\n      * {\n        color: var(--text-color, #fff);\n      }\n    }\n  }\n  .form-select {\n    background-color: #000 !important;\n    height: 100%;\n    color: var(--text-color, #fff);\n  }\n  .form-check {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    padding-left: 0px;\n  }\n  .form-check-input {\n    background-color: transparent;\n    border: 1px solid var(--border-color, #ccc);\n    &:checked {\n      background-color: var(--primary-color, #38c793);\n      border-color: var(--primary-color, #38c793);\n      &:focus {\n        box-shadow: none;\n      }\n    }\n    &:focus {\n      box-shadow: none;\n    }\n    &:not(:checked):not(:focus) {\n      background-image: url(\"data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%27-4 -4 8 8%27%3e%3ccircle r=%273%27 fill=%27%23fff%27/%3e%3c/svg%3e\");\n    }\n  }\n  .err,\n  .err-p_id {\n    color: #ff8888;\n    font-size: 12px;\n    padding: 0;\n    margin: 0;\n  }\n  .err-p_id {\n    margin-top: -20px;\n  }\n  .col-sm-6 div {\n    width: 100% !important;\n  }\n  .flex-1 div {\n    width: 100% !important;\n  }\n  .flex-1 {\n    flex: 1;\n  }\n  .text-green {\n    color: #38c793;\n  }\n  .text-red {\n    color: #ff8888;\n  }\n  .cursor-pointer {\n    cursor: pointer;\n  }\n`;\nfunction onSuccessModalToggle(v) {\n  setShowSuccessModal(v);\n}\nconst ModalContainer = styled.div`\n  .pb-4 {\n    padding-bottom: 0px !important;\n    margin-bottom: -20px !important;\n  }\n`;\nconst SuccessModal = () => {\n  return (\n    <ModalContainer>\n      <Modal\n        open={showSuccessModal}\n        onOpenChange={onSuccessModalToggle}\n        toggle={onSuccessModalToggle}\n      >\n        <div className=\"d-flex flex-column gap-2 align-items-center\">\n          <img\n            src=\"https://ipfs.near.social/ipfs/bafkreidhpcgdofhhvyybz3d4xmoheovksulnatfsdyfljpphwvm74kl43e\"\n            width={50}\n          />\n          <div className=\"h5\">\n            {isEditScreen ? \"Edited\" : \"Created\"} successful!\n          </div>\n          <div>\n            Your project has been {isEditScreen ? \"edited\" : \"created\"}{\" \"}\n            successfully and is now ready to be built and shared.\n          </div>\n          <div className=\"text-center mt-2\">\n            <Button\n              variant=\"primary\"\n              href={href({\n                widgetSrc: `builddao.near/widget/Index`,\n                params: {\n                  page: \"projects\",\n                  tab: \"myProjects\",\n                },\n              })}\n            >\n              View My Projects Page\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </ModalContainer>\n  );\n};\nfunction onCreateProject() {\n  const projectID = isEditScreen ? projectIdForSocialDB : normalize(title, \"-\");\n  const project = {\n    title,\n    description,\n    profileImage: avatar,\n    backgroundImage: coverImage,\n    tags: convertArrayToObject(tags),\n    linktree: {\n      twitter: twitter,\n      github: gitHub,\n      telegram: telegram,\n      website: website,\n    },\n    contributors,\n    tabs: Array.from(selectedTabs),\n    projectAccountId: projectAccount,\n    teamSize,\n    location,\n  };\n  const data = {\n    project: {\n      [projectID]: {\n        \"\": JSON.stringify(project),\n        metadata: {\n          name: title,\n          description: description,\n          image: avatar,\n          backgroundImage: coverImage,\n          tags: convertArrayToObject(tags),\n          linktree: {\n            twitter: twitter && `https://twitter.com/${twitter}`,\n            github: gitHub && `https://github.com/${gitHub}`,\n            telegram: telegram && `https://t.me/${telegram}`,\n            website: website,\n          },\n        },\n      },\n    },\n    [app]: {\n      project: {\n        [`${context.accountId}_project_${projectID}`]: \"\",\n      },\n    },\n  };\n  if (projectAccount.includes(\".sputnik-dao.near\")) {\n    const policy = Near.view(projectAccount, \"get_policy\");\n    const base64 = Buffer.from(\n      JSON.stringify({\n        data: {\n          [projectAccount]: data,\n        },\n        options: { refund_unused_deposit: true },\n      }),\n      \"utf-8\"\n    ).toString(\"base64\");\n    Near.call({\n      contractName: projectAccount,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: `Project creation using BuildDAO created by ${context.accountId}`,\n          kind: {\n            FunctionCall: {\n              receiver_id: \"social.near\",\n              actions: [\n                {\n                  method_name: \"set\",\n                  args: base64,\n                  deposit: \"100000000000000000000000\",\n                  gas: \"200000000000000\",\n                },\n              ],\n            },\n          },\n        },\n      },\n      deposit: policy?.proposal_bond || 100000000000000000000000,\n      gas: 200000000000000,\n    });\n  } else {\n    Social.set(data, {\n      onCommit: () => {\n        setShowSuccessModal(true);\n      },\n    });\n  }\n}\nfunction getSuggestiveAccounts() {\n  let suugestiveAccounts = [];\n  const profilesData = Social.get(\"*/profile/name\", \"final\") || {};\n  const followingData = Social.get(\n    `${context.accountId}/graph/follow/**`,\n    \"final\"\n  );\n  if (!profilesData) return <></>;\n  const profiles = Object.entries(profilesData);\n  const term = (contributorSearchTerm || \"\").replace(/\\W/g, \"\").toLowerCase();\n  const limit = 10;\n  for (let i = 0; i < profiles.length; i++) {\n    let score = 0;\n    const accountId = profiles[i][0];\n    const accountIdSearch = profiles[i][0].replace(/\\W/g, \"\").toLowerCase();\n    const nameSearch = (profiles[i][1]?.profile?.name || \"\")\n      .replace(/\\W/g, \"\")\n      .toLowerCase();\n    const accountIdSearchIndex = accountIdSearch.indexOf(term);\n    const nameSearchIndex = nameSearch.indexOf(term);\n    if (accountIdSearchIndex > -1 || nameSearchIndex > -1) {\n      score += 10;\n      if (accountIdSearchIndex === 0) {\n        score += 10;\n      }\n      if (nameSearchIndex === 0) {\n        score += 10;\n      }\n      if (followingData[accountId] === \"\") {\n        score += 30;\n      }\n      suugestiveAccounts.push(accountId);\n    }\n  }\n  return suugestiveAccounts.slice(0, limit);\n}\nconst SecondScreen = () => {\n  return (\n    <>\n      <div className=\"d-flex flex-column gap-4\" data-bs-theme=\"dark\">\n        <div className=\"d-flex flex-column gap-1\">\n          <div className=\"form-group\">\n            <label className=\"mb-1\">Contributors</label>\n            <Typeahead\n              multiple\n              options={getSuggestiveAccounts()}\n              allowNew\n              selected={contributors}\n              onInputChange={(e) => setContributorSearch(e)}\n              onChange={(e) => handleContributors(e)}\n            />\n            {invalidContributorFound && (\n              <p className=\"err\">\n                The address you just entered are invalid, please enter valid\n                near addresses\n              </p>\n            )}\n          </div>\n        </div>\n        {/* Commenting roles code (to be added in v1) */}\n        {/* <div className=\"form-group mb-3\">\n          <label className=\"pb-2\">Create Roles</label>\n          <Typeahead\n            multiple\n            options={\n              props.tagFilters ?? [\n                \"Admin\",\n                \"Owner\",\n                \"Contributor\",\n                \"Council\",\n                \"Community\",\n              ]\n            }\n            allowNew\n            placeholder=\"Start Typing\"\n            selected={roles}\n            onChange={(e) => handleRoles(e)}\n          />\n        </div>\n        <div className=\"form-group mb-3\">\n          <label className=\"pb-2 d-flex justify-content-between align-items-center\">\n            Add team members and assign them roles{\" \"}\n            <div className=\"cursor-pointer\" onClick={handleAddContributor}>\n              <i class=\"bi bi-plus-square h4 text-green\"></i>\n            </div>\n          </label>\n          <div className=\"d-flex flex-column gap-2\">\n            {(contributorsWithRoles ?? []).map((item, index) => {\n              return (\n                <div className=\"d-flex justify-content-between gap-3 align-items-center\">\n                  <div className=\"flex-1\">\n                    <InputField\n                      placeholder={\"Enter Account Address\"}\n                      value={item.accountId}\n                      error={item.accountId && !isNearAddress(item.accountId)}\n                      onChange={(e) =>\n                        handleContributorChange({\n                          accountId: e.target.value,\n                          index,\n                          role: item.role,\n                        })\n                      }\n                      maxWidth=\"none\"\n                    />\n                  </div>\n                  <select\n                    value={item.role}\n                    onChange={(e) =>\n                      handleContributorChange({\n                        role: e.target.value,\n                        index,\n                        accountId: item.accountId,\n                      })\n                    }\n                    className=\"form-select flex-1\"\n                  >\n                    <option selected value=\"\">\n                      Select Role\n                    </option>\n                    {roles.map((role) => (\n                      <option value={role}>{role}</option>\n                    ))}\n                  </select>\n                  <div\n                    className=\"cursor-pointer\"\n                    onClick={() => handleDeleteContributor({ index })}\n                  >\n                    <i class=\"bi bi-trash3-fill h5 text-red\"></i>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div> */}\n        <div className=\"form-group mb-3\">\n          <label className=\"pb-2\">Avatar</label>\n          <Widget\n            src=\"buildhub.near/widget/components.UploadField\"\n            props={{\n              image: avatar,\n              onChange: (image) => setAvatar({ image }),\n            }}\n          />\n        </div>\n        <div className=\"form-group mb-3\">\n          <label className=\"pb-2\">Cover Image</label>\n          <Widget\n            src=\"buildhub.near/widget/components.UploadField\"\n            props={{\n              image: coverImage,\n              onChange: (image) => setCoverImage({ image }),\n            }}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label className=\"mb-3\">Tabs</label>\n          <div className=\"d-flex flex-column gap-1\">\n            {tabs.map((tab) => (\n              <div className=\"form-check form-switch\" key={tab.id}>\n                <label className=\"form-check-label\" htmlFor={tab.id}>\n                  {tab.label}\n                </label>\n                <input\n                  className=\"form-check-input\"\n                  type=\"checkbox\"\n                  role=\"switch\"\n                  id={tab.id}\n                  checked={selectedTabs.has(tab.id.toLowerCase())}\n                  onChange={handleCheckboxChange}\n                  disabled={tab.disabled}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n        <div className=\"form-group\">\n          <label className=\"mb-1\">Tags</label>\n          <Typeahead\n            multiple\n            options={\n              props.tagFilters ?? [\n                \"Community\",\n                \"Open Source\",\n                \"Social Impact\",\n                \"DAO\",\n                \"Climate\",\n                \"Public Good\",\n                \"Education\",\n                \"Community\",\n              ]\n            }\n            allowNew\n            placeholder=\"Start Typing\"\n            selected={tags}\n            onChange={(e) => handleTags(e)}\n          />\n        </div>\n        <div className=\"d-flex align-items-center justify-content-end gap-2 mt-3\">\n          <Button variant=\"outline\" onClick={() => setCurrentScreen(1)}>\n            Back\n          </Button>\n          <Button variant=\"primary\" onClick={onCreateProject}>\n            {isEditScreen ? \"Save Changes\" : \"Create\"}\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n};\nconst FirstScreen = () => {\n  return (\n    <>\n      <div className=\"d-flex flex-column gap-4\">\n        <InputField\n          key={\"Project-AccountId\"}\n          label={\n            <>\n              Project Account Address<span className=\"text-danger\">*</span>\n            </>\n          }\n          placeholder={\"Enter Project Account Address\"}\n          value={projectAccount}\n          error={invalidProjectAccount}\n          onChange={projectAccountIdHandler}\n          maxWidth=\"none\"\n        />\n        {invalidProjectAccount && (\n          <p className=\"err-p_id text-center\">\n            Invalid Near Address, please enter a valid near address\n          </p>\n        )}\n        <InputField\n          key={\"Project-Title\"}\n          label={\n            <>\n              Project Title<span className=\"text-danger\">*</span>\n            </>\n          }\n          placeholder={\"Enter Project Title\"}\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          maxWidth=\"none\"\n        />\n        <div className=\"form-group\">\n          <label className=\"mb-1\">\n            Description<span className=\"text-danger\">*</span>\n          </label>\n          <TextEditor\n            value={description}\n            onChange={(e) => setDescription(e)}\n            maxWidth=\"none\"\n          />\n        </div>\n        <div className=\"d-flex gap-3 w-100 form-group\">\n          <div className=\"flex-1\">\n            <InputField\n              key={\"Location\"}\n              label={\"Location\"}\n              placeholder={\"Enter location\"}\n              value={location}\n              onChange={(e) => setLocation(e.target.value)}\n              maxWidth=\"none\"\n            />\n          </div>\n          <div\n            className=\"flex-1 d-flex flex-column gap-2 h-100\"\n            key={\"team-sizes\"}\n          >\n            <label>Team Size</label>\n            <select\n              value={teamSize}\n              onChange={(e) => setTeamSize(e.target.value)}\n              className=\"form-select rounded-2\"\n              style={{\n                padding: \"12px\",\n                fontSize: \"16px\",\n                lineHeight: \"170%\",\n                border: \"1px solid rgba(255, 255, 255, 0.2)\",\n                marginTop: \"-1px\",\n              }}\n            >\n              <option selected disabled value=\"\">\n                Select Team Size\n              </option>\n              <option value=\"1-10\">1-10</option>\n              <option value=\"10-50\">10-50</option>\n              <option value=\"50-100\">50-100</option>\n              <option value=\"100+\">100+</option>\n            </select>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-sm-6 mt-2\">\n            <InputField\n              key={\"twitter\"}\n              label={\"Twitter\"}\n              placeholder={\"handle\"}\n              error={twitter && !isValidUrl(`https://twitter.com/${twitter}`)}\n              prefix={\"https://twitter.com/\"}\n              value={twitter}\n              onChange={(e) => setTwitter(e.target.value)}\n              maxWidth=\"none\"\n            />\n          </div>\n          <div class=\"col-sm-6 mt-2\">\n            <InputField\n              key={\"github\"}\n              label={\"GitHub\"}\n              placeholder={\"handle\"}\n              prefix={\"https://github.com/\"}\n              error={gitHub && !isValidUrl(`https://github.com/${gitHub}`)}\n              value={gitHub}\n              onChange={(e) => setGitHub(e.target.value)}\n              maxWidth=\"none\"\n            />\n          </div>\n          <div class=\"col-sm-6 mt-2\">\n            <InputField\n              key={\"telegram\"}\n              label={\"Telegram\"}\n              placeholder={\"handle\"}\n              prefix={\"https://t.me/\"}\n              error={telegram && !isValidUrl(`https://t.me/${telegram}`)}\n              value={telegram}\n              onChange={(e) => setTelegram(e.target.value)}\n              maxWidth=\"none\"\n            />\n          </div>\n          <div class=\"col-sm-6 mt-2\">\n            <InputField\n              key={\"website\"}\n              label={\"Website\"}\n              error={website && !isValidUrl(website)}\n              placeholder={\"https://www.nearbuilders.org/\"}\n              value={website}\n              onChange={websiteUrlHandler}\n              maxWidth=\"none\"\n            />\n          </div>\n        </div>\n        <div className=\"d-flex align-items-center justify-content-end gap-2 mt-3\">\n          <Button\n            variant=\"outline\"\n            href={href({\n              widgetSrc: `builddao.near/widget/Index`,\n              params: {\n                page: \"projects\",\n              },\n            })}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"primary\"\n            disabled={\n              invalidContributorFound ||\n              invalidProjectAccount ||\n              !title ||\n              !description ||\n              !projectAccount\n            }\n            onClick={() => setCurrentScreen(2)}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n};\nreturn (\n  <Container data-bs-theme=\"dark\">\n    <div className=\"p-4\">\n      <div className=\"h4\">Create Project</div>\n      <p>\n        Easily create, share, and track all projects within our vibrant builder\n        community.\n      </p>\n      <SuccessModal />\n      {currentScreen === 1 ? <FirstScreen /> : <SecondScreen />}\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/builddao.near/widget/page.projects.Editor", "fact_widget_deployments_id": "968bd00e7bd67a3eee05f3eabd924bc6", "inserted_timestamp": "2024-06-14T17:55:46.860Z", "modified_timestamp": "2024-06-14T17:55:46.860Z", "__row_index": 0}