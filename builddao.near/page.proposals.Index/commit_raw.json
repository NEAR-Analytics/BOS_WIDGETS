{"tx_hash": "Z32Sv46hT4VsudVzovYVy29ZzQMXnXJWCQN3D4Y5TbU", "action_id_social": "2k1jzsAuWKUMmypyvQREhYZ8tbSdEYgdNg5z2zgd3HhJ-0-widget", "block_id": 121158209, "block_timestamp": "2024-06-14T16:44:44.261Z", "signer_id": "builddao.near", "widget_name": "page.proposals.Index", "source_code": "const { Button, Modal } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: <></>,\n  Modal: <></>,\n};\nconst { Header } = VM.require(\"buildhub.near/widget/components.Header\") || {\n  Header: () => <></>,\n};\nconst DaoSDK = VM.require(\"sdks.near/widget/SDKs.Sputnik.DaoSDK\") || (() => {});\nconst NotificationModalContainer = styled.div`\n  .pb-4 {\n    padding-bottom: 0px !important;\n  }\n`;\nconst resPerPage = 10;\nconst daoId = props.daoId ?? \"build.sputnik-dao.near\";\nconst proposalId = props.proposalId ?? null;\nconst sdk = DaoSDK(daoId);\nconst [currentPage, setCurrentPage] = useState(0);\nconst accountId = context.accountId;\nif (!sdk) {\n  return <></>;\n}\nconst [showProposalModal, setShowModal] = useState(false);\nconst [showNotificationModal, setNotificationModal] = useState(false);\nconst [voteDetails, setVoteDetails] = useState(null);\nconst [showCreateProposalModal, setShowCreateProposalModal] = useState(false);\nconst [showFiltersModal, setFiltersModal] = useState(false);\nconst [selectedTypes, setSelectedTypes] = useState([]);\nconst [selectedStatus, setSelectedStatus] = useState([]);\nconst [proposals, setProposals] = useState([]);\nconst [filteredProposals, setFilteredProposals] = useState([]);\nconst [filteredLength, setFilteredLength] = useState(null);\nconst lastProposalId = sdk.getLastProposalId();\nconst reversedProposals = proposalId\n  ? [\n      sdk.getProposalById({\n        proposalId,\n      }),\n    ] || []\n  : sdk.getProposals({\n      offset:\n        currentPage === 0\n          ? lastProposalId > resPerPage\n            ? lastProposalId - resPerPage\n            : 0\n          : lastProposalId - currentPage * resPerPage,\n      limit: resPerPage,\n    }) || [];\nsetProposals(reversedProposals.reverse());\nconst PaginationThemeContainer = props.PaginationThemeContainer;\nconst ThemeContainer =\n  props.ThemeContainer ||\n  styled.div`\n    --primary-bg-color: #23242b;\n    --secondary-bg-color: #ffffff1a;\n    --primary-border-color: #fff;\n    --primary-text-color: #ffffff;\n    --secondary-text-color: #b0b0b0;\n    --primary-btn-bg-color: #eca227;\n    --primary-btn-text-color: #000;\n    --approve-bg-color: #82e299;\n    --reject-bg-color: #c23f38;\n    --spam-bg-color: #f5c518;\n    --vote-button-color: #ffffff;\n    --success-badge-bg-color: #38c7931a;\n    --success-badge-text-color: #38c793;\n    --primary-badge-bg-color: #eca22733;\n    --primary-badge-text-color: #eca227;\n    --info-badge-bg-color: #51b6ff33;\n    --info-badge-text-color: #51b6ff;\n    --danger-badge-bg-color: #fd2a5c1a;\n    --danger-badge-text-color: #fd2a5c;\n    --black-badge-bg-color: #ffffff1a;\n    --black-badge-text-color: #fff;\n  `;\nconst Container = styled.div`\n  .ndc-card {\n    border: none;\n    background-color: var(--primary-bg-color);\n    color: var(--primary-text-color) !important;\n    padding: 2rem;\n  }\n`;\nconst NotificationModal = () => {\n  return (\n    <NotificationModalContainer>\n      <Modal\n        open={showNotificationModal}\n        title={\"Send Notification\"}\n        onOpenChange={() => {}}\n        hideCloseBtn={true}\n      >\n        <div className=\"ndc-card d-flex flex-column gap-3 p-4\">\n          Do you want to notify proposer: {proposer} about the vote?\n          <div className=\"d-flex gap-3 justify-content-end\">\n            <Button\n              variant=\"outline danger\"\n              onClick={() => {\n                handleVote({\n                  action: voteDetails.action,\n                  daoId,\n                  proposalId: voteDetails.proposalId,\n                  proposer: voteDetails.proposer,\n                  showNotification: false,\n                });\n                setNotificationModal(false);\n              }}\n            >\n              No\n            </Button>\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                handleVote({\n                  action: voteDetails.action,\n                  daoId,\n                  proposalId: voteDetails.proposalId,\n                  proposer: voteDetails.proposer,\n                  showNotification: true,\n                });\n                setNotificationModal(false);\n              }}\n            >\n              Yes\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </NotificationModalContainer>\n  );\n};\nconst handleVote = ({ action, proposalId, proposer, showNotification }) => {\n  const customAction = action.replace(\"Vote\", \"\");\n  const notification = {\n    [accountId]: {\n      index: {\n        notify: JSON.stringify([\n          {\n            key: proposer,\n            value: {\n              message: `${accountId} voted to ${customAction} your proposal for ${daoId} (Proposal ID: ${proposalId})`,\n              params: {\n                daoId: daoId,\n                proposalId: proposalId,\n              },\n              type: \"custom\",\n              widget: \"builddao.near/widget/Index?page=activity&tab=proposals\",\n            },\n          },\n        ]),\n      },\n    },\n  };\n  sdk.actProposal({\n    proposalId,\n    action,\n    gas: 200000000000000,\n    additionalCalls: showNotification\n      ? [\n          {\n            contractName: \"social.near\",\n            methodName: \"set\",\n            args: {\n              data: notification,\n              options: { refund_unused_deposit: true },\n            },\n            deposit: Big(JSON.stringify(notification).length * 16)\n              .mul(Big(10).pow(20))\n              .toString(),\n          },\n        ]\n      : null,\n  });\n};\nconst policy = sdk.getPolicy();\nconst proposalKinds = sdk.proposalKinds;\nconst actions = sdk.voteActions;\nconst userRoles = [];\nif (Array.isArray(policy.roles)) {\n  for (const role of policy.roles) {\n    if (role.kind === \"Everyone\") {\n      userRoles.push(role);\n      continue;\n    }\n    if (!role.kind.Group) continue;\n    if (accountId && role.kind.Group && role.kind.Group.includes(accountId)) {\n      userRoles.push(role);\n    }\n  }\n}\nconst proposalPeriod = policy.proposal_period;\nuseEffect(() => {\n  if (selectedStatus.length > 0 || selectedTypes.length > 0) {\n    const offset =\n      currentPage === 0\n        ? lastProposalId > resPerPage\n          ? lastProposalId - resPerPage\n          : lastProposalId ?? resPerPage\n        : filteredProposals[0].id - currentPage * resPerPage;\n    sdk\n      .getFilteredProposalsByStatusAndkind({\n        resPerPage,\n        reverse: true,\n        filterStatusArray: selectedStatus,\n        filterKindArray: selectedTypes,\n        offset: offset,\n      })\n      .then(({ filteredProposals, totalLength }) => {\n        setFilteredProposals(filteredProposals);\n        setFilteredLength(totalLength);\n      });\n  } else if (filteredProposals.length) {\n    setFilteredProposals([]);\n    setFilteredLength(null);\n  }\n}, [selectedStatus, selectedTypes, currentPage]);\nconst proposalsComponent = useMemo(() => {\n  const proposalsToShow =\n    selectedStatus.length > 0 || selectedTypes.length > 0\n      ? Array.isArray(filteredProposals)\n        ? filteredProposals\n        : []\n      : Array.isArray(proposals)\n      ? proposals\n      : [];\n  return (\n    <div className=\"d-flex flex-column gap-2\">\n      {proposalsToShow.length > 0 ? (\n        proposalsToShow.map((item) => {\n          const kindName =\n            typeof item.kind === \"string\"\n              ? item.kind\n              : Object.keys(item.kind)[0];\n          const comments = sdk.getCommentsByProposalId({ proposalId: item.id });\n          const isAllowedToVote = [\n            sdk.hasPermission({\n              accountId,\n              kindName,\n              actionType: actions.VoteApprove,\n            }),\n            sdk.hasPermission({\n              accountId,\n              kindName,\n              actionType: actions.VoteReject,\n            }),\n            sdk.hasPermission({\n              accountId,\n              kindName,\n              actionType: actions.VoteRemove,\n            }),\n          ];\n          const { thresholdVoteCount } =\n            sdk.getVotersAndThresholdForProposalKind({\n              kindName,\n            });\n          const totalVotes = sdk.calculateVoteCountByType({\n            votes: item.votes,\n          });\n          let expirationTime = sdk.getProposalExpirationTime({\n            submissionTime: item.submission_time,\n          });\n          return (\n            <Widget\n              loading=\"\"\n              src=\"builddao.near/widget/page.proposals.Card\"\n              props={{\n                proposalData: {\n                  ...item,\n                  typeName: kindName.replace(/([A-Z])/g, \" $1\").trim(),\n                  totalVotesNeeded: thresholdVoteCount,\n                  totalVotes: {\n                    ...totalVotes,\n                    yes: totalVotes.approve,\n                    no: totalVotes.reject,\n                  },\n                  expirationTime,\n                },\n                daoId: daoId,\n                comments: comments,\n                isAllowedToVote,\n                handleVote: (data) => {\n                  setVoteDetails(data);\n                  setNotificationModal(true);\n                },\n              }}\n            />\n          );\n        })\n      ) : (\n        <>No proposals found.</>\n      )}\n    </div>\n  );\n}, [proposals, filteredProposals]);\nreturn (\n  <ThemeContainer>\n    <Container className=\"d-flex flex-column gap-4\">\n      <Widget\n        loading=\"\"\n        src=\"builddao.near/widget/page.proposals.create.Index\"\n        props={{\n          showModal: showProposalModal,\n          toggleModal: () => setShowModal(!showProposalModal),\n        }}\n      />\n      <Widget\n        loading=\"\"\n        src=\"builddao.near/widget/page.proposals.Filters\"\n        props={{\n          parentSelectedTypes: selectedTypes,\n          parentSelectedStatus: selectedStatus,\n          applyFilters: ({ selectedStatus, selectedTypes }) => {\n            setCurrentPage(0);\n            setSelectedStatus(selectedStatus);\n            setSelectedTypes(selectedTypes);\n          },\n          showModal: showFiltersModal,\n          toggleModal: () => setFiltersModal(!showFiltersModal),\n        }}\n      />\n      <Header asChild>\n        <div className=\"d-flex justify-content-between w-100 align-items-center\">\n          <h3 className=\"text-white\">Proposals</h3>\n          <div className=\"d-flex gap-3\">\n            <Button variant=\"outline\" onClick={() => setFiltersModal(true)}>\n              Filters\n            </Button>\n            <Button\n              variant=\"primary\"\n              disabled={!context.accountId}\n              onClick={() => setShowModal(true)}\n            >\n              Create Proposal\n            </Button>\n          </div>\n        </div>\n      </Header>\n      {showNotificationModal && <NotificationModal />}\n      <div className=\"d-flex flex-column gap-4\">{proposalsComponent}</div>\n      {!proposalId && (\n        <div className=\"d-flex justify-content-center my-4\">\n          <Widget\n            loading=\"\"\n            src={\"buildhub.near/widget/components.Pagination\"}\n            props={{\n              maxVisiblePages: 5,\n              totalPages:\n                selectedStatus.length > 0 || selectedTypes.length > 0\n                  ? Math.round(filteredLength / resPerPage)\n                  : Math.round(lastProposalId / resPerPage),\n              onPageClick: (v) => setCurrentPage(v),\n              selectedPage: currentPage,\n              ThemeContainer: PaginationThemeContainer,\n            }}\n          />\n        </div>\n      )}\n    </Container>\n  </ThemeContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/builddao.near/widget/page.proposals.Index", "fact_widget_deployments_id": "159fb5069a13deeefe4806e1e5aeeb0d", "inserted_timestamp": "2024-06-14T17:55:46.860Z", "modified_timestamp": "2024-06-14T17:55:46.860Z", "__row_index": 1}