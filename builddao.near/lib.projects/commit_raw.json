{"tx_hash": "784SHXHYUMV63XsBdR6EbEbPsPahM5qwoteEc3oMExK4", "action_id_social": "HmbqDFt2iJKZsEJhZ324baMEtKUgEdvQ6hCekxzi11Z4-0-widget", "block_id": 121157771, "block_timestamp": "2024-06-14T16:36:18.780Z", "signer_id": "builddao.near", "widget_name": "lib.projects", "source_code": "const getTagsInArray = (tags) => {\n  return Array.isArray(tags) ? tags : Object.keys(tags);\n};\nconst flattenObject = (obj, app, type) => {\n  const paths = [];\n  for (const key of Object.keys(obj)) {\n    const projects = Object.keys(obj?.[key]?.[app]?.[type] ?? {});\n    for (const project of projects) {\n      if (project && project.includes(\"_\")) {\n        const convertedStr = project.replace(/_/g, \"/\");\n        paths.push(convertedStr);\n      }\n    }\n  }\n  return paths;\n};\nconst fetchThings = (props, app, type) => {\n  const keys = Social.keys(`*/${app}/${type}/*`, \"final\", {\n    order: props.order ?? \"desc\",\n    subscribe: props.subscribe ?? true,\n  });\n  if (!keys) {\n    return \"Loading...\";\n  }\n  const flattenedKeys = flattenObject(keys, app, type);\n  const projects = Social.get(flattenedKeys, \"final\");\n  // Check if projects is singular (since we have to update the return format for parsing)\n  if (flattenedKeys.length === 1) {\n    const [name, project, projectName] = flattenedKeys[0]\n      .split(\"/\")\n      .slice(0, 3);\n    return {\n      [name]: {\n        [project]: {\n          [projectName]: projects,\n        },\n      },\n    };\n  }\n  return projects;\n};\nconst processData = (data, type) => {\n  return Object.entries(data ?? {}).flatMap(([accountId, accountData]) => {\n    return Object.entries(accountData?.[type] ?? {}).map(\n      ([projectID, metadataStr]) => {\n        const metadata = JSON.parse(metadataStr);\n        return {\n          ...metadata,\n          accountId,\n          type,\n          title: metadata.title,\n          metadata,\n          tags: getTagsInArray(metadata.tags) || [],\n          collaborators: metadata.contributors,\n          projectID,\n        };\n      }\n    );\n  });\n};\nconst fetchProjects = (props) => {\n  const app = props.app || \"builddao.near\";\n  const type = props.type || \"project\";\n  const data = fetchThings(props, app, type);\n  if (!data) {\n    return [];\n  }\n  return processData(data, type);\n};\nconst getProjectMeta = (id) => {\n  if (!id) {\n    throw new Error(\"Invalid project ID\");\n  }\n  const data = Social.get(id, \"final\");\n  if (!data) {\n    console.log(\"Failed to fetch project data\");\n  }\n  try {\n    const pj = JSON.parse(data);\n    return { ...pj, tags: getTagsInArray(pj.tags) };\n  } catch (error) {\n    console.error(\"Error parsing project data:\", error);\n    return null;\n  }\n};\nconst getProjectIdFromPath = (id) => {\n  return id.split(\"/\")[2] ?? null;\n};\nreturn {\n  fetchProjects,\n  getProjectMeta,\n  getProjectIdFromPath,\n  getTagsInArray,\n};\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/builddao.near/widget/lib.projects", "fact_widget_deployments_id": "fdfd63a0dad1562df40b976cbc976823", "inserted_timestamp": "2024-06-14T17:55:46.860Z", "modified_timestamp": "2024-06-14T17:55:46.860Z", "__row_index": 0}