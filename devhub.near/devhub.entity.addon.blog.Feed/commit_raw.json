{"tx_hash": "5pp1xPJm2AT4BnotzQYtsmPnPaSLqoMoMcgDCmzqBcvU", "action_id_social": "666KpshNh6oip4rAuEf3F1XzwTo9q9c8sF12pzH6QYjm-0-widget", "block_id": 105787996, "block_timestamp": "2023-11-16T00:34:46.552Z", "signer_id": "devhub.near", "widget_name": "devhub.entity.addon.blog.Feed", "source_code": "const { Item, Layout } = props;\n\nLayout = Layout || (() => <></>);\n\nconst Container = styled.div``;\n\nconst Loader = styled.div`\n  text-align: center;\n  padding: 20px;\n`;\n\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\nconst DISPLAY_COUNT = 10;\n\nconst fetchGraphQL = (operationsDoc, operationName, variables) => {\n  return asyncFetch(QUERYAPI_ENDPOINT, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": `bo_near` },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n};\n\nconst queryName =\n  props.queryName ?? `bo_near_devhub_v35_posts_with_latest_snapshot`;\n\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\n    ${queryName}(\n      limit: $limit\n      offset: $offset\n      order_by: {block_height: desc}\n      where: $where\n    ) {\n      post_id\n    }\n  }\n`;\n\nconst [postIds, setPostIds] = useState([]);\nconst [loading, setLoading] = useState(false);\nconst [cachedItems, setCachedItems] = useState({});\nconst [hasNext, setHasNext] = useState(true);\n\nconst buildWhereClause = () => {\n  let where = {};\n  if (props.author) {\n    where = { author_id: { _eq: props.author }, ...where };\n  }\n  if (props.term) {\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\n  }\n  if (props.includeLabels && Array.isArray(props.includeLabels)) {\n    const labelConditions = props.includeLabels.map((label) => ({\n      labels: { _contains: label },\n    }));\n\n    where = { _and: [...labelConditions, where] };\n  }\n  if (props.excludeLabels && Array.isArray(props.excludeLabels)) {\n    const labelConditions = props.excludeLabels.map((label) => ({\n      labels: { _nin: label },\n    }));\n\n    where = { _and: [...labelConditions, where] };\n  }\n  if (!props.recency) {\n    where = { parent_id: { _is_null: true }, ...where };\n  }\n  return where;\n};\n\nconst fetchPostIds = (offset) => {\n  if (!offset) {\n    offset = 0;\n  }\n  if (loading) return;\n  setLoading(true);\n  const variables = { limit: DISPLAY_COUNT, offset, where: buildWhereClause() };\n  fetchGraphQL(query, \"DevhubPostsQuery\", variables).then((result) => {\n    if (result.status === 200) {\n      if (result.body.data) {\n        const data = result.body.data[queryName];\n        const newPostIds = data.map((p) => p.post_id);\n        setPostIds(offset === 0 ? newPostIds : [...postIds, ...newPostIds]);\n        setHasNext(data.length >= variables.limit);\n      } else {\n        console.error(\"GraphQL Error:\", result.errors);\n      }\n      setLoading(false);\n    }\n  });\n};\n\nuseEffect(() => {\n  fetchPostIds();\n}, [props.author, props.term, props.tag, props.recency]);\n\nconst handleLoadMore = () => {\n  if (!hasNext) return;\n  fetchPostIds(postIds.length);\n};\n\nconst renderLoader = () => <Loader>Loading...</Loader>;\n\nconst renderItem = (postId) => (\n  <div key={postId}>\n    {(props.renderItem && props.renderItem(postId)) || <div>Post {postId}</div>}\n  </div>\n);\n\nconst cachedRenderItem = (postId) => {\n  if (!(postId in cachedItems)) {\n    cachedItems[postId] = renderItem(postId);\n    setCachedItems({ ...cachedItems });\n  }\n  return cachedItems[postId];\n};\n\nreturn (\n  <Container>\n    {loading && renderLoader()}\n    {postIds.length > 0 ? (\n      <InfiniteScroll\n        pageStart={0}\n        dataLength={postIds.length}\n        loadMore={handleLoadMore}\n        hasMore={hasNext}\n        loader={renderLoader()}\n      >\n        <Layout>\n          {/* Layout */}\n          {postIds.map(cachedRenderItem)}\n        </Layout>\n      </InfiniteScroll>\n    ) : (\n      <p class=\"text-secondary\">No posts</p>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devhub.near/widget/devhub.entity.addon.blog.Feed", "fact_widget_deployments_id": "59c828f29f721b05bd5f115957d4ede3", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 34}