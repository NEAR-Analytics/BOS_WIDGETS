{"tx_hash": "GzsZ8FBtCCkRkpESQsYzPLkjJhU24kMstzatEp2APguF", "action_id_social": "3vSXBC4qzU12jRdtwLy1yLCEsDYuSgaXesF46dTp5Zey-0-widget", "block_id": 106639427, "block_timestamp": "2023-11-27T08:25:06.047Z", "signer_id": "devhub.near", "widget_name": "devhub.entity.post.Post", "source_code": "// Ideally, this would be a page\n\nconst { href } = VM.require(\"devhub.near/widget/core.lib.url\");\n\nconst { draftState, onDraftStateChange } = VM.require(\n  \"devhub.near/widget/devhub.entity.post.draft\"\n);\n\nif (!href) {\n  return <p>Loading modules...</p>;\n}\n\nconst ButtonWithHover = styled.button`\n  background-color: #fff;\n  transition: all 300ms;\n  border-radius: 0.5rem;\n\n  &:hover {\n    background-color: #e9ecef;\n    color: #000;\n  }\n\n  &:disabled {\n    background-color: #fff;\n    color: #b7b7b7;\n  }\n`;\n\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\n\nconst post =\n  props.post ??\n  Near.view(\"devgovgigs.near\", \"get_post\", { post_id: postId });\n\nif (!post) {\n  return <div>Loading ...</div>;\n}\n\nconst referral = props.referral;\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\nconst compareTimestamp = props.compareTimestamp ?? \"\";\nconst swapTimestamps = currentTimestamp < compareTimestamp;\n\nconst snapshotHistory = post.snapshot_history;\n\nconst snapshot =\n  currentTimestamp === post.snapshot.timestamp\n    ? post.snapshot\n    : (snapshotHistory &&\n        snapshotHistory.find((s) => s.timestamp === currentTimestamp)) ??\n      null;\n\nconst compareSnapshot =\n  compareTimestamp === post.snapshot.timestamp\n    ? post.snapshot\n    : (snapshotHistory &&\n        snapshotHistory.find((s) => s.timestamp === compareTimestamp)) ??\n      null;\n\n// If this post is displayed under another post. Used to limit the size.\nconst isUnderPost = props.isUnderPost ? true : false;\n\nconst parentId = Near.view(\"devgovgigs.near\", \"get_parent_id\", {\n  post_id: postId,\n});\n\nconst childPostIdsUnordered =\n  Near.view(\"devgovgigs.near\", \"get_children_ids\", {\n    post_id: postId,\n  }) ?? [];\n\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\nconst expandable = props.isPreview ? false : props.expandable ?? false;\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\n\nfunction readableDate(timestamp) {\n  var a = new Date(timestamp);\n  return a.toDateString() + \" \" + a.toLocaleTimeString();\n}\n\nconst timestamp = readableDate(\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\n);\n\nconst postSearchKeywords = props.searchKeywords ? (\n  <div style={{ \"font-family\": \"monospace\" }} key=\"post-search-keywords\">\n    <span>Found keywords: </span>\n\n    {props.searchKeywords.map((tag) => (\n      <Widget\n        src={\"devhub.near/widget/devhub.components.atom.Tag\"}\n        props={{ linkTo: \"Feed\", tag }}\n      />\n    ))}\n  </div>\n) : (\n  <div key=\"post-search-keywords\"></div>\n);\n\nconst searchKeywords = props.searchKeywords ? (\n  <div class=\"mb-4\" key=\"search-keywords\">\n    <small class=\"text-muted\">{postSearchKeywords}</small>\n  </div>\n) : (\n  <div key=\"search-keywords\"></div>\n);\n\nconst allowedToEdit =\n  !props.isPreview &&\n  Near.view(\"devgovgigs.near\", \"is_allowed_to_edit\", {\n    post_id: postId,\n    editor: context.accountId,\n  });\n\nconst btnEditorWidget = (postType, name) => {\n  return (\n    <li>\n      <a\n        class=\"dropdown-item\"\n        role=\"button\"\n        onClick={() =>\n          State.update({ postType, editorType: \"EDIT\", showEditor: true })\n        }\n      >\n        {name}\n      </a>\n    </li>\n  );\n};\n\nconst editControl = allowedToEdit ? (\n  <div class=\"btn-group\" role=\"group\">\n    <a\n      class=\"card-link px-2\"\n      role=\"button\"\n      title=\"Edit post\"\n      data-bs-toggle=\"dropdown\"\n      aria-expanded=\"false\"\n      type=\"button\"\n    >\n      <div class=\"bi bi-pencil-square\"></div>\n    </a>\n\n    <ul class=\"dropdown-menu\">\n      {btnEditorWidget(\"Idea\", \"Edit as an idea\")}\n      {btnEditorWidget(\"Solution\", \"Edit as a solution\")}\n      {btnEditorWidget(\"Attestation\", \"Edit as an attestation\")}\n      {btnEditorWidget(\"Sponsorship\", \"Edit as a sponsorship\")}\n      {btnEditorWidget(\"Comment\", \"Edit as a comment\")}\n    </ul>\n  </div>\n) : (\n  <div></div>\n);\n\nconst shareButton = props.isPreview ? (\n  <div></div>\n) : (\n  <Link\n    class=\"card-link text-dark\"\n    to={href({\n      widgetSrc: \"devhub.near/widget/app\",\n      params: { page: \"post\", id: postId },\n    })}\n    role=\"button\"\n    target=\"_blank\"\n    title=\"Open in new tab\"\n  >\n    <div class=\"bi bi-share\"></div>\n  </Link>\n);\n\nconst ProfileCardContainer = styled.div`\n  @media screen and (max-width: 960px) {\n    width: 100%;\n  }\n`;\n\n// card-header\nconst header = (\n  <div key=\"header\">\n    <small class=\"text-muted\">\n      <div class=\"row justify-content-between\">\n        <div class=\"d-flex align-items-center flex-wrap\">\n          <ProfileCardContainer>\n            <Widget\n              src={\n                \"devhub.near/widget/devhub.components.molecule.ProfileCard\"\n              }\n              props={{\n                accountId: post.author_id,\n                nearDevGovGigsWidgetsAccountId: \"devhub.near\",\n              }}\n            />\n          </ProfileCardContainer>\n\n          <div class=\"d-flex ms-auto\">\n            {editControl}\n            {timestamp}\n\n            <Widget\n              src={\"devhub.near/widget/devhub.entity.post.History\"}\n              props={{\n                post,\n                timestamp: currentTimestamp,\n              }}\n            />\n            {shareButton}\n          </div>\n        </div>\n      </div>\n    </small>\n  </div>\n);\n\n// const emptyIcons = {\n//   Idea: \"bi-lightbulb\",\n//   Comment: \"bi-chat\",\n//   Solution: \"bi-rocket\",\n//   Attestation: \"bi-check-circle\",\n//   Sponsorship: \"bi-cash-coin\",\n//   Github: \"bi-github\",\n//   Like: \"bi-heart\",\n//   Reply: \"bi-reply\",\n// };\n\nconst emptyIcons = {\n  Idea: \"\ud83d\udca1\",\n  Comment: \"bi-chat\",\n  Solution: \"\ud83d\ude80\",\n  Attestation: \"\u2705\",\n  Sponsorship: \"\ud83e\ude99\",\n  Github: \"bi-github\",\n  Like: \"bi-heart\",\n  Reply: \"bi-reply\",\n};\n\nconst fillIcons = {\n  Idea: \"\ud83d\udca1\",\n  Comment: \"bi-chat-fill\",\n  Solution: \"\ud83d\ude80\",\n  Attestation: \"\u2705\",\n  Sponsorship: \"\ud83e\ude99\",\n  Github: \"bi-github\",\n  Like: \"bi-heart-fill\",\n  Reply: \"bi-reply-fill\",\n};\n\n// Trigger saving this widget.\n\nconst borders = {\n  Idea: \"border-light\",\n  Comment: \"border-light\",\n  Solution: \"border-light\",\n  Attestation: \"border-light\",\n  Sponsorship: \"border-light\",\n  Github: \"border-light\",\n};\n\nconst containsLike = props.isPreview\n  ? false\n  : post.likes.find((l) => l.author_id == context.accountId);\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\n// This must be outside onLike, because Near.view returns null at first, and when the view call finished, it returns true/false.\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\nlet grantNotify = Near.view(\"social.near\", \"is_write_permission_granted\", {\n  predecessor_id: \"devgovgigs.near\",\n  key: context.accountId + \"/index/notify\",\n});\n\nif (grantNotify === null) {\n  return;\n}\n\nconst onLike = () => {\n  if (!context.accountId) {\n    return;\n  }\n\n  let likeTxn = [\n    {\n      contractName: \"devgovgigs.near\",\n      methodName: \"add_like\",\n      args: {\n        post_id: postId,\n      },\n      deposit: Big(10).pow(21).mul(2),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ];\n\n  if (grantNotify === false) {\n    likeTxn.unshift({\n      contractName: \"social.near\",\n      methodName: \"grant_write_permission\",\n      args: {\n        predecessor_id: \"devgovgigs.near\",\n        keys: [context.accountId + \"/index/notify\"],\n      },\n      deposit: Big(10).pow(23),\n      gas: Big(10).pow(12).mul(30),\n    });\n  }\n\n  Near.call(likeTxn);\n};\n\nconst btnCreatorWidget = (postType, icon, name, desc) => {\n  return (\n    <li class=\"py-1\">\n      <a\n        class=\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\"\n        style={{ color: \"rgb(55,109,137)\" }}\n        role=\"button\"\n        onClick={() =>\n          State.update({ postType, editorType: \"CREATE\", showEditor: true })\n        }\n      >\n        <i class={`bi ${icon}`} style={{ fontSize: \"1.5rem\" }}>\n          {\" \"}\n        </i>\n\n        <div class=\"ps-2 text-wrap\" style={{ width: \"18rem\" }}>\n          <div>{name}</div>\n          <small class=\"fw-light text-secondary\">{desc}</small>\n        </div>\n      </a>\n    </li>\n  );\n};\n\nconst FooterButtonsContianer = styled.div`\n  width: 66.66666667%;\n\n  @media screen and (max-width: 960px) {\n    width: 100%;\n  }\n`;\n\nconst buttonsFooter = props.isPreview ? null : (\n  <div class=\"row\" key=\"buttons-footer\">\n    <FooterButtonsContianer>\n      <div class=\"btn-group\" role=\"group\" aria-label=\"Basic outlined example\">\n        <ButtonWithHover\n          type=\"button\"\n          class=\"btn d-flex align-items-center\"\n          style={{ border: \"0px\" }}\n          onClick={onLike}\n        >\n          <i class={`bi ${likeBtnClass}`}> </i>\n          {post.likes.length == 0 ? (\n            \"Like\"\n          ) : (\n            <Widget\n              // TODO: LEGACY.\n              src=\"devgovgigs.near/widget/gigs-board.components.layout.LikeButton.Faces\"\n              props={{\n                likesByUsers: Object.fromEntries(\n                  post.likes.map(({ author_id }) => [author_id, \"\"])\n                ),\n              }}\n            />\n          )}\n        </ButtonWithHover>\n\n        <div class=\"btn-group\" role=\"group\">\n          <ButtonWithHover\n            type=\"button\"\n            class=\"btn\"\n            style={{ border: \"0px\" }}\n            data-bs-toggle=\"dropdown\"\n            aria-expanded=\"false\"\n          >\n            \u21aa Reply\n          </ButtonWithHover>\n          <ul class=\"dropdown-menu\">\n            {btnCreatorWidget(\n              \"Idea\",\n              emptyIcons.Idea,\n              \"Idea\",\n              \"Get feedback from the community about a problem, opportunity, or need.\"\n            )}\n            {btnCreatorWidget(\n              \"Solution\",\n              emptyIcons.Solution,\n              \"Solution\",\n              \"Provide a specific proposal or implementation to an idea, optionally requesting funding.\"\n            )}\n            {btnCreatorWidget(\n              \"Attestation\",\n              emptyIcons.Attestation,\n              \"Attestation\",\n              \"Formally review or validate a solution as a recognized expert.\"\n            )}\n            {btnCreatorWidget(\n              \"Sponsorship\",\n              emptyIcons.Sponsorship,\n              \"Sponsorship\",\n              \"Offer to fund projects, events, or proposals that match your needs.\"\n            )}\n            <li>\n              <hr class=\"dropdown-divider\" />\n            </li>\n            {btnCreatorWidget(\n              \"Comment\",\n              emptyIcons.Comment,\n              \"Comment\",\n              \"Ask a question, provide information, or share a resource that is relevant to the thread.\"\n            )}\n          </ul>\n        </div>\n        {childPostIds.length > 0 && (\n          <ButtonWithHover\n            type=\"button\"\n            class=\"btn\"\n            style={{ border: \"0px\" }}\n            data-bs-toggle=\"collapse\"\n            href={`#collapseChildPosts${postId}`}\n            aria-expanded={defaultExpanded}\n            aria-controls={`collapseChildPosts${postId}`}\n            onClick={() =>\n              State.update({ expandReplies: !state.expandReplies })\n            }\n          >\n            <i\n              class={`bi bi-chevron-${state.expandReplies ? \"up\" : \"down\"}`}\n            ></i>{\" \"}\n            {`${state.expandReplies ? \"Collapse\" : \"Expand\"} Replies (${\n              childPostIds.length\n            })`}\n          </ButtonWithHover>\n        )}\n\n        {isUnderPost || !parentId ? (\n          <div key=\"link-to-parent\"></div>\n        ) : (\n          <Link\n            to={href({\n              widgetSrc: \"devhub.near/widget/app\",\n              params: { page: \"post\", id: parentId },\n            })}\n          >\n            <ButtonWithHover\n              type=\"button\"\n              style={{ border: \"0px\" }}\n              className=\"btn\"\n              key=\"link-to-parent\"\n            >\n              <i class=\"bi bi-arrow-90deg-up\"></i>Go to parent\n            </ButtonWithHover>\n          </Link>\n        )}\n      </div>\n    </FooterButtonsContianer>\n  </div>\n);\n\nconst CreatorWidget = (postType) => {\n  return (\n    <div\n      class={`collapse ${\n        draftState?.parent_post_id == postId && draftState?.postType == postType\n          ? \"show\"\n          : \"\"\n      }`}\n      id={`collapse${postType}Creator${postId}`}\n      data-bs-parent={`#accordion${postId}`}\n    >\n      <Widget\n        src={\"devhub.near/widget/devhub.entity.post.PostEditor\"}\n        props={{\n          postType,\n          onDraftStateChange,\n          draftState:\n            draftState?.parent_post_id == postId ? draftState : undefined,\n          parentId: postId,\n          mode: \"Create\",\n        }}\n      />\n    </div>\n  );\n};\n\nconst tokenMapping = {\n  NEAR: \"NEAR\",\n  USDT: {\n    NEP141: {\n      address: \"usdt.tether-token.near\",\n    },\n  },\n  USDC: {\n    NEP141: {\n      address:\n        \"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\",\n    },\n  },\n  // Add more tokens here as needed\n};\n\nconst reverseTokenMapping = Object.keys(tokenMapping).reduce(\n  (reverseMap, key) => {\n    const value = tokenMapping[key];\n    if (typeof value === \"object\") {\n      reverseMap[JSON.stringify(value)] = key;\n    }\n    return reverseMap;\n  },\n  {}\n);\n\nfunction tokenResolver(token) {\n  if (typeof token === \"string\") {\n    return token;\n  } else if (typeof token === \"object\") {\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\n    return tokenString || null;\n  } else {\n    return null; // Invalid input\n  }\n}\n\nconst EditorWidget = (postType) => {\n  return (\n    <div\n      class={`collapse ${\n        draftState?.edit_post_id == postId && draftState?.postType == postType\n          ? \"show\"\n          : \"\"\n      }`}\n      id={`collapse${postType}Editor${postId}`}\n      data-bs-parent={`#accordion${postId}`}\n    >\n      <Widget\n        src={\"devhub.near/widget/devhub.entity.post.PostEditor\"}\n        props={{\n          postType,\n          postId,\n          mode: \"Edit\",\n          author_id: post.author_id,\n          labels: post.snapshot.labels,\n          name: post.snapshot.name,\n          description: post.snapshot.description,\n          amount: post.snapshot.amount,\n          token: tokenResolver(post.snapshot.sponsorship_token),\n          supervisor: post.snapshot.supervisor,\n          githubLink: post.snapshot.github_link,\n          onDraftStateChange,\n          draftState:\n            draftState?.edit_post_id == postId ? draftState : undefined,\n        }}\n      />\n    </div>\n  );\n};\n\nconst isDraft =\n  (draftState?.parent_post_id === postId &&\n    draftState?.postType === state.postType) ||\n  (draftState?.edit_post_id === postId &&\n    draftState?.postType === state.postType);\n\nconst toggleEditor = () => {\n  State.update({ showEditor: !state.showEditor });\n};\n\nfunction Editor() {\n  return (\n    <div class=\"row\" id={`accordion${postId}`} key=\"editors-footer\">\n      <div\n        key={`${state.postType}${state.editorType}${postId}`}\n        className={\"w-100\"}\n      >\n        {state.editorType === \"CREATE\" ? (\n          <>\n            <Widget\n              src={\"devhub.near/widget/devhub.entity.post.PostEditor\"}\n              props={{\n                postType: state.postType,\n                onDraftStateChange,\n                draftState:\n                  draftState?.parent_post_id == postId ? draftState : undefined,\n                parentId: postId,\n                mode: \"Create\",\n              }}\n            />\n          </>\n        ) : (\n          <>\n            <Widget\n              src={\"devhub.near/widget/devhub.entity.post.PostEditor\"}\n              props={{\n                postType: state.postType,\n                postId,\n                mode: \"Edit\",\n                author_id: post.author_id,\n                labels: post.snapshot.labels,\n                name: post.snapshot.name,\n                description: post.snapshot.description,\n                amount: post.snapshot.amount,\n                token: tokenResolver(post.snapshot.sponsorship_token),\n                supervisor: post.snapshot.supervisor,\n                githubLink: post.snapshot.github_link,\n                onDraftStateChange,\n                draftState:\n                  draftState?.edit_post_id == postId ? draftState : undefined,\n                toggleEditor: toggleEditor,\n              }}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst renamedPostType =\n  snapshot.post_type == \"Submission\" ? \"Solution\" : snapshot.post_type;\n\nconst tags = post.snapshot.labels ? (\n  <div\n    class=\"card-title d-flex flex-wrap align-items-center\"\n    style={{ margin: \"20px 0\" }}\n    key=\"post-labels\"\n  >\n    {post.snapshot.labels.map((tag, idx) => (\n      <div className=\"d-flex align-items-center my-3 me-3\">\n        <Link\n          to={href({\n            widgetSrc: \"#/devhub.near/widget/app\",\n            params: { page: \"feed\", tag: tag },\n          })}\n        >\n          <div\n            className=\"d-flex gap-3 align-items-center\"\n            style={{ cursor: \"pointer\", textDecoration: \"none\" }}\n          >\n            <Widget\n              src={\"devhub.near/widget/devhub.components.atom.Tag\"}\n              props={{\n                tag,\n                black: true,\n              }}\n            />\n          </div>\n        </Link>\n        {idx !== post.snapshot.labels.length - 1 && (\n          <span className=\"ms-3\">\u2022</span>\n        )}\n      </div>\n    ))}\n  </div>\n) : (\n  <div key=\"post-labels\"></div>\n);\n\nconst Title = styled.h5`\n  margin: 1rem 0;\n\n  color: #151515;\n  font-size: 1.15rem;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.625rem; /* 55.556% */\n`;\n\nconst postTitle =\n  snapshot.post_type == \"Comment\" ? (\n    <div key=\"post-title\"></div>\n  ) : (\n    <Title key=\"post-title\">\n      {emptyIcons[snapshot.post_type]} {renamedPostType}: {snapshot.name}\n    </Title>\n  );\n\nconst postExtra =\n  snapshot.post_type == \"Sponsorship\" ? (\n    <div key=\"post-extra\">\n      <h6 class=\"card-subtitle mb-2 text-muted\">\n        Maximum amount: {snapshot.amount}{\" \"}\n        {tokenResolver(snapshot.sponsorship_token)}\n      </h6>\n      <h6 class=\"card-subtitle mb-2 text-muted\">\n        Supervisor:{\" \"}\n        <Widget\n          src={\"neardevgov.near/widget/ProfileLine\"}\n          props={{ accountId: snapshot.supervisor }}\n        />\n      </h6>\n    </div>\n  ) : (\n    <div></div>\n  );\n\nconst childPostHasDraft = childPostIds.find(\n  (childId) =>\n    childId == draftState?.edit_post_id || childId == draftState?.parent_post_id\n);\nif (\n  (childPostHasDraft || state.childrenOfChildPostsHasDraft) &&\n  props.expandParent\n) {\n  props.expandParent();\n}\n\nconst postsList =\n  props.isPreview || childPostIds.length == 0 ? (\n    <div key=\"posts-list\"></div>\n  ) : (\n    <div class=\"row\" key=\"posts-list\">\n      <div\n        class={`collapse mt-3 ${\n          defaultExpanded ||\n          childPostHasDraft ||\n          state.childrenOfChildPostsHasDraft\n            ? \"show\"\n            : \"\"\n        }`}\n        id={`collapseChildPosts${postId}`}\n      >\n        {childPostIds.map((childId) => (\n          <div key={childId} style={{ marginBottom: \"0.5rem\" }}>\n            <Widget\n              src=\"devhub.near/widget/devhub.entity.post.Post\"\n              props={{\n                id: childId,\n                isUnderPost: true,\n                onDraftStateChange,\n                draftState,\n                expandParent: () =>\n                  State.update({ childrenOfChildPostsHasDraft: true }),\n                referral: `subpost${childId}of${postId}`,\n              }}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\nconst LimitedMarkdown = styled.div`\n  max-height: 20em;\n`;\n\n// Determine if located in the post page.\nconst isInList = props.isInList;\nconst contentArray = snapshot.description.split(\"\\n\");\nconst needClamp = isInList && contentArray.length > 5;\n\ninitState({\n  clamp: needClamp,\n  expandReplies: defaultExpanded,\n});\n\nconst clampedContent = needClamp\n  ? contentArray.slice(0, 3).join(\"\\n\")\n  : snapshot.description;\n\n// Should make sure the posts under the currently top viewed post are limited in size.\nconst descriptionArea = isUnderPost ? (\n  <LimitedMarkdown className=\"overflow-auto\" key=\"description-area\">\n    {/* {widget(\"components.molecule.markdown-viewer\", {\n      text: snapshot.description,\n    })} */}\n    <Widget\n      src={\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\"}\n      props={{\n        text: snapshot.description,\n      }}\n    />\n  </LimitedMarkdown>\n) : (\n  <div className=\"w-100 overflow-auto\">\n    <div class={state.clamp ? \"clamp\" : \"\"}>\n      {/* {widget(\"components.molecule.markdown-viewer\", {\n        text: state.clamp ? clampedContent : snapshot.description,\n      })} */}\n      <Widget\n        src={\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\"}\n        props={{\n          text: state.clamp ? clampedContent : snapshot.description,\n        }}\n      />\n    </div>\n    {state.clamp ? (\n      <div class=\"d-flex justify-content-start\">\n        <a\n          style={{ cursor: \"pointer\", color: \"#00ec97\" }}\n          class=\"btn-link text-dark fw-bold text-decoration-none\"\n          onClick={() => State.update({ clamp: false })}\n        >\n          See more\n        </a>\n      </div>\n    ) : (\n      <></>\n    )}\n  </div>\n);\n\nconst timestampElement = (_snapshot) => {\n  return (\n    <Link\n      class=\"text-muted\"\n      href={href({\n        widgetSrc: \"devhub.near/widget/app\",\n        params: {\n          page: \"post\",\n          id: postId,\n          timestamp: _snapshot.timestamp,\n          compareTimestamp: null,\n          referral,\n        },\n      })}\n    >\n      {readableDate(_snapshot.timestamp / 1000000).substring(4)}\n\n      <Widget\n        src=\"mob.near/widget/ProfileImage\"\n        props={{\n          accountId: _snapshot.editor_id,\n          style: {\n            width: \"1.25em\",\n            height: \"1.25em\",\n          },\n          imageStyle: {\n            transform: \"translateY(-12.5%)\",\n          },\n        }}\n      />\n      {_snapshot.editor_id.substring(0, 8)}\n    </Link>\n  );\n};\n\nfunction combineText(_snapshot) {\n  return (\n    \"## \" +\n    _snapshot.post_type +\n    \": \" +\n    _snapshot.name +\n    \"\\n\" +\n    _snapshot.description\n  );\n}\n\nconst CardContainer = styled.div`\n  padding: 1.5rem 3rem !important;\n  border-radius: 16px !important;\n  border: 1px solid rgba(129, 129, 129, 0.3) !important;\n  background: #fffefe !important;\n\n  @media screen and (max-width: 960px) {\n    padding: 1rem !important;\n  }\n`;\n\nreturn (\n  <CardContainer className={`card ${borders[snapshot.post_type]} attractable`}>\n    {header}\n    <div className=\"card-body\" style={{ padding: 0 }}>\n      {searchKeywords}\n      {compareSnapshot ? (\n        <div\n          class=\"border rounded\"\n          style={{ marginTop: \"16px\", marginBottom: \"16px\" }}\n        >\n          <div class=\"d-flex justify-content-end\" style={{ fontSize: \"12px\" }}>\n            <div class=\"d-flex w-50 justify-content-end mt-1 me-2\">\n              {timestampElement(snapshot)}\n              {snapshot !== compareSnapshot && (\n                <>\n                  <div class=\"mx-1 align-self-center\">\n                    <i class=\"bi bi-file-earmark-diff\" />\n                  </div>\n                  {timestampElement(compareSnapshot)}\n                </>\n              )}\n            </div>\n          </div>\n          <div className=\"w-100 overflow-auto\">\n            <Widget\n              src=\"markeljan.near/widget/MarkdownDiff\"\n              props={{\n                post: post,\n                currentCode: combineText(\n                  swapTimestamps ? compareSnapshot : snapshot\n                ),\n                prevCode: combineText(\n                  swapTimestamps ? snapshot : compareSnapshot\n                ),\n                showLineNumber: true,\n              }}\n            />\n          </div>\n        </div>\n      ) : (\n        <>\n          {postTitle}\n          {postExtra}\n          {descriptionArea}\n        </>\n      )}\n      {tags}\n      {buttonsFooter}\n      {!props.isPreview && (isDraft || state.showEditor) && <Editor />}\n      {postsList}\n    </div>\n  </CardContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devhub.near/widget/devhub.entity.post.Post", "fact_widget_deployments_id": "d432a2fd88753643566ab97637507eb9", "inserted_timestamp": "2023-11-27T10:26:17.751Z", "modified_timestamp": "2023-11-27T10:26:17.751Z", "__row_index": 3}