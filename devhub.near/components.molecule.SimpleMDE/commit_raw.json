{"tx_hash": "BjMPhguobZRBKXJ34mep6ZMWqb5YY6vuuGyqtfYRo31R", "action_id_social": "FJr9rfPDJmbN8MXCsLgBmhxkmeKfhpXe5LL5nij1sAHD-0-widget", "block_id": 123865603, "block_timestamp": "2024-07-20T20:56:13.151Z", "signer_id": "devhub.near", "widget_name": "components.molecule.SimpleMDE", "source_code": "/**\n * iframe embedding a SimpleMDE component\n * https://github.com/sparksuite/simplemde-markdown-editor\n */\nconst { getLinkUsingCurrentGateway } = VM.require(\n  `infrastructure-committee.near/widget/core.common`\n) || { getLinkUsingCurrentGateway: () => {} };\nconst data = props.data;\nconst onChange = props.onChange ?? (() => {});\nconst onChangeKeyup = props.onChangeKeyup ?? (() => {}); // in case where we want immediate action\nconst height = props.height ?? \"390\";\nconst className = props.className ?? \"w-100\";\nconst embeddCSS = props.embeddCSS;\nState.init({\n  iframeHeight: height,\n  message: props.data,\n});\nconst profilesData = Social.get(\"*/profile/name\", \"final\");\nconst followingData = Social.get(\n  `${context.accountId}/graph/follow/**`,\n  \"final\"\n);\n// SIMPLEMDE CONFIG //\nconst fontFamily = props.fontFamily ?? \"sans-serif\";\nconst alignToolItems = props.alignToolItems ?? \"right\";\nconst placeholder = props.placeholder ?? \"\";\nconst showAccountAutoComplete = props.showAutoComplete ?? false;\nconst showProposalIdAutoComplete = props.showProposalIdAutoComplete ?? false;\nconst showRfpIdAutoComplete = props.showRfpIdAutoComplete ?? false;\nconst autoFocus = props.autoFocus ?? false;\nconst proposalQueryName =\n  \"polyprogrammist_near_devhub_ic_v1_proposals_with_latest_snapshot\";\nconst proposalLink = getLinkUsingCurrentGateway(\n  `infrastructure-committee.near/widget/app?page=proposal&id=`\n);\nconst proposalQuery = `query GetLatestSnapshot($offset: Int = 0, $limit: Int = 10, $where: ${proposalQueryName}_bool_exp = {}) {\n${proposalQueryName}(\n  offset: $offset\n  limit: $limit\n  order_by: {proposal_id: desc}\n  where: $where\n) {\n  name\n  proposal_id\n}\n}`;\nconst rfpQueryName =\n  \"polyprogrammist_near_devhub_ic_v1_rfps_with_latest_snapshot\";\nconst rfpLink = getLinkUsingCurrentGateway(\n  `infrastructure-committee.near/widget/app?page=rfp&id=`\n);\nconst rfpQuery = `query GetLatestSnapshot($offset: Int = 0, $limit: Int = 10, $where: ${rfpQueryName}_bool_exp = {}) {\n${rfpQueryName}(\n  offset: $offset\n  limit: $limit\n  order_by: {rfp_id: desc}\n  where: $where\n) {\n  rfp_id\n  name\n}\n}`;\nconst code = `\n<!doctype html>\n<html>\n  <head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n  <style>\n  body {  \n      margin: auto;\n      font-family: ${fontFamily};\n      overflow: visible;\n      font-size:14px !important;\n  }\n  @media screen and (max-width: 768px) {\n    body {\n      font-size: 12px;\n    }\n  }\n  \n  .cursor-pointer {\n    cursor: pointer;\n  }\n  .text-wrap {\n    overflow: hidden;\n    white-space: normal;\n  }\n  .dropdown-item:hover,\n  .dropdown-item:focus {\n    background-color:rgb(0, 236, 151) !important;\n    color:white !important;\n    outline: none !important;\n  }\n  .editor-toolbar {\n      text-align: ${alignToolItems};\n  }\n  \n  .CodeMirror {\n    min-height:200px !important; // for autocomplete to be visble \n  }\n  .CodeMirror-scroll {\n    min-height:200px !important; // for autocomplete to be visble \n  }\n  ${embeddCSS}\n  </style>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css\">\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/highlight.js/latest/styles/github.min.css\">\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65\" crossorigin=\"anonymous\">\n</head>\n<body>\n<div class=\"dropdown\">\n  <button style=\"display: none\" type=\"button\" data-bs-toggle=\"dropdown\">\n    Dropdown button\n  </button>\n  <ul class=\"dropdown-menu\" id=\"mentiondropdown\" style=\"position: absolute;\">\n</div>\n<div class=\"dropdown\">\n  <button style=\"display: none\" type=\"button\" data-bs-toggle=\"dropdown\">\n    Dropdown button\n  </button>\n  <ul class=\"dropdown-menu\" id=\"referencedropdown\" style=\"position: absolute;\">\n</div>\n</ul>\n<textarea></textarea>\n<script src=\"https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js\" integrity=\"sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js\" integrity=\"sha384-cuYeSxntonz0PPNlHhBs68uyIAVpIIOZZ5JqeqvYYIcEL727kskC66kF92t6Xl2V\" crossorigin=\"anonymous\"></script>\n<script>\nlet codeMirrorInstance;\nlet isEditorInitialized = false;\nlet followingData = {};\nlet profilesData = {};\nlet proposalQuery = '';\nlet proposalLink = '';\nlet proposalQueryName = '';\nlet rfpQuery = '';\nlet rfpLink = '';\nlet rfpQueryName = '';\nlet showAccountAutoComplete = ${showAccountAutoComplete};\nlet showProposalIdAutoComplete = ${showProposalIdAutoComplete};\nlet showRfpIdAutoComplete = ${showRfpIdAutoComplete}\nfunction getSuggestedAccounts(term) {\n  let results = [];\n  term = (term || \"\").replace(/\\W/g, \"\").toLowerCase();\n  const limit = 5;\n  const profiles = Object.entries(profilesData);\n  for (let i = 0; i < profiles.length; i++) {\n    let score = 0;\n    const accountId = profiles[i][0];\n    const accountIdSearch = profiles[i][0].replace(/\\W/g, \"\").toLowerCase();\n    const nameSearch = (profiles[i][1]?.profile?.name || \"\")\n      .replace(/\\W/g, \"\")\n      .toLowerCase();\n    const accountIdSearchIndex = accountIdSearch.indexOf(term);\n    const nameSearchIndex = nameSearch.indexOf(term);\n    if (accountIdSearchIndex > -1 || nameSearchIndex > -1) {\n      score += 10;\n      if (accountIdSearchIndex === 0) {\n        score += 10;\n      }\n      if (nameSearchIndex === 0) {\n        score += 10;\n      }\n      if (followingData[accountId] === \"\") {\n        score += 30;\n      }\n      results.push({\n        accountId,\n        score,\n      });\n    }\n  }\n  results.sort((a, b) => b.score - a.score);\n  results = results.slice(0, limit);\n  return results;\n}\nasync function asyncFetch(endpoint, { method, headers, body }) {\n  try {\n    const response = await fetch(endpoint, {\n      method: method,\n      headers: headers,\n      body: body\n    });\n    if (!response.ok) {\n      throw new Error(\"HTTP error!\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n}\nfunction extractNumbers(str) {\n  let numbers = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (!isNaN(str[i])) {\n      numbers += str[i];\n    }\n  }\n  return numbers;\n};\nasync function getSuggestedRfps(id) {\n  let results = [];\n  const variables = {\n    limit: 3,\n    offset: 0,\n    where: {},\n  };\n  if (id) {\n    const rfpId = extractNumbers(id);\n    if (rfpId) {\n      variables[\"where\"] = { rfp_id: { _eq: id } };\n    } else {\n      variables[\"where\"] = {\n        _or: [\n          { name: { _iregex: id } },\n          { summary: { _iregex: id } },\n          { description: { _iregex: id} },\n        ]\n      };\n    }\n  }\n  await asyncFetch(\"https://near-queryapi.api.pagoda.co/v1/graphql\", {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": \"polyprogrammist_near\" },\n    body: JSON.stringify({\n      query: rfpQuery,\n      variables: variables,\n      operationName: \"GetLatestSnapshot\",\n    }),\n  })\n    .then((res) => {\n      const rfps =\n        res?.data?.[\n          rfpQueryName\n        ];\n      results = rfps;\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n  return results;\n};\nasync function getSuggestedProposals(id) {\n  let results = [];\n  const variables = {\n    limit: 3,\n    offset: 0,\n    where: {},\n  };\n  if (id) {\n    const proposalId = extractNumbers(id);\n    if (proposalId) {\n      variables[\"where\"] = { proposal_id: { _eq: id } };\n    } else {\n      variables[\"where\"] = {\n        _or: [\n          { name: { _iregex: id } },\n          { summary: { _iregex: id } },\n          { description: { _iregex: id} },\n        ]\n      };\n    }\n  }\n  await asyncFetch(\"https://near-queryapi.api.pagoda.co/v1/graphql\", {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": \"polyprogrammist_near\" },\n    body: JSON.stringify({\n      query: proposalQuery,\n      variables: variables,\n      operationName: \"GetLatestSnapshot\",\n    }),\n  })\n    .then((res) => {\n      const proposals =\n        res?.data?.[\n          proposalQueryName\n        ];\n      results = proposals;\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n  return results;\n};\n// Initializes SimpleMDE element and attaches to text-area\nconst simplemde = new SimpleMDE({\n  forceSync: true,\n  toolbar: [\n    \"heading\",\n    \"bold\",\n    \"italic\",\n    \"|\", // adding | creates a divider in the toolbar\n    \"quote\",\n    \"code\",\n    \"link\",\n  ],\n  placeholder: \\`${placeholder}\\`,\n  initialValue: \"\",\n  insertTexts: {\n    link: [\"[\", \"]()\"],\n  },\n  spellChecker: false,\n  renderingConfig: {\n\t\tsingleLineBreaks: false,\n\t\tcodeSyntaxHighlighting: true,\n\t},\n  autofocus:${autoFocus}\n});\ncodeMirrorInstance = simplemde.codemirror;\n/**\n * Sends message to Widget to update content\n */\nconst updateContent = () => {\n  const content = simplemde.value();\n  window.parent.postMessage({ handler: \"update\", content }, \"*\");\n};\n/**\n * Sends message to Widget to update iframe height\n */\nconst updateIframeHeight = () => {\n  const iframeHeight = document.body.scrollHeight;\n  window.parent.postMessage({ handler: \"resize\", height: iframeHeight }, \"*\");\n};\n// On Change\nsimplemde.codemirror.on('blur', () => {\n  updateContent();\n});\nsimplemde.codemirror.on('keyup', () => {\n  updateIframeHeight();\n  const content = simplemde.value();\n  window.parent.postMessage({ handler: \"updateOnKeyup\", content }, \"*\");\n});\nif (showAccountAutoComplete) {\n  let mentionToken;\n  let mentionCursorStart;\n  const dropdown = document.getElementById(\"mentiondropdown\");\n  simplemde.codemirror.on(\"keydown\", () => {\n    if (mentionToken && event.key === 'ArrowDown') {\n      dropdown.querySelector('button').focus();\n      event.preventDefault();\n      return false;\n    }\n  });\n  simplemde.codemirror.on(\"keyup\", (cm, event) => {\n    const cursor = cm.getCursor();\n    const token = cm.getTokenAt(cursor);\n    const createMentionDropDownOptions = () => {\n      const mentionInput = cm.getRange(mentionCursorStart, cursor);\n      dropdown.innerHTML = getSuggestedAccounts(mentionInput)\n      .map(\n        (item) =>\n          '<li><button class=\"dropdown-item cursor-pointer w-100 text-wrap\">' + item?.accountId + '</button></li>'\n      )\n      .join(\"\");\n      dropdown.querySelectorAll(\"li\").forEach((li) => {\n        li.addEventListener(\"click\", () => {\n          const selectedText = li.textContent.trim();\n          simplemde.codemirror.replaceRange(selectedText, mentionCursorStart, cursor);\n          mentionToken = null;\n          dropdown.classList.remove(\"show\");\n          cm.focus();\n        });\n      });\n    }\n    // show dropwdown only when @ is at first place or when there is a space before @\n      if (!mentionToken && (token.string === \"@\" && cursor.ch === 1 || token.string === \"@\" && cm.getTokenAt({line:cursor.line, ch: cursor.ch - 1}).string == ' ')) {\n        mentionToken = token;\n        mentionCursorStart = cursor;\n        // Calculate cursor position relative to the iframe's viewport\n        const rect = cm.charCoords(cursor);\n        const x = rect.left;\n        const y = rect.bottom;\n        // Create dropdown with options\n        dropdown.style.top = y + \"px\";\n        dropdown.style.left = x + \"px\";\n        createMentionDropDownOptions();\n        dropdown.classList.add(\"show\");\n        // Close dropdown on outside click\n        document.addEventListener(\"click\", function(event) {\n            if (!dropdown.contains(event.target)) {\n                mentionToken = null;\n                dropdown.classList.remove(\"show\");\n            }\n        });\n    } else if (mentionToken && token.string.match(/[^@a-z0-9.]/)) {\n        mentionToken = null;\n        dropdown.classList.remove(\"show\");\n    } else if (mentionToken) {\n        createMentionDropDownOptions();\n    }\n});\n}\nif (showProposalIdAutoComplete) {\n  let proposalId;\n  let referenceCursorStart;\n  const dropdown = document.getElementById(\"referencedropdown\");\n  const loader = document.createElement('div');\n  loader.className = 'loader';\n  loader.textContent = 'Loading...';\n  simplemde.codemirror.on(\"keydown\", () => {\n    if (proposalId && event.key === 'ArrowDown') {\n      dropdown.querySelector('button').focus();\n      event.preventDefault();\n      return false;\n    }\n  });\n  simplemde.codemirror.on(\"keyup\", (cm, event) => {\n    const cursor = cm.getCursor();\n    const token = cm.getTokenAt(cursor);\n    const createReferenceDropDownOptions = async () => {\n      try {\n        const input = cm.getRange(referenceCursorStart, cursor);\n        dropdown.innerHTML = ''; // Clear previous content\n        dropdown.appendChild(loader); // Show loader\n        const suggestedProposals = await getSuggestedProposals(input);\n        const suggestedRFPs = await getSuggestedRfps(input);\n       const proposalItems = suggestedProposals\n        .map(\n          (item) =>\n            '<li><button class=\"dropdown-item cursor-pointer w-100 text-wrap\">' + \"#\" + item?.proposal_id + \" Proposal: \" + item.name + '</button></li>'\n        )\n        .join(\"\");\n        const rfpItems = suggestedRFPs\n        .map(\n          (item) =>\n            '<li><button class=\"dropdown-item cursor-pointer w-100 text-wrap\">' + \"#\" + item?.rfp_id + \" RFP: \" + \" \" + item.name + '</button></li>'\n        )\n        .join(\"\");\n        dropdown.innerHTML = proposalItems + rfpItems;\n        dropdown.querySelectorAll(\"li\").forEach((li) => {\n          li.addEventListener(\"click\", () => {\n            const selectedText = li.textContent.trim();\n            const startIndex = selectedText.indexOf('#') + 1; \n            const endIndex = selectedText.indexOf(' ', startIndex);\n            const id = endIndex !== -1 ? selectedText.substring(startIndex, endIndex) : selectedText.substring(startIndex);\n            const link = (selectedText.includes(\"RFP:\") ? rfpLink : proposalLink) + id;\n            const adjustedStart = {\n              line: referenceCursorStart.line,\n              ch: referenceCursorStart.ch - 1\n            };\n            simplemde.codemirror.replaceRange(\"[\" + selectedText + \"]\" + \"(\" + link + \")\", adjustedStart, cursor);\n            proposalId = null;\n            dropdown.classList.remove(\"show\");\n            cm.focus();\n          });\n        });\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        // Handle error: Remove loader\n        dropdown.innerHTML = ''; // Clear previous content\n      } finally {\n        // Remove loader\n        dropdown.removeChild(loader);\n      }\n    }\n    // show dropwdown only when there is space before # or it's first char\n      if (!proposalId && (token.string === \"#\" && cursor.ch === 1 || token.string === \"#\" && cm.getTokenAt({line:cursor.line, ch: cursor.ch - 1}).string == ' ')) {\n        proposalId = token;\n        referenceCursorStart = cursor;\n        // Calculate cursor position relative to the iframe's viewport\n        const rect = cm.charCoords(cursor);\n        const x = rect.left;\n        const y = rect.bottom;\n        // Create dropdown with options\n        dropdown.style.top = y + \"px\";\n        dropdown.style.left = x + \"px\";\n        createReferenceDropDownOptions();\n        dropdown.classList.add(\"show\");\n        // Close dropdown on outside click\n        document.addEventListener(\"click\", function(event) {\n            if (!dropdown.contains(event.target)) {\n              proposalId = null;\n                dropdown.classList.remove(\"show\");\n            }\n        });\n    } else if (proposalId && (token.string.match(/[^#a-z0-9.]/) || !token.string)) {\n      proposalId = null;\n      dropdown.classList.remove(\"show\");\n    } else if (proposalId) {\n      createReferenceDropDownOptions();\n  }\n});\n}\nwindow.addEventListener(\"message\", (event) => {\n  if (!isEditorInitialized && event.data !== \"\") {\n    simplemde.value(event.data.content);\n    isEditorInitialized = true;\n  } else {\n    if (event.data.handler === 'refreshEditor' || event.data.handler === 'committed') {\n      codeMirrorInstance.getDoc().setValue(event.data.content);\n    }\n  }\n  if (event.data.followingData) {\n    followingData = event.data.followingData;\n  }\n  if (event.data.profilesData) {\n    profilesData = JSON.parse(event.data.profilesData);\n  }\n  if (event.data.proposalQuery) {\n    proposalQuery = event.data.proposalQuery;\n  }\n  if (event.data.proposalQueryName) {\n    proposalQueryName = event.data.proposalQueryName;\n  }\n  if (event.data.proposalLink) {\n    proposalLink = event.data.proposalLink;\n  }\n  if (event.data.rfpQuery) {\n    rfpQuery = event.data.rfpQuery;\n  }\n  if (event.data.rfpQueryName) {\n    rfpQueryName = event.data.rfpQueryName;\n  }\n  if (event.data.rfpLink) {\n    rfpLink = event.data.rfpLink;\n  }\n  \n});\n</script>\n</body>\n</html>\n`;\nreturn (\n  <iframe\n    className={className}\n    style={{\n      height: `${state.iframeHeight}px`,\n      maxHeight: \"410px\",\n      minHeight: \"250px\",\n    }}\n    srcDoc={code}\n    message={{\n      content: props.data?.content ?? \"\",\n      followingData,\n      profilesData: JSON.stringify(profilesData),\n      proposalQuery: proposalQuery,\n      proposalQueryName: proposalQueryName,\n      proposalLink: proposalLink,\n      rfpQuery: rfpQuery,\n      rfpQueryName: rfpQueryName,\n      rfpLink: rfpLink,\n      handler: props.data.handler,\n    }}\n    onMessage={(e) => {\n      switch (e.handler) {\n        case \"update\":\n          {\n            onChange(e.content);\n          }\n          break;\n        case \"resize\":\n          {\n            const offset = 10;\n            State.update({ iframeHeight: e.height + offset });\n          }\n          break;\n        case \"updateOnKeyup\":\n          {\n            onChangeKeyup(e.content);\n          }\n          break;\n      }\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devhub.near/widget/components.molecule.SimpleMDE", "fact_widget_deployments_id": "b20589e28e920dc2e94734dbb1fa9008", "inserted_timestamp": "2024-07-20T22:56:22.817Z", "modified_timestamp": "2024-07-20T22:56:22.817Z", "__row_index": 1}