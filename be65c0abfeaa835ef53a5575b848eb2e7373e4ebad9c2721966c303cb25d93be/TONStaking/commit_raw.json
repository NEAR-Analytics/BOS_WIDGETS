{"tx_hash": "H9vDgQUKqDRAmpuFXd2Vmj5VpGyrp65rPFqaA1AqNHq3", "action_id_social": "HSaz1BcTw4B8qAQohwojcx3sXsKJ3uv9pJy6SDGqtJyV-0-widget", "block_id": 101070726, "block_timestamp": "2023-09-14T00:20:46.638Z", "signer_id": "be65c0abfeaa835ef53a5575b848eb2e7373e4ebad9c2721966c303cb25d93be", "widget_name": "TONStaking", "source_code": "// SET CONSTANTS\nconst WTON_ADDRESS = \"0xc4a11aaf6ea915ed7ac194161d2fc9384f15bff2\";\nconst WTON_DECIMALS = 27;\nconst LOCK_TOS_DIVIDEND_PROXY_ADDRESS =\n  \"0x17332F84Cc0bbaD551Cd16675F406A0a2c55E28C\";\n\nif (Ethers.provider() !== null) {\n  if (state.chainId === undefined) {\n    Ethers.provider()\n      .getNetwork()\n      .then((chainIdData) => {\n        if (chainIdData?.chainId) {\n          State.update({ chainId: chainIdData.chainId });\n        }\n      });\n  }\n\n  if (state.chainId !== undefined && state.chainId !== 1) {\n    return <p>Switch to Ethereum Mainnet</p>;\n  }\n\n  // DETECT SENDER\n  if (state.sender === undefined) {\n    const accounts = Ethers.send(\"eth_requestAccounts\", []);\n    if (accounts.length) {\n      State.update({ sender: accounts[0] });\n      console.log(\"set sender\", accounts[0]);\n    }\n  }\n\n  // FETCH CLAIMABLE WTON AMOUNT\n  if (state.claimable === undefined && state.sender) {\n    const iface = new ethers.utils.Interface([\n      \"function claimable(address, address) external view returns (uint256)\",\n    ]);\n    const encodedData = iface.encodeFunctionData(\"claimable\", [\n      state.sender,\n      WTON_ADDRESS,\n    ]);\n    return Ethers.provider()\n      .call({\n        to: LOCK_TOS_DIVIDEND_PROXY_ADDRESS,\n        data: encodedData,\n      })\n      .then((rawdata) => {\n        const claimableHex = iface.decodeFunctionResult(\"claimable\", rawdata);\n        const claimable = Big(claimableHex.toString())\n          .div(Big(10).pow(WTON_DECIMALS))\n          .toFixed(2)\n          .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n        State.update({\n          claimable: claimable,\n        });\n      });\n  }\n}\n\nconst claim = () => {\n  if (Number(state.claimable) === 0n) return;\n  const ABI = [\"function claim(address) external\"];\n  const lockTOSDividendProxyContract = new ethers.Contract(\n    LOCK_TOS_DIVIDEND_PROXY_ADDRESS,\n    ABI,\n    Ethers.provider().getSigner()\n  );\n  lockTOSDividendProxyContract.claim(WTON_ADDRESS).then((transactionHash) => {\n    State.update({ tx: transactionHash });\n    console.log(\"transactionHash is \" + transactionHash);\n  });\n};\n\n// FETCH CSS\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\n).body;\n\nif (!cssFont || !css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n      font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto,\n        Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue,\n        sans-serif;\n      ${cssFont}\n      ${css}\n    `,\n  });\n}\nconst Theme = state.theme;\n\nreturn (\n  <Theme>\n    <div class=\"LidoContainer\">\n      <div class=\"Header\">Claim PowerTON</div>\n      <div class=\"SubHeader\">Claim your PowerTON seigniorage</div>\n\n      <div class=\"LidoForm\">\n        {state.tx ? <div>Transaction Hash: {state.tx.hash}</div> : <></>}\n        <div\n          class={\n            state.sender ? \"LidoFormBottomContainer\" : \"LidoFormTopContainer\"\n          }\n        >\n          <div class=\"LidoFormTopContainerLeft\">\n            <div class=\"LidoFormTopContainerLeftContent2\">\n              <span>Claimable</span>\n            </div>\n          </div>\n          <div class=\"LidoFormTopContainerLeftContent2\">\n            <span>\n              {state.claimable ?? (!state.sender ? \"0\" : \"...\")}\n              &nbsp;WTON\n            </span>\n          </div>\n        </div>\n      </div>\n      <div class=\"LidoStakeForm\">\n        {!!state.sender ? (\n          <button class=\"LidoStakeFormSubmitContainer\" onClick={() => claim()}>\n            <span>Claim</span>\n          </button>\n        ) : (\n          <Web3Connect\n            className=\"LidoStakeFormSubmitContainer\"\n            connectLabel=\"Connect with Web3\"\n          />\n        )}\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/be65c0abfeaa835ef53a5575b848eb2e7373e4ebad9c2721966c303cb25d93be/widget/TONStaking", "fact_widget_deployments_id": "9d9c74dfd68c204c5781a609c46be522", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}