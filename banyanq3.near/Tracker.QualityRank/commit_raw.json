{"tx_hash": "C7SFGWRffE1n4mN1r5AxPdKVxX2xqHMNuH38J6Bt8KFr", "action_id_social": "E71whZS3tAfQK5eFmFCJg6VZGzzPDiJTw1cS81inZcYK-0-widget", "block_id": 101540355, "block_timestamp": "2023-09-20T09:24:03.555Z", "signer_id": "banyanq3.near", "widget_name": "Tracker.QualityRank", "source_code": "/**\n */\nconst Text = styled.p`\n  font-family: \"FK Grotesk\", sans-serif;\n  font-size: ${(p) => p.size ?? \"18px\"};\n  line-height: ${(p) => p.lineHeight ?? \"1.5\"};\n  font-weight: ${(p) => p.weight ?? \"400\"};\n  color: ${(p) => p.color ?? \"#000\"};\n  margin: 0;\n`;\n// add nice header\nconst Items = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, minmax(0, 1fr));\n  gap: 24px;\n\n  @media (max-width: 1200px) {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n\n  @media (max-width: 800px) {\n    grid-template-columns: minmax(0, 1fr);\n  }\n`;\nlet accountId = props.accountId ?? \"qualityq3.near\";\nlet qualityTracker = \"qualityq3.near\";\nlet startOfQuarterFollowers = props.startOfQuarterFollower ?? 47; // 47; // to keep track of followers\nlet builderTarget = props.builderTarget ?? 50;\n\n/**WIDGET CALCULATION */\nconst accountWidgetCount = [];\nlet numberOfBuildersWhoDeployed = 0;\n\nlet accounts = Social.keys(`${accountId}/graph/follow/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\n\nif (accounts === null) {\n  return \"Loading...\";\n}\n\naccounts = Object.entries(accounts[accountId].graph.follow || {});\naccounts.sort((a, b) => b[1] - a[1]);\n\nfor (let i = 0; i < accounts.length; ++i) {\n  let accountId = accounts[i][0];\n  let widgets = Social.get(`${accountId}/widget/*`, \"final\", {\n    return_type: \"BlockHeight\",\n    values_only: true,\n  });\n  let widgetCount = 0;\n  if (widgets) {\n    widgetCount = Object.keys(widgets).length;\n    numberOfBuildersWhoDeployed++;\n  }\n  accountWidgetCount.push({\n    accountId: accountId,\n    count: widgetCount,\n  });\n}\n\nconst accountWidgetSort = accountWidgetCount.sort((a, b) => b.count - a.count);\nconst numAccounts = accountWidgetSort.length;\naccountWidgetSort = accountWidgetSort.slice(0, limit);\nconsole.log(accountWidgetSort);\n// add number of accounts with no widget\nconst totalWidgetCount = accountWidgetCount.reduce(\n  (sum, account) => sum + account.count,\n  0\n);\n\nconst following = Social.keys(`${accountId}/graph/follow/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nconst qualityFollowing = Social.keys(\n  `${qualityTracker}/graph/follow/*`,\n  \"final\",\n  {\n    return_type: \"BlockHeight\",\n    values_only: true,\n  }\n);\nconst qualityBuilderCount = qualityFollowing\n  ? Object.keys(following[qualityTracker].graph.follow || {}).length\n  : null;\n\nconst currentBuilderCount = following\n  ? Object.keys(following[accountId].graph.follow || {}).length\n  : null;\nconst Flex = styled.div`\n  display: flex;\n  gap: 15px;\n  align-items: center;\n  flex-direction: column;\n  flex-wrap: \"nowrap\";\n\n    @media (max-width: 900px) {\n    flex-direction: column;\n    gap: var(--section-gap);\n    }\n`;\n\n\n\nconst Container = styled.div`\n  display: flex;\n  max-width: 1060px;\n  margin: 0 auto;\n  gap: var(--section-gap);\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  padding: var(--section-gap) 24px;\n`;\nconst H1 = styled.h1`\n  font-family: \"FK Grotesk\", sans-serif;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 90px;\n  line-height: 1;\n  text-align: center;\n  letter-spacing: -0.03em;\n  color: #000;\n  margin: 0;\n  max-width: 700px;\n\n  span {\n    display: inline-block;\n    background: #6CE89F;\n    border-radius: 20px;\n    position: relative;\n    padding: 0.1em 0.2em 0;\n\n    svg {\n      position: absolute;\n      bottom: -8px;\n      right: -10px;\n      width: 24px;\n    }\n  }\n\n  @media (max-width: 900px) {\n    font-size: 50px;\n\n    span {\n      border-radius: 12px;\n      svg {\n        position: absolute;\n        bottom: -6px;\n        right: -7px;\n        width: 16px;\n      }\n    }\n  }\n`;\nconst Wrapper = styled.div`\n  --section-gap: 42px;\n  padding-top: 42px;\n\n  @media (max-width: 1160px) {\n    .line-rounded-corners {\n      display: none !important;\n    }\n  }\n\n  @media (max-width: 900px) {\n    padding-top: 0;\n  }\n`;\n\nreturn (\n  <div>\n\n    <div className=\"row p-2\">\n\n      <Widget\n        src=\"hackerhouse.near/widget/ProgressBar\"\n        props={{\n          infoTitle: \"Q3 Builders Who Shipped 1+ Component\",\n          numerator: numberOfBuildersWhoDeployed,\n          total: builderTarget,\n        }}\n      />\n    </div>\n    <h3 className=\"m-2\">Q3 BOS Builders Who Shipped QUality</h3>\n    {accountWidgetCount.map((rank, index) => {\n      let accountId = rank.accountId;\n      return (\n        <div className=\"d-flex m-2\" key={accountId}>\n          <div className=\"me-4\" style={{ width: \"45%\" }}>\n            <Widget\n              src=\"banyanq3.near/widget/AccountProfileCard\"\n              props={{ accountId }}\n            />\n          </div>\n          <div className=\"d-flex flex-column\" style={{ width: \"30%\" }}>\n            <div>\n              Rank:\n              <span\n                style={{\n                  backgroundColor: \"black\",\n                  borderRadius: \"5px\",\n                  padding: \"5px\",\n                  color: \"white\",\n                }}\n              >\n                {index + 1}\n              </span>\n            </div>\n            <div>\n              Widgets:{\" \"}\n              <span\n                style={{\n                  fontWeight: \"bold\",\n                }}\n              >\n                {rank.count}\n              </span>\n            </div>\n          </div>\n        </div>\n      );\n    })}\n    <br />\n  </div>\n);", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/banyanq3.near/widget/Tracker.QualityRank", "fact_widget_deployments_id": "22931d5fec13aef47f4b183bdfe2d1af", "inserted_timestamp": "2023-09-20T11:26:36.219Z", "modified_timestamp": "2023-09-20T11:26:36.219Z", "__row_index": 1}