{"tx_hash": "ErbKDzQDUmFNrBGRL2rfoSerzZ8XKg13NeeUq4t2QHnu", "action_id_social": "2bE41oZcm851viPnhaWT4AvZDiayAYUUE2oVTgZiCUgv-0-widget", "block_id": 101468097, "block_timestamp": "2023-09-19T10:23:46.389Z", "signer_id": "rubycop.near", "widget_name": "NDC.Elections.Candidates", "source_code": "const {\n  electionContract,\n  registryContract,\n  ndcOrganization,\n  myVotes,\n  ids,\n  id,\n  typ,\n  ref_link,\n  quorum,\n  seats,\n  voters_num,\n  result,\n  iahToken,\n  candidateFilterId,\n  blacklisted,\n  greylisted,\n  isBonded,\n  hasPolicyNFT,\n  hasIVotedNFT,\n  electionStatus,\n} = props;\n\nconst widgets = {\n  voters: \"election.ndctools.near/widget/NDC.Elections.Voters\",\n  styledComponents: \"nomination.ndctools.near/widget/NDC.StyledComponents\",\n  modal: \"nomination.ndctools.near/widget/NDC.Modal\",\n  verifyHuman: \"nomination.ndctools.near/widget/NDC.VerifyHuman\",\n  budget: \"election.ndctools.near/widget/NDC.Elections.BudgetPackage\",\n  castVotes: \"election.ndctools.near/widget/NDC.Elections.CastVotes\",\n};\n\nconst LocalStorageKeys = {\n  Bookmarks: \"Bookmarks\",\n};\n\nconst apiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\nconst QUERY_API_ENDPOINT = \"https://graph.mintbase.xyz/mainnet\";\nconst POLICY_HASH =\n  \"99c19c7a4ea920bb2ae2c5a214b35f6c0393e518e7637b2d6dccf365dd62a047\";\nconst FAIR_POLICY_DOC =\n  \"https://bafkreidwdxocdkfsv6srynw7ipnogfuw76fzncmxd5jv7furbsn5cp4bz4.ipfs.nftstorage.link\";\nconst FAIR_POLICY_NFT =\n  \"https://ipfs.near.social/ipfs/bafkreiabsu7xhumhim4gxj5h7umopc3b5ekppeofwwizsf5loqs2vcntpm\";\nconst I_VOTED_NFT =\n  \"https://ipfs.near.social/ipfs/bafkreiewiq4puwmcu7ciztsfqvmpl3gsumfgsm5r22g24abiynoeghsyey\";\nconst SHARE_LINK =\n  \"https://twitter.com/intent/tweet?text=I%20minted%20%E2%80%9CI%20Voted%E2%80%9D%20NFT%20during%20NDC%20Elections!%20%F0%9F%8E%89%0A%0ACheck%20election%20here%3A%20https%3A//near.org/election.ndctools.near/widget/NDC.Elections.Main%0A%0A%23NDC%20%23NEAR%20https://pbs.twimg.com/media/F5gdVfyXYAECcjh?format=jpg&name=large\";\nconst MINT_VOTING_POLICY_NFT = `https://shard.dog/fairvoting?ids=[${ids}]&accountId=${context.accountId}`;\nconst MINT_I_VOTED_NFT = `https://shard.dog/ivoted?ids=[${ids}]&accountId=${context.accountId}`;\nconst BLACKLIST_VERIFY_LINK =\n  \"https://docs.google.com/forms/d/e/1FAIpQLSdQYxiUcxpiCDVKnN55Q7T2fnUPt0VjRdzo46qEkV7ub5mWFw/viewform\";\nconst GREYLIST_VERIFY_LINK =\n  \"https://airtable.com/appgHJzUuw1Kb2GJV/shrCdvjmWMzwaMEj8\";\nconst MIN_BOND = 3; //3\nconst MAX_BOND = 300; //300;\n\nconst nearIdsWithName = props.result.map(([candidate, _vote]) => {\n  return [candidate, _vote, Social.getr(`${candidate}/profile`)?.name];\n});\n\nconst Container = styled.div`\n  position: relative:\n  font-family: Avenir;\n  font-size: 16px;\n`;\n\nconst StyledLink = styled.a`\n  color: inherit !important;\n  width: 215px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 14px;\n  padding-top: 2px;\n\n  @media (max-width: 400px) {\n    width: 120px;\n  }\n`;\n\nconst UserIcons = styled.div`\n  width: 20px;\n  color: ${(props) => (props.selected && !props.winnerId ? \"#fff\" : \"black\")};\n`;\n\nconst CandidateItemRow = styled.div`\n  @media (max-width: 400px) {\n    padding: 0 10px !important;\n  }\n\n  padding: 0 20px;\n  height: 48px;\n  border-radius: 12px;\n  margin-bottom: 8px;\n  border: 1px solid;\n  background: ${(props) =>\n    props.winnerId\n      ? \"rgb(206 233 207)\"\n      : props.selected\n      ? \"#4aa6ee\"\n      : props.filtered\n      ? \"#d4e4f461\"\n      : \"#F8F8F9\"};\n  border-color: ${(props) =>\n    props.winnerId\n      ? \"rgb(137 201 139)\"\n      : props.selected || props.filtered\n      ? \"#4aa6ee\"\n      : \"#F8F8F9\"};\n      color: ${(props) =>\n        props.selected && !props.winnerId ? \"#fff\" : \"inherit\"};\n\n  small span {\n    color: ${(props) =>\n      props.selected && !props.winnerId ? \"#fff\" : \"inherit\"};\n  }\n\n  &:hover {\n    background: ${(props) =>\n      props.winnerId\n        ? \"rgb(206 233 207)\"\n        : props.selected\n        ? \"#4aa6ee\"\n        : \"#d4e4f461\"};\n  }\n\n  .form-check-input:checked {\n    background-color: ${(props) =>\n      props.winnerId ? \"#239f28\" : \"#0d6efd\"} !important;\n    border-color: ${(props) =>\n      props.winnerId ? \"#239f28\" : \"#0d6efd\"} !important;\n`;\n\nconst Candidates = styled.div`\n  cursor: pointer;\n`;\n\nconst Bookmark = styled.div`\n  width: 40px;\n  cursor: pointer;\n\n  #bookmark.bi-bookmark-fill {\n    color: ${(props) =>\n      props.winnerId ? \"#198754\" : props.selected ? \"#fff\" : \"#4498E0\"};\n  }\n\n  @media (max-width: 400px) {\n    width: auto;\n    margin-right: 15px;\n  }\n`;\n\nconst BookmarkFilter = styled.div`\n  width: 90px;\n  cursor: pointer;\n\n  @media (max-width: 400px) {\n    width: auto;\n    margin-right: 15px;\n  }\n`;\n\nconst Expand = styled.div`\n  width: 35px;\n  cursor: pointer;\n\n  @media (max-width: 400px) {\n    width: 20px;\n    margin-right: 10px;\n  }\n`;\n\nconst ExpandFilter = styled.div`\n  width: 35px;\n  cursor: pointer;\n\n  @media (max-width: 400px) {\n    width: 0px;\n    margin-right: 10px;\n  }\n`;\n\nconst Votes = styled.div`\n  width: 15px;\n`;\n\nconst VotesFilter = styled.div`\n  width: 80px;\n  @media (max-width: 400px) {\n    width: 45px;\n  }\n`;\n\nconst Nomination = styled.div`\n  width: 105px;\n\n  @media (max-width: 400px) {\n    width: 70px;\n  }\n`;\n\nconst NominationLink = styled.div`\n  display: block;\n\n  @media (max-width: 400px) {\n    display: none;\n  }\n`;\n\nconst InfoRow = styled.div`\n  gap: 45px;\n\n  @media (max-width: 768px) {\n    gap: 35px;\n  }\n\n  @media (max-width: 400px) {\n    gap: 20px;\n  }\n`;\n\nconst NominationLinkMobile = styled.div`\n  display: none;\n\n  @media (max-width: 400px) {\n    display: block;\n  }\n`;\n\nconst FilterRow = styled.div`\n  padding: 15px 0px;\n  font-size: 13px;\n`;\n\nconst CandidatesContainer = styled.div`\n  overflow-y: scroll;\n  max-height: 490px;\n  width: 100%;\n`;\n\nconst StickyContainer = styled.div`\n  position: \"fixed\",\n  left: 0;\n  bottom: 0;\n  height: 60px;\n  width: 100%;\n`;\n\nconst Icon = styled.i`\n  font-size: 14px;\n`;\n\nconst Winner = styled.i`\n  margin-left: 10px;\n  font-size: 14px;\n`;\n\nconst Section = styled.div`\n  gap: 8px;\n  margin-bottom: 10px;\n`;\n\nconst VotingAlert = styled.small`\n  color: rgb(206 43 112);\n  font-weight: 600;\n  text-aligh: center;\n`;\n\nconst GraylistedAlert = styled.div`\n  background: rgb(236 236 236);\n`;\n\nconst Rules = styled.div`\n  overflow-y: scroll;\n  max-height: 300px;\n`;\n\nconst Rule = styled.div`\n  color: #f29bc0;\n`;\n\nconst currentUser = context.accountId;\n\nconst housesMapping = {\n  CouncilOfAdvisors: \"Council Of Advisors\",\n  HouseOfMerit: \"House of Merit\",\n  TransparencyCommission: \"Transparency Commission\",\n  SetupPackage: \"Budget Package\",\n};\n\nconst alreadyVoted = (candidateId) =>\n  myVotes.some((voter) => voter.candidate === candidateId);\n\nconst alreadyVotedForHouse = () => myVotes.some((voter) => voter.house === typ);\n\nconst filteredCandidates = () => {\n  let candidates = nearIdsWithName;\n\n  if (state.filterOption === \"bookmark\")\n    candidates = state.filter.bookmark\n      ? state.candidates.filter(([candidateId, _v, _n], _i) =>\n          state.bookmarked.includes(candidateId)\n        )\n      : result;\n  if (state.filterOption === \"candidates\")\n    candidates = candidates.sort((a, b) =>\n      state.filter.candidates\n        ? a[0].localeCompare(b[0])\n        : b[0].localeCompare(a[0])\n    );\n  if (state.filterOption === \"votes\")\n    candidates = candidates.sort((a, b) =>\n      state.filter.votes ? b[1] - a[1] : a[1] - b[1]\n    );\n  if (state.filterOption === \"my_votes\")\n    candidates = state.filter.my_votes\n      ? state.candidates.filter(([candidateId, _v, _n], _i) =>\n          alreadyVoted(candidateId)\n        )\n      : result;\n\n  if (candidateFilterId) {\n    if (Array.isArray(candidateFilterId)) {\n      const onlyFiltered = nearIdsWithName.filter(\n        ([candidate, _v, name], _i) =>\n          candidateFilterId.includes(name) ||\n          candidateFilterId.includes(candidate)\n      );\n      const restCandidates = nearIdsWithName.filter(\n        ([candidate, _v, _n], _i) =>\n          !onlyFiltered.map((u) => u[0]).includes(candidate)\n      );\n      candidates = [...onlyFiltered, ...restCandidates];\n    } else {\n      candidates = nearIdsWithName.filter(\n        ([candidate, _v, name], _i) =>\n          name.toLowerCase().includes(candidateFilterId.toLowerCase()) ||\n          candidate.toLowerCase().includes(candidateFilterId.toLowerCase())\n      );\n    }\n  }\n  return candidates;\n};\n\nconst handleSelectCandidate = (candidateId) => {\n  if (!state.acceptedPolicy) {\n    State.update({ showToSModal: true });\n    return;\n  }\n  if (!!state.acceptedPolicy && hasPolicyNFT === false) {\n    State.update({ showMintPolicyModal: true });\n    return;\n  }\n\n  const selectedItems = state.selectedCandidates.includes(candidateId)\n    ? state.selectedCandidates.filter((el) => el !== candidateId)\n    : [...state.selectedCandidates, candidateId];\n\n  const currentVotes = seats - myVotesForHouse().length - selectedItems.length;\n  if (currentVotes < 0) return;\n\n  State.update({\n    selectedCandidates: selectedItems,\n    availableVotes: currentVotes,\n    reload: false,\n  });\n\n  return true;\n};\n\nconst handleCast = () =>\n  !!state.acceptedPolicy && hasPolicyNFT\n    ? State.update({ bountyProgramModal: true })\n    : State.update({ showToSModal: true });\n\nconst handleResetSelection = () => {\n  State.update({\n    selectedCandidates: [],\n    availableVotes: seats - myVotesForHouse().length,\n  });\n};\n\nconst selectedBookmarks = (candidateId) => {\n  let selectedItems = state.bookmarked.includes(candidateId)\n    ? state.bookmarked.filter((el) => el !== candidateId)\n    : [...state.bookmarked, candidateId];\n  return [...new Set(selectedItems)];\n};\n\nconst handleBookmarkCandidate = (candidateId) => {\n  let selectedItems = selectedBookmarks(candidateId);\n  Storage.set(LocalStorageKeys.Bookmarks + id, JSON.stringify(selectedItems));\n  State.update({ bookmarked: selectedItems });\n};\n\nconst handleVote = () => {\n  const bondDiff = greylisted ? MAX_BOND - isBonded : MIN_BOND - isBonded;\n\n  const voteFunc = {\n    contractName: electionContract,\n    methodName: \"vote\",\n    args: { prop_id: props.id, vote: state.selectedCandidates },\n    gas: \"110000000000000\",\n  };\n\n  const bondFunc = {\n    contractName: registryContract,\n    methodName: \"is_human_call\",\n    args: { ctr: electionContract, function: \"bond\", payload: \"{}\" },\n    gas: \"110000000000000\",\n    deposit: bondDiff * 1000000000000000000000000,\n  };\n  const arr = bondDiff <= 0 ? [voteFunc] : [bondFunc, voteFunc];\n\n  Near.call(arr);\n  State.update({\n    bountyProgramModal: false,\n    reload: true,\n  });\n};\n\nconst handleAcceptToS = () => {\n  Near.call(\n    electionContract,\n    \"accept_fair_voting_policy\",\n    { policy: POLICY_HASH },\n    70000000000000,\n    1000000000000000000000\n  );\n  State.update({\n    showToSModal: false,\n    reload: true,\n  });\n};\n\nconst handleFilter = (option) => {\n  let filterOption = \"\";\n  let filter = {};\n\n  if (option.bookmark) {\n    filterOption = \"bookmark\";\n    filter = { bookmark: !state.filter.bookmark };\n  }\n  if (option.candidates) {\n    filterOption = \"candidates\";\n    filter = { candidates: !state.filter.candidates };\n  }\n  if (option.votes) {\n    filterOption = \"votes\";\n    filter = { votes: !state.filter.votes };\n  }\n  if (option.my_votes) {\n    filterOption = \"my_votes\";\n    filter = { my_votes: !state.filter.my_votes };\n  }\n\n  State.update({ filterOption, filter, reload: true });\n};\n\nconst handleStateTransition = () => {\n  if (state.filterOption !== \"\") return;\n\n  switch (electionStatus) {\n    case \"ONGOING\":\n      if (!!state.acceptedPolicy)\n        State.update({\n          showMintPolicyModal: hasPolicyNFT === false,\n          showMintIVotedModal:\n            state.hasVotedOnAllProposals &&\n            hasIVotedNFT === false &&\n            hasPolicyNFT === true,\n        });\n      break;\n    case \"COOLDOWN\":\n      State.update({\n        showReviewModal: true,\n      });\n      break;\n    case \"ENDED\":\n      State.update({ winnerIds });\n      break;\n    default:\n      0;\n  }\n};\n\nfunction loadSocialDBData() {\n  let _bookmarked = Social.index(currentUser, `${ndcOrganization}/${typ}`);\n  const bookmarked =\n    _bookmarked && _bookmarked[_bookmarked.length - 1]\n      ? _bookmarked[_bookmarked.length - 1].value\n      : [];\n  const LSItems = Storage.get(LocalStorageKeys.Bookmarks + id)\n    ? JSON.parse(Storage.get(LocalStorageKeys.Bookmarks + id))\n    : [];\n\n  State.update({ bookmarked: bookmarked.concat(LSItems) });\n}\n\nfunction fetchGraphQL(series) {\n  return asyncFetch(QUERY_API_ENDPOINT, {\n    method: \"POST\",\n    headers: { \"mb-api-key\": \"anon\", \"x-hasura-role\": electionContract },\n    body: JSON.stringify({\n      query: `\n        query MyQuery {\n          nft_tokens(\n            where: {\n              nft_contract_id: {\n                _eq: \"mint.sharddog.near\"\n              },\n              token_id: {_regex: \"^${series}:\"},\n              owner: {_eq: \"${currentUser}\"}}\n            order_by: {minted_timestamp: asc}\n          ) {\n            last_transfer_timestamp\n          }\n        }\n      `,\n      variables: {},\n      operationName: \"MyQuery\",\n    }),\n  });\n}\n\nconst processNFTAvailability = (result, key) => {\n  if (result.status === 200) {\n    let data = result.body.data;\n    if (data) {\n      const tokens = data.nft_tokens;\n\n      State.update({\n        [key]: tokens.length > 0 && tokens[0].last_transfer_timestamp === null,\n      });\n    }\n  }\n};\n\nconst myVotesForHouse = () => myVotes.filter((vote) => vote.house === typ);\nconst isVisible = () =>\n  myVotesForHouse().length > 0 || state.winnerIds.length > 0;\n\nState.init({\n  reload: true,\n  loading: false,\n  acceptedPolicy: false,\n  hasVotedOnAllProposals: false,\n  availableVotes: seats - myVotesForHouse().length,\n  selected: null,\n  bookmarked: [],\n  tosAgreementInput: false,\n  tosAgreement: false,\n  selectedCandidates: [],\n  voters: [],\n  candidates: nearIdsWithName,\n  filter: {\n    bookmark: false,\n    candidates: false,\n    votes: false,\n    my_votes: false,\n  },\n  filterOption: \"\",\n  showToSModal: false,\n  bountyProgramModal: false,\n  showReviewModal: false,\n  blacklistedModal: true,\n\n  showMintPolicyModal: false,\n  showMintIVotedModal: false,\n  hasPolicyNFT: null,\n  hasIVotedNFT: null,\n  winnerIds: [],\n});\n\nconst winnerIds = Near.view(electionContract, \"winners_by_proposal\", {\n  prop_id: props.id,\n});\n\nif (state.reload) {\n  const hasVotedOnAllProposals = Near.view(\n    electionContract,\n    \"has_voted_on_all_proposals\",\n    { user: currentUser }\n  );\n\n  const acceptedPolicy = Near.view(electionContract, \"accepted_policy\", {\n    user: currentUser,\n  });\n\n  State.update({\n    acceptedPolicy: acceptedPolicy === POLICY_HASH ?? acceptedPolicy,\n    winnerIds: winnerIds ?? state.winnerIds,\n    candidates: filteredCandidates(),\n    hasVotedOnAllProposals,\n  });\n\n  handleStateTransition();\n  loadSocialDBData();\n}\n\nconst UserLink = ({ title, src, selected, winnerId, name }) => (\n  <div className=\"d-flex mr-3\">\n    <StyledLink href={src} target=\"_blank\">\n      <Widget\n        src=\"mob.near/widget/Profile.ShortInlineBlock\"\n        props={{ accountId: title, profile: { name }, tooltip: false }}\n      />\n    </StyledLink>\n    <UserIcons\n      selected={selected}\n      winnerId={winnerId}\n      className=\"d-flex align-items-center\"\n    >\n      <Icon className=\"bi bi-arrow-up-right\" />\n      {state.winnerIds.includes(title) && (\n        <Winner className=\"bi bi-trophy-fill p-1 text-success\" />\n      )}\n    </UserIcons>\n  </div>\n);\n\nconst Loader = () => (\n  <span\n    className=\"spinner-grow spinner-grow-sm me-1\"\n    role=\"status\"\n    aria-hidden=\"true\"\n  />\n);\n\nconst CandidateItem = ({ candidateId, votes, name }) => (\n  <div>\n    <CandidateItemRow\n      className=\"d-flex align-items-center justify-content-between\"\n      selected={state.selected === candidateId}\n      filtered={candidateFilterId.includes(candidateId)}\n      winnerId={state.winnerIds.includes(candidateId)}\n    >\n      <div className=\"d-flex w-100 align-items-center\">\n        {isVisible() && (\n          <Expand>\n            <i\n              className={`${\n                state.selected === candidateId\n                  ? \"bi bi-chevron-down\"\n                  : \"bi bi-chevron-right\"\n              }`}\n              onClick={(e) =>\n                State.update({\n                  selected: state.selected === candidateId ? null : candidateId,\n                  reload: false,\n                })\n              }\n            />\n          </Expand>\n        )}\n\n        {iahToken && (\n          <Bookmark\n            selected={state.selected === candidateId}\n            winnerId={state.winnerIds.includes(candidateId)}\n          >\n            {state.loading === candidateId ? (\n              <Loader />\n            ) : (\n              <i\n                id=\"bookmark\"\n                onClick={() => handleBookmarkCandidate(candidateId)}\n                className={`bi ${\n                  state.bookmarked.includes(candidateId)\n                    ? \"bi-bookmark-fill\"\n                    : \"bi-bookmark\"\n                }`}\n              />\n            )}\n          </Bookmark>\n        )}\n        <div className=\"d-flex align-items-center\">\n          <div className=\"d-flex justify-items-center\">\n            <UserLink\n              name={name}\n              selected={state.selected === candidateId}\n              winnerId={state.winnerIds.includes(candidateId)}\n              src={`https://near.org/near/widget/ProfilePage?accountId=${candidateId}`}\n              title={candidateId}\n            />\n          </div>\n        </div>\n      </div>\n      <InfoRow\n        className={`d-flex w-100 align-items-center ${\n          iahToken ? \"justify-content-center\" : \"justify-content-end\"\n        }`}\n      >\n        <NominationLink>\n          <Widget\n            src={widgets.styledComponents}\n            props={{\n              Link: {\n                size: \"sm\",\n                className: state.winnerIds.includes(candidateId)\n                  ? \"secondary success\"\n                  : \"secondary dark\",\n                text: \"Nomination\",\n                icon: <i className=\"bi bi-box-arrow-up-right\" />,\n                href: `https://near.org/nomination.ndctools.near/widget/NDC.Nomination.Candidate.Page?house=${typ}&accountId=${candidateId}`,\n                inverse: state.selected === candidateId,\n              },\n            }}\n          />\n        </NominationLink>\n        <NominationLinkMobile>\n          <Widget\n            src={widgets.styledComponents}\n            props={{\n              Link: {\n                size: \"sm\",\n                className: state.winnerIds.includes(candidateId)\n                  ? \"secondary success\"\n                  : \"secondary dark\",\n                text: \"\",\n                icon: <i className=\"bi bi-box-arrow-up-right\" />,\n                href: `https://near.org/nomination.ndctools.near/widget/NDC.Nomination.Candidate.Page?house=HouseOfMerit&accountId=${candidateId}`,\n                inverse: state.selected === candidateId,\n              },\n            }}\n          />\n        </NominationLinkMobile>\n        {isVisible() && <Votes>{votes}</Votes>}\n        {iahToken && (\n          <Votes>\n            <input\n              id=\"input\"\n              disabled={\n                alreadyVotedForHouse() ||\n                blacklisted ||\n                electionStatus !== \"ONGOING\"\n              }\n              onClick={() => handleSelectCandidate(candidateId)}\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              checked={\n                state.selectedCandidates.includes(candidateId) ||\n                alreadyVoted(candidateId)\n              }\n            />\n          </Votes>\n        )}\n      </InfoRow>\n    </CandidateItemRow>\n    {state.selected === candidateId && isVisible() && (\n      <Widget\n        src={widgets.voters}\n        props={{ candidateId, electionContract, iahToken, ids }}\n      />\n    )}\n  </div>\n);\n\nconst Filters = () => (\n  <FilterRow className=\"d-flex align-items-center justify-content-between\">\n    <div className=\"d-flex align-items-center w-100\">\n      {isVisible() && <ExpandFilter />}\n      {iahToken && (\n        <BookmarkFilter\n          role=\"button\"\n          className=\"text-secondary\"\n          onClick={() => handleFilter({ bookmark: true })}\n        >\n          <small>Bookmark</small>\n          <i\n            className={`bi ${\n              state.filter.bookmark ? \"bi-funnel-fill\" : \"bi-funnel\"\n            }`}\n          />\n        </BookmarkFilter>\n      )}\n      <Candidates\n        className=\"text-secondary\"\n        onClick={() => handleFilter({ candidates: true })}\n      >\n        <small>Candidate</small>\n        <i\n          className={`bi ${\n            state.filter.candidates ? \"bi-arrow-down\" : \"bi-arrow-up\"\n          }`}\n        />\n      </Candidates>\n    </div>\n    <div className=\"d-flex w-100 align-items-center justify-content-end gap-1\">\n      <Nomination className=\"text-secondary text-start text-md-start\">\n        <small>Nomination</small>\n      </Nomination>\n      {isVisible() && (\n        <VotesFilter\n          role=\"button\"\n          className=\"text-secondary d-flex align-items-center\"\n          onClick={() => handleFilter({ votes: true })}\n        >\n          <small>Total votes</small>\n          <i\n            className={`bi ${\n              state.filter.votes ? \"bi-arrow-down\" : \"bi-arrow-up\"\n            }`}\n          />\n        </VotesFilter>\n      )}\n      {iahToken && (\n        <VotesFilter\n          role=\"button\"\n          className=\"text-secondary d-flex align-items-center\"\n          onClick={() => handleFilter({ my_votes: true })}\n        >\n          <small>My votes</small>\n          <i\n            className={`bi ${\n              state.filter.my_votes ? \"bi-funnel-fill\" : \"bi-funnel\"\n            }`}\n          />\n        </VotesFilter>\n      )}\n    </div>\n  </FilterRow>\n);\n\nconst ALink = ({ title, href }) => (\n  <a href={href} target={\"_blank\"} rel={\"noopener\"}>\n    {title}\n  </a>\n);\n\nreturn (\n  <>\n    {state.showReviewModal && (\n      <Widget\n        src={widgets.modal}\n        props={{\n          title: (\n            <div>\n              <img src=\"https://bafkreidmuyeawyqduaotd27jozw5czdrm7t7w5hlcx5nfjzjjxxzvyhkyi.ipfs.nftstorage.link/\" />\n              <div className=\"mt-4\">Election results are under review</div>\n            </div>\n          ),\n          description:\n            \"Election results are under review by Election integrity Councils. Please wait it may take a few days\",\n          Button: {\n            title: \"I understand\",\n            onCancel: () =>\n              State.update({ showReviewModal: false, reload: false }),\n            onSubmit: () =>\n              State.update({ showReviewModal: false, reload: false }),\n          },\n        }}\n      />\n    )}\n    {blacklisted && state.blacklistedModal && (\n      <Widget\n        src={widgets.modal}\n        props={{\n          title: (\n            <div>\n              <img src=\"https://bafkreignre4f27jsdgxt25pgnenjyqfw55pkhtnu5gkv7vhex3ttv45pbe.ipfs.nftstorage.link\" />\n              <div className=\"mt-4\">You are on the election blacklist. </div>\n            </div>\n          ),\n          description: (\n            <>\n              The community has voted to block blacklisted accounts from voting\n              in the NDC general election. You have been blacklisted due\n              previously violating the\n              <ALink title=\"Fair Voting Policy.\" href={FAIR_POLICY_DOC} />.\n            </>\n          ),\n          Button: {\n            title: \"I understand\",\n            onCancel: () => State.update({ blacklistedModal: false }),\n            onSubmit: () => State.update({ blacklistedModal: false }),\n          },\n          SecondaryButton: {\n            type: \"Link\",\n            title: \"Appeal the Decision\",\n            href: BLACKLIST_VERIFY_LINK,\n          },\n        }}\n      />\n    )}\n    {state.showToSModal && (\n      <Widget\n        src={widgets.modal}\n        props={{\n          title: (\n            <div>\n              <img src=\"https://bafkreidmuyeawyqduaotd27jozw5czdrm7t7w5hlcx5nfjzjjxxzvyhkyi.ipfs.nftstorage.link/\" />\n              <div className=\"mt-4\">\n                Before you vote, please review the Fair Voting Policy.\n              </div>\n            </div>\n          ),\n          description: (\n            <>\n              <div className=\"mt-4\">\n                Please make sure to read and understand the{\" \"}\n                <ALink title=\"Fair Voting Policy.\" href={FAIR_POLICY_DOC} />\n                which outlines the responsibilities of each voter.\n              </div>\n            </>\n          ),\n          content: (\n            <Section className=\"d-flex justify-content-center w-100 my-4\">\n              <input\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                checked={state.tosAgreementInput}\n                onClick={() =>\n                  State.update({ tosAgreementInput: !state.tosAgreementInput })\n                }\n              />\n              I agree with{\" \"}\n              <ALink title=\"Fair Voting Policy.\" href={FAIR_POLICY_DOC} />\n            </Section>\n          ),\n          Button: {\n            title: state.loading ? (\n              <Loader />\n            ) : (\n              <>Agree to Fair Voting Policy</>\n            ),\n            disabled: !state.tosAgreementInput,\n            onCancel: () => State.update({ showToSModal: false }),\n            onSubmit: handleAcceptToS,\n          },\n        }}\n      />\n    )}\n    {state.showMintPolicyModal && (\n      <Widget\n        src={widgets.modal}\n        props={{\n          title: \"Before you vote, mint Fair Voting Policy NFT.\",\n          description: (\n            <>\n              <img width={300} src={FAIR_POLICY_NFT} />\n              <div className=\"mt-4 mb-4\">\n                Please make sure to read and understand the{\" \"}\n                <ALink title=\"Fair Voting Policy.\" href={FAIR_POLICY_DOC} />\n                which outlines the responsibilities of each voter.\n              </div>\n            </>\n          ),\n          Button: {\n            type: \"Link\",\n            title: \"Mint Fair Voting NFT\",\n            onCancel: () =>\n              State.update({ showMintPolicyModal: false, reload: false }),\n            href: MINT_VOTING_POLICY_NFT,\n            doNotOpenNew: true,\n          },\n        }}\n      />\n    )}\n    {state.bountyProgramModal && (\n      <Widget\n        src={widgets.modal}\n        props={{\n          title: (\n            <div>\n              <img src=\"https://bafkreidmuyeawyqduaotd27jozw5czdrm7t7w5hlcx5nfjzjjxxzvyhkyi.ipfs.nftstorage.link/\" />\n              <div className=\"mt-4\">\n                {greylisted ? (\n                  <>Additional Verification Required.</>\n                ) : (\n                  <>You are about to cast your votes.</>\n                )}\n              </div>\n            </div>\n          ),\n          description: (\n            <Rules>\n              <Rule className=\"d-flex gap-2\">\n                <h3>1</h3>\n                <p className=\"text-secondary text-start\">\n                  Don't sell your vote and risk being banned from governance.\n                  Instead report bad actors and claim a bounty up to 2,500 NEAR.\n                  Learn more about{\" \"}\n                  <ALink\n                    title=\"Whistleblower Bounty Program\"\n                    href=\"https://medium.com/@neardigitalcollective/introducing-ndc-whistleblower-bounty-program-d4fe1b9fc5a0\"\n                  />\n                </p>\n              </Rule>\n              <Rule className=\"d-flex gap-2\">\n                <h3>2</h3>\n                <p className=\"text-secondary text-start\">\n                  A bond of <b>{greylisted ? MAX_BOND : MIN_BOND} NEAR</b> is\n                  required to vote. If you are a fair voter, this bond will\n                  returned to you after the election results are reviewed and\n                  rectified.\n                </p>\n              </Rule>\n              <Rule className=\"d-flex gap-2\">\n                <h3>3</h3>\n                <p className=\"text-secondary text-start\">\n                  You votes <b>cannot</b> be changed. You can only cast{\" \"}\n                  <b>once</b> per house.\n                </p>\n              </Rule>\n              {greylisted && (\n                <GraylistedAlert className=\"p-3 mb-4 rounded\">\n                  <b>Voters without reputation need to be verified</b> by the\n                  Election Integrity Council or place a substantial bond to\n                  vote. If you are a fair voter, this bond will be returned to\n                  you once the election results are reviewed and ratified.\n                </GraylistedAlert>\n              )}\n            </Rules>\n          ),\n          Button: {\n            title: `Cast ${\n              state.selectedCandidates.length || \"\"\n            } / ${seats} Vote${\n              state.selectedCandidates.length === 1 ? \"\" : \"s\"\n            }`,\n            disabled:\n              state.selectedCandidates.length === 0 || alreadyVotedForHouse(),\n            onCancel: () =>\n              State.update({ bountyProgramModal: false, reload: false }),\n            onSubmit: handleVote,\n          },\n          SecondaryButton: {\n            type: greylisted ? \"Link\" : \"Button\",\n            title: greylisted ? \"Apply to Verify\" : \"Cancel\",\n            href: GREYLIST_VERIFY_LINK,\n            onSubmit: () =>\n              State.update({ bountyProgramModal: false, reload: false }),\n          },\n          footer: state.selectedCandidates.length < seats && (\n            <div class=\"w-100 pt-2 text-center\">\n              <VotingAlert>\n                <i class=\"bi bi-exclamation-circle mr-2\" />\n                Warning! You'll loose{\" \"}\n                {state.availableVotes -\n                  (state.selectedCandidates.length || 0)}{\" \"}\n                votes and don't have ability to vote again in current house!\n              </VotingAlert>\n            </div>\n          ),\n        }}\n      />\n    )}\n    {state.showMintIVotedModal && (\n      <Widget\n        src={widgets.modal}\n        props={{\n          title: \"Congratulations! Mint \u201cI Voted\u201d NFT\",\n          description: (\n            <div>\n              <img width={300} src={I_VOTED_NFT} />\n              <div className=\"mt-4 mb-4\">\n                Celebrate voting in the inaugural NEAR election and mint your \u201cI\n                Voted\u201d NFT! \ud83c\udf89\n              </div>\n            </div>\n          ),\n          Button: {\n            type: \"Link\",\n            title: \"Mint I voted NFT\",\n            onCancel: () =>\n              State.update({ showMintIVotedModal: false, reload: false }),\n            href: MINT_I_VOTED_NFT,\n            doNotOpenNew: true,\n          },\n          SecondaryButton: {\n            type: \"Link\",\n            title: \"Tweet I Voted\",\n            href: SHARE_LINK,\n          },\n        }}\n      />\n    )}\n\n    <Container>\n      <h2>{housesMapping[typ]}</h2>\n      {typ === \"SetupPackage\" ? (\n        <Widget src={widgets.budget} />\n      ) : (\n        <>\n          <small className=\"text-secondary\">{result.length} Candidates</small>\n          {state.candidates.length > 0 ? (\n            <>\n              <Filters />\n              {console.log(state.candidates)}\n              <CandidatesContainer>\n                {state.candidates.map(([candidateId, votes, name], index) => (\n                  <CandidateItem\n                    candidateId={candidateId}\n                    votes={votes}\n                    name={name}\n                    key={index}\n                  />\n                ))}\n              </CandidatesContainer>\n              {candidateFilterId && (\n                <div className=\"d-flex p-2 justify-content-center align-items-center\">\n                  <Widget\n                    src={widgets.styledComponents}\n                    props={{\n                      Link: {\n                        className: \"primary dark\",\n                        text: \"Show All Candidates\",\n                        doNotOpenNew: true,\n                        href: `https://near.org/election.ndctools.near/widget/NDC.Elections.Main?house=${id}`,\n                      },\n                    }}\n                  />\n                </div>\n              )}\n            </>\n          ) : (\n            <div className=\"d-flex p-5 justify-content-center align-items-center flex-column gap-2\">\n              <span>No candidates found.</span>\n              {state.filterOption && (\n                <Widget\n                  src={widgets.styledComponents}\n                  props={{\n                    Button: {\n                      className: \"secondary dark\",\n                      text: \"Clear Filters\",\n                      onClick: () =>\n                        State.update({\n                          filterOption: \"\",\n                          filter: {\n                            bookmark: false,\n                            candidates: false,\n                            votes: false,\n                            my_votes: false,\n                          },\n                        }),\n                    },\n                  }}\n                />\n              )}\n            </div>\n          )}\n        </>\n      )}\n      <div>\n        {iahToken && (\n          <Widget\n            src={widgets.castVotes}\n            props={{\n              ...props,\n              ...state,\n              handleCast,\n              handleVote,\n              handleResetSelection,\n              handleSelectCandidate,\n            }}\n          />\n        )}\n      </div>\n    </Container>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/rubycop.near/widget/NDC.Elections.Candidates", "fact_widget_deployments_id": "9c03be106c24003de219429f6ddc0599", "inserted_timestamp": "2023-09-19T12:26:55.953Z", "modified_timestamp": "2023-09-19T12:26:55.953Z", "__row_index": 21}