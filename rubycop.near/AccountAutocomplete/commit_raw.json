{"tx_hash": "8Df8Pv5JtPr55xc6ZszgWMqg7j9LHdYWysEPQ4WYht9N", "action_id_social": "C4MomoXPnsKFQtRvjFRjmtJSBfRaEN6kDwK91PTF2db2-0-widget", "block_id": 98664520, "block_timestamp": "2023-08-12T21:41:13.408Z", "signer_id": "rubycop.near", "widget_name": "AccountAutocomplete", "source_code": "if (!context.accountId || !props.term) return <></>;\n\nlet results = [];\nconst profilesData = Social.get(\"*/profile/name\", \"final\") || {};\nconst followingData = Social.get(\n  `${context.accountId}/graph/follow/**`,\n  \"final\"\n);\n\nif (!profilesData || !followingData) return <></>;\n\nconst profiles = Object.entries(profilesData);\nconst term = (props.term || \"\").replace(/\\W/g, \"\").toLowerCase();\nconst limit = 5;\n\nfor (let i = 0; i < profiles.length; i++) {\n  let score = 0;\n  const accountId = profiles[i][0];\n  const accountIdSearch = profiles[i][0].replace(/\\W/g, \"\").toLowerCase();\n  const nameSearch = (profiles[i][1]?.profile?.name || \"\")\n    .replace(/\\W/g, \"\")\n    .toLowerCase();\n  const accountIdSearchIndex = accountIdSearch.indexOf(term);\n  const nameSearchIndex = nameSearch.indexOf(term);\n\n  if (accountIdSearchIndex > -1 || nameSearchIndex > -1) {\n    score += 10;\n\n    if (accountIdSearchIndex === 0) {\n      score += 10;\n    }\n    if (nameSearchIndex === 0) {\n      score += 10;\n    }\n    if (followingData[accountId] === \"\") {\n      score += 30;\n    }\n\n    results.push({\n      accountId,\n      score,\n    });\n  }\n}\n\nresults.sort((a, b) => b.score - a.score);\nresults = results.slice(0, limit);\n\nfunction onResultClick(id) {\n  props.onSelect && props.onSelect(id);\n}\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  &::before {\n      content: '';\n      display: block;\n      position: absolute;\n      right: 0;\n      width: 6px;\n      height: 100%;\n      background: #f8f8f9;\n      z-index: 10;\n  }\n`;\n\nconst Scroller = styled.div`\n  position: relative;\n  display: flex;\n  padding: 6px;\n  gap: 6px;\n  overflow: auto;\n  scroll-behavior: smooth;\n  align-items: center;\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n\n  > * {\n    max-width: 200px;\n    text-align: left;\n    flex-grow: 0;\n    flex-shrink: 0;\n  }\n`;\n\nconst Selection = styled.button`\n  width: 150px;\n  font-size: 12px;\n  background: transparent;\n  border: 1px solid rgb(208, 214, 217);\n  \n  &:hover {\n    border: 1px solid #4BA6EE;\n    background: #d4e4f461;\n  }\n`;\n\nconst CloseButton = styled.button`\n    background: none;\n    border: none;\n    display: block;\n    padding: 5px;\n    color #687076;\n    transition: all 200ms;\n\n    &:hover {\n        color: #000;\n    }\n`;\n\nif (results.length === 0) return <></>;\n\nreturn (\n  <Wrapper>\n    <Scroller>\n      <CloseButton tabIndex={-1} type=\"button\" onClick={props.onClose}>\n        <i className=\"bi bi-x-lg\" />\n      </CloseButton>\n\n      {results.map((result) => {\n        return (\n          <Selection\n            className=\"btn\"\n            key={result.accountId}\n            onClick={() => onResultClick(result.accountId)}\n          >\n            <Widget\n              key={result.accountId}\n              src=\"mob.near/widget/Profile.ShortInlineBlock\"\n              props={{\n                accountId: result.accountId,\n              }}\n            />\n          </Selection>\n        );\n      })}\n    </Scroller>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/rubycop.near/widget/AccountAutocomplete", "fact_widget_deployments_id": "a3afb8c3023bab92fbaa444bfb4cf7bb", "inserted_timestamp": "2023-08-12T22:41:34.960Z", "modified_timestamp": "2023-08-12T22:41:34.960Z", "__row_index": 3}