{"tx_hash": "5LyvHZF1w2GZgTwN1HRwSkySkQhQzNcJhnv3m8awqkJm", "action_id_social": "53Gc15HnC3ucWKVEeqdkkBCL8iyEEnek8bD1Cohs1R1R-0-widget", "block_id": 96556404, "block_timestamp": "2023-07-15T20:43:21.146Z", "signer_id": "rubycop.near", "widget_name": "NDC.Nomination.Compose", "source_code": "const { handleClose } = props;\n\nlet Nominationcontract = \"nominations-v1.gwg-testing.near\";\nlet Socialcontract = \"social.near\";\n\nlet profileInfo = Social.getr(`${context.accountId}/profile`);\n\nlet imageIsNFT = profileInfo.image.nft ? true : false;\nlet imageIsIpfs_cid = profileInfo.image.ipfs_cid ? true : false;\nlet imageIsUrl = profileInfo.image.url ? true : false;\nlet RealProfileImageAsURL = \"\";\n\nconst widgets = {\n  button: \"rubycop.near/widget/NDC.StyledComponents\",\n};\n\n//Recover image from NFT\nif (imageIsNFT) {\n  let nftData = profileInfo.image.nft;\n  const getNftCid = Near.view(nftData.contractId, \"nft_token\", {\n    token_id: nftData.tokenId,\n  });\n\n  RealProfileImageAsURL =\n    \"https://nativonft.mypinata.cloud/ipfs/\" + getNftCid.metadata.media;\n  console.log(\"was nft\", RealProfileImageAsURL);\n}\n//Recover image from IPFS_CID\n\nif (imageIsIpfs_cid) {\n  RealProfileImageAsURL =\n    \"https://nativonft.mypinata.cloud/ipfs/\" + profileInfo.image.ipfs_cid;\n  console.log(\"was ipfs\", RealProfileImageAsURL);\n}\n//Recover image from URL\n\nif (imageIsUrl) {\n  RealProfileImageAsURL = profileInfo.image.url;\n  console.log(\"was url\", RealProfileImageAsURL);\n}\n// State\nState.init({\n  theme,\n\n  img: {\n    uploading: \"false\",\n    url: RealProfileImageAsURL,\n    name: RealProfileImageAsURL ? \"Uploaded from Social Profile\" : \"\",\n  },\n  name: profileInfo.name ? profileInfo.name : \"\",\n  profileAccount: context.accountId ? \"@\" + context.accountId : \"\",\n  house_intended: \"\",\n  HAYInvolve: \"\",\n  WIYStrategy: \"\",\n  Key_Issue_1: \"\",\n  Key_Issue_2: \"\",\n  Key_Issue_3: \"\",\n  addition_platform: \"\",\n\n  afiliation: [\n    {\n      company_name: \"\",\n      start_date: \"\",\n      end_date: \"\",\n      role: \"\",\n    },\n  ],\n  agreement: \"false\",\n  tags: \"\",\n  error_msg: \"\",\n});\n\nconst CardStyled = styled.div`\n  width: 70%;\n  height: 100%;\n  background: #f8f8f9;\n  gap: 10px;\n  border-radius: 10px;\n  margin: 0 auto;\n  overflow-y: scroll;\n  @media only screen and (max-width: 480px) {\n    width: 92%;\n  }\n`;\n\nconst CardForm = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 0px;\n  width: 100%;\n  height: auto;\n`;\n\nconst H1styled = styled.h1`\n  margin-left: 16px;\n  margin-top: 16px;\n  margin-right: auto;\n  width: 100%;\n  height: 19px;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 120%;\n  color: #000000;\n`;\n\nconst Submitcontainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 16px;\n  @media only screen and (max-width: 480px) {\n    margin-top: 10px;\n  }\n`;\n\nconst HiddeableWidget = styled.div`\n  display: none;\n  @media (max-width: 480px) {\n    display: block;\n  }\n`;\n\nconst Modal = styled.div`\n  position: fixed;\n  z-index: 101;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100vh;\n  background: rgba(128, 128, 128, 0.65);\n`;\n\nconst ComponentWrapper = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 80%;\n  z-index: 100;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nconst validatedInputs = () => {\n  const {\n    img,\n    name,\n    profileAccount,\n    house_intended,\n    HAYInvolve,\n    WIYStrategy,\n    Key_Issue_1,\n    Key_Issue_2,\n    Key_Issue_3,\n    afiliation,\n    agreement,\n    tags,\n  } = state;\n\n  const isEmpty = (str) => str.trim() === \"\";\n  const isFalse = (check) => check === \"false\";\n  let isValid = true;\n  if (img.cid === null) {\n    State.update({ error_msg: \"Pic an image\" });\n    isValid = false;\n  }\n  if (isEmpty(name)) {\n    State.update({ error_msg: \"Fill the name\" });\n\n    isValid = false;\n  }\n  if (isEmpty(profileAccount)) {\n    State.update({ error_msg: \"Fill the Profile Account\" });\n\n    isValid = false;\n  }\n  if (isEmpty(house_intended)) {\n    State.update({ error_msg: \"Select a house\" });\n\n    isValid = false;\n  }\n  if (isEmpty(HAYInvolve)) {\n    State.update({ error_msg: \"How are you involved?\" });\n\n    isValid = false;\n  }\n  if (isEmpty(WIYStrategy)) {\n    State.update({ error_msg: \"What is your strategy?\" });\n\n    isValid = false;\n  }\n  if (isEmpty(Key_Issue_1)) {\n    State.update({ error_msg: \"Fill the key issued 1\" });\n\n    isValid = false;\n  }\n  if (isEmpty(Key_Issue_1)) {\n    State.update({ error_msg: \"Fill the key issued 1\" });\n\n    isValid = false;\n  }\n  if (isEmpty(Key_Issue_2)) {\n    State.update({ error_msg: \"Fill the key issued 2\" });\n\n    isValid = false;\n  }\n  if (isEmpty(Key_Issue_3)) {\n    State.update({ error_msg: \"Fill the key issued 3\" });\n\n    isValid = false;\n  }\n  if (tags.split(\",\").length == 0) {\n    State.update({ error_msg: \"Write a tag\" });\n\n    isValid = false;\n  }\n  if (isFalse(agreement)) {\n    State.update({ error_msg: \"Accept the declaration\" });\n\n    isValid = false;\n  }\n  if (afiliation.length == 0) {\n    State.update({ error_msg: \"Add a affiliation\" });\n    isValid = false;\n  }\n\n  if (afiliation.length > 0) {\n    afiliation.forEach((element) => {\n      if (isEmpty(element.company_name)) {\n        State.update({ error_msg: \"Fill the company name\" });\n\n        isValid = false;\n      }\n      if (isEmpty(element.start_date)) {\n        State.update({ error_msg: \"Select a start date\" });\n\n        isValid = false;\n      }\n      if (isEmpty(element.end_date)) {\n        State.update({ error_msg: \"Select a end date\" });\n\n        isValid = false;\n      }\n      if (isEmpty(element.role)) {\n        State.update({ error_msg: \"Write your role\" });\n\n        isValid = false;\n      }\n    });\n  } else {\n    State.update({ error_msg: null });\n  }\n  return isValid;\n};\n\nconst uploadFileUpdateState = (body) => {\n  asyncFetch(\"https://ipfs.near.social/add\", {\n    method: \"POST\",\n    headers: { Accept: \"application/json\" },\n    body,\n  }).then(async (res) => {\n    const _cid = res.body.cid;\n    const _name = body.name;\n    State.update({ img: { uploading: \"true\", cid: _cid, name: _name } });\n  });\n};\n\nconst filesOnChange = (files) => {\n  if (files) {\n    State.update({ error_msg: null });\n    uploadFileUpdateState(files[0]);\n  }\n};\n\nconst handleName = (item) => {\n  State.update({ name: item, error_msg: null });\n};\nconst handleProfile = (item) => {\n  State.update({ profileAccount: item, error_msg: null });\n};\nconst handleHouse = (item) => {\n  console.log(item);\n  if (item === \"HouseOfMerit\") {\n    console.log(\"HouseOfMerit\");\n    Storage.privateSet(\"Houseselected\", 1);\n  }\n  if (item === \"CouncilOfAdvisors\") {\n    console.log(\"CouncilOfAdvisors\");\n\n    Storage.privateSet(\"Houseselected\", 2);\n  }\n  if (item === \"TransparencyCommission\") {\n    console.log(\"TransparencyCommission\");\n\n    Storage.privateSet(\"Houseselected\", 3);\n  }\n  console.log(Storage.privateGet(\"Houseselected\"));\n\n  State.update({ house_intended: item, error_msg: null });\n};\nconst handleHAYInvolve = (item) => {\n  console.log(item);\n  State.update({\n    HAYInvolve: item.substring(0, 2000),\n    error_msg: null,\n  });\n  return;\n};\nconst handleWIYStrategy = (item) => {\n  State.update({\n    WIYStrategy: item.substring(0, 2000),\n    error_msg: null,\n  });\n  return;\n};\nconst handleKey_Issue_1 = (item) => {\n  State.update({\n    Key_Issue_1: item.substring(0, 2000),\n    error_msg: null,\n  });\n  return;\n};\nconst handleKey_Issue_2 = (item) => {\n  State.update({\n    Key_Issue_2: item.substring(0, 2000),\n    error_msg: null,\n  });\n};\nconst handleKey_Issue_3 = (item) => {\n  State.update({\n    Key_Issue_3: item.substring(0, 2000),\n    error_msg: null,\n  });\n  return;\n};\nconst handleAditional = (item) => {\n  State.update({\n    addition_platform: item.substring(0, 2000),\n    error_msg: null,\n  });\n  return;\n};\nconst addFields = () => {\n  var temp = state.afiliation;\n  let object = {\n    company_name: \"\",\n    start_date: \"\",\n    end_date: \"\",\n    role: \"\",\n  };\n\n  if (temp.length === 6) {\n    return;\n  } else {\n    temp.push(object);\n    State.update({ afiliation: temp, error_msg: null });\n  }\n};\nconst removeField = (index) => {\n  let data = state.afiliation;\n\n  let newData = data.splice(index, 1);\n\n  State.update({ afiliation: data });\n  State.update({ error_msg: null });\n};\nconst handleAFFCompanyName = (params) => {\n  let data = state.afiliation;\n\n  data[params.index].company_name = params.event.target.value.substring(0, 500);\n  State.update({ afiliation: data, error_msg: null });\n  return;\n};\nconst handleAFFStartdate = (params) => {\n  let data = state.afiliation;\n\n  data[params.index].start_date = params.event.target.value;\n  State.update({ afiliation: data, error_msg: null });\n};\nconst handleAFFEnddate = (params) => {\n  let data = state.afiliation;\n\n  data[params.index].end_date = params.event.target.value;\n  State.update({ afiliation: data, error_msg: null });\n};\nconst handleAFFRole = (params) => {\n  let data = state.afiliation;\n  data[params.index].role = params.event.target.value.substring(0, 500);\n  State.update({ afiliation: data, error_msg: null });\n  return;\n};\nconst handleTags = (item) => {\n  State.update({\n    tags: item.target.value.substring(0, 500),\n    error_msg: null,\n  });\n};\nconst handleDeclaration = (item) => {\n  State.update({ agreement: item.target.checked.toString(), error_msg: null });\n};\n\nconst handleNominate = () => {\n  //Validate the Data outPut\n  if (validatedInputs()) {\n    //Create a copy\n    let newstate = Object.assign({}, state);\n    //modify the affiliations into a string\n    newstate.afiliation = JSON.stringify(newstate.afiliation);\n    //convert all the newstate into a string\n    const stateAsString = JSON.stringify(newstate);\n    //Storage.privateSet(\"SelfNominate_Payload\", state);\n    //prepare a the final structure\n    const data = ` {\"data\":{ \"${context.accountId}\": {\"nominations\":${stateAsString}} }}`;\n\n    //convert the string into and object\n    const SocialArgs = JSON.parse(data);\n\n    // set the payloads for the batch\n    let SelfNominate_Payload = {\n      contractName: Nominationcontract,\n      methodName: \"self_nominate\",\n      args: {\n        house: state.house_intended,\n        comment: context.accountId,\n        link: \"\",\n      },\n      gas: 300000000000000,\n      deposit: 100000000000000000000000,\n    };\n\n    let Social_Payload = {\n      contractName: Socialcontract,\n      methodName: \"set\",\n      args: SocialArgs,\n      gas: 300000000000000,\n      deposit: 100000000000000000000000,\n    };\n\n    // call the methods\n    Near.call([Social_Payload, SelfNominate_Payload]);\n  } else {\n    //The fields are incomplete\n    console.log(\"still invalid\");\n  }\n};\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/rubycop.near/widget/NDC.Nomination.Compose", "fact_widget_deployments_id": "1696ad26a6afe6eda6ed5942bd2aecb0", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 120}