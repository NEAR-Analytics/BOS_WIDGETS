{"tx_hash": "HGxh4AsxBdL79cnRkWKv8Sg29ZNzLUBs75SjHAHAEALN", "action_id_social": "9TqmgZEh5jrPFpR3m2hQuUAuoog3JwAsE8QWtk6bfFT7-0-widget", "block_id": 113429292, "block_timestamp": "2024-02-23T16:05:45.042Z", "signer_id": "dydx4.near", "widget_name": "Index", "source_code": "const defaultChainId = 11155111;\nconst defaultChainName = \"Sepolia testnet\";\n\nconst orderOpen = \"OPEN\";\nconst orderFilled = \"FILLED\";\nconst orderCancelled = \"CANCELED\";\nconst orderPending = \"PENDING\";\n\nif (state === undefined) {\n  State.init({\n    orderSize: \"0.002\",\n    orderPrice: \"2500\",\n    orderMarketId: \"ETH-USD\",\n    orderType: \"MARKET\",\n    nonce: 0,\n    assetMenuOpen: false,\n    orderFilter: orderOpen,\n  });\n\n  // Auto refresh orders and account\n  setInterval(() => {\n    State.update((state) => ({\n      ...state,\n      nonce: state.account ? state.nonce + 1 : state.nonce,\n    }));\n  }, 3000);\n}\n\nconst css = fetch(\n  \"https://plum-dear-manatee-739.mypinata.cloud/ipfs/QmQWyLP4c4XW36yUdx9AV7Ck8Zcqes9z8eX7aevySdYtHW\"\n).body;\n\nif (!css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n${css}\n\n.lds-ring {\n  display: inline-block;\n  position: relative;\n  width: 20px;\n  height: 20px;\n}\n.lds-ring div {\n  box-sizing: border-box;\n  display: block;\n  position: absolute;\n  width: 14px;\n  height: 14px;\n  margin: 1px;\n  border: 1px solid #fff;\n  border-radius: 50%;\n  animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n  border-color: #fff transparent transparent transparent;\n}\n.lds-ring div:nth-child(1) {\n  animation-delay: -0.45s;\n}\n.lds-ring div:nth-child(2) {\n  animation-delay: -0.3s;\n}\n.lds-ring div:nth-child(3) {\n  animation-delay: -0.15s;\n}\n@keyframes lds-ring {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.component, .orders-log {\n    border-color: rgb(74, 74, 99)!important;\n    border-image: none!important;\n}\n\n.order-tabs ul {\n     position: relative;\n  width: fit-content;\n  margin-top: -1px;\n    font-family: \"Lexend\",Helvetica;\n    font-weight: 400;\n    color: transparent;\n    font-size: 14px;\n  color: #818099;  \n  letter-spacing: 0;\n  line-height: normal;\n  white-space: nowrap;\n}\n\n.order-tabs .nav-link {\n    color: #ffffff99;\n    cursor: pointer;\n}\n\n.order-tabs .nav-link.active {\n    color: #101019\n}\n\n.assets-menu {\n  z-index: 10;\n  display: flex;\n  padding: 12px 14px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-end;\n  gap: 12px;\n  position: absolute;\n  right: 23.5px;\n  top: 97px;\n  border-radius: 4px;\n  border: 1px solid #4A4A63;\n  background: rgba(255, 255, 255, 0.10);\n  backdrop-filter: blur(12px);\n  cursor: pointer\n}\n\n.assets-menu-item {\n  color: #FFF;\n  font-family: Inter, Helvetica;\n  font-weight: 400;    \n  font-size: 15px;\n  letter-spacing: 0px;\n  font-size: 15px;\n  font-style: normal;\n  line-height: normal;\n}\n`,\n  });\n}\n\nconst Theme = state.theme;\n\nconst updateOrders = () => {\n  const nonce = state.nonce ?? 0;\n  State.update({ nonce: nonce + 1 });\n};\n\nconst OrderMarket = styled.div`{\n  display: inline-block;\n  min-width: 180px;\n  }`;\nconst OrderSide = styled.div`{\n    min-width: 50px;\n    text-align: center;\n    display: inline-block;\n    border-radius: 0.25rem;\n    letter-spacing: 0.04em;\n    user-select: none;\n    padding: 0.156rem 0.219rem 0.156rem 0.25rem;\n    color: ${(props) =>\n      [\"BUY\", \"LONG\"].includes(props.side) ? \"#21a677\" : \"#e45353\"};\n    background-color: ${(props) =>\n      [\"BUY\", \"LONG\"].includes(props.side) ? \"#3eb68a29\" : \"#d57676a1\"};\n}`;\n\nconst OrderSize = styled.div`{\n    display: inline-block;\n    text-align: center;\n    min-width: 190px;\n    border-radius: 0.25rem;\n    letter-spacing: 0.04em;\n    user-select: none;\n    padding: 0.156rem 0.219rem 0.156rem 0.25rem;\n    color: #757575;\n    background-color: #d1d4dc;\n}`;\n\nconst OrderAction = styled.div`{\n    display: inline;\n    text-align: center;\n    min-width: 190px;\n    border-radius: 0.25rem;\n    letter-spacing: 0.04em;\n    user-select: none;\n    padding: 0.156rem 0.219rem 0.156rem 0.25rem;\n}`;\n\nconst etherProviderEnabled = !!Ethers?.provider();\n\nconst switchNetwork = (chainId) => {\n  if (etherProviderEnabled && chainId) {\n    Ethers.send(\"wallet_switchEthereumChain\", [\n      { chainId: ethers.utils.hexValue(chainId) },\n    ]);\n  }\n};\n\nif (etherProviderEnabled) {\n  Ethers.provider()\n    .send(\"eth_chainId\", [])\n    .then((chainId) => {\n      chainId = parseInt(chainId, 16);\n      if (state.chainId !== chainId) {\n        console.log(\"Set chainId\", chainId);\n        State.update({ chainId });\n      }\n    });\n\n  Ethers.provider()\n    .send(\"eth_requestAccounts\", [])\n    .then((accounts) => {\n      if (accounts.length && state.sender !== accounts[0]) {\n        console.log(\"Set sender\", accounts[0]);\n        State.update({ sender: accounts[0] });\n      }\n    });\n}\n\nif (!state.sender) {\n  return (\n    <div class=\"mb-3\">\n      <Web3Connect connectLabel=\"Connect Web3 Wallet to continue\" />\n    </div>\n  );\n}\n\nconst stripHexPrefix = (input) => {\n  if (input.indexOf(\"0x\") === 0) {\n    return input.slice(2);\n  }\n\n  return input;\n};\n\nconst exportMnemonicAndPrivateKey = (entropy, path) => {\n  const mnemonic = ethers.utils.entropyToMnemonic(entropy);\n  // console.log(\"mnemonic\", mnemonic);\n  const seed = ethers.utils.mnemonicToSeed(mnemonic);\n  const hdNode = ethers.utils.HDNode.fromSeed(seed);\n\n  return {\n    mnemonic,\n    privateKey: hdNode.privateKey,\n    publicKey: hdNode.publicKey,\n  };\n};\n\nconst deriveHDKeyFromEthereumSignature = (signature) => {\n  const buffer = Buffer.from(stripHexPrefix(signature), \"hex\");\n\n  if (buffer.length !== 65) {\n    throw new Error(\"Signature must be 65 bytes\");\n  }\n\n  // Remove the 'v' value by taking only the first 64 bytes of the signature\n  const rsValues = buffer.subarray(0, 64);\n  // Hash the 'r' and 's' values down to 32 bytes (256 bits) using Keccak-256\n  const entropy = ethers.utils.keccak256(rsValues);\n\n  return exportMnemonicAndPrivateKey(entropy);\n};\n\nlet wallet;\n\nconst getWalletFromEvmSignature = (signature) => {\n  console.log(signature);\n  const { mnemonic, privateKey, publicKey } =\n    deriveHDKeyFromEthereumSignature(signature);\n\n  DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\n    prefix: \"dydx\",\n  }).then((_wallet) => {\n    wallet = new DirectSecp256k1HdWallet(mnemonic, {\n      prefix: \"dydx\",\n      seed: _wallet.seed,\n    });\n    console.log(\"derrived wallet\", wallet);\n\n    wallet\n      .getAccounts()\n      .then(([dydx_account]) => {\n        console.log(\"dYdX account derived\", dydx_account);\n        State.update({\n          dydx_account: dydx_account.address,\n          wallet: wallet,\n          mnemonic,\n        });\n        updateOrders();\n      })\n      .catch((err) =>\n        State.update({ is_loading: false, error_msg: JSON.stringify(err) })\n      );\n  });\n};\n\n// console.log(\"state wallet\", state.wallet);\n\nconst apiUrl = \"https://indexer.v4testnet.dydx.exchange/v4\";\nconst accountId = state.dydx_account;\nconst headers = {\n  Accept: \"application/json\",\n};\n\nconst fundAccount = () => {\n  faucetDydx(state.dydx_account, 0)\n    .then((r) => {\n      if (r.status == 202) {\n        console.log(\"fundAccount\", r);\n        loadAccount();\n      } else {\n        State.update({\n          error_msg: JSON.stringify(r),\n        });\n      }\n    })\n    .catch((ex) =>\n      State.update({\n        error_msg: `${state.error_msg}. Error: ${JSON.stringify(ex)}`,\n      })\n    );\n};\n\nconst loadAccount = () => {\n  if (accountId) {\n    asyncFetch(`${apiUrl}/addresses/${accountId}`, { headers })\n      .then((status) => {\n        if (status.ok) {\n          State.update({\n            account: status?.body?.subaccounts[0],\n            all_accounts: status?.body,\n          });\n        } else {\n          State.update({\n            error_msg: \"Account not found. Trying to run faucet\",\n          });\n          fundAccount();\n        }\n      })\n      .catch((err) => {\n        console.log(\"err\", err);\n        State.update({ error_msg: JSON.stringify(err) });\n      });\n  }\n};\n\nconst loadOrders = () => {\n  if (accountId) {\n    asyncFetch(\n      `${apiUrl}/orders?address=${accountId}&subaccountNumber=0&limit=100`,\n      {\n        headers,\n      }\n    )\n      .then((r) => {\n        // console.log(\"orders num\", r?.body.length);\n        State.update({ orders: r?.body });\n      })\n      .catch((err) => State.update({ error_msg: JSON.stringify(err) }));\n  }\n};\n\nfunction getRandomClientId() {\n  let min = 1000000;\n  let max = 99999999;\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst updateMarketPrice = () => {\n  if (state.dydx_account && state.orderMarketId) {\n    const url = `https://indexer.v4testnet.dydx.exchange/v4/perpetualMarkets?ticker=${state.orderMarketId}`;\n    let data = fetch(url);\n    if (data.ok) {\n      let price = data?.body?.markets?.[state.orderMarketId]?.oraclePrice;\n      if (price) {\n        State.update({ orderPrice: price });\n        if (state.userOrderPrice === undefined) {\n          State.update({ userOrderPrice: price });\n        }\n      }\n    }\n  }\n};\n\nlet tokenImage =\n  \"https://plum-dear-manatee-739.mypinata.cloud/ipfs/Qme6bjSGWP8vjXqrXgbjHCNSwrc16cPYTREbo9aL2Uuuok\";\nif (state.orderMarketId == \"BTC-USD\") {\n  tokenImage =\n    \"https://assets.coingecko.com/coins/images/1/standard/bitcoin.png\";\n}\n\nconst getNetwork = () => {\n  let network_config = {\n    env: \"dydx-testnet-4\",\n    indexerConfig: {\n      restEndpoint: \"https://indexer.v4testnet.dydx.exchange\",\n      websocketEndpoint: \"wss://indexer.v4testnet.dydx.exchange\",\n    },\n    validatorConfig: {\n      restEndpoint: \"https://test-dydx.kingnodes.com\",\n      chainId: \"dydx-testnet-4\",\n      denoms: {\n        USDC_DENOM:\n          \"ibc/8E27BA2D5493AF5636760E354E46004562C46AB7EC0CC4C1CA14E9E20E2545B5\",\n        USDC_DECIMALS: 6,\n        USDC_GAS_DENOM: \"uusdc\",\n        CHAINTOKEN_DENOM: \"adv4tnt\",\n        CHAINTOKEN_DECIMALS: 18,\n      },\n      broadcastOptions: {\n        broadcastPollIntervalMs: 3000,\n        broadcastTimeoutMs: 60000,\n      },\n    },\n  };\n\n  return new Network(\n    network_config.env,\n    network_config.indexerConfig,\n    network_config.validatorConfig\n  );\n};\n\nconst cancelUserOrder = (clientId, orderFlags, marketId) => {\n  State.update({ is_loading: true, error_msg: \"\" });\n  let params = {\n    clientId,\n    orderFlags,\n    marketId,\n    goodTilBlock: 0,\n    goodTilTimeInSeconds: 999999,\n  };\n\n  cancelDydxOrder(getNetwork(), state.mnemonic, \"dydx\", 0, params)\n    .then((cancelOrderResp) => {\n      console.log(\"cancelOrderResp resp \", cancelOrderResp);\n      State.update({ is_loading: false });\n      updateOrders();\n    })\n    .catch((err) => State.update({ error_msg: JSON.stringify(err) }));\n};\n\nconst placeUserOrder = (side) => {\n  State.update({ is_loading: true, error_msg: \"\" });\n\n  if (!state.orderMarketId || !state.orderSize || !state.orderType) {\n    State.update({ is_loading: false, error_msg: \"NO DATA\" });\n    return;\n  }\n\n  if (!state.orderPrice && type == \"LIMIT\") {\n    State.update({ is_loading: false, error_msg: \"NO PRICE FOR LIMIT ORDER\" });\n    return;\n  }\n\n  let marketId = state.orderMarketId;\n  let type = state.orderType;\n  let price = Number(state.userOrderPrice);\n  let size = Number(state.orderSize);\n  let clientId = getRandomClientId();\n  let timeInForce = \"GTT\";\n  let execution = \"DEFAULT\";\n  let postOnly = false;\n  let reduceOnly = false;\n\n  let params = {\n    marketId,\n    type,\n    side,\n    price,\n    size,\n    clientId,\n    timeInForce,\n    goodTilTimeInSeconds: 999999,\n    execution,\n    postOnly,\n    reduceOnly,\n    triggerPrice: price,\n  };\n\n  //  console.log(params);\n\n  if (type == \"MARKET\") {\n    getDydxLatestBlockHeight(getNetwork()).then((latestBlockHeight) => {\n      console.log(\"latestBlockHeight\", latestBlockHeight);\n      params.goodTilBlock = latestBlockHeight + 11;\n      placeDydxShortOrder(getNetwork(), state.mnemonic, \"dydx\", 0, params)\n        .then((placeOrderResp) => {\n          console.log(\"placeDydxShortOrder resp \", placeOrderResp);\n          State.update({ is_loading: false, error_msg: \"\" });\n          updateOrders();\n        })\n        .catch((err) =>\n          State.update({ is_loading: false, error_msg: JSON.stringify(err) })\n        );\n    });\n  } else {\n    placeDydxOrder(getNetwork(), state.mnemonic, \"dydx\", 0, params)\n      .then((placeOrderResp) => {\n        console.log(\"placeOrder resp \", placeOrderResp);\n        State.update({ is_loading: false, error_msg: \"\" });\n        updateOrders();\n      })\n      .catch((err) =>\n        State.update({ is_loading: false, error_msg: JSON.stringify(err) })\n      );\n  }\n};\n\nconst isOrderOpen = () => [orderOpen].includes(state.orderFilter);\nconst isOrderFilled = () => [orderFilled].includes(state.orderFilter);\nconst isOrderCancelled = () => [orderCancelled].includes(state.orderFilter);\nconst isOrderPending = () => [orderPending].includes(state.orderFilter);\n\nlet activeAssetIcon = (\n  <span class=\"me-2\">\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"9\"\n      height=\"7\"\n      viewBox=\"0 0 9 7\"\n      fill=\"none\"\n    >\n      <path\n        d=\"M1 3.5L3.5 6L8.5 1\"\n        stroke=\"white\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n    </svg>\n  </span>\n);\n\nconst SignInWithMetamask = () => {\n  const toSign = {\n    domain: {\n      name: \"dYdX V4\",\n      chainId: defaultChainId,\n    },\n    primaryType: \"dYdX\",\n    types: {\n      dYdX: [{ name: \"action\", type: \"string\" }],\n    },\n    message: {\n      action: \"dYdX Chain Onboarding\",\n    },\n  };\n\n  /*return getWalletFromEvmSignature(\n    \"0x0779917cb0d970a483165e49cac6f10baf6ef7fc907f209835874dc678387bac127d1431a6f81e82c193788923a70a90b138dbfd384b941fa91a0dc0d768104a1b\"\n  );*/\n\n  Ethers.provider()\n    .getSigner()\n    ._signTypedData(toSign.domain, { dYdX: toSign.types.dYdX }, toSign.message)\n    .then((signature) => getWalletFromEvmSignature(signature));\n};\n\nif (state.dydx_account == undefined && state.chainId == defaultChainId) {\n  SignInWithMetamask();\n} else {\n  if (!!state.chainId && state.chainId !== defaultChainId) {\n    return (\n      <div>\n        <div>{`Please switch to ${defaultChainName}`}</div>\n        <div>\n          <button onClick={() => switchNetwork(defaultChainId)}>Switch</button>\n        </div>\n      </div>\n    );\n  }\n\n  useEffect(() => {\n    loadAccount();\n  }, [state.account]);\n\n  useEffect(() => {\n    loadOrders();\n    updateMarketPrice();\n  }, [state.nonce]);\n\n  /*if (state?.account?.address) {\n    getDydxAccountBalances(getNetwork(), state?.account?.address).then(\n      (data) => {\n        console.log(\"getDydxAccountBalances\", data);\n      }\n    );\n  }*/\n\n  return (\n    <Theme class=\"mb-5\">\n      <div class=\"dydx-component-not\">\n        <div class=\"container-wrapper\">\n          <div class=\"container\">\n            <div class=\"header\">\n              <img\n                class=\"dydx\"\n                src=\"https://plum-dear-manatee-739.mypinata.cloud/ipfs/QmStvRnpZbR1xxHgduM3diTswqgM9w4WtTJHYt4aN25ukL\"\n              />\n              <div class=\"dydx-account\">{state.dydx_account}</div>\n              <div class=\"balance\">\n                <div class=\"collateral\">\n                  <div class=\"text-wrapper\">Equity</div>\n                  <div class=\"div\">\n                    $\n                    {Number(state.account.equity).toLocaleString(undefined, {\n                      maximumFractionDigits: 2,\n                    })}\n                  </div>\n                </div>\n                <div class=\"collateral\">\n                  <div class=\"text-wrapper\">Free collateral</div>\n                  <div class=\"div\">\n                    $\n                    {Number(state.account.freeCollateral).toLocaleString(\n                      undefined,\n                      { maximumFractionDigits: 2 }\n                    )}\n                  </div>\n                </div>\n                <div class=\"collateral\">\n                  <div class=\"text-wrapper\">{state.orderMarketId}</div>\n                  <div class=\"div\">\n                    $\n                    {Number(state.orderPrice).toLocaleString(undefined, {\n                      maximumFractionDigits: 2,\n                    })}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"content\">\n              <div class=\"component\">\n                <div class=\"heading\">\n                  <img\n                    class=\"img\"\n                    src=\"https://plum-dear-manatee-739.mypinata.cloud/ipfs/QmbEJL2wNjLQ948Sa6fwvoidRWVWULeaXJsFYpNZ9qG9Kh\"\n                  />\n                  <div class=\"title\">Place Order</div>\n                  <div class=\"tab\">\n                    <div\n                      class={\n                        state.orderType == \"LIMIT\"\n                          ? \"active-type\"\n                          : \"inactive-type\"\n                      }\n                      onClick={(e) => State.update({ orderType: \"LIMIT\" })}\n                    >\n                      <div class=\"text-wrapper-2\">Limit</div>\n                    </div>\n                    <div\n                      class={\n                        state.orderType == \"MARKET\"\n                          ? \"active-type\"\n                          : \"inactive-type\"\n                      }\n                      onClick={(e) => State.update({ orderType: \"MARKET\" })}\n                    >\n                      <div class=\"text-wrapper-3\">Market</div>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"heading\">\n                  <div style={{ paddingLeft: \"10px\", paddingRight: \"10px\" }}>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"13\"\n                      height=\"13\"\n                      viewBox=\"0 0 13 13\"\n                      fill=\"none\"\n                    >\n                      <path\n                        fill-rule=\"evenodd\"\n                        clip-rule=\"evenodd\"\n                        d=\"M6.5 0C2.91015 0 0 2.91015 0 6.5C0 10.0899 2.91015 13 6.5 13C10.0899 13 13 10.0899 13 6.5C13 2.91015 10.0899 0 6.5 0ZM7.13854 2.36358C7.13854 2.01213 6.85363 1.72722 6.50218 1.72722C6.15072 1.72722 5.86581 2.01213 5.86581 2.36358V2.90904H5.51733C4.96815 2.90904 4.45115 3.14318 4.07716 3.54388C3.70456 3.9431 3.50218 4.47572 3.50218 5.02267C3.50218 5.56962 3.70456 6.10225 4.07716 6.50146C4.45115 6.90217 4.96815 7.13631 5.51733 7.13631H5.86581V8.81813H4.13854C3.78708 8.81813 3.50218 9.10304 3.50218 9.45449C3.50218 9.80594 3.78708 10.0909 4.13854 10.0909H5.86581V10.6363C5.86581 10.9878 6.15072 11.2727 6.50218 11.2727C6.85363 11.2727 7.13854 10.9878 7.13854 10.6363V10.0909H7.48702C8.0362 10.0909 8.5532 9.85671 8.92719 9.45601C9.2998 9.05679 9.50218 8.52416 9.50218 7.97722C9.50218 7.43027 9.2998 6.89764 8.92719 6.49843C8.5532 6.09772 8.0362 5.86358 7.48702 5.86358H7.13854V4.18176H8.47187C8.82333 4.18176 9.10824 3.89685 9.10824 3.5454C9.10824 3.19394 8.82333 2.90904 8.47187 2.90904H7.13854V2.36358ZM5.51733 4.18176H5.86581V5.86358H5.51733C5.33515 5.86358 5.15075 5.78644 5.00759 5.63306C4.86305 5.47819 4.7749 5.25932 4.7749 5.02267C4.7749 4.78603 4.86305 4.56715 5.00759 4.41228C5.15075 4.2589 5.33515 4.18176 5.51733 4.18176ZM7.13854 8.81813V7.13631H7.48702C7.66921 7.13631 7.8536 7.21345 7.99676 7.36683C8.1413 7.5217 8.22945 7.74057 8.22945 7.97722C8.22945 8.21386 8.1413 8.43274 7.99676 8.5876C7.8536 8.74099 7.66921 8.81813 7.48702 8.81813H7.13854Z\"\n                        fill=\"white\"\n                        fill-opacity=\"0.6\"\n                      />\n                    </svg>\n                  </div>\n\n                  <div class=\"title\" style={{ fontWeight: \"normal\" }}>\n                    Order Pair\n                  </div>\n                  <div class=\"tab-pair\">\n                    <div\n                      style={{\n                        display: \"flex\",\n                        padding: \"6px 0px\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                        gap: \"4px\",\n                        cursor: \"pointer\",\n                      }}\n                      onClick={(e) =>\n                        State.update({ assetMenuOpen: !state.assetMenuOpen })\n                      }\n                    >\n                      <div class=\"title\" style={{ fontWeight: \"normal\" }}>\n                        {state.orderMarketId}\n                      </div>\n\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"7\"\n                        height=\"4\"\n                        viewBox=\"0 0 7 4\"\n                        fill=\"none\"\n                      >\n                        <path\n                          d=\"M6 0.75L3.5 3.25L1 0.75\"\n                          stroke=\"white\"\n                          stroke-linecap=\"round\"\n                          stroke-linejoin=\"round\"\n                        />\n                      </svg>\n                    </div>\n                  </div>\n                </div>\n\n                {state.assetMenuOpen && (\n                  <div class=\"assets-menu\">\n                    <div\n                      class=\"assets-menu-item\"\n                      onClick={(e) => {\n                        State.update({\n                          userOrderPrice: undefined,\n                          orderMarketId: \"ETH-USD\",\n                          assetMenuOpen: false,\n                        });\n                        updateOrders();\n                      }}\n                    >\n                      {state.orderMarketId == \"ETH-USD\" ? (\n                        activeAssetIcon\n                      ) : (\n                        <></>\n                      )}\n                      ETH-USD\n                    </div>\n                    <div\n                      class=\"assets-menu-item\"\n                      onClick={(e) => {\n                        State.update({\n                          userOrderPrice: undefined,\n                          orderMarketId: \"BTC-USD\",\n                          assetMenuOpen: false,\n                        });\n                        updateOrders();\n                      }}\n                    >\n                      {state.orderMarketId == \"BTC-USD\" ? (\n                        activeAssetIcon\n                      ) : (\n                        <></>\n                      )}\n                      BTC-USD\n                    </div>\n                  </div>\n                )}\n\n                <div class=\"inputs\">\n                  <div class=\"div-2\">\n                    <div class=\"token-label\">\n                      <img class=\"img\" src={tokenImage} />\n                      <div class=\"text-wrapper-4\">Amount</div>\n                    </div>\n                    <div class=\"amount\">\n                      <input\n                        type=\"text\"\n                        class=\"text-wrapper-5 dark-bg input-textbox\"\n                        id=\"orderSize\"\n                        value={state.orderSize}\n                        onChange={(e) =>\n                          State.update({ orderSize: e.target.value })\n                        }\n                      />\n                    </div>\n                  </div>\n\n                  {state.orderType == \"LIMIT\" && (\n                    <div class=\"div-2\">\n                      <div class=\"token-label\">\n                        <div class=\"img\" />\n                        <div class=\"text-wrapper-4\">Price</div>\n                      </div>\n                      <div class=\"amount\">\n                        <input\n                          type=\"text\"\n                          class=\"text-wrapper-5 dark-bg input-textbox\"\n                          id=\"orderSize\"\n                          value={state.userOrderPrice}\n                          onChange={(e) =>\n                            State.update({ userOrderPrice: e.target.value })\n                          }\n                        />\n                      </div>\n                    </div>\n                  )}\n\n                  <div class=\"div-2\">\n                    <div class=\"token-label\">\n                      <div class=\"token\">\n                        <div class=\"text-wrapper-6\">$</div>\n                      </div>\n                      <div class=\"text-wrapper-4\">USD</div>\n                    </div>\n                    <div class=\"amount\">\n                      <div class=\"text-wrapper-5\">\n                        $\n                        {(\n                          Number(state.userOrderPrice ?? 0) *\n                          Number(state.orderSize ?? 0)\n                        ).toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"summary\">\n                  <div class=\"div-3\">\n                    <div class=\"text-wrapper-7\">Market price</div>\n                    <div\n                      class=\"text-wrapper-8\"\n                      style={{ cursor: \"pointer\" }}\n                      onClick={() =>\n                        State.update({ userOrderPrice: state.orderPrice })\n                      }\n                    >\n                      ${state.orderPrice}\n                    </div>\n                  </div>\n                </div>\n                <div class=\"CTA\">\n                  <div class=\"buy\">\n                    <div\n                      class=\"text-wrapper-12\"\n                      onClick={() => placeUserOrder(\"BUY\")}\n                    >\n                      Buy\n                    </div>\n                  </div>\n                  <div class=\"sell\">\n                    <div\n                      class=\"text-wrapper-12\"\n                      onClick={() => placeUserOrder(\"SELL\")}\n                    >\n                      Sell\n                    </div>\n                  </div>\n                </div>\n\n                {state.error_msg && (\n                  <div\n                    class=\"div-2 title\"\n                    style={{\n                      color: \"white\",\n                      justifyContent: \"flex-start\",\n                      borderRadius: \"10px\",\n                      gap: \"10px\",\n                      backgroundColor: \"rgb(129, 37, 37)\",\n                    }}\n                    role=\"alert\"\n                  >\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"24px\"\n                      height=\"24px\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                    >\n                      <circle cx=\"12\" cy=\"12\" r=\"10\" fill=\"white\" />\n\n                      <path\n                        fill-rule=\"evenodd\"\n                        clip-rule=\"evenodd\"\n                        d=\"M2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12ZM11 13C11 13.5523 11.4477 14 12 14C12.5523 14 13 13.5523 13 13V8C13 7.44772 12.5523 7 12 7C11.4477 7 11 7.44772 11 8V13ZM13 15.9888C13 15.4365 12.5523 14.9888 12 14.9888C11.4477 14.9888 11 15.4365 11 15.9888V16C11 16.5523 11.4477 17 12 17C12.5523 17 13 16.5523 13 16V15.9888Z\"\n                        fill=\"red\"\n                      />\n                    </svg>\n                    {state.error_msg}\n                  </div>\n                )}\n\n                {state.is_loading && (\n                  <div\n                    class=\"div-2 title\"\n                    style={{\n                      color: \"white\",\n                      justifyContent: \"flex-start\",\n                      borderRadius: \"10px\",\n                      gap: \"10px\",\n                    }}\n                    role=\"alert\"\n                  >\n                    <div class=\"lds-ring\">\n                      <div></div>\n                      <div></div>\n                      <div></div>\n                      <div></div>\n                    </div>\n                    Loading...\n                  </div>\n                )}\n              </div>\n              <div class=\"orders-log\">\n                <div class=\"heading\">\n                  <img\n                    class=\"img\"\n                    src=\"https://plum-dear-manatee-739.mypinata.cloud/ipfs/QmbEJL2wNjLQ948Sa6fwvoidRWVWULeaXJsFYpNZ9qG9Kh\"\n                  />\n                  <div class=\"title\">Orders log </div>\n                  <div class=\"refresh\">\n                    <div\n                      class=\"text-wrapper-3 btn-refresh\"\n                      onClick={() => {\n                        updateOrders();\n                      }}\n                    >\n                      Refresh\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"order-tabs\">\n                  <ul class=\"nav nav-tabs\">\n                    <li class=\"nav-item\">\n                      <a\n                        class={`nav-link ${isOrderOpen() ? \"active\" : \"\"}`}\n                        onClick={() => State.update({ orderFilter: orderOpen })}\n                        aria-current=\"page\"\n                        href=\"#\"\n                      >\n                        Open\n                      </a>\n                    </li>\n                    <li class=\"nav-item\">\n                      <a\n                        class={`nav-link ${isOrderFilled() ? \"active\" : \"\"}`}\n                        onClick={() =>\n                          State.update({ orderFilter: orderFilled })\n                        }\n                        href=\"#\"\n                      >\n                        Filled\n                      </a>\n                    </li>\n                    <li class=\"nav-item\">\n                      <a\n                        class={`nav-link ${isOrderCancelled() ? \"active\" : \"\"}`}\n                        onClick={() =>\n                          State.update({ orderFilter: orderCancelled })\n                        }\n                        href=\"#\"\n                      >\n                        Canceled\n                      </a>\n                    </li>\n                    <li class=\"nav-item\">\n                      <a\n                        class={`nav-link ${isOrderPending() ? \"active\" : \"\"}`}\n                        onClick={() =>\n                          State.update({ orderFilter: orderPending })\n                        }\n                        href=\"#\"\n                      >\n                        Pending\n                      </a>\n                    </li>\n                  </ul>\n                </div>\n\n                <div class=\"transactions\">\n                  {(state.orders ?? []).length == 0 && (\n                    <div class=\"text-wrapper-10\">No transactions yet</div>\n                  )}\n                  {(state.orders ?? [])\n                    .filter((order) => {\n                      if (isOrderPending()) {\n                        return (\n                          !(\n                            order.status == orderCancelled ||\n                            order.status == orderFilled ||\n                            order.status == orderOpen\n                          ) &&\n                          order.ticker.toLowerCase() ==\n                            state.orderMarketId.toLowerCase()\n                        );\n                      } else {\n                        return (\n                          [state.orderFilter].includes(order.status) &&\n                          order.ticker.toLowerCase() ==\n                            state.orderMarketId.toLowerCase()\n                        );\n                      }\n                    })\n                    .sort((a, b) => {\n                      return b.updatedAtHeight - a.updatedAtHeight;\n                    })\n                    .map((order) => (\n                      <div class=\"transaction\">\n                        <div class=\"pair\">\n                          <div\n                            class={`order-log-${order.side.toLowerCase()}-wrapper`}\n                          >\n                            <div\n                              class={`order-log-${order.side.toLowerCase()}`}\n                              title={order.status}\n                            >\n                              {order.side}\n                            </div>\n                          </div>\n                          <div class=\"text-wrapper-14\" title={order.status}>\n                            {order.ticker}\n                          </div>\n                        </div>\n                        <div class=\"p\">\n                          <span class=\"span\">at</span>{\" \"}\n                          <span class=\"text-wrapper-15\"> ${order.price}</span>\n                        </div>\n                        <div class=\"p\">\n                          <span class=\"span\">size</span>\n                          <span class=\"text-wrapper-15\"> {order.size} </span>\n                          <span class=\"span\">/ filled</span>\n                          <span class=\"text-wrapper-15\">\n                            {\" \"}\n                            {order.totalFilled}\n                          </span>\n                        </div>\n                        <div class=\"time\">\n                          {order.updatedAt\n                            ? new Date(order.updatedAt).toLocaleString()\n                            : \"\"}\n                        </div>\n\n                        {order.status == \"OPEN\" && (\n                          <div\n                            class=\"cancel\"\n                            style={{\n                              backgroundColor: \"rgb(129, 37, 37)\",\n                              border: \"1px solid rgb(197, 51, 51)\",\n                            }}\n                          >\n                            <div\n                              type=\"button\"\n                              class=\"text-wrapper-2\"\n                              aria-label=\"Close\"\n                              onClick={() => {\n                                cancelUserOrder(\n                                  order.clientId,\n                                  64,\n                                  order.ticker\n                                );\n                              }}\n                              style={{ color: \"white\" }}\n                            >\n                              Cancel\n                            </div>\n                          </div>\n                        )}\n                        {order.status != \"OPEN\" && (\n                          <div class=\"empty-cancel\">\n                            <div class=\"text-wrapper-2\"></div>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/*JSON.stringify(state.orders)*/}\n    </Theme>\n  );\n}\n\nreturn (\n  <>\n    <h1>DyDx v4</h1>\n    <h4>Sign message with Metamask to sign in</h4>\n    <button onClick={() => SignInWithMetamask()}>Sign In</button>\n    <hr />\n    <div>Your Ethereum Account: {state.sender}</div>\n    <Web3Connect connectLabel=\"Connect Web3 Wallet to continue\" />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dydx4.near/widget/Index", "fact_widget_deployments_id": "cd520159951bcff473611e4adad34b91", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 18}