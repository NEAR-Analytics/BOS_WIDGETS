{"tx_hash": "EP1a9pv9RwghQLE2t1T2BLF2LcPdoPYWByVyVvWWYJFL", "action_id_social": "Fmu7fd8NUwSFsZLkCqpf4ooriuNLwG9qrJUemgK5yKos-0-widget", "block_id": 115200355, "block_timestamp": "2024-03-22T03:46:56.432Z", "signer_id": "trade-walls.near", "widget_name": "AI.Agent.AgentChat", "source_code": "const [response, setResponse] = useState({});\nconst [error, setError] = useState(true);\nconst [walls, setWalls] = useState([]);\nconst [answer, setAnswer] = useState(\"\");\nconst WallsList = () => {\n  if (error) {\n    return;\n  }\n  if (walls.length == 0) {\n    return <>Add a wall to begin</>;\n  }\n\n  return (\n    <>\n      <h5>My walls</h5>\n      <table>\n        <thead>\n          <tr>\n            <TC as=\"th\">Pair</TC>\n            <TC as=\"th\">Buy Price</TC>\n            <TC as=\"th\">Sell Price</TC>\n            <TC as=\"th\">Quantity</TC>\n            <TC as=\"th\">Keep</TC>\n            <TC as=\"th\">Status</TC>\n            <TC as=\"th\">Actions</TC>\n          </tr>\n        </thead>\n        <tbody>\n          {walls.map(\n            ({ id, pair, bid_price, ask_price, quantity, keep, status }) => {\n              const [base, quote] = pair.split(\"/\");\n              return (\n                <tr key={id}>\n                  <TC>{pair}</TC>\n                  <TC>\n                    {bid_price} {quote}\n                  </TC>\n                  <TC>\n                    {ask_price} {quote}\n                  </TC>\n                  <TC>\n                    {quantity} {base}\n                  </TC>\n                  <TC>\n                    {keep} {base}\n                  </TC>\n                  <TC>{status}</TC>\n                  <TC>\n                    <button onClick={deleteWall(id)}>Delete</button>\n                  </TC>\n                </tr>\n              );\n            }\n          )}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nconst deleteWall = (wallId) => {\n  return () => {\n    asyncFetch(`${wallsApiEndpoint}/${wallId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      responseType: \"json\",\n    }).then((res) => {\n      setResponse(res.body);\n      listWalls();\n    });\n    return false;\n  };\n};\nconst [suggestedWalls, setSuggestedWalls] = useState([]);\n\nconst extractWalls = (content) => {\n  const wallRegex = /```wall\\s*([\\s\\S]*?)\\s*```/;\n  const match = content.match(wallRegex);\n  if (match) {\n    const wallsJson = match[1].trim();\n    try {\n      return JSON.parse(wallsJson);\n    } catch (error) {\n      console.error(\"Error parsing suggested walls:\", error);\n      return null;\n    }\n  }\n  return null;\n};\n\nconst ActionParser = () => {\n  return (\n    <div>\n      {suggestedWalls.length > 0 && (\n        <LLMWallSuggestion walls={suggestedWalls} onAddWall={addWall} />\n      )}\n    </div>\n  );\n};\n\nuseEffect(() => {\n  //console.log(answer);\n  setSuggestedWalls(extractWalls(answer) || []);\n}, [answer]);\n\nconst LLMWallSuggestion = ({ walls, onAddWall }) => {\n  const [addingWall, setAddingWall] = useState(null);\n\n  const handleAddWall = (wall, index) => {\n    onAddWall(wall, index);\n    setAddingWall(wall);\n  };\n\n  return (\n    <div>\n      <h4>Suggested Walls from LLM</h4>\n      {walls.length === 0 ? (\n        <p>No walls suggested by the LLM.</p>\n      ) : (\n        <table>\n          <thead>\n            <tr>\n              <TC as=\"th\">Pair</TC>\n              <TC as=\"th\">Buy Price</TC>\n              <TC as=\"th\">Sell Price</TC>\n              <TC as=\"th\">Quantity</TC>\n              <TC as=\"th\">Keep</TC>\n              <TC as=\"th\">Action</TC>\n            </tr>\n          </thead>\n          <tbody>\n            {walls.map((wall, index) => {\n              const [lhs, rhs] = wall.pair.split(\"/\");\n              return (\n                <tr key={index}>\n                  <TC>{wall.pair}</TC>\n                  <TC>\n                    {wall.bid_price} {rhs}\n                  </TC>\n                  <TC>\n                    {wall.ask_price} {rhs}\n                  </TC>\n                  <TC>\n                    {wall.quantity} {lhs}\n                  </TC>\n                  <TC>\n                    {wall.keep} {lhs}\n                  </TC>\n                  <TC>\n                    <button\n                      onClick={() => handleAddWall(wall, index)}\n                      disabled={addingWall === wall}\n                    >\n                      {addingWall === wall ? \"Adding...\" : \"Add Wall\"}\n                    </button>\n                  </TC>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n};\n\nconst addWall = (wall, index) => {\n  asyncFetch(wallsApiEndpoint, {\n    method: \"POST\",\n    body: JSON.stringify(wall),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    responseType: \"json\",\n  }).then((res) => {\n    setResponse(res.body);\n    setSuggestedWalls((prevSuggestedWalls) => {\n      const updatedWalls = [...prevSuggestedWalls];\n      updatedWalls.splice(index, 1);\n      return updatedWalls;\n    });\n    listWalls();\n  });\n  return false;\n};\nconst [wallsApiEndpoint, setWallsApiEndpoint] = useState(\n  \"http://localhost:5000/api/walls\"\n);\nconst [connecting, setConnecting] = useState(false);\n\nconst listWalls = async () => {\n  asyncFetch(wallsApiEndpoint, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    responseType: \"json\",\n  }).then((res) => {\n    setWalls(res.body);\n    if (res.status == 200) {\n      setError(false);\n    }\n  });\n};\n\nconst connectBackend = async () => {\n  setConnecting(true);\n  const url = `${wallsApiEndpoint.replace(\"/walls\", \"\")}/greet`;\n  asyncFetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    responseType: \"json\",\n  }).then((res) => {\n    setResponse(res.body);\n    listWalls();\n    if (res.status == 200) {\n      setError(false);\n    }\n    setConnecting(false);\n  });\n};\n\nuseEffect(() => {\n  connectBackend();\n}, []);\n\n// original code\nconst { href } = VM.require(\"devhub.near/widget/core.lib.url\");\nconst storedModel = Storage.get(\"agent-model\");\nconst storedLocalModel = Storage.get(\"agent-local-model\");\nconst storedCredentialType = Storage.get(\"agent-credential-type\");\nconst storedCredential = Storage.get(\"agent-credential\");\nconst storedJsonOutputSetting = Storage.get(\"agent-json-output-setting\");\nif (\n  !href ||\n  storedCredential === null ||\n  storedModel === null ||\n  storedLocalModel === null ||\n  storedCredentialType === null\n) {\n  return \"Loading config...\";\n}\n\nconst { src, embedded } = props;\n\nif (!src) {\n  src = \"trade-walls.near/agent/trade-walls\";\n}\nconst [accountId, agentType, agentName] = src.split(\"/\") ?? [null, null, null];\nconst blockHeight = blockHeight ?? \"final\";\n\nconst data = Social.getr(`${accountId}/agent/${agentName}`, blockHeight);\nconst agent = { accountId, name: agentName, ...data };\n\nif (!data) return \"Loading...\";\n\ndata.prompt =\n  data.prompt +\n  `\nYou want to suggest buy and sell walls to the user. To suggest a wall return json:\n\\`\\`\\`wall\n[\n  {\n    \"pair\": \"nano/near\",\n    \"bid_price\": 1,\n    \"ask_price\": 2,\n    \"quantity\": 20,\n    \"keep\": 10\n  },\n  {\n    \"pair\": \"nano/near\",\n    \"bid_price\": 0.5,\n    \"ask_price\": 4.0,\n    \"quantity\": 40,\n    \"keep\": 20\n  }\n]\n\\`\\`\\`\nbid_price and ask_price are in the pair denominator (near) and quantity is in the numerator (nano). quantity includes keep.\nDo:\n1. Suggest log-scale walls that lets the user benefit from price fluctuations.\n2. Stick within the user's requested parameters.\n3. Suggest walls when responding even if the parameters aren't clear - the user can ignore your options.\n4. Use the trade pair the user requests. Remind them to look at a graph of the pair on tradingview.\n\nDon't:\n1. Deviate from the wall json format - it's strict.\n2. Hesitate to suggest walls.\n3. Suggest only one wall. We want the user to benefit from volatility.\n`;\nconst listLink = href({\n  widgetSrc: `near/widget/AI.Nexus`,\n});\n\nconst [settingsOpen, setSettingsOpen] = useState(false);\nconst [question, setQuestion] = useState(\"\");\nconst [loading, setLoading] = useState(false);\nconst [messages, setMessages] = useState([]);\n\nconst [model, setModel] = useState(storedModel ?? \"near-llama-7b\");\nconst [localModel, setLocalModel] = useState(\n  storedLocalModel ?? \"http://localhost:1234/v1/chat/completions\"\n);\nconst [credentialType, setCredentialType] = useState(\n  storedCredentialType ?? \"bearer\"\n);\nconst [credential, setCredential] = useState(storedCredential ?? \"\");\nconst [jsonOutputSetting, setJsonOutputSetting] = useState(\n  storedJsonOutputSetting ?? false\n);\n\nuseEffect(() => {\n  Storage.set(\"agent-model\", model);\n}, [model]);\nuseEffect(() => {\n  Storage.set(\"agent-local-model\", localModel);\n}, [localModel]);\nuseEffect(() => {\n  Storage.set(\"agent-credential-type\", credentialType);\n}, [credentialType]);\nuseEffect(() => {\n  Storage.set(\"agent-credential\", credential);\n}, [credential]);\nuseEffect(() => {\n  Storage.set(\"agent-json-output-setting\", jsonOutputSetting);\n}, [jsonOutputSetting]);\n\nconst toggleSettings = () => {\n  setSettingsOpen(!settingsOpen);\n};\n\nconst routeApi = async (question) => {\n  switch (model) {\n    case \"near-llama-7b\":\n      return nearLlama(question);\n    default:\n      return openAICompatible(question);\n  }\n};\nconst urlForModel = (model) => {\n  switch (model) {\n    case \"near-llama-7b\":\n      return `https://ai.near.social/api`;\n    case \"local\":\n      return localModel;\n    case \"gpt-4\":\n    case \"gpt-3.5-turbo\":\n      return `https://api.openai.com/v1/chat/completions`;\n    case \"mixtral-8x7b-32768\":\n    case \"llama2-70b-4096\":\n      return \"https://api.groq.com/openai/v1/chat/completions\";\n    default:\n      return `https://api.openai.com/v1/chat/completions`;\n  }\n};\nconst nearLlama = async (question) => {\n  return asyncFetch(`https://ai.near.social/api`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    responseType: \"json\",\n    body: JSON.stringify([{ role: \"system\", content: data.prompt }, question]),\n  }).then((response) => {\n    return response.body.response;\n  });\n};\nconst openAICompatible = async (question) => {\n  let finalQuestion = question.content;\n  let options = {\n    model,\n  };\n  if (jsonOutputSetting) {\n    options.response_format = { type: \"json_object\" };\n    if (!finalQuestion.includes(\"json\")) {\n      finalQuestion = `${finalQuestion} respond in json`;\n    }\n  }\n\n  return asyncFetch(urlForModel(model), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${credential}`,\n    },\n    responseType: \"json\",\n    body: JSON.stringify({\n      ...options,\n      messages: [\n        { role: \"system\", content: data.prompt },\n        {\n          role: \"user\",\n          content: finalQuestion,\n        },\n      ],\n    }),\n  }).then((response) => {\n    const answer = response.body.choices[0].message.content;\n    return answer;\n  });\n};\n\nuseEffect(() => {\n  if (messages.length === 0 || messages[messages.length - 1].role !== \"user\") {\n    return;\n  }\n  setLoading(true);\n  routeApi(...messages.slice(-1))\n    .then((answer) => {\n      const wallRegex = /```wall\\s*([\\s\\S]*?)\\s*```/;\n      const answerNoWalls = answer.replace(wallRegex, \"\");\n\n      setMessages([...messages, { role: \"system\", content: answerNoWalls }]);\n      setAnswer(answer);\n    })\n    .finally(() => {\n      setLoading(false);\n    });\n}, [messages]);\n\nconst submitQuestion = () => {\n  setMessages([...messages, { role: \"user\", content: question }]);\n  setAnswer(\"\");\n  setQuestion(\"\");\n};\nconst requiresCredentials = (model) => {\n  return (\n    model === \"gpt-4\" ||\n    model === \"gpt-3.5-turbo\" ||\n    model === \"mixtral-8x7b-32768\" ||\n    model === \"llama2-70b-4096\"\n  );\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 48px;\n  padding: 48px;\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-bottom: 1em;\n`;\n\nconst Header = styled.h1`\n  font-size: 24px;\n  line-height: 39px;\n  color: #11181c;\n  margin-bottom: 20px;\n  font-weight: 600;\n`;\nconst Text = styled.p`\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${(p) => (p.bold ? \"#11181C\" : \"#687076\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n\n  i {\n    margin-right: 4px;\n  }\n`;\nconst Prompt = styled.p`\n  font-family: monospace;\n  font-size: 14px;\n  overflow-y: auto;\n  height: 100px;\n`;\nconst Label = styled.span`\n  font-weight: 600;\n`;\nconst Settings = styled.div`\n  margin-bottom: 1em;\n  z-index: 1000;\n`;\nconst Controls = styled.div`\n  margin-bottom: 1em;\n`;\nconst CardControl = styled.div`\n  cursor: pointer;\n  color: var(--violet8);\n  margin-bottom: 1em;\n`;\nconst AllSettings = styled.div``;\nconst InputWrapper = styled.div`\n  padding-bottom: 1em;\n`;\nconst Question = styled.input`\n  border-top-left-radius: 2rem;\n  border-bottom-left-radius: 2rem;\n`;\nconst UserMessage = styled.div``;\nconst AgentMessage = styled.div`\n  background-color: #f9f9f9;\n`;\nconst TC = styled.td`\n  padding: 12px;\n`;\n\nconst renderSettings = () => {\n  return (\n    <Settings>\n      <CardControl bold onClick={toggleSettings}>\n        <i className={settingsOpen ? \"ph ph-caret-up\" : \"ph ph-caret-down\"} />{\" \"}\n        Settings\n      </CardControl>\n      {settingsOpen && (\n        <AllSettings>\n          <InputWrapper>\n            <Widget\n              src=\"near/widget/DIG.Input\"\n              props={{\n                label: \"Walls API Endpoint\",\n                assistiveText: \"Enter the API endpoint for managing walls\",\n                iconLeft: \"ph-bold ph-link\",\n                onInput: (e) => setWallsApiEndpoint(e.target.value),\n                value: wallsApiEndpoint,\n                onKeyPress: (e) => {\n                  if (e.key === \"Enter\") {\n                    connectBackend();\n                  }\n                },\n                inputProps: {\n                  endAdornment: (\n                    <Widget\n                      src=\"near/widget/DIG.Button\"\n                      props={{\n                        onClick: connectBackend,\n                        variant: \"affirmative\",\n                        size: \"small\",\n                        disabled: connecting,\n                        icon: connecting ? (\n                          <span\n                            className=\"spinner-grow spinner-grow-sm\"\n                            role=\"status\"\n                            aria-hidden=\"true\"\n                          />\n                        ) : (\n                          <i className=\"ph-bold ph-check\" />\n                        ),\n                      }}\n                    />\n                  ),\n                },\n              }}\n            />\n          </InputWrapper>\n\n          <InputWrapper>\n            <Widget\n              src=\"near/widget/DIG.InputSelect\"\n              props={{\n                groups: [\n                  {\n                    label: \"NEAR\",\n                    items: [\n                      {\n                        label: \"NEAR Llama 7b\",\n                        value: \"near-llama-7b\",\n                      }\n                    ],\n                  },\n                  {\n                    label: \"Groq\",\n                    items: [\n                      {\n                        label: \"Mixtral 8x7b 32768\",\n                        value: \"mixtral-8x7b-32768\",\n                      },\n                      {\n                        label: \"Llama2 70b 4096\",\n                        value: \"llama2-70b-4096\",\n                      },\n                    ],\n                  },\n                  {\n                    label: \"OpenAI\",\n                    items: [\n                      {\n                        label: \"GPT-4\",\n                        value: \"gpt-4\",\n                      },\n                      {\n                        label: \"GPT-3.5 turbo\",\n                        value: \"gpt-3.5-turbo\",\n                      },\n                    ],\n                  },\n                  {\n                    label: \"Local\",\n                    items: [\n                      {\n                        label: \"Local\",\n                        value: \"local\",\n                      },\n                    ],\n                  },\n                ],\n                label: \"Choose Model\",\n                placeholder: \"OpenAI GPT-3\",\n                rootProps: {\n                  value: model,\n                  onValueChange: setModel,\n                },\n              }}\n            />\n          </InputWrapper>\n          {model === \"local\" && (\n            <InputWrapper>\n              <Widget\n                src=\"near/widget/DIG.Input\"\n                props={{\n                  label: \"Local Model URL\",\n                  assistiveText:\n                    \"OpenAI format\",\n                  iconLeft: \"ph-bold ph-horse\",\n                  onInput: (e) => setLocalModel(e.target.value),\n                  value: localModel,\n                }}\n              />\n            </InputWrapper>\n          )}\n          <InputWrapper>\n            <div className=\"row\">\n              <div className=\"col-3\">\n                <Widget\n                  src=\"near/widget/DIG.InputSelect\"\n                  props={{\n                    groups: [\n                      {\n                        label: \"OpenAI, Groq, or other API Key\",\n                        items: [\n                          {\n                            label: \"Bearer Token\",\n                            value: \"bearer\",\n                          },\n                        ],\n                      },\n                    ],\n                    label: \"Credential Type\",\n                    rootProps: {\n                      value: credentialType,\n                      onValueChange: setCredentialType,\n                    },\n                  }}\n                />\n              </div>\n              <div className=\"col\">\n                <Widget\n                  src=\"near/widget/DIG.Input\"\n                  props={{\n                    label: \"Credentials\",\n                    assistiveText:\n                      \"credentials stored in browser\",\n                    iconLeft: \"ph-bold ph-identification-card\",\n                    onInput: (e) => setCredential(e.target.value),\n                    value: credential,\n                    type: \"password\",\n                  }}\n                />\n              </div>\n            </div>\n          </InputWrapper>\n        </AllSettings>\n      )}\n    </Settings>\n  );\n};\n\nreturn (\n  <Wrapper>\n    <div>\n      {!embedded && (\n        <div>          \n          <Overview>\n            <div className=\"row\">\n              <div className=\"col-5\">\n                <Widget\n                  src=\"near/widget/AI.Agent.AgentSummary\"\n                  props={{\n                    size: \"small\",\n                    showTags: true,\n                    agent: agent,\n                  }}\n                />\n              </div>\n              <div className=\"col-7\">\n                {error && (\n                  <div key=\"error\">\n                    Please make sure your server is running and adblock is\n                    disabled.\n                    <a\n                      href=\"https://github.com/255BITS/trade-walls\"\n                      target=\"_blank\"\n                    >\n                      Download trade-walls\n                    </a>\n                    <Widget\n                      src=\"near/widget/DIG.Button\"\n                      props={{\n                        onClick: connectBackend,\n                        iconLeft: editIcon,\n                        variant: \"affirmative\",\n                        fill: \"solid\",\n                        size: \"large\",\n                        label: \"Reconnect\",\n                        style: {\n                          borderTopLeftRadius: \"0rem\",\n                          borderBottomLeftRadius: \"0rem\",\n                        },\n                      }}\n                    ></Widget>\n                  </div>\n                )}\n                {!error && (\n                  <div>You are connected to the trade-walls server.</div>\n                )}\n\n                <div key=\"response\">{JSON.stringify(response)}</div>\n              </div>\n            </div>\n          </Overview>\n        </div>\n      )}\n      <WallsList></WallsList>\n      <Controls>\n        {renderSettings()}\n        {requiresCredentials(model) && credential === \"\" && (\n          <div className=\"alert alert-danger mx-3\" role=\"alert\">\n            <i className=\"ph ph-alert-circle\" /> Requires key\n          </div>\n        )}\n        <div className=\"input-group\">\n          <Question\n            type=\"text\"\n            className=\"form-control\"\n            value={question}\n            onChange={(e) => setQuestion(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.key === \"Enter\") {\n                submitQuestion();\n              }\n            }}\n            placeholder=\"Name your bid, ask, quantity and tradepair. Example: 4 nano for 1 near with 100 nano\"\n          />\n          <Widget\n            src=\"near/widget/DIG.Button\"\n            props={{\n              onClick: submitQuestion,\n              iconLeft: editIcon,\n              variant: \"affirmative\",\n              fill: \"solid\",\n              size: \"large\",\n              label: \"Submit\",\n              disabled:\n                (requiresCredentials(model) && credential === \"\") ||\n                question === \"\",\n              style: {\n                borderTopLeftRadius: \"0rem\",\n                borderBottomLeftRadius: \"0rem\",\n              },\n            }}\n          />\n        </div>\n      </Controls>\n\n      <div className=\"d-flex flex-column-reverse\">\n        {messages.map(({ role, content }, i) => {\n          return (\n            <div key={i} className={`message ${role}`}>\n              {role === \"user\" && (\n                <UserMessage>\n                  <Widget\n                    src=\"mob.near/widget/N.ProfileLine\"\n                    props={{ accountId: context.accountId }}\n                  />\n                  <Markdown text={content} />\n                </UserMessage>\n              )}\n              {role !== \"user\" && (\n                <AgentMessage>\n                  <ActionParser></ActionParser>\n                  <Markdown text={content} />\n                </AgentMessage>\n              )}\n            </div>\n          );\n        })}\n        {loading && (\n          <div key=\"loading\" className={`message system`}>\n            <div>\n              <span\n                className=\"spinner-grow spinner-grow-sm me-1\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/trade-walls.near/widget/AI.Agent.AgentChat", "fact_widget_deployments_id": "339c0c8599a48e04a99dc8c83a6cb31b", "inserted_timestamp": "2024-03-22T05:28:26.882Z", "modified_timestamp": "2024-03-22T05:28:26.882Z", "__row_index": 17}