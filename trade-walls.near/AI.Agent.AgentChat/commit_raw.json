{"tx_hash": "473SbKByv36PseSxoogQqPvKBdoXjAJEK8fB1SYY9ak2", "action_id_social": "5Y329hEpWyyvMLkRa7BTyCSFvCWWgkoA19a8c5VjXYcK-0-widget", "block_id": 115043596, "block_timestamp": "2024-03-19T20:24:58.338Z", "signer_id": "trade-walls.near", "widget_name": "AI.Agent.AgentChat", "source_code": "const [response, setResponse] = useState({});\nconst [error, setError] = useState(true);\nconst [walls, setWalls] = useState([]);\nlet [suggestedWall, setSuggestedWall] = useState({\n  pair: \"ETH/NEAR\",\n  bid_price: 500,\n  ask_price: 1000,\n  quantity: 10,\n  keep: 10,\n});\n\nconst WallsList = () => {\n  if (error) {\n    return;\n  }\n  if (walls.length == 0) {\n    return <>Add a wall to begin</>;\n  }\n  return (\n    <>\n      <h5>My walls</h5>\n      <table>\n        <tr>\n          <th>ID</th>\n          <th>Pair</th>\n          <th>buy price</th>\n          <th>sell price</th>\n          <th>quantity</th>\n          <th>keep</th>\n          <th>total</th>\n        </tr>\n        {walls.map(\n          ({ id, pair, bid_price, ask_price, quantity, keep, total }) => {\n            return (\n              <tr>\n                <td>{id}</td>\n                <td>{pair}</td>\n                <td>{bid_price}</td>\n                <td>{ask_price}</td>\n                <td>{quantity}</td>\n                <td>{keep}</td>\n                <td>{total}</td>\n              </tr>\n            );\n          }\n        )}\n      </table>\n    </>\n  );\n};\n\nconst WallAction = (props) => {\n  let pair = props.suggested.pair.split(\"/\");\n  let wall = props.suggested;\n  let label = (\n    <>\n      Add wall for {wall.bid_price * (wall.quantity + wall.keep)} {pair[1]}: buy{\" \"}\n      {wall.quantity + wall.keep}\n      {pair[0]} under {wall.bid_price}, sell {wall.quantity} over{\" \"}\n      {wall.ask_price}\n    </>\n  );\n\n  return (\n    <div>\n      <Widget\n        src=\"near/widget/DIG.Button\"\n        props={{\n          onClick: addWall(wall),\n          variant: \"affirmative\",\n          fill: \"solid\",\n          size: \"large\",\n          label: label,\n          style: {\n            borderTopLeftRadius: \"0rem\",\n            borderBottomLeftRadius: \"0rem\",\n          },\n        }}\n      />\n    </div>\n  );\n};\nconst ActionParser = () => {\n  return (\n    <div>\n      <WallAction suggested={suggestedWall}></WallAction>\n    </div>\n  );\n};\nconst [wallsApiEndpoint, setWallsApiEndpoint] = useState(\n  \"http://localhost:5000/api/walls\"\n);\n\nconst listWalls = async () => {\n  asyncFetch(wallsApiEndpoint, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    responseType: \"json\",\n  }).then((res) => {\n    setWalls(res.body);\n    if (res.status == 200) {\n      setError(false);\n    }\n  });\n};\nconst addWall = (wall) => {\n  return () => {\n    asyncFetch(wallsApiEndpoint, {\n      method: \"POST\",\n      body: JSON.stringify(wall),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      responseType: \"json\",\n    }).then((res) => {\n      setResponse(res.body);\n      listWalls();\n    });\n    return false;\n  };\n};\nconst connectBackend = async () => {\n  const url = `${wallsApiEndpoint.replace(\"/walls\", \"\")}/greet`;\n  asyncFetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    responseType: \"json\",\n  }).then((res) => {\n    setResponse(res.body);\n    listWalls();\n    if (res.status == 200) {\n      setError(false);\n    }\n  });\n};\nconnectBackend();\n\n// original code\nconst { href } = VM.require(\"devhub.near/widget/core.lib.url\");\nconst storedModel = Storage.get(\"agent-model\");\nconst storedLocalModel = Storage.get(\"agent-local-model\");\nconst storedCredentialType = Storage.get(\"agent-credential-type\");\nconst storedCredential = Storage.get(\"agent-credential\");\nconst storedJsonOutputSetting = Storage.get(\"agent-json-output-setting\");\nif (\n  !href ||\n  storedCredential === null ||\n  storedModel === null ||\n  storedLocalModel === null ||\n  storedCredentialType === null\n) {\n  return \"Loading config...\";\n}\n\nconst { src, embedded } = props;\n\nif (!src) {\n  src = \"trade-walls.near/agent/trade-walls\";\n}\nconst [accountId, agentType, agentName] = src.split(\"/\") ?? [null, null, null];\nconst blockHeight = blockHeight ?? \"final\";\n\nconst data = Social.getr(`${accountId}/agent/${agentName}`, blockHeight);\nconst agent = { accountId, name: agentName, ...data };\n\nif (!data) return \"Loading...\";\n\ndata.prompt =\n  data.prompt +\n  `\nYou want to suggest buy and sell walls to the user. To suggest a wall return a json like this:\n\\`\\`\\`wall\n  [` +\n  JSON.stringify(suggestedWall) +\n  `]\n\\`\\`\\`\nDo:\n1. Suggest log-scale walls that lets the user benefit from price fluctuations.\n2. Stick within the user's requested parameters.\n3. Suggest walls when responding even if the parameters aren't clear - the user can ignore your options.\nDon't:\n1. Deviate from the wall json format - it's strict.\n2. Hesitate to suggest walls.\n3. Suggest only one wall. We want the user to benefit from volatility.\n`;\nconsole.log(\"prompt\", data.prompt);\nconst listLink = href({\n  widgetSrc: `near/widget/AI.Nexus`,\n});\n\nconst [settingsOpen, setSettingsOpen] = useState(false);\nconst [question, setQuestion] = useState(\"\");\nconst [loading, setLoading] = useState(false);\nconst [messages, setMessages] = useState([]);\n\nconst [model, setModel] = useState(storedModel ?? \"near-llama-7b\");\nconst [localModel, setLocalModel] = useState(\n  storedLocalModel ?? \"http://localhost:1234/v1/chat/completions\"\n);\nconst [credentialType, setCredentialType] = useState(\n  storedCredentialType ?? \"bearer\"\n);\nconst [credential, setCredential] = useState(storedCredential ?? \"\");\nconst [jsonOutputSetting, setJsonOutputSetting] = useState(\n  storedJsonOutputSetting ?? false\n);\n\nuseEffect(() => {\n  Storage.set(\"agent-model\", model);\n}, [model]);\nuseEffect(() => {\n  Storage.set(\"agent-local-model\", localModel);\n}, [localModel]);\nuseEffect(() => {\n  Storage.set(\"agent-credential-type\", credentialType);\n}, [credentialType]);\nuseEffect(() => {\n  Storage.set(\"agent-credential\", credential);\n}, [credential]);\nuseEffect(() => {\n  Storage.set(\"agent-json-output-setting\", jsonOutputSetting);\n}, [jsonOutputSetting]);\n\nconst toggleSettings = () => {\n  setSettingsOpen(!settingsOpen);\n};\n\nconst routeApi = async (question) => {\n  switch (model) {\n    case \"near-llama-7b\":\n      return nearLlama(question);\n    default:\n      return openAICompatible(question);\n  }\n};\nconst urlForModel = (model) => {\n  switch (model) {\n    case \"near-llama-7b\":\n      return `https://ai.near.social/api`;\n    case \"local\":\n      return localModel;\n    case \"gpt-4\":\n    case \"gpt-3.5-turbo\":\n      return `https://api.openai.com/v1/chat/completions`;\n    case \"mixtral-8x7b-32768\":\n    case \"llama2-70b-4096\":\n      return \"https://api.groq.com/openai/v1/chat/completions\";\n    default:\n      return `https://api.openai.com/v1/chat/completions`;\n  }\n};\nconst nearLlama = async (question) => {\n  return asyncFetch(`https://ai.near.social/api`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    responseType: \"json\",\n    body: JSON.stringify([{ role: \"system\", content: data.prompt }, question]),\n  }).then((response) => {\n    return response.body.response;\n  });\n};\nconst openAICompatible = async (question) => {\n  let finalQuestion = question.content;\n  let options = {\n    model,\n  };\n  if (jsonOutputSetting) {\n    options.response_format = { type: \"json_object\" };\n    if (!finalQuestion.includes(\"json\")) {\n      finalQuestion = `${finalQuestion} respond in json`;\n    }\n  }\n  // frequency_penalty: 0.0,\n  // logit_bias: {},\n  // log_props: true,\n  // top_logprobs: 5,\n  // max_tokens: 2048,\n  // n: 1,\n  // presence_penalty: 0.0,\n  // seed: 0,\n  // stop: [\"\\n\"],\n  // stream: false,\n  // temperature: 0.7,\n  // top_p: 1,\n  // tools: agent.tools,\n  // tool_choice: 'auto',\n  // user: anonymize(context.accountId),\n\n  return asyncFetch(urlForModel(model), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${credential}`,\n    },\n    responseType: \"json\",\n    body: JSON.stringify({\n      ...options,\n      messages: [\n        { role: \"system\", content: data.prompt },\n        {\n          role: \"user\",\n          content: finalQuestion,\n        },\n      ],\n    }),\n  }).then((response) => {\n    const answer = response.body.choices[0].message.content;\n    return answer;\n  });\n};\n\nuseEffect(() => {\n  if (messages.length === 0 || messages[messages.length - 1].role !== \"user\") {\n    return;\n  }\n  setLoading(true);\n  routeApi(...messages.slice(-1))\n    .then((answer) => {\n      setMessages([...messages, { role: \"system\", content: answer }]);\n    })\n    .finally(() => {\n      setLoading(false);\n    });\n}, [messages]);\n\nconst submitQuestion = () => {\n  setMessages([...messages, { role: \"user\", content: question }]);\n  setQuestion(\"\");\n};\nconst requiresCredentials = (model) => {\n  return (\n    model === \"gpt-4\" ||\n    model === \"gpt-3.5-turbo\" ||\n    model === \"mixtral-8x7b-32768\" ||\n    model === \"llama2-70b-4096\"\n  );\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 48px;\n  padding: 48px;\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-bottom: 1em;\n`;\n\nconst Header = styled.h1`\n  font-size: 24px;\n  line-height: 39px;\n  color: #11181c;\n  margin-bottom: 20px;\n  font-weight: 600;\n`;\nconst Text = styled.p`\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${(p) => (p.bold ? \"#11181C\" : \"#687076\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n\n  i {\n    margin-right: 4px;\n  }\n`;\nconst Prompt = styled.p`\n  font-family: monospace;\n  font-size: 14px;\n  overflow-y: auto;\n  height: 100px;\n`;\nconst Label = styled.span`\n  font-weight: 600;\n`;\nconst Settings = styled.div`\n  margin-bottom: 1em;\n  z-index: 1000;\n`;\nconst Controls = styled.div`\n  margin-bottom: 1em;\n`;\nconst CardControl = styled.div`\n  cursor: pointer;\n  color: var(--violet8);\n  margin-bottom: 1em;\n`;\nconst AllSettings = styled.div``;\nconst InputWrapper = styled.div`\n  padding-bottom: 1em;\n`;\nconst Question = styled.input`\n  border-top-left-radius: 2rem;\n  border-bottom-left-radius: 2rem;\n`;\nconst UserMessage = styled.div``;\nconst AgentMessage = styled.div`\n  background-color: #f9f9f9;\n`;\n\nconst renderSettings = () => {\n  return (\n    <Settings>\n      <CardControl bold onClick={toggleSettings}>\n        <i className={settingsOpen ? \"ph ph-caret-up\" : \"ph ph-caret-down\"} />{\" \"}\n        Settings\n      </CardControl>\n      {settingsOpen && (\n        <AllSettings>\n          <InputWrapper>\n            <Widget\n              src=\"near/widget/DIG.Input\"\n              props={{\n                label: \"Walls API Endpoint\",\n                assistiveText: \"Enter the API endpoint for managing walls\",\n                iconLeft: \"ph-bold ph-link\",\n                onInput: (e) => setWallsApiEndpoint(e.target.value),\n                value: wallsApiEndpoint,\n              }}\n            />\n          </InputWrapper>\n\n          <InputWrapper>\n            <Widget\n              src=\"near/widget/DIG.InputSelect\"\n              props={{\n                groups: [\n                  {\n                    label: \"NEAR\",\n                    items: [\n                      {\n                        label: \"NEAR Llama 7b\",\n                        value: \"near-llama-7b\",\n                      },\n                      // Hi hackathon teams, implementing calls to gpt4.near? Add it here. - the black dragon\n                    ],\n                  },\n                  {\n                    label: \"Groq\",\n                    items: [\n                      {\n                        label: \"Mixtral 8x7b 32768\",\n                        value: \"mixtral-8x7b-32768\",\n                      },\n                      {\n                        label: \"Llama2 70b 4096\",\n                        value: \"llama2-70b-4096\",\n                      },\n                    ],\n                  },\n                  {\n                    label: \"OpenAI\",\n                    items: [\n                      {\n                        label: \"GPT-4\",\n                        value: \"gpt-4\",\n                      },\n                      {\n                        label: \"GPT-3.5 turbo\",\n                        value: \"gpt-3.5-turbo\",\n                      },\n                    ],\n                  },\n                  {\n                    label: \"Local\",\n                    items: [\n                      {\n                        label: \"Local\",\n                        value: \"local\",\n                      },\n                    ],\n                  },\n                ],\n                label: \"Choose Model\",\n                placeholder: \"OpenAI GPT-3\",\n                rootProps: {\n                  value: model,\n                  onValueChange: setModel,\n                },\n              }}\n            />\n          </InputWrapper>\n          {model === \"local\" && (\n            <InputWrapper>\n              <Widget\n                src=\"near/widget/DIG.Input\"\n                props={{\n                  label: \"Local Model URL\",\n                  assistiveText:\n                    \"Any url that accepts messages in OpenAI format\",\n                  iconLeft: \"ph-bold ph-horse\",\n                  onInput: (e) => setLocalModel(e.target.value),\n                  value: localModel,\n                }}\n              />\n            </InputWrapper>\n          )}\n          <InputWrapper>\n            <div className=\"row\">\n              <div className=\"col-3\">\n                <Widget\n                  src=\"near/widget/DIG.InputSelect\"\n                  props={{\n                    groups: [\n                      {\n                        label: \"OpenAI, Groq, or other API Key\",\n                        items: [\n                          {\n                            label: \"Bearer Token\",\n                            value: \"bearer\",\n                          },\n                        ],\n                      },\n                    ],\n                    label: \"Credential Type\",\n                    rootProps: {\n                      value: credentialType,\n                      onValueChange: setCredentialType,\n                    },\n                  }}\n                />\n              </div>\n              <div className=\"col\">\n                <Widget\n                  src=\"near/widget/DIG.Input\"\n                  props={{\n                    label: \"Credentials\",\n                    assistiveText:\n                      \"Your OpenAI API Key or other credentials, will be stored in your browser.\",\n                    iconLeft: \"ph-bold ph-identification-card\",\n                    onInput: (e) => setCredential(e.target.value),\n                    value: credential,\n                    type: \"password\",\n                  }}\n                />\n              </div>\n            </div>\n          </InputWrapper>\n          <InputWrapper>\n            <Widget\n              src=\"near/widget/DIG.Checkbox\"\n              props={{\n                id: \"json-output\",\n                label: \"JSON Output mode\",\n                checked: jsonOutputSetting,\n                onCheckedChange: setJsonOutputSetting,\n              }}\n            />{\" \"}\n            not supported by all providers.\n          </InputWrapper>\n        </AllSettings>\n      )}\n    </Settings>\n  );\n};\n\nreturn (\n  <Wrapper>\n    <div>\n      {!embedded && (\n        <div>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <strong>Trade Walls is currently in development</strong>, check\n              the <a href=\"https://github.com/255BITS/trade-walls\">github</a>{\" \"}\n              for updates.\n            </div>\n          </div>\n          <Link to={listLink}>\n            <Header>\n              <i className=\"ph ph-arrow-left\" />\n              Agent List\n            </Header>\n          </Link>\n          <Overview>\n            <div className=\"row\">\n              <div className=\"col-5\">\n                <Widget\n                  src=\"near/widget/AI.Agent.AgentSummary\"\n                  props={{\n                    size: \"small\",\n                    showTags: true,\n                    agent: agent,\n                  }}\n                />\n              </div>\n              <div className=\"col-7\">\n                {error && (\n                  <div key=\"error\">\n                    Please make sure your server is running and adblock is\n                    disabled.\n                    <a\n                      href=\"https://github.com/255BITS/trade-walls\"\n                      target=\"_blank\"\n                    >\n                      Download trade-walls\n                    </a>\n                    <Widget\n                      src=\"near/widget/DIG.Button\"\n                      props={{\n                        onClick: connectBackend,\n                        iconLeft: editIcon,\n                        variant: \"affirmative\",\n                        fill: \"solid\",\n                        size: \"large\",\n                        label: \"Reconnect\",\n                        style: {\n                          borderTopLeftRadius: \"0rem\",\n                          borderBottomLeftRadius: \"0rem\",\n                        },\n                      }}\n                    ></Widget>\n                  </div>\n                )}\n                {!error && (\n                  <div>You are connected to the trade-walls server.</div>\n                )}\n\n                <div key=\"response\">{JSON.stringify(response)}</div>\n              </div>\n            </div>\n          </Overview>\n        </div>\n      )}\n      <WallsList></WallsList>\n      <Controls>\n        {renderSettings()}\n        {requiresCredentials(model) && credential === \"\" && (\n          <div className=\"alert alert-danger mx-3\" role=\"alert\">\n            <i className=\"ph ph-alert-circle\" /> To use an OpenAI or Groq model\n            enter your API Key in Settings or change to another provider.\n          </div>\n        )}\n        <div className=\"input-group\">\n          <Question\n            type=\"text\"\n            className=\"form-control\"\n            value={question}\n            onChange={(e) => setQuestion(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.key === \"Enter\") {\n                submitQuestion();\n              }\n            }}\n            placeholder=\"What's your command?\"\n            //autoFocus\n          />\n          <Widget\n            src=\"near/widget/DIG.Button\"\n            props={{\n              onClick: submitQuestion,\n              iconLeft: editIcon,\n              variant: \"affirmative\",\n              fill: \"solid\",\n              size: \"large\",\n              label: \"Submit\",\n              disabled:\n                (requiresCredentials(model) && credential === \"\") ||\n                question === \"\",\n              style: {\n                borderTopLeftRadius: \"0rem\",\n                borderBottomLeftRadius: \"0rem\",\n              },\n            }}\n          />\n        </div>\n      </Controls>\n\n      <div className=\"d-flex flex-column-reverse\">\n        {messages.map(({ role, content }, i) => {\n          return (\n            <div key={i} className={`message ${role}`}>\n              {role === \"user\" && (\n                <UserMessage>\n                  <Widget\n                    src=\"mob.near/widget/N.ProfileLine\"\n                    props={{ accountId: context.accountId }}\n                  />\n                  <Markdown text={content} />\n                </UserMessage>\n              )}\n              {role !== \"user\" && (\n                <AgentMessage>\n                  <Markdown text={content} />\n                  <ActionParser content={content}></ActionParser>\n                </AgentMessage>\n              )}\n            </div>\n          );\n        })}\n        {loading && (\n          <div key=\"loading\" className={`message system`}>\n            <div>\n              <span\n                className=\"spinner-grow spinner-grow-sm me-1\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/trade-walls.near/widget/AI.Agent.AgentChat", "fact_widget_deployments_id": "2d952638db663ca162d728c4f3f350e1", "inserted_timestamp": "2024-03-19T21:27:29.147Z", "modified_timestamp": "2024-03-19T22:30:05.446Z", "__row_index": 9}