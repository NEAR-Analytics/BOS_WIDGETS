{"tx_hash": "9eRh77fLbwKnPesDJAiKD6s5YhF2rDyacWFvUUdfeKUA", "action_id_social": "2GFn4XoYbyyFL6JYBeg26EmgQTUTwJfdvfnkpX1ztXEu-0-widget", "block_id": 94245520, "block_timestamp": "2023-06-15T14:27:02.197Z", "signer_id": "aave-v3.near", "widget_name": "AAVE.Modal.WithdrawModal", "source_code": "const { config, data, onRequestClose, onActionSuccess } = props;\n\nif (!data) {\n  return;\n}\n\nconst ROUND_DOWN = 0;\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst {\n  underlyingAsset,\n  decimals,\n  symbol,\n  underlyingBalance,\n  underlyingBalanceUSD,\n  marketReferencePriceInUsd,\n  aTokenAddress,\n} = data;\n\nconst WithdrawContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst TokenTexture = styled.div`\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n`;\n\nconst TokenWrapper = styled.div`\n  display: flex;\n  img {\n    margin-right: 4px;\n  }\n`;\n\nconst GrayTexture = styled.div`\n  font-size: 12px;\n  font-weight: 500;\n  color: #7c7c86;\n`;\n\nconst PurpleTexture = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  color: #8a8db9;\n`;\n\nconst WhiteTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: white;\n`;\nconst TransactionOverviewContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst Input = styled.input`\n  background: transparent;\n  border: none;\n  outline: none;\n\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n  flex: 1;\n  width: 160px;\n\n  &[type=\"number\"]::-webkit-outer-spin-button,\n  &[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nState.init({\n  amount: \"\",\n  amountInUSD: \"0.00\",\n  allowanceAmount: 0,\n  needApprove: false,\n});\n\nconst _remainingSupply = Number(underlyingBalance) - Number(state.amount);\nconst remainingSupply = isNaN(_remainingSupply)\n  ? underlyingBalance\n  : Big(_remainingSupply).toFixed(2);\n\nfunction withdrawErc20(asset, amount) {\n  return Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      const pool = new ethers.Contract(\n        config.aavePoolV3Address,\n        config.aavePoolV3ABI.body,\n        Ethers.provider().getSigner()\n      );\n\n      return pool[\"withdraw(address,uint256,address)\"](asset, amount, address);\n    })\n    .then((tx) => {\n      tx.wait().then((res) => {\n        const { status } = res;\n        if (status === 1) {\n          onActionSuccess({\n            msg: `You withdraw ${Big(amount)\n              .div(Big(10).pow(decimals))\n              .toFixed(8)} ${symbol}`,\n            callback: onRequestClose,\n          });\n          console.log(\"tx succeeded\", res);\n        } else {\n          console.log(\"tx failed\", res);\n        }\n      });\n    });\n}\n\nfunction withdrawETH(amount) {\n  return Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      const wrappedTokenGateway = new ethers.Contract(\n        config.wrappedTokenGatewayV3Address,\n        config.wrappedTokenGatewayV3ABI.body,\n        Ethers.provider().getSigner()\n      );\n\n      return wrappedTokenGateway.withdrawETH(\n        config.aavePoolV3Address,\n        amount,\n        address\n      );\n    })\n    .then((tx) => {\n      tx.wait().then((res) => {\n        const { status } = res;\n        if (status === 1) {\n          onActionSuccess({\n            msg: `You withdraw ${Big(amount)\n              .div(Big(10).pow(decimals))\n              .toFixed(8)} ${symbol}`,\n            callback: onRequestClose,\n          });\n          console.log(\"tx succeeded\", res);\n        } else {\n          console.log(\"tx failed\", res);\n        }\n      });\n    });\n}\n\nfunction approveForGateway(tokenAddress, amount) {\n  const token = new ethers.Contract(\n    tokenAddress,\n    config.erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  return token.approve(config.wrappedTokenGatewayV3Address, amount);\n}\n\nfunction allowanceForGateway(tokenAddress) {\n  return Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      const token = new ethers.Contract(\n        tokenAddress,\n        config.erc20Abi.body,\n        Ethers.provider().getSigner()\n      );\n\n      return token.allowance(address, config.wrappedTokenGatewayV3Address);\n    });\n}\n\nfunction update() {\n  allowanceForGateway(aTokenAddress)\n    .then((amount) => Number(amount.toString()))\n    .then((amount) =>\n      State.update({\n        allowanceAmount: Big(amount).div(Big(10).pow(decimals)).toNumber(),\n      })\n    );\n\n  if (\n    !isValid(state.amount) ||\n    !isValid(state.allowanceAmount) ||\n    Number(state.allowanceAmount) < Number(state.amount) ||\n    Number(state.amount) === 0\n  ) {\n    State.update({ needApprove: true });\n  } else {\n    State.update({ needApprove: false });\n  }\n}\n\nupdate();\n\nreturn (\n  <Widget\n    src={`${config.ownerId}/widget/AAVE.Modal.BaseModal`}\n    props={{\n      title: `Withdraw ${symbol}`,\n      onRequestClose: props.onRequestClose,\n      children: (\n        <WithdrawContainer>\n          <Widget\n            src={`${config.ownerId}/widget/AAVE.Modal.RoundedCard`}\n            props={{\n              title: \"Amount\",\n              config,\n              children: (\n                <>\n                  <Widget\n                    src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                    props={{\n                      left: (\n                        <TokenTexture>\n                          <Input\n                            type=\"number\"\n                            value={state.amount}\n                            onChange={(e) => {\n                              const value = e.target.value;\n                              if (isValid(value)) {\n                                State.update({\n                                  amountInUSD: Big(value)\n                                    .mul(marketReferencePriceInUsd)\n                                    .toFixed(2, ROUND_DOWN),\n                                });\n                              } else {\n                                State.update({ amountInUSD: \"0.00\" });\n                              }\n                              State.update({ amount: value });\n                            }}\n                            placeholder=\"0\"\n                          />\n                        </TokenTexture>\n                      ),\n                      right: (\n                        <TokenWrapper>\n                          <img\n                            width={26}\n                            height={26}\n                            src={`https://app.aave.com/icons/tokens/${symbol.toLowerCase()}.svg`}\n                          />\n                          <TokenTexture>{symbol}</TokenTexture>\n                        </TokenWrapper>\n                      ),\n                    }}\n                  />\n                  <Widget\n                    src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                    props={{\n                      left: <GrayTexture>${state.amountInUSD}</GrayTexture>,\n                      right: (\n                        <GrayTexture>\n                          Supply Balance:{\" \"}\n                          {Big(underlyingBalance).toFixed(3, ROUND_DOWN)}\n                        </GrayTexture>\n                      ),\n                    }}\n                  />\n                </>\n              ),\n            }}\n          />\n          <Widget\n            src={`${config.ownerId}/widget/AAVE.Modal.RoundedCard`}\n            props={{\n              title: \"Transaction Overview\",\n              config,\n              children: (\n                <TransactionOverviewContainer>\n                  <Widget\n                    src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                    props={{\n                      left: <PurpleTexture>Remaining Supply</PurpleTexture>,\n                      right: (\n                        <WhiteTexture>{remainingSupply} USDT</WhiteTexture>\n                      ),\n                    }}\n                  />\n                </TransactionOverviewContainer>\n              ),\n            }}\n          />\n          {state.needApprove && symbol === \"ETH\" && (\n            <Widget\n              src={`${config.ownerId}/widget/AAVE.PrimaryButton`}\n              props={{\n                children: `Approve ${symbol}`,\n                onClick: () => {\n                  const amount = Big(state.amount)\n                    .mul(Big(10).pow(decimals))\n                    .toFixed(0);\n                  approveForGateway(aTokenAddress, amount).then((tx) => {\n                    tx.wait().then((res) => {\n                      const { status } = res;\n                      if (status === 1) {\n                        State.update({ needApprove: false });\n                      }\n                    });\n                  });\n                },\n              }}\n            />\n          )}\n          {!(state.needApprove && symbol === \"ETH\") && (\n            <Widget\n              src={`${config.ownerId}/widget/AAVE.PrimaryButton`}\n              props={{\n                children: \"Withdraw\",\n                onClick: () => {\n                  const amount = Big(state.amount)\n                    .mul(Big(10).pow(decimals))\n                    .toFixed(0);\n                  if (symbol === \"ETH\" || symbol === \"WETH\") {\n                    // supply weth\n                    withdrawETH(amount);\n                  } else {\n                    // supply common\n                    withdrawErc20(underlyingAsset, amount);\n                  }\n                },\n              }}\n            />\n          )}\n        </WithdrawContainer>\n      ),\n      config,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/aave-v3.near/widget/AAVE.Modal.WithdrawModal", "fact_widget_deployments_id": "d077e8d84b2b7886cab3ba2ec32dd296", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 13}