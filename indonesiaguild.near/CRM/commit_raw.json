{"tx_hash": "HY6yxnRfJrN9B7juhSNaYRzAZVnspEuNRms1WfAzVi2w", "action_id_social": "By1YgGSrYLGr56cgj5ytEz66fZJQtgJFPb2j57LktQy3-0-widget", "block_id": 107506895, "block_timestamp": "2023-12-09T09:37:32.851Z", "signer_id": "indonesiaguild.near", "widget_name": "CRM", "source_code": "State.init({ filter: \"all\" });\nState.update({ members: props.members });\nconst data = state.members\n  .flatMap((member) => Social.keys(`${member}/profile/`, \"final\"))\n  .reduce((obj, item) => Object.assign(obj, item), {});\nconst telegram = state.members\n  .flatMap((member) =>\n    Social.keys(`${member}/profile/linktree/telegram`, \"final\")\n  )\n  .reduce((obj, item) => Object.assign(obj, item), {});\nconst github = state.members\n  .flatMap((member) =>\n    Social.keys(`${member}/profile/linktree/github`, \"final\")\n  )\n  .reduce((obj, item) => Object.assign(obj, item), {});\nconst twitter = state.members\n  .flatMap((member) =>\n    Social.keys(`${member}/profile/linktree/twitter`, \"final\")\n  )\n  .reduce((obj, item) => Object.assign(obj, item), {});\nconst website = state.members\n  .flatMap((member) =>\n    Social.keys(`${member}/profile/linktree/website`, \"final\")\n  )\n  .reduce((obj, item) => Object.assign(obj, item), {});\n\nif (!data || !telegram || !github || !twitter || !website) {\n  return \"Loading...\";\n}\n\nlet filterBy = {};\nfilterBy[\"all\"] = new Set([...Object.keys(data)]);\nfilterBy[\"telegram\"] = new Set([...Object.keys(telegram)]);\nfilterBy[\"github\"] = new Set([...Object.keys(github)]);\nfilterBy[\"twitter\"] = new Set([...Object.keys(twitter)]);\nfilterBy[\"website\"] = new Set([...Object.keys(website)]);\n\nconst profilesPerPage = 10;\n\nconst [currentPage, setCurrentPage] = useState(1);\n\nconst startIndex = (currentPage - 1) * profilesPerPage;\n\nconst endIndex = startIndex + profilesPerPage;\n\nlet displayedProfiles = [...filterBy[state.filter]].slice(startIndex, endIndex);\n\nconst handlePageChange = (page) => {\n  setCurrentPage(page);\n};\n\nconst totalPages = Math.ceil(\n  Object.keys(data).filter((accountId) => filterBy[state.filter].has(accountId))\n    .length / profilesPerPage\n);\n\nconst accounts = displayedProfiles.map((accountId) => (\n  <div className=\"m-2\" key={accountId}>\n    <hr />\n\n    <Widget src=\"hack.near/widget/profile.linktree\" props={{ accountId }} />\n  </div>\n));\n\nreturn (\n  <div>\n    <h3 className=\"m-2 mb-3\">Community Members</h3>\n    <br />\n    <div className=\"flex-row m-2\">\n      <h5>Filter</h5>\n      <button\n        onClick={() => State.update({ filter: \"twitter\" })}\n        disabled={state.filter === \"twitter\"}\n      >\n        Twitter\n      </button>\n      <button\n        onClick={() => State.update({ filter: \"github\" })}\n        disabled={state.filter === \"github\"}\n      >\n        GitHub\n      </button>\n      <button\n        onClick={() => State.update({ filter: \"telegram\" })}\n        disabled={state.filter === \"telegram\"}\n      >\n        Telegram\n      </button>\n      <button\n        onClick={() => State.update({ filter: \"website\" })}\n        disabled={state.filter === \"website\"}\n      >\n        Website\n      </button>\n      <button\n        onClick={() => State.update({ filter: \"all\" })}\n        disabled={state.filter === \"all\"}\n      >\n        Reset\n      </button>\n    </div>\n    <br />\n    <h5 className=\"m-2 mb-3\">{[...filterBy[state.filter]].length} total</h5>\n    <div className=\"m-2\">{accounts}</div>\n    <div className=\"m-3\">\n      <hr />\n      <button\n        onClick={() => handlePageChange(currentPage - 1)}\n        disabled={currentPage === 1}\n      >\n        Previous Page\n      </button>\n      <button\n        onClick={() => handlePageChange(currentPage + 1)}\n        disabled={currentPage === totalPages}\n      >\n        Next Page\n      </button>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/indonesiaguild.near/widget/CRM", "fact_widget_deployments_id": "2f78bb1fa440fc79993a19a6a52d4e41", "inserted_timestamp": "2023-12-09T11:34:42.050Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 1}