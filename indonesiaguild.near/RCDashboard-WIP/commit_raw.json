{"tx_hash": "Fg2UEouz7JEAvsAsqSJzEfjNNoCpgKcLiiQHF6tj755J", "action_id_social": "FcYcuyBN9rwqCxh9GL7kWq1M6T7L5ZqShNA5zmQMa13W-0-widget", "block_id": 109451970, "block_timestamp": "2024-01-03T02:11:30.327Z", "signer_id": "indonesiaguild.near", "widget_name": "RCDashboard-WIP", "source_code": "// Proxy API - https://github.com/emarai/api-rcdashboard\nconst API_URL = \"https://vercel-express-blond.vercel.app/api/run\";\n\nconst getMembers = (accountId) => {\n  if (!accountId) return [];\n\n  let followers = new Set(\n    Object.keys(\n      Social.keys(`*/graph/follow/${accountId}`, \"final\", {\n        return_type: \"BlockHeight\",\n        values_only: true,\n      }) || {}\n    )\n  );\n\n  let following = Object.keys(\n    Social.keys(\n      `${accountId}/graph/follow/*`,\n      \"final\",\n      {\n        return_type: \"BlockHeight\",\n        values_only: true,\n      } || {}\n    )?.[accountId]?.graph?.follow || {}\n  );\n\n  let members = [...new Set(following.filter((item) => followers.has(item)))];\n\n  // The RC account is part of members\n  members.push(accountId);\n\n  return members;\n};\n\nconst rcDaoMembers = getMembers(\"rc-dao.near\");\nconst communityAccounts = rcDaoMembers;\n\nState.init({\n  selectedCommunityAccountMembers: [],\n  selectedCommunityAccount: null,\n  menu: \"all-rc\",\n  allMembers: [],\n});\n\nconst getWidgetsCount = (accountId) => {\n  return Object.keys(\n    Social.keys(`${accountId}/widget/*`, \"final\", {\n      return_type: \"BlockHeight\",\n      values_only: false,\n    })[accountId].widget || {}\n  ).length;\n};\n\nconst getTotalWidgetByMembers = (members) => {\n  if (!members) return 0;\n\n  const total = members\n    .map((accountId) => {\n      return getWidgetsCount(accountId);\n    })\n    .reduce((a, b) => a + b, 0);\n  return total;\n};\n\nconst getTotalPostByMembers = (members) => {\n  if (!members) return 0;\n\n  const total = members\n    .map((accountId) => {\n      return Object.keys(\n        Social.keys(`${accountId}/post/*`, \"final\", {\n          return_type: \"BlockHeight\",\n          values_only: false,\n        })[accountId].post || {}\n      ).length;\n    })\n    .reduce((a, b) => a + b, 0);\n  return total;\n};\n\nconst widgetDisplay = (members) => {\n  return members.map((member) => {\n    if (getWidgetsCount(member) > 0) {\n      return (\n        <Widget src=\"mob.near/widget/Widgets\" props={{ accountId: member }} />\n      );\n    }\n  });\n};\n\nconst chart = ({\n  data,\n  header,\n  valueLabel,\n  label,\n  barColor,\n  staticDisplay,\n}) => {\n  const srcDoc = `\n<script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<canvas id=\"myChart\" style=\"position: relative; height:80vh; width:80vw\"></canvas>\n\n<script>\nasync function fetchData() {\n\nconst sortedData = ${data}.sort((a, b) => {\n  return new Date(a[\"year_month\"]) - new Date(b[\"year_month\"]);\n});\n\nconst ${valueLabel} = {};\n\nsortedData.map((entry) => {\n  ${valueLabel}[entry[\"year_month\"]] = entry[\"${valueLabel}\"];\n});\n\nconst dates = sortedData.map((entry) => entry[\"year_month\"]);\n\n\n  var ctx = document.getElementById('myChart').getContext('2d');\n  var myChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n          labels: dates,\n          datasets: [\n   {\n      label: \"${label}\",\n      data: ${valueLabel},\n        backgroundColor: \"${barColor}\",\n      },\n          ]\n      },\n      options: {\n  scales: {\n      y: {\n        stacked: true,\n        grid: {\n          color: \"rgba(255, 0, 0, 0.2)\", // This will change the gridline color\n          borderColor: \"rgb(240,255,240)\",\n        },\n        ticks: {\n          color: \"rgb(0,0,0)\", // This will change the axis text label color\n        },\n      },\n      x: {\n        stacked: true,\n        grid: {\n          color: \"rgba(255, 0, 0, 0.2)\", // This will change the gridline color\n        },\n        ticks: {\n          color: \"rgb(0,0,0)\", // This will change the axis text label color\n        },\n      },\n    },\n      }\n  });\n}\n\nfetchData();\n</script>\n`;\n  // handle data null from flipside\n  if (data == \"null\") {\n    return (\n      <Widget\n        src=\"contribut3.near/widget/Card\"\n        props={{\n          header: header,\n          body: (\n            <div style={{ margin: \"auto\" }}>\n              Data not found. Empty data from flipside.\n            </div>\n          ),\n        }}\n      />\n    );\n  }\n  return (\n    <Widget\n      src=\"contribut3.near/widget/Card\"\n      props={{\n        header: header,\n        body:\n          staticDisplay != undefined ? (\n            <div style={{ margin: \"auto\" }}>{staticDisplay}</div>\n          ) : data ? (\n            <iframe\n              className=\"w-100\"\n              style={{ height: \"300px\" }}\n              srcDoc={srcDoc}\n            />\n          ) : (\n            <div style={{ margin: \"auto\" }}>\n              <Widget src=\"flashui.near/widget/Loading\" props={{}} />\n            </div>\n          ),\n      }}\n    />\n  );\n};\n\nconst chartDappUsage = ({ data, header, label }) => {\n  const srcDoc = `\n<script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<canvas id=\"myChart\" style=\"position: relative; height:80vh; width:80vw\"></canvas>\n\n<script>\nasync function fetchData() {\n\nconst tempData = ${data};\n\nconst title = tempData.map((entry) => entry[\"dapp\"]);\n\n\n  var ctx = document.getElementById('myChart').getContext('2d');\n  var myChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n          labels: title,\n          datasets: [\n          {\n              label: \"${label}\",\n              data: tempData.map(entry => entry.txs)\n          }\n          ]\n      }\n  });\n}\n\nfetchData();\n</script>\n`;\n  return (\n    <Widget\n      src=\"contribut3.near/widget/Card\"\n      props={{\n        header: header,\n        body: data ? (\n          <iframe\n            className=\"w-100\"\n            style={{ height: \"750px\" }}\n            srcDoc={srcDoc}\n          />\n        ) : (\n          <div style={{ margin: \"auto\" }}>\n            <Widget src=\"flashui.near/widget/Loading\" props={{}} />\n          </div>\n        ),\n      }}\n    />\n  );\n};\n\nconst widgetRank = (members) => {\n  const data = Social.get(\"*/graph/star/**\", \"final\");\n\n  const starCountsByWidget = {};\n\n  if (data)\n    Object.keys(data).forEach((user) => {\n      const userData = data[user];\n      const widgetData = userData?.graph?.star;\n\n      if (widgetData) {\n        members.map((widgetCreator) => {\n          const widgetList = widgetData[widgetCreator]?.widget;\n\n          if (widgetList) {\n            Object.keys(widgetList).forEach((widgetName) => {\n              const widgetPath = `${widgetCreator}/widget/${widgetName}`;\n\n              if (!starCountsByWidget[widgetPath]) {\n                starCountsByWidget[widgetPath] = 0;\n              }\n\n              if (typeof widgetList[widgetName] !== \"undefined\") {\n                starCountsByWidget[widgetPath]++;\n              }\n            });\n          }\n        });\n      }\n    });\n\n  const rankedWidgets = Object.entries(starCountsByWidget)\n    .filter(([widgetName, totalStars]) => typeof totalStars !== \"undefined\")\n    .sort((a, b) => b[1] - a[1]);\n\n  if (rankedWidgets.length == 0) {\n    return <p>Widgets created by members have not been starred.</p>;\n  }\n  return (\n    <div>\n      <h3>Top Widgets by Members</h3>\n      <ol>\n        {rankedWidgets.map(([widgetPath, totalStars], index) => {\n          const [widgetCreator, _, widgetName] = widgetPath.split(\"/\");\n          return (\n            <li key={widgetPath}>\n              <a href={`/near/widget/ComponentDetailsPage?src=${widgetPath}`}>\n                {widgetName}\n              </a>{\" \"}\n              ({totalStars} stars) by{\" \"}\n              <Widget\n                src=\"mob.near/widget/N.ProfileLine\"\n                props={{ accountId: widgetCreator, hideAccountId: true }}\n              />\n            </li>\n          );\n        })}\n      </ol>\n    </div>\n  );\n};\n\nfunction wait(delay) {\n  return new Promise((resolve) => setTimeout(resolve, delay));\n}\n\nfunction fetchRetry(url, delay, tries, stateKey) {\n  function onError(err) {\n    console.log(\"err\", err);\n    let triesLeft = tries - 1;\n    if (!triesLeft) {\n      throw err;\n    }\n    return wait(delay).then(() => fetchRetry(url, delay, triesLeft));\n  }\n  return asyncFetch(url).then((result) => {\n    if (result.ok === true) {\n      return State.update({ [stateKey]: JSON.stringify(result.body) });\n    } else {\n      onError(result.body);\n    }\n  });\n}\n\nconst generateMAU = (accountId) => {\n  const queryParams = `account_id=${accountId}&stats_type=mau`;\n  fetchRetry(`${API_URL}?${queryParams}`, 1000, 10, \"mauChartData\");\n};\n\nconst generateDAU = (accountId) => {\n  const queryParams = `account_id=${accountId}&stats_type=dau`;\n  fetchRetry(`${API_URL}?${queryParams}`, 1000, 10, \"dauChartData\");\n};\n\nconst generateGithubActivities = (accountId) => {\n  const queryParams = `account_id=${accountId}&stats_type=github_activities`;\n  fetchRetry(`${API_URL}?${queryParams}`, 1000, 10, \"githubChartData\");\n};\n\nconst generateTotalLikes = (accountId) => {\n  const queryParams = `account_id=${accountId}&stats_type=total_likes`;\n  fetchRetry(`${API_URL}?${queryParams}`, 1000, 10, \"totalLikes\");\n};\n\nconst generateTotalWalletsCreated = (accountId) => {\n  const queryParams = `account_id=${accountId}&stats_type=total_wallets_created`;\n  fetchRetry(`${API_URL}?${queryParams}`, 1000, 10, \"totalWallets\");\n};\n\nconst generateNFTMints = (accountId) => {\n  const queryParams = `account_id=${accountId}&stats_type=nft_mints`;\n  fetchRetry(`${API_URL}?${queryParams}`, 1000, 10, \"nftMintsChartData\");\n};\n\nconst generateDappUsage = (accountId) => {\n  const queryParams = `account_id=${accountId}&stats_type=dapp_usage`;\n  fetchRetry(`${API_URL}?${queryParams}`, 1000, 10, \"dappUsageChartData\");\n};\n\nState.update({\n  selectedCommunityAccountMembers: getMembers(state.selectedCommunityAccount),\n});\nif (state.menu === \"developer\")\n  generateGithubActivities(state.selectedCommunityAccount);\nif (state.menu === \"overview\" || state.menu === \"dapp\")\n  generateMAU(state.selectedCommunityAccount);\nif (state.menu === \"overview\")\n  generateTotalLikes(state.selectedCommunityAccount);\nif (state.menu === \"overview\" || state.menu === \"dapp\")\n  generateDAU(state.selectedCommunityAccount);\nif (state.menu === \"overview\")\n  generateTotalWalletsCreated(state.selectedCommunityAccount);\nif (state.menu === \"nft\") generateNFTMints(state.selectedCommunityAccount);\nif (state.menu === \"dapp\") generateDappUsage(state.selectedCommunityAccount);\n\nif (state.menu === \"all-overview\") {\n  State.update({\n    allMembers: rcDaoMembers.flatMap((rcAccountId) => getMembers(rcAccountId)),\n  });\n  generateTotalLikes(\"rc-dao.near\");\n  generateDAU(\"rc-dao.near\");\n  generateNFTMints(\"rc-dao.near\");\n  generateMAU(\"rc-dao.near\");\n  generateGithubActivities(\"rc-dao.near\");\n}\n\nreturn (\n  <div className=\"container\">\n    <h1>Regional Community Dashboard WIP</h1>\n    <Typeahead\n      placeholder=\"Select your regional community account:\"\n      options={communityAccounts}\n      value={state.selectedCommunityAccount}\n      onChange={(value) =>\n        State.update({\n          selectedCommunityAccount: value,\n          menu: \"overview\",\n          queryResultIdMAU: null,\n          queryResultIdDevActivities: null,\n          totalLikes: null,\n          githubChartData: null,\n          mauChartData: null,\n          dauChartData: null,\n          nftMintsChartData: null,\n          dappUsageChartData: null,\n          totalWallets: null,\n        })\n      }\n    />\n    {/* Menu */}\n    <div className=\"m-1\">\n      <button\n        onClick={() => State.update({ menu: \"all-rc\" })}\n        disabled={\n          state.selectedCommunityAccount !== null || state.menu === \"all-rc\"\n        }\n        hidden={state.selectedCommunityAccount !== null}\n      >\n        List of RCs\n      </button>\n      <button\n        onClick={() => State.update({ menu: \"all-overview\" })}\n        disabled={\n          state.selectedCommunityAccount !== null ||\n          state.menu === \"all-overview\"\n        }\n        hidden={state.selectedCommunityAccount !== null}\n      >\n        Overview Stats\n      </button>\n      <button\n        onClick={() => State.update({ menu: \"overview\" })}\n        disabled={\n          state.selectedCommunityAccount === null || state.menu === \"overview\"\n        }\n        hidden={state.selectedCommunityAccount === null}\n      >\n        Overview\n      </button>\n      <button\n        onClick={() => State.update({ menu: \"developer\" })}\n        disabled={\n          state.selectedCommunityAccount === null || state.menu === \"developer\"\n        }\n        hidden={state.selectedCommunityAccount === null}\n      >\n        Developer Activities\n      </button>\n      <button\n        onClick={() => State.update({ menu: \"widget-list\" })}\n        disabled={\n          state.selectedCommunityAccount === null ||\n          state.menu === \"widget-list\"\n        }\n        hidden={state.selectedCommunityAccount === null}\n      >\n        Widget List\n      </button>\n      <button\n        onClick={() => State.update({ menu: \"dapp\" })}\n        disabled={\n          state.selectedCommunityAccount === null || state.menu === \"dapp\"\n        }\n        hidden={state.selectedCommunityAccount === null}\n      >\n        Dapp Activities\n      </button>\n      <button\n        onClick={() => State.update({ menu: \"nft\" })}\n        disabled={\n          state.selectedCommunityAccount === null || state.menu === \"nft\"\n        }\n        hidden={state.selectedCommunityAccount === null}\n      >\n        NFT Mints\n      </button>\n      <button\n        onClick={() => State.update({ menu: \"members\" })}\n        disabled={\n          state.selectedCommunityAccount === null || state.menu === \"members\"\n        }\n        hidden={state.selectedCommunityAccount === null}\n      >\n        Members List\n      </button>\n    </div>\n    {state.selectedCommunityAccount === null &&\n      state.menu === \"all-overview\" &&\n      state.allMembers.length > 1 && (\n        <div>\n          <Widget\n            src=\"nearhorizon.near/widget/InfoSegment\"\n            props={{\n              title: \"Info\",\n              description: `These statistics are all from accounts that are members from regional communities.`,\n            }}\n          />\n          <div>\n            {chart({\n              data: state[\"mauChartData\"],\n              header: <b>Monthly Active Members</b>,\n              valueLabel: \"mau\",\n              label: \"MAU (members)\",\n              barColor: \"rgb(192, 85, 85)\",\n            })}\n          </div>\n          <div>\n            {chart({\n              data: state[\"dauChartData\"],\n              header: <b>Daily Active Members</b>,\n              valueLabel: \"dau\",\n              label: \"DAU (members)\",\n              barColor: \"rgb(140, 85, 85)\",\n            })}\n          </div>\n          <div>\n            {chart({\n              header: <b>Total Posts by All Members</b>,\n              staticDisplay: getTotalPostByMembers(state.allMembers),\n            })}\n          </div>\n\n          <div>\n            {chart({\n              header: <b>Total Likes by Members</b>,\n              staticDisplay: JSON.parse(state[\"totalLikes\"])[0][\"total\"],\n            })}\n          </div>\n          <div>\n            {chart({\n              header: <b>Total Widgets by All Members</b>,\n              staticDisplay: getTotalWidgetByMembers(state.allMembers),\n            })}\n          </div>\n          <div>\n            {chart({\n              data: state[\"nftMintsChartData\"],\n              header: <b>NFT Mints Activity</b>,\n              valueLabel: \"total_activity\",\n              label: \"NFT Mints Activity\",\n              barColor: \"rgb(85, 85, 180)\",\n            })}\n          </div>\n          <div>\n            {chart({\n              data: state[\"githubChartData\"],\n              header: <b>Github Activities Members</b>,\n              valueLabel: \"total_issues_and_pr\",\n              label: \"Total Issues And PR Activities\",\n              barColor: \"rgb(85, 192, 192)\",\n            })}\n          </div>\n          <div>\n            {chart({\n              header: <b>Top Widgets</b>,\n              staticDisplay: widgetRank(state.allMembers),\n            })}\n          </div>\n        </div>\n      )}\n\n    {state.selectedCommunityAccount === null && state.menu === \"all-rc\" && (\n      <Widget src=\"rc-dao.near/widget/com.rank\" props={{}} />\n    )}\n\n    {state.menu === \"members\" && (\n      <div>\n        {chart({\n          header: <b>Members</b>,\n          staticDisplay: state.selectedCommunityAccountMembers && (\n            <Widget\n              src=\"indonesiaguild.near/widget/CRM\"\n              props={{ members: state.selectedCommunityAccountMembers }}\n            />\n          ),\n        })}\n      </div>\n    )}\n\n    {state.menu === \"developer\" && (\n      <>\n        {chart({\n          data: state[\"githubChartData\"],\n          header: <b>Github Activities Members</b>,\n          valueLabel: \"total_issues_and_pr\",\n          label: \"Total Issues And PR Activities\",\n          barColor: \"rgb(85, 192, 192)\",\n        })}\n        <div>\n          {chart({\n            header: <b>Total Widgets by Members</b>,\n            staticDisplay: getTotalWidgetByMembers(\n              state.selectedCommunityAccountMembers\n            ),\n          })}\n        </div>\n      </>\n    )}\n\n    {state.menu === \"overview\" && (\n      <>\n        <Widget\n          src=\"nearhorizon.near/widget/InfoSegment\"\n          props={{\n            title: \"Info\",\n            description: `Members are those who receive a followback from ${state.selectedCommunityAccount}`,\n          }}\n        />\n        <div>\n          {chart({\n            header: <b>Total Posts by Members</b>,\n            staticDisplay: getTotalPostByMembers(\n              state.selectedCommunityAccountMembers\n            ),\n          })}\n        </div>\n        <div style={{ display: \"flex\", flexFlow: \"row wrap\" }}>\n          <div style={{ width: \"calc(50%)\" }}>\n            {chart({\n              header: <b>Total Likes by Members</b>,\n              staticDisplay: JSON.parse(state[\"totalLikes\"])[0][\"total\"],\n            })}\n          </div>\n          <div style={{ width: \"calc(50%)\" }}>\n            {chart({\n              header: <b>Total Wallets Created by Members</b>,\n              staticDisplay: JSON.parse(state[\"totalWallets\"])[0][\"total\"],\n            })}\n          </div>\n        </div>\n      </>\n    )}\n    {state.menu === \"dapp\" && (\n      <div>\n        {chartDappUsage({\n          data: state[\"dappUsageChartData\"],\n          header: <b>Dapp Usage</b>,\n          valueLabel: \"txs\",\n          label: \"Total Transactions\",\n          barColor: \"rgb(85, 85, 180)\",\n        })}\n      </div>\n    )}\n\n    {state.menu === \"widget-list\" && (\n      <div>{widgetDisplay(state.selectedCommunityAccountMembers)}</div>\n    )}\n    {(state.menu === \"dapp\" || state.menu === \"overview\") && (\n      <>\n        <div>\n          {chart({\n            data: state[\"mauChartData\"],\n            header: <b>Monthly Active Members</b>,\n            valueLabel: \"mau\",\n            label: \"MAU (members)\",\n            barColor: \"rgb(192, 85, 85)\",\n          })}\n        </div>\n        <div>\n          {chart({\n            data: state[\"dauChartData\"],\n            header: <b>Daily Active Members</b>,\n            valueLabel: \"dau\",\n            label: \"DAU (members)\",\n            barColor: \"rgb(140, 85, 85)\",\n          })}\n        </div>\n      </>\n    )}\n    {state.menu === \"nft\" && (\n      <div>\n        {chart({\n          data: state[\"nftMintsChartData\"],\n          header: <b>NFT Mints Activity</b>,\n          valueLabel: \"total_activity\",\n          label: \"NFT Mints Activity\",\n          barColor: \"rgb(85, 85, 180)\",\n        })}\n      </div>\n    )}\n    {state.menu === \"developer\" && (\n      <div>\n        {chart({\n          header: <b>Top Widgets</b>,\n          staticDisplay: widgetRank(state.selectedCommunityAccountMembers),\n        })}\n      </div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/indonesiaguild.near/widget/RCDashboard-WIP", "fact_widget_deployments_id": "880136cca4cc79e772ec4f5a69ce81a7", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 8}