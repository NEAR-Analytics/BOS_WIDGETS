{"tx_hash": "AMvikhvwqPHUUnG2o5MKtrqXfhe3K8JBR5kMgTL4NGw2", "action_id_social": "96J6KD7ZBy8GHo7cXQ4vqaFnS4eD1qZt6APnA7vvunSs-0-widget", "block_id": 107509086, "block_timestamp": "2023-12-09T10:15:49.942Z", "signer_id": "indonesiaguild.near", "widget_name": "RCDashboard-WIP", "source_code": "const getMembers = (accountId) => {\n  if (!accountId) return [];\n\n  let followers = new Set(\n    Object.keys(\n      Social.keys(`*/graph/follow/${accountId}`, \"final\", {\n        return_type: \"BlockHeight\",\n        values_only: true,\n      }) || {}\n    )\n  );\n\n  let following = Object.keys(\n    Social.keys(\n      `${accountId}/graph/follow/*`,\n      \"final\",\n      {\n        return_type: \"BlockHeight\",\n        values_only: true,\n      } || {}\n    )?.[accountId]?.graph?.follow || {}\n  );\n\n  let members = [...new Set(following.filter((item) => followers.has(item)))];\n\n  // The RC account is part of members\n  members.push(accountId);\n\n  return members;\n};\n\nconst rcDaoMembers = getMembers(\"rc-dao.near\");\nconst communityAccounts = rcDaoMembers;\n\nState.init({\n  selectedCommunityAccountMembers: [],\n  selectedCommunityAccount: null,\n  menu: null,\n});\n\nconst getTotalWidgetByMembers = (members) => {\n  if (!members) return 0;\n\n  const total = members\n    .map((accountId) => {\n      return Object.keys(\n        Social.keys(`${accountId}/widget/*`, \"final\", {\n          return_type: \"BlockHeight\",\n          values_only: false,\n        })[accountId].widget || {}\n      ).length;\n    })\n    .reduce((a, b) => a + b, 0);\n  return total;\n};\n\nconst getTotalPostByMembers = (members) => {\n  if (!members) return 0;\n\n  const total = members\n    .map((accountId) => {\n      return Object.keys(\n        Social.keys(`${accountId}/post/*`, \"final\", {\n          return_type: \"BlockHeight\",\n          values_only: false,\n        })[accountId].post || {}\n      ).length;\n    })\n    .reduce((a, b) => a + b, 0);\n  return total;\n};\n\nconst chart = ({\n  data,\n  header,\n  valueLabel,\n  label,\n  barColor,\n  staticDisplay,\n}) => {\n  const srcDoc = `\n<script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<canvas id=\"myChart\" style=\"position: relative; height:80vh; width:80vw\"></canvas>\n\n<script>\nasync function fetchData() {\n\nconst sortedData = ${data}.sort((a, b) => {\n  return new Date(a[\"year_month\"]) - new Date(b[\"year_month\"]);\n});\n\nconst ${valueLabel} = {};\n\nsortedData.map((entry) => {\n  ${valueLabel}[entry[\"year_month\"]] = entry[\"${valueLabel}\"];\n});\n\nconst dates = sortedData.map((entry) => entry[\"year_month\"]);\n\n\n  var ctx = document.getElementById('myChart').getContext('2d');\n  var myChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n          labels: dates,\n          datasets: [\n   {\n      label: \"${label}\",\n      data: ${valueLabel},\n        backgroundColor: \"${barColor}\",\n      },\n          ]\n      },\n      options: {\n  scales: {\n      y: {\n        stacked: true,\n        grid: {\n          color: \"rgba(255, 0, 0, 0.2)\", // This will change the gridline color\n          borderColor: \"rgb(240,255,240)\",\n        },\n        ticks: {\n          color: \"rgb(0,0,0)\", // This will change the axis text label color\n        },\n      },\n      x: {\n        stacked: true,\n        grid: {\n          color: \"rgba(255, 0, 0, 0.2)\", // This will change the gridline color\n        },\n        ticks: {\n          color: \"rgb(0,0,0)\", // This will change the axis text label color\n        },\n      },\n    },\n      }\n  });\n}\n\nfetchData();\n</script>\n`;\n  return (\n    <Widget\n      src=\"contribut3.near/widget/Card\"\n      props={{\n        header: header,\n        body: staticDisplay ? (\n          <div style={{ margin: \"auto\" }}>{staticDisplay}</div>\n        ) : data ? (\n          <iframe\n            className=\"w-100\"\n            style={{ height: \"300px\" }}\n            srcDoc={srcDoc}\n          />\n        ) : (\n          <div style={{ margin: \"auto\" }}>\n            <Widget src=\"flashui.near/widget/Loading\" props={{}} />\n          </div>\n        ),\n      }}\n    />\n  );\n};\n\nconst chartDappUsage = ({ data, header, label }) => {\n  const srcDoc = `\n<script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<canvas id=\"myChart\" style=\"position: relative; height:80vh; width:80vw\"></canvas>\n\n<script>\nasync function fetchData() {\n\nconst tempData = ${data};\n\nconst title = tempData.map((entry) => entry[\"dapp\"]);\n\n\n  var ctx = document.getElementById('myChart').getContext('2d');\n  var myChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n          labels: title,\n          datasets: [\n          {\n              label: \"${label}\",\n              data: tempData.map(entry => entry.txs)\n          }\n          ]\n      }\n  });\n}\n\nfetchData();\n</script>\n`;\n  return (\n    <Widget\n      src=\"contribut3.near/widget/Card\"\n      props={{\n        header: header,\n        body: data ? (\n          <iframe\n            className=\"w-100\"\n            style={{ height: \"750px\" }}\n            srcDoc={srcDoc}\n          />\n        ) : (\n          <div style={{ margin: \"auto\" }}>\n            <Widget src=\"flashui.near/widget/Loading\" props={{}} />\n          </div>\n        ),\n      }}\n    />\n  );\n};\n\nconst doQueryToFlipside = (query, queryResultId, dataLabel) => {\n  // create run (https://docs.flipsidecrypto.com/flipside-api/rest-api)\n  const headers = {};\n  headers[\"Content-Type\"] = \"application/json\";\n  headers[\"x-api-key\"] = \"07811919-9c82-4e96-8496-9cf378305d22\";\n\n  if (!queryResultId) {\n    const requestResult = fetch(\"https://api-v2.flipsidecrypto.xyz/json-rpc\", {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        method: \"createQueryRun\",\n        params: [\n          {\n            resultTTLHours: 24,\n            maxAgeMinutes: 1440,\n            sql: query,\n            tags: {\n              source: \"postman-demo\",\n              env: \"test\",\n            },\n            dataSource: \"snowflake-default\",\n            dataProvider: \"flipside\",\n          },\n        ],\n        id: 1,\n      }),\n      redirect: \"follow\",\n    });\n\n    const queryResultId = requestResult.body.result.queryRun.id;\n    setTimeout(\n      doQueryToFlipside.bind(undefined, query, queryResultId, dataLabel),\n      400\n    );\n  } else {\n    // get results from query run\n\n    const result = fetch(\"https://api-v2.flipsidecrypto.xyz/json-rpc\", {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        method: \"getQueryRunResults\",\n        params: [\n          {\n            queryRunId: queryResultId,\n            format: \"json\",\n            page: {\n              number: 1,\n              size: 100,\n            },\n          },\n        ],\n        id: 1,\n      }),\n      redirect: \"follow\",\n    });\n\n    if (!result.body.result.rows) {\n      setTimeout(\n        doQueryToFlipside.bind(undefined, query, queryResultId, dataLabel),\n        1000\n      );\n    } else {\n      return State.update({\n        [dataLabel]: JSON.stringify(result.body.result.rows),\n      });\n    }\n  }\n};\n\nconst apiDoQueryToFlipSide = (query, dataLabel) => {\n  setTimeout(doQueryToFlipside.bind(undefined, query, null, dataLabel), 100);\n};\n\nconst generateMAU = (members) => {\n  if (members.length === 0) return [];\n  const formattedMembers = JSON.stringify(members)\n    .replaceAll(\"[\", \"(\")\n    .replaceAll(\"]\", \")\")\n    .replaceAll('\"', \"'\");\n\n  const query = `\n    SELECT\n        date_trunc('month', a.block_timestamp) AS \"date\",\n        concat(\n            date_part(year, \"date\"),\n            '-',\n            date_part(month, \"date\")\n        ) as year_month,\n        count(DISTINCT a.tx_signer) AS mau\n    FROM\n        near.core.fact_transactions a\n    WHERE\n        a.tx_signer != a.tx_receiver\n    AND a.tx_signer IN ${formattedMembers}\n    AND \"date\" > dateadd('month', -12, current_date)\n    GROUP BY\n        1\n    ORDER BY\n        1 DESC \n    `;\n\n  return apiDoQueryToFlipSide(query, \"mauChartData\"); // return doQueryToFlipside(query, \"queryResultIdMAU\");\n};\n\nconst generateDAU = (members) => {\n  if (members.length === 0) return [];\n  const formattedMembers = JSON.stringify(members)\n    .replaceAll(\"[\", \"(\")\n    .replaceAll(\"]\", \")\")\n    .replaceAll('\"', \"'\");\n\n  const query = `\n    SELECT\n      date_trunc('day', a.block_timestamp) AS \"date\",\n      concat(\n        date_part(year, \"date\"),\n        '-',\n        date_part(month, \"date\"),\n        '-',\n        date_part(day, \"date\")\n      ) as year_month,\n      count(DISTINCT a.tx_signer) AS dau\n    FROM\n      near.core.fact_transactions a\n    WHERE\n      a.tx_signer != a.tx_receiver\n      AND a.tx_signer IN ${formattedMembers}\n      AND \"date\" > dateadd('month', -1, current_date)\n    GROUP BY\n      1\n    ORDER BY\n      1 desc\n    `;\n\n  apiDoQueryToFlipSide(query, \"dauChartData\"); // return doQueryToFlipside(query, \"queryResultIdMAU\");\n};\n\nconst widgetRank = () => {\n  const data = Social.get(\"*/graph/star/**\", \"final\");\n\n  const starCountsByWidget = {};\n\n  Object.keys(data).forEach((user) => {\n    const userData = data[user];\n    const widgetData = userData?.graph?.star;\n\n    if (widgetData) {\n      state.selectedCommunityAccountMembers.map((widgetCreator) => {\n        const widgetList = widgetData[widgetCreator]?.widget;\n\n        if (widgetList) {\n          Object.keys(widgetList).forEach((widgetName) => {\n            const widgetPath = `${widgetCreator}/widget/${widgetName}`;\n\n            if (!starCountsByWidget[widgetPath]) {\n              starCountsByWidget[widgetPath] = 0;\n            }\n\n            if (typeof widgetList[widgetName] !== \"undefined\") {\n              starCountsByWidget[widgetPath]++;\n            }\n          });\n        }\n      });\n    }\n  });\n\n  const rankedWidgets = Object.entries(starCountsByWidget)\n    .filter(([widgetName, totalStars]) => typeof totalStars !== \"undefined\")\n    .sort((a, b) => b[1] - a[1]);\n\n  return (\n    <div>\n      <h3>Top Widgets by Members</h3>\n      <ol>\n        {rankedWidgets.map(([widgetPath, totalStars], index) => {\n          const [widgetCreator, _, widgetName] = widgetPath.split(\"/\");\n          return (\n            <li key={widgetPath}>\n              <a href={`/near/widget/ComponentDetailsPage?src=${widgetPath}`}>\n                {widgetName}\n              </a>{\" \"}\n              ({totalStars} stars) by{\" \"}\n              <Widget\n                src=\"mob.near/widget/N.ProfileLine\"\n                props={{ accountId: widgetCreator, hideAccountId: true }}\n              />\n            </li>\n          );\n        })}\n      </ol>\n    </div>\n  );\n};\n\nconst generateGithubActivities = (members) => {\n  if (members.length === 0) return [];\n  const formattedMembers = JSON.stringify(members)\n    .replaceAll(\"[\", \"(\")\n    .replaceAll(\"]\", \")\")\n    .replaceAll('\"', \"'\");\n\n  const query = `\n    WITH github_accounts AS (\n      SELECT signer_id AS account,\n      JSON_EXTRACT_PATH_TEXT(profile_data, 'github') AS github_account\n      FROM\n        near.social.fact_profile_changes\n      WHERE\n        profile_section = 'linktree'\n        AND github_account != ''\n        AND account IN ${formattedMembers}\n    )\n    SELECT\n      date_trunc('month', ga.createdat) AS \"date\",\n      concat(\n        date_part(year, \"date\"),\n        '-',\n        date_part(month, \"date\")\n      ) AS YEAR_MONTH,\n      count(*) AS total_issues_and_pr\n    FROM\n      github_accounts a\n      JOIN near.beta.github_activity ga ON a.github_account = ga.author\n    GROUP BY\n      1\n    ORDER BY\n      1 DESC;\n    `;\n\n  apiDoQueryToFlipSide(query, \"githubChartData\");\n};\n\nconst generateTotalLikes = (members) => {\n  if (members.length === 0) return [];\n  const formattedMembers = JSON.stringify(members)\n    .replaceAll(\"[\", \"(\")\n    .replaceAll(\"]\", \")\")\n    .replaceAll('\"', \"'\");\n  const query = `SELECT\n    COUNT(*) as total\n      FROM\n        near.social.fact_decoded_actions\n      WHERE\n        node = 'index'\n        and JSON_EXTRACT_PATH_TEXT(node_data, 'like') != ''\n        and signer_id in ${formattedMembers}\n  `;\n\n  apiDoQueryToFlipSide(query, \"totalLikes\");\n};\n\nconst generateTotalWalletsCreated = (members) => {\n  if (members.length === 0) return [];\n  const formattedMembers = JSON.stringify(members)\n    .replaceAll(\"[\", \"(\")\n    .replaceAll(\"]\", \")\")\n    .replaceAll('\"', \"'\");\n  const query = `select\n      count(*) as total\n    from\n      near.core.fact_receipts\n    where\n      receiver_id = 'near'\n      AND actions:predecessor_id IN ${formattedMembers}\n      AND actions:receipt:Action:actions[0]:FunctionCall:method_name = 'create_account'\n    ;\n  `;\n\n  apiDoQueryToFlipSide(query, \"totalWallets\");\n};\n\nconst generateNFTMints = (members) => {\n  if (members.length === 0) return [];\n  const formattedMembers = JSON.stringify(members)\n    .replaceAll(\"[\", \"(\")\n    .replaceAll(\"]\", \")\")\n    .replaceAll('\"', \"'\");\n  const query = `SELECT\n        date_trunc('month', block_timestamp) AS \"date\",\n        concat(\n          date_part(year, \"date\"),\n          '-',\n          date_part(month, \"date\")\n        ) AS YEAR_MONTH,\n        COUNT(DISTINCT tx_hash) as total_activity\n    FROM\n      near.nft.fact_nft_mints\n    WHERE (receiver_id IN ${formattedMembers} OR owner_id IN ${formattedMembers})\n    GROUP BY 1;\n  `;\n\n  apiDoQueryToFlipSide(query, \"nftMintsChartData\");\n};\n\nconst generateDappUsage = (members) => {\n  if (members.length === 0) return [];\n  const formattedMembers = JSON.stringify(members)\n    .replaceAll(\"[\", \"(\")\n    .replaceAll(\"]\", \")\")\n    .replaceAll('\"', \"'\");\n  const query = `with lst_top_dApps as (\n      select top 20\n        INITCAP( PROJECT_NAME) as dApp\n        ,count(DISTINCT block_timestamp::date) as \"Activity days\"\n        ,count(DISTINCT tx_hash) as TXs\n        ,TXs / \"Activity days\" as \"Transaction per day\"\n      from near.core.fact_transactions\n        join near.core.dim_address_labels on address = TX_RECEIVER\n      where label_type='dapp' and tx_signer in ${formattedMembers}\n      group by 1\n      )\n      select * from lst_top_dApps;\n  `;\n\n  apiDoQueryToFlipSide(query, \"dappUsageChartData\");\n};\n\nState.update({\n  selectedCommunityAccountMembers: getMembers(state.selectedCommunityAccount),\n});\ngenerateGithubActivities(state.selectedCommunityAccountMembers);\ngenerateMAU(state.selectedCommunityAccountMembers);\ngenerateTotalLikes(state.selectedCommunityAccountMembers);\ngenerateDAU(state.selectedCommunityAccountMembers);\ngenerateTotalWalletsCreated(state.selectedCommunityAccountMembers);\ngenerateNFTMints(state.selectedCommunityAccountMembers);\ngenerateDappUsage(state.selectedCommunityAccountMembers);\n\nreturn (\n  <div className=\"container\">\n    <h1>Regional Community Dashboard WIP</h1>\n    <Typeahead\n      placeholder=\"Select your regional community account:\"\n      options={communityAccounts}\n      value={state.selectedCommunityAccount}\n      onChange={(value) =>\n        State.update({\n          selectedCommunityAccount: value,\n          menu: \"overview\",\n          queryResultIdMAU: null,\n          queryResultIdDevActivities: null,\n          totalLikes: null,\n          githubChartData: null,\n          mauChartData: null,\n          dauChartData: null,\n          nftMintsChartData: null,\n          dappUsageChartData: null,\n        })\n      }\n    />\n    {/* Menu */}\n    <div className=\"m-1\">\n      <button\n        onClick={() => State.update({ menu: \"overview\" })}\n        disabled={\n          state.selectedCommunityAccount === null || state.menu === \"overview\"\n        }\n      >\n        Overview\n      </button>\n      <button\n        onClick={() => State.update({ menu: \"developer\" })}\n        disabled={\n          state.selectedCommunityAccount === null || state.menu === \"developer\"\n        }\n      >\n        Developer Activities\n      </button>\n      <button\n        onClick={() => State.update({ menu: \"dapp\" })}\n        disabled={\n          state.selectedCommunityAccount === null || state.menu === \"dapp\"\n        }\n      >\n        Dapp Activities\n      </button>\n      <button\n        onClick={() => State.update({ menu: \"nft\" })}\n        disabled={\n          state.selectedCommunityAccount === null || state.menu === \"nft\"\n        }\n      >\n        NFT Mints\n      </button>\n      <button\n        onClick={() => State.update({ menu: \"members\" })}\n        disabled={\n          state.selectedCommunityAccount === null || state.menu === \"members\"\n        }\n      >\n        Members List\n      </button>\n    </div>\n    {state.selectedCommunityAccount === null && (\n      <Widget src=\"rc-dao.near/widget/com.rank\" props={{}} />\n    )}\n    {state.menu === \"members\" && (\n      <div>\n        {chart({\n          header: <b>Members</b>,\n          staticDisplay: state.selectedCommunityAccountMembers && (\n            <Widget\n              src=\"indonesiaguild.near/widget/CRM\"\n              props={{ members: state.selectedCommunityAccountMembers }}\n            />\n          ),\n        })}\n      </div>\n    )}\n\n    {state.menu === \"developer\" && (\n      <>\n        {chart({\n          data: state[\"githubChartData\"],\n          header: <b>Github Activities Members</b>,\n          valueLabel: \"total_issues_and_pr\",\n          label: \"Total Issues And PR Activities\",\n          barColor: \"rgb(85, 192, 192)\",\n        })}\n        <div>\n          {chart({\n            header: <b>Total Widgets by Members</b>,\n            staticDisplay: getTotalWidgetByMembers(\n              state.selectedCommunityAccountMembers\n            ),\n          })}\n        </div>\n      </>\n    )}\n\n    {state.menu === \"overview\" && (\n      <>\n        <div>\n          {chart({\n            header: <b>Total Posts by Members</b>,\n            staticDisplay: getTotalPostByMembers(\n              state.selectedCommunityAccountMembers\n            ),\n          })}\n        </div>\n        <div style={{ display: \"flex\", flexFlow: \"row wrap\" }}>\n          <div style={{ width: \"calc(50%)\" }}>\n            {chart({\n              header: <b>Total Likes by Members</b>,\n              staticDisplay: JSON.parse(state[\"totalLikes\"])[0][\"total\"],\n            })}\n          </div>\n          <div style={{ width: \"calc(50%)\" }}>\n            {chart({\n              header: <b>Total Wallets Created by Members</b>,\n              staticDisplay: JSON.parse(state[\"totalWallets\"])[0][\"total\"],\n            })}\n          </div>\n        </div>\n      </>\n    )}\n    {state.menu === \"dapp\" && (\n      <div>\n        {chartDappUsage({\n          data: state[\"dappUsageChartData\"],\n          header: <b>Dapp Usage</b>,\n          valueLabel: \"txs\",\n          label: \"Total Transactions\",\n          barColor: \"rgb(85, 85, 180)\",\n        })}\n      </div>\n    )}\n    {(state.menu === \"dapp\" || state.menu === \"overview\") && (\n      <>\n        <div>\n          {chart({\n            data: state[\"mauChartData\"],\n            header: <b>Monthly Active Members</b>,\n            valueLabel: \"mau\",\n            label: \"MAU (members)\",\n            barColor: \"rgb(192, 85, 85)\",\n          })}\n        </div>\n        <div>\n          {chart({\n            data: state[\"dauChartData\"],\n            header: <b>Daily Active Members</b>,\n            valueLabel: \"dau\",\n            label: \"DAU (members)\",\n            barColor: \"rgb(140, 85, 85)\",\n          })}\n        </div>\n      </>\n    )}\n    {state.menu === \"nft\" && (\n      <div>\n        {chart({\n          data: state[\"nftMintsChartData\"],\n          header: <b>NFT Mints Activity</b>,\n          valueLabel: \"total_activity\",\n          label: \"NFT Mints Activity\",\n          barColor: \"rgb(85, 85, 180)\",\n        })}\n      </div>\n    )}\n    {state.menu === \"developer\" && (\n      <div>\n        {chart({\n          header: <b>Top Widgets</b>,\n          staticDisplay: widgetRank(),\n        })}\n      </div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/indonesiaguild.near/widget/RCDashboard-WIP", "fact_widget_deployments_id": "738f058ed9ea42fe0e0cfa93375e426b", "inserted_timestamp": "2023-12-09T12:21:06.896Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 7}