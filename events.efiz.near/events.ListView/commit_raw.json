{"tx_hash": "EyBHuzoVUD7Hh6696umy7DUJEKtfL1dZMcinDvMs3z3L", "action_id_social": "De8gxCGrTp9AgjLnmH4RP29JvrGfvNJ2mVv7NbeiPmHb-0-widget", "block_id": 113959569, "block_timestamp": "2024-03-02T16:58:57.664Z", "signer_id": "events.efiz.near", "widget_name": "events.ListView", "source_code": "const { Button, Hashtag } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n  Hashtag: () => <></>,\n};\n\nconst { Card } = VM.require(\"events.efiz.near/widget/events.Card\") || {\n  Card: () => <></>,\n};\n\nconst events = props.events ?? [];\nconst currentDate = props.currentDate;\n\nif (!events || !currentDate) {\n  return \"\";\n}\n\nconst currentMonthEvents = events.filter((event) => {\n  const eventDate = new Date(event.start);\n  return eventDate.getMonth() === currentDate.getMonth();\n});\n\nconst categorizedEvents = currentMonthEvents.reduce((result, event) => {\n  const eventDate = new Date(event.start)\n    .toLocaleDateString(\"en-us\", {\n      day: \"numeric\",\n      month: \"short\",\n    })\n    .split(\" \")\n    .reverse()\n    .join(\" \"); // Format date as a string\n  result[eventDate] = result[eventDate] || [];\n  result[eventDate].push(event);\n  return result;\n}, {});\n\nconst EventsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n`;\n\nconst formatStartTime = (time) => {\n  const date = new Date(time);\n  const options = {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    timeZoneName: \"short\",\n  };\n\n  return date.toLocaleString(\"en-US\", options);\n};\n\nconst dateKeys = Object.keys(categorizedEvents);\n\nconst today = new Date();\n\nconst futureEvents =\n  dateKeys.filter((date) => {\n    return categorizedEvents[date].some((event) => {\n      const eventStartDate = new Date(event.start);\n      const eventEndDate = new Date(event.end);\n      return eventStartDate >= today || eventEndDate > today;\n    });\n  }) || [];\n\nconst pastEvents =\n  dateKeys.filter((date) => !futureEvents.includes(date)) || [];\n\nconst sortEvents = (events) => {\n  return events.sort((a, b) => a.split(\" \")[0] + b.split(\" \"[0]));\n};\n\nfutureEvents.sort();\npastEvents.sort();\n\nconst EventGroup = ({ date }) => {\n  const Container = styled.div`\n    display: flex;\n    flex-direction: row;\n    gap: 32px;\n\n    @media screen and (max-width: 768px) {\n      flex-direction: column;\n      gap: 24px;\n    }\n  `;\n\n  return (\n    <Container>\n      <h3 className=\"flex-shrink-0 text-white\" style={{ minWidth: 65 }}>\n        <div className=\"d-flex gap-3 align-items-center\">\n          {date.split(\" \").map((it, i) => (\n            <span\n              style={{\n                fontSize: i === 0 ? \"24px\" : \"16px\",\n                color:\n                  i === 0\n                    ? \"var(--text-color, #fff)\"\n                    : \"var(--white-50, #CDD0D5)\",\n              }}\n            >\n              {it}\n            </span>\n          ))}\n        </div>\n      </h3>\n      <div className=\"w-100 d-flex flex-column gap-3\">\n        {categorizedEvents[date].map((event, i) => {\n          const hashtags =\n            event?.extendedProps?.hashtags.map((it) => {\n              if (it.customOption) {\n                return it.hashtags;\n              }\n              return it;\n            }) ?? [];\n          const organizers =\n            event?.extendedProps?.organizers.map((it) => {\n              if (it.customOption) {\n                return it.organizer;\n              }\n              return it;\n            }) ?? [];\n\n          const organizer = organizers[0];\n          const organizerProfile = Social.getr(`${organizer}/profile`);\n\n          const startTime = formatStartTime(event.start);\n\n          const eventAuthor = event?.key?.split(\"/\")[0] ?? \"\";\n          const eventApp = event?.key?.split(\"/\")[1] ?? \"\";\n          const eventType = event?.key?.split(\"/\")[2] ?? \"\";\n          const eventKey = event?.key?.split(\"/\")[3] ?? \"\";\n\n          const handleDelete = () => {\n            Social.set({\n              [eventApp]: {\n                [eventType]: {\n                  [eventKey]: {\n                    \"\": null,\n                  },\n                },\n              },\n            });\n          };\n\n          return (\n            <Card\n              key={i}\n              hashtags={hashtags}\n              handleDelete={eventAuthor === context.accountId && handleDelete}\n              event={event}\n              startTime={startTime}\n              organizerProfile={organizerProfile}\n              eventAuthor={eventAuthor}\n            />\n          );\n        })}\n      </div>\n    </Container>\n  );\n};\n\nconst PastEvents = () => {\n  return (\n    <>\n      {!pastEvents.length && (\n        <p className=\"text-white\">No past events this month</p>\n      )}\n      {pastEvents.map((date, i) => (\n        <EventGroup date={date} />\n      ))}\n    </>\n  );\n};\n\nconst [showPastEvents, setShowPastEvents] = useState(false);\n\nreturn (\n  <EventsContainer>\n    <Button onClick={() => setShowPastEvents((prev) => !prev)}>\n      {showPastEvents ? \"Hide\" : \"Show\"} Past Events\n    </Button>\n    {showPastEvents && <PastEvents />}\n    {!futureEvents.length && (\n      <p className=\"text-white\">No upcoming events this month</p>\n    )}\n    {futureEvents.map((date, i) => (\n      <EventGroup date={date} />\n    ))}\n  </EventsContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/events.efiz.near/widget/events.ListView", "fact_widget_deployments_id": "b870d87662b2127fea650babd2d40b3e", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 11}