{"tx_hash": "EyBHuzoVUD7Hh6696umy7DUJEKtfL1dZMcinDvMs3z3L", "action_id_social": "De8gxCGrTp9AgjLnmH4RP29JvrGfvNJ2mVv7NbeiPmHb-0-widget", "block_id": 113959569, "block_timestamp": "2024-03-02T16:58:57.664Z", "signer_id": "events.efiz.near", "widget_name": "page.router", "source_code": "// Social.get(`${accountId}/project/${appId}/config`) ??\nconst defaultRoutes = {\n  home: {\n    // maybe this can be the canvas\n    init: {\n      name: \"Home\",\n    },\n    required: true,\n  },\n  events: {\n    path: \"events.near/widget/events.Calendar\",\n    blockHeight: \"final\",\n    init: {\n      name: \"Calendar\",\n    },\n    required: true,\n  },\n  social: {\n    path: \"hack.near/widget/page.feed\",\n    blockHeight: \"final\",\n    init: {\n      name: \"Social\",\n    },\n  },\n  docs: {\n    path: \"hack.near/widget/page.docs\",\n    blockHeight: \"final\",\n    init: {\n      name: \"Guide\",\n    },\n  },\n};\n\nconst persistance = Storage.privateGet(\"newRoute\") || {\n  routeKey: \"\",\n  buttonText: \"\",\n  routePath: \"\",\n  initialProps: \"\",\n  createBlankPage: false,\n};\n\nconst store = Storage.get(\"events-app-creator\");\nconst storeKey = \"router\";\n\nconst initState = store[storeKey] ?? {\n  routes: props.routes ?? defaultRoutes,\n  param: \"page\",\n};\n\nState.init({ ...initState, ...persistance });\n\nconst set = (k, v) => {\n  State.update({ [k]: v });\n  Storage.set(\"events-app-creator\", { ...store, [storeKey]: state });\n};\n\nconst persist = (k, v) => {\n  State.update({ [k]: v });\n  Storage.privateSet(\"newRoute\", { ...state, [k]: v });\n};\n\nconst [routeKey, setRouteKey] = useState(\"\");\nconst [buttonText, setButtonText] = useState(\"\");\nconst [initialProps, setInitialProps] = useState(\"\");\nconst [createBlankPage, setCreateBlankPage] = useState(false);\nconst isValid = Social.get(`${state.routePath}/**`);\n\nconst addRoute = (newRouteKey, newRouteData) => {\n  State.update({ routes: { ...state.routes, [newRouteKey]: newRouteData } });\n  set(\"routes\", { ...state.routes, [newRouteKey]: newRouteData });\n};\n\nconst removeRoute = (routeKey) => {\n  const updatedRoutes = { ...state.routes };\n  delete updatedRoutes[routeKey];\n\n  State.update({\n    routes: updatedRoutes,\n  });\n  set(\"routes\", updatedRoutes);\n};\n\nreturn (\n  <div className=\"row\">\n    <h3>configure your routes</h3>\n    <div className=\"col-7\">\n      <div className=\"border p-3\">\n        <h5 className=\"m-1\">Create Route</h5>\n        <div className=\"m-2 d-flex flex-column gap-3\">\n          <div className=\"d-flex flex-row gap-3\">\n            <div className=\"p-1\">\n              <label htmlFor=\"routeKey\">Key:</label>\n              <input\n                id=\"routeKey\"\n                type=\"text\"\n                placeholder=\"Enter route key\"\n                value={state.routeKey}\n                onChange={(e) => persist(\"routeKey\", e.target.value)}\n              />\n            </div>\n            <div className=\"p-1\">\n              <label htmlFor=\"buttonText\">Navbar Item Text:</label>\n              <input\n                id=\"buttonText\"\n                type=\"text\"\n                placeholder=\"Enter navbar item text\"\n                value={state.buttonText}\n                onChange={(e) => persist(\"buttonText\", e.target.value)}\n              />\n            </div>\n            <div className=\"p-1\">\n              <button\n                className=\"btn btn-dark\"\n                disabled={(!isValid && state.createBlankPage) || state.routeKey === \"\"}\n                onClick={() => {\n                  const newRouteData = {\n                    path: state.routePath,\n                    blockHeight: \"final\",\n                    init: {\n                      name: state.buttonText || state.routeKey,\n                      ...(JSON.parse(state.initialProps) || {}),\n                    },\n                  };\n                  addRoute(state.routeKey, newRouteData);\n                }}\n              >\n                Add Route\n              </button>\n            </div>\n          </div>\n          <div className=\"p-1\">\n            <label htmlFor=\"routePath\">Path:</label>\n            <input\n              id=\"routePath\"\n              type=\"text\"\n              placeholder=\"Enter widget source path\"\n              value={state.routePath}\n              onChange={(e) => persist(\"routePath\", e.target.value)}\n              disabled={state.createBlankPage}\n            />\n            <div className=\"form-check\">\n              <input\n                id=\"createBlankPage\"\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                checked={state.createBlankPage}\n                onChange={(e) => persist(\"createBlankPage\", e.target.checked)}\n              />\n              <label className=\"form-check-label\" htmlFor=\"createBlankPage\">\n                Create Blank Page\n              </label>\n            </div>\n          </div>\n        </div>\n        <div className=\"m-2\">\n          <h5 className=\"m-1\">Initial Props</h5>\n          <textarea\n            className=\"form-control\"\n            rows=\"5\"\n            value={state.initialProps}\n            onChange={(e) => State.update({ initialProps: e.target.value })}\n            onBlur={() => {\n              try {\n                const parsedProps = JSON.parse(state.initialProps);\n                persist(\"initialProps\", JSON.stringify(parsedProps, null, 2));\n              } catch (error) {\n                console.error(\"Error parsing initial props JSON:\", error);\n                // Optionally handle error here\n              }\n            }}\n            placeholder=\"Enter initial props JSON...\"\n          />\n        </div>\n      </div>\n    </div>\n\n    <div className=\"col-5\">\n      {Object.keys(state.routes).map((key) => (\n        <div\n          key={key}\n          className=\"d-flex m-2 p-1 justify-content-between align-items-center\"\n        >\n          <Widget\n            src=\"hack.near/widget/template.inline\"\n            props={{ src: state.routes[key].path, hideDescription: true }}\n          />\n          <button\n            className=\"btn btn-outline-danger\"\n            onClick={() => removeRoute(key)}\n          >\n            X\n          </button>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/events.efiz.near/widget/page.router", "fact_widget_deployments_id": "2446532ddeeacc735eafbfb14c65885d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}