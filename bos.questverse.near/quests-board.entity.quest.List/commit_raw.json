{"tx_hash": "8t1RJJkAq6DkwYANkqEsPdxBFr1yNFvdw11qkFqB3dbz", "action_id_social": "9ZxXF1JknS36nQT8HZWzKzCtLJAm27WSYVfVQPXteiEV-0-widget", "block_id": 107259057, "block_timestamp": "2023-12-06T05:37:28.086Z", "signer_id": "bos.questverse.near", "widget_name": "quests-board.entity.quest.List", "source_code": "const questVerseProtocolAccountId =\n  props.questVerseProtocolAccountId ||\n  (context.widgetSrc ?? \"quests.near\").split(\"/\", 1)[0];\n\nconst nearQuestVerseWidgetsAccountId =\n  props.nearQuestVerseWidgetsAccountId ||\n  (context.widgetSrc ?? \"quests.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    questVerseProtocolAccountId: props.questVerseProtocolAccountId,\n    nearQuestVerseWidgetsAccountId: props.nearQuestVerseWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearQuestVerseWidgetsAccountId}/widget/quests-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.questVerseProtocolAccountId) {\n    linkProps.questVerseProtocolAccountId = props.questVerseProtocolAccountId;\n  }\n\n  if (props.nearQuestVerseWidgetsAccountId) {\n    linkProps.nearQuestVerseWidgetsAccountId =\n      props.nearQuestVerseWidgetsAccountId;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearQuestVerseWidgetsAccountId}/widget/quests-board.pages.${widgetName}${linkPropsQuery ? \"?\" : \"\"\n    }${linkPropsQuery}`;\n}\n\nfunction defaultRenderItem(questId, additionalProps) {\n  if (!additionalProps) {\n    additionalProps = {};\n  }\n  // It is important to have a non-zero-height element as otherwise InfiniteScroll loads too many items on initial load\n  return (\n    <div className=\"py-2\" style={{ minHeight: \"150px\" }}>\n      {widget(\n        `entity.quest.Card`,\n        {\n          questId: questId,\n          ...additionalProps,\n        },\n        questId\n      )}\n    </div>\n  );\n}\n\nconst renderItem = props.renderItem ?? defaultRenderItem;\n\nconst cachedRenderItem = (item, i) => {\n  const key = JSON.stringify(item);\n\n  if (!(key in state.cachedItems)) {\n    state.cachedItems[key] = renderItem(item);\n    State.update();\n  }\n\n  return state.cachedItems[key];\n};\n\nconst initialRenderLimit = props.initialRenderLimit ?? 3;\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\n\nconst ONE_DAY = 60 * 60 * 24 * 1000;\nconst ONE_WEEK = 60 * 60 * 24 * 1000 * 7;\nconst ONE_MONTH = 60 * 60 * 24 * 1000 * 30;\n\nlet questIds = [813740323, 893740323, 873740323, 823740323];\n// if (props.recency == \"all\") {\n//   questIds = Near.view(questVerseProtocolAccountId, \"get_all_quest_ids\");\n//   if (questIds) {\n//     questIds.reverse();\n//   }\n// } else if (props.recency == \"active\") {\n//   console.log(\"loading active\");\n// } else if (props.recency == \"expired\") {\n//   console.log(\"loading expired\");\n// } else if (props.recency == \"upcoming\") {\n//   console.log(\"loading upcoming\");\n// }\n\nconst loader = (\n  <div className=\"loader\" key={\"loader\"}>\n    <span\n      className=\"spinner-grow spinner-grow-sm me-1\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />\n    Loading ...\n  </div>\n);\n\nif (questIds === null) {\n  return loader;\n}\n\nconst initialItems = questIds;\nconst jInitialItems = JSON.stringify(initialItems);\n\nif (state.jInitialItems !== jInitialItems) {\n  State.update({\n    jIndex,\n    jInitialItems,\n    items: initialItems,\n    fetchFrom: false,\n    //nextFetchFrom: computeFetchFrom(initialItems, index.options.limit),\n    nextFetchFrom: false,\n    displayCount: initialRenderLimit,\n    cachedItems: {},\n  });\n}\n\nconst makeMoreItems = () => {\n  State.update({\n    displayCount: state.displayCount + addDisplayCount,\n  });\n  if (\n    state.items.length - state.displayCount < addDisplayCount * 2 &&\n    !state.fetchFrom &&\n    state.nextFetchFrom &&\n    state.nextFetchFrom !== state.fetchFrom\n  ) {\n    State.update({\n      fetchFrom: state.nextFetchFrom,\n    });\n  }\n};\n\nconst fetchMore =\n  props.manual &&\n  (state.fetchFrom && state.items.length < state.displayCount\n    ? loader\n    : state.displayCount < state.items.length && (\n      <div key={\"loader more\"}>\n        <a href=\"javascript:void\" onClick={(e) => makeMoreItems()}>\n          {props.loadMoreText ?? \"Load more...\"}\n        </a>\n      </div>\n    ));\n\nconst items = state.items ? state.items.slice(0, state.displayCount) : [];\n\nconst renderedItems = items.map(cachedRenderItem);\n\nreturn (\n  <>\n    {state.items.length > 0 ? (\n      <InfiniteScroll\n        pageStart={0}\n        loadMore={makeMoreItems}\n        hasMore={state.displayCount < state.items.length}\n        loader={loader}\n      >\n        {renderedItems}\n      </InfiniteScroll>\n    ) : (\n      \"No Quests Created\"\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.questverse.near/widget/quests-board.entity.quest.List", "fact_widget_deployments_id": "c919a727959e12ee7e236331c5020938", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}