{"tx_hash": "Hi3f1ZC89Whqui9PAgTfs1uz2qKQ5SXcCaJvCx7yvmBD", "action_id_social": "95WBfTzjSVj9wHC7pxZSZbb7qNaYNZTAqtzRzTiqYcYa-0-widget", "block_id": 107506092, "block_timestamp": "2023-12-09T09:23:14.846Z", "signer_id": "bos.questverse.near", "widget_name": "components.createQuestSteps.Steps", "source_code": "const { fetch_indexers_config } = VM.require(\n  \"bos.questverse.near/widget/data.data_indexers\"\n);\nconst INDEXERS = fetch_indexers_config();\n\nfunction getRandomValue() {\n  return Math.floor(Math.random() * 2000000) + 1;\n}\nfunction replaceTemplateLiterals(code_string, dataObject) {\n  return code_string.replace(/{{(.*?)}}/g, (match, key) => {\n    return dataObject[key] !== undefined ? dataObject[key] : match;\n  });\n}\nfunction transformVariables(quest_id, selectedOption, selectedAction) {\n  const replacePattern = /[.\\- ]/g;\n\n  quest_id = String(quest_id).replace(replacePattern, \"_\");\n  selectedOption = String(selectedOption).replace(replacePattern, \"_\");\n  selectedAction = String(selectedAction).replace(replacePattern, \"_\");\n\n  return `quest_${quest_id}_${selectedOption}_${selectedAction}`;\n}\nfunction handleFormComplete(value) {\n  const quest_id = getRandomValue();\n  console.log(value, \"form\");\n  const indexer_config =\n    INDEXERS[value.indexerConfig.selectedOption][\n    value.indexerConfig.selectedAction\n    ];\n  const new_code = replaceTemplateLiterals(indexer_config.code, value.formData);\n  console.log(indexer_config);\n\n  const indexer_name = transformVariables(\n    quest_id,\n    value.selectedOption,\n    value.selectedAction\n  );\n  const questArgs = {\n    args: {\n      quest_id: quest_id,\n      starts_at: value.starts_at,\n      expires_at: value.expires_at,\n      total_participants_allowed: value.total_participants_allowed,\n      indexer_name: value.indexerConfig.indexerId,\n      title: value.form.title,\n      description: value.form.description,\n      img_url: value.form.img_url,\n      tags: value.tags,\n      humans_only: value.humans_only,\n    },\n  };\n\n  const gas = 200000000000000;\n\n  Near.call([\n    {\n      contractName: \"queryapi.dataplatform.near\",\n      methodName: \"register_indexer_function\",\n      args: {\n        function_name: indexer_name,\n        code: new_code,\n        schema: indexer_config.schema,\n        filter_json: indexer_config.filter_json,\n        start_block_height: null,\n      },\n      gas,\n    },\n    {\n      contractName: \"v0.questverse.near\",\n      methodName: \"create_quest\",\n      args: questArgs.args,\n      deposit: (value.tokensAllocated + 0.02) * 1000000000000000000000000,\n    },\n  ]);\n}\n\nconst steps = [\n  {\n    title: \"Select Quest Template\",\n    active: state.step === 0,\n    icon: state.step > 0 ? <i className=\"bi bi-check2\"></i> : undefined,\n    className: state.step > 0 ? \"active-outline\" : undefined,\n  },\n  {\n    title: \"Allowlist\",\n    active: state.step === 1,\n    icon: state.step > 1 ? <i className=\"bi bi-check2\"></i> : undefined,\n    className: state.step > 1 ? \"active-outline\" : undefined,\n  },\n  {\n    title: \"Allocate Rewards\",\n    active: state.step === 2,\n    icon: state.step > 2 ? <i className=\"bi bi-check2\"></i> : undefined,\n    className: state.step > 2 ? \"active-outline\" : undefined,\n  },\n  {\n    title: \"Timing\",\n    active: state.step === 3,\n    icon: state.step > 3 ? <i className=\"bi bi-check2\"></i> : undefined,\n    className: state.step > 3 ? \"active-outline\" : undefined,\n  },\n  {\n    title: \"Finalize\",\n    active: state.step === 4,\n    icon: state.step > 4 ? <i className=\"bi bi-check2\"></i> : undefined,\n    className: state.step > 5 ? \"active-outline\" : undefined,\n  },\n];\n\nconst totalSteps = 4;\n\nlet initialFormState = {\n  quest_id: value.id,\n  title: \"\",\n  name: context.accountId,\n  starts_at: null,\n  expires_at: null,\n  total_participants_allowed: 10,\n  indexer_name: \"\",\n  description: \"\",\n  img_url: \"\",\n  tags: [\"quest\"],\n  humans_only: False,\n\n  //STEP\n  inputs: {},\n  //STEP 2\n  masterList: [],\n  allowedList: [],\n  excludedList: [],\n\n  //STEP 3\n  rewardNetwork: \"\",\n  rewardToken: \"\",\n  tokensAllocated: 0,\n  rewardAmount: \"\",\n\n  //STEP 4\n  date_start: \"\",\n  date_end: \"\",\n  indexerConfig: {\n    selectedOption: \"astrodao.near\",\n    selectedAction: \"join_dao\",\n    formData: {},\n    contractID: \"\",\n    inputs: {\n      account_id: \"\",\n      amount: \"\",\n      post_id: \"\",\n      count: \"\",\n      tags: \"\",\n      role: \"\",\n    },\n    indexerId: \"\",\n  },\n};\n\nState.init({\n  step: 0,\n  form: initialFormState,\n  errors: null,\n});\n\nconst handleNext = (data) => {\n  State.update({\n    // update here\n    step: state.step + 1,\n  });\n};\n\nconst handlePrevious = () => {\n  State.update({\n    step: state.step - 1,\n  });\n};\n\nconst handleStepComplete = (value) => {\n  console.log(value, \"value\");\n  console.log(state.form, \"allvals\");\n  // const stepValid = true;\n  // Object.keys(value).forEach((key) => {\n  //   const properties = types[\"hack.near/type/quest\"].properties.find(\n  //     (p) => p.name === key\n  //   );\n  //   const validation = validateType(properties.type, value[key], properties);\n  //   if (validation) {\n  //     State.update({\n  //       errors: {\n  //         ...state.errors,\n  //         [key]: validation,\n  //       },\n  //     });\n  //     stepValid = false;\n  //   } else {\n  //     State.update({\n  //       errors: {\n  //         ...state.errors,\n  //         [key]: null,\n  //       },\n  //     });\n  //   }\n  // });\n  //\n  // if (!stepValid) return;\n  //\n  if (state.step === 4) {\n    console.log(\"FINAL FORM\", value);\n    const finalAnswers = {\n      ...state.form,\n      ...value,\n    };\n\n    State.update({\n      step: state.step,\n      form: finalAnswers,\n    });\n    console.log(\"FINAL ANSWERS\", finalAnswers);\n    handleFormComplete(finalAnswers);\n    return;\n  }\n  State.update({\n    step: state.step + 1,\n    form: {\n      ...state.form,\n      ...value,\n    },\n  });\n};\n\nconst FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\nreturn (\n  <FormContainer>\n    <h1 className=\"h3 fw-bold mb-4\">Create a Quest</h1>\n    <Widget\n      src={`nearui.near/widget/Navigation.Steps`}\n      props={{\n        steps: steps,\n        onClick: (i) => {\n          if (i > state.step) return;\n          State.update({\n            step: i,\n          });\n        },\n      }}\n    />\n    <Widget\n      src={`bos.questverse.near/widget/components.createQuestSteps.step${state.step + 1\n        }`}\n      props={{\n        formState: state.form,\n        onComplete: handleStepComplete,\n        errors: state.errors,\n        renderFooter: (stepState, otherProps) => (\n          <Widget\n            src={`bos.questverse.near/widget/components.quest.create.footer`}\n            props={{\n              isLast: state.step >= steps.length - 1,\n              hasPrevious: state.step > 0,\n              onNext: () => {\n                handleStepComplete(stepState);\n              },\n              onPrevious: () => {\n                State.update({\n                  step: state.step - 1,\n                });\n              },\n              onReset: () => {\n                State.update({\n                  step: 0,\n                  form: initialFormState,\n                  errors: null,\n                });\n              },\n              ...otherProps,\n            }}\n          />\n        ),\n      }}\n    />\n  </FormContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.questverse.near/widget/components.createQuestSteps.Steps", "fact_widget_deployments_id": "21a4e4d6a6cab905e4d9fcdf4500cd0f", "inserted_timestamp": "2023-12-09T11:25:56.971Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 1}