{"tx_hash": "5RXr9w2gvYPK9fwk7PbbvmYY7P3hhbVtyFXnsgaAcHjW", "action_id_social": "83M6S81Y87hnWEYgh5Nwu39KkR8Y6JGtBLP2iT6NiYyW-0-widget", "block_id": 115344501, "block_timestamp": "2024-03-24T02:51:51.697Z", "signer_id": "177240d7728484e7a3878fdcd8557e89fd87a4350f45d5de9f7ab0dc0e2400c8", "widget_name": "valocracy.components.chat", "source_code": "/*\nLicense: MIT\nAuthor: frol.near\nHomepage: https://github.com/frol/bos-component-ts-starter#readme\n*/\n// Welcome to the home page of the first TypeScript BOS component!\n\n\n\n\n\n\n\n\n\nconst buildMeAuthorMessage = (text) => ({\n  avatar: \"https://cdn-icons-png.flaticon.com/512/552/552721.png\",\n  role: \"user\",\n  content: text,\n});\n\nconst buildRobotAuthorMessage = (text) => ({\n  avatar:\n    \"https://cdn.discordapp.com/avatars/1065775158062755880/9e014269c4512eee49fe55b30178e334.webp\",\n  role: \"assistant\",\n  content: text,\n});\n\nconst translateAuthor = (author) => {\n  if (author === \"user\") return \"Voc\u00ea\";\n  return \"Lucy\";\n};\n\nconst Message = (props) => {\n  return (\n    <div\n      style={{\n        width: \"80%\",\n        backgroundColor: \"#e3e3e3\",\n        padding: \"10px\",\n        borderRadius: \"10px\",\n        alignSelf: props.role === \"user\" ? \"flex-end\" : \"flex-start\",\n        flexBasis: \"1\",\n        flexShrink: \"1\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          gap: \"10px\",\n          alignItems: \"flex-end\",\n          marginBottom: \"10px\",\n        }}\n      >\n        <div style={{ display: \"block\" }}>\n          <img\n            src={props.avatar}\n            width={\"20px\"}\n            height={\"20px\"}\n            style={{ borderRadius: \"50%\" }}\n          />\n        </div>\n        <span style={{ display: \"block\" }}>{translateAuthor(props.role)}</span>\n      </div>\n      <span style={{ paddingLeft: \"8px\" }}>{props.content}</span>\n    </div>\n  );\n};\n\n// TypeScript! Yay!\n\n\nfunction MainComponent(props, context) {\n  // @ts-ignore\n  const [messages, setMessages] = useState([]);\n\n  // @ts-ignore\n  const [bufferMessage, setBufferMessage] = useState(\"\");\n  // @ts-ignore\n  const [isLoading, setIsLoading] = useState(false);\n\n  const requestRobot = (history) => {\n    // @ts-ignore\n    return asyncFetch(\"https://lucy.monkeybranch.com.br/api/text/gpt35_16k\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        system: \"valocracy\",\n        temperature: 0.6,\n        messages: history.map(({ role, content }) => ({ role, content })),\n      }),\n    })\n      .then((resp) => {\n        const newMessages = [\n          ...history,\n          buildRobotAuthorMessage(resp.body.data.message),\n        ];\n        setMessages(newMessages);\n      })\n      .catch((err) => {\n        console.error(\"Error\", err);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <div style={{ maxWidth: \"600px\", margin: \"0 auto\" }}>\n      <div\n        style={{\n          width: \"100%\",\n          height: \"500px\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          marginBottom: \"10px\",\n          gap: \"15px\",\n          overflowY: \"auto\",\n        }}\n      >\n        {messages.map((props) => {\n          return <Message {...props} />;\n        })}\n      </div>\n\n      <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"10px\" }}>\n        <textarea\n          disabled={isLoading}\n          placeholder=\"Envie sua mensagem\"\n          spellCheck=\"false\"\n          rows={2}\n          onChange={(evt) => {\n            setBufferMessage(evt.target.value);\n          }}\n          value={bufferMessage}\n          style={{ resize: \"none\", padding: \"8px\" }}\n        />\n        <button\n          disabled={isLoading}\n          onClick={() => {\n            setIsLoading(true);\n            const message = buildMeAuthorMessage(bufferMessage);\n            const newMessages = [...messages, message];\n            setBufferMessage(\"\");\n            setMessages(newMessages);\n            requestRobot(newMessages);\n          }}\n        >\n          {isLoading ? \"Carregando...\" : \"Enviar\"}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/177240d7728484e7a3878fdcd8557e89fd87a4350f45d5de9f7ab0dc0e2400c8/widget/valocracy.components.chat", "fact_widget_deployments_id": "ae512f7de130030f009cfc0ac2eadc89", "inserted_timestamp": "2024-03-24T04:29:17.083Z", "modified_timestamp": "2024-03-24T04:29:17.083Z", "__row_index": 0}