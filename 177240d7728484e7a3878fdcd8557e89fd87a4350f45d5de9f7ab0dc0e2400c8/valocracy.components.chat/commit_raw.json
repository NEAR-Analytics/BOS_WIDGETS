{"tx_hash": "hfRH3jCoPJknQVvqVB5inMHWbRMrFHvNCifXaroFi8p", "action_id_social": "FEPJ8gW6gstpKM1rqTNLHcZcD2tDs4RrGFh6qZsZzJUu-0-widget", "block_id": 115376133, "block_timestamp": "2024-03-24T13:50:38.694Z", "signer_id": "177240d7728484e7a3878fdcd8557e89fd87a4350f45d5de9f7ab0dc0e2400c8", "widget_name": "valocracy.components.chat", "source_code": "/*\nLicense: MIT\nAuthor: frol.near\nHomepage: https://github.com/frol/bos-component-ts-starter#readme\n*/\n// Welcome to the home page of the first TypeScript BOS component!\n\n\n\n\n\n\n\n\n\nconst buildMeAuthorMessage = (text) => ({\n  avatar: \"https://cdn-icons-png.flaticon.com/512/552/552721.png\",\n  role: \"user\",\n  content: text,\n});\n\nconst buildRobotAuthorMessage = (text) => ({\n  avatar:\n    \"https://cdn.discordapp.com/avatars/1065775158062755880/9e014269c4512eee49fe55b30178e334.webp\",\n  role: \"assistant\",\n  content: text,\n});\n\n//@ts-ignore\nconst StyledTextarea = styled.textarea`\n  &:focus-visible {\n    outline: none; // Remove o indicador de foco\n  }\n  // Voc\u00ea pode adicionar mais estilos aqui\n`;\n\nconst translateAuthor = (author) => {\n  if (author === \"user\") return \"Voc\u00ea\";\n  return \"Lucy\";\n};\n\nconst Message = (props) => {\n  return (\n    <div\n      style={{\n        width: \"80%\",\n        backgroundColor: \"#e3e3e3\",\n        padding: \"10px\",\n        background:\n          props.role === \"user\" ? \"rgb(228, 246, 255)\" : \"rgb(70, 151, 255)\",\n        alignSelf: props.role === \"user\" ? \"flex-end\" : \"flex-start\",\n        color: props.role === \"user\" ? \"black\" : \"white\",\n        borderRadius:\n          props.role === \"user\" ? \"10px 10px 0px 10px\" : \"10px 10px 10px 0px\",\n        flexBasis: \"1\",\n        flexShrink: \"1\",\n        fontWeight: \"bold\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          gap: \"10px\",\n          alignItems: \"flex-end\",\n          marginBottom: \"10px\",\n        }}\n      >\n        <div style={{ display: \"block\" }}>\n          <img\n            src={props.avatar}\n            width={\"20px\"}\n            height={\"20px\"}\n            style={{ borderRadius: \"50%\" }}\n          />\n        </div>\n        <span style={{ display: \"block\" }}>{translateAuthor(props.role)}</span>\n      </div>\n      <span style={{ paddingLeft: \"8px\" }}>{props.content}</span>\n    </div>\n  );\n};\n\n// TypeScript! Yay!\n\n\nfunction MainComponent(props, context) {\n  // @ts-ignore\n  const [messages, setMessages] = useState([]);\n\n  // @ts-ignore\n  const [bufferMessage, setBufferMessage] = useState(\"\");\n  // @ts-ignore\n  const [isLoading, setIsLoading] = useState(false);\n\n  const requestRobot = (history) => {\n    // @ts-ignore\n    return asyncFetch(\"https://lucy.monkeybranch.com.br/api/text/gpt35_16k\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        system: \"valocracy\",\n        temperature: 0.6,\n        messages: history.map(({ role, content }) => ({ role, content })),\n      }),\n    })\n      .then((resp) => {\n        const newMessages = [\n          ...history,\n          buildRobotAuthorMessage(resp.body.data.message),\n        ];\n        setMessages(newMessages);\n      })\n      .catch((err) => {\n        console.error(\"Error\", err);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <div style={{ backgroundColor: \"\" }}>\n      <div\n        style={{\n          maxWidth: \"700px\",\n          margin: \"0 auto\",\n        }}\n      >\n        <div\n          style={{\n            width: \"100%\",\n            height: \"500px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            marginBottom: \"10px\",\n            gap: \"15px\",\n            overflowY: \"auto\",\n            padding: \"15px 30px\",\n          }}\n        >\n          {messages.map((props) => {\n            return <Message {...props} />;\n          })}\n        </div>\n\n        <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"10px\" }}>\n          <StyledTextarea\n            disabled={isLoading}\n            placeholder=\"Envie sua mensagem\"\n            spellCheck=\"false\"\n            rows={2}\n            //@ts-ignore\n            onChange={(evt) => {\n              setBufferMessage(evt.target.value);\n            }}\n            value={bufferMessage}\n            style={{\n              resize: \"none\",\n              padding: \"8px\",\n              border: \"solid 1px #a2a2a2\",\n              borderRadius: \"5px 5px 0 0\",\n            }}\n          />\n          <button\n            style={{\n              backgroundColor: \"rgb(70, 151, 255)\",\n              fontWeight: \"bold\",\n              borderRadius: \"0 0 5px 5px\",\n            }}\n            disabled={isLoading}\n            onClick={() => {\n              setIsLoading(true);\n              const message = buildMeAuthorMessage(bufferMessage);\n              const newMessages = [...messages, message];\n              setBufferMessage(\"\");\n              setMessages(newMessages);\n              requestRobot(newMessages);\n            }}\n          >\n            {isLoading ? \"Carregando...\" : \"Enviar\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/177240d7728484e7a3878fdcd8557e89fd87a4350f45d5de9f7ab0dc0e2400c8/widget/valocracy.components.chat", "fact_widget_deployments_id": "c9dd3fdea8e64cc07dc0c3c0cf5f0a17", "inserted_timestamp": "2024-03-24T15:31:45.324Z", "modified_timestamp": "2024-03-24T15:31:45.324Z", "__row_index": 0}