{"tx_hash": "BqkSQJHw2B2TtAdrx1ZEJ9KEN4Fshdz7cbBegrxy9jzY", "action_id_social": "51nbzchNP6AgdoTwdgsXE22tyZXae5GyecGvTJ9pRP22-0-widget", "block_id": 104992349, "block_timestamp": "2023-11-05T11:54:00.274Z", "signer_id": "8e20af69ace22b11769e1cc3418481c31717d7318c397fcd6edec943e64b7f8f", "widget_name": "Untitled-0", "source_code": "const contractABI = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_verifier\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"router\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"proofId\",\n        type: \"string\",\n      },\n    ],\n    name: \"AlreadyMinted\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"ERC721IncorrectOwner\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ERC721InsufficientApproval\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"approver\",\n        type: \"address\",\n      },\n    ],\n    name: \"ERC721InvalidApprover\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n    ],\n    name: \"ERC721InvalidOperator\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"ERC721InvalidOwner\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"receiver\",\n        type: \"address\",\n      },\n    ],\n    name: \"ERC721InvalidReceiver\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"ERC721InvalidSender\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ERC721NonexistentToken\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"EmptyArgs\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"EmptySource\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"InvalidSignature\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"InvalidTokenAmounts\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"NoInlineSecrets\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"OnlyOwnerCanBurn\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"OnlyRouterCanFulfill\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnableInvalidOwner\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnableUnauthorizedAccount\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"UnexpectedRequestID\",\n    type: \"error\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"approved\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"ApprovalForAll\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"_fromTokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"_toTokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"BatchMetadataUpdate\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"MetadataUpdate\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"id\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"RequestFulfilled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"id\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"RequestSent\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"requestId\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"response\",\n        type: \"bytes\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"err\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"Response\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getApproved\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"response\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"err\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"handleOracleFulfillment\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n    ],\n    name: \"isApprovedForAll\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minBalance\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"string\",\n        name: \"uri\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"proofId\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"message\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"ring\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"responses\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"c\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    name: \"mintStatus\",\n    outputs: [\n      {\n        internalType: \"enum AliceRingToken.Status\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ownerOf\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"s_lastError\",\n    outputs: [\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"s_lastRequestId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"s_lastResponse\",\n    outputs: [\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"source\",\n        type: \"string\",\n      },\n      {\n        internalType: \"enum FunctionsRequest.Location\",\n        name: \"secretsLocation\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"encryptedSecretsReference\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"string[]\",\n        name: \"args\",\n        type: \"string[]\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"bytesArgs\",\n        type: \"bytes[]\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"subscriptionId\",\n        type: \"uint64\",\n      },\n    ],\n    name: \"sendRequest\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"_approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setApprovalForAll\",\n    outputs: [],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"interfaceId\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"supportsInterface\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokenURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"verifier\",\n    outputs: [\n      {\n        internalType: \"contract RingSigVerifier\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (!sender) return <Web3Connect connectLabel=\"Connect with Web3\" />;\nconsole.log(sender);\nState.init({\n  btcPrivateKey: \"\",\n  btcAmountToProove: \"\",\n  signatureData: \"\",\n  sigData: \"\",\n  txHash: \"\",\n  valAmount: \"\",\n  ring: \"\",\n});\nconst requestConfig = {\n  source:\n    \"const threshold = args[0]\\r\\n\" +\n    \"const addresses = args.slice(1)\\r\\n\" +\n    \"// Step 1: Create an array of URLs for balance checks\\r\\n\" +\n    \"const balanceCheckUrls = addresses.map(address => `https://api.blockcypher.com/v1/btc/test3/addrs/${address}/balance`);\\r\\n\" +\n    \"\\r\\n\" +\n    \"// Step 2 & 3: Send HTTP requests and await all responses\\r\\n\" +\n    \"const responses = await Promise.all(\\r\\n\" +\n    \"    balanceCheckUrls.map(url => Functions.makeHttpRequest({ url: url }))\\r\\n\" +\n    \");\\r\\n\" +\n    \"console.log(responses);\\r\\n\" +\n    \"// Step 4: Analyze balances\\r\\n\" +\n    \"const allAboveThreshold = responses.every(response => response.data.balance >= threshold);\\r\\n\" +\n    \"\\r\\n\" +\n    \"// Step 5: Return the result\\r\\n\" +\n    \"return Functions.encodeString(allAboveThreshold.toString());\\r\\n\",\n  codeLocation: 0,\n  secrets: {\n    apiKey: \"\",\n  },\n  secretsLocation: 2,\n  args: [\n    \"10\",\n    \"tb1qjhpxgm3c8jaswghzfc3tvt4stm6zrpjvhd6nkt\",\n    \"tb1qd5f0574r3mghfglmvlpfmknquarjw20r9mwm4v\",\n  ],\n  codeLanguage: 0,\n  expectedReturnType: \"uint256\",\n};\n\nasync function changeChain() {}\nasync function RingSignature(privateKey, Amount) {\n  const body = {\n    message: Amount + \"hello\",\n    privKey: privateKey,\n    amount: Amount,\n  };\n  console.log(body);\n  //call the API\n  asyncFetch(\"http://176.146.201.74:3000/api/sign/\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  }).then((res) => {\n    console.log(\"test: \", res.body);\n    //const uptime = res.body.uptime_sec;\n    //State.update({ signatureData: uptime });\n    State.update({ sigData: JSON.stringify(res.body) });\n  });\n  // return the payload using a state\n}\n\nfunction Mint() {\n  const consumerContract = new ethers.Contract(\n    \"0xEcc3f2E5E9411D3ba56F403c637d095c353eac6d\",\n    contractABI,\n    Ethers.provider().getSigner()\n  );\n  consumerContract\n    .sendRequest(\n      requestConfig.source,\n      requestConfig.secretsLocation,\n      \"0x\",\n      requestConfig.args,\n      [],\n      1573\n      /*\"ring message\",\n    \"ring\",\n    \"responses\",\n    \"c\"*/\n    )\n    .then((transactionHash) => {\n      console.log(transactionHash);\n      State.update({\n        txHash: transactionHash.hash,\n        valAmount: state.btcAmountToProove,\n        ring: \"tb1qjhpxgm3c8jaswghzfc3tvt4stm6zrpjvhd6nkt <br/> 19ZGQYEBTkY3pErS7DtnPBHkBvpMezgueo <br/> 1M9VJDR7MjvfTMF7Kn8QP8nzRJqrqRGQxz\",\n      });\n    });\n}\n\nreturn (\n  <div style={{ margin: left }}>\n    <div class=\"swap-main-container pt-2\">\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"BTC private key\"\n          value={state.btcPrivateKey}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"BTC amount to proove\"\n          value={state.btcAmountToProove}\n        />\n      </div>\n      <button\n        onClick={() =>\n          RingSignature(state.btcPrivateKey, state.btcAmountToProove)\n        }\n      >\n        Prooooooove it !\n      </button>\n      <div>\n        <div></div>\n        <div>\n          <text>Message Hash: {JSON.parse(state.sigData).message}</text>\n          <br />\n          <text>c: {JSON.parse(state.sigData).c}</text>\n          <br />\n          <text>responses: </text>\n          <text>{JSON.parse(state.sigData).responses[0]}</text>\n          <br />\n          <text>{JSON.parse(state.sigData).responses[1]}</text>\n          <br />\n          <text>{JSON.parse(state.sigData).responses[2]}</text>\n          <br />\n        </div>\n      </div>\n      <div>\n        <button onClick={() => Mint()}>verify & mint</button>\n      </div>\n      <div>\n        <p> proof verified onChain: </p>\n        <p>tx hash: {state.txHash}</p>\n        <p>Btc Owned: {state.valAmount}</p>\n        <p>Ring: {state.ring}</p>\n      </div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/8e20af69ace22b11769e1cc3418481c31717d7318c397fcd6edec943e64b7f8f/widget/Untitled-0", "fact_widget_deployments_id": "a723b9b8d60df85ab754c51e15bb6a32", "inserted_timestamp": "2023-11-05T13:45:52.827Z", "modified_timestamp": "2023-11-05T13:45:52.827Z", "__row_index": 99}