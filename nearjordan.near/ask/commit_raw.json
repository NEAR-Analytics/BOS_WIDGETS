{"tx_hash": "Ain4RFS2LuWC6zgNntqPDLwDT6uNHNEiyzk8KL9PZ9AC", "action_id_social": "iPPwBRmfvvu6VkoPm9jvNjXjYZUo2ywjM4GxMwn21Ps-0-widget", "block_id": 104373479, "block_timestamp": "2023-10-28T07:51:11.992Z", "signer_id": "nearjordan.near", "widget_name": "ask", "source_code": "  const [apiKey, setApiKey] = useState('');\n  const [question, setQuestion] = useState('');\n  const [answer, setAnswer] = useState('');\n  const [links, setLinks] = useState('');\n  const [parsedAnswer, setParsedAnswer] = useState('');\n  const [searchWords, setSearchWords] = useState('');\n  const [answerUrl, setAnswerUrl] = useState('');\n\n  const urlRoot = 'https://portal.311.nyc.gov';\n\n  const askGPT = (question, setAnswer) => {\n    const response = asyncFetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'gpt-3.5-turbo',\n        messages: [{ role: 'user', content: question }],\n        temperature: 0.5,\n      }),\n    });\n\n    response.then((data) => {\n        console.log(\"response\", data);\n        console.log(\"Answer\", data.body.choices[0].message.content);\n        setAnswer(data.body.choices[0].message.content);\n    }).catch((error) => {\n        console.log(\"error\", error);\n    });\n  };\n\n  const ask311 = (words, setAnswer) => {\n    const response = asyncFetch('https://portal.311.nyc.gov/search/?q=' + words, {\n        method: 'GET',\n    });\n\n    response.then((data) => {\n        const text = unescapeSequences(data.body);\n        console.log(\"response\", text);\n        const links = extractLinks(text);\n        const articleLinks = links.filter((link) => link.url.includes('article'));\n        console.log(\"articleLinks\", articleLinks, Array.isArray(articleLinks), articleLinks.length, typeof articleLinks);\n        const absoluteLinks = articleLinks.map(link => {\n          return { url: `${urlRoot}${link.url}`, text: link.text };\n        });\n        console.log(\"absoluteLinks\", absoluteLinks);\n        setAnswer(absoluteLinks);\n    }).catch((error) => {\n        console.log(\"error\", error);\n    });\n  };\n\n  const handleAsk = () => {\n    const prompt = \n      'For the following question, provide a set of 1 to 5 single word keywords that best describe the question. '+\n      'Answer with the keywords separated by + signs, no spacing and nothing else' + question;\n    askGPT(prompt, setSearchWords);\n  };\n\n  useEffect(() => {\n    if (searchWords) {\n      ask311(searchWords, setLinks);\n    }\n  }, [searchWords]);\n\n  useEffect(() => {\n    if (links) {\n      const textList = links\n        .map((item, index) => `${index}. \"${item.text}\"`)\n        .join('\\n');\n      const prompt = \n        \"Here is the user's question: \" + question + \n        \"Here are the relevant search result titles: \\n\" + textList +\n        \"Which of the above search results best answers the question? \" + \n        \"Please enter the just number of the best answer, without the answer.\"\n        setAnswer(prompt);\n        askGPT(prompt, setParsedAnswer);\n    }\n  }, [links]);\n\n  useEffect(() => {\n    if (parsedAnswer) {\n      const answerIndex = parseInt(parsedAnswer);\n      const answerLink = links[answerIndex];\n      setAnswerUrl(answerLink.url);\n      // const answerUrl = answerLink.url;\n      // console.log(\"answerUrl\", answerUrl);\n      // window.open(answerUrl, '_blank');\n    }\n  }, [parsedAnswer]);\n\n  function unescapeSequences(str) {\n    return str\n      .replace(/\\\\r/g, '\\r')  // Unescapes \\r\n      .replace(/\\\\n/g, '\\n')  // Unescapes \\n\n      .replace(/\\\\t/g, '\\t')  // Unescapes \\t\n      .replace(/\\\\\"/g, '\\\"')  // Unescapes \\\n      // Add other escape sequences as needed\n      ;\n  }\n\n  function extractLinks(html) {\n    const links = [];\n    // Use a non-capturing group (?:) with alternation to match either 'a' or 'link'\n    const regex = /<(?:a|link)[^>]*href=\"([^\"]*)\"[^>]*>([^<]*)<\\/(?:a|link)>/g;\n    let match;\n    while (match = regex.exec(html)) {\n      links.push({ url: match[1], text: match[2] });\n    }\n    return links;\n  }\n\n  return (<div style={{ padding: '20px' }}>\n      <input\n        type=\"text\"\n        placeholder=\"API Key\"\n        value={apiKey}\n        onChange={(e) => setApiKey(e.target.value)}\n        style={{ width: '300px', marginRight: '10px' }}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Question\"\n        value={question}\n        onChange={(e) => setQuestion(e.target.value)}\n        style={{ width: '600px', marginRight: '10px' }}\n      />\n      <button onClick={handleAsk}>Ask</button>\n      {/*<textarea\n        value={answer}\n        readOnly\n        style={{ width: '100%', height: '200px', marginTop: '10px' }}\n      />\n      <textarea\n        value={parsedAnswer}\n        readOnly\n        style={{ width: '100%', height: '200px', marginTop: '10px' }}\n      />*/}\n      {answerUrl && <a href={answerUrl} target=\"_blank\">Click here for your answer.</a>}\n    </div>\n  );\n\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearjordan.near/widget/ask", "fact_widget_deployments_id": "da7f5dd8ae57daa239e7791aadc637c7", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}